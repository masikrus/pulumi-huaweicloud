# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['NotificationConfigurationArgs', 'NotificationConfiguration']

@pulumi.input_type
class NotificationConfigurationArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[_builtins.str],
                 url: pulumi.Input[_builtins.str],
                 auth_sign_key: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_area: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a NotificationConfiguration resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name to which the notification configuration
               belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] url: Specifies the callback URL, which must start with `http://` or `https://`.
        :param pulumi.Input[_builtins.str] auth_sign_key: Specifies the authentication key.
               The valid length is `32` to `128` characters.
        :param pulumi.Input[_builtins.str] call_back_area: Specifies the region where the server that receives callback notifications
               is located.
               The valid vaules are as follows:
               + **mainland_china**: Indicates Chinese mainland.
               + **outside_mainland_china**: Indicates outside the Chinese mainland.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "url", url)
        if auth_sign_key is not None:
            pulumi.set(__self__, "auth_sign_key", auth_sign_key)
        if call_back_area is not None:
            pulumi.set(__self__, "call_back_area", call_back_area)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ingest domain name to which the notification configuration
        belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the callback URL, which must start with `http://` or `https://`.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter(name="authSignKey")
    def auth_sign_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authentication key.
        The valid length is `32` to `128` characters.
        """
        return pulumi.get(self, "auth_sign_key")

    @auth_sign_key.setter
    def auth_sign_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_sign_key", value)

    @_builtins.property
    @pulumi.getter(name="callBackArea")
    def call_back_area(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the server that receives callback notifications
        is located.
        The valid vaules are as follows:
        + **mainland_china**: Indicates Chinese mainland.
        + **outside_mainland_china**: Indicates outside the Chinese mainland.
        """
        return pulumi.get(self, "call_back_area")

    @call_back_area.setter
    def call_back_area(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "call_back_area", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _NotificationConfigurationState:
    def __init__(__self__, *,
                 auth_sign_key: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_area: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering NotificationConfiguration resources.
        :param pulumi.Input[_builtins.str] auth_sign_key: Specifies the authentication key.
               The valid length is `32` to `128` characters.
        :param pulumi.Input[_builtins.str] call_back_area: Specifies the region where the server that receives callback notifications
               is located.
               The valid vaules are as follows:
               + **mainland_china**: Indicates Chinese mainland.
               + **outside_mainland_china**: Indicates outside the Chinese mainland.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name to which the notification configuration
               belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] url: Specifies the callback URL, which must start with `http://` or `https://`.
        """
        if auth_sign_key is not None:
            pulumi.set(__self__, "auth_sign_key", auth_sign_key)
        if call_back_area is not None:
            pulumi.set(__self__, "call_back_area", call_back_area)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="authSignKey")
    def auth_sign_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authentication key.
        The valid length is `32` to `128` characters.
        """
        return pulumi.get(self, "auth_sign_key")

    @auth_sign_key.setter
    def auth_sign_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_sign_key", value)

    @_builtins.property
    @pulumi.getter(name="callBackArea")
    def call_back_area(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the server that receives callback notifications
        is located.
        The valid vaules are as follows:
        + **mainland_china**: Indicates Chinese mainland.
        + **outside_mainland_china**: Indicates outside the Chinese mainland.
        """
        return pulumi.get(self, "call_back_area")

    @call_back_area.setter
    def call_back_area(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "call_back_area", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ingest domain name to which the notification configuration
        belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the callback URL, which must start with `http://` or `https://`.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


@pulumi.type_token("huaweicloud:Live/notificationConfiguration:NotificationConfiguration")
class NotificationConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_sign_key: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_area: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a notification configuration resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        url = config.require_object("url")
        test = huaweicloud.live.NotificationConfiguration("test",
            domain_name=domain_name,
            url=url)
        ```

        ## Import

        The resource can be imported using `domain_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/notificationConfiguration:NotificationConfiguration test <domain_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_sign_key: Specifies the authentication key.
               The valid length is `32` to `128` characters.
        :param pulumi.Input[_builtins.str] call_back_area: Specifies the region where the server that receives callback notifications
               is located.
               The valid vaules are as follows:
               + **mainland_china**: Indicates Chinese mainland.
               + **outside_mainland_china**: Indicates outside the Chinese mainland.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name to which the notification configuration
               belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] url: Specifies the callback URL, which must start with `http://` or `https://`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NotificationConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a notification configuration resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        url = config.require_object("url")
        test = huaweicloud.live.NotificationConfiguration("test",
            domain_name=domain_name,
            url=url)
        ```

        ## Import

        The resource can be imported using `domain_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/notificationConfiguration:NotificationConfiguration test <domain_name>
        ```

        :param str resource_name: The name of the resource.
        :param NotificationConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NotificationConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_sign_key: Optional[pulumi.Input[_builtins.str]] = None,
                 call_back_area: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NotificationConfigurationArgs.__new__(NotificationConfigurationArgs)

            __props__.__dict__["auth_sign_key"] = None if auth_sign_key is None else pulumi.Output.secret(auth_sign_key)
            __props__.__dict__["call_back_area"] = call_back_area
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["region"] = region
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authSignKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(NotificationConfiguration, __self__).__init__(
            'huaweicloud:Live/notificationConfiguration:NotificationConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_sign_key: Optional[pulumi.Input[_builtins.str]] = None,
            call_back_area: Optional[pulumi.Input[_builtins.str]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            url: Optional[pulumi.Input[_builtins.str]] = None) -> 'NotificationConfiguration':
        """
        Get an existing NotificationConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_sign_key: Specifies the authentication key.
               The valid length is `32` to `128` characters.
        :param pulumi.Input[_builtins.str] call_back_area: Specifies the region where the server that receives callback notifications
               is located.
               The valid vaules are as follows:
               + **mainland_china**: Indicates Chinese mainland.
               + **outside_mainland_china**: Indicates outside the Chinese mainland.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name to which the notification configuration
               belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] url: Specifies the callback URL, which must start with `http://` or `https://`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NotificationConfigurationState.__new__(_NotificationConfigurationState)

        __props__.__dict__["auth_sign_key"] = auth_sign_key
        __props__.__dict__["call_back_area"] = call_back_area
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["region"] = region
        __props__.__dict__["url"] = url
        return NotificationConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authSignKey")
    def auth_sign_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the authentication key.
        The valid length is `32` to `128` characters.
        """
        return pulumi.get(self, "auth_sign_key")

    @_builtins.property
    @pulumi.getter(name="callBackArea")
    def call_back_area(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region where the server that receives callback notifications
        is located.
        The valid vaules are as follows:
        + **mainland_china**: Indicates Chinese mainland.
        + **outside_mainland_china**: Indicates outside the Chinese mainland.
        """
        return pulumi.get(self, "call_back_area")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ingest domain name to which the notification configuration
        belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the callback URL, which must start with `http://` or `https://`.
        """
        return pulumi.get(self, "url")

