# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['UrlValidationArgs', 'UrlValidation']

@pulumi.input_type
class UrlValidationArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[_builtins.str],
                 domain_name: pulumi.Input[_builtins.str],
                 key: pulumi.Input[_builtins.str],
                 timeout: pulumi.Input[_builtins.int],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a UrlValidation resource.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the signing method of the URL validation.
               The valid values are as follows:
               + **d_sha256**: Indicates signing method D, which uses the HMAC-SHA256 algorithm. This method is recommended.
               + **c_aes**: Indicates signing method C, which uses the symmetric encryption algorithm.
               + **b_md5**: Indicates signing method B, which uses the MD5 algorithm.
               + **a_md5**: Indicates signing method A, which uses the MD5 algorithm.
               
               > The signing methods A, B and C have security risks. The signing method D is more secure and recommended.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name to which the URL validation belongs.
               Including the ingest domain name and streaming domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key: Specifies the URL validation key value.
               The valid length is `32` characters, only uppercase letters, lwercase letters and digits are allowed.
               The value cannot contain only digits or letters.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout interval of URL validation.
               The valid value ranges from `60` to `2,592,000`, in seconds.
               
               > This parameter is used to check whether the Live ingest URL or streaming URL has expired.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "timeout", timeout)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the signing method of the URL validation.
        The valid values are as follows:
        + **d_sha256**: Indicates signing method D, which uses the HMAC-SHA256 algorithm. This method is recommended.
        + **c_aes**: Indicates signing method C, which uses the symmetric encryption algorithm.
        + **b_md5**: Indicates signing method B, which uses the MD5 algorithm.
        + **a_md5**: Indicates signing method A, which uses the MD5 algorithm.

        > The signing methods A, B and C have security risks. The signing method D is more secure and recommended.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the domain name to which the URL validation belongs.
        Including the ingest domain name and streaming domain name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the URL validation key value.
        The valid length is `32` characters, only uppercase letters, lwercase letters and digits are allowed.
        The value cannot contain only digits or letters.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the timeout interval of URL validation.
        The valid value ranges from `60` to `2,592,000`, in seconds.

        > This parameter is used to check whether the Live ingest URL or streaming URL has expired.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _UrlValidationState:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering UrlValidation resources.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the signing method of the URL validation.
               The valid values are as follows:
               + **d_sha256**: Indicates signing method D, which uses the HMAC-SHA256 algorithm. This method is recommended.
               + **c_aes**: Indicates signing method C, which uses the symmetric encryption algorithm.
               + **b_md5**: Indicates signing method B, which uses the MD5 algorithm.
               + **a_md5**: Indicates signing method A, which uses the MD5 algorithm.
               
               > The signing methods A, B and C have security risks. The signing method D is more secure and recommended.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name to which the URL validation belongs.
               Including the ingest domain name and streaming domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key: Specifies the URL validation key value.
               The valid length is `32` characters, only uppercase letters, lwercase letters and digits are allowed.
               The value cannot contain only digits or letters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout interval of URL validation.
               The valid value ranges from `60` to `2,592,000`, in seconds.
               
               > This parameter is used to check whether the Live ingest URL or streaming URL has expired.
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the signing method of the URL validation.
        The valid values are as follows:
        + **d_sha256**: Indicates signing method D, which uses the HMAC-SHA256 algorithm. This method is recommended.
        + **c_aes**: Indicates signing method C, which uses the symmetric encryption algorithm.
        + **b_md5**: Indicates signing method B, which uses the MD5 algorithm.
        + **a_md5**: Indicates signing method A, which uses the MD5 algorithm.

        > The signing methods A, B and C have security risks. The signing method D is more secure and recommended.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the domain name to which the URL validation belongs.
        Including the ingest domain name and streaming domain name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the URL validation key value.
        The valid length is `32` characters, only uppercase letters, lwercase letters and digits are allowed.
        The value cannot contain only digits or letters.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the timeout interval of URL validation.
        The valid value ranges from `60` to `2,592,000`, in seconds.

        > This parameter is used to check whether the Live ingest URL or streaming URL has expired.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)


@pulumi.type_token("huaweicloud:Live/urlValidation:UrlValidation")
class UrlValidation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages an URL validation resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        key = config.require_object("key")
        auth_type = config.require_object("authType")
        timeout = config.require_object("timeout")
        test = huaweicloud.live.UrlValidation("test",
            domain_name=domain_name,
            key=key,
            auth_type=auth_type,
            timeout=timeout)
        ```

        ## Import

        The resource can be imported using `domain_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/urlValidation:UrlValidation test <domain_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the signing method of the URL validation.
               The valid values are as follows:
               + **d_sha256**: Indicates signing method D, which uses the HMAC-SHA256 algorithm. This method is recommended.
               + **c_aes**: Indicates signing method C, which uses the symmetric encryption algorithm.
               + **b_md5**: Indicates signing method B, which uses the MD5 algorithm.
               + **a_md5**: Indicates signing method A, which uses the MD5 algorithm.
               
               > The signing methods A, B and C have security risks. The signing method D is more secure and recommended.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name to which the URL validation belongs.
               Including the ingest domain name and streaming domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key: Specifies the URL validation key value.
               The valid length is `32` characters, only uppercase letters, lwercase letters and digits are allowed.
               The value cannot contain only digits or letters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout interval of URL validation.
               The valid value ranges from `60` to `2,592,000`, in seconds.
               
               > This parameter is used to check whether the Live ingest URL or streaming URL has expired.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UrlValidationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an URL validation resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        key = config.require_object("key")
        auth_type = config.require_object("authType")
        timeout = config.require_object("timeout")
        test = huaweicloud.live.UrlValidation("test",
            domain_name=domain_name,
            key=key,
            auth_type=auth_type,
            timeout=timeout)
        ```

        ## Import

        The resource can be imported using `domain_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/urlValidation:UrlValidation test <domain_name>
        ```

        :param str resource_name: The name of the resource.
        :param UrlValidationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UrlValidationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UrlValidationArgs.__new__(UrlValidationArgs)

            if auth_type is None and not opts.urn:
                raise TypeError("Missing required property 'auth_type'")
            __props__.__dict__["auth_type"] = auth_type
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = None if key is None else pulumi.Output.secret(key)
            __props__.__dict__["region"] = region
            if timeout is None and not opts.urn:
                raise TypeError("Missing required property 'timeout'")
            __props__.__dict__["timeout"] = timeout
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["key"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(UrlValidation, __self__).__init__(
            'huaweicloud:Live/urlValidation:UrlValidation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_type: Optional[pulumi.Input[_builtins.str]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            key: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            timeout: Optional[pulumi.Input[_builtins.int]] = None) -> 'UrlValidation':
        """
        Get an existing UrlValidation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the signing method of the URL validation.
               The valid values are as follows:
               + **d_sha256**: Indicates signing method D, which uses the HMAC-SHA256 algorithm. This method is recommended.
               + **c_aes**: Indicates signing method C, which uses the symmetric encryption algorithm.
               + **b_md5**: Indicates signing method B, which uses the MD5 algorithm.
               + **a_md5**: Indicates signing method A, which uses the MD5 algorithm.
               
               > The signing methods A, B and C have security risks. The signing method D is more secure and recommended.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name to which the URL validation belongs.
               Including the ingest domain name and streaming domain name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key: Specifies the URL validation key value.
               The valid length is `32` characters, only uppercase letters, lwercase letters and digits are allowed.
               The value cannot contain only digits or letters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] timeout: Specifies the timeout interval of URL validation.
               The valid value ranges from `60` to `2,592,000`, in seconds.
               
               > This parameter is used to check whether the Live ingest URL or streaming URL has expired.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UrlValidationState.__new__(_UrlValidationState)

        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["key"] = key
        __props__.__dict__["region"] = region
        __props__.__dict__["timeout"] = timeout
        return UrlValidation(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the signing method of the URL validation.
        The valid values are as follows:
        + **d_sha256**: Indicates signing method D, which uses the HMAC-SHA256 algorithm. This method is recommended.
        + **c_aes**: Indicates signing method C, which uses the symmetric encryption algorithm.
        + **b_md5**: Indicates signing method B, which uses the MD5 algorithm.
        + **a_md5**: Indicates signing method A, which uses the MD5 algorithm.

        > The signing methods A, B and C have security risks. The signing method D is more secure and recommended.
        """
        return pulumi.get(self, "auth_type")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the domain name to which the URL validation belongs.
        Including the ingest domain name and streaming domain name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the URL validation key value.
        The valid length is `32` characters, only uppercase letters, lwercase letters and digits are allowed.
        The value cannot contain only digits or letters.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the timeout interval of URL validation.
        The valid value ranges from `60` to `2,592,000`, in seconds.

        > This parameter is used to check whether the Live ingest URL or streaming URL has expired.
        """
        return pulumi.get(self, "timeout")

