# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RecordingArgs', 'Recording']

@pulumi.input_type
class RecordingArgs:
    def __init__(__self__, *,
                 app_name: pulumi.Input[_builtins.str],
                 domain_name: pulumi.Input[_builtins.str],
                 obs: pulumi.Input['RecordingObsArgs'],
                 stream_name: pulumi.Input[_builtins.str],
                 flv: Optional[pulumi.Input['RecordingFlvArgs']] = None,
                 hls: Optional[pulumi.Input['RecordingHlsArgs']] = None,
                 mp4: Optional[pulumi.Input['RecordingMp4Args']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Recording resource.
        :param pulumi.Input[_builtins.str] app_name: Specifies the application name. To match all names, use an asterisk (*).
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name.
        :param pulumi.Input['RecordingObsArgs'] obs: Specifies the obs for storing recordings.
               The obs structure is documented below.
        :param pulumi.Input[_builtins.str] stream_name: Specifies the stream name. To match all names, use an asterisk (*).
        :param pulumi.Input['RecordingFlvArgs'] flv: Specifies the FLV configuration rule for storing recording as FLV.
               The flv structure is documented below.
        :param pulumi.Input['RecordingHlsArgs'] hls: Specifies the HLS configuration rule for storing recording as HLS.
               The hls structure is documented below.
        :param pulumi.Input['RecordingMp4Args'] mp4: Specifies the MP4 configuration rule for storing recording as MP4.
               The mp4 structure is documented below.
               
               > At least one of `hls`, `flv`, `mp4` must be specified.
               
               <a name="recording_obs"></a>
               The `obs` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region of OBS.
        :param pulumi.Input[_builtins.str] type: Specifies the types of recording notifications. The options are as follows:
               + **CONTINUOUS_RECORD**: continuous recording. Recording is triggered once streams are pushed to the recording system.
               + **COMMAND_RECORD**: command-based recording. Tenants need to run commands to start and stop recording after streams
               are pushed to the recording system.
               
               Defaults to `CONTINUOUS_RECORD`. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "obs", obs)
        pulumi.set(__self__, "stream_name", stream_name)
        if flv is not None:
            pulumi.set(__self__, "flv", flv)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if mp4 is not None:
            pulumi.set(__self__, "mp4", mp4)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the application name. To match all names, use an asterisk (*).
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "app_name", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ingest domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def obs(self) -> pulumi.Input['RecordingObsArgs']:
        """
        Specifies the obs for storing recordings.
        The obs structure is documented below.
        """
        return pulumi.get(self, "obs")

    @obs.setter
    def obs(self, value: pulumi.Input['RecordingObsArgs']):
        pulumi.set(self, "obs", value)

    @_builtins.property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the stream name. To match all names, use an asterisk (*).
        """
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "stream_name", value)

    @_builtins.property
    @pulumi.getter
    def flv(self) -> Optional[pulumi.Input['RecordingFlvArgs']]:
        """
        Specifies the FLV configuration rule for storing recording as FLV.
        The flv structure is documented below.
        """
        return pulumi.get(self, "flv")

    @flv.setter
    def flv(self, value: Optional[pulumi.Input['RecordingFlvArgs']]):
        pulumi.set(self, "flv", value)

    @_builtins.property
    @pulumi.getter
    def hls(self) -> Optional[pulumi.Input['RecordingHlsArgs']]:
        """
        Specifies the HLS configuration rule for storing recording as HLS.
        The hls structure is documented below.
        """
        return pulumi.get(self, "hls")

    @hls.setter
    def hls(self, value: Optional[pulumi.Input['RecordingHlsArgs']]):
        pulumi.set(self, "hls", value)

    @_builtins.property
    @pulumi.getter
    def mp4(self) -> Optional[pulumi.Input['RecordingMp4Args']]:
        """
        Specifies the MP4 configuration rule for storing recording as MP4.
        The mp4 structure is documented below.

        > At least one of `hls`, `flv`, `mp4` must be specified.

        <a name="recording_obs"></a>
        The `obs` block supports:
        """
        return pulumi.get(self, "mp4")

    @mp4.setter
    def mp4(self, value: Optional[pulumi.Input['RecordingMp4Args']]):
        pulumi.set(self, "mp4", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region of OBS.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the types of recording notifications. The options are as follows:
        + **CONTINUOUS_RECORD**: continuous recording. Recording is triggered once streams are pushed to the recording system.
        + **COMMAND_RECORD**: command-based recording. Tenants need to run commands to start and stop recording after streams
        are pushed to the recording system.

        Defaults to `CONTINUOUS_RECORD`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _RecordingState:
    def __init__(__self__, *,
                 app_name: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 flv: Optional[pulumi.Input['RecordingFlvArgs']] = None,
                 hls: Optional[pulumi.Input['RecordingHlsArgs']] = None,
                 mp4: Optional[pulumi.Input['RecordingMp4Args']] = None,
                 obs: Optional[pulumi.Input['RecordingObsArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Recording resources.
        :param pulumi.Input[_builtins.str] app_name: Specifies the application name. To match all names, use an asterisk (*).
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name.
        :param pulumi.Input['RecordingFlvArgs'] flv: Specifies the FLV configuration rule for storing recording as FLV.
               The flv structure is documented below.
        :param pulumi.Input['RecordingHlsArgs'] hls: Specifies the HLS configuration rule for storing recording as HLS.
               The hls structure is documented below.
        :param pulumi.Input['RecordingMp4Args'] mp4: Specifies the MP4 configuration rule for storing recording as MP4.
               The mp4 structure is documented below.
               
               > At least one of `hls`, `flv`, `mp4` must be specified.
               
               <a name="recording_obs"></a>
               The `obs` block supports:
        :param pulumi.Input['RecordingObsArgs'] obs: Specifies the obs for storing recordings.
               The obs structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region of OBS.
        :param pulumi.Input[_builtins.str] stream_name: Specifies the stream name. To match all names, use an asterisk (*).
        :param pulumi.Input[_builtins.str] type: Specifies the types of recording notifications. The options are as follows:
               + **CONTINUOUS_RECORD**: continuous recording. Recording is triggered once streams are pushed to the recording system.
               + **COMMAND_RECORD**: command-based recording. Tenants need to run commands to start and stop recording after streams
               are pushed to the recording system.
               
               Defaults to `CONTINUOUS_RECORD`. Changing this parameter will create a new resource.
        """
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if flv is not None:
            pulumi.set(__self__, "flv", flv)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if mp4 is not None:
            pulumi.set(__self__, "mp4", mp4)
        if obs is not None:
            pulumi.set(__self__, "obs", obs)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if stream_name is not None:
            pulumi.set(__self__, "stream_name", stream_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application name. To match all names, use an asterisk (*).
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_name", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ingest domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def flv(self) -> Optional[pulumi.Input['RecordingFlvArgs']]:
        """
        Specifies the FLV configuration rule for storing recording as FLV.
        The flv structure is documented below.
        """
        return pulumi.get(self, "flv")

    @flv.setter
    def flv(self, value: Optional[pulumi.Input['RecordingFlvArgs']]):
        pulumi.set(self, "flv", value)

    @_builtins.property
    @pulumi.getter
    def hls(self) -> Optional[pulumi.Input['RecordingHlsArgs']]:
        """
        Specifies the HLS configuration rule for storing recording as HLS.
        The hls structure is documented below.
        """
        return pulumi.get(self, "hls")

    @hls.setter
    def hls(self, value: Optional[pulumi.Input['RecordingHlsArgs']]):
        pulumi.set(self, "hls", value)

    @_builtins.property
    @pulumi.getter
    def mp4(self) -> Optional[pulumi.Input['RecordingMp4Args']]:
        """
        Specifies the MP4 configuration rule for storing recording as MP4.
        The mp4 structure is documented below.

        > At least one of `hls`, `flv`, `mp4` must be specified.

        <a name="recording_obs"></a>
        The `obs` block supports:
        """
        return pulumi.get(self, "mp4")

    @mp4.setter
    def mp4(self, value: Optional[pulumi.Input['RecordingMp4Args']]):
        pulumi.set(self, "mp4", value)

    @_builtins.property
    @pulumi.getter
    def obs(self) -> Optional[pulumi.Input['RecordingObsArgs']]:
        """
        Specifies the obs for storing recordings.
        The obs structure is documented below.
        """
        return pulumi.get(self, "obs")

    @obs.setter
    def obs(self, value: Optional[pulumi.Input['RecordingObsArgs']]):
        pulumi.set(self, "obs", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region of OBS.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the stream name. To match all names, use an asterisk (*).
        """
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stream_name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the types of recording notifications. The options are as follows:
        + **CONTINUOUS_RECORD**: continuous recording. Recording is triggered once streams are pushed to the recording system.
        + **COMMAND_RECORD**: command-based recording. Tenants need to run commands to start and stop recording after streams
        are pushed to the recording system.

        Defaults to `CONTINUOUS_RECORD`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:Live/recording:Recording")
class Recording(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 flv: Optional[pulumi.Input[Union['RecordingFlvArgs', 'RecordingFlvArgsDict']]] = None,
                 hls: Optional[pulumi.Input[Union['RecordingHlsArgs', 'RecordingHlsArgsDict']]] = None,
                 mp4: Optional[pulumi.Input[Union['RecordingMp4Args', 'RecordingMp4ArgsDict']]] = None,
                 obs: Optional[pulumi.Input[Union['RecordingObsArgs', 'RecordingObsArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a recording template within HuaweiCloud Live.

        ## Example Usage

        ### Create a recording template for an ingest domain name

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        ingest_domain_name = config.require_object("ingestDomainName")
        bucket_region = config.require_object("bucketRegion")
        bucket_name = config.require_object("bucketName")
        ingest_domain = huaweicloud.live.Domain("ingestDomain",
            name=ingest_domain_name,
            type="push")
        recording = huaweicloud.live.Recording("recording",
            domain_name=ingest_domain.name,
            app_name="live",
            stream_name="stream_name",
            type="CONTINUOUS_RECORD",
            obs={
                "region": bucket_region,
                "bucket": bucket_name,
            },
            hls={
                "recording_length": 15,
            })
        ```

        ## Import

        Recording templates can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/recording:Recording test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_name: Specifies the application name. To match all names, use an asterisk (*).
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name.
        :param pulumi.Input[Union['RecordingFlvArgs', 'RecordingFlvArgsDict']] flv: Specifies the FLV configuration rule for storing recording as FLV.
               The flv structure is documented below.
        :param pulumi.Input[Union['RecordingHlsArgs', 'RecordingHlsArgsDict']] hls: Specifies the HLS configuration rule for storing recording as HLS.
               The hls structure is documented below.
        :param pulumi.Input[Union['RecordingMp4Args', 'RecordingMp4ArgsDict']] mp4: Specifies the MP4 configuration rule for storing recording as MP4.
               The mp4 structure is documented below.
               
               > At least one of `hls`, `flv`, `mp4` must be specified.
               
               <a name="recording_obs"></a>
               The `obs` block supports:
        :param pulumi.Input[Union['RecordingObsArgs', 'RecordingObsArgsDict']] obs: Specifies the obs for storing recordings.
               The obs structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region of OBS.
        :param pulumi.Input[_builtins.str] stream_name: Specifies the stream name. To match all names, use an asterisk (*).
        :param pulumi.Input[_builtins.str] type: Specifies the types of recording notifications. The options are as follows:
               + **CONTINUOUS_RECORD**: continuous recording. Recording is triggered once streams are pushed to the recording system.
               + **COMMAND_RECORD**: command-based recording. Tenants need to run commands to start and stop recording after streams
               are pushed to the recording system.
               
               Defaults to `CONTINUOUS_RECORD`. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RecordingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a recording template within HuaweiCloud Live.

        ## Example Usage

        ### Create a recording template for an ingest domain name

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        ingest_domain_name = config.require_object("ingestDomainName")
        bucket_region = config.require_object("bucketRegion")
        bucket_name = config.require_object("bucketName")
        ingest_domain = huaweicloud.live.Domain("ingestDomain",
            name=ingest_domain_name,
            type="push")
        recording = huaweicloud.live.Recording("recording",
            domain_name=ingest_domain.name,
            app_name="live",
            stream_name="stream_name",
            type="CONTINUOUS_RECORD",
            obs={
                "region": bucket_region,
                "bucket": bucket_name,
            },
            hls={
                "recording_length": 15,
            })
        ```

        ## Import

        Recording templates can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Live/recording:Recording test <id>
        ```

        :param str resource_name: The name of the resource.
        :param RecordingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RecordingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 flv: Optional[pulumi.Input[Union['RecordingFlvArgs', 'RecordingFlvArgsDict']]] = None,
                 hls: Optional[pulumi.Input[Union['RecordingHlsArgs', 'RecordingHlsArgsDict']]] = None,
                 mp4: Optional[pulumi.Input[Union['RecordingMp4Args', 'RecordingMp4ArgsDict']]] = None,
                 obs: Optional[pulumi.Input[Union['RecordingObsArgs', 'RecordingObsArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RecordingArgs.__new__(RecordingArgs)

            if app_name is None and not opts.urn:
                raise TypeError("Missing required property 'app_name'")
            __props__.__dict__["app_name"] = app_name
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["flv"] = flv
            __props__.__dict__["hls"] = hls
            __props__.__dict__["mp4"] = mp4
            if obs is None and not opts.urn:
                raise TypeError("Missing required property 'obs'")
            __props__.__dict__["obs"] = obs
            __props__.__dict__["region"] = region
            if stream_name is None and not opts.urn:
                raise TypeError("Missing required property 'stream_name'")
            __props__.__dict__["stream_name"] = stream_name
            __props__.__dict__["type"] = type
        super(Recording, __self__).__init__(
            'huaweicloud:Live/recording:Recording',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_name: Optional[pulumi.Input[_builtins.str]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            flv: Optional[pulumi.Input[Union['RecordingFlvArgs', 'RecordingFlvArgsDict']]] = None,
            hls: Optional[pulumi.Input[Union['RecordingHlsArgs', 'RecordingHlsArgsDict']]] = None,
            mp4: Optional[pulumi.Input[Union['RecordingMp4Args', 'RecordingMp4ArgsDict']]] = None,
            obs: Optional[pulumi.Input[Union['RecordingObsArgs', 'RecordingObsArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            stream_name: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'Recording':
        """
        Get an existing Recording resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_name: Specifies the application name. To match all names, use an asterisk (*).
        :param pulumi.Input[_builtins.str] domain_name: Specifies the ingest domain name.
        :param pulumi.Input[Union['RecordingFlvArgs', 'RecordingFlvArgsDict']] flv: Specifies the FLV configuration rule for storing recording as FLV.
               The flv structure is documented below.
        :param pulumi.Input[Union['RecordingHlsArgs', 'RecordingHlsArgsDict']] hls: Specifies the HLS configuration rule for storing recording as HLS.
               The hls structure is documented below.
        :param pulumi.Input[Union['RecordingMp4Args', 'RecordingMp4ArgsDict']] mp4: Specifies the MP4 configuration rule for storing recording as MP4.
               The mp4 structure is documented below.
               
               > At least one of `hls`, `flv`, `mp4` must be specified.
               
               <a name="recording_obs"></a>
               The `obs` block supports:
        :param pulumi.Input[Union['RecordingObsArgs', 'RecordingObsArgsDict']] obs: Specifies the obs for storing recordings.
               The obs structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region of OBS.
        :param pulumi.Input[_builtins.str] stream_name: Specifies the stream name. To match all names, use an asterisk (*).
        :param pulumi.Input[_builtins.str] type: Specifies the types of recording notifications. The options are as follows:
               + **CONTINUOUS_RECORD**: continuous recording. Recording is triggered once streams are pushed to the recording system.
               + **COMMAND_RECORD**: command-based recording. Tenants need to run commands to start and stop recording after streams
               are pushed to the recording system.
               
               Defaults to `CONTINUOUS_RECORD`. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RecordingState.__new__(_RecordingState)

        __props__.__dict__["app_name"] = app_name
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["flv"] = flv
        __props__.__dict__["hls"] = hls
        __props__.__dict__["mp4"] = mp4
        __props__.__dict__["obs"] = obs
        __props__.__dict__["region"] = region
        __props__.__dict__["stream_name"] = stream_name
        __props__.__dict__["type"] = type
        return Recording(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the application name. To match all names, use an asterisk (*).
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ingest domain name.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter
    def flv(self) -> pulumi.Output[Optional['outputs.RecordingFlv']]:
        """
        Specifies the FLV configuration rule for storing recording as FLV.
        The flv structure is documented below.
        """
        return pulumi.get(self, "flv")

    @_builtins.property
    @pulumi.getter
    def hls(self) -> pulumi.Output[Optional['outputs.RecordingHls']]:
        """
        Specifies the HLS configuration rule for storing recording as HLS.
        The hls structure is documented below.
        """
        return pulumi.get(self, "hls")

    @_builtins.property
    @pulumi.getter
    def mp4(self) -> pulumi.Output[Optional['outputs.RecordingMp4']]:
        """
        Specifies the MP4 configuration rule for storing recording as MP4.
        The mp4 structure is documented below.

        > At least one of `hls`, `flv`, `mp4` must be specified.

        <a name="recording_obs"></a>
        The `obs` block supports:
        """
        return pulumi.get(self, "mp4")

    @_builtins.property
    @pulumi.getter
    def obs(self) -> pulumi.Output['outputs.RecordingObs']:
        """
        Specifies the obs for storing recordings.
        The obs structure is documented below.
        """
        return pulumi.get(self, "obs")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region of OBS.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the stream name. To match all names, use an asterisk (*).
        """
        return pulumi.get(self, "stream_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the types of recording notifications. The options are as follows:
        + **CONTINUOUS_RECORD**: continuous recording. Recording is triggered once streams are pushed to the recording system.
        + **COMMAND_RECORD**: command-based recording. Tenants need to run commands to start and stop recording after streams
        are pushed to the recording system.

        Defaults to `CONTINUOUS_RECORD`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

