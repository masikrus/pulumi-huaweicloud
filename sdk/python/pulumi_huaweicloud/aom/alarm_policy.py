# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlarmPolicyArgs', 'AlarmPolicy']

@pulumi.input_type
class AlarmPolicyArgs:
    def __init__(__self__, *,
                 alarm_rule_name: pulumi.Input[_builtins.str],
                 alarm_rule_type: pulumi.Input[_builtins.str],
                 alarm_notifications: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyAlarmNotificationArgs']]]] = None,
                 alarm_rule_description: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 alarm_rule_status: Optional[pulumi.Input[_builtins.str]] = None,
                 event_alarm_specs: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventAlarmSpecArgs']]]] = None,
                 metric_alarm_specs: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyMetricAlarmSpecArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AlarmPolicy resource.
        """
        pulumi.set(__self__, "alarm_rule_name", alarm_rule_name)
        pulumi.set(__self__, "alarm_rule_type", alarm_rule_type)
        if alarm_notifications is not None:
            pulumi.set(__self__, "alarm_notifications", alarm_notifications)
        if alarm_rule_description is not None:
            pulumi.set(__self__, "alarm_rule_description", alarm_rule_description)
        if alarm_rule_enable is not None:
            pulumi.set(__self__, "alarm_rule_enable", alarm_rule_enable)
        if alarm_rule_status is not None:
            pulumi.set(__self__, "alarm_rule_status", alarm_rule_status)
        if event_alarm_specs is not None:
            pulumi.set(__self__, "event_alarm_specs", event_alarm_specs)
        if metric_alarm_specs is not None:
            pulumi.set(__self__, "metric_alarm_specs", metric_alarm_specs)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="alarmRuleName")
    def alarm_rule_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "alarm_rule_name")

    @alarm_rule_name.setter
    def alarm_rule_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alarm_rule_name", value)

    @_builtins.property
    @pulumi.getter(name="alarmRuleType")
    def alarm_rule_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "alarm_rule_type")

    @alarm_rule_type.setter
    def alarm_rule_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alarm_rule_type", value)

    @_builtins.property
    @pulumi.getter(name="alarmNotifications")
    def alarm_notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyAlarmNotificationArgs']]]]:
        return pulumi.get(self, "alarm_notifications")

    @alarm_notifications.setter
    def alarm_notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyAlarmNotificationArgs']]]]):
        pulumi.set(self, "alarm_notifications", value)

    @_builtins.property
    @pulumi.getter(name="alarmRuleDescription")
    def alarm_rule_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "alarm_rule_description")

    @alarm_rule_description.setter
    def alarm_rule_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_rule_description", value)

    @_builtins.property
    @pulumi.getter(name="alarmRuleEnable")
    def alarm_rule_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "alarm_rule_enable")

    @alarm_rule_enable.setter
    def alarm_rule_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "alarm_rule_enable", value)

    @_builtins.property
    @pulumi.getter(name="alarmRuleStatus")
    def alarm_rule_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "alarm_rule_status")

    @alarm_rule_status.setter
    def alarm_rule_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_rule_status", value)

    @_builtins.property
    @pulumi.getter(name="eventAlarmSpecs")
    def event_alarm_specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventAlarmSpecArgs']]]]:
        return pulumi.get(self, "event_alarm_specs")

    @event_alarm_specs.setter
    def event_alarm_specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventAlarmSpecArgs']]]]):
        pulumi.set(self, "event_alarm_specs", value)

    @_builtins.property
    @pulumi.getter(name="metricAlarmSpecs")
    def metric_alarm_specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyMetricAlarmSpecArgs']]]]:
        return pulumi.get(self, "metric_alarm_specs")

    @metric_alarm_specs.setter
    def metric_alarm_specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyMetricAlarmSpecArgs']]]]):
        pulumi.set(self, "metric_alarm_specs", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AlarmPolicyState:
    def __init__(__self__, *,
                 alarm_notifications: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyAlarmNotificationArgs']]]] = None,
                 alarm_rule_description: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 alarm_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_status: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_type: Optional[pulumi.Input[_builtins.str]] = None,
                 event_alarm_specs: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventAlarmSpecArgs']]]] = None,
                 metric_alarm_specs: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyMetricAlarmSpecArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AlarmPolicy resources.
        """
        if alarm_notifications is not None:
            pulumi.set(__self__, "alarm_notifications", alarm_notifications)
        if alarm_rule_description is not None:
            pulumi.set(__self__, "alarm_rule_description", alarm_rule_description)
        if alarm_rule_enable is not None:
            pulumi.set(__self__, "alarm_rule_enable", alarm_rule_enable)
        if alarm_rule_name is not None:
            pulumi.set(__self__, "alarm_rule_name", alarm_rule_name)
        if alarm_rule_status is not None:
            pulumi.set(__self__, "alarm_rule_status", alarm_rule_status)
        if alarm_rule_type is not None:
            pulumi.set(__self__, "alarm_rule_type", alarm_rule_type)
        if event_alarm_specs is not None:
            pulumi.set(__self__, "event_alarm_specs", event_alarm_specs)
        if metric_alarm_specs is not None:
            pulumi.set(__self__, "metric_alarm_specs", metric_alarm_specs)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="alarmNotifications")
    def alarm_notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyAlarmNotificationArgs']]]]:
        return pulumi.get(self, "alarm_notifications")

    @alarm_notifications.setter
    def alarm_notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyAlarmNotificationArgs']]]]):
        pulumi.set(self, "alarm_notifications", value)

    @_builtins.property
    @pulumi.getter(name="alarmRuleDescription")
    def alarm_rule_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "alarm_rule_description")

    @alarm_rule_description.setter
    def alarm_rule_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_rule_description", value)

    @_builtins.property
    @pulumi.getter(name="alarmRuleEnable")
    def alarm_rule_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "alarm_rule_enable")

    @alarm_rule_enable.setter
    def alarm_rule_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "alarm_rule_enable", value)

    @_builtins.property
    @pulumi.getter(name="alarmRuleName")
    def alarm_rule_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "alarm_rule_name")

    @alarm_rule_name.setter
    def alarm_rule_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_rule_name", value)

    @_builtins.property
    @pulumi.getter(name="alarmRuleStatus")
    def alarm_rule_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "alarm_rule_status")

    @alarm_rule_status.setter
    def alarm_rule_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_rule_status", value)

    @_builtins.property
    @pulumi.getter(name="alarmRuleType")
    def alarm_rule_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "alarm_rule_type")

    @alarm_rule_type.setter
    def alarm_rule_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_rule_type", value)

    @_builtins.property
    @pulumi.getter(name="eventAlarmSpecs")
    def event_alarm_specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventAlarmSpecArgs']]]]:
        return pulumi.get(self, "event_alarm_specs")

    @event_alarm_specs.setter
    def event_alarm_specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventAlarmSpecArgs']]]]):
        pulumi.set(self, "event_alarm_specs", value)

    @_builtins.property
    @pulumi.getter(name="metricAlarmSpecs")
    def metric_alarm_specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyMetricAlarmSpecArgs']]]]:
        return pulumi.get(self, "metric_alarm_specs")

    @metric_alarm_specs.setter
    def metric_alarm_specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyMetricAlarmSpecArgs']]]]):
        pulumi.set(self, "metric_alarm_specs", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Aom/alarmPolicy:AlarmPolicy")
class AlarmPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_notifications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmPolicyAlarmNotificationArgs', 'AlarmPolicyAlarmNotificationArgsDict']]]]] = None,
                 alarm_rule_description: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 alarm_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_status: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_type: Optional[pulumi.Input[_builtins.str]] = None,
                 event_alarm_specs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmPolicyEventAlarmSpecArgs', 'AlarmPolicyEventAlarmSpecArgsDict']]]]] = None,
                 metric_alarm_specs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmPolicyMetricAlarmSpecArgs', 'AlarmPolicyMetricAlarmSpecArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AlarmPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlarmPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AlarmPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AlarmPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlarmPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_notifications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmPolicyAlarmNotificationArgs', 'AlarmPolicyAlarmNotificationArgsDict']]]]] = None,
                 alarm_rule_description: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 alarm_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_status: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_type: Optional[pulumi.Input[_builtins.str]] = None,
                 event_alarm_specs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmPolicyEventAlarmSpecArgs', 'AlarmPolicyEventAlarmSpecArgsDict']]]]] = None,
                 metric_alarm_specs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmPolicyMetricAlarmSpecArgs', 'AlarmPolicyMetricAlarmSpecArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlarmPolicyArgs.__new__(AlarmPolicyArgs)

            __props__.__dict__["alarm_notifications"] = alarm_notifications
            __props__.__dict__["alarm_rule_description"] = alarm_rule_description
            __props__.__dict__["alarm_rule_enable"] = alarm_rule_enable
            if alarm_rule_name is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_rule_name'")
            __props__.__dict__["alarm_rule_name"] = alarm_rule_name
            __props__.__dict__["alarm_rule_status"] = alarm_rule_status
            if alarm_rule_type is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_rule_type'")
            __props__.__dict__["alarm_rule_type"] = alarm_rule_type
            __props__.__dict__["event_alarm_specs"] = event_alarm_specs
            __props__.__dict__["metric_alarm_specs"] = metric_alarm_specs
            __props__.__dict__["region"] = region
        super(AlarmPolicy, __self__).__init__(
            'huaweicloud:Aom/alarmPolicy:AlarmPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alarm_notifications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmPolicyAlarmNotificationArgs', 'AlarmPolicyAlarmNotificationArgsDict']]]]] = None,
            alarm_rule_description: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_rule_enable: Optional[pulumi.Input[_builtins.bool]] = None,
            alarm_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_rule_status: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_rule_type: Optional[pulumi.Input[_builtins.str]] = None,
            event_alarm_specs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmPolicyEventAlarmSpecArgs', 'AlarmPolicyEventAlarmSpecArgsDict']]]]] = None,
            metric_alarm_specs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmPolicyMetricAlarmSpecArgs', 'AlarmPolicyMetricAlarmSpecArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'AlarmPolicy':
        """
        Get an existing AlarmPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlarmPolicyState.__new__(_AlarmPolicyState)

        __props__.__dict__["alarm_notifications"] = alarm_notifications
        __props__.__dict__["alarm_rule_description"] = alarm_rule_description
        __props__.__dict__["alarm_rule_enable"] = alarm_rule_enable
        __props__.__dict__["alarm_rule_name"] = alarm_rule_name
        __props__.__dict__["alarm_rule_status"] = alarm_rule_status
        __props__.__dict__["alarm_rule_type"] = alarm_rule_type
        __props__.__dict__["event_alarm_specs"] = event_alarm_specs
        __props__.__dict__["metric_alarm_specs"] = metric_alarm_specs
        __props__.__dict__["region"] = region
        return AlarmPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="alarmNotifications")
    def alarm_notifications(self) -> pulumi.Output[Sequence['outputs.AlarmPolicyAlarmNotification']]:
        return pulumi.get(self, "alarm_notifications")

    @_builtins.property
    @pulumi.getter(name="alarmRuleDescription")
    def alarm_rule_description(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "alarm_rule_description")

    @_builtins.property
    @pulumi.getter(name="alarmRuleEnable")
    def alarm_rule_enable(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "alarm_rule_enable")

    @_builtins.property
    @pulumi.getter(name="alarmRuleName")
    def alarm_rule_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "alarm_rule_name")

    @_builtins.property
    @pulumi.getter(name="alarmRuleStatus")
    def alarm_rule_status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "alarm_rule_status")

    @_builtins.property
    @pulumi.getter(name="alarmRuleType")
    def alarm_rule_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "alarm_rule_type")

    @_builtins.property
    @pulumi.getter(name="eventAlarmSpecs")
    def event_alarm_specs(self) -> pulumi.Output[Sequence['outputs.AlarmPolicyEventAlarmSpec']]:
        return pulumi.get(self, "event_alarm_specs")

    @_builtins.property
    @pulumi.getter(name="metricAlarmSpecs")
    def metric_alarm_specs(self) -> pulumi.Output[Sequence['outputs.AlarmPolicyMetricAlarmSpec']]:
        return pulumi.get(self, "metric_alarm_specs")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

