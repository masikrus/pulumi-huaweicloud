# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlarmSilenceRuleArgs', 'AlarmSilenceRule']

@pulumi.input_type
class AlarmSilenceRuleArgs:
    def __init__(__self__, *,
                 silence_conditions: pulumi.Input[Sequence[pulumi.Input['AlarmSilenceRuleSilenceConditionArgs']]],
                 silence_time: pulumi.Input['AlarmSilenceRuleSilenceTimeArgs'],
                 time_zone: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AlarmSilenceRule resource.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmSilenceRuleSilenceConditionArgs']]] silence_conditions: Specifies the silence conditions of the rule.
               Different silence conditions are parallel. A maximum of 10 silence conditions are allowed.
               The silence_conditions structure is documented below.
        :param pulumi.Input['AlarmSilenceRuleSilenceTimeArgs'] silence_time: Specifies the silence time of the rule.
               The silence_time structure is documented below.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone, e.g. **Asia/Shanghai**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
               
               <a name="silence_time"></a>
               The `silence_time` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the rule name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "silence_conditions", silence_conditions)
        pulumi.set(__self__, "silence_time", silence_time)
        pulumi.set(__self__, "time_zone", time_zone)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="silenceConditions")
    def silence_conditions(self) -> pulumi.Input[Sequence[pulumi.Input['AlarmSilenceRuleSilenceConditionArgs']]]:
        """
        Specifies the silence conditions of the rule.
        Different silence conditions are parallel. A maximum of 10 silence conditions are allowed.
        The silence_conditions structure is documented below.
        """
        return pulumi.get(self, "silence_conditions")

    @silence_conditions.setter
    def silence_conditions(self, value: pulumi.Input[Sequence[pulumi.Input['AlarmSilenceRuleSilenceConditionArgs']]]):
        pulumi.set(self, "silence_conditions", value)

    @_builtins.property
    @pulumi.getter(name="silenceTime")
    def silence_time(self) -> pulumi.Input['AlarmSilenceRuleSilenceTimeArgs']:
        """
        Specifies the silence time of the rule.
        The silence_time structure is documented below.
        """
        return pulumi.get(self, "silence_time")

    @silence_time.setter
    def silence_time(self, value: pulumi.Input['AlarmSilenceRuleSilenceTimeArgs']):
        pulumi.set(self, "silence_time", value)

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the time zone, e.g. **Asia/Shanghai**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "time_zone", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description.

        <a name="silence_time"></a>
        The `silence_time` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rule name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AlarmSilenceRuleState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 silence_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmSilenceRuleSilenceConditionArgs']]]] = None,
                 silence_time: Optional[pulumi.Input['AlarmSilenceRuleSilenceTimeArgs']] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering AlarmSilenceRule resources.
        :param pulumi.Input[_builtins.int] created_at: The creation time.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
               
               <a name="silence_time"></a>
               The `silence_time` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the rule name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmSilenceRuleSilenceConditionArgs']]] silence_conditions: Specifies the silence conditions of the rule.
               Different silence conditions are parallel. A maximum of 10 silence conditions are allowed.
               The silence_conditions structure is documented below.
        :param pulumi.Input['AlarmSilenceRuleSilenceTimeArgs'] silence_time: Specifies the silence time of the rule.
               The silence_time structure is documented below.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone, e.g. **Asia/Shanghai**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] updated_at: The last update time.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if silence_conditions is not None:
            pulumi.set(__self__, "silence_conditions", silence_conditions)
        if silence_time is not None:
            pulumi.set(__self__, "silence_time", silence_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description.

        <a name="silence_time"></a>
        The `silence_time` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rule name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="silenceConditions")
    def silence_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmSilenceRuleSilenceConditionArgs']]]]:
        """
        Specifies the silence conditions of the rule.
        Different silence conditions are parallel. A maximum of 10 silence conditions are allowed.
        The silence_conditions structure is documented below.
        """
        return pulumi.get(self, "silence_conditions")

    @silence_conditions.setter
    def silence_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmSilenceRuleSilenceConditionArgs']]]]):
        pulumi.set(self, "silence_conditions", value)

    @_builtins.property
    @pulumi.getter(name="silenceTime")
    def silence_time(self) -> Optional[pulumi.Input['AlarmSilenceRuleSilenceTimeArgs']]:
        """
        Specifies the silence time of the rule.
        The silence_time structure is documented below.
        """
        return pulumi.get(self, "silence_time")

    @silence_time.setter
    def silence_time(self, value: Optional[pulumi.Input['AlarmSilenceRuleSilenceTimeArgs']]):
        pulumi.set(self, "silence_time", value)

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time zone, e.g. **Asia/Shanghai**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_zone", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The last update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Aom/alarmSilenceRule:AlarmSilenceRule")
class AlarmSilenceRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 silence_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmSilenceRuleSilenceConditionArgs', 'AlarmSilenceRuleSilenceConditionArgsDict']]]]] = None,
                 silence_time: Optional[pulumi.Input[Union['AlarmSilenceRuleSilenceTimeArgs', 'AlarmSilenceRuleSilenceTimeArgsDict']]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an AOM alarm silence rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.aom.AlarmSilenceRule("test",
            name="test_rule",
            description="terraform test",
            time_zone="Asia/Shanghai",
            silence_time={
                "type": "WEEKLY",
                "starts_at": 64800,
                "ends_at": 86399,
                "scopes": [
                    1,
                    2,
                    3,
                    4,
                    5,
                ],
            },
            silence_conditions=[{
                "conditions": [{
                    "key": "event_severity",
                    "operate": "EXIST",
                }],
            }])
        ```

        ## Import

        The application operations management can be imported using the `id` (name), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/alarmSilenceRule:AlarmSilenceRule test test_rule
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
               
               <a name="silence_time"></a>
               The `silence_time` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the rule name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AlarmSilenceRuleSilenceConditionArgs', 'AlarmSilenceRuleSilenceConditionArgsDict']]]] silence_conditions: Specifies the silence conditions of the rule.
               Different silence conditions are parallel. A maximum of 10 silence conditions are allowed.
               The silence_conditions structure is documented below.
        :param pulumi.Input[Union['AlarmSilenceRuleSilenceTimeArgs', 'AlarmSilenceRuleSilenceTimeArgsDict']] silence_time: Specifies the silence time of the rule.
               The silence_time structure is documented below.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone, e.g. **Asia/Shanghai**.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlarmSilenceRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AOM alarm silence rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.aom.AlarmSilenceRule("test",
            name="test_rule",
            description="terraform test",
            time_zone="Asia/Shanghai",
            silence_time={
                "type": "WEEKLY",
                "starts_at": 64800,
                "ends_at": 86399,
                "scopes": [
                    1,
                    2,
                    3,
                    4,
                    5,
                ],
            },
            silence_conditions=[{
                "conditions": [{
                    "key": "event_severity",
                    "operate": "EXIST",
                }],
            }])
        ```

        ## Import

        The application operations management can be imported using the `id` (name), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/alarmSilenceRule:AlarmSilenceRule test test_rule
        ```

        :param str resource_name: The name of the resource.
        :param AlarmSilenceRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlarmSilenceRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 silence_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmSilenceRuleSilenceConditionArgs', 'AlarmSilenceRuleSilenceConditionArgsDict']]]]] = None,
                 silence_time: Optional[pulumi.Input[Union['AlarmSilenceRuleSilenceTimeArgs', 'AlarmSilenceRuleSilenceTimeArgsDict']]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlarmSilenceRuleArgs.__new__(AlarmSilenceRuleArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if silence_conditions is None and not opts.urn:
                raise TypeError("Missing required property 'silence_conditions'")
            __props__.__dict__["silence_conditions"] = silence_conditions
            if silence_time is None and not opts.urn:
                raise TypeError("Missing required property 'silence_time'")
            __props__.__dict__["silence_time"] = silence_time
            if time_zone is None and not opts.urn:
                raise TypeError("Missing required property 'time_zone'")
            __props__.__dict__["time_zone"] = time_zone
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(AlarmSilenceRule, __self__).__init__(
            'huaweicloud:Aom/alarmSilenceRule:AlarmSilenceRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.int]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            silence_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmSilenceRuleSilenceConditionArgs', 'AlarmSilenceRuleSilenceConditionArgsDict']]]]] = None,
            silence_time: Optional[pulumi.Input[Union['AlarmSilenceRuleSilenceTimeArgs', 'AlarmSilenceRuleSilenceTimeArgsDict']]] = None,
            time_zone: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.int]] = None) -> 'AlarmSilenceRule':
        """
        Get an existing AlarmSilenceRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] created_at: The creation time.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
               
               <a name="silence_time"></a>
               The `silence_time` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the rule name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AlarmSilenceRuleSilenceConditionArgs', 'AlarmSilenceRuleSilenceConditionArgsDict']]]] silence_conditions: Specifies the silence conditions of the rule.
               Different silence conditions are parallel. A maximum of 10 silence conditions are allowed.
               The silence_conditions structure is documented below.
        :param pulumi.Input[Union['AlarmSilenceRuleSilenceTimeArgs', 'AlarmSilenceRuleSilenceTimeArgsDict']] silence_time: Specifies the silence time of the rule.
               The silence_time structure is documented below.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone, e.g. **Asia/Shanghai**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] updated_at: The last update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlarmSilenceRuleState.__new__(_AlarmSilenceRuleState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["silence_conditions"] = silence_conditions
        __props__.__dict__["silence_time"] = silence_time
        __props__.__dict__["time_zone"] = time_zone
        __props__.__dict__["updated_at"] = updated_at
        return AlarmSilenceRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.int]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description.

        <a name="silence_time"></a>
        The `silence_time` block supports:
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the rule name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="silenceConditions")
    def silence_conditions(self) -> pulumi.Output[Sequence['outputs.AlarmSilenceRuleSilenceCondition']]:
        """
        Specifies the silence conditions of the rule.
        Different silence conditions are parallel. A maximum of 10 silence conditions are allowed.
        The silence_conditions structure is documented below.
        """
        return pulumi.get(self, "silence_conditions")

    @_builtins.property
    @pulumi.getter(name="silenceTime")
    def silence_time(self) -> pulumi.Output['outputs.AlarmSilenceRuleSilenceTime']:
        """
        Specifies the silence time of the rule.
        The silence_time structure is documented below.
        """
        return pulumi.get(self, "silence_time")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the time zone, e.g. **Asia/Shanghai**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.int]:
        """
        The last update time.
        """
        return pulumi.get(self, "updated_at")

