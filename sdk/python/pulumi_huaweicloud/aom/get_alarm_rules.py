# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAlarmRulesResult',
    'AwaitableGetAlarmRulesResult',
    'get_alarm_rules',
    'get_alarm_rules_output',
]

@pulumi.output_type
class GetAlarmRulesResult:
    """
    A collection of values returned by getAlarmRules.
    """
    def __init__(__self__, alarm_rule_name=None, alarm_rule_status=None, alarm_rule_type=None, alarm_rules=None, bind_notification_rule_id=None, enterprise_project_id=None, event_severity=None, event_source=None, id=None, prom_instance_id=None, region=None, related_cce_clusters=None):
        if alarm_rule_name and not isinstance(alarm_rule_name, str):
            raise TypeError("Expected argument 'alarm_rule_name' to be a str")
        pulumi.set(__self__, "alarm_rule_name", alarm_rule_name)
        if alarm_rule_status and not isinstance(alarm_rule_status, str):
            raise TypeError("Expected argument 'alarm_rule_status' to be a str")
        pulumi.set(__self__, "alarm_rule_status", alarm_rule_status)
        if alarm_rule_type and not isinstance(alarm_rule_type, str):
            raise TypeError("Expected argument 'alarm_rule_type' to be a str")
        pulumi.set(__self__, "alarm_rule_type", alarm_rule_type)
        if alarm_rules and not isinstance(alarm_rules, list):
            raise TypeError("Expected argument 'alarm_rules' to be a list")
        pulumi.set(__self__, "alarm_rules", alarm_rules)
        if bind_notification_rule_id and not isinstance(bind_notification_rule_id, str):
            raise TypeError("Expected argument 'bind_notification_rule_id' to be a str")
        pulumi.set(__self__, "bind_notification_rule_id", bind_notification_rule_id)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if event_severity and not isinstance(event_severity, str):
            raise TypeError("Expected argument 'event_severity' to be a str")
        pulumi.set(__self__, "event_severity", event_severity)
        if event_source and not isinstance(event_source, str):
            raise TypeError("Expected argument 'event_source' to be a str")
        pulumi.set(__self__, "event_source", event_source)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if prom_instance_id and not isinstance(prom_instance_id, str):
            raise TypeError("Expected argument 'prom_instance_id' to be a str")
        pulumi.set(__self__, "prom_instance_id", prom_instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if related_cce_clusters and not isinstance(related_cce_clusters, str):
            raise TypeError("Expected argument 'related_cce_clusters' to be a str")
        pulumi.set(__self__, "related_cce_clusters", related_cce_clusters)

    @_builtins.property
    @pulumi.getter(name="alarmRuleName")
    def alarm_rule_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "alarm_rule_name")

    @_builtins.property
    @pulumi.getter(name="alarmRuleStatus")
    def alarm_rule_status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "alarm_rule_status")

    @_builtins.property
    @pulumi.getter(name="alarmRuleType")
    def alarm_rule_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "alarm_rule_type")

    @_builtins.property
    @pulumi.getter(name="alarmRules")
    def alarm_rules(self) -> Sequence['outputs.GetAlarmRulesAlarmRuleResult']:
        """
        Indicates the alarm rules list.
        The alarm_rules structure is documented below.
        """
        return pulumi.get(self, "alarm_rules")

    @_builtins.property
    @pulumi.getter(name="bindNotificationRuleId")
    def bind_notification_rule_id(self) -> Optional[_builtins.str]:
        """
        Indicates the alarm action rule ID.
        """
        return pulumi.get(self, "bind_notification_rule_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        Indicates the enterprise project ID to which the rule belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="eventSeverity")
    def event_severity(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "event_severity")

    @_builtins.property
    @pulumi.getter(name="eventSource")
    def event_source(self) -> Optional[_builtins.str]:
        """
        Indicates the alarm source.
        """
        return pulumi.get(self, "event_source")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="promInstanceId")
    def prom_instance_id(self) -> Optional[_builtins.str]:
        """
        Indicates the prometheus instance ID.
        """
        return pulumi.get(self, "prom_instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="relatedCceClusters")
    def related_cce_clusters(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "related_cce_clusters")


class AwaitableGetAlarmRulesResult(GetAlarmRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlarmRulesResult(
            alarm_rule_name=self.alarm_rule_name,
            alarm_rule_status=self.alarm_rule_status,
            alarm_rule_type=self.alarm_rule_type,
            alarm_rules=self.alarm_rules,
            bind_notification_rule_id=self.bind_notification_rule_id,
            enterprise_project_id=self.enterprise_project_id,
            event_severity=self.event_severity,
            event_source=self.event_source,
            id=self.id,
            prom_instance_id=self.prom_instance_id,
            region=self.region,
            related_cce_clusters=self.related_cce_clusters)


def get_alarm_rules(alarm_rule_name: Optional[_builtins.str] = None,
                    alarm_rule_status: Optional[_builtins.str] = None,
                    alarm_rule_type: Optional[_builtins.str] = None,
                    bind_notification_rule_id: Optional[_builtins.str] = None,
                    enterprise_project_id: Optional[_builtins.str] = None,
                    event_severity: Optional[_builtins.str] = None,
                    event_source: Optional[_builtins.str] = None,
                    prom_instance_id: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    related_cce_clusters: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlarmRulesResult:
    """
    Use this data source to get the list of AOM alarm rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Aom.get_alarm_rules()
    ```


    :param _builtins.str alarm_rule_name: Specifies the alarm rule name.
    :param _builtins.str alarm_rule_status: Specifies the alarm rule status.
           Valid values are:
           + **OK**: normal
           + **alarm**: threshold-crossing
           + **Effective**: in use
           + **Invalid**: not in use
    :param _builtins.str alarm_rule_type: Specifies the alarm rule type.
           Valid values are:
           + **metric**: metric alarm rule
           + **event**: event alarm rule
    :param _builtins.str bind_notification_rule_id: Specifies the name of the bound alarm action rule.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the rule belongs.
    :param _builtins.str event_severity: Specifies the alarm severity.
           Valid values are **Critical**, **Major**, **Minor** and **Info**.
    :param _builtins.str event_source: Specifies the source of an event alarm rule.
           Valid values are **RDS**, **EVS**, **CCE**, **LTS** and **AOM**.
    :param _builtins.str prom_instance_id: Specifies the prometheus instance ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str related_cce_clusters: Specifies the related CCE cluster ID.
    """
    __args__ = dict()
    __args__['alarmRuleName'] = alarm_rule_name
    __args__['alarmRuleStatus'] = alarm_rule_status
    __args__['alarmRuleType'] = alarm_rule_type
    __args__['bindNotificationRuleId'] = bind_notification_rule_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['eventSeverity'] = event_severity
    __args__['eventSource'] = event_source
    __args__['promInstanceId'] = prom_instance_id
    __args__['region'] = region
    __args__['relatedCceClusters'] = related_cce_clusters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Aom/getAlarmRules:getAlarmRules', __args__, opts=opts, typ=GetAlarmRulesResult).value

    return AwaitableGetAlarmRulesResult(
        alarm_rule_name=pulumi.get(__ret__, 'alarm_rule_name'),
        alarm_rule_status=pulumi.get(__ret__, 'alarm_rule_status'),
        alarm_rule_type=pulumi.get(__ret__, 'alarm_rule_type'),
        alarm_rules=pulumi.get(__ret__, 'alarm_rules'),
        bind_notification_rule_id=pulumi.get(__ret__, 'bind_notification_rule_id'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        event_severity=pulumi.get(__ret__, 'event_severity'),
        event_source=pulumi.get(__ret__, 'event_source'),
        id=pulumi.get(__ret__, 'id'),
        prom_instance_id=pulumi.get(__ret__, 'prom_instance_id'),
        region=pulumi.get(__ret__, 'region'),
        related_cce_clusters=pulumi.get(__ret__, 'related_cce_clusters'))
def get_alarm_rules_output(alarm_rule_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           alarm_rule_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           alarm_rule_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           bind_notification_rule_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           event_severity: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           event_source: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           prom_instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           related_cce_clusters: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAlarmRulesResult]:
    """
    Use this data source to get the list of AOM alarm rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Aom.get_alarm_rules()
    ```


    :param _builtins.str alarm_rule_name: Specifies the alarm rule name.
    :param _builtins.str alarm_rule_status: Specifies the alarm rule status.
           Valid values are:
           + **OK**: normal
           + **alarm**: threshold-crossing
           + **Effective**: in use
           + **Invalid**: not in use
    :param _builtins.str alarm_rule_type: Specifies the alarm rule type.
           Valid values are:
           + **metric**: metric alarm rule
           + **event**: event alarm rule
    :param _builtins.str bind_notification_rule_id: Specifies the name of the bound alarm action rule.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the rule belongs.
    :param _builtins.str event_severity: Specifies the alarm severity.
           Valid values are **Critical**, **Major**, **Minor** and **Info**.
    :param _builtins.str event_source: Specifies the source of an event alarm rule.
           Valid values are **RDS**, **EVS**, **CCE**, **LTS** and **AOM**.
    :param _builtins.str prom_instance_id: Specifies the prometheus instance ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str related_cce_clusters: Specifies the related CCE cluster ID.
    """
    __args__ = dict()
    __args__['alarmRuleName'] = alarm_rule_name
    __args__['alarmRuleStatus'] = alarm_rule_status
    __args__['alarmRuleType'] = alarm_rule_type
    __args__['bindNotificationRuleId'] = bind_notification_rule_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['eventSeverity'] = event_severity
    __args__['eventSource'] = event_source
    __args__['promInstanceId'] = prom_instance_id
    __args__['region'] = region
    __args__['relatedCceClusters'] = related_cce_clusters
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Aom/getAlarmRules:getAlarmRules', __args__, opts=opts, typ=GetAlarmRulesResult)
    return __ret__.apply(lambda __response__: GetAlarmRulesResult(
        alarm_rule_name=pulumi.get(__response__, 'alarm_rule_name'),
        alarm_rule_status=pulumi.get(__response__, 'alarm_rule_status'),
        alarm_rule_type=pulumi.get(__response__, 'alarm_rule_type'),
        alarm_rules=pulumi.get(__response__, 'alarm_rules'),
        bind_notification_rule_id=pulumi.get(__response__, 'bind_notification_rule_id'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        event_severity=pulumi.get(__response__, 'event_severity'),
        event_source=pulumi.get(__response__, 'event_source'),
        id=pulumi.get(__response__, 'id'),
        prom_instance_id=pulumi.get(__response__, 'prom_instance_id'),
        region=pulumi.get(__response__, 'region'),
        related_cce_clusters=pulumi.get(__response__, 'related_cce_clusters')))
