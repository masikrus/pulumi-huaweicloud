# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MessageTemplateArgs', 'MessageTemplate']

@pulumi.input_type
class MessageTemplateArgs:
    def __init__(__self__, *,
                 locale: pulumi.Input[_builtins.str],
                 templates: pulumi.Input[Sequence[pulumi.Input['MessageTemplateTemplateArgs']]],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MessageTemplate resource.
        :param pulumi.Input[_builtins.str] locale: Specifies the meesage template language. Valid values are **en-us** and **zh-cn**.
        :param pulumi.Input[Sequence[pulumi.Input['MessageTemplateTemplateArgs']]] templates: Specifies the templates.
               The templates structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the meesage template description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the template belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the meesage template name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source: Specifies the template type.
               + If it is empty, means it is a metric or event template.
               + If it is **LTS**, means it is a log template.
               Changing this creates a new resource.
               
               <a name="block--templates"></a>
               The `templates` block supports:
        """
        pulumi.set(__self__, "locale", locale)
        pulumi.set(__self__, "templates", templates)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter
    def locale(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the meesage template language. Valid values are **en-us** and **zh-cn**.
        """
        return pulumi.get(self, "locale")

    @locale.setter
    def locale(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "locale", value)

    @_builtins.property
    @pulumi.getter
    def templates(self) -> pulumi.Input[Sequence[pulumi.Input['MessageTemplateTemplateArgs']]]:
        """
        Specifies the templates.
        The templates structure is documented below.
        """
        return pulumi.get(self, "templates")

    @templates.setter
    def templates(self, value: pulumi.Input[Sequence[pulumi.Input['MessageTemplateTemplateArgs']]]):
        pulumi.set(self, "templates", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the meesage template description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the template belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the meesage template name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template type.
        + If it is empty, means it is a metric or event template.
        + If it is **LTS**, means it is a log template.
        Changing this creates a new resource.

        <a name="block--templates"></a>
        The `templates` block supports:
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class _MessageTemplateState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 locale: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input['MessageTemplateTemplateArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MessageTemplate resources.
        :param pulumi.Input[_builtins.str] created_at: Indicates the meesage template create time.
        :param pulumi.Input[_builtins.str] description: Specifies the meesage template description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the template belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] locale: Specifies the meesage template language. Valid values are **en-us** and **zh-cn**.
        :param pulumi.Input[_builtins.str] name: Specifies the meesage template name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source: Specifies the template type.
               + If it is empty, means it is a metric or event template.
               + If it is **LTS**, means it is a log template.
               Changing this creates a new resource.
               
               <a name="block--templates"></a>
               The `templates` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['MessageTemplateTemplateArgs']]] templates: Specifies the templates.
               The templates structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the meesage template update time.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if templates is not None:
            pulumi.set(__self__, "templates", templates)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the meesage template create time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the meesage template description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the template belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def locale(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the meesage template language. Valid values are **en-us** and **zh-cn**.
        """
        return pulumi.get(self, "locale")

    @locale.setter
    def locale(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "locale", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the meesage template name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template type.
        + If it is empty, means it is a metric or event template.
        + If it is **LTS**, means it is a log template.
        Changing this creates a new resource.

        <a name="block--templates"></a>
        The `templates` block supports:
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MessageTemplateTemplateArgs']]]]:
        """
        Specifies the templates.
        The templates structure is documented below.
        """
        return pulumi.get(self, "templates")

    @templates.setter
    def templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MessageTemplateTemplateArgs']]]]):
        pulumi.set(self, "templates", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the meesage template update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Aom/messageTemplate:MessageTemplate")
class MessageTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 locale: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MessageTemplateTemplateArgs', 'MessageTemplateTemplateArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages an AOM message template resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.aom.MessageTemplate("test",
            name=name,
            locale="en-us",
            enterprise_project_id=enterprise_project_id,
            description="test",
            templates=[{
                "sub_type": "email",
                "topic": "${region_name}[${event_severity}_${event_type}_${clear_type}] have a new alert at ${starts_at}.",
                "content": \"\"\"Alarm Name:${event_name};
        Alarm ID:${id};
        Occurred:${starts_at};
        Event Severity:${event_severity};
        Alarm Info:${alarm_info};
        Resource Identifier:${resources_new};
        Suggestion:${alarm_fix_suggestion_zh};
        \"\"\",
            }])
        ```

        ## Import

        The message template can be imported using `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/messageTemplate:MessageTemplate test <name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the meesage template description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the template belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] locale: Specifies the meesage template language. Valid values are **en-us** and **zh-cn**.
        :param pulumi.Input[_builtins.str] name: Specifies the meesage template name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source: Specifies the template type.
               + If it is empty, means it is a metric or event template.
               + If it is **LTS**, means it is a log template.
               Changing this creates a new resource.
               
               <a name="block--templates"></a>
               The `templates` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['MessageTemplateTemplateArgs', 'MessageTemplateTemplateArgsDict']]]] templates: Specifies the templates.
               The templates structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MessageTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AOM message template resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.aom.MessageTemplate("test",
            name=name,
            locale="en-us",
            enterprise_project_id=enterprise_project_id,
            description="test",
            templates=[{
                "sub_type": "email",
                "topic": "${region_name}[${event_severity}_${event_type}_${clear_type}] have a new alert at ${starts_at}.",
                "content": \"\"\"Alarm Name:${event_name};
        Alarm ID:${id};
        Occurred:${starts_at};
        Event Severity:${event_severity};
        Alarm Info:${alarm_info};
        Resource Identifier:${resources_new};
        Suggestion:${alarm_fix_suggestion_zh};
        \"\"\",
            }])
        ```

        ## Import

        The message template can be imported using `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/messageTemplate:MessageTemplate test <name>
        ```

        :param str resource_name: The name of the resource.
        :param MessageTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MessageTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 locale: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MessageTemplateTemplateArgs', 'MessageTemplateTemplateArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MessageTemplateArgs.__new__(MessageTemplateArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if locale is None and not opts.urn:
                raise TypeError("Missing required property 'locale'")
            __props__.__dict__["locale"] = locale
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["source"] = source
            if templates is None and not opts.urn:
                raise TypeError("Missing required property 'templates'")
            __props__.__dict__["templates"] = templates
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(MessageTemplate, __self__).__init__(
            'huaweicloud:Aom/messageTemplate:MessageTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            locale: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            source: Optional[pulumi.Input[_builtins.str]] = None,
            templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MessageTemplateTemplateArgs', 'MessageTemplateTemplateArgsDict']]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'MessageTemplate':
        """
        Get an existing MessageTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the meesage template create time.
        :param pulumi.Input[_builtins.str] description: Specifies the meesage template description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the template belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] locale: Specifies the meesage template language. Valid values are **en-us** and **zh-cn**.
        :param pulumi.Input[_builtins.str] name: Specifies the meesage template name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source: Specifies the template type.
               + If it is empty, means it is a metric or event template.
               + If it is **LTS**, means it is a log template.
               Changing this creates a new resource.
               
               <a name="block--templates"></a>
               The `templates` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['MessageTemplateTemplateArgs', 'MessageTemplateTemplateArgsDict']]]] templates: Specifies the templates.
               The templates structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the meesage template update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MessageTemplateState.__new__(_MessageTemplateState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["locale"] = locale
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["source"] = source
        __props__.__dict__["templates"] = templates
        __props__.__dict__["updated_at"] = updated_at
        return MessageTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the meesage template create time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the meesage template description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the template belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def locale(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the meesage template language. Valid values are **en-us** and **zh-cn**.
        """
        return pulumi.get(self, "locale")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the meesage template name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the template type.
        + If it is empty, means it is a metric or event template.
        + If it is **LTS**, means it is a log template.
        Changing this creates a new resource.

        <a name="block--templates"></a>
        The `templates` block supports:
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def templates(self) -> pulumi.Output[Sequence['outputs.MessageTemplateTemplate']]:
        """
        Specifies the templates.
        The templates structure is documented below.
        """
        return pulumi.get(self, "templates")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the meesage template update time.
        """
        return pulumi.get(self, "updated_at")

