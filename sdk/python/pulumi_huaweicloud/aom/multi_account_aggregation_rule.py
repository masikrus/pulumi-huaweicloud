# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MultiAccountAggregationRuleArgs', 'MultiAccountAggregationRule']

@pulumi.input_type
class MultiAccountAggregationRuleArgs:
    def __init__(__self__, *,
                 accounts: pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleAccountArgs']]],
                 instance_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 send_to_source_account: Optional[pulumi.Input[_builtins.bool]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleServiceArgs']]]] = None):
        """
        The set of arguments for constructing a MultiAccountAggregationRule resource.
        :param pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleAccountArgs']]] accounts: Specifies the accounts list.
               The accounts structure is documented below.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AOM prometheus instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] send_to_source_account: Specifies whether the member accounts retain metric data after they are
               connected to the prometheus instance for aggregation.
               
               <a name="accounts_struct"></a>
               The `accounts` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleServiceArgs']]] services: Specifies the services list.
               The services structure is documented below.
        """
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if send_to_source_account is not None:
            pulumi.set(__self__, "send_to_source_account", send_to_source_account)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleAccountArgs']]]:
        """
        Specifies the accounts list.
        The accounts structure is documented below.
        """
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleAccountArgs']]]):
        pulumi.set(self, "accounts", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the AOM prometheus instance ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sendToSourceAccount")
    def send_to_source_account(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the member accounts retain metric data after they are
        connected to the prometheus instance for aggregation.

        <a name="accounts_struct"></a>
        The `accounts` block supports:
        """
        return pulumi.get(self, "send_to_source_account")

    @send_to_source_account.setter
    def send_to_source_account(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_to_source_account", value)

    @_builtins.property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleServiceArgs']]]]:
        """
        Specifies the services list.
        The services structure is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleServiceArgs']]]]):
        pulumi.set(self, "services", value)


@pulumi.input_type
class _MultiAccountAggregationRuleState:
    def __init__(__self__, *,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleAccountArgs']]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 send_to_source_account: Optional[pulumi.Input[_builtins.bool]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleServiceArgs']]]] = None):
        """
        Input properties used for looking up and filtering MultiAccountAggregationRule resources.
        :param pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleAccountArgs']]] accounts: Specifies the accounts list.
               The accounts structure is documented below.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AOM prometheus instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] send_to_source_account: Specifies whether the member accounts retain metric data after they are
               connected to the prometheus instance for aggregation.
               
               <a name="accounts_struct"></a>
               The `accounts` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleServiceArgs']]] services: Specifies the services list.
               The services structure is documented below.
        """
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if send_to_source_account is not None:
            pulumi.set(__self__, "send_to_source_account", send_to_source_account)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleAccountArgs']]]]:
        """
        Specifies the accounts list.
        The accounts structure is documented below.
        """
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleAccountArgs']]]]):
        pulumi.set(self, "accounts", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AOM prometheus instance ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sendToSourceAccount")
    def send_to_source_account(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the member accounts retain metric data after they are
        connected to the prometheus instance for aggregation.

        <a name="accounts_struct"></a>
        The `accounts` block supports:
        """
        return pulumi.get(self, "send_to_source_account")

    @send_to_source_account.setter
    def send_to_source_account(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_to_source_account", value)

    @_builtins.property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleServiceArgs']]]]:
        """
        Specifies the services list.
        The services structure is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MultiAccountAggregationRuleServiceArgs']]]]):
        pulumi.set(self, "services", value)


@pulumi.type_token("huaweicloud:Aom/multiAccountAggregationRule:MultiAccountAggregationRule")
class MultiAccountAggregationRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MultiAccountAggregationRuleAccountArgs', 'MultiAccountAggregationRuleAccountArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 send_to_source_account: Optional[pulumi.Input[_builtins.bool]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MultiAccountAggregationRuleServiceArgs', 'MultiAccountAggregationRuleServiceArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages an AOM multi account aggregation rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        account_id = config.require_object("accountId")
        account_name = config.require_object("accountName")
        test = huaweicloud.aom.MultiAccountAggregationRule("test",
            instance_id=instance_id,
            accounts=[{
                "id": account_id,
                "name": account_name,
            }],
            services=[{
                "service": "SYS.ELB",
                "metrics": [
                    "huaweicloud_sys_elb_m1_cps",
                    "huaweicloud_sys_elb_m2_act_conn",
                ],
            }])
        ```

        ## Import

        The AOM multi account aggregation rule resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/multiAccountAggregationRule:MultiAccountAggregationRule test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MultiAccountAggregationRuleAccountArgs', 'MultiAccountAggregationRuleAccountArgsDict']]]] accounts: Specifies the accounts list.
               The accounts structure is documented below.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AOM prometheus instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] send_to_source_account: Specifies whether the member accounts retain metric data after they are
               connected to the prometheus instance for aggregation.
               
               <a name="accounts_struct"></a>
               The `accounts` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['MultiAccountAggregationRuleServiceArgs', 'MultiAccountAggregationRuleServiceArgsDict']]]] services: Specifies the services list.
               The services structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MultiAccountAggregationRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AOM multi account aggregation rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        account_id = config.require_object("accountId")
        account_name = config.require_object("accountName")
        test = huaweicloud.aom.MultiAccountAggregationRule("test",
            instance_id=instance_id,
            accounts=[{
                "id": account_id,
                "name": account_name,
            }],
            services=[{
                "service": "SYS.ELB",
                "metrics": [
                    "huaweicloud_sys_elb_m1_cps",
                    "huaweicloud_sys_elb_m2_act_conn",
                ],
            }])
        ```

        ## Import

        The AOM multi account aggregation rule resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/multiAccountAggregationRule:MultiAccountAggregationRule test <id>
        ```

        :param str resource_name: The name of the resource.
        :param MultiAccountAggregationRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MultiAccountAggregationRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MultiAccountAggregationRuleAccountArgs', 'MultiAccountAggregationRuleAccountArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 send_to_source_account: Optional[pulumi.Input[_builtins.bool]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MultiAccountAggregationRuleServiceArgs', 'MultiAccountAggregationRuleServiceArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MultiAccountAggregationRuleArgs.__new__(MultiAccountAggregationRuleArgs)

            if accounts is None and not opts.urn:
                raise TypeError("Missing required property 'accounts'")
            __props__.__dict__["accounts"] = accounts
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            __props__.__dict__["send_to_source_account"] = send_to_source_account
            __props__.__dict__["services"] = services
        super(MultiAccountAggregationRule, __self__).__init__(
            'huaweicloud:Aom/multiAccountAggregationRule:MultiAccountAggregationRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MultiAccountAggregationRuleAccountArgs', 'MultiAccountAggregationRuleAccountArgsDict']]]]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            send_to_source_account: Optional[pulumi.Input[_builtins.bool]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MultiAccountAggregationRuleServiceArgs', 'MultiAccountAggregationRuleServiceArgsDict']]]]] = None) -> 'MultiAccountAggregationRule':
        """
        Get an existing MultiAccountAggregationRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MultiAccountAggregationRuleAccountArgs', 'MultiAccountAggregationRuleAccountArgsDict']]]] accounts: Specifies the accounts list.
               The accounts structure is documented below.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AOM prometheus instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] send_to_source_account: Specifies whether the member accounts retain metric data after they are
               connected to the prometheus instance for aggregation.
               
               <a name="accounts_struct"></a>
               The `accounts` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['MultiAccountAggregationRuleServiceArgs', 'MultiAccountAggregationRuleServiceArgsDict']]]] services: Specifies the services list.
               The services structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MultiAccountAggregationRuleState.__new__(_MultiAccountAggregationRuleState)

        __props__.__dict__["accounts"] = accounts
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["send_to_source_account"] = send_to_source_account
        __props__.__dict__["services"] = services
        return MultiAccountAggregationRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> pulumi.Output[Sequence['outputs.MultiAccountAggregationRuleAccount']]:
        """
        Specifies the accounts list.
        The accounts structure is documented below.
        """
        return pulumi.get(self, "accounts")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the AOM prometheus instance ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sendToSourceAccount")
    def send_to_source_account(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the member accounts retain metric data after they are
        connected to the prometheus instance for aggregation.

        <a name="accounts_struct"></a>
        The `accounts` block supports:
        """
        return pulumi.get(self, "send_to_source_account")

    @_builtins.property
    @pulumi.getter
    def services(self) -> pulumi.Output[Optional[Sequence['outputs.MultiAccountAggregationRuleService']]]:
        """
        Specifies the services list.
        The services structure is documented below.
        """
        return pulumi.get(self, "services")

