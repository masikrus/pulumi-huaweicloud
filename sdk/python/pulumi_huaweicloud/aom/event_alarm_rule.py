# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['EventAlarmRuleArgs', 'EventAlarmRule']

@pulumi.input_type
class EventAlarmRuleArgs:
    def __init__(__self__, *,
                 alarm_source: pulumi.Input[_builtins.str],
                 alarm_type: pulumi.Input[_builtins.str],
                 select_object: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]],
                 trigger_type: pulumi.Input[_builtins.str],
                 action_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 comparison_operator: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 grouping_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_count: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a EventAlarmRule resource.
        :param pulumi.Input[_builtins.str] alarm_source: Specifies the alarm source of the rule.
        :param pulumi.Input[_builtins.str] alarm_type: Specifies the alarm type of the rule.
               The value can be **notification** and **denoising**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] select_object: Specifies the select object of the rule.
        :param pulumi.Input[_builtins.str] trigger_type: Specifies the trigger type.
               The value can be **accumulative** and **immediately**.
        :param pulumi.Input[_builtins.str] action_rule: Specifies the action rule name.
        :param pulumi.Input[_builtins.str] comparison_operator: Specifies the comparison condition of alarm.
               The value can be **>** and **>=**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the rule.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether the rule is enabled. Defaults to **true**.
        :param pulumi.Input[_builtins.str] grouping_rule: Specifies the route grouping rule name.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] period: Specifies the monitoring period in seconds.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] trigger_count: Specifies the accumulated times to trigger the alarm.
        """
        pulumi.set(__self__, "alarm_source", alarm_source)
        pulumi.set(__self__, "alarm_type", alarm_type)
        pulumi.set(__self__, "select_object", select_object)
        pulumi.set(__self__, "trigger_type", trigger_type)
        if action_rule is not None:
            pulumi.set(__self__, "action_rule", action_rule)
        if comparison_operator is not None:
            pulumi.set(__self__, "comparison_operator", comparison_operator)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if grouping_rule is not None:
            pulumi.set(__self__, "grouping_rule", grouping_rule)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if trigger_count is not None:
            pulumi.set(__self__, "trigger_count", trigger_count)

    @_builtins.property
    @pulumi.getter(name="alarmSource")
    def alarm_source(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alarm source of the rule.
        """
        return pulumi.get(self, "alarm_source")

    @alarm_source.setter
    def alarm_source(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alarm_source", value)

    @_builtins.property
    @pulumi.getter(name="alarmType")
    def alarm_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alarm type of the rule.
        The value can be **notification** and **denoising**.
        """
        return pulumi.get(self, "alarm_type")

    @alarm_type.setter
    def alarm_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alarm_type", value)

    @_builtins.property
    @pulumi.getter(name="selectObject")
    def select_object(self) -> pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]:
        """
        Specifies the select object of the rule.
        """
        return pulumi.get(self, "select_object")

    @select_object.setter
    def select_object(self, value: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "select_object", value)

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the trigger type.
        The value can be **accumulative** and **immediately**.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "trigger_type", value)

    @_builtins.property
    @pulumi.getter(name="actionRule")
    def action_rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the action rule name.
        """
        return pulumi.get(self, "action_rule")

    @action_rule.setter
    def action_rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action_rule", value)

    @_builtins.property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the comparison condition of alarm.
        The value can be **>** and **>=**.
        """
        return pulumi.get(self, "comparison_operator")

    @comparison_operator.setter
    def comparison_operator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comparison_operator", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the rule is enabled. Defaults to **true**.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="groupingRule")
    def grouping_rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the route grouping rule name.
        """
        return pulumi.get(self, "grouping_rule")

    @grouping_rule.setter
    def grouping_rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "grouping_rule", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the monitoring period in seconds.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="triggerCount")
    def trigger_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the accumulated times to trigger the alarm.
        """
        return pulumi.get(self, "trigger_count")

    @trigger_count.setter
    def trigger_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "trigger_count", value)


@pulumi.input_type
class _EventAlarmRuleState:
    def __init__(__self__, *,
                 action_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_source: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 comparison_operator: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 grouping_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 select_object: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 trigger_count: Optional[pulumi.Input[_builtins.int]] = None,
                 trigger_type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering EventAlarmRule resources.
        :param pulumi.Input[_builtins.str] action_rule: Specifies the action rule name.
        :param pulumi.Input[_builtins.str] alarm_source: Specifies the alarm source of the rule.
        :param pulumi.Input[_builtins.str] alarm_type: Specifies the alarm type of the rule.
               The value can be **notification** and **denoising**.
        :param pulumi.Input[_builtins.str] comparison_operator: Specifies the comparison condition of alarm.
               The value can be **>** and **>=**.
        :param pulumi.Input[_builtins.int] created_at: The creation time.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the rule.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether the rule is enabled. Defaults to **true**.
        :param pulumi.Input[_builtins.str] grouping_rule: Specifies the route grouping rule name.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] period: Specifies the monitoring period in seconds.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] select_object: Specifies the select object of the rule.
        :param pulumi.Input[_builtins.int] trigger_count: Specifies the accumulated times to trigger the alarm.
        :param pulumi.Input[_builtins.str] trigger_type: Specifies the trigger type.
               The value can be **accumulative** and **immediately**.
        :param pulumi.Input[_builtins.int] updated_at: The last updated time.
        """
        if action_rule is not None:
            pulumi.set(__self__, "action_rule", action_rule)
        if alarm_source is not None:
            pulumi.set(__self__, "alarm_source", alarm_source)
        if alarm_type is not None:
            pulumi.set(__self__, "alarm_type", alarm_type)
        if comparison_operator is not None:
            pulumi.set(__self__, "comparison_operator", comparison_operator)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if grouping_rule is not None:
            pulumi.set(__self__, "grouping_rule", grouping_rule)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if select_object is not None:
            pulumi.set(__self__, "select_object", select_object)
        if trigger_count is not None:
            pulumi.set(__self__, "trigger_count", trigger_count)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="actionRule")
    def action_rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the action rule name.
        """
        return pulumi.get(self, "action_rule")

    @action_rule.setter
    def action_rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action_rule", value)

    @_builtins.property
    @pulumi.getter(name="alarmSource")
    def alarm_source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm source of the rule.
        """
        return pulumi.get(self, "alarm_source")

    @alarm_source.setter
    def alarm_source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_source", value)

    @_builtins.property
    @pulumi.getter(name="alarmType")
    def alarm_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm type of the rule.
        The value can be **notification** and **denoising**.
        """
        return pulumi.get(self, "alarm_type")

    @alarm_type.setter
    def alarm_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_type", value)

    @_builtins.property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the comparison condition of alarm.
        The value can be **>** and **>=**.
        """
        return pulumi.get(self, "comparison_operator")

    @comparison_operator.setter
    def comparison_operator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comparison_operator", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the rule is enabled. Defaults to **true**.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="groupingRule")
    def grouping_rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the route grouping rule name.
        """
        return pulumi.get(self, "grouping_rule")

    @grouping_rule.setter
    def grouping_rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "grouping_rule", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the monitoring period in seconds.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="selectObject")
    def select_object(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the select object of the rule.
        """
        return pulumi.get(self, "select_object")

    @select_object.setter
    def select_object(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "select_object", value)

    @_builtins.property
    @pulumi.getter(name="triggerCount")
    def trigger_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the accumulated times to trigger the alarm.
        """
        return pulumi.get(self, "trigger_count")

    @trigger_count.setter
    def trigger_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "trigger_count", value)

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the trigger type.
        The value can be **accumulative** and **immediately**.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The last updated time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Aom/eventAlarmRule:EventAlarmRule")
class EventAlarmRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_source: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 comparison_operator: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 grouping_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 select_object: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 trigger_count: Optional[pulumi.Input[_builtins.int]] = None,
                 trigger_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an AOM event alarm rule resource within HuaweiCloud.

        ## Example Usage

        variable "action_rule_name" {}

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.aom.EventAlarmRule("test",
            name="test_rule",
            description="terraform test",
            alarm_type="notification",
            action_rule=action_rule_name,
            enabled=True,
            trigger_type="accumulative",
            period=300,
            comparison_operator=">=",
            trigger_count=2,
            alarm_source="AOM",
            select_object={
                "event_type": "alarm",
                "event_severity": "Critical",
            })
        ```

        ## Import

        The application operations management can be imported using the `id` (name), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/eventAlarmRule:EventAlarmRule test test_rule
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action_rule: Specifies the action rule name.
        :param pulumi.Input[_builtins.str] alarm_source: Specifies the alarm source of the rule.
        :param pulumi.Input[_builtins.str] alarm_type: Specifies the alarm type of the rule.
               The value can be **notification** and **denoising**.
        :param pulumi.Input[_builtins.str] comparison_operator: Specifies the comparison condition of alarm.
               The value can be **>** and **>=**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the rule.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether the rule is enabled. Defaults to **true**.
        :param pulumi.Input[_builtins.str] grouping_rule: Specifies the route grouping rule name.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] period: Specifies the monitoring period in seconds.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] select_object: Specifies the select object of the rule.
        :param pulumi.Input[_builtins.int] trigger_count: Specifies the accumulated times to trigger the alarm.
        :param pulumi.Input[_builtins.str] trigger_type: Specifies the trigger type.
               The value can be **accumulative** and **immediately**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventAlarmRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AOM event alarm rule resource within HuaweiCloud.

        ## Example Usage

        variable "action_rule_name" {}

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.aom.EventAlarmRule("test",
            name="test_rule",
            description="terraform test",
            alarm_type="notification",
            action_rule=action_rule_name,
            enabled=True,
            trigger_type="accumulative",
            period=300,
            comparison_operator=">=",
            trigger_count=2,
            alarm_source="AOM",
            select_object={
                "event_type": "alarm",
                "event_severity": "Critical",
            })
        ```

        ## Import

        The application operations management can be imported using the `id` (name), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/eventAlarmRule:EventAlarmRule test test_rule
        ```

        :param str resource_name: The name of the resource.
        :param EventAlarmRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventAlarmRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_source: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 comparison_operator: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 grouping_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 select_object: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 trigger_count: Optional[pulumi.Input[_builtins.int]] = None,
                 trigger_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventAlarmRuleArgs.__new__(EventAlarmRuleArgs)

            __props__.__dict__["action_rule"] = action_rule
            if alarm_source is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_source'")
            __props__.__dict__["alarm_source"] = alarm_source
            if alarm_type is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_type'")
            __props__.__dict__["alarm_type"] = alarm_type
            __props__.__dict__["comparison_operator"] = comparison_operator
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["grouping_rule"] = grouping_rule
            __props__.__dict__["name"] = name
            __props__.__dict__["period"] = period
            __props__.__dict__["region"] = region
            if select_object is None and not opts.urn:
                raise TypeError("Missing required property 'select_object'")
            __props__.__dict__["select_object"] = select_object
            __props__.__dict__["trigger_count"] = trigger_count
            if trigger_type is None and not opts.urn:
                raise TypeError("Missing required property 'trigger_type'")
            __props__.__dict__["trigger_type"] = trigger_type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(EventAlarmRule, __self__).__init__(
            'huaweicloud:Aom/eventAlarmRule:EventAlarmRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_rule: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_source: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_type: Optional[pulumi.Input[_builtins.str]] = None,
            comparison_operator: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.int]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            grouping_rule: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            period: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            select_object: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            trigger_count: Optional[pulumi.Input[_builtins.int]] = None,
            trigger_type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.int]] = None) -> 'EventAlarmRule':
        """
        Get an existing EventAlarmRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action_rule: Specifies the action rule name.
        :param pulumi.Input[_builtins.str] alarm_source: Specifies the alarm source of the rule.
        :param pulumi.Input[_builtins.str] alarm_type: Specifies the alarm type of the rule.
               The value can be **notification** and **denoising**.
        :param pulumi.Input[_builtins.str] comparison_operator: Specifies the comparison condition of alarm.
               The value can be **>** and **>=**.
        :param pulumi.Input[_builtins.int] created_at: The creation time.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the rule.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether the rule is enabled. Defaults to **true**.
        :param pulumi.Input[_builtins.str] grouping_rule: Specifies the route grouping rule name.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] period: Specifies the monitoring period in seconds.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] select_object: Specifies the select object of the rule.
        :param pulumi.Input[_builtins.int] trigger_count: Specifies the accumulated times to trigger the alarm.
        :param pulumi.Input[_builtins.str] trigger_type: Specifies the trigger type.
               The value can be **accumulative** and **immediately**.
        :param pulumi.Input[_builtins.int] updated_at: The last updated time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventAlarmRuleState.__new__(_EventAlarmRuleState)

        __props__.__dict__["action_rule"] = action_rule
        __props__.__dict__["alarm_source"] = alarm_source
        __props__.__dict__["alarm_type"] = alarm_type
        __props__.__dict__["comparison_operator"] = comparison_operator
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["grouping_rule"] = grouping_rule
        __props__.__dict__["name"] = name
        __props__.__dict__["period"] = period
        __props__.__dict__["region"] = region
        __props__.__dict__["select_object"] = select_object
        __props__.__dict__["trigger_count"] = trigger_count
        __props__.__dict__["trigger_type"] = trigger_type
        __props__.__dict__["updated_at"] = updated_at
        return EventAlarmRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="actionRule")
    def action_rule(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the action rule name.
        """
        return pulumi.get(self, "action_rule")

    @_builtins.property
    @pulumi.getter(name="alarmSource")
    def alarm_source(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm source of the rule.
        """
        return pulumi.get(self, "alarm_source")

    @_builtins.property
    @pulumi.getter(name="alarmType")
    def alarm_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm type of the rule.
        The value can be **notification** and **denoising**.
        """
        return pulumi.get(self, "alarm_type")

    @_builtins.property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the comparison condition of alarm.
        The value can be **>** and **>=**.
        """
        return pulumi.get(self, "comparison_operator")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.int]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of the rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the rule is enabled. Defaults to **true**.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="groupingRule")
    def grouping_rule(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the route grouping rule name.
        """
        return pulumi.get(self, "grouping_rule")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the monitoring period in seconds.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="selectObject")
    def select_object(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the select object of the rule.
        """
        return pulumi.get(self, "select_object")

    @_builtins.property
    @pulumi.getter(name="triggerCount")
    def trigger_count(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the accumulated times to trigger the alarm.
        """
        return pulumi.get(self, "trigger_count")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the trigger type.
        The value can be **accumulative** and **immediately**.
        """
        return pulumi.get(self, "trigger_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.int]:
        """
        The last updated time.
        """
        return pulumi.get(self, "updated_at")

