# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlarmRuleV4Args', 'AlarmRuleV4']

@pulumi.input_type
class AlarmRuleV4Args:
    def __init__(__self__, *,
                 alarm_notifications: pulumi.Input['AlarmRuleV4AlarmNotificationsArgs'],
                 type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 event_alarm_spec: Optional[pulumi.Input['AlarmRuleV4EventAlarmSpecArgs']] = None,
                 metric_alarm_spec: Optional[pulumi.Input['AlarmRuleV4MetricAlarmSpecArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 prom_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AlarmRuleV4 resource.
        :param pulumi.Input['AlarmRuleV4AlarmNotificationsArgs'] alarm_notifications: Specifies the alarm notification module.
               The alarm_notifications structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the alarm rule type.
               Valid values are as follows:
               + **metric**: metric alarm rule
               + **event**: event alarm rule
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the alarm rule description.
        :param pulumi.Input[_builtins.bool] enable: Specifies whether to enable the alarm rule. Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the alarm rule belongs.
               Changing this creates a new resource.
        :param pulumi.Input['AlarmRuleV4EventAlarmSpecArgs'] event_alarm_spec: Specifies the structure of an event alarm rule.
               It's required if `type` is **event**.
               The event_alarm_spec structure is documented below.
        :param pulumi.Input['AlarmRuleV4MetricAlarmSpecArgs'] metric_alarm_spec: Specifies the structure of a metric alarm rule.
               It's required if `type` is **metric**.
               The metric_alarm_spec structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the alarm rule name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] prom_instance_id: Specifies the prometheus instance ID to which the metric alarm rule belongs.
               It's required if `type` is **metric**.
               
               <a name="block--alarm_notifications"></a>
               The `alarm_notifications` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "alarm_notifications", alarm_notifications)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if event_alarm_spec is not None:
            pulumi.set(__self__, "event_alarm_spec", event_alarm_spec)
        if metric_alarm_spec is not None:
            pulumi.set(__self__, "metric_alarm_spec", metric_alarm_spec)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prom_instance_id is not None:
            pulumi.set(__self__, "prom_instance_id", prom_instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="alarmNotifications")
    def alarm_notifications(self) -> pulumi.Input['AlarmRuleV4AlarmNotificationsArgs']:
        """
        Specifies the alarm notification module.
        The alarm_notifications structure is documented below.
        """
        return pulumi.get(self, "alarm_notifications")

    @alarm_notifications.setter
    def alarm_notifications(self, value: pulumi.Input['AlarmRuleV4AlarmNotificationsArgs']):
        pulumi.set(self, "alarm_notifications", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alarm rule type.
        Valid values are as follows:
        + **metric**: metric alarm rule
        + **event**: event alarm rule

        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the alarm rule. Defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the alarm rule belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="eventAlarmSpec")
    def event_alarm_spec(self) -> Optional[pulumi.Input['AlarmRuleV4EventAlarmSpecArgs']]:
        """
        Specifies the structure of an event alarm rule.
        It's required if `type` is **event**.
        The event_alarm_spec structure is documented below.
        """
        return pulumi.get(self, "event_alarm_spec")

    @event_alarm_spec.setter
    def event_alarm_spec(self, value: Optional[pulumi.Input['AlarmRuleV4EventAlarmSpecArgs']]):
        pulumi.set(self, "event_alarm_spec", value)

    @_builtins.property
    @pulumi.getter(name="metricAlarmSpec")
    def metric_alarm_spec(self) -> Optional[pulumi.Input['AlarmRuleV4MetricAlarmSpecArgs']]:
        """
        Specifies the structure of a metric alarm rule.
        It's required if `type` is **metric**.
        The metric_alarm_spec structure is documented below.
        """
        return pulumi.get(self, "metric_alarm_spec")

    @metric_alarm_spec.setter
    def metric_alarm_spec(self, value: Optional[pulumi.Input['AlarmRuleV4MetricAlarmSpecArgs']]):
        pulumi.set(self, "metric_alarm_spec", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm rule name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="promInstanceId")
    def prom_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the prometheus instance ID to which the metric alarm rule belongs.
        It's required if `type` is **metric**.

        <a name="block--alarm_notifications"></a>
        The `alarm_notifications` block supports:
        """
        return pulumi.get(self, "prom_instance_id")

    @prom_instance_id.setter
    def prom_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prom_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AlarmRuleV4State:
    def __init__(__self__, *,
                 alarm_notifications: Optional[pulumi.Input['AlarmRuleV4AlarmNotificationsArgs']] = None,
                 alarm_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 event_alarm_spec: Optional[pulumi.Input['AlarmRuleV4EventAlarmSpecArgs']] = None,
                 metric_alarm_spec: Optional[pulumi.Input['AlarmRuleV4MetricAlarmSpecArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 prom_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AlarmRuleV4 resources.
        :param pulumi.Input['AlarmRuleV4AlarmNotificationsArgs'] alarm_notifications: Specifies the alarm notification module.
               The alarm_notifications structure is documented below.
        :param pulumi.Input[_builtins.str] alarm_rule_id: Indicates the alarm rule ID.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when an alarm rule was created.
        :param pulumi.Input[_builtins.str] description: Specifies the alarm rule description.
        :param pulumi.Input[_builtins.bool] enable: Specifies whether to enable the alarm rule. Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the alarm rule belongs.
               Changing this creates a new resource.
        :param pulumi.Input['AlarmRuleV4EventAlarmSpecArgs'] event_alarm_spec: Specifies the structure of an event alarm rule.
               It's required if `type` is **event**.
               The event_alarm_spec structure is documented below.
        :param pulumi.Input['AlarmRuleV4MetricAlarmSpecArgs'] metric_alarm_spec: Specifies the structure of a metric alarm rule.
               It's required if `type` is **metric**.
               The metric_alarm_spec structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the alarm rule name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] prom_instance_id: Specifies the prometheus instance ID to which the metric alarm rule belongs.
               It's required if `type` is **metric**.
               
               <a name="block--alarm_notifications"></a>
               The `alarm_notifications` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the alarm status.
               Value can be as follows:
               + **OK**: normal
               + **alarm**: threshold-crossing
               + **Effective**: in use
               + **Invalid**: not in use
        :param pulumi.Input[_builtins.str] type: Specifies the alarm rule type.
               Valid values are as follows:
               + **metric**: metric alarm rule
               + **event**: event alarm rule
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the time when an alarm rule was updated.
        """
        if alarm_notifications is not None:
            pulumi.set(__self__, "alarm_notifications", alarm_notifications)
        if alarm_rule_id is not None:
            pulumi.set(__self__, "alarm_rule_id", alarm_rule_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if event_alarm_spec is not None:
            pulumi.set(__self__, "event_alarm_spec", event_alarm_spec)
        if metric_alarm_spec is not None:
            pulumi.set(__self__, "metric_alarm_spec", metric_alarm_spec)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prom_instance_id is not None:
            pulumi.set(__self__, "prom_instance_id", prom_instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="alarmNotifications")
    def alarm_notifications(self) -> Optional[pulumi.Input['AlarmRuleV4AlarmNotificationsArgs']]:
        """
        Specifies the alarm notification module.
        The alarm_notifications structure is documented below.
        """
        return pulumi.get(self, "alarm_notifications")

    @alarm_notifications.setter
    def alarm_notifications(self, value: Optional[pulumi.Input['AlarmRuleV4AlarmNotificationsArgs']]):
        pulumi.set(self, "alarm_notifications", value)

    @_builtins.property
    @pulumi.getter(name="alarmRuleId")
    def alarm_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the alarm rule ID.
        """
        return pulumi.get(self, "alarm_rule_id")

    @alarm_rule_id.setter
    def alarm_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_rule_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when an alarm rule was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the alarm rule. Defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the alarm rule belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="eventAlarmSpec")
    def event_alarm_spec(self) -> Optional[pulumi.Input['AlarmRuleV4EventAlarmSpecArgs']]:
        """
        Specifies the structure of an event alarm rule.
        It's required if `type` is **event**.
        The event_alarm_spec structure is documented below.
        """
        return pulumi.get(self, "event_alarm_spec")

    @event_alarm_spec.setter
    def event_alarm_spec(self, value: Optional[pulumi.Input['AlarmRuleV4EventAlarmSpecArgs']]):
        pulumi.set(self, "event_alarm_spec", value)

    @_builtins.property
    @pulumi.getter(name="metricAlarmSpec")
    def metric_alarm_spec(self) -> Optional[pulumi.Input['AlarmRuleV4MetricAlarmSpecArgs']]:
        """
        Specifies the structure of a metric alarm rule.
        It's required if `type` is **metric**.
        The metric_alarm_spec structure is documented below.
        """
        return pulumi.get(self, "metric_alarm_spec")

    @metric_alarm_spec.setter
    def metric_alarm_spec(self, value: Optional[pulumi.Input['AlarmRuleV4MetricAlarmSpecArgs']]):
        pulumi.set(self, "metric_alarm_spec", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm rule name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="promInstanceId")
    def prom_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the prometheus instance ID to which the metric alarm rule belongs.
        It's required if `type` is **metric**.

        <a name="block--alarm_notifications"></a>
        The `alarm_notifications` block supports:
        """
        return pulumi.get(self, "prom_instance_id")

    @prom_instance_id.setter
    def prom_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prom_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the alarm status.
        Value can be as follows:
        + **OK**: normal
        + **alarm**: threshold-crossing
        + **Effective**: in use
        + **Invalid**: not in use
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm rule type.
        Valid values are as follows:
        + **metric**: metric alarm rule
        + **event**: event alarm rule

        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when an alarm rule was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Aom/alarmRuleV4:AlarmRuleV4")
class AlarmRuleV4(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_notifications: Optional[pulumi.Input[Union['AlarmRuleV4AlarmNotificationsArgs', 'AlarmRuleV4AlarmNotificationsArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 event_alarm_spec: Optional[pulumi.Input[Union['AlarmRuleV4EventAlarmSpecArgs', 'AlarmRuleV4EventAlarmSpecArgsDict']]] = None,
                 metric_alarm_spec: Optional[pulumi.Input[Union['AlarmRuleV4MetricAlarmSpecArgs', 'AlarmRuleV4MetricAlarmSpecArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 prom_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an AOM cloud alarm rule resource within HuaweiCloud.

        ## Example Usage

        ### Create an event alarm rule with all system event

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        alarm_rule_name = config.require_object("alarmRuleName")
        action_rule_id = config.require_object("actionRuleId")
        test = huaweicloud.aom.AlarmRuleV4("test",
            name=alarm_rule_name,
            type="event",
            description="test",
            enable=True,
            alarm_notifications={
                "notification_type": "direct",
                "notification_enable": True,
                "bind_notification_rule_id": action_rule_id,
            },
            event_alarm_spec={
                "event_source": "CCE",
                "alarm_source": "systemEvent",
                "trigger_conditions": [{
                    "trigger_type": "immediately",
                    "thresholds": {
                        "Critical": 2,
                    },
                }],
            })
        ```

        ### Create an event alarm rule with specific system event

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        alarm_rule_name = config.require_object("alarmRuleName")
        action_rule_id = config.require_object("actionRuleId")
        test = huaweicloud.aom.AlarmRuleV4("test",
            name=alarm_rule_name,
            type="event",
            description="test",
            enable=True,
            alarm_notifications={
                "notification_type": "direct",
                "notification_enable": True,
                "bind_notification_rule_id": action_rule_id,
            },
            event_alarm_spec={
                "event_source": "CCE",
                "alarm_source": "systemEvent",
                "monitor_objects": [{
                    "event_name": "扩容节点超时##ScaleUpTimedOut;数据卷扩容失败##VolumeResizeFailed",
                }],
                "trigger_conditions": [
                    {
                        "trigger_type": "immediately",
                        "event_name": "扩容节点超时##ScaleUpTimedOut",
                        "thresholds": {
                            "Critical": 2,
                        },
                    },
                    {
                        "trigger_type": "accumulative",
                        "event_name": "数据卷扩容失败##VolumeResizeFailed",
                        "aggregation_window": 300,
                        "frequency": "600",
                        "operator": ">=",
                        "thresholds": {
                            "Info": 5,
                        },
                    },
                ],
            })
        ```

        ### Create a metric alarm rule with metrics

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        alarm_rule_name = config.require_object("alarmRuleName")
        test = huaweicloud.aom.AlarmRuleV4("test",
            name=alarm_rule_name,
            type="metric",
            prom_instance_id="0",
            enable=True,
            alarm_notifications={
                "notification_type": "direct",
            },
            metric_alarm_spec={
                "monitor_type": "all_metric",
                "recovery_conditions": {
                    "recovery_timeframe": 1,
                },
                "trigger_conditions": [{
                    "metric_query_mode": "PROM",
                    "metric_statistic_method": "single",
                    "metric_name": "duration",
                    "promql": "label_replace(avg_over_time(duration{}[59999ms]),\\"__name__\\",\\"duration\\",\\"\\",\\"\\")",
                    "trigger_times": "3",
                    "trigger_type": "FIXED_RATE",
                    "aggregation_window": "1m",
                    "trigger_interval": "30s",
                    "aggregation_type": "average",
                    "operator": ">",
                    "thresholds": {
                        "Critical": "1",
                    },
                }],
                "alarm_tags": {
                    "custom_tags": ["key=value"],
                },
                "no_data_conditions": {
                    "notify_no_data": True,
                    "no_data_timeframe": 1,
                    "no_data_alert_state": "no_data",
                },
            })
        ```

        ## Import

        Alarm rule resources can be imported using `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/alarmRuleV4:AlarmRuleV4 test <name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `metric_alarm_spec.0.trigger_conditions`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the rule, or the resource definition should be updated to

        align with the rule. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_aomv4_alarm_rule" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              metric_alarm_spec.0.trigger_conditions,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AlarmRuleV4AlarmNotificationsArgs', 'AlarmRuleV4AlarmNotificationsArgsDict']] alarm_notifications: Specifies the alarm notification module.
               The alarm_notifications structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the alarm rule description.
        :param pulumi.Input[_builtins.bool] enable: Specifies whether to enable the alarm rule. Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the alarm rule belongs.
               Changing this creates a new resource.
        :param pulumi.Input[Union['AlarmRuleV4EventAlarmSpecArgs', 'AlarmRuleV4EventAlarmSpecArgsDict']] event_alarm_spec: Specifies the structure of an event alarm rule.
               It's required if `type` is **event**.
               The event_alarm_spec structure is documented below.
        :param pulumi.Input[Union['AlarmRuleV4MetricAlarmSpecArgs', 'AlarmRuleV4MetricAlarmSpecArgsDict']] metric_alarm_spec: Specifies the structure of a metric alarm rule.
               It's required if `type` is **metric**.
               The metric_alarm_spec structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the alarm rule name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] prom_instance_id: Specifies the prometheus instance ID to which the metric alarm rule belongs.
               It's required if `type` is **metric**.
               
               <a name="block--alarm_notifications"></a>
               The `alarm_notifications` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the alarm rule type.
               Valid values are as follows:
               + **metric**: metric alarm rule
               + **event**: event alarm rule
               
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlarmRuleV4Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AOM cloud alarm rule resource within HuaweiCloud.

        ## Example Usage

        ### Create an event alarm rule with all system event

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        alarm_rule_name = config.require_object("alarmRuleName")
        action_rule_id = config.require_object("actionRuleId")
        test = huaweicloud.aom.AlarmRuleV4("test",
            name=alarm_rule_name,
            type="event",
            description="test",
            enable=True,
            alarm_notifications={
                "notification_type": "direct",
                "notification_enable": True,
                "bind_notification_rule_id": action_rule_id,
            },
            event_alarm_spec={
                "event_source": "CCE",
                "alarm_source": "systemEvent",
                "trigger_conditions": [{
                    "trigger_type": "immediately",
                    "thresholds": {
                        "Critical": 2,
                    },
                }],
            })
        ```

        ### Create an event alarm rule with specific system event

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        alarm_rule_name = config.require_object("alarmRuleName")
        action_rule_id = config.require_object("actionRuleId")
        test = huaweicloud.aom.AlarmRuleV4("test",
            name=alarm_rule_name,
            type="event",
            description="test",
            enable=True,
            alarm_notifications={
                "notification_type": "direct",
                "notification_enable": True,
                "bind_notification_rule_id": action_rule_id,
            },
            event_alarm_spec={
                "event_source": "CCE",
                "alarm_source": "systemEvent",
                "monitor_objects": [{
                    "event_name": "扩容节点超时##ScaleUpTimedOut;数据卷扩容失败##VolumeResizeFailed",
                }],
                "trigger_conditions": [
                    {
                        "trigger_type": "immediately",
                        "event_name": "扩容节点超时##ScaleUpTimedOut",
                        "thresholds": {
                            "Critical": 2,
                        },
                    },
                    {
                        "trigger_type": "accumulative",
                        "event_name": "数据卷扩容失败##VolumeResizeFailed",
                        "aggregation_window": 300,
                        "frequency": "600",
                        "operator": ">=",
                        "thresholds": {
                            "Info": 5,
                        },
                    },
                ],
            })
        ```

        ### Create a metric alarm rule with metrics

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        alarm_rule_name = config.require_object("alarmRuleName")
        test = huaweicloud.aom.AlarmRuleV4("test",
            name=alarm_rule_name,
            type="metric",
            prom_instance_id="0",
            enable=True,
            alarm_notifications={
                "notification_type": "direct",
            },
            metric_alarm_spec={
                "monitor_type": "all_metric",
                "recovery_conditions": {
                    "recovery_timeframe": 1,
                },
                "trigger_conditions": [{
                    "metric_query_mode": "PROM",
                    "metric_statistic_method": "single",
                    "metric_name": "duration",
                    "promql": "label_replace(avg_over_time(duration{}[59999ms]),\\"__name__\\",\\"duration\\",\\"\\",\\"\\")",
                    "trigger_times": "3",
                    "trigger_type": "FIXED_RATE",
                    "aggregation_window": "1m",
                    "trigger_interval": "30s",
                    "aggregation_type": "average",
                    "operator": ">",
                    "thresholds": {
                        "Critical": "1",
                    },
                }],
                "alarm_tags": {
                    "custom_tags": ["key=value"],
                },
                "no_data_conditions": {
                    "notify_no_data": True,
                    "no_data_timeframe": 1,
                    "no_data_alert_state": "no_data",
                },
            })
        ```

        ## Import

        Alarm rule resources can be imported using `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/alarmRuleV4:AlarmRuleV4 test <name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `metric_alarm_spec.0.trigger_conditions`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the rule, or the resource definition should be updated to

        align with the rule. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_aomv4_alarm_rule" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              metric_alarm_spec.0.trigger_conditions,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param AlarmRuleV4Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlarmRuleV4Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_notifications: Optional[pulumi.Input[Union['AlarmRuleV4AlarmNotificationsArgs', 'AlarmRuleV4AlarmNotificationsArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 event_alarm_spec: Optional[pulumi.Input[Union['AlarmRuleV4EventAlarmSpecArgs', 'AlarmRuleV4EventAlarmSpecArgsDict']]] = None,
                 metric_alarm_spec: Optional[pulumi.Input[Union['AlarmRuleV4MetricAlarmSpecArgs', 'AlarmRuleV4MetricAlarmSpecArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 prom_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlarmRuleV4Args.__new__(AlarmRuleV4Args)

            if alarm_notifications is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_notifications'")
            __props__.__dict__["alarm_notifications"] = alarm_notifications
            __props__.__dict__["description"] = description
            __props__.__dict__["enable"] = enable
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["event_alarm_spec"] = event_alarm_spec
            __props__.__dict__["metric_alarm_spec"] = metric_alarm_spec
            __props__.__dict__["name"] = name
            __props__.__dict__["prom_instance_id"] = prom_instance_id
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["alarm_rule_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(AlarmRuleV4, __self__).__init__(
            'huaweicloud:Aom/alarmRuleV4:AlarmRuleV4',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alarm_notifications: Optional[pulumi.Input[Union['AlarmRuleV4AlarmNotificationsArgs', 'AlarmRuleV4AlarmNotificationsArgsDict']]] = None,
            alarm_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable: Optional[pulumi.Input[_builtins.bool]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            event_alarm_spec: Optional[pulumi.Input[Union['AlarmRuleV4EventAlarmSpecArgs', 'AlarmRuleV4EventAlarmSpecArgsDict']]] = None,
            metric_alarm_spec: Optional[pulumi.Input[Union['AlarmRuleV4MetricAlarmSpecArgs', 'AlarmRuleV4MetricAlarmSpecArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            prom_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'AlarmRuleV4':
        """
        Get an existing AlarmRuleV4 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AlarmRuleV4AlarmNotificationsArgs', 'AlarmRuleV4AlarmNotificationsArgsDict']] alarm_notifications: Specifies the alarm notification module.
               The alarm_notifications structure is documented below.
        :param pulumi.Input[_builtins.str] alarm_rule_id: Indicates the alarm rule ID.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when an alarm rule was created.
        :param pulumi.Input[_builtins.str] description: Specifies the alarm rule description.
        :param pulumi.Input[_builtins.bool] enable: Specifies whether to enable the alarm rule. Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the alarm rule belongs.
               Changing this creates a new resource.
        :param pulumi.Input[Union['AlarmRuleV4EventAlarmSpecArgs', 'AlarmRuleV4EventAlarmSpecArgsDict']] event_alarm_spec: Specifies the structure of an event alarm rule.
               It's required if `type` is **event**.
               The event_alarm_spec structure is documented below.
        :param pulumi.Input[Union['AlarmRuleV4MetricAlarmSpecArgs', 'AlarmRuleV4MetricAlarmSpecArgsDict']] metric_alarm_spec: Specifies the structure of a metric alarm rule.
               It's required if `type` is **metric**.
               The metric_alarm_spec structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the alarm rule name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] prom_instance_id: Specifies the prometheus instance ID to which the metric alarm rule belongs.
               It's required if `type` is **metric**.
               
               <a name="block--alarm_notifications"></a>
               The `alarm_notifications` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the alarm status.
               Value can be as follows:
               + **OK**: normal
               + **alarm**: threshold-crossing
               + **Effective**: in use
               + **Invalid**: not in use
        :param pulumi.Input[_builtins.str] type: Specifies the alarm rule type.
               Valid values are as follows:
               + **metric**: metric alarm rule
               + **event**: event alarm rule
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the time when an alarm rule was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlarmRuleV4State.__new__(_AlarmRuleV4State)

        __props__.__dict__["alarm_notifications"] = alarm_notifications
        __props__.__dict__["alarm_rule_id"] = alarm_rule_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enable"] = enable
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["event_alarm_spec"] = event_alarm_spec
        __props__.__dict__["metric_alarm_spec"] = metric_alarm_spec
        __props__.__dict__["name"] = name
        __props__.__dict__["prom_instance_id"] = prom_instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        return AlarmRuleV4(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="alarmNotifications")
    def alarm_notifications(self) -> pulumi.Output['outputs.AlarmRuleV4AlarmNotifications']:
        """
        Specifies the alarm notification module.
        The alarm_notifications structure is documented below.
        """
        return pulumi.get(self, "alarm_notifications")

    @_builtins.property
    @pulumi.getter(name="alarmRuleId")
    def alarm_rule_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the alarm rule ID.
        """
        return pulumi.get(self, "alarm_rule_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when an alarm rule was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the alarm rule description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable the alarm rule. Defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the alarm rule belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="eventAlarmSpec")
    def event_alarm_spec(self) -> pulumi.Output[Optional['outputs.AlarmRuleV4EventAlarmSpec']]:
        """
        Specifies the structure of an event alarm rule.
        It's required if `type` is **event**.
        The event_alarm_spec structure is documented below.
        """
        return pulumi.get(self, "event_alarm_spec")

    @_builtins.property
    @pulumi.getter(name="metricAlarmSpec")
    def metric_alarm_spec(self) -> pulumi.Output[Optional['outputs.AlarmRuleV4MetricAlarmSpec']]:
        """
        Specifies the structure of a metric alarm rule.
        It's required if `type` is **metric**.
        The metric_alarm_spec structure is documented below.
        """
        return pulumi.get(self, "metric_alarm_spec")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm rule name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="promInstanceId")
    def prom_instance_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the prometheus instance ID to which the metric alarm rule belongs.
        It's required if `type` is **metric**.

        <a name="block--alarm_notifications"></a>
        The `alarm_notifications` block supports:
        """
        return pulumi.get(self, "prom_instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the alarm status.
        Value can be as follows:
        + **OK**: normal
        + **alarm**: threshold-crossing
        + **Effective**: in use
        + **Invalid**: not in use
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm rule type.
        Valid values are as follows:
        + **metric**: metric alarm rule
        + **event**: event alarm rule

        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when an alarm rule was updated.
        """
        return pulumi.get(self, "updated_at")

