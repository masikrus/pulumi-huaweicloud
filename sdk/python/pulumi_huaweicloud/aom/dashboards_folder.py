# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DashboardsFolderArgs', 'DashboardsFolder']

@pulumi.input_type
class DashboardsFolderArgs:
    def __init__(__self__, *,
                 folder_title: pulumi.Input[_builtins.str],
                 delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DashboardsFolder resource.
        :param pulumi.Input[_builtins.str] folder_title: Specifies the dashboards folder title.
        :param pulumi.Input[_builtins.bool] delete_all: Specifies whether to delete the dashboards when deleting folder. Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the folder belongs.
               Defaults to **0**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "folder_title", folder_title)
        if delete_all is not None:
            pulumi.set(__self__, "delete_all", delete_all)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="folderTitle")
    def folder_title(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the dashboards folder title.
        """
        return pulumi.get(self, "folder_title")

    @folder_title.setter
    def folder_title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "folder_title", value)

    @_builtins.property
    @pulumi.getter(name="deleteAll")
    def delete_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete the dashboards when deleting folder. Defaults to **false**.
        """
        return pulumi.get(self, "delete_all")

    @delete_all.setter
    def delete_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_all", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the folder belongs.
        Defaults to **0**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DashboardsFolderState:
    def __init__(__self__, *,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 dashboard_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 folder_title: Optional[pulumi.Input[_builtins.str]] = None,
                 is_template: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DashboardsFolder resources.
        :param pulumi.Input[_builtins.str] created_by: Indicates the creator of the folder.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dashboard_ids: Indicates the dashboard IDs under the folder.
        :param pulumi.Input[_builtins.bool] delete_all: Specifies whether to delete the dashboards when deleting folder. Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the folder belongs.
               Defaults to **0**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] folder_title: Specifies the dashboards folder title.
        :param pulumi.Input[_builtins.bool] is_template: Indicates whether the folder is default.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if dashboard_ids is not None:
            pulumi.set(__self__, "dashboard_ids", dashboard_ids)
        if delete_all is not None:
            pulumi.set(__self__, "delete_all", delete_all)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if folder_title is not None:
            pulumi.set(__self__, "folder_title", folder_title)
        if is_template is not None:
            pulumi.set(__self__, "is_template", is_template)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creator of the folder.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="dashboardIds")
    def dashboard_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the dashboard IDs under the folder.
        """
        return pulumi.get(self, "dashboard_ids")

    @dashboard_ids.setter
    def dashboard_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "dashboard_ids", value)

    @_builtins.property
    @pulumi.getter(name="deleteAll")
    def delete_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete the dashboards when deleting folder. Defaults to **false**.
        """
        return pulumi.get(self, "delete_all")

    @delete_all.setter
    def delete_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_all", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the folder belongs.
        Defaults to **0**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="folderTitle")
    def folder_title(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dashboards folder title.
        """
        return pulumi.get(self, "folder_title")

    @folder_title.setter
    def folder_title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "folder_title", value)

    @_builtins.property
    @pulumi.getter(name="isTemplate")
    def is_template(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the folder is default.
        """
        return pulumi.get(self, "is_template")

    @is_template.setter
    def is_template(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_template", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Aom/dashboardsFolder:DashboardsFolder")
class DashboardsFolder(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 folder_title: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an AOM dashboards folder resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        folder_title = config.require_object("folderTitle")
        test = huaweicloud.aom.DashboardsFolder("test",
            folder_title=folder_title,
            delete_all=False)
        ```

        ## Import

        The AOM dashboards folder resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/dashboardsFolder:DashboardsFolder test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from

        the API response. The missing attributes include: `delete_all`.

        It is generally recommended running `pulumi preview` after importing a dashboards folder.

        You can then decide if changes should be applied to the dashboards folder, or the resource definition

        should be updated to align with the dashboards folder. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_aom_dashboards_folder" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              delete_all,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] delete_all: Specifies whether to delete the dashboards when deleting folder. Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the folder belongs.
               Defaults to **0**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] folder_title: Specifies the dashboards folder title.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardsFolderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AOM dashboards folder resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        folder_title = config.require_object("folderTitle")
        test = huaweicloud.aom.DashboardsFolder("test",
            folder_title=folder_title,
            delete_all=False)
        ```

        ## Import

        The AOM dashboards folder resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/dashboardsFolder:DashboardsFolder test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from

        the API response. The missing attributes include: `delete_all`.

        It is generally recommended running `pulumi preview` after importing a dashboards folder.

        You can then decide if changes should be applied to the dashboards folder, or the resource definition

        should be updated to align with the dashboards folder. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_aom_dashboards_folder" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              delete_all,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DashboardsFolderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardsFolderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 folder_title: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardsFolderArgs.__new__(DashboardsFolderArgs)

            __props__.__dict__["delete_all"] = delete_all
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if folder_title is None and not opts.urn:
                raise TypeError("Missing required property 'folder_title'")
            __props__.__dict__["folder_title"] = folder_title
            __props__.__dict__["region"] = region
            __props__.__dict__["created_by"] = None
            __props__.__dict__["dashboard_ids"] = None
            __props__.__dict__["is_template"] = None
        super(DashboardsFolder, __self__).__init__(
            'huaweicloud:Aom/dashboardsFolder:DashboardsFolder',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            dashboard_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            folder_title: Optional[pulumi.Input[_builtins.str]] = None,
            is_template: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'DashboardsFolder':
        """
        Get an existing DashboardsFolder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_by: Indicates the creator of the folder.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dashboard_ids: Indicates the dashboard IDs under the folder.
        :param pulumi.Input[_builtins.bool] delete_all: Specifies whether to delete the dashboards when deleting folder. Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the folder belongs.
               Defaults to **0**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] folder_title: Specifies the dashboards folder title.
        :param pulumi.Input[_builtins.bool] is_template: Indicates whether the folder is default.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardsFolderState.__new__(_DashboardsFolderState)

        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["dashboard_ids"] = dashboard_ids
        __props__.__dict__["delete_all"] = delete_all
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["folder_title"] = folder_title
        __props__.__dict__["is_template"] = is_template
        __props__.__dict__["region"] = region
        return DashboardsFolder(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creator of the folder.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="dashboardIds")
    def dashboard_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Indicates the dashboard IDs under the folder.
        """
        return pulumi.get(self, "dashboard_ids")

    @_builtins.property
    @pulumi.getter(name="deleteAll")
    def delete_all(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to delete the dashboards when deleting folder. Defaults to **false**.
        """
        return pulumi.get(self, "delete_all")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the folder belongs.
        Defaults to **0**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="folderTitle")
    def folder_title(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the dashboards folder title.
        """
        return pulumi.get(self, "folder_title")

    @_builtins.property
    @pulumi.getter(name="isTemplate")
    def is_template(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the folder is default.
        """
        return pulumi.get(self, "is_template")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

