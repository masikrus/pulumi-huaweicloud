# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPromInstancesResult',
    'AwaitableGetPromInstancesResult',
    'get_prom_instances',
    'get_prom_instances_output',
]

@pulumi.output_type
class GetPromInstancesResult:
    """
    A collection of values returned by getPromInstances.
    """
    def __init__(__self__, cce_cluster_enable=None, enterprise_project_id=None, id=None, instances=None, prom_id=None, prom_status=None, prom_type=None, region=None):
        if cce_cluster_enable and not isinstance(cce_cluster_enable, str):
            raise TypeError("Expected argument 'cce_cluster_enable' to be a str")
        pulumi.set(__self__, "cce_cluster_enable", cce_cluster_enable)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if prom_id and not isinstance(prom_id, str):
            raise TypeError("Expected argument 'prom_id' to be a str")
        pulumi.set(__self__, "prom_id", prom_id)
        if prom_status and not isinstance(prom_status, str):
            raise TypeError("Expected argument 'prom_status' to be a str")
        pulumi.set(__self__, "prom_status", prom_status)
        if prom_type and not isinstance(prom_type, str):
            raise TypeError("Expected argument 'prom_type' to be a str")
        pulumi.set(__self__, "prom_type", prom_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="cceClusterEnable")
    def cce_cluster_enable(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cce_cluster_enable")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        Indicates the enterprise project ID to which the prometheus instance belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetPromInstancesInstanceResult']:
        """
        Indicates the prometheus instances list.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="promId")
    def prom_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "prom_id")

    @_builtins.property
    @pulumi.getter(name="promStatus")
    def prom_status(self) -> Optional[_builtins.str]:
        """
        Indicates the prometheus instance status.
        """
        return pulumi.get(self, "prom_status")

    @_builtins.property
    @pulumi.getter(name="promType")
    def prom_type(self) -> Optional[_builtins.str]:
        """
        Indicates the prometheus instance type.
        """
        return pulumi.get(self, "prom_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetPromInstancesResult(GetPromInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPromInstancesResult(
            cce_cluster_enable=self.cce_cluster_enable,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            instances=self.instances,
            prom_id=self.prom_id,
            prom_status=self.prom_status,
            prom_type=self.prom_type,
            region=self.region)


def get_prom_instances(cce_cluster_enable: Optional[_builtins.str] = None,
                       enterprise_project_id: Optional[_builtins.str] = None,
                       prom_id: Optional[_builtins.str] = None,
                       prom_status: Optional[_builtins.str] = None,
                       prom_type: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPromInstancesResult:
    """
    Use this data source to get the list of AOM prometheus instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Aom.get_prom_instances()
    ```


    :param _builtins.str cce_cluster_enable: Specifies whether to enable a CCE cluster.
           Valid values are **true** and **false**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the prometheus instance belongs.
           If specifies it as **all_granted_eps**, means to query instances in all enterprise projects.
    :param _builtins.str prom_id: Specifies the prometheus instance ID.
           If both **prom_id** and **prom_type** exist, only **prom_id** takes effect.
    :param _builtins.str prom_status: Specifies the prometheus instance status.
           Valid values are **DELETED**, **NORMAL** and **ALL**.
    :param _builtins.str prom_type: Specifies the prometheus instance type. Valid values are **default**, **ECS**,
           **VPC**, **CCE**, **REMOTE_WRITE**, **KUBERNETES**, **CLOUD_SERVICE** and **ACROSS_ACCOUNT**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['cceClusterEnable'] = cce_cluster_enable
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['promId'] = prom_id
    __args__['promStatus'] = prom_status
    __args__['promType'] = prom_type
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Aom/getPromInstances:getPromInstances', __args__, opts=opts, typ=GetPromInstancesResult).value

    return AwaitableGetPromInstancesResult(
        cce_cluster_enable=pulumi.get(__ret__, 'cce_cluster_enable'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        prom_id=pulumi.get(__ret__, 'prom_id'),
        prom_status=pulumi.get(__ret__, 'prom_status'),
        prom_type=pulumi.get(__ret__, 'prom_type'),
        region=pulumi.get(__ret__, 'region'))
def get_prom_instances_output(cce_cluster_enable: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              prom_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              prom_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              prom_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPromInstancesResult]:
    """
    Use this data source to get the list of AOM prometheus instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Aom.get_prom_instances()
    ```


    :param _builtins.str cce_cluster_enable: Specifies whether to enable a CCE cluster.
           Valid values are **true** and **false**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the prometheus instance belongs.
           If specifies it as **all_granted_eps**, means to query instances in all enterprise projects.
    :param _builtins.str prom_id: Specifies the prometheus instance ID.
           If both **prom_id** and **prom_type** exist, only **prom_id** takes effect.
    :param _builtins.str prom_status: Specifies the prometheus instance status.
           Valid values are **DELETED**, **NORMAL** and **ALL**.
    :param _builtins.str prom_type: Specifies the prometheus instance type. Valid values are **default**, **ECS**,
           **VPC**, **CCE**, **REMOTE_WRITE**, **KUBERNETES**, **CLOUD_SERVICE** and **ACROSS_ACCOUNT**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['cceClusterEnable'] = cce_cluster_enable
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['promId'] = prom_id
    __args__['promStatus'] = prom_status
    __args__['promType'] = prom_type
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Aom/getPromInstances:getPromInstances', __args__, opts=opts, typ=GetPromInstancesResult)
    return __ret__.apply(lambda __response__: GetPromInstancesResult(
        cce_cluster_enable=pulumi.get(__response__, 'cce_cluster_enable'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        prom_id=pulumi.get(__response__, 'prom_id'),
        prom_status=pulumi.get(__response__, 'prom_status'),
        prom_type=pulumi.get(__response__, 'prom_type'),
        region=pulumi.get(__response__, 'region')))
