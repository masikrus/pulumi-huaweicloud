# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlarmRulesTemplateArgs', 'AlarmRulesTemplate']

@pulumi.input_type
class AlarmRulesTemplateArgs:
    def __init__(__self__, *,
                 alarm_template_spec_lists: pulumi.Input[Sequence[pulumi.Input['AlarmRulesTemplateAlarmTemplateSpecListArgs']]],
                 type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 templating: Optional[pulumi.Input['AlarmRulesTemplateTemplatingArgs']] = None):
        """
        The set of arguments for constructing a AlarmRulesTemplate resource.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmRulesTemplateAlarmTemplateSpecListArgs']]] alarm_template_spec_lists: Specifies the alarm template spec list.
               The alarm_template_spec_list structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the type.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the template belongs.
               Changing this creates a new resource.
               
               <a name="alarm_template_spec_list"></a>
               The `alarm_template_spec_list` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['AlarmRulesTemplateTemplatingArgs'] templating: Specifies the variable list.
               The templating structure is documented below.
        """
        pulumi.set(__self__, "alarm_template_spec_lists", alarm_template_spec_lists)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if templating is not None:
            pulumi.set(__self__, "templating", templating)

    @_builtins.property
    @pulumi.getter(name="alarmTemplateSpecLists")
    def alarm_template_spec_lists(self) -> pulumi.Input[Sequence[pulumi.Input['AlarmRulesTemplateAlarmTemplateSpecListArgs']]]:
        """
        Specifies the alarm template spec list.
        The alarm_template_spec_list structure is documented below.
        """
        return pulumi.get(self, "alarm_template_spec_lists")

    @alarm_template_spec_lists.setter
    def alarm_template_spec_lists(self, value: pulumi.Input[Sequence[pulumi.Input['AlarmRulesTemplateAlarmTemplateSpecListArgs']]]):
        pulumi.set(self, "alarm_template_spec_lists", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the template belongs.
        Changing this creates a new resource.

        <a name="alarm_template_spec_list"></a>
        The `alarm_template_spec_list` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def templating(self) -> Optional[pulumi.Input['AlarmRulesTemplateTemplatingArgs']]:
        """
        Specifies the variable list.
        The templating structure is documented below.
        """
        return pulumi.get(self, "templating")

    @templating.setter
    def templating(self, value: Optional[pulumi.Input['AlarmRulesTemplateTemplatingArgs']]):
        pulumi.set(self, "templating", value)


@pulumi.input_type
class _AlarmRulesTemplateState:
    def __init__(__self__, *,
                 alarm_template_spec_lists: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmRulesTemplateAlarmTemplateSpecListArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 templating: Optional[pulumi.Input['AlarmRulesTemplateTemplatingArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AlarmRulesTemplate resources.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmRulesTemplateAlarmTemplateSpecListArgs']]] alarm_template_spec_lists: Specifies the alarm template spec list.
               The alarm_template_spec_list structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The create time of the template.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the template belongs.
               Changing this creates a new resource.
               
               <a name="alarm_template_spec_list"></a>
               The `alarm_template_spec_list` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['AlarmRulesTemplateTemplatingArgs'] templating: Specifies the variable list.
               The templating structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the type.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the template.
        """
        if alarm_template_spec_lists is not None:
            pulumi.set(__self__, "alarm_template_spec_lists", alarm_template_spec_lists)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if templating is not None:
            pulumi.set(__self__, "templating", templating)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="alarmTemplateSpecLists")
    def alarm_template_spec_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmRulesTemplateAlarmTemplateSpecListArgs']]]]:
        """
        Specifies the alarm template spec list.
        The alarm_template_spec_list structure is documented below.
        """
        return pulumi.get(self, "alarm_template_spec_lists")

    @alarm_template_spec_lists.setter
    def alarm_template_spec_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmRulesTemplateAlarmTemplateSpecListArgs']]]]):
        pulumi.set(self, "alarm_template_spec_lists", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The create time of the template.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the template belongs.
        Changing this creates a new resource.

        <a name="alarm_template_spec_list"></a>
        The `alarm_template_spec_list` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def templating(self) -> Optional[pulumi.Input['AlarmRulesTemplateTemplatingArgs']]:
        """
        Specifies the variable list.
        The templating structure is documented below.
        """
        return pulumi.get(self, "templating")

    @templating.setter
    def templating(self, value: Optional[pulumi.Input['AlarmRulesTemplateTemplatingArgs']]):
        pulumi.set(self, "templating", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time of the template.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Aom/alarmRulesTemplate:AlarmRulesTemplate")
class AlarmRulesTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_template_spec_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmRulesTemplateAlarmTemplateSpecListArgs', 'AlarmRulesTemplateAlarmTemplateSpecListArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 templating: Optional[pulumi.Input[Union['AlarmRulesTemplateTemplatingArgs', 'AlarmRulesTemplateTemplatingArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an AOM cloud alarm rules template resource within HuaweiCloud.

        ## Import

        The template can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/alarmRulesTemplate:AlarmRulesTemplate test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AlarmRulesTemplateAlarmTemplateSpecListArgs', 'AlarmRulesTemplateAlarmTemplateSpecListArgsDict']]]] alarm_template_spec_lists: Specifies the alarm template spec list.
               The alarm_template_spec_list structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the template belongs.
               Changing this creates a new resource.
               
               <a name="alarm_template_spec_list"></a>
               The `alarm_template_spec_list` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['AlarmRulesTemplateTemplatingArgs', 'AlarmRulesTemplateTemplatingArgsDict']] templating: Specifies the variable list.
               The templating structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlarmRulesTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AOM cloud alarm rules template resource within HuaweiCloud.

        ## Import

        The template can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/alarmRulesTemplate:AlarmRulesTemplate test <id>
        ```

        :param str resource_name: The name of the resource.
        :param AlarmRulesTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlarmRulesTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_template_spec_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmRulesTemplateAlarmTemplateSpecListArgs', 'AlarmRulesTemplateAlarmTemplateSpecListArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 templating: Optional[pulumi.Input[Union['AlarmRulesTemplateTemplatingArgs', 'AlarmRulesTemplateTemplatingArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlarmRulesTemplateArgs.__new__(AlarmRulesTemplateArgs)

            if alarm_template_spec_lists is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_template_spec_lists'")
            __props__.__dict__["alarm_template_spec_lists"] = alarm_template_spec_lists
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["templating"] = templating
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(AlarmRulesTemplate, __self__).__init__(
            'huaweicloud:Aom/alarmRulesTemplate:AlarmRulesTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alarm_template_spec_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmRulesTemplateAlarmTemplateSpecListArgs', 'AlarmRulesTemplateAlarmTemplateSpecListArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            templating: Optional[pulumi.Input[Union['AlarmRulesTemplateTemplatingArgs', 'AlarmRulesTemplateTemplatingArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'AlarmRulesTemplate':
        """
        Get an existing AlarmRulesTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AlarmRulesTemplateAlarmTemplateSpecListArgs', 'AlarmRulesTemplateAlarmTemplateSpecListArgsDict']]]] alarm_template_spec_lists: Specifies the alarm template spec list.
               The alarm_template_spec_list structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The create time of the template.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the template belongs.
               Changing this creates a new resource.
               
               <a name="alarm_template_spec_list"></a>
               The `alarm_template_spec_list` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['AlarmRulesTemplateTemplatingArgs', 'AlarmRulesTemplateTemplatingArgsDict']] templating: Specifies the variable list.
               The templating structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the type.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the template.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlarmRulesTemplateState.__new__(_AlarmRulesTemplateState)

        __props__.__dict__["alarm_template_spec_lists"] = alarm_template_spec_lists
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["templating"] = templating
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        return AlarmRulesTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="alarmTemplateSpecLists")
    def alarm_template_spec_lists(self) -> pulumi.Output[Sequence['outputs.AlarmRulesTemplateAlarmTemplateSpecList']]:
        """
        Specifies the alarm template spec list.
        The alarm_template_spec_list structure is documented below.
        """
        return pulumi.get(self, "alarm_template_spec_lists")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The create time of the template.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the template belongs.
        Changing this creates a new resource.

        <a name="alarm_template_spec_list"></a>
        The `alarm_template_spec_list` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def templating(self) -> pulumi.Output[Optional['outputs.AlarmRulesTemplateTemplating']]:
        """
        Specifies the variable list.
        The templating structure is documented below.
        """
        return pulumi.get(self, "templating")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time of the template.
        """
        return pulumi.get(self, "updated_at")

