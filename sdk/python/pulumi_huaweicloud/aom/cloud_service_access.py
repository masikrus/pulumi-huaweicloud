# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CloudServiceAccessArgs', 'CloudServiceAccess']

@pulumi.input_type
class CloudServiceAccessArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 service: pulumi.Input[_builtins.str],
                 tag_sync: pulumi.Input[_builtins.str],
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CloudServiceAccess resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AOM prometheus instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] service: Specifies the service name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] tag_sync: Specifies whether tags are automatically synchronized.
               Valid values are **auto** and **manual**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the instance belongs.
               Defaults to **0**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "tag_sync", tag_sync)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the AOM prometheus instance ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the service name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter(name="tagSync")
    def tag_sync(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies whether tags are automatically synchronized.
        Valid values are **auto** and **manual**.
        """
        return pulumi.get(self, "tag_sync")

    @tag_sync.setter
    def tag_sync(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tag_sync", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the instance belongs.
        Defaults to **0**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _CloudServiceAccessState:
    def __init__(__self__, *,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_sync: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CloudServiceAccess resources.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the instance belongs.
               Defaults to **0**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AOM prometheus instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] service: Specifies the service name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] tag_sync: Specifies whether tags are automatically synchronized.
               Valid values are **auto** and **manual**.
        """
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if tag_sync is not None:
            pulumi.set(__self__, "tag_sync", tag_sync)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the instance belongs.
        Defaults to **0**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AOM prometheus instance ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the service name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter(name="tagSync")
    def tag_sync(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether tags are automatically synchronized.
        Valid values are **auto** and **manual**.
        """
        return pulumi.get(self, "tag_sync")

    @tag_sync.setter
    def tag_sync(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag_sync", value)


@pulumi.type_token("huaweicloud:Aom/cloudServiceAccess:CloudServiceAccess")
class CloudServiceAccess(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_sync: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an AOM cloud service access resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        service = config.require_object("service")
        test = huaweicloud.aom.CloudServiceAccess("test",
            instance_id=instance_id,
            service=service,
            tag_sync="auto",
            enterprise_project_id="0")
        ```

        ## Import

        The AOM cloud service access resource can be imported using `instance_id` and `service` separated by a slash e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/cloudServiceAccess:CloudServiceAccess test <instance_id>/<service>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the instance belongs.
               Defaults to **0**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AOM prometheus instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] service: Specifies the service name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] tag_sync: Specifies whether tags are automatically synchronized.
               Valid values are **auto** and **manual**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudServiceAccessArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AOM cloud service access resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        service = config.require_object("service")
        test = huaweicloud.aom.CloudServiceAccess("test",
            instance_id=instance_id,
            service=service,
            tag_sync="auto",
            enterprise_project_id="0")
        ```

        ## Import

        The AOM cloud service access resource can be imported using `instance_id` and `service` separated by a slash e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/cloudServiceAccess:CloudServiceAccess test <instance_id>/<service>
        ```

        :param str resource_name: The name of the resource.
        :param CloudServiceAccessArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudServiceAccessArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_sync: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudServiceAccessArgs.__new__(CloudServiceAccessArgs)

            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__.__dict__["service"] = service
            if tag_sync is None and not opts.urn:
                raise TypeError("Missing required property 'tag_sync'")
            __props__.__dict__["tag_sync"] = tag_sync
        super(CloudServiceAccess, __self__).__init__(
            'huaweicloud:Aom/cloudServiceAccess:CloudServiceAccess',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            service: Optional[pulumi.Input[_builtins.str]] = None,
            tag_sync: Optional[pulumi.Input[_builtins.str]] = None) -> 'CloudServiceAccess':
        """
        Get an existing CloudServiceAccess resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the instance belongs.
               Defaults to **0**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AOM prometheus instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] service: Specifies the service name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] tag_sync: Specifies whether tags are automatically synchronized.
               Valid values are **auto** and **manual**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudServiceAccessState.__new__(_CloudServiceAccessState)

        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["service"] = service
        __props__.__dict__["tag_sync"] = tag_sync
        return CloudServiceAccess(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the instance belongs.
        Defaults to **0**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the AOM prometheus instance ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the service name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="tagSync")
    def tag_sync(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether tags are automatically synchronized.
        Valid values are **auto** and **manual**.
        """
        return pulumi.get(self, "tag_sync")

