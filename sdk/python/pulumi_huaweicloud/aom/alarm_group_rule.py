# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlarmGroupRuleArgs', 'AlarmGroupRule']

@pulumi.input_type
class AlarmGroupRuleArgs:
    def __init__(__self__, *,
                 details: pulumi.Input[Sequence[pulumi.Input['AlarmGroupRuleDetailArgs']]],
                 group_bies: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 group_interval: pulumi.Input[_builtins.int],
                 group_repeat_waiting: pulumi.Input[_builtins.int],
                 group_wait: pulumi.Input[_builtins.int],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AlarmGroupRule resource.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmGroupRuleDetailArgs']]] details: Specifies the grouping conditions list.
               The detail structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] group_bies: Specifies the combine notifications.
        :param pulumi.Input[_builtins.int] group_interval: Specifies the batch processing interval.
               Value ranges from `5` to `1,800`. Unit is second.
        :param pulumi.Input[_builtins.int] group_repeat_waiting: Specifies the repeat interval.
               Value ranges from `0` to `1,296,000`. Unit is second.
        :param pulumi.Input[_builtins.int] group_wait: Specifies the initial wait time.
               Value ranges from `0` to `600`. Unit is second.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the rule.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the rule belongs.
               Changing this creates a new resource.
               
               <a name="block--detail"></a>
               The `detail` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the alarm group rule name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "group_bies", group_bies)
        pulumi.set(__self__, "group_interval", group_interval)
        pulumi.set(__self__, "group_repeat_waiting", group_repeat_waiting)
        pulumi.set(__self__, "group_wait", group_wait)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def details(self) -> pulumi.Input[Sequence[pulumi.Input['AlarmGroupRuleDetailArgs']]]:
        """
        Specifies the grouping conditions list.
        The detail structure is documented below.
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: pulumi.Input[Sequence[pulumi.Input['AlarmGroupRuleDetailArgs']]]):
        pulumi.set(self, "details", value)

    @_builtins.property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the combine notifications.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "group_bies", value)

    @_builtins.property
    @pulumi.getter(name="groupInterval")
    def group_interval(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the batch processing interval.
        Value ranges from `5` to `1,800`. Unit is second.
        """
        return pulumi.get(self, "group_interval")

    @group_interval.setter
    def group_interval(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "group_interval", value)

    @_builtins.property
    @pulumi.getter(name="groupRepeatWaiting")
    def group_repeat_waiting(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the repeat interval.
        Value ranges from `0` to `1,296,000`. Unit is second.
        """
        return pulumi.get(self, "group_repeat_waiting")

    @group_repeat_waiting.setter
    def group_repeat_waiting(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "group_repeat_waiting", value)

    @_builtins.property
    @pulumi.getter(name="groupWait")
    def group_wait(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the initial wait time.
        Value ranges from `0` to `600`. Unit is second.
        """
        return pulumi.get(self, "group_wait")

    @group_wait.setter
    def group_wait(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "group_wait", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the rule belongs.
        Changing this creates a new resource.

        <a name="block--detail"></a>
        The `detail` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm group rule name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AlarmGroupRuleState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmGroupRuleDetailArgs']]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 group_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 group_repeat_waiting: Optional[pulumi.Input[_builtins.int]] = None,
                 group_wait: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AlarmGroupRule resources.
        :param pulumi.Input[_builtins.str] created_at: Indicates the rule create time.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the rule.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmGroupRuleDetailArgs']]] details: Specifies the grouping conditions list.
               The detail structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the rule belongs.
               Changing this creates a new resource.
               
               <a name="block--detail"></a>
               The `detail` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] group_bies: Specifies the combine notifications.
        :param pulumi.Input[_builtins.int] group_interval: Specifies the batch processing interval.
               Value ranges from `5` to `1,800`. Unit is second.
        :param pulumi.Input[_builtins.int] group_repeat_waiting: Specifies the repeat interval.
               Value ranges from `0` to `1,296,000`. Unit is second.
        :param pulumi.Input[_builtins.int] group_wait: Specifies the initial wait time.
               Value ranges from `0` to `600`. Unit is second.
        :param pulumi.Input[_builtins.str] name: Specifies the alarm group rule name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the rule update time.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if group_interval is not None:
            pulumi.set(__self__, "group_interval", group_interval)
        if group_repeat_waiting is not None:
            pulumi.set(__self__, "group_repeat_waiting", group_repeat_waiting)
        if group_wait is not None:
            pulumi.set(__self__, "group_wait", group_wait)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the rule create time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmGroupRuleDetailArgs']]]]:
        """
        Specifies the grouping conditions list.
        The detail structure is documented below.
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmGroupRuleDetailArgs']]]]):
        pulumi.set(self, "details", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the rule belongs.
        Changing this creates a new resource.

        <a name="block--detail"></a>
        The `detail` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the combine notifications.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "group_bies", value)

    @_builtins.property
    @pulumi.getter(name="groupInterval")
    def group_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the batch processing interval.
        Value ranges from `5` to `1,800`. Unit is second.
        """
        return pulumi.get(self, "group_interval")

    @group_interval.setter
    def group_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "group_interval", value)

    @_builtins.property
    @pulumi.getter(name="groupRepeatWaiting")
    def group_repeat_waiting(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the repeat interval.
        Value ranges from `0` to `1,296,000`. Unit is second.
        """
        return pulumi.get(self, "group_repeat_waiting")

    @group_repeat_waiting.setter
    def group_repeat_waiting(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "group_repeat_waiting", value)

    @_builtins.property
    @pulumi.getter(name="groupWait")
    def group_wait(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the initial wait time.
        Value ranges from `0` to `600`. Unit is second.
        """
        return pulumi.get(self, "group_wait")

    @group_wait.setter
    def group_wait(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "group_wait", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm group rule name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the rule update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Aom/alarmGroupRule:AlarmGroupRule")
class AlarmGroupRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmGroupRuleDetailArgs', 'AlarmGroupRuleDetailArgsDict']]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 group_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 group_repeat_waiting: Optional[pulumi.Input[_builtins.int]] = None,
                 group_wait: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an AOM alarm group rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        action_rule_name = config.require_object("actionRuleName")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.aom.AlarmGroupRule("test",
            name=name,
            group_bies=[
                "resource_provider",
                "key-test",
                "resource_type",
            ],
            group_interval=5,
            group_repeat_waiting=0,
            group_wait=0,
            description="test",
            enterprise_project_id=enterprise_project_id,
            details=[
                {
                    "bind_notification_rule_ids": [action_rule_name],
                    "matches": [
                        {
                            "key": "resource_type",
                            "operate": "EXIST",
                        },
                        {
                            "key": "resource_provider",
                            "operate": "EQUALS",
                            "values": ["test"],
                        },
                    ],
                },
                {
                    "bind_notification_rule_ids": [action_rule_name],
                    "matches": [{
                        "key": "key-test",
                        "operate": "EQUALS",
                        "values": ["value-test"],
                    }],
                },
            ])
        ```

        ## Import

        The rule can be imported using `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/alarmGroupRule:AlarmGroupRule test <name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the rule.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AlarmGroupRuleDetailArgs', 'AlarmGroupRuleDetailArgsDict']]]] details: Specifies the grouping conditions list.
               The detail structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the rule belongs.
               Changing this creates a new resource.
               
               <a name="block--detail"></a>
               The `detail` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] group_bies: Specifies the combine notifications.
        :param pulumi.Input[_builtins.int] group_interval: Specifies the batch processing interval.
               Value ranges from `5` to `1,800`. Unit is second.
        :param pulumi.Input[_builtins.int] group_repeat_waiting: Specifies the repeat interval.
               Value ranges from `0` to `1,296,000`. Unit is second.
        :param pulumi.Input[_builtins.int] group_wait: Specifies the initial wait time.
               Value ranges from `0` to `600`. Unit is second.
        :param pulumi.Input[_builtins.str] name: Specifies the alarm group rule name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlarmGroupRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AOM alarm group rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        action_rule_name = config.require_object("actionRuleName")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.aom.AlarmGroupRule("test",
            name=name,
            group_bies=[
                "resource_provider",
                "key-test",
                "resource_type",
            ],
            group_interval=5,
            group_repeat_waiting=0,
            group_wait=0,
            description="test",
            enterprise_project_id=enterprise_project_id,
            details=[
                {
                    "bind_notification_rule_ids": [action_rule_name],
                    "matches": [
                        {
                            "key": "resource_type",
                            "operate": "EXIST",
                        },
                        {
                            "key": "resource_provider",
                            "operate": "EQUALS",
                            "values": ["test"],
                        },
                    ],
                },
                {
                    "bind_notification_rule_ids": [action_rule_name],
                    "matches": [{
                        "key": "key-test",
                        "operate": "EQUALS",
                        "values": ["value-test"],
                    }],
                },
            ])
        ```

        ## Import

        The rule can be imported using `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/alarmGroupRule:AlarmGroupRule test <name>
        ```

        :param str resource_name: The name of the resource.
        :param AlarmGroupRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlarmGroupRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmGroupRuleDetailArgs', 'AlarmGroupRuleDetailArgsDict']]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 group_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 group_repeat_waiting: Optional[pulumi.Input[_builtins.int]] = None,
                 group_wait: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlarmGroupRuleArgs.__new__(AlarmGroupRuleArgs)

            __props__.__dict__["description"] = description
            if details is None and not opts.urn:
                raise TypeError("Missing required property 'details'")
            __props__.__dict__["details"] = details
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if group_bies is None and not opts.urn:
                raise TypeError("Missing required property 'group_bies'")
            __props__.__dict__["group_bies"] = group_bies
            if group_interval is None and not opts.urn:
                raise TypeError("Missing required property 'group_interval'")
            __props__.__dict__["group_interval"] = group_interval
            if group_repeat_waiting is None and not opts.urn:
                raise TypeError("Missing required property 'group_repeat_waiting'")
            __props__.__dict__["group_repeat_waiting"] = group_repeat_waiting
            if group_wait is None and not opts.urn:
                raise TypeError("Missing required property 'group_wait'")
            __props__.__dict__["group_wait"] = group_wait
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(AlarmGroupRule, __self__).__init__(
            'huaweicloud:Aom/alarmGroupRule:AlarmGroupRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmGroupRuleDetailArgs', 'AlarmGroupRuleDetailArgsDict']]]]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            group_interval: Optional[pulumi.Input[_builtins.int]] = None,
            group_repeat_waiting: Optional[pulumi.Input[_builtins.int]] = None,
            group_wait: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'AlarmGroupRule':
        """
        Get an existing AlarmGroupRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the rule create time.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the rule.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AlarmGroupRuleDetailArgs', 'AlarmGroupRuleDetailArgsDict']]]] details: Specifies the grouping conditions list.
               The detail structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the rule belongs.
               Changing this creates a new resource.
               
               <a name="block--detail"></a>
               The `detail` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] group_bies: Specifies the combine notifications.
        :param pulumi.Input[_builtins.int] group_interval: Specifies the batch processing interval.
               Value ranges from `5` to `1,800`. Unit is second.
        :param pulumi.Input[_builtins.int] group_repeat_waiting: Specifies the repeat interval.
               Value ranges from `0` to `1,296,000`. Unit is second.
        :param pulumi.Input[_builtins.int] group_wait: Specifies the initial wait time.
               Value ranges from `0` to `600`. Unit is second.
        :param pulumi.Input[_builtins.str] name: Specifies the alarm group rule name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the rule update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlarmGroupRuleState.__new__(_AlarmGroupRuleState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["details"] = details
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["group_bies"] = group_bies
        __props__.__dict__["group_interval"] = group_interval
        __props__.__dict__["group_repeat_waiting"] = group_repeat_waiting
        __props__.__dict__["group_wait"] = group_wait
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["updated_at"] = updated_at
        return AlarmGroupRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the rule create time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def details(self) -> pulumi.Output[Sequence['outputs.AlarmGroupRuleDetail']]:
        """
        Specifies the grouping conditions list.
        The detail structure is documented below.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the rule belongs.
        Changing this creates a new resource.

        <a name="block--detail"></a>
        The `detail` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the combine notifications.
        """
        return pulumi.get(self, "group_bies")

    @_builtins.property
    @pulumi.getter(name="groupInterval")
    def group_interval(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the batch processing interval.
        Value ranges from `5` to `1,800`. Unit is second.
        """
        return pulumi.get(self, "group_interval")

    @_builtins.property
    @pulumi.getter(name="groupRepeatWaiting")
    def group_repeat_waiting(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the repeat interval.
        Value ranges from `0` to `1,296,000`. Unit is second.
        """
        return pulumi.get(self, "group_repeat_waiting")

    @_builtins.property
    @pulumi.getter(name="groupWait")
    def group_wait(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the initial wait time.
        Value ranges from `0` to `600`. Unit is second.
        """
        return pulumi.get(self, "group_wait")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm group rule name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the rule update time.
        """
        return pulumi.get(self, "updated_at")

