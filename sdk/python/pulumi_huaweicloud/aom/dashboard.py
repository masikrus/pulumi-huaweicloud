# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DashboardArgs', 'Dashboard']

@pulumi.input_type
class DashboardArgs:
    def __init__(__self__, *,
                 dashboard_title: pulumi.Input[_builtins.str],
                 dashboard_type: pulumi.Input[_builtins.str],
                 folder_title: pulumi.Input[_builtins.str],
                 charts: Optional[pulumi.Input[_builtins.str]] = None,
                 dashboard_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Dashboard resource.
        :param pulumi.Input[_builtins.str] dashboard_title: Specifies the dashboard title.
        :param pulumi.Input[_builtins.str] dashboard_type: Specifies the dashboard type. It's customized by user.
        :param pulumi.Input[_builtins.str] folder_title: Specifies the folder title.
        :param pulumi.Input[_builtins.str] charts: Specifies the dashboard charts. It's in json format.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]] dashboard_tags: Specifies the dashboard tags. It's an array of map.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the dashboards
               belongs. Defaults to **0**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] is_favorite: Specifies whether to favorite the dashboard. Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "dashboard_title", dashboard_title)
        pulumi.set(__self__, "dashboard_type", dashboard_type)
        pulumi.set(__self__, "folder_title", folder_title)
        if charts is not None:
            pulumi.set(__self__, "charts", charts)
        if dashboard_tags is not None:
            pulumi.set(__self__, "dashboard_tags", dashboard_tags)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="dashboardTitle")
    def dashboard_title(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the dashboard title.
        """
        return pulumi.get(self, "dashboard_title")

    @dashboard_title.setter
    def dashboard_title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dashboard_title", value)

    @_builtins.property
    @pulumi.getter(name="dashboardType")
    def dashboard_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the dashboard type. It's customized by user.
        """
        return pulumi.get(self, "dashboard_type")

    @dashboard_type.setter
    def dashboard_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dashboard_type", value)

    @_builtins.property
    @pulumi.getter(name="folderTitle")
    def folder_title(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the folder title.
        """
        return pulumi.get(self, "folder_title")

    @folder_title.setter
    def folder_title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "folder_title", value)

    @_builtins.property
    @pulumi.getter
    def charts(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dashboard charts. It's in json format.
        """
        return pulumi.get(self, "charts")

    @charts.setter
    def charts(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charts", value)

    @_builtins.property
    @pulumi.getter(name="dashboardTags")
    def dashboard_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]:
        """
        Specifies the dashboard tags. It's an array of map.
        """
        return pulumi.get(self, "dashboard_tags")

    @dashboard_tags.setter
    def dashboard_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]):
        pulumi.set(self, "dashboard_tags", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the dashboards
        belongs. Defaults to **0**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to favorite the dashboard. Defaults to **false**.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_favorite", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DashboardState:
    def __init__(__self__, *,
                 charts: Optional[pulumi.Input[_builtins.str]] = None,
                 dashboard_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 dashboard_title: Optional[pulumi.Input[_builtins.str]] = None,
                 dashboard_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 folder_title: Optional[pulumi.Input[_builtins.str]] = None,
                 is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Dashboard resources.
        :param pulumi.Input[_builtins.str] charts: Specifies the dashboard charts. It's in json format.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]] dashboard_tags: Specifies the dashboard tags. It's an array of map.
        :param pulumi.Input[_builtins.str] dashboard_title: Specifies the dashboard title.
        :param pulumi.Input[_builtins.str] dashboard_type: Specifies the dashboard type. It's customized by user.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the dashboards
               belongs. Defaults to **0**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] folder_title: Specifies the folder title.
        :param pulumi.Input[_builtins.bool] is_favorite: Specifies whether to favorite the dashboard. Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if charts is not None:
            pulumi.set(__self__, "charts", charts)
        if dashboard_tags is not None:
            pulumi.set(__self__, "dashboard_tags", dashboard_tags)
        if dashboard_title is not None:
            pulumi.set(__self__, "dashboard_title", dashboard_title)
        if dashboard_type is not None:
            pulumi.set(__self__, "dashboard_type", dashboard_type)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if folder_title is not None:
            pulumi.set(__self__, "folder_title", folder_title)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def charts(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dashboard charts. It's in json format.
        """
        return pulumi.get(self, "charts")

    @charts.setter
    def charts(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charts", value)

    @_builtins.property
    @pulumi.getter(name="dashboardTags")
    def dashboard_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]:
        """
        Specifies the dashboard tags. It's an array of map.
        """
        return pulumi.get(self, "dashboard_tags")

    @dashboard_tags.setter
    def dashboard_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]):
        pulumi.set(self, "dashboard_tags", value)

    @_builtins.property
    @pulumi.getter(name="dashboardTitle")
    def dashboard_title(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dashboard title.
        """
        return pulumi.get(self, "dashboard_title")

    @dashboard_title.setter
    def dashboard_title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dashboard_title", value)

    @_builtins.property
    @pulumi.getter(name="dashboardType")
    def dashboard_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dashboard type. It's customized by user.
        """
        return pulumi.get(self, "dashboard_type")

    @dashboard_type.setter
    def dashboard_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dashboard_type", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the dashboards
        belongs. Defaults to **0**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="folderTitle")
    def folder_title(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the folder title.
        """
        return pulumi.get(self, "folder_title")

    @folder_title.setter
    def folder_title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "folder_title", value)

    @_builtins.property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to favorite the dashboard. Defaults to **false**.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_favorite", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Aom/dashboard:Dashboard")
class Dashboard(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charts: Optional[pulumi.Input[_builtins.str]] = None,
                 dashboard_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 dashboard_title: Optional[pulumi.Input[_builtins.str]] = None,
                 dashboard_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 folder_title: Optional[pulumi.Input[_builtins.str]] = None,
                 is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an AOM dashboard resource within HuaweiCloud.

        ## Import

        The AOM dashboard resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/dashboard:Dashboard test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] charts: Specifies the dashboard charts. It's in json format.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]] dashboard_tags: Specifies the dashboard tags. It's an array of map.
        :param pulumi.Input[_builtins.str] dashboard_title: Specifies the dashboard title.
        :param pulumi.Input[_builtins.str] dashboard_type: Specifies the dashboard type. It's customized by user.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the dashboards
               belongs. Defaults to **0**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] folder_title: Specifies the folder title.
        :param pulumi.Input[_builtins.bool] is_favorite: Specifies whether to favorite the dashboard. Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AOM dashboard resource within HuaweiCloud.

        ## Import

        The AOM dashboard resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Aom/dashboard:Dashboard test <id>
        ```

        :param str resource_name: The name of the resource.
        :param DashboardArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charts: Optional[pulumi.Input[_builtins.str]] = None,
                 dashboard_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 dashboard_title: Optional[pulumi.Input[_builtins.str]] = None,
                 dashboard_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 folder_title: Optional[pulumi.Input[_builtins.str]] = None,
                 is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardArgs.__new__(DashboardArgs)

            __props__.__dict__["charts"] = charts
            __props__.__dict__["dashboard_tags"] = dashboard_tags
            if dashboard_title is None and not opts.urn:
                raise TypeError("Missing required property 'dashboard_title'")
            __props__.__dict__["dashboard_title"] = dashboard_title
            if dashboard_type is None and not opts.urn:
                raise TypeError("Missing required property 'dashboard_type'")
            __props__.__dict__["dashboard_type"] = dashboard_type
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if folder_title is None and not opts.urn:
                raise TypeError("Missing required property 'folder_title'")
            __props__.__dict__["folder_title"] = folder_title
            __props__.__dict__["is_favorite"] = is_favorite
            __props__.__dict__["region"] = region
        super(Dashboard, __self__).__init__(
            'huaweicloud:Aom/dashboard:Dashboard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            charts: Optional[pulumi.Input[_builtins.str]] = None,
            dashboard_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
            dashboard_title: Optional[pulumi.Input[_builtins.str]] = None,
            dashboard_type: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            folder_title: Optional[pulumi.Input[_builtins.str]] = None,
            is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'Dashboard':
        """
        Get an existing Dashboard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] charts: Specifies the dashboard charts. It's in json format.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]] dashboard_tags: Specifies the dashboard tags. It's an array of map.
        :param pulumi.Input[_builtins.str] dashboard_title: Specifies the dashboard title.
        :param pulumi.Input[_builtins.str] dashboard_type: Specifies the dashboard type. It's customized by user.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the dashboards
               belongs. Defaults to **0**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] folder_title: Specifies the folder title.
        :param pulumi.Input[_builtins.bool] is_favorite: Specifies whether to favorite the dashboard. Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardState.__new__(_DashboardState)

        __props__.__dict__["charts"] = charts
        __props__.__dict__["dashboard_tags"] = dashboard_tags
        __props__.__dict__["dashboard_title"] = dashboard_title
        __props__.__dict__["dashboard_type"] = dashboard_type
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["folder_title"] = folder_title
        __props__.__dict__["is_favorite"] = is_favorite
        __props__.__dict__["region"] = region
        return Dashboard(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def charts(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the dashboard charts. It's in json format.
        """
        return pulumi.get(self, "charts")

    @_builtins.property
    @pulumi.getter(name="dashboardTags")
    def dashboard_tags(self) -> pulumi.Output[Optional[Sequence[Mapping[str, _builtins.str]]]]:
        """
        Specifies the dashboard tags. It's an array of map.
        """
        return pulumi.get(self, "dashboard_tags")

    @_builtins.property
    @pulumi.getter(name="dashboardTitle")
    def dashboard_title(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the dashboard title.
        """
        return pulumi.get(self, "dashboard_title")

    @_builtins.property
    @pulumi.getter(name="dashboardType")
    def dashboard_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the dashboard type. It's customized by user.
        """
        return pulumi.get(self, "dashboard_type")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the dashboards
        belongs. Defaults to **0**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="folderTitle")
    def folder_title(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the folder title.
        """
        return pulumi.get(self, "folder_title")

    @_builtins.property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to favorite the dashboard. Defaults to **false**.
        """
        return pulumi.get(self, "is_favorite")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

