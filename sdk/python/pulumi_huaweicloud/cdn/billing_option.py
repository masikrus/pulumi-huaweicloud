# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['BillingOptionArgs', 'BillingOption']

@pulumi.input_type
class BillingOptionArgs:
    def __init__(__self__, *,
                 charge_mode: pulumi.Input[_builtins.str],
                 product_type: pulumi.Input[_builtins.str],
                 service_area: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a BillingOption resource.
        :param pulumi.Input[_builtins.str] charge_mode: Specifies the billing option. The value can be **flux** (traffic-based billing) or
               **bw** (bandwidth-based billing, only for V2 and higher customers).
               
               > 1. If you change to be billed by peak bandwidth, your traffic package will be frozen. When you switch back,
               the traffic package still takes effect if it is within the required duration.<br> 2. The changes will take effect at
               00:00:00 (GMT+08:00) on the night of the day you submitted the changes. You can continue to make changes until that
               time when your most recently submitted change has taken effect.
        :param pulumi.Input[_builtins.str] product_type: Specifies the product mode. Only **base** (basic acceleration) is supported.
        :param pulumi.Input[_builtins.str] service_area: Specifies the service area. Only **mainland_china** (Chinese mainland) is supported.
        """
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "service_area", service_area)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the billing option. The value can be **flux** (traffic-based billing) or
        **bw** (bandwidth-based billing, only for V2 and higher customers).

        > 1. If you change to be billed by peak bandwidth, your traffic package will be frozen. When you switch back,
        the traffic package still takes effect if it is within the required duration.<br> 2. The changes will take effect at
        00:00:00 (GMT+08:00) on the night of the day you submitted the changes. You can continue to make changes until that
        time when your most recently submitted change has taken effect.
        """
        return pulumi.get(self, "charge_mode")

    @charge_mode.setter
    def charge_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "charge_mode", value)

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the product mode. Only **base** (basic acceleration) is supported.
        """
        return pulumi.get(self, "product_type")

    @product_type.setter
    def product_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_type", value)

    @_builtins.property
    @pulumi.getter(name="serviceArea")
    def service_area(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the service area. Only **mainland_china** (Chinese mainland) is supported.
        """
        return pulumi.get(self, "service_area")

    @service_area.setter
    def service_area(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_area", value)


@pulumi.input_type
class _BillingOptionState:
    def __init__(__self__, *,
                 charge_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 current_charge_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 effective_time: Optional[pulumi.Input[_builtins.str]] = None,
                 product_type: Optional[pulumi.Input[_builtins.str]] = None,
                 service_area: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BillingOption resources.
        :param pulumi.Input[_builtins.str] charge_mode: Specifies the billing option. The value can be **flux** (traffic-based billing) or
               **bw** (bandwidth-based billing, only for V2 and higher customers).
               
               > 1. If you change to be billed by peak bandwidth, your traffic package will be frozen. When you switch back,
               the traffic package still takes effect if it is within the required duration.<br> 2. The changes will take effect at
               00:00:00 (GMT+08:00) on the night of the day you submitted the changes. You can continue to make changes until that
               time when your most recently submitted change has taken effect.
        :param pulumi.Input[_builtins.str] created_at: The creation time.
        :param pulumi.Input[_builtins.str] current_charge_mode: The billing option of the account.
        :param pulumi.Input[_builtins.str] effective_time: The effective time of the option.
        :param pulumi.Input[_builtins.str] product_type: Specifies the product mode. Only **base** (basic acceleration) is supported.
        :param pulumi.Input[_builtins.str] service_area: Specifies the service area. Only **mainland_china** (Chinese mainland) is supported.
        :param pulumi.Input[_builtins.str] status: The status.
        """
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if current_charge_mode is not None:
            pulumi.set(__self__, "current_charge_mode", current_charge_mode)
        if effective_time is not None:
            pulumi.set(__self__, "effective_time", effective_time)
        if product_type is not None:
            pulumi.set(__self__, "product_type", product_type)
        if service_area is not None:
            pulumi.set(__self__, "service_area", service_area)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the billing option. The value can be **flux** (traffic-based billing) or
        **bw** (bandwidth-based billing, only for V2 and higher customers).

        > 1. If you change to be billed by peak bandwidth, your traffic package will be frozen. When you switch back,
        the traffic package still takes effect if it is within the required duration.<br> 2. The changes will take effect at
        00:00:00 (GMT+08:00) on the night of the day you submitted the changes. You can continue to make changes until that
        time when your most recently submitted change has taken effect.
        """
        return pulumi.get(self, "charge_mode")

    @charge_mode.setter
    def charge_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charge_mode", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="currentChargeMode")
    def current_charge_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The billing option of the account.
        """
        return pulumi.get(self, "current_charge_mode")

    @current_charge_mode.setter
    def current_charge_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "current_charge_mode", value)

    @_builtins.property
    @pulumi.getter(name="effectiveTime")
    def effective_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The effective time of the option.
        """
        return pulumi.get(self, "effective_time")

    @effective_time.setter
    def effective_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "effective_time", value)

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the product mode. Only **base** (basic acceleration) is supported.
        """
        return pulumi.get(self, "product_type")

    @product_type.setter
    def product_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "product_type", value)

    @_builtins.property
    @pulumi.getter(name="serviceArea")
    def service_area(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the service area. Only **mainland_china** (Chinese mainland) is supported.
        """
        return pulumi.get(self, "service_area")

    @service_area.setter
    def service_area(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_area", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:Cdn/billingOption:BillingOption")
class BillingOption(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charge_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 product_type: Optional[pulumi.Input[_builtins.str]] = None,
                 service_area: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CDN billing option resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        charge_mode = config.require_object("chargeMode")
        test = huaweicloud.cdn.BillingOption("test",
            charge_mode=charge_mode,
            product_type="base",
            service_area="mainland_china")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] charge_mode: Specifies the billing option. The value can be **flux** (traffic-based billing) or
               **bw** (bandwidth-based billing, only for V2 and higher customers).
               
               > 1. If you change to be billed by peak bandwidth, your traffic package will be frozen. When you switch back,
               the traffic package still takes effect if it is within the required duration.<br> 2. The changes will take effect at
               00:00:00 (GMT+08:00) on the night of the day you submitted the changes. You can continue to make changes until that
               time when your most recently submitted change has taken effect.
        :param pulumi.Input[_builtins.str] product_type: Specifies the product mode. Only **base** (basic acceleration) is supported.
        :param pulumi.Input[_builtins.str] service_area: Specifies the service area. Only **mainland_china** (Chinese mainland) is supported.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BillingOptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CDN billing option resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        charge_mode = config.require_object("chargeMode")
        test = huaweicloud.cdn.BillingOption("test",
            charge_mode=charge_mode,
            product_type="base",
            service_area="mainland_china")
        ```

        :param str resource_name: The name of the resource.
        :param BillingOptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BillingOptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charge_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 product_type: Optional[pulumi.Input[_builtins.str]] = None,
                 service_area: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BillingOptionArgs.__new__(BillingOptionArgs)

            if charge_mode is None and not opts.urn:
                raise TypeError("Missing required property 'charge_mode'")
            __props__.__dict__["charge_mode"] = charge_mode
            if product_type is None and not opts.urn:
                raise TypeError("Missing required property 'product_type'")
            __props__.__dict__["product_type"] = product_type
            if service_area is None and not opts.urn:
                raise TypeError("Missing required property 'service_area'")
            __props__.__dict__["service_area"] = service_area
            __props__.__dict__["created_at"] = None
            __props__.__dict__["current_charge_mode"] = None
            __props__.__dict__["effective_time"] = None
            __props__.__dict__["status"] = None
        super(BillingOption, __self__).__init__(
            'huaweicloud:Cdn/billingOption:BillingOption',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            charge_mode: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            current_charge_mode: Optional[pulumi.Input[_builtins.str]] = None,
            effective_time: Optional[pulumi.Input[_builtins.str]] = None,
            product_type: Optional[pulumi.Input[_builtins.str]] = None,
            service_area: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'BillingOption':
        """
        Get an existing BillingOption resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] charge_mode: Specifies the billing option. The value can be **flux** (traffic-based billing) or
               **bw** (bandwidth-based billing, only for V2 and higher customers).
               
               > 1. If you change to be billed by peak bandwidth, your traffic package will be frozen. When you switch back,
               the traffic package still takes effect if it is within the required duration.<br> 2. The changes will take effect at
               00:00:00 (GMT+08:00) on the night of the day you submitted the changes. You can continue to make changes until that
               time when your most recently submitted change has taken effect.
        :param pulumi.Input[_builtins.str] created_at: The creation time.
        :param pulumi.Input[_builtins.str] current_charge_mode: The billing option of the account.
        :param pulumi.Input[_builtins.str] effective_time: The effective time of the option.
        :param pulumi.Input[_builtins.str] product_type: Specifies the product mode. Only **base** (basic acceleration) is supported.
        :param pulumi.Input[_builtins.str] service_area: Specifies the service area. Only **mainland_china** (Chinese mainland) is supported.
        :param pulumi.Input[_builtins.str] status: The status.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BillingOptionState.__new__(_BillingOptionState)

        __props__.__dict__["charge_mode"] = charge_mode
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["current_charge_mode"] = current_charge_mode
        __props__.__dict__["effective_time"] = effective_time
        __props__.__dict__["product_type"] = product_type
        __props__.__dict__["service_area"] = service_area
        __props__.__dict__["status"] = status
        return BillingOption(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the billing option. The value can be **flux** (traffic-based billing) or
        **bw** (bandwidth-based billing, only for V2 and higher customers).

        > 1. If you change to be billed by peak bandwidth, your traffic package will be frozen. When you switch back,
        the traffic package still takes effect if it is within the required duration.<br> 2. The changes will take effect at
        00:00:00 (GMT+08:00) on the night of the day you submitted the changes. You can continue to make changes until that
        time when your most recently submitted change has taken effect.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="currentChargeMode")
    def current_charge_mode(self) -> pulumi.Output[_builtins.str]:
        """
        The billing option of the account.
        """
        return pulumi.get(self, "current_charge_mode")

    @_builtins.property
    @pulumi.getter(name="effectiveTime")
    def effective_time(self) -> pulumi.Output[_builtins.str]:
        """
        The effective time of the option.
        """
        return pulumi.get(self, "effective_time")

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the product mode. Only **base** (basic acceleration) is supported.
        """
        return pulumi.get(self, "product_type")

    @_builtins.property
    @pulumi.getter(name="serviceArea")
    def service_area(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the service area. Only **mainland_china** (Chinese mainland) is supported.
        """
        return pulumi.get(self, "service_area")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status.
        """
        return pulumi.get(self, "status")

