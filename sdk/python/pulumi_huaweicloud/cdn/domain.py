# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DomainArgs', 'Domain']

@pulumi.input_type
class DomainArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input['DomainSourceArgs']]],
                 type: pulumi.Input[_builtins.str],
                 cache_settings: Optional[pulumi.Input['DomainCacheSettingsArgs']] = None,
                 configs: Optional[pulumi.Input['DomainConfigsArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_area: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Domain resource.
        :param pulumi.Input[Sequence[pulumi.Input['DomainSourceArgs']]] sources: Specifies an array of one or more objects specifying origin server settings.
               A maximum of `50` origin site configurations can be configured.
               The sources structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the blacklist and whitelist rule type. Valid values are:
               + **black**: Blacklist. Users in regions specified in the blacklist cannot access resources and status code `403` is
               returned.
               + **white**: Whitelist. Only users in regions specified in the whitelist can access resources. Status code `403` is
               returned for other users.
        :param pulumi.Input['DomainCacheSettingsArgs'] cache_settings: Specifies the cache configuration. The cache_settings structure
               is documented below.
        :param pulumi.Input['DomainConfigsArgs'] configs: Specifies the domain configuration items. The configs structure is
               documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[_builtins.str] name: Specifies the HTTP response header. Valid values are **Content-Disposition**, **Content-Language**,
               **Access-Control-Allow-Origin**, **Access-Control-Allow-Methods**, **Access-Control-Max-Age**, **Access-Control-Expose-Headers**,
               **Access-Control-Allow-Headers** or custom headers. A header contains `1` to `100` characters, including letters, digits,
               and hyphens (-), and starts with a letter.
        :param pulumi.Input[_builtins.str] service_area: Specifies the area covered by the acceleration service.
               Valid values are as follows:
               + **mainland_china**: Indicates that the service scope is mainland China.
               + **outside_mainland_china**: Indicates that the service scope is outside mainland China.
               + **global**: Indicates that the service scope is global.
               
               > The service area cannot be changed between Chinese mainland and outside Chinese mainland.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the domain.
               
               <a name="sources_cdn_domain"></a>
               The `sources` block supports:
        """
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "type", type)
        if cache_settings is not None:
            pulumi.set(__self__, "cache_settings", cache_settings)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_area is not None:
            pulumi.set(__self__, "service_area", service_area)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input['DomainSourceArgs']]]:
        """
        Specifies an array of one or more objects specifying origin server settings.
        A maximum of `50` origin site configurations can be configured.
        The sources structure is documented below.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input['DomainSourceArgs']]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the blacklist and whitelist rule type. Valid values are:
        + **black**: Blacklist. Users in regions specified in the blacklist cannot access resources and status code `403` is
        returned.
        + **white**: Whitelist. Only users in regions specified in the whitelist can access resources. Status code `403` is
        returned for other users.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="cacheSettings")
    def cache_settings(self) -> Optional[pulumi.Input['DomainCacheSettingsArgs']]:
        """
        Specifies the cache configuration. The cache_settings structure
        is documented below.
        """
        return pulumi.get(self, "cache_settings")

    @cache_settings.setter
    def cache_settings(self, value: Optional[pulumi.Input['DomainCacheSettingsArgs']]):
        pulumi.set(self, "cache_settings", value)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input['DomainConfigsArgs']]:
        """
        Specifies the domain configuration items. The configs structure is
        documented below.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input['DomainConfigsArgs']]):
        pulumi.set(self, "configs", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the HTTP response header. Valid values are **Content-Disposition**, **Content-Language**,
        **Access-Control-Allow-Origin**, **Access-Control-Allow-Methods**, **Access-Control-Max-Age**, **Access-Control-Expose-Headers**,
        **Access-Control-Allow-Headers** or custom headers. A header contains `1` to `100` characters, including letters, digits,
        and hyphens (-), and starts with a letter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="serviceArea")
    def service_area(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the area covered by the acceleration service.
        Valid values are as follows:
        + **mainland_china**: Indicates that the service scope is mainland China.
        + **outside_mainland_china**: Indicates that the service scope is outside mainland China.
        + **global**: Indicates that the service scope is global.

        > The service area cannot be changed between Chinese mainland and outside Chinese mainland.
        """
        return pulumi.get(self, "service_area")

    @service_area.setter
    def service_area(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_area", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the domain.

        <a name="sources_cdn_domain"></a>
        The `sources` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _DomainState:
    def __init__(__self__, *,
                 cache_settings: Optional[pulumi.Input['DomainCacheSettingsArgs']] = None,
                 cname: Optional[pulumi.Input[_builtins.str]] = None,
                 configs: Optional[pulumi.Input['DomainConfigsArgs']] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_status: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_area: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['DomainSourceArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Domain resources.
        :param pulumi.Input['DomainCacheSettingsArgs'] cache_settings: Specifies the cache configuration. The cache_settings structure
               is documented below.
        :param pulumi.Input[_builtins.str] cname: The CNAME of the acceleration domain name.
        :param pulumi.Input['DomainConfigsArgs'] configs: Specifies the domain configuration items. The configs structure is
               documented below.
        :param pulumi.Input[_builtins.str] domain_name: schema: Internal
        :param pulumi.Input[_builtins.str] domain_status: The status of the acceleration domain name. The available values are
               **online**, **offline**, **configuring**, **configure_failed**, **checking**, **check_failed** and **deleting**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[_builtins.str] name: Specifies the HTTP response header. Valid values are **Content-Disposition**, **Content-Language**,
               **Access-Control-Allow-Origin**, **Access-Control-Allow-Methods**, **Access-Control-Max-Age**, **Access-Control-Expose-Headers**,
               **Access-Control-Allow-Headers** or custom headers. A header contains `1` to `100` characters, including letters, digits,
               and hyphens (-), and starts with a letter.
        :param pulumi.Input[_builtins.str] service_area: Specifies the area covered by the acceleration service.
               Valid values are as follows:
               + **mainland_china**: Indicates that the service scope is mainland China.
               + **outside_mainland_china**: Indicates that the service scope is outside mainland China.
               + **global**: Indicates that the service scope is global.
               
               > The service area cannot be changed between Chinese mainland and outside Chinese mainland.
        :param pulumi.Input[Sequence[pulumi.Input['DomainSourceArgs']]] sources: Specifies an array of one or more objects specifying origin server settings.
               A maximum of `50` origin site configurations can be configured.
               The sources structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the domain.
               
               <a name="sources_cdn_domain"></a>
               The `sources` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the blacklist and whitelist rule type. Valid values are:
               + **black**: Blacklist. Users in regions specified in the blacklist cannot access resources and status code `403` is
               returned.
               + **white**: Whitelist. Only users in regions specified in the whitelist can access resources. Status code `403` is
               returned for other users.
        """
        if cache_settings is not None:
            pulumi.set(__self__, "cache_settings", cache_settings)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if domain_status is not None:
            pulumi.set(__self__, "domain_status", domain_status)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_area is not None:
            pulumi.set(__self__, "service_area", service_area)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cacheSettings")
    def cache_settings(self) -> Optional[pulumi.Input['DomainCacheSettingsArgs']]:
        """
        Specifies the cache configuration. The cache_settings structure
        is documented below.
        """
        return pulumi.get(self, "cache_settings")

    @cache_settings.setter
    def cache_settings(self, value: Optional[pulumi.Input['DomainCacheSettingsArgs']]):
        pulumi.set(self, "cache_settings", value)

    @_builtins.property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CNAME of the acceleration domain name.
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cname", value)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input['DomainConfigsArgs']]:
        """
        Specifies the domain configuration items. The configs structure is
        documented below.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input['DomainConfigsArgs']]):
        pulumi.set(self, "configs", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="domainStatus")
    def domain_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the acceleration domain name. The available values are
        **online**, **offline**, **configuring**, **configure_failed**, **checking**, **check_failed** and **deleting**.
        """
        return pulumi.get(self, "domain_status")

    @domain_status.setter
    def domain_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_status", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the HTTP response header. Valid values are **Content-Disposition**, **Content-Language**,
        **Access-Control-Allow-Origin**, **Access-Control-Allow-Methods**, **Access-Control-Max-Age**, **Access-Control-Expose-Headers**,
        **Access-Control-Allow-Headers** or custom headers. A header contains `1` to `100` characters, including letters, digits,
        and hyphens (-), and starts with a letter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="serviceArea")
    def service_area(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the area covered by the acceleration service.
        Valid values are as follows:
        + **mainland_china**: Indicates that the service scope is mainland China.
        + **outside_mainland_china**: Indicates that the service scope is outside mainland China.
        + **global**: Indicates that the service scope is global.

        > The service area cannot be changed between Chinese mainland and outside Chinese mainland.
        """
        return pulumi.get(self, "service_area")

    @service_area.setter
    def service_area(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_area", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainSourceArgs']]]]:
        """
        Specifies an array of one or more objects specifying origin server settings.
        A maximum of `50` origin site configurations can be configured.
        The sources structure is documented below.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the domain.

        <a name="sources_cdn_domain"></a>
        The `sources` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the blacklist and whitelist rule type. Valid values are:
        + **black**: Blacklist. Users in regions specified in the blacklist cannot access resources and status code `403` is
        returned.
        + **white**: Whitelist. Only users in regions specified in the whitelist can access resources. Status code `403` is
        returned for other users.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:Cdn/domain:Domain")
class Domain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_settings: Optional[pulumi.Input[Union['DomainCacheSettingsArgs', 'DomainCacheSettingsArgsDict']]] = None,
                 configs: Optional[pulumi.Input[Union['DomainConfigsArgs', 'DomainConfigsArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_area: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DomainSourceArgs', 'DomainSourceArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CDN domain resource within HuaweiCloud.

        ## Example Usage

        ### Create a CDN domain

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        origin_server = config.require_object("originServer")
        test = huaweicloud.cdn.Domain("test",
            name=domain_name,
            type="web",
            service_area="mainland_china",
            sources=[{
                "origin": origin_server,
                "origin_type": "ipaddr",
                "active": 1,
            }],
            tags={
                "key": "val",
                "foo": "bar",
            })
        ```

        ### Create a CDN domain with cache rules

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        origin_server = config.require_object("originServer")
        test = huaweicloud.cdn.Domain("test",
            name=domain_name,
            type="web",
            service_area="mainland_china",
            sources=[{
                "origin": origin_server,
                "origin_type": "ipaddr",
                "active": 1,
            }],
            cache_settings={
                "rules": [{
                    "rule_type": "all",
                    "ttl": 180,
                    "ttl_type": "d",
                    "priority": 2,
                    "url_parameter_type": "ignore_url_params",
                }],
            })
        ```

        ### Create a CDN domain with SCM certificate HTTPS configs

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        origin_server = config.require_object("originServer")
        certificate_name = config.require_object("certificateName")
        scm_certificate_id = config.require_object("scmCertificateId")
        test = huaweicloud.cdn.Domain("test",
            name=domain_name,
            type="web",
            service_area="mainland_china",
            sources=[{
                "origin": origin_server,
                "origin_type": "ipaddr",
                "active": 1,
            }],
            configs={
                "https_settings": {
                    "certificate_source": 2,
                    "certificate_name": certificate_name,
                    "scm_certificate_id": scm_certificate_id,
                    "certificate_type": "server",
                    "http2_enabled": True,
                    "https_enabled": True,
                },
            })
        ```

        ## Import

        The CDN domain resource can be imported using the domain `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cdn/domain:Domain test <name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `enterprise_project_id`,

        `configs.0.url_signing.0.key`, `configs.0.url_signing.0.backup_key`, `configs.0.https_settings.0.certificate_body`,

        `configs.0.https_settings.0.private_key`, `cache_settings`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_cdn_domain" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              enterprise_project_id, configs.0.url_signing.0.key, configs.0.url_signing.0.backup_key,
            
              configs.0.https_settings.0.certificate_body, configs.0.https_settings.0.private_key, cache_settings,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DomainCacheSettingsArgs', 'DomainCacheSettingsArgsDict']] cache_settings: Specifies the cache configuration. The cache_settings structure
               is documented below.
        :param pulumi.Input[Union['DomainConfigsArgs', 'DomainConfigsArgsDict']] configs: Specifies the domain configuration items. The configs structure is
               documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[_builtins.str] name: Specifies the HTTP response header. Valid values are **Content-Disposition**, **Content-Language**,
               **Access-Control-Allow-Origin**, **Access-Control-Allow-Methods**, **Access-Control-Max-Age**, **Access-Control-Expose-Headers**,
               **Access-Control-Allow-Headers** or custom headers. A header contains `1` to `100` characters, including letters, digits,
               and hyphens (-), and starts with a letter.
        :param pulumi.Input[_builtins.str] service_area: Specifies the area covered by the acceleration service.
               Valid values are as follows:
               + **mainland_china**: Indicates that the service scope is mainland China.
               + **outside_mainland_china**: Indicates that the service scope is outside mainland China.
               + **global**: Indicates that the service scope is global.
               
               > The service area cannot be changed between Chinese mainland and outside Chinese mainland.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DomainSourceArgs', 'DomainSourceArgsDict']]]] sources: Specifies an array of one or more objects specifying origin server settings.
               A maximum of `50` origin site configurations can be configured.
               The sources structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the domain.
               
               <a name="sources_cdn_domain"></a>
               The `sources` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the blacklist and whitelist rule type. Valid values are:
               + **black**: Blacklist. Users in regions specified in the blacklist cannot access resources and status code `403` is
               returned.
               + **white**: Whitelist. Only users in regions specified in the whitelist can access resources. Status code `403` is
               returned for other users.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CDN domain resource within HuaweiCloud.

        ## Example Usage

        ### Create a CDN domain

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        origin_server = config.require_object("originServer")
        test = huaweicloud.cdn.Domain("test",
            name=domain_name,
            type="web",
            service_area="mainland_china",
            sources=[{
                "origin": origin_server,
                "origin_type": "ipaddr",
                "active": 1,
            }],
            tags={
                "key": "val",
                "foo": "bar",
            })
        ```

        ### Create a CDN domain with cache rules

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        origin_server = config.require_object("originServer")
        test = huaweicloud.cdn.Domain("test",
            name=domain_name,
            type="web",
            service_area="mainland_china",
            sources=[{
                "origin": origin_server,
                "origin_type": "ipaddr",
                "active": 1,
            }],
            cache_settings={
                "rules": [{
                    "rule_type": "all",
                    "ttl": 180,
                    "ttl_type": "d",
                    "priority": 2,
                    "url_parameter_type": "ignore_url_params",
                }],
            })
        ```

        ### Create a CDN domain with SCM certificate HTTPS configs

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        origin_server = config.require_object("originServer")
        certificate_name = config.require_object("certificateName")
        scm_certificate_id = config.require_object("scmCertificateId")
        test = huaweicloud.cdn.Domain("test",
            name=domain_name,
            type="web",
            service_area="mainland_china",
            sources=[{
                "origin": origin_server,
                "origin_type": "ipaddr",
                "active": 1,
            }],
            configs={
                "https_settings": {
                    "certificate_source": 2,
                    "certificate_name": certificate_name,
                    "scm_certificate_id": scm_certificate_id,
                    "certificate_type": "server",
                    "http2_enabled": True,
                    "https_enabled": True,
                },
            })
        ```

        ## Import

        The CDN domain resource can be imported using the domain `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cdn/domain:Domain test <name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `enterprise_project_id`,

        `configs.0.url_signing.0.key`, `configs.0.url_signing.0.backup_key`, `configs.0.https_settings.0.certificate_body`,

        `configs.0.https_settings.0.private_key`, `cache_settings`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_cdn_domain" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              enterprise_project_id, configs.0.url_signing.0.key, configs.0.url_signing.0.backup_key,
            
              configs.0.https_settings.0.certificate_body, configs.0.https_settings.0.private_key, cache_settings,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_settings: Optional[pulumi.Input[Union['DomainCacheSettingsArgs', 'DomainCacheSettingsArgsDict']]] = None,
                 configs: Optional[pulumi.Input[Union['DomainConfigsArgs', 'DomainConfigsArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_area: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DomainSourceArgs', 'DomainSourceArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DomainArgs.__new__(DomainArgs)

            __props__.__dict__["cache_settings"] = cache_settings
            __props__.__dict__["configs"] = configs
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["name"] = name
            __props__.__dict__["service_area"] = service_area
            if sources is None and not opts.urn:
                raise TypeError("Missing required property 'sources'")
            __props__.__dict__["sources"] = sources
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["cname"] = None
            __props__.__dict__["domain_name"] = None
            __props__.__dict__["domain_status"] = None
        super(Domain, __self__).__init__(
            'huaweicloud:Cdn/domain:Domain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cache_settings: Optional[pulumi.Input[Union['DomainCacheSettingsArgs', 'DomainCacheSettingsArgsDict']]] = None,
            cname: Optional[pulumi.Input[_builtins.str]] = None,
            configs: Optional[pulumi.Input[Union['DomainConfigsArgs', 'DomainConfigsArgsDict']]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            domain_status: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            service_area: Optional[pulumi.Input[_builtins.str]] = None,
            sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DomainSourceArgs', 'DomainSourceArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'Domain':
        """
        Get an existing Domain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DomainCacheSettingsArgs', 'DomainCacheSettingsArgsDict']] cache_settings: Specifies the cache configuration. The cache_settings structure
               is documented below.
        :param pulumi.Input[_builtins.str] cname: The CNAME of the acceleration domain name.
        :param pulumi.Input[Union['DomainConfigsArgs', 'DomainConfigsArgsDict']] configs: Specifies the domain configuration items. The configs structure is
               documented below.
        :param pulumi.Input[_builtins.str] domain_name: schema: Internal
        :param pulumi.Input[_builtins.str] domain_status: The status of the acceleration domain name. The available values are
               **online**, **offline**, **configuring**, **configure_failed**, **checking**, **check_failed** and **deleting**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[_builtins.str] name: Specifies the HTTP response header. Valid values are **Content-Disposition**, **Content-Language**,
               **Access-Control-Allow-Origin**, **Access-Control-Allow-Methods**, **Access-Control-Max-Age**, **Access-Control-Expose-Headers**,
               **Access-Control-Allow-Headers** or custom headers. A header contains `1` to `100` characters, including letters, digits,
               and hyphens (-), and starts with a letter.
        :param pulumi.Input[_builtins.str] service_area: Specifies the area covered by the acceleration service.
               Valid values are as follows:
               + **mainland_china**: Indicates that the service scope is mainland China.
               + **outside_mainland_china**: Indicates that the service scope is outside mainland China.
               + **global**: Indicates that the service scope is global.
               
               > The service area cannot be changed between Chinese mainland and outside Chinese mainland.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DomainSourceArgs', 'DomainSourceArgsDict']]]] sources: Specifies an array of one or more objects specifying origin server settings.
               A maximum of `50` origin site configurations can be configured.
               The sources structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the domain.
               
               <a name="sources_cdn_domain"></a>
               The `sources` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the blacklist and whitelist rule type. Valid values are:
               + **black**: Blacklist. Users in regions specified in the blacklist cannot access resources and status code `403` is
               returned.
               + **white**: Whitelist. Only users in regions specified in the whitelist can access resources. Status code `403` is
               returned for other users.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DomainState.__new__(_DomainState)

        __props__.__dict__["cache_settings"] = cache_settings
        __props__.__dict__["cname"] = cname
        __props__.__dict__["configs"] = configs
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["domain_status"] = domain_status
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["name"] = name
        __props__.__dict__["service_area"] = service_area
        __props__.__dict__["sources"] = sources
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        return Domain(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cacheSettings")
    def cache_settings(self) -> pulumi.Output['outputs.DomainCacheSettings']:
        """
        Specifies the cache configuration. The cache_settings structure
        is documented below.
        """
        return pulumi.get(self, "cache_settings")

    @_builtins.property
    @pulumi.getter
    def cname(self) -> pulumi.Output[_builtins.str]:
        """
        The CNAME of the acceleration domain name.
        """
        return pulumi.get(self, "cname")

    @_builtins.property
    @pulumi.getter
    def configs(self) -> pulumi.Output['outputs.DomainConfigs']:
        """
        Specifies the domain configuration items. The configs structure is
        documented below.
        """
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        schema: Internal
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="domainStatus")
    def domain_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the acceleration domain name. The available values are
        **online**, **offline**, **configuring**, **configure_failed**, **checking**, **check_failed** and **deleting**.
        """
        return pulumi.get(self, "domain_status")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the HTTP response header. Valid values are **Content-Disposition**, **Content-Language**,
        **Access-Control-Allow-Origin**, **Access-Control-Allow-Methods**, **Access-Control-Max-Age**, **Access-Control-Expose-Headers**,
        **Access-Control-Allow-Headers** or custom headers. A header contains `1` to `100` characters, including letters, digits,
        and hyphens (-), and starts with a letter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serviceArea")
    def service_area(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the area covered by the acceleration service.
        Valid values are as follows:
        + **mainland_china**: Indicates that the service scope is mainland China.
        + **outside_mainland_china**: Indicates that the service scope is outside mainland China.
        + **global**: Indicates that the service scope is global.

        > The service area cannot be changed between Chinese mainland and outside Chinese mainland.
        """
        return pulumi.get(self, "service_area")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> pulumi.Output[Sequence['outputs.DomainSource']]:
        """
        Specifies an array of one or more objects specifying origin server settings.
        A maximum of `50` origin site configurations can be configured.
        The sources structure is documented below.
        """
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the domain.

        <a name="sources_cdn_domain"></a>
        The `sources` block supports:
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the blacklist and whitelist rule type. Valid values are:
        + **black**: Blacklist. Users in regions specified in the blacklist cannot access resources and status code `403` is
        returned.
        + **white**: Whitelist. Only users in regions specified in the whitelist can access resources. Status code `403` is
        returned for other users.
        """
        return pulumi.get(self, "type")

