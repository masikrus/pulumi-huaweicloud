# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCacheUrlTasksResult',
    'AwaitableGetCacheUrlTasksResult',
    'get_cache_url_tasks',
    'get_cache_url_tasks_output',
]

@pulumi.output_type
class GetCacheUrlTasksResult:
    """
    A collection of values returned by getCacheUrlTasks.
    """
    def __init__(__self__, end_time=None, file_type=None, id=None, start_time=None, status=None, task_type=None, tasks=None, url=None):
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if file_type and not isinstance(file_type, str):
            raise TypeError("Expected argument 'file_type' to be a str")
        pulumi.set(__self__, "file_type", file_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if task_type and not isinstance(task_type, str):
            raise TypeError("Expected argument 'task_type' to be a str")
        pulumi.set(__self__, "task_type", task_type)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[_builtins.str]:
        """
        Indicates the file type. Possible values: **file** and **directory**.
        """
        return pulumi.get(self, "file_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the URL status. Possible values: **processing**, **succeed**, **failed**, **waiting**,
        **refreshing**, and **preheating**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[_builtins.str]:
        """
        Indicates the task type. Possible values: **REFRESH** (cache refresh) and **PREHEATING** (cache preheat).
        """
        return pulumi.get(self, "task_type")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetCacheUrlTasksTaskResult']:
        """
        The list of URL task information. The tasks structure is documented below.
        """
        return pulumi.get(self, "tasks")

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[_builtins.str]:
        """
        Indicates the URL.
        """
        return pulumi.get(self, "url")


class AwaitableGetCacheUrlTasksResult(GetCacheUrlTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCacheUrlTasksResult(
            end_time=self.end_time,
            file_type=self.file_type,
            id=self.id,
            start_time=self.start_time,
            status=self.status,
            task_type=self.task_type,
            tasks=self.tasks,
            url=self.url)


def get_cache_url_tasks(end_time: Optional[_builtins.int] = None,
                        file_type: Optional[_builtins.str] = None,
                        start_time: Optional[_builtins.int] = None,
                        status: Optional[_builtins.str] = None,
                        task_type: Optional[_builtins.str] = None,
                        url: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCacheUrlTasksResult:
    """
    Use this data source to get the list of CDN cache url tasks within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cdn.get_cache_url_tasks()
    ```


    :param _builtins.int end_time: Specifies the end timestamp, in milliseconds. The default value is 00:00 of the next day.
    :param _builtins.str file_type: Specifies the file type. Possible values: **file** and **directory**.
    :param _builtins.int start_time: Specifies the start timestamp, in milliseconds. The default value is 00:00 of the
           current day.
    :param _builtins.str status: Specifies the URL status. Possible values: **processing**, **succeed**, **failed**,
           **waiting**, **refreshing**, and **preheating**.
    :param _builtins.str task_type: Specifies the task type. Possible values: **REFRESH** (cache refresh) and
           **PREHEATING** (cache preheat).
    :param _builtins.str url: Specifies the refresh or preheat URL.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['fileType'] = file_type
    __args__['startTime'] = start_time
    __args__['status'] = status
    __args__['taskType'] = task_type
    __args__['url'] = url
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cdn/getCacheUrlTasks:getCacheUrlTasks', __args__, opts=opts, typ=GetCacheUrlTasksResult).value

    return AwaitableGetCacheUrlTasksResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        file_type=pulumi.get(__ret__, 'file_type'),
        id=pulumi.get(__ret__, 'id'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'),
        task_type=pulumi.get(__ret__, 'task_type'),
        tasks=pulumi.get(__ret__, 'tasks'),
        url=pulumi.get(__ret__, 'url'))
def get_cache_url_tasks_output(end_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                               file_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               start_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                               status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               task_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               url: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCacheUrlTasksResult]:
    """
    Use this data source to get the list of CDN cache url tasks within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cdn.get_cache_url_tasks()
    ```


    :param _builtins.int end_time: Specifies the end timestamp, in milliseconds. The default value is 00:00 of the next day.
    :param _builtins.str file_type: Specifies the file type. Possible values: **file** and **directory**.
    :param _builtins.int start_time: Specifies the start timestamp, in milliseconds. The default value is 00:00 of the
           current day.
    :param _builtins.str status: Specifies the URL status. Possible values: **processing**, **succeed**, **failed**,
           **waiting**, **refreshing**, and **preheating**.
    :param _builtins.str task_type: Specifies the task type. Possible values: **REFRESH** (cache refresh) and
           **PREHEATING** (cache preheat).
    :param _builtins.str url: Specifies the refresh or preheat URL.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['fileType'] = file_type
    __args__['startTime'] = start_time
    __args__['status'] = status
    __args__['taskType'] = task_type
    __args__['url'] = url
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cdn/getCacheUrlTasks:getCacheUrlTasks', __args__, opts=opts, typ=GetCacheUrlTasksResult)
    return __ret__.apply(lambda __response__: GetCacheUrlTasksResult(
        end_time=pulumi.get(__response__, 'end_time'),
        file_type=pulumi.get(__response__, 'file_type'),
        id=pulumi.get(__response__, 'id'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status'),
        task_type=pulumi.get(__response__, 'task_type'),
        tasks=pulumi.get(__response__, 'tasks'),
        url=pulumi.get(__response__, 'url')))
