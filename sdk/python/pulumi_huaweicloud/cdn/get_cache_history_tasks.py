# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCacheHistoryTasksResult',
    'AwaitableGetCacheHistoryTasksResult',
    'get_cache_history_tasks',
    'get_cache_history_tasks_output',
]

@pulumi.output_type
class GetCacheHistoryTasksResult:
    """
    A collection of values returned by getCacheHistoryTasks.
    """
    def __init__(__self__, end_date=None, enterprise_project_id=None, file_type=None, id=None, order_field=None, order_type=None, start_date=None, status=None, task_type=None, tasks=None):
        if end_date and not isinstance(end_date, int):
            raise TypeError("Expected argument 'end_date' to be a int")
        pulumi.set(__self__, "end_date", end_date)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if file_type and not isinstance(file_type, str):
            raise TypeError("Expected argument 'file_type' to be a str")
        pulumi.set(__self__, "file_type", file_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if order_field and not isinstance(order_field, str):
            raise TypeError("Expected argument 'order_field' to be a str")
        pulumi.set(__self__, "order_field", order_field)
        if order_type and not isinstance(order_type, str):
            raise TypeError("Expected argument 'order_type' to be a str")
        pulumi.set(__self__, "order_type", order_type)
        if start_date and not isinstance(start_date, int):
            raise TypeError("Expected argument 'start_date' to be a int")
        pulumi.set(__self__, "start_date", start_date)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if task_type and not isinstance(task_type, str):
            raise TypeError("Expected argument 'task_type' to be a str")
        pulumi.set(__self__, "task_type", task_type)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[_builtins.str]:
        """
        Indicates the file type. Possible values: **file** and **directory**.
        """
        return pulumi.get(self, "file_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="orderField")
    def order_field(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "order_field")

    @_builtins.property
    @pulumi.getter(name="orderType")
    def order_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "order_type")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the task result. Possible values: **task_done** (task is completed) and
        **task_inprocess** (task is being processed).
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[_builtins.str]:
        """
        Indicates the task type. Possible values: **refresh** (cache refresh) and **preheating** (cache preheat).
        """
        return pulumi.get(self, "task_type")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetCacheHistoryTasksTaskResult']:
        """
        The history task list.
        The tasks structure is documented below.
        """
        return pulumi.get(self, "tasks")


class AwaitableGetCacheHistoryTasksResult(GetCacheHistoryTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCacheHistoryTasksResult(
            end_date=self.end_date,
            enterprise_project_id=self.enterprise_project_id,
            file_type=self.file_type,
            id=self.id,
            order_field=self.order_field,
            order_type=self.order_type,
            start_date=self.start_date,
            status=self.status,
            task_type=self.task_type,
            tasks=self.tasks)


def get_cache_history_tasks(end_date: Optional[_builtins.int] = None,
                            enterprise_project_id: Optional[_builtins.str] = None,
                            file_type: Optional[_builtins.str] = None,
                            order_field: Optional[_builtins.str] = None,
                            order_type: Optional[_builtins.str] = None,
                            start_date: Optional[_builtins.int] = None,
                            status: Optional[_builtins.str] = None,
                            task_type: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCacheHistoryTasksResult:
    """
    Use this data source to get the list of CDN cache history tasks within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cdn.get_cache_history_tasks()
    ```


    :param _builtins.int end_date: Specifies the query end time. The value is the number of milliseconds since
           the UNIX epoch (Jan 1, 1970).
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the resource belongs.
           This parameter is valid only when the enterprise project function is enabled. The value **all** indicates all projects.
           This parameter is mandatory when you are an IAM user.
           For enterprise users, if omitted, default enterprise project will be used.
    :param _builtins.str file_type: Specifies the file type. Possible values: **file** and **directory**.
    :param _builtins.str order_field: Specifies the field used for sorting. Supported fields include
           **task_type** (task type), **total** (total number of URLs), **processing** (number of URLs that are being processed),
           **succeed** (number of processed URLs), **failed** (number of URLs that fail to be processed),
           and **create_time** (task creation time). Both `order_field` and `order_type` must be set together.
           Otherwise, the default values **create_time** and **desc** are used.
    :param _builtins.str order_type: Specifies the sorting type. Valid values are as follows:
           + **desc**: Descending order.
           + **asc**: Ascending order.
           
           Defaults to **desc**.
    :param _builtins.int start_date: Specifies the query start time. The value is the number of milliseconds since
           the UNIX epoch (Jan 1, 1970).
    :param _builtins.str status: Specifies the task status. Valid values are as follows:
           + **task_inprocess**: The task is being processed.
           + **task_done**: The task is completed.
    :param _builtins.str task_type: Specifies the task type. Possible values: **refresh** (cache refresh) and
           **preheating** (cache preheat).
    """
    __args__ = dict()
    __args__['endDate'] = end_date
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['fileType'] = file_type
    __args__['orderField'] = order_field
    __args__['orderType'] = order_type
    __args__['startDate'] = start_date
    __args__['status'] = status
    __args__['taskType'] = task_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cdn/getCacheHistoryTasks:getCacheHistoryTasks', __args__, opts=opts, typ=GetCacheHistoryTasksResult).value

    return AwaitableGetCacheHistoryTasksResult(
        end_date=pulumi.get(__ret__, 'end_date'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        file_type=pulumi.get(__ret__, 'file_type'),
        id=pulumi.get(__ret__, 'id'),
        order_field=pulumi.get(__ret__, 'order_field'),
        order_type=pulumi.get(__ret__, 'order_type'),
        start_date=pulumi.get(__ret__, 'start_date'),
        status=pulumi.get(__ret__, 'status'),
        task_type=pulumi.get(__ret__, 'task_type'),
        tasks=pulumi.get(__ret__, 'tasks'))
def get_cache_history_tasks_output(end_date: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                   enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   file_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   order_field: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   order_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   start_date: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                   status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   task_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCacheHistoryTasksResult]:
    """
    Use this data source to get the list of CDN cache history tasks within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cdn.get_cache_history_tasks()
    ```


    :param _builtins.int end_date: Specifies the query end time. The value is the number of milliseconds since
           the UNIX epoch (Jan 1, 1970).
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the resource belongs.
           This parameter is valid only when the enterprise project function is enabled. The value **all** indicates all projects.
           This parameter is mandatory when you are an IAM user.
           For enterprise users, if omitted, default enterprise project will be used.
    :param _builtins.str file_type: Specifies the file type. Possible values: **file** and **directory**.
    :param _builtins.str order_field: Specifies the field used for sorting. Supported fields include
           **task_type** (task type), **total** (total number of URLs), **processing** (number of URLs that are being processed),
           **succeed** (number of processed URLs), **failed** (number of URLs that fail to be processed),
           and **create_time** (task creation time). Both `order_field` and `order_type` must be set together.
           Otherwise, the default values **create_time** and **desc** are used.
    :param _builtins.str order_type: Specifies the sorting type. Valid values are as follows:
           + **desc**: Descending order.
           + **asc**: Ascending order.
           
           Defaults to **desc**.
    :param _builtins.int start_date: Specifies the query start time. The value is the number of milliseconds since
           the UNIX epoch (Jan 1, 1970).
    :param _builtins.str status: Specifies the task status. Valid values are as follows:
           + **task_inprocess**: The task is being processed.
           + **task_done**: The task is completed.
    :param _builtins.str task_type: Specifies the task type. Possible values: **refresh** (cache refresh) and
           **preheating** (cache preheat).
    """
    __args__ = dict()
    __args__['endDate'] = end_date
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['fileType'] = file_type
    __args__['orderField'] = order_field
    __args__['orderType'] = order_type
    __args__['startDate'] = start_date
    __args__['status'] = status
    __args__['taskType'] = task_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cdn/getCacheHistoryTasks:getCacheHistoryTasks', __args__, opts=opts, typ=GetCacheHistoryTasksResult)
    return __ret__.apply(lambda __response__: GetCacheHistoryTasksResult(
        end_date=pulumi.get(__response__, 'end_date'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        file_type=pulumi.get(__response__, 'file_type'),
        id=pulumi.get(__response__, 'id'),
        order_field=pulumi.get(__response__, 'order_field'),
        order_type=pulumi.get(__response__, 'order_type'),
        start_date=pulumi.get(__response__, 'start_date'),
        status=pulumi.get(__response__, 'status'),
        task_type=pulumi.get(__response__, 'task_type'),
        tasks=pulumi.get(__response__, 'tasks')))
