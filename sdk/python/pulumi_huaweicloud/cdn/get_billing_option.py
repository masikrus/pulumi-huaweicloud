# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetBillingOptionResult',
    'AwaitableGetBillingOptionResult',
    'get_billing_option',
    'get_billing_option_output',
]

@pulumi.output_type
class GetBillingOptionResult:
    """
    A collection of values returned by getBillingOption.
    """
    def __init__(__self__, charge_mode=None, created_at=None, effective_time=None, id=None, product_type=None, service_area=None, status=None):
        if charge_mode and not isinstance(charge_mode, str):
            raise TypeError("Expected argument 'charge_mode' to be a str")
        pulumi.set(__self__, "charge_mode", charge_mode)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if effective_time and not isinstance(effective_time, str):
            raise TypeError("Expected argument 'effective_time' to be a str")
        pulumi.set(__self__, "effective_time", effective_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if product_type and not isinstance(product_type, str):
            raise TypeError("Expected argument 'product_type' to be a str")
        pulumi.set(__self__, "product_type", product_type)
        if service_area and not isinstance(service_area, str):
            raise TypeError("Expected argument 'service_area' to be a str")
        pulumi.set(__self__, "service_area", service_area)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        Indicates the billing option. The value can be **flux** (traffic-based billing) or
        **bw** (bandwidth-based billing, only for V2 and higher customers).
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="effectiveTime")
    def effective_time(self) -> _builtins.str:
        """
        Indicates the effective time of the option.
        """
        return pulumi.get(self, "effective_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> _builtins.str:
        return pulumi.get(self, "product_type")

    @_builtins.property
    @pulumi.getter(name="serviceArea")
    def service_area(self) -> _builtins.str:
        return pulumi.get(self, "service_area")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


class AwaitableGetBillingOptionResult(GetBillingOptionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBillingOptionResult(
            charge_mode=self.charge_mode,
            created_at=self.created_at,
            effective_time=self.effective_time,
            id=self.id,
            product_type=self.product_type,
            service_area=self.service_area,
            status=self.status)


def get_billing_option(product_type: Optional[_builtins.str] = None,
                       service_area: Optional[_builtins.str] = None,
                       status: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBillingOptionResult:
    """
    Use this data source to get CDN billing option within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cdn.get_billing_option(product_type="base")
    ```


    :param _builtins.str product_type: Specifies the product mode. Only **base** (basic acceleration) is supported.
    :param _builtins.str service_area: Specifies the service area. Valid values are **mainland_china** (Chinese mainland)
           and **outside_mainland_china** (outside the Chinese mainland). Defaults to **mainland_china**.
    :param _builtins.str status: Specifies the billing option status. Valid values are **active** (effective) and
           **upcoming** (to take effect). Defaults to **active**.
    """
    __args__ = dict()
    __args__['productType'] = product_type
    __args__['serviceArea'] = service_area
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cdn/getBillingOption:getBillingOption', __args__, opts=opts, typ=GetBillingOptionResult).value

    return AwaitableGetBillingOptionResult(
        charge_mode=pulumi.get(__ret__, 'charge_mode'),
        created_at=pulumi.get(__ret__, 'created_at'),
        effective_time=pulumi.get(__ret__, 'effective_time'),
        id=pulumi.get(__ret__, 'id'),
        product_type=pulumi.get(__ret__, 'product_type'),
        service_area=pulumi.get(__ret__, 'service_area'),
        status=pulumi.get(__ret__, 'status'))
def get_billing_option_output(product_type: Optional[pulumi.Input[_builtins.str]] = None,
                              service_area: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBillingOptionResult]:
    """
    Use this data source to get CDN billing option within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cdn.get_billing_option(product_type="base")
    ```


    :param _builtins.str product_type: Specifies the product mode. Only **base** (basic acceleration) is supported.
    :param _builtins.str service_area: Specifies the service area. Valid values are **mainland_china** (Chinese mainland)
           and **outside_mainland_china** (outside the Chinese mainland). Defaults to **mainland_china**.
    :param _builtins.str status: Specifies the billing option status. Valid values are **active** (effective) and
           **upcoming** (to take effect). Defaults to **active**.
    """
    __args__ = dict()
    __args__['productType'] = product_type
    __args__['serviceArea'] = service_area
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cdn/getBillingOption:getBillingOption', __args__, opts=opts, typ=GetBillingOptionResult)
    return __ret__.apply(lambda __response__: GetBillingOptionResult(
        charge_mode=pulumi.get(__response__, 'charge_mode'),
        created_at=pulumi.get(__response__, 'created_at'),
        effective_time=pulumi.get(__response__, 'effective_time'),
        id=pulumi.get(__response__, 'id'),
        product_type=pulumi.get(__response__, 'product_type'),
        service_area=pulumi.get(__response__, 'service_area'),
        status=pulumi.get(__response__, 'status')))
