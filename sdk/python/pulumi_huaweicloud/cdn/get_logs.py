# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetLogsResult',
    'AwaitableGetLogsResult',
    'get_logs',
    'get_logs_output',
]

@pulumi.output_type
class GetLogsResult:
    """
    A collection of values returned by getLogs.
    """
    def __init__(__self__, domain_name=None, end_time=None, enterprise_project_id=None, id=None, logs=None, start_time=None):
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if logs and not isinstance(logs, list):
            raise TypeError("Expected argument 'logs' to be a list")
        pulumi.set(__self__, "logs", logs)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        The domain name to which the log belongs.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.int]:
        """
        The end time for querying log. The value is a timestamp in milliseconds.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def logs(self) -> Sequence['outputs.GetLogsLogResult']:
        """
        The list of Logs.
        """
        return pulumi.get(self, "logs")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.int]:
        """
        The start time for querying log. The value is a timestamp in milliseconds.
        """
        return pulumi.get(self, "start_time")


class AwaitableGetLogsResult(GetLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogsResult(
            domain_name=self.domain_name,
            end_time=self.end_time,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            logs=self.logs,
            start_time=self.start_time)


def get_logs(domain_name: Optional[_builtins.str] = None,
             end_time: Optional[_builtins.int] = None,
             enterprise_project_id: Optional[_builtins.str] = None,
             start_time: Optional[_builtins.int] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogsResult:
    """
    Use this datasource to get the list of CDN logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_name = config.require_object("domainName")
    test = huaweicloud.Cdn.get_logs(domain_name=domain_name)
    ```


    :param _builtins.str domain_name: Specifies the domain name to which the logs belong.
    :param _builtins.int end_time: Specifies the end time for querying logs (excluding the end time point).
           The value is the millisecond timestamp of the hour. The maximum time span between the start time and
           end time is 30 days.
           If this parameter is left empty, the start time plus one day is used by default.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the domain name belongs.
           This parameter is valid only when the enterprise project function is enabled.
           The value **all** indicates all enterprise projects.
           This parameter is mandatory when you use an IAM user to call this API.
    :param _builtins.int start_time: Specifies the start time for querying logs.
           The value is the millisecond timestamp of the hour.
           If this parameter is left empty, **00:00:00** of the current day is used by default.
    """
    __args__ = dict()
    __args__['domainName'] = domain_name
    __args__['endTime'] = end_time
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cdn/getLogs:getLogs', __args__, opts=opts, typ=GetLogsResult).value

    return AwaitableGetLogsResult(
        domain_name=pulumi.get(__ret__, 'domain_name'),
        end_time=pulumi.get(__ret__, 'end_time'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        logs=pulumi.get(__ret__, 'logs'),
        start_time=pulumi.get(__ret__, 'start_time'))
def get_logs_output(domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                    end_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                    enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    start_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogsResult]:
    """
    Use this datasource to get the list of CDN logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_name = config.require_object("domainName")
    test = huaweicloud.Cdn.get_logs(domain_name=domain_name)
    ```


    :param _builtins.str domain_name: Specifies the domain name to which the logs belong.
    :param _builtins.int end_time: Specifies the end time for querying logs (excluding the end time point).
           The value is the millisecond timestamp of the hour. The maximum time span between the start time and
           end time is 30 days.
           If this parameter is left empty, the start time plus one day is used by default.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the domain name belongs.
           This parameter is valid only when the enterprise project function is enabled.
           The value **all** indicates all enterprise projects.
           This parameter is mandatory when you use an IAM user to call this API.
    :param _builtins.int start_time: Specifies the start time for querying logs.
           The value is the millisecond timestamp of the hour.
           If this parameter is left empty, **00:00:00** of the current day is used by default.
    """
    __args__ = dict()
    __args__['domainName'] = domain_name
    __args__['endTime'] = end_time
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cdn/getLogs:getLogs', __args__, opts=opts, typ=GetLogsResult)
    return __ret__.apply(lambda __response__: GetLogsResult(
        domain_name=pulumi.get(__response__, 'domain_name'),
        end_time=pulumi.get(__response__, 'end_time'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        logs=pulumi.get(__response__, 'logs'),
        start_time=pulumi.get(__response__, 'start_time')))
