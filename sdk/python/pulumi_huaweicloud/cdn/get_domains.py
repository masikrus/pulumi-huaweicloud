# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainsResult',
    'AwaitableGetDomainsResult',
    'get_domains',
    'get_domains_output',
]

@pulumi.output_type
class GetDomainsResult:
    """
    A collection of values returned by getDomains.
    """
    def __init__(__self__, domain_id=None, domain_status=None, domains=None, enterprise_project_id=None, id=None, name=None, service_area=None, type=None):
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if domain_status and not isinstance(domain_status, str):
            raise TypeError("Expected argument 'domain_status' to be a str")
        pulumi.set(__self__, "domain_status", domain_status)
        if domains and not isinstance(domains, list):
            raise TypeError("Expected argument 'domains' to be a list")
        pulumi.set(__self__, "domains", domains)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if service_area and not isinstance(service_area, str):
            raise TypeError("Expected argument 'service_area' to be a str")
        pulumi.set(__self__, "service_area", service_area)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="domainStatus")
    def domain_status(self) -> Optional[_builtins.str]:
        """
        The status of accelerate domain.
        """
        return pulumi.get(self, "domain_status")

    @_builtins.property
    @pulumi.getter
    def domains(self) -> Sequence['outputs.GetDomainsDomainResult']:
        """
        A list of CDN domains.
        The domains structure is documented below.
        """
        return pulumi.get(self, "domains")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of accelerate domain.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serviceArea")
    def service_area(self) -> Optional[_builtins.str]:
        """
        The area covered by the accelerate service.
        """
        return pulumi.get(self, "service_area")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The business type of accelerate domain.
        """
        return pulumi.get(self, "type")


class AwaitableGetDomainsResult(GetDomainsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainsResult(
            domain_id=self.domain_id,
            domain_status=self.domain_status,
            domains=self.domains,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            service_area=self.service_area,
            type=self.type)


def get_domains(domain_id: Optional[_builtins.str] = None,
                domain_status: Optional[_builtins.str] = None,
                enterprise_project_id: Optional[_builtins.str] = None,
                name: Optional[_builtins.str] = None,
                service_area: Optional[_builtins.str] = None,
                type: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainsResult:
    """
    Use this data source to get a list of CDN domains.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cdn.get_domains(type="web",
        domain_status="online",
        service_area="mainland_china")
    ```


    :param _builtins.str domain_id: Specifies the ID of accelerate domain.
    :param _builtins.str domain_status: Specifies the status of accelerate domain.
           The valid value can be **online**, **offline**, **configuring**, **configuring_failed**, **checking**,
           **check_failed** or **deleting**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the CDN domain.
           When the user turns on the enterprise project function, this parameter takes effect,
           indicating that the project to which the resource belongs is queried.
           "all" indicates all projects.
    :param _builtins.str name: Specifies the name of accelerate domain, using fuzzy matching.
           The valid length is limited from `1` to `255`.
    :param _builtins.str service_area: Specifies the area covered by the accelerate service.
           The valid value can be **mainland_china**, **outside_mainland_china** or **global**.
    :param _builtins.str type: Specifies the business type of accelerate domain.
           The valid values are as follows;
           + **web**: Accelerate for the website.
           + **download**: Accelerate for file downloads.
           + **video**: Accelerate for on-demand.
           + **wholeSite**: Accelerate for the entire site.
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    __args__['domainStatus'] = domain_status
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['serviceArea'] = service_area
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cdn/getDomains:getDomains', __args__, opts=opts, typ=GetDomainsResult).value

    return AwaitableGetDomainsResult(
        domain_id=pulumi.get(__ret__, 'domain_id'),
        domain_status=pulumi.get(__ret__, 'domain_status'),
        domains=pulumi.get(__ret__, 'domains'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        service_area=pulumi.get(__ret__, 'service_area'),
        type=pulumi.get(__ret__, 'type'))
def get_domains_output(domain_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       domain_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       service_area: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDomainsResult]:
    """
    Use this data source to get a list of CDN domains.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cdn.get_domains(type="web",
        domain_status="online",
        service_area="mainland_china")
    ```


    :param _builtins.str domain_id: Specifies the ID of accelerate domain.
    :param _builtins.str domain_status: Specifies the status of accelerate domain.
           The valid value can be **online**, **offline**, **configuring**, **configuring_failed**, **checking**,
           **check_failed** or **deleting**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the CDN domain.
           When the user turns on the enterprise project function, this parameter takes effect,
           indicating that the project to which the resource belongs is queried.
           "all" indicates all projects.
    :param _builtins.str name: Specifies the name of accelerate domain, using fuzzy matching.
           The valid length is limited from `1` to `255`.
    :param _builtins.str service_area: Specifies the area covered by the accelerate service.
           The valid value can be **mainland_china**, **outside_mainland_china** or **global**.
    :param _builtins.str type: Specifies the business type of accelerate domain.
           The valid values are as follows;
           + **web**: Accelerate for the website.
           + **download**: Accelerate for file downloads.
           + **video**: Accelerate for on-demand.
           + **wholeSite**: Accelerate for the entire site.
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    __args__['domainStatus'] = domain_status
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['serviceArea'] = service_area
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cdn/getDomains:getDomains', __args__, opts=opts, typ=GetDomainsResult)
    return __ret__.apply(lambda __response__: GetDomainsResult(
        domain_id=pulumi.get(__response__, 'domain_id'),
        domain_status=pulumi.get(__response__, 'domain_status'),
        domains=pulumi.get(__response__, 'domains'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        service_area=pulumi.get(__response__, 'service_area'),
        type=pulumi.get(__response__, 'type')))
