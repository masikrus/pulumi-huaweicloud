# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainCertificatesResult',
    'AwaitableGetDomainCertificatesResult',
    'get_domain_certificates',
    'get_domain_certificates_output',
]

@pulumi.output_type
class GetDomainCertificatesResult:
    """
    A collection of values returned by getDomainCertificates.
    """
    def __init__(__self__, domain_certificates=None, enterprise_project_id=None, id=None, name=None):
        if domain_certificates and not isinstance(domain_certificates, list):
            raise TypeError("Expected argument 'domain_certificates' to be a list")
        pulumi.set(__self__, "domain_certificates", domain_certificates)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="domainCertificates")
    def domain_certificates(self) -> Sequence['outputs.GetDomainCertificatesDomainCertificateResult']:
        """
        The list of certificates information bound to accelerate domain.
        The domain_certificates structure is documented below.
        """
        return pulumi.get(self, "domain_certificates")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")


class AwaitableGetDomainCertificatesResult(GetDomainCertificatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainCertificatesResult(
            domain_certificates=self.domain_certificates,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name)


def get_domain_certificates(enterprise_project_id: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainCertificatesResult:
    """
    Use this data source to get the list of domains bound to HTTPS certificate of CDN.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    test = huaweicloud.Cdn.get_domain_certificates(name=name)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project that the datesource belongs to.
           This parameter is valid only when the enterprise project function is enabled.
           The value **all** indicates all projects. This parameter is mandatory when you use an IAM user.
    :param _builtins.str name: Specifies the name of the acceleration domain.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cdn/getDomainCertificates:getDomainCertificates', __args__, opts=opts, typ=GetDomainCertificatesResult).value

    return AwaitableGetDomainCertificatesResult(
        domain_certificates=pulumi.get(__ret__, 'domain_certificates'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'))
def get_domain_certificates_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDomainCertificatesResult]:
    """
    Use this data source to get the list of domains bound to HTTPS certificate of CDN.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    test = huaweicloud.Cdn.get_domain_certificates(name=name)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project that the datesource belongs to.
           This parameter is valid only when the enterprise project function is enabled.
           The value **all** indicates all projects. This parameter is mandatory when you use an IAM user.
    :param _builtins.str name: Specifies the name of the acceleration domain.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cdn/getDomainCertificates:getDomainCertificates', __args__, opts=opts, typ=GetDomainCertificatesResult)
    return __ret__.apply(lambda __response__: GetDomainCertificatesResult(
        domain_certificates=pulumi.get(__response__, 'domain_certificates'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name')))
