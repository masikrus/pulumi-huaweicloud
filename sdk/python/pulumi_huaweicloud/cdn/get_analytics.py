# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetAnalyticsResult',
    'AwaitableGetAnalyticsResult',
    'get_analytics',
    'get_analytics_output',
]

@pulumi.output_type
class GetAnalyticsResult:
    """
    A collection of values returned by getAnalytics.
    """
    def __init__(__self__, action=None, domain_name=None, end_time=None, enterprise_project_id=None, group_by=None, id=None, interval=None, result=None, service_area=None, start_time=None, stat_type=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group_by and not isinstance(group_by, str):
            raise TypeError("Expected argument 'group_by' to be a str")
        pulumi.set(__self__, "group_by", group_by)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interval and not isinstance(interval, int):
            raise TypeError("Expected argument 'interval' to be a int")
        pulumi.set(__self__, "interval", interval)
        if result and not isinstance(result, str):
            raise TypeError("Expected argument 'result' to be a str")
        pulumi.set(__self__, "result", result)
        if service_area and not isinstance(service_area, str):
            raise TypeError("Expected argument 'service_area' to be a str")
        pulumi.set(__self__, "service_area", service_area)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)
        if stat_type and not isinstance(stat_type, str):
            raise TypeError("Expected argument 'stat_type' to be a str")
        pulumi.set(__self__, "stat_type", stat_type)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group_by")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter
    def result(self) -> _builtins.str:
        """
        Indicated the data organized according to the specified grouping mode. The value of this field is a
        string in standard object format.
        """
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter(name="serviceArea")
    def service_area(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_area")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="statType")
    def stat_type(self) -> _builtins.str:
        return pulumi.get(self, "stat_type")


class AwaitableGetAnalyticsResult(GetAnalyticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAnalyticsResult(
            action=self.action,
            domain_name=self.domain_name,
            end_time=self.end_time,
            enterprise_project_id=self.enterprise_project_id,
            group_by=self.group_by,
            id=self.id,
            interval=self.interval,
            result=self.result,
            service_area=self.service_area,
            start_time=self.start_time,
            stat_type=self.stat_type)


def get_analytics(action: Optional[_builtins.str] = None,
                  domain_name: Optional[_builtins.str] = None,
                  end_time: Optional[_builtins.int] = None,
                  enterprise_project_id: Optional[_builtins.str] = None,
                  group_by: Optional[_builtins.str] = None,
                  interval: Optional[_builtins.int] = None,
                  service_area: Optional[_builtins.str] = None,
                  start_time: Optional[_builtins.int] = None,
                  stat_type: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAnalyticsResult:
    """
    Use this data source to get CDN domain statistics.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    domain_name = config.require_object("domainName")
    stat_type = config.require_object("statType")
    test = huaweicloud.Cdn.get_analytics(action="detail",
        start_time=start_time,
        end_time=end_time,
        domain_name=domain_name,
        stat_type=stat_type)
    ```


    :param _builtins.str action: Specifies the action name. Possible values are **summary** and **detail**.
           + **summary**: querying summary data.
           + **detail**: querying data details.
    :param _builtins.str domain_name: Specifies the domain name list. Use commas (,) to separate multiple domain names,
           for example, `www.test1.com,www.test2.com`. **all** indicates that all domain names are queried. If no data is
           available for a domain name within the query period, no information about the domain name is returned.
    :param _builtins.int end_time: Specifies the end timestamp of the query, in millisecond. This parameter must be
           specified together with the start timestamp. The query interval is left-closed and right-open.
           + If the value of **interval** is `300`, set this parameter to a multiple of `5` minutes, for example, `1631243700000`,
           which means `2021-09-10 11:15:00`.
           + If the value of **interval** is `3600`, set this parameter to a multiple of `1` hour, for example, `1631325600000`,
           which means `2021-09-11 10:00:00`.
           + If the value of **interval** is `86400`, set this parameter to `00:00:00` (GMT+08:00), for example, `1631376000000`,
           which means `2021-09-12 00:00:00`.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project that the resource belongs to.
           This parameter is valid only for enterprise users. The value **all** indicates all projects.
           This parameter is mandatory when you are an IAM user.
    :param _builtins.str group_by: Specifies the data grouping mode. This parameter can be set to **domain**.
           By default, data is not grouped.
    :param _builtins.int interval: Specifies the query interval, in seconds. The value can be `300` (`5` minutes),
           `3600` (`1` hour), or `86400` (`1` day). If this parameter is not specified, the system uses the smallest value
           corresponding to the queried time span by default.
    :param _builtins.str service_area: Specifies the service area. The options are **mainland_china** (Chinese mainland)
           and **outside_mainland_china** (outside the Chinese mainland). Defaults to **mainland_china**.
           This parameter is invalid for querying content retrieval metrics.
    :param _builtins.int start_time: Specifies the start timestamp of the query, in millisecond. This parameter must be
           specified together with the end timestamp. The query interval is left-closed and right-open.
           + If the value of **interval** is `300`, set this parameter to a multiple of `5` minutes, for example, `1631240100000`,
           which means `2021-09-10 10:15:00`.
           + If the value of **interval** is `3600`, set this parameter to a multiple of `1` hour, for example, `1631239200000`,
           which means `2021-09-10 10:00:00`.
           + If the value of **interval** is `86400`, set this parameter to `00:00:00` (GMT+08:00), for example, `1631203200000`,
           which means `2021-09-10 00:00:00`.
    :param _builtins.str stat_type: Specifies the data indicator type for querying CDN statistics. Use commas (,) to
           separate multiple types.
           + Network resource consumption statistics: **bw** (bandwidth), **flux** (traffic), **bs_bw** (retrieval bandwidth),
           **bs_flux** (retrieval traffic)
           
           + Access statistics: **req_num** (total number of requests), **hit_num** (number of hits),
           **bs_num** (number of content retrieval requests), **bs_fail_num** (number of failed content retrieval requests),
           **hit_flux** (traffic generated by requests that hit the caches).
           
           + HTTP status code statistics (one or more types can be returned): **http_code_2xx** (status codes 2xx),
           **http_code_3xx** (status codes 3xx), **http_code_4xx** (status codes 4xx), **http_code_5xx** (status codes 5xx),
           **bs_http_code_2xx** (retrieval status codes 2xx), **bs_http_code_3xx** (retrieval status codes 3xx),
           **bs_http_code_4xx** (retrieval status codes 4xx), **bs_http_code_5xx** (retrieval status codes 5xx),
           **status_code_2xx** (details of status code 2xx), **status_code_3xx** (details of status code 3xx),
           **status_code_4xx** (details of status code 4xx), **status_code_5xx** (details of status code 5xx),
           **bs_status_code_2xx** (details of retrieval status code 2xx),
           **bs_status_code_3xx** (details of retrieval status code 3xx),
           **bs_status_code_4xx** (details of retrieval status code 4xx),
           **bs_status_code_5xx** (details of retrieval status code 5xx).
           **status_code** and **bs_status_code** cannot be queried at the same time.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['domainName'] = domain_name
    __args__['endTime'] = end_time
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupBy'] = group_by
    __args__['interval'] = interval
    __args__['serviceArea'] = service_area
    __args__['startTime'] = start_time
    __args__['statType'] = stat_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cdn/getAnalytics:getAnalytics', __args__, opts=opts, typ=GetAnalyticsResult).value

    return AwaitableGetAnalyticsResult(
        action=pulumi.get(__ret__, 'action'),
        domain_name=pulumi.get(__ret__, 'domain_name'),
        end_time=pulumi.get(__ret__, 'end_time'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        group_by=pulumi.get(__ret__, 'group_by'),
        id=pulumi.get(__ret__, 'id'),
        interval=pulumi.get(__ret__, 'interval'),
        result=pulumi.get(__ret__, 'result'),
        service_area=pulumi.get(__ret__, 'service_area'),
        start_time=pulumi.get(__ret__, 'start_time'),
        stat_type=pulumi.get(__ret__, 'stat_type'))
def get_analytics_output(action: Optional[pulumi.Input[_builtins.str]] = None,
                         domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                         end_time: Optional[pulumi.Input[_builtins.int]] = None,
                         enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         group_by: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         interval: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                         service_area: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         start_time: Optional[pulumi.Input[_builtins.int]] = None,
                         stat_type: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAnalyticsResult]:
    """
    Use this data source to get CDN domain statistics.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    domain_name = config.require_object("domainName")
    stat_type = config.require_object("statType")
    test = huaweicloud.Cdn.get_analytics(action="detail",
        start_time=start_time,
        end_time=end_time,
        domain_name=domain_name,
        stat_type=stat_type)
    ```


    :param _builtins.str action: Specifies the action name. Possible values are **summary** and **detail**.
           + **summary**: querying summary data.
           + **detail**: querying data details.
    :param _builtins.str domain_name: Specifies the domain name list. Use commas (,) to separate multiple domain names,
           for example, `www.test1.com,www.test2.com`. **all** indicates that all domain names are queried. If no data is
           available for a domain name within the query period, no information about the domain name is returned.
    :param _builtins.int end_time: Specifies the end timestamp of the query, in millisecond. This parameter must be
           specified together with the start timestamp. The query interval is left-closed and right-open.
           + If the value of **interval** is `300`, set this parameter to a multiple of `5` minutes, for example, `1631243700000`,
           which means `2021-09-10 11:15:00`.
           + If the value of **interval** is `3600`, set this parameter to a multiple of `1` hour, for example, `1631325600000`,
           which means `2021-09-11 10:00:00`.
           + If the value of **interval** is `86400`, set this parameter to `00:00:00` (GMT+08:00), for example, `1631376000000`,
           which means `2021-09-12 00:00:00`.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project that the resource belongs to.
           This parameter is valid only for enterprise users. The value **all** indicates all projects.
           This parameter is mandatory when you are an IAM user.
    :param _builtins.str group_by: Specifies the data grouping mode. This parameter can be set to **domain**.
           By default, data is not grouped.
    :param _builtins.int interval: Specifies the query interval, in seconds. The value can be `300` (`5` minutes),
           `3600` (`1` hour), or `86400` (`1` day). If this parameter is not specified, the system uses the smallest value
           corresponding to the queried time span by default.
    :param _builtins.str service_area: Specifies the service area. The options are **mainland_china** (Chinese mainland)
           and **outside_mainland_china** (outside the Chinese mainland). Defaults to **mainland_china**.
           This parameter is invalid for querying content retrieval metrics.
    :param _builtins.int start_time: Specifies the start timestamp of the query, in millisecond. This parameter must be
           specified together with the end timestamp. The query interval is left-closed and right-open.
           + If the value of **interval** is `300`, set this parameter to a multiple of `5` minutes, for example, `1631240100000`,
           which means `2021-09-10 10:15:00`.
           + If the value of **interval** is `3600`, set this parameter to a multiple of `1` hour, for example, `1631239200000`,
           which means `2021-09-10 10:00:00`.
           + If the value of **interval** is `86400`, set this parameter to `00:00:00` (GMT+08:00), for example, `1631203200000`,
           which means `2021-09-10 00:00:00`.
    :param _builtins.str stat_type: Specifies the data indicator type for querying CDN statistics. Use commas (,) to
           separate multiple types.
           + Network resource consumption statistics: **bw** (bandwidth), **flux** (traffic), **bs_bw** (retrieval bandwidth),
           **bs_flux** (retrieval traffic)
           
           + Access statistics: **req_num** (total number of requests), **hit_num** (number of hits),
           **bs_num** (number of content retrieval requests), **bs_fail_num** (number of failed content retrieval requests),
           **hit_flux** (traffic generated by requests that hit the caches).
           
           + HTTP status code statistics (one or more types can be returned): **http_code_2xx** (status codes 2xx),
           **http_code_3xx** (status codes 3xx), **http_code_4xx** (status codes 4xx), **http_code_5xx** (status codes 5xx),
           **bs_http_code_2xx** (retrieval status codes 2xx), **bs_http_code_3xx** (retrieval status codes 3xx),
           **bs_http_code_4xx** (retrieval status codes 4xx), **bs_http_code_5xx** (retrieval status codes 5xx),
           **status_code_2xx** (details of status code 2xx), **status_code_3xx** (details of status code 3xx),
           **status_code_4xx** (details of status code 4xx), **status_code_5xx** (details of status code 5xx),
           **bs_status_code_2xx** (details of retrieval status code 2xx),
           **bs_status_code_3xx** (details of retrieval status code 3xx),
           **bs_status_code_4xx** (details of retrieval status code 4xx),
           **bs_status_code_5xx** (details of retrieval status code 5xx).
           **status_code** and **bs_status_code** cannot be queried at the same time.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['domainName'] = domain_name
    __args__['endTime'] = end_time
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupBy'] = group_by
    __args__['interval'] = interval
    __args__['serviceArea'] = service_area
    __args__['startTime'] = start_time
    __args__['statType'] = stat_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cdn/getAnalytics:getAnalytics', __args__, opts=opts, typ=GetAnalyticsResult)
    return __ret__.apply(lambda __response__: GetAnalyticsResult(
        action=pulumi.get(__response__, 'action'),
        domain_name=pulumi.get(__response__, 'domain_name'),
        end_time=pulumi.get(__response__, 'end_time'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        group_by=pulumi.get(__response__, 'group_by'),
        id=pulumi.get(__response__, 'id'),
        interval=pulumi.get(__response__, 'interval'),
        result=pulumi.get(__response__, 'result'),
        service_area=pulumi.get(__response__, 'service_area'),
        start_time=pulumi.get(__response__, 'start_time'),
        stat_type=pulumi.get(__response__, 'stat_type')))
