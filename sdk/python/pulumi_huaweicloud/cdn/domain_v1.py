# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DomainV1Args', 'DomainV1']

@pulumi.input_type
class DomainV1Args:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input['DomainV1SourceArgs']]],
                 type: pulumi.Input[_builtins.str],
                 cache_settings: Optional[pulumi.Input['DomainV1CacheSettingsArgs']] = None,
                 configs: Optional[pulumi.Input['DomainV1ConfigsArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_area: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a DomainV1 resource.
        :param pulumi.Input[_builtins.str] service_area: schema: Required
        """
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "type", type)
        if cache_settings is not None:
            pulumi.set(__self__, "cache_settings", cache_settings)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_area is not None:
            pulumi.set(__self__, "service_area", service_area)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input['DomainV1SourceArgs']]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input['DomainV1SourceArgs']]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="cacheSettings")
    def cache_settings(self) -> Optional[pulumi.Input['DomainV1CacheSettingsArgs']]:
        return pulumi.get(self, "cache_settings")

    @cache_settings.setter
    def cache_settings(self, value: Optional[pulumi.Input['DomainV1CacheSettingsArgs']]):
        pulumi.set(self, "cache_settings", value)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input['DomainV1ConfigsArgs']]:
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input['DomainV1ConfigsArgs']]):
        pulumi.set(self, "configs", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="serviceArea")
    def service_area(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Required
        """
        return pulumi.get(self, "service_area")

    @service_area.setter
    def service_area(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_area", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _DomainV1State:
    def __init__(__self__, *,
                 cache_settings: Optional[pulumi.Input['DomainV1CacheSettingsArgs']] = None,
                 cname: Optional[pulumi.Input[_builtins.str]] = None,
                 configs: Optional[pulumi.Input['DomainV1ConfigsArgs']] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_status: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_area: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['DomainV1SourceArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DomainV1 resources.
        :param pulumi.Input[_builtins.str] domain_name: schema: Internal
        :param pulumi.Input[_builtins.str] service_area: schema: Required
        """
        if cache_settings is not None:
            pulumi.set(__self__, "cache_settings", cache_settings)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if domain_status is not None:
            pulumi.set(__self__, "domain_status", domain_status)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_area is not None:
            pulumi.set(__self__, "service_area", service_area)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cacheSettings")
    def cache_settings(self) -> Optional[pulumi.Input['DomainV1CacheSettingsArgs']]:
        return pulumi.get(self, "cache_settings")

    @cache_settings.setter
    def cache_settings(self, value: Optional[pulumi.Input['DomainV1CacheSettingsArgs']]):
        pulumi.set(self, "cache_settings", value)

    @_builtins.property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cname", value)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input['DomainV1ConfigsArgs']]:
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input['DomainV1ConfigsArgs']]):
        pulumi.set(self, "configs", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="domainStatus")
    def domain_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "domain_status")

    @domain_status.setter
    def domain_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_status", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="serviceArea")
    def service_area(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Required
        """
        return pulumi.get(self, "service_area")

    @service_area.setter
    def service_area(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_area", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainV1SourceArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainV1SourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:Cdn/domainV1:DomainV1")
class DomainV1(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_settings: Optional[pulumi.Input[Union['DomainV1CacheSettingsArgs', 'DomainV1CacheSettingsArgsDict']]] = None,
                 configs: Optional[pulumi.Input[Union['DomainV1ConfigsArgs', 'DomainV1ConfigsArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_area: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DomainV1SourceArgs', 'DomainV1SourceArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a DomainV1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] service_area: schema: Required
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DomainV1Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DomainV1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DomainV1Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DomainV1Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_settings: Optional[pulumi.Input[Union['DomainV1CacheSettingsArgs', 'DomainV1CacheSettingsArgsDict']]] = None,
                 configs: Optional[pulumi.Input[Union['DomainV1ConfigsArgs', 'DomainV1ConfigsArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_area: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DomainV1SourceArgs', 'DomainV1SourceArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DomainV1Args.__new__(DomainV1Args)

            __props__.__dict__["cache_settings"] = cache_settings
            __props__.__dict__["configs"] = configs
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["name"] = name
            __props__.__dict__["service_area"] = service_area
            if sources is None and not opts.urn:
                raise TypeError("Missing required property 'sources'")
            __props__.__dict__["sources"] = sources
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["cname"] = None
            __props__.__dict__["domain_name"] = None
            __props__.__dict__["domain_status"] = None
        super(DomainV1, __self__).__init__(
            'huaweicloud:Cdn/domainV1:DomainV1',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cache_settings: Optional[pulumi.Input[Union['DomainV1CacheSettingsArgs', 'DomainV1CacheSettingsArgsDict']]] = None,
            cname: Optional[pulumi.Input[_builtins.str]] = None,
            configs: Optional[pulumi.Input[Union['DomainV1ConfigsArgs', 'DomainV1ConfigsArgsDict']]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            domain_status: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            service_area: Optional[pulumi.Input[_builtins.str]] = None,
            sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DomainV1SourceArgs', 'DomainV1SourceArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'DomainV1':
        """
        Get an existing DomainV1 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] domain_name: schema: Internal
        :param pulumi.Input[_builtins.str] service_area: schema: Required
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DomainV1State.__new__(_DomainV1State)

        __props__.__dict__["cache_settings"] = cache_settings
        __props__.__dict__["cname"] = cname
        __props__.__dict__["configs"] = configs
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["domain_status"] = domain_status
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["name"] = name
        __props__.__dict__["service_area"] = service_area
        __props__.__dict__["sources"] = sources
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        return DomainV1(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cacheSettings")
    def cache_settings(self) -> pulumi.Output['outputs.DomainV1CacheSettings']:
        return pulumi.get(self, "cache_settings")

    @_builtins.property
    @pulumi.getter
    def cname(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cname")

    @_builtins.property
    @pulumi.getter
    def configs(self) -> pulumi.Output['outputs.DomainV1Configs']:
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        schema: Internal
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="domainStatus")
    def domain_status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "domain_status")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serviceArea")
    def service_area(self) -> pulumi.Output[_builtins.str]:
        """
        schema: Required
        """
        return pulumi.get(self, "service_area")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> pulumi.Output[Sequence['outputs.DomainV1Source']]:
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "type")

