# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetLogBackupRecordsResult',
    'AwaitableGetLogBackupRecordsResult',
    'get_log_backup_records',
    'get_log_backup_records_output',
]

@pulumi.output_type
class GetLogBackupRecordsResult:
    """
    A collection of values returned by getLogBackupRecords.
    """
    def __init__(__self__, cluster_id=None, id=None, job_id=None, records=None, region=None, status=None, type=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_id and not isinstance(job_id, str):
            raise TypeError("Expected argument 'job_id' to be a str")
        pulumi.set(__self__, "job_id", job_id)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        The ID of the CSS cluster.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetLogBackupRecordsRecordResult']:
        """
        The list of the CSS cluster log backup records.
        """
        return pulumi.get(self, "records")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the log backup job.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the log backup job.
        + **Manual:** Manual backup.
        + **Auto:** Automatic backup.
        """
        return pulumi.get(self, "type")


class AwaitableGetLogBackupRecordsResult(GetLogBackupRecordsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogBackupRecordsResult(
            cluster_id=self.cluster_id,
            id=self.id,
            job_id=self.job_id,
            records=self.records,
            region=self.region,
            status=self.status,
            type=self.type)


def get_log_backup_records(cluster_id: Optional[_builtins.str] = None,
                           job_id: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           status: Optional[_builtins.str] = None,
                           type: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogBackupRecordsResult:
    """
    Use this data source to get the list of CSS cluster log backup records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Css.get_log_backup_records(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the ID of the CSS cluster.
    :param _builtins.str job_id: Specifies the ID of the log backup job.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the log backup job.
    :param _builtins.str type: Specifies the type of the log backup job.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['jobId'] = job_id
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Css/getLogBackupRecords:getLogBackupRecords', __args__, opts=opts, typ=GetLogBackupRecordsResult).value

    return AwaitableGetLogBackupRecordsResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        job_id=pulumi.get(__ret__, 'job_id'),
        records=pulumi.get(__ret__, 'records'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_log_backup_records_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  job_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogBackupRecordsResult]:
    """
    Use this data source to get the list of CSS cluster log backup records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Css.get_log_backup_records(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the ID of the CSS cluster.
    :param _builtins.str job_id: Specifies the ID of the log backup job.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the log backup job.
    :param _builtins.str type: Specifies the type of the log backup job.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['jobId'] = job_id
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Css/getLogBackupRecords:getLogBackupRecords', __args__, opts=opts, typ=GetLogBackupRecordsResult)
    return __ret__.apply(lambda __response__: GetLogBackupRecordsResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        job_id=pulumi.get(__response__, 'job_id'),
        records=pulumi.get(__response__, 'records'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
