# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetScanTasksResult',
    'AwaitableGetScanTasksResult',
    'get_scan_tasks',
    'get_scan_tasks_output',
]

@pulumi.output_type
class GetScanTasksResult:
    """
    A collection of values returned by getScanTasks.
    """
    def __init__(__self__, cluster_id=None, id=None, region=None, scan_tasks=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scan_tasks and not isinstance(scan_tasks, list):
            raise TypeError("Expected argument 'scan_tasks' to be a list")
        pulumi.set(__self__, "scan_tasks", scan_tasks)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scanTasks")
    def scan_tasks(self) -> Sequence['outputs.GetScanTasksScanTaskResult']:
        """
        The scan tasks.
        """
        return pulumi.get(self, "scan_tasks")


class AwaitableGetScanTasksResult(GetScanTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetScanTasksResult(
            cluster_id=self.cluster_id,
            id=self.id,
            region=self.region,
            scan_tasks=self.scan_tasks)


def get_scan_tasks(cluster_id: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetScanTasksResult:
    """
    Use this data source to get the list of CSS scan tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Css.get_scan_tasks(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the ID of the CSS cluster.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Css/getScanTasks:getScanTasks', __args__, opts=opts, typ=GetScanTasksResult).value

    return AwaitableGetScanTasksResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        scan_tasks=pulumi.get(__ret__, 'scan_tasks'))
def get_scan_tasks_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetScanTasksResult]:
    """
    Use this data source to get the list of CSS scan tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Css.get_scan_tasks(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the ID of the CSS cluster.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Css/getScanTasks:getScanTasks', __args__, opts=opts, typ=GetScanTasksResult)
    return __ret__.apply(lambda __response__: GetScanTasksResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        scan_tasks=pulumi.get(__response__, 'scan_tasks')))
