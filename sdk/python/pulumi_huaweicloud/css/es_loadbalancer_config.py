# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EsLoadbalancerConfigArgs', 'EsLoadbalancerConfig']

@pulumi.input_type
class EsLoadbalancerConfigArgs:
    def __init__(__self__, *,
                 agency: pulumi.Input[_builtins.str],
                 cluster_id: pulumi.Input[_builtins.str],
                 loadbalancer_id: pulumi.Input[_builtins.str],
                 protocol_port: pulumi.Input[_builtins.int],
                 ca_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_cert_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EsLoadbalancerConfig resource.
        :param pulumi.Input[_builtins.str] agency: Specifies the IAM agency used to access ELB.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] loadbalancer_id: Specifies the ID of the loadbalancer.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] protocol_port: Specifies the front-end listening port of the listener.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] ca_cert_id: Specifies the CA certificate ID used by the ELB listener.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] server_cert_id: Specifies the server certificate ID used by the ELB listener.
        """
        pulumi.set(__self__, "agency", agency)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        pulumi.set(__self__, "protocol_port", protocol_port)
        if ca_cert_id is not None:
            pulumi.set(__self__, "ca_cert_id", ca_cert_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server_cert_id is not None:
            pulumi.set(__self__, "server_cert_id", server_cert_id)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the IAM agency used to access ELB.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "agency")

    @agency.setter
    def agency(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "agency", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the CSS cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the loadbalancer.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "loadbalancer_id")

    @loadbalancer_id.setter
    def loadbalancer_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "loadbalancer_id", value)

    @_builtins.property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the front-end listening port of the listener.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "protocol_port")

    @protocol_port.setter
    def protocol_port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "protocol_port", value)

    @_builtins.property
    @pulumi.getter(name="caCertId")
    def ca_cert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CA certificate ID used by the ELB listener.
        """
        return pulumi.get(self, "ca_cert_id")

    @ca_cert_id.setter
    def ca_cert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ca_cert_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serverCertId")
    def server_cert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the server certificate ID used by the ELB listener.
        """
        return pulumi.get(self, "server_cert_id")

    @server_cert_id.setter
    def server_cert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_cert_id", value)


@pulumi.input_type
class _EsLoadbalancerConfigState:
    def __init__(__self__, *,
                 agency: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ca_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ca_cert_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 elb_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 health_monitors: Optional[pulumi.Input[Sequence[pulumi.Input['EsLoadbalancerConfigHealthMonitorArgs']]]] = None,
                 listeners: Optional[pulumi.Input[Sequence[pulumi.Input['EsLoadbalancerConfigListenerArgs']]]] = None,
                 loadbalancer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 loadbalancers: Optional[pulumi.Input[Sequence[pulumi.Input['EsLoadbalancerConfigLoadbalancerArgs']]]] = None,
                 protocol_port: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 server_cert_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EsLoadbalancerConfig resources.
        :param pulumi.Input[_builtins.str] agency: Specifies the IAM agency used to access ELB.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] authentication_type: The authentication type.
        :param pulumi.Input[_builtins.str] ca_cert_id: Specifies the CA certificate ID used by the ELB listener.
        :param pulumi.Input[_builtins.str] ca_cert_name: The CA certificate name.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] elb_enabled: Whether the loadbalancer is enabled.
        :param pulumi.Input[Sequence[pulumi.Input['EsLoadbalancerConfigHealthMonitorArgs']]] health_monitors: The health monitors.
               The health_monitors structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['EsLoadbalancerConfigListenerArgs']]] listeners: The listener information.
               The listener structure is documented below.
        :param pulumi.Input[_builtins.str] loadbalancer_id: Specifies the ID of the loadbalancer.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['EsLoadbalancerConfigLoadbalancerArgs']]] loadbalancers: The ELB loadbalancer information.
               The loadbalancer structure is documented below.
        :param pulumi.Input[_builtins.int] protocol_port: Specifies the front-end listening port of the listener.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] server_cert_id: Specifies the server certificate ID used by the ELB listener.
        :param pulumi.Input[_builtins.str] server_cert_name: The server certificate name.
        """
        if agency is not None:
            pulumi.set(__self__, "agency", agency)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if ca_cert_id is not None:
            pulumi.set(__self__, "ca_cert_id", ca_cert_id)
        if ca_cert_name is not None:
            pulumi.set(__self__, "ca_cert_name", ca_cert_name)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if elb_enabled is not None:
            pulumi.set(__self__, "elb_enabled", elb_enabled)
        if health_monitors is not None:
            pulumi.set(__self__, "health_monitors", health_monitors)
        if listeners is not None:
            pulumi.set(__self__, "listeners", listeners)
        if loadbalancer_id is not None:
            pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        if loadbalancers is not None:
            pulumi.set(__self__, "loadbalancers", loadbalancers)
        if protocol_port is not None:
            pulumi.set(__self__, "protocol_port", protocol_port)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server_cert_id is not None:
            pulumi.set(__self__, "server_cert_id", server_cert_id)
        if server_cert_name is not None:
            pulumi.set(__self__, "server_cert_name", server_cert_name)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IAM agency used to access ELB.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "agency")

    @agency.setter
    def agency(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency", value)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The authentication type.
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter(name="caCertId")
    def ca_cert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CA certificate ID used by the ELB listener.
        """
        return pulumi.get(self, "ca_cert_id")

    @ca_cert_id.setter
    def ca_cert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ca_cert_id", value)

    @_builtins.property
    @pulumi.getter(name="caCertName")
    def ca_cert_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CA certificate name.
        """
        return pulumi.get(self, "ca_cert_name")

    @ca_cert_name.setter
    def ca_cert_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ca_cert_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the CSS cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="elbEnabled")
    def elb_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the loadbalancer is enabled.
        """
        return pulumi.get(self, "elb_enabled")

    @elb_enabled.setter
    def elb_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "elb_enabled", value)

    @_builtins.property
    @pulumi.getter(name="healthMonitors")
    def health_monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EsLoadbalancerConfigHealthMonitorArgs']]]]:
        """
        The health monitors.
        The health_monitors structure is documented below.
        """
        return pulumi.get(self, "health_monitors")

    @health_monitors.setter
    def health_monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EsLoadbalancerConfigHealthMonitorArgs']]]]):
        pulumi.set(self, "health_monitors", value)

    @_builtins.property
    @pulumi.getter
    def listeners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EsLoadbalancerConfigListenerArgs']]]]:
        """
        The listener information.
        The listener structure is documented below.
        """
        return pulumi.get(self, "listeners")

    @listeners.setter
    def listeners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EsLoadbalancerConfigListenerArgs']]]]):
        pulumi.set(self, "listeners", value)

    @_builtins.property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the loadbalancer.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "loadbalancer_id")

    @loadbalancer_id.setter
    def loadbalancer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "loadbalancer_id", value)

    @_builtins.property
    @pulumi.getter
    def loadbalancers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EsLoadbalancerConfigLoadbalancerArgs']]]]:
        """
        The ELB loadbalancer information.
        The loadbalancer structure is documented below.
        """
        return pulumi.get(self, "loadbalancers")

    @loadbalancers.setter
    def loadbalancers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EsLoadbalancerConfigLoadbalancerArgs']]]]):
        pulumi.set(self, "loadbalancers", value)

    @_builtins.property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the front-end listening port of the listener.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "protocol_port")

    @protocol_port.setter
    def protocol_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "protocol_port", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serverCertId")
    def server_cert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the server certificate ID used by the ELB listener.
        """
        return pulumi.get(self, "server_cert_id")

    @server_cert_id.setter
    def server_cert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_cert_id", value)

    @_builtins.property
    @pulumi.getter(name="serverCertName")
    def server_cert_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The server certificate name.
        """
        return pulumi.get(self, "server_cert_name")

    @server_cert_name.setter
    def server_cert_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_cert_name", value)


@pulumi.type_token("huaweicloud:Css/esLoadbalancerConfig:EsLoadbalancerConfig")
class EsLoadbalancerConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency: Optional[pulumi.Input[_builtins.str]] = None,
                 ca_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 loadbalancer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_port: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages CSS ElasticSearch loadbalancer resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        agency = config.require_object("agency")
        elb_loadbalancer_id = config.require_object("elbLoadbalancerId")
        protocol_port = config.require_object("protocolPort")
        server_cert_id = config.require_object("serverCertId")
        test = huaweicloud.css.EsLoadbalancerConfig("test",
            cluster_id=cluster_id,
            agency=agency,
            loadbalancer_id=elb_loadbalancer_id,
            protocol_port=protocol_port,
            server_cert_id=server_cert_id)
        ```

        ## Import

        The CSS ElasticSearch loadbalancer config can be imported using `cluster_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/esLoadbalancerConfig:EsLoadbalancerConfig test <cluster_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency: Specifies the IAM agency used to access ELB.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] ca_cert_id: Specifies the CA certificate ID used by the ELB listener.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] loadbalancer_id: Specifies the ID of the loadbalancer.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] protocol_port: Specifies the front-end listening port of the listener.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] server_cert_id: Specifies the server certificate ID used by the ELB listener.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EsLoadbalancerConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages CSS ElasticSearch loadbalancer resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        agency = config.require_object("agency")
        elb_loadbalancer_id = config.require_object("elbLoadbalancerId")
        protocol_port = config.require_object("protocolPort")
        server_cert_id = config.require_object("serverCertId")
        test = huaweicloud.css.EsLoadbalancerConfig("test",
            cluster_id=cluster_id,
            agency=agency,
            loadbalancer_id=elb_loadbalancer_id,
            protocol_port=protocol_port,
            server_cert_id=server_cert_id)
        ```

        ## Import

        The CSS ElasticSearch loadbalancer config can be imported using `cluster_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/esLoadbalancerConfig:EsLoadbalancerConfig test <cluster_id>
        ```

        :param str resource_name: The name of the resource.
        :param EsLoadbalancerConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EsLoadbalancerConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency: Optional[pulumi.Input[_builtins.str]] = None,
                 ca_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 loadbalancer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_port: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EsLoadbalancerConfigArgs.__new__(EsLoadbalancerConfigArgs)

            if agency is None and not opts.urn:
                raise TypeError("Missing required property 'agency'")
            __props__.__dict__["agency"] = agency
            __props__.__dict__["ca_cert_id"] = ca_cert_id
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if loadbalancer_id is None and not opts.urn:
                raise TypeError("Missing required property 'loadbalancer_id'")
            __props__.__dict__["loadbalancer_id"] = loadbalancer_id
            if protocol_port is None and not opts.urn:
                raise TypeError("Missing required property 'protocol_port'")
            __props__.__dict__["protocol_port"] = protocol_port
            __props__.__dict__["region"] = region
            __props__.__dict__["server_cert_id"] = server_cert_id
            __props__.__dict__["authentication_type"] = None
            __props__.__dict__["ca_cert_name"] = None
            __props__.__dict__["elb_enabled"] = None
            __props__.__dict__["health_monitors"] = None
            __props__.__dict__["listeners"] = None
            __props__.__dict__["loadbalancers"] = None
            __props__.__dict__["server_cert_name"] = None
        super(EsLoadbalancerConfig, __self__).__init__(
            'huaweicloud:Css/esLoadbalancerConfig:EsLoadbalancerConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agency: Optional[pulumi.Input[_builtins.str]] = None,
            authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
            ca_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
            ca_cert_name: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            elb_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            health_monitors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EsLoadbalancerConfigHealthMonitorArgs', 'EsLoadbalancerConfigHealthMonitorArgsDict']]]]] = None,
            listeners: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EsLoadbalancerConfigListenerArgs', 'EsLoadbalancerConfigListenerArgsDict']]]]] = None,
            loadbalancer_id: Optional[pulumi.Input[_builtins.str]] = None,
            loadbalancers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EsLoadbalancerConfigLoadbalancerArgs', 'EsLoadbalancerConfigLoadbalancerArgsDict']]]]] = None,
            protocol_port: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            server_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
            server_cert_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'EsLoadbalancerConfig':
        """
        Get an existing EsLoadbalancerConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency: Specifies the IAM agency used to access ELB.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] authentication_type: The authentication type.
        :param pulumi.Input[_builtins.str] ca_cert_id: Specifies the CA certificate ID used by the ELB listener.
        :param pulumi.Input[_builtins.str] ca_cert_name: The CA certificate name.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] elb_enabled: Whether the loadbalancer is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EsLoadbalancerConfigHealthMonitorArgs', 'EsLoadbalancerConfigHealthMonitorArgsDict']]]] health_monitors: The health monitors.
               The health_monitors structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EsLoadbalancerConfigListenerArgs', 'EsLoadbalancerConfigListenerArgsDict']]]] listeners: The listener information.
               The listener structure is documented below.
        :param pulumi.Input[_builtins.str] loadbalancer_id: Specifies the ID of the loadbalancer.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EsLoadbalancerConfigLoadbalancerArgs', 'EsLoadbalancerConfigLoadbalancerArgsDict']]]] loadbalancers: The ELB loadbalancer information.
               The loadbalancer structure is documented below.
        :param pulumi.Input[_builtins.int] protocol_port: Specifies the front-end listening port of the listener.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] server_cert_id: Specifies the server certificate ID used by the ELB listener.
        :param pulumi.Input[_builtins.str] server_cert_name: The server certificate name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EsLoadbalancerConfigState.__new__(_EsLoadbalancerConfigState)

        __props__.__dict__["agency"] = agency
        __props__.__dict__["authentication_type"] = authentication_type
        __props__.__dict__["ca_cert_id"] = ca_cert_id
        __props__.__dict__["ca_cert_name"] = ca_cert_name
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["elb_enabled"] = elb_enabled
        __props__.__dict__["health_monitors"] = health_monitors
        __props__.__dict__["listeners"] = listeners
        __props__.__dict__["loadbalancer_id"] = loadbalancer_id
        __props__.__dict__["loadbalancers"] = loadbalancers
        __props__.__dict__["protocol_port"] = protocol_port
        __props__.__dict__["region"] = region
        __props__.__dict__["server_cert_id"] = server_cert_id
        __props__.__dict__["server_cert_name"] = server_cert_name
        return EsLoadbalancerConfig(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the IAM agency used to access ELB.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "agency")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> pulumi.Output[_builtins.str]:
        """
        The authentication type.
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="caCertId")
    def ca_cert_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the CA certificate ID used by the ELB listener.
        """
        return pulumi.get(self, "ca_cert_id")

    @_builtins.property
    @pulumi.getter(name="caCertName")
    def ca_cert_name(self) -> pulumi.Output[_builtins.str]:
        """
        The CA certificate name.
        """
        return pulumi.get(self, "ca_cert_name")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the CSS cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="elbEnabled")
    def elb_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the loadbalancer is enabled.
        """
        return pulumi.get(self, "elb_enabled")

    @_builtins.property
    @pulumi.getter(name="healthMonitors")
    def health_monitors(self) -> pulumi.Output[Sequence['outputs.EsLoadbalancerConfigHealthMonitor']]:
        """
        The health monitors.
        The health_monitors structure is documented below.
        """
        return pulumi.get(self, "health_monitors")

    @_builtins.property
    @pulumi.getter
    def listeners(self) -> pulumi.Output[Sequence['outputs.EsLoadbalancerConfigListener']]:
        """
        The listener information.
        The listener structure is documented below.
        """
        return pulumi.get(self, "listeners")

    @_builtins.property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the loadbalancer.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "loadbalancer_id")

    @_builtins.property
    @pulumi.getter
    def loadbalancers(self) -> pulumi.Output[Sequence['outputs.EsLoadbalancerConfigLoadbalancer']]:
        """
        The ELB loadbalancer information.
        The loadbalancer structure is documented below.
        """
        return pulumi.get(self, "loadbalancers")

    @_builtins.property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the front-end listening port of the listener.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "protocol_port")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverCertId")
    def server_cert_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the server certificate ID used by the ELB listener.
        """
        return pulumi.get(self, "server_cert_id")

    @_builtins.property
    @pulumi.getter(name="serverCertName")
    def server_cert_name(self) -> pulumi.Output[_builtins.str]:
        """
        The server certificate name.
        """
        return pulumi.get(self, "server_cert_name")

