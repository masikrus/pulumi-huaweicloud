# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ClusterAzMigrateArgs', 'ClusterAzMigrate']

@pulumi.input_type
class ClusterAzMigrateArgs:
    def __init__(__self__, *,
                 agency: pulumi.Input[_builtins.str],
                 cluster_id: pulumi.Input[_builtins.str],
                 instance_type: pulumi.Input[_builtins.str],
                 migrate_type: pulumi.Input[_builtins.str],
                 source_az: pulumi.Input[_builtins.str],
                 target_az: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 indices_backup_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ClusterAzMigrate resource.
        :param pulumi.Input[_builtins.str] agency: Specifies the IAM agency used to access CSS.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
        :param pulumi.Input[_builtins.str] instance_type: Specifies the node type of the AZ to be switched.
               The value can be **ess**, **ess-cold**, **ess-master**, **ess-client** and **all**.
        :param pulumi.Input[_builtins.str] migrate_type: Specifies the migration type of AZ.
               The value can be **multi_az_change** and **az_migrate**.
        :param pulumi.Input[_builtins.str] source_az: Specifies the AZ where the node is currently located.
        :param pulumi.Input[_builtins.str] target_az: Specifies the AZ where the node is finally distributed.
        :param pulumi.Input[_builtins.bool] indices_backup_check: Specifies whether to perform backup verification.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "agency", agency)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "migrate_type", migrate_type)
        pulumi.set(__self__, "source_az", source_az)
        pulumi.set(__self__, "target_az", target_az)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if indices_backup_check is not None:
            pulumi.set(__self__, "indices_backup_check", indices_backup_check)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the IAM agency used to access CSS.
        """
        return pulumi.get(self, "agency")

    @agency.setter
    def agency(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "agency", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the CSS cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the node type of the AZ to be switched.
        The value can be **ess**, **ess-cold**, **ess-master**, **ess-client** and **all**.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_type", value)

    @_builtins.property
    @pulumi.getter(name="migrateType")
    def migrate_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the migration type of AZ.
        The value can be **multi_az_change** and **az_migrate**.
        """
        return pulumi.get(self, "migrate_type")

    @migrate_type.setter
    def migrate_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "migrate_type", value)

    @_builtins.property
    @pulumi.getter(name="sourceAz")
    def source_az(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the AZ where the node is currently located.
        """
        return pulumi.get(self, "source_az")

    @source_az.setter
    def source_az(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_az", value)

    @_builtins.property
    @pulumi.getter(name="targetAz")
    def target_az(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the AZ where the node is finally distributed.
        """
        return pulumi.get(self, "target_az")

    @target_az.setter
    def target_az(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_az", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="indicesBackupCheck")
    def indices_backup_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform backup verification.
        """
        return pulumi.get(self, "indices_backup_check")

    @indices_backup_check.setter
    def indices_backup_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "indices_backup_check", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ClusterAzMigrateState:
    def __init__(__self__, *,
                 agency: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 indices_backup_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 migrate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_az: Optional[pulumi.Input[_builtins.str]] = None,
                 target_az: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ClusterAzMigrate resources.
        :param pulumi.Input[_builtins.str] agency: Specifies the IAM agency used to access CSS.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
        :param pulumi.Input[_builtins.bool] indices_backup_check: Specifies whether to perform backup verification.
        :param pulumi.Input[_builtins.str] instance_type: Specifies the node type of the AZ to be switched.
               The value can be **ess**, **ess-cold**, **ess-master**, **ess-client** and **all**.
        :param pulumi.Input[_builtins.str] migrate_type: Specifies the migration type of AZ.
               The value can be **multi_az_change** and **az_migrate**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source_az: Specifies the AZ where the node is currently located.
        :param pulumi.Input[_builtins.str] target_az: Specifies the AZ where the node is finally distributed.
        """
        if agency is not None:
            pulumi.set(__self__, "agency", agency)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if indices_backup_check is not None:
            pulumi.set(__self__, "indices_backup_check", indices_backup_check)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if migrate_type is not None:
            pulumi.set(__self__, "migrate_type", migrate_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_az is not None:
            pulumi.set(__self__, "source_az", source_az)
        if target_az is not None:
            pulumi.set(__self__, "target_az", target_az)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IAM agency used to access CSS.
        """
        return pulumi.get(self, "agency")

    @agency.setter
    def agency(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the CSS cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="indicesBackupCheck")
    def indices_backup_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform backup verification.
        """
        return pulumi.get(self, "indices_backup_check")

    @indices_backup_check.setter
    def indices_backup_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "indices_backup_check", value)

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the node type of the AZ to be switched.
        The value can be **ess**, **ess-cold**, **ess-master**, **ess-client** and **all**.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_type", value)

    @_builtins.property
    @pulumi.getter(name="migrateType")
    def migrate_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the migration type of AZ.
        The value can be **multi_az_change** and **az_migrate**.
        """
        return pulumi.get(self, "migrate_type")

    @migrate_type.setter
    def migrate_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "migrate_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sourceAz")
    def source_az(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AZ where the node is currently located.
        """
        return pulumi.get(self, "source_az")

    @source_az.setter
    def source_az(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_az", value)

    @_builtins.property
    @pulumi.getter(name="targetAz")
    def target_az(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AZ where the node is finally distributed.
        """
        return pulumi.get(self, "target_az")

    @target_az.setter
    def target_az(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_az", value)


@pulumi.type_token("huaweicloud:Css/clusterAzMigrate:ClusterAzMigrate")
class ClusterAzMigrate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 indices_backup_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 migrate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_az: Optional[pulumi.Input[_builtins.str]] = None,
                 target_az: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages CSS cluster az migrate resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        agency = config.require_object("agency")
        test = huaweicloud.css.ClusterAzMigrate("test",
            cluster_id=cluster_id,
            instance_type="all",
            source_az="cn-south-1e",
            target_az="cn-south-1e,cn-south-1c",
            migrate_type="multi_az_change",
            agency=agency,
            indices_backup_check=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency: Specifies the IAM agency used to access CSS.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
        :param pulumi.Input[_builtins.bool] indices_backup_check: Specifies whether to perform backup verification.
        :param pulumi.Input[_builtins.str] instance_type: Specifies the node type of the AZ to be switched.
               The value can be **ess**, **ess-cold**, **ess-master**, **ess-client** and **all**.
        :param pulumi.Input[_builtins.str] migrate_type: Specifies the migration type of AZ.
               The value can be **multi_az_change** and **az_migrate**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source_az: Specifies the AZ where the node is currently located.
        :param pulumi.Input[_builtins.str] target_az: Specifies the AZ where the node is finally distributed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterAzMigrateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages CSS cluster az migrate resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        agency = config.require_object("agency")
        test = huaweicloud.css.ClusterAzMigrate("test",
            cluster_id=cluster_id,
            instance_type="all",
            source_az="cn-south-1e",
            target_az="cn-south-1e,cn-south-1c",
            migrate_type="multi_az_change",
            agency=agency,
            indices_backup_check=True)
        ```

        :param str resource_name: The name of the resource.
        :param ClusterAzMigrateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterAzMigrateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 indices_backup_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 migrate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_az: Optional[pulumi.Input[_builtins.str]] = None,
                 target_az: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterAzMigrateArgs.__new__(ClusterAzMigrateArgs)

            if agency is None and not opts.urn:
                raise TypeError("Missing required property 'agency'")
            __props__.__dict__["agency"] = agency
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["indices_backup_check"] = indices_backup_check
            if instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'instance_type'")
            __props__.__dict__["instance_type"] = instance_type
            if migrate_type is None and not opts.urn:
                raise TypeError("Missing required property 'migrate_type'")
            __props__.__dict__["migrate_type"] = migrate_type
            __props__.__dict__["region"] = region
            if source_az is None and not opts.urn:
                raise TypeError("Missing required property 'source_az'")
            __props__.__dict__["source_az"] = source_az
            if target_az is None and not opts.urn:
                raise TypeError("Missing required property 'target_az'")
            __props__.__dict__["target_az"] = target_az
        super(ClusterAzMigrate, __self__).__init__(
            'huaweicloud:Css/clusterAzMigrate:ClusterAzMigrate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agency: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            indices_backup_check: Optional[pulumi.Input[_builtins.bool]] = None,
            instance_type: Optional[pulumi.Input[_builtins.str]] = None,
            migrate_type: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            source_az: Optional[pulumi.Input[_builtins.str]] = None,
            target_az: Optional[pulumi.Input[_builtins.str]] = None) -> 'ClusterAzMigrate':
        """
        Get an existing ClusterAzMigrate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency: Specifies the IAM agency used to access CSS.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
        :param pulumi.Input[_builtins.bool] indices_backup_check: Specifies whether to perform backup verification.
        :param pulumi.Input[_builtins.str] instance_type: Specifies the node type of the AZ to be switched.
               The value can be **ess**, **ess-cold**, **ess-master**, **ess-client** and **all**.
        :param pulumi.Input[_builtins.str] migrate_type: Specifies the migration type of AZ.
               The value can be **multi_az_change** and **az_migrate**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source_az: Specifies the AZ where the node is currently located.
        :param pulumi.Input[_builtins.str] target_az: Specifies the AZ where the node is finally distributed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterAzMigrateState.__new__(_ClusterAzMigrateState)

        __props__.__dict__["agency"] = agency
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["indices_backup_check"] = indices_backup_check
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["migrate_type"] = migrate_type
        __props__.__dict__["region"] = region
        __props__.__dict__["source_az"] = source_az
        __props__.__dict__["target_az"] = target_az
        return ClusterAzMigrate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the IAM agency used to access CSS.
        """
        return pulumi.get(self, "agency")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the CSS cluster.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="indicesBackupCheck")
    def indices_backup_check(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to perform backup verification.
        """
        return pulumi.get(self, "indices_backup_check")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the node type of the AZ to be switched.
        The value can be **ess**, **ess-cold**, **ess-master**, **ess-client** and **all**.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="migrateType")
    def migrate_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the migration type of AZ.
        The value can be **multi_az_change** and **az_migrate**.
        """
        return pulumi.get(self, "migrate_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sourceAz")
    def source_az(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the AZ where the node is currently located.
        """
        return pulumi.get(self, "source_az")

    @_builtins.property
    @pulumi.getter(name="targetAz")
    def target_az(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the AZ where the node is finally distributed.
        """
        return pulumi.get(self, "target_az")

