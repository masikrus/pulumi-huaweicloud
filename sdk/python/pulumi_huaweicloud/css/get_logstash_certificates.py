# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetLogstashCertificatesResult',
    'AwaitableGetLogstashCertificatesResult',
    'get_logstash_certificates',
    'get_logstash_certificates_output',
]

@pulumi.output_type
class GetLogstashCertificatesResult:
    """
    A collection of values returned by getLogstashCertificates.
    """
    def __init__(__self__, certificates=None, certs_type=None, cluster_id=None, file_name=None, id=None, region=None, status=None):
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        pulumi.set(__self__, "certificates", certificates)
        if certs_type and not isinstance(certs_type, str):
            raise TypeError("Expected argument 'certs_type' to be a str")
        pulumi.set(__self__, "certs_type", certs_type)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if file_name and not isinstance(file_name, str):
            raise TypeError("Expected argument 'file_name' to be a str")
        pulumi.set(__self__, "file_name", file_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.GetLogstashCertificatesCertificateResult']:
        """
        The list of the certificates.
        """
        return pulumi.get(self, "certificates")

    @_builtins.property
    @pulumi.getter(name="certsType")
    def certs_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "certs_type")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[_builtins.str]:
        """
        The name of the certificate.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the certificate.
        """
        return pulumi.get(self, "status")


class AwaitableGetLogstashCertificatesResult(GetLogstashCertificatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogstashCertificatesResult(
            certificates=self.certificates,
            certs_type=self.certs_type,
            cluster_id=self.cluster_id,
            file_name=self.file_name,
            id=self.id,
            region=self.region,
            status=self.status)


def get_logstash_certificates(certs_type: Optional[_builtins.str] = None,
                              cluster_id: Optional[_builtins.str] = None,
                              file_name: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              status: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogstashCertificatesResult:
    """
    Use this data source to get the list of the CSS logstash certificates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    certs_type = config.require_object("certsType")
    test = huaweicloud.Css.get_logstash_certificates(cluster_id=cluster_id,
        certs_type=certs_type)
    ```


    :param _builtins.str certs_type: Specifies the certificate type.
           The **defaultCerts** is the default certificate type. If you do not specify the query certificate type,
           it will search the custom certificate list by default.
    :param _builtins.str cluster_id: Specifies ID of the CSS logstash cluster.
    :param _builtins.str file_name: Specifies the file name of the certificate.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the certificate.
           The values can be **available** and **unavailable**.
    """
    __args__ = dict()
    __args__['certsType'] = certs_type
    __args__['clusterId'] = cluster_id
    __args__['fileName'] = file_name
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Css/getLogstashCertificates:getLogstashCertificates', __args__, opts=opts, typ=GetLogstashCertificatesResult).value

    return AwaitableGetLogstashCertificatesResult(
        certificates=pulumi.get(__ret__, 'certificates'),
        certs_type=pulumi.get(__ret__, 'certs_type'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        file_name=pulumi.get(__ret__, 'file_name'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_logstash_certificates_output(certs_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     file_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogstashCertificatesResult]:
    """
    Use this data source to get the list of the CSS logstash certificates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    certs_type = config.require_object("certsType")
    test = huaweicloud.Css.get_logstash_certificates(cluster_id=cluster_id,
        certs_type=certs_type)
    ```


    :param _builtins.str certs_type: Specifies the certificate type.
           The **defaultCerts** is the default certificate type. If you do not specify the query certificate type,
           it will search the custom certificate list by default.
    :param _builtins.str cluster_id: Specifies ID of the CSS logstash cluster.
    :param _builtins.str file_name: Specifies the file name of the certificate.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the certificate.
           The values can be **available** and **unavailable**.
    """
    __args__ = dict()
    __args__['certsType'] = certs_type
    __args__['clusterId'] = cluster_id
    __args__['fileName'] = file_name
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Css/getLogstashCertificates:getLogstashCertificates', __args__, opts=opts, typ=GetLogstashCertificatesResult)
    return __ret__.apply(lambda __response__: GetLogstashCertificatesResult(
        certificates=pulumi.get(__response__, 'certificates'),
        certs_type=pulumi.get(__response__, 'certs_type'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        file_name=pulumi.get(__response__, 'file_name'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
