# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SnapshotRestoreArgs', 'SnapshotRestore']

@pulumi.input_type
class SnapshotRestoreArgs:
    def __init__(__self__, *,
                 snapshot_id: pulumi.Input[_builtins.str],
                 source_cluster_id: pulumi.Input[_builtins.str],
                 target_cluster_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 indices: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rename_pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 rename_replacement: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SnapshotRestore resource.
        :param pulumi.Input[_builtins.str] snapshot_id: Specifies the ID of the snapshot to be restored.
        :param pulumi.Input[_builtins.str] source_cluster_id: Specifies the source cluster ID.
        :param pulumi.Input[_builtins.str] target_cluster_id: Specifies the target cluster ID.
        :param pulumi.Input[_builtins.str] indices: Name of an index to be restored. Multiple indexes are separated by
               commas (,). By default, all indexes are restored.You can use `*` to match multiple indexes. For example, if you
               specify `2018-06*`, then the data of the indexes with the prefix 2018-06 will be restored. The value can contain
               **0** to **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed:
               **"\\<|>/?**.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource. If omitted, the
               provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] rename_pattern: Rule for defining the indexes to be restored. The value can
               contain `0` to `1,024` characters. Uppercase letters, spaces, and the following special characters are not allowed:
               **"\\<|>/?**. Indexes that match this rule will be restored. The filtering condition must be a regular expression.
        :param pulumi.Input[_builtins.str] rename_replacement: Rule for renaming an index. The value can contain **0** to
               **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed: **"\\<|>/?**.
               For example, **restored_index_$1** indicates adding the **restored_index_** prefix to the names of all the restored
               indexes. The `rename_replacement` parameter takes effect only if rename_pattern has been enabled.
        """
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "source_cluster_id", source_cluster_id)
        pulumi.set(__self__, "target_cluster_id", target_cluster_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if indices is not None:
            pulumi.set(__self__, "indices", indices)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rename_pattern is not None:
            pulumi.set(__self__, "rename_pattern", rename_pattern)
        if rename_replacement is not None:
            pulumi.set(__self__, "rename_replacement", rename_replacement)

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the snapshot to be restored.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "snapshot_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceClusterId")
    def source_cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the source cluster ID.
        """
        return pulumi.get(self, "source_cluster_id")

    @source_cluster_id.setter
    def source_cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="targetClusterId")
    def target_cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the target cluster ID.
        """
        return pulumi.get(self, "target_cluster_id")

    @target_cluster_id.setter
    def target_cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def indices(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of an index to be restored. Multiple indexes are separated by
        commas (,). By default, all indexes are restored.You can use `*` to match multiple indexes. For example, if you
        specify `2018-06*`, then the data of the indexes with the prefix 2018-06 will be restored. The value can contain
        **0** to **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed:
        **"\\<|>/?**.
        """
        return pulumi.get(self, "indices")

    @indices.setter
    def indices(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "indices", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the resource. If omitted, the
        provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="renamePattern")
    def rename_pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Rule for defining the indexes to be restored. The value can
        contain `0` to `1,024` characters. Uppercase letters, spaces, and the following special characters are not allowed:
        **"\\<|>/?**. Indexes that match this rule will be restored. The filtering condition must be a regular expression.
        """
        return pulumi.get(self, "rename_pattern")

    @rename_pattern.setter
    def rename_pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rename_pattern", value)

    @_builtins.property
    @pulumi.getter(name="renameReplacement")
    def rename_replacement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Rule for renaming an index. The value can contain **0** to
        **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed: **"\\<|>/?**.
        For example, **restored_index_$1** indicates adding the **restored_index_** prefix to the names of all the restored
        indexes. The `rename_replacement` parameter takes effect only if rename_pattern has been enabled.
        """
        return pulumi.get(self, "rename_replacement")

    @rename_replacement.setter
    def rename_replacement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rename_replacement", value)


@pulumi.input_type
class _SnapshotRestoreState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 indices: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rename_pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 rename_replacement: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_cluster_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SnapshotRestore resources.
        :param pulumi.Input[_builtins.str] indices: Name of an index to be restored. Multiple indexes are separated by
               commas (,). By default, all indexes are restored.You can use `*` to match multiple indexes. For example, if you
               specify `2018-06*`, then the data of the indexes with the prefix 2018-06 will be restored. The value can contain
               **0** to **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed:
               **"\\<|>/?**.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource. If omitted, the
               provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] rename_pattern: Rule for defining the indexes to be restored. The value can
               contain `0` to `1,024` characters. Uppercase letters, spaces, and the following special characters are not allowed:
               **"\\<|>/?**. Indexes that match this rule will be restored. The filtering condition must be a regular expression.
        :param pulumi.Input[_builtins.str] rename_replacement: Rule for renaming an index. The value can contain **0** to
               **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed: **"\\<|>/?**.
               For example, **restored_index_$1** indicates adding the **restored_index_** prefix to the names of all the restored
               indexes. The `rename_replacement` parameter takes effect only if rename_pattern has been enabled.
        :param pulumi.Input[_builtins.str] snapshot_id: Specifies the ID of the snapshot to be restored.
        :param pulumi.Input[_builtins.str] source_cluster_id: Specifies the source cluster ID.
        :param pulumi.Input[_builtins.str] target_cluster_id: Specifies the target cluster ID.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if indices is not None:
            pulumi.set(__self__, "indices", indices)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rename_pattern is not None:
            pulumi.set(__self__, "rename_pattern", rename_pattern)
        if rename_replacement is not None:
            pulumi.set(__self__, "rename_replacement", rename_replacement)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if source_cluster_id is not None:
            pulumi.set(__self__, "source_cluster_id", source_cluster_id)
        if target_cluster_id is not None:
            pulumi.set(__self__, "target_cluster_id", target_cluster_id)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def indices(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of an index to be restored. Multiple indexes are separated by
        commas (,). By default, all indexes are restored.You can use `*` to match multiple indexes. For example, if you
        specify `2018-06*`, then the data of the indexes with the prefix 2018-06 will be restored. The value can contain
        **0** to **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed:
        **"\\<|>/?**.
        """
        return pulumi.get(self, "indices")

    @indices.setter
    def indices(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "indices", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the resource. If omitted, the
        provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="renamePattern")
    def rename_pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Rule for defining the indexes to be restored. The value can
        contain `0` to `1,024` characters. Uppercase letters, spaces, and the following special characters are not allowed:
        **"\\<|>/?**. Indexes that match this rule will be restored. The filtering condition must be a regular expression.
        """
        return pulumi.get(self, "rename_pattern")

    @rename_pattern.setter
    def rename_pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rename_pattern", value)

    @_builtins.property
    @pulumi.getter(name="renameReplacement")
    def rename_replacement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Rule for renaming an index. The value can contain **0** to
        **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed: **"\\<|>/?**.
        For example, **restored_index_$1** indicates adding the **restored_index_** prefix to the names of all the restored
        indexes. The `rename_replacement` parameter takes effect only if rename_pattern has been enabled.
        """
        return pulumi.get(self, "rename_replacement")

    @rename_replacement.setter
    def rename_replacement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rename_replacement", value)

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the snapshot to be restored.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceClusterId")
    def source_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source cluster ID.
        """
        return pulumi.get(self, "source_cluster_id")

    @source_cluster_id.setter
    def source_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="targetClusterId")
    def target_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target cluster ID.
        """
        return pulumi.get(self, "target_cluster_id")

    @target_cluster_id.setter
    def target_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_cluster_id", value)


@pulumi.type_token("huaweicloud:Css/snapshotRestore:SnapshotRestore")
class SnapshotRestore(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 indices: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rename_pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 rename_replacement: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages CSS cluster snapshot restore resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        target_cluster_id = config.require_object("targetClusterId")
        source_cluster_id = config.require_object("sourceClusterId")
        snapshot_id = config.require_object("snapshotId")
        test = huaweicloud.css.SnapshotRestore("test",
            source_cluster_id=target_cluster_id,
            target_cluster_id=source_cluster_id,
            snapshot_id=snapshot_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] indices: Name of an index to be restored. Multiple indexes are separated by
               commas (,). By default, all indexes are restored.You can use `*` to match multiple indexes. For example, if you
               specify `2018-06*`, then the data of the indexes with the prefix 2018-06 will be restored. The value can contain
               **0** to **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed:
               **"\\<|>/?**.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource. If omitted, the
               provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] rename_pattern: Rule for defining the indexes to be restored. The value can
               contain `0` to `1,024` characters. Uppercase letters, spaces, and the following special characters are not allowed:
               **"\\<|>/?**. Indexes that match this rule will be restored. The filtering condition must be a regular expression.
        :param pulumi.Input[_builtins.str] rename_replacement: Rule for renaming an index. The value can contain **0** to
               **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed: **"\\<|>/?**.
               For example, **restored_index_$1** indicates adding the **restored_index_** prefix to the names of all the restored
               indexes. The `rename_replacement` parameter takes effect only if rename_pattern has been enabled.
        :param pulumi.Input[_builtins.str] snapshot_id: Specifies the ID of the snapshot to be restored.
        :param pulumi.Input[_builtins.str] source_cluster_id: Specifies the source cluster ID.
        :param pulumi.Input[_builtins.str] target_cluster_id: Specifies the target cluster ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SnapshotRestoreArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages CSS cluster snapshot restore resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        target_cluster_id = config.require_object("targetClusterId")
        source_cluster_id = config.require_object("sourceClusterId")
        snapshot_id = config.require_object("snapshotId")
        test = huaweicloud.css.SnapshotRestore("test",
            source_cluster_id=target_cluster_id,
            target_cluster_id=source_cluster_id,
            snapshot_id=snapshot_id)
        ```

        :param str resource_name: The name of the resource.
        :param SnapshotRestoreArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnapshotRestoreArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 indices: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rename_pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 rename_replacement: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnapshotRestoreArgs.__new__(SnapshotRestoreArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["indices"] = indices
            __props__.__dict__["region"] = region
            __props__.__dict__["rename_pattern"] = rename_pattern
            __props__.__dict__["rename_replacement"] = rename_replacement
            if snapshot_id is None and not opts.urn:
                raise TypeError("Missing required property 'snapshot_id'")
            __props__.__dict__["snapshot_id"] = snapshot_id
            if source_cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_cluster_id'")
            __props__.__dict__["source_cluster_id"] = source_cluster_id
            if target_cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_cluster_id'")
            __props__.__dict__["target_cluster_id"] = target_cluster_id
        super(SnapshotRestore, __self__).__init__(
            'huaweicloud:Css/snapshotRestore:SnapshotRestore',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            indices: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            rename_pattern: Optional[pulumi.Input[_builtins.str]] = None,
            rename_replacement: Optional[pulumi.Input[_builtins.str]] = None,
            snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
            source_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            target_cluster_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SnapshotRestore':
        """
        Get an existing SnapshotRestore resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] indices: Name of an index to be restored. Multiple indexes are separated by
               commas (,). By default, all indexes are restored.You can use `*` to match multiple indexes. For example, if you
               specify `2018-06*`, then the data of the indexes with the prefix 2018-06 will be restored. The value can contain
               **0** to **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed:
               **"\\<|>/?**.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource. If omitted, the
               provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] rename_pattern: Rule for defining the indexes to be restored. The value can
               contain `0` to `1,024` characters. Uppercase letters, spaces, and the following special characters are not allowed:
               **"\\<|>/?**. Indexes that match this rule will be restored. The filtering condition must be a regular expression.
        :param pulumi.Input[_builtins.str] rename_replacement: Rule for renaming an index. The value can contain **0** to
               **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed: **"\\<|>/?**.
               For example, **restored_index_$1** indicates adding the **restored_index_** prefix to the names of all the restored
               indexes. The `rename_replacement` parameter takes effect only if rename_pattern has been enabled.
        :param pulumi.Input[_builtins.str] snapshot_id: Specifies the ID of the snapshot to be restored.
        :param pulumi.Input[_builtins.str] source_cluster_id: Specifies the source cluster ID.
        :param pulumi.Input[_builtins.str] target_cluster_id: Specifies the target cluster ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnapshotRestoreState.__new__(_SnapshotRestoreState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["indices"] = indices
        __props__.__dict__["region"] = region
        __props__.__dict__["rename_pattern"] = rename_pattern
        __props__.__dict__["rename_replacement"] = rename_replacement
        __props__.__dict__["snapshot_id"] = snapshot_id
        __props__.__dict__["source_cluster_id"] = source_cluster_id
        __props__.__dict__["target_cluster_id"] = target_cluster_id
        return SnapshotRestore(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def indices(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of an index to be restored. Multiple indexes are separated by
        commas (,). By default, all indexes are restored.You can use `*` to match multiple indexes. For example, if you
        specify `2018-06*`, then the data of the indexes with the prefix 2018-06 will be restored. The value can contain
        **0** to **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed:
        **"\\<|>/?**.
        """
        return pulumi.get(self, "indices")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The region in which to create the resource. If omitted, the
        provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="renamePattern")
    def rename_pattern(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Rule for defining the indexes to be restored. The value can
        contain `0` to `1,024` characters. Uppercase letters, spaces, and the following special characters are not allowed:
        **"\\<|>/?**. Indexes that match this rule will be restored. The filtering condition must be a regular expression.
        """
        return pulumi.get(self, "rename_pattern")

    @_builtins.property
    @pulumi.getter(name="renameReplacement")
    def rename_replacement(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Rule for renaming an index. The value can contain **0** to
        **1,024** characters. Uppercase letters, spaces, and the following special characters are not allowed: **"\\<|>/?**.
        For example, **restored_index_$1** indicates adding the **restored_index_** prefix to the names of all the restored
        indexes. The `rename_replacement` parameter takes effect only if rename_pattern has been enabled.
        """
        return pulumi.get(self, "rename_replacement")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the snapshot to be restored.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="sourceClusterId")
    def source_cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the source cluster ID.
        """
        return pulumi.get(self, "source_cluster_id")

    @_builtins.property
    @pulumi.getter(name="targetClusterId")
    def target_cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the target cluster ID.
        """
        return pulumi.get(self, "target_cluster_id")

