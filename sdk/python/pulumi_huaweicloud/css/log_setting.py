# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['LogSettingArgs', 'LogSetting']

@pulumi.input_type
class LogSettingArgs:
    def __init__(__self__, *,
                 agency: pulumi.Input[_builtins.str],
                 base_path: pulumi.Input[_builtins.str],
                 bucket: pulumi.Input[_builtins.str],
                 cluster_id: pulumi.Input[_builtins.str],
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LogSetting resource.
        :param pulumi.Input[_builtins.str] agency: Specifies the agency name. You can create an agency to allow CSS to
               call other cloud services.
        :param pulumi.Input[_builtins.str] base_path: Specifies the storage path of backed up logs in the OBS bucket.
        :param pulumi.Input[_builtins.str] bucket: Specifies the name of the OBS bucket for storing logs.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the cluster whose log function you want to enable.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] period: Specifies the backup start time. Format: GMT.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "agency", agency)
        pulumi.set(__self__, "base_path", base_path)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "cluster_id", cluster_id)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the agency name. You can create an agency to allow CSS to
        call other cloud services.
        """
        return pulumi.get(self, "agency")

    @agency.setter
    def agency(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "agency", value)

    @_builtins.property
    @pulumi.getter(name="basePath")
    def base_path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the storage path of backed up logs in the OBS bucket.
        """
        return pulumi.get(self, "base_path")

    @base_path.setter
    def base_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "base_path", value)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the OBS bucket for storing logs.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies ID of the cluster whose log function you want to enable.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backup start time. Format: GMT.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LogSettingState:
    def __init__(__self__, *,
                 agency: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 base_path: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_switch: Optional[pulumi.Input[_builtins.bool]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogSetting resources.
        :param pulumi.Input[_builtins.str] agency: Specifies the agency name. You can create an agency to allow CSS to
               call other cloud services.
        :param pulumi.Input[_builtins.bool] auto_enabled: Whether to enable automatic backup.
        :param pulumi.Input[_builtins.str] base_path: Specifies the storage path of backed up logs in the OBS bucket.
        :param pulumi.Input[_builtins.str] bucket: Specifies the name of the OBS bucket for storing logs.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the cluster whose log function you want to enable.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] log_switch: Whether to enable the log function.
        :param pulumi.Input[_builtins.str] period: Specifies the backup start time. Format: GMT.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The update time.
        """
        if agency is not None:
            pulumi.set(__self__, "agency", agency)
        if auto_enabled is not None:
            pulumi.set(__self__, "auto_enabled", auto_enabled)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if log_switch is not None:
            pulumi.set(__self__, "log_switch", log_switch)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the agency name. You can create an agency to allow CSS to
        call other cloud services.
        """
        return pulumi.get(self, "agency")

    @agency.setter
    def agency(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency", value)

    @_builtins.property
    @pulumi.getter(name="autoEnabled")
    def auto_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable automatic backup.
        """
        return pulumi.get(self, "auto_enabled")

    @auto_enabled.setter
    def auto_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_enabled", value)

    @_builtins.property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the storage path of backed up logs in the OBS bucket.
        """
        return pulumi.get(self, "base_path")

    @base_path.setter
    def base_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_path", value)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the OBS bucket for storing logs.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies ID of the cluster whose log function you want to enable.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="logSwitch")
    def log_switch(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable the log function.
        """
        return pulumi.get(self, "log_switch")

    @log_switch.setter
    def log_switch(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "log_switch", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backup start time. Format: GMT.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Css/logSetting:LogSetting")
class LogSetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency: Optional[pulumi.Input[_builtins.str]] = None,
                 base_path: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages CSS log setting resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        agency = config.require_object("agency")
        base_path = config.require_object("basePath")
        bucket = config.require_object("bucket")
        test = huaweicloud.css.LogSetting("test",
            cluster_id=cluster_id,
            agency=agency,
            base_path=base_path,
            bucket=bucket)
        ```

        ## Import

        The CSS log setting can be imported using `cluster_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/logSetting:LogSetting test <cluster_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency: Specifies the agency name. You can create an agency to allow CSS to
               call other cloud services.
        :param pulumi.Input[_builtins.str] base_path: Specifies the storage path of backed up logs in the OBS bucket.
        :param pulumi.Input[_builtins.str] bucket: Specifies the name of the OBS bucket for storing logs.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the cluster whose log function you want to enable.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] period: Specifies the backup start time. Format: GMT.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogSettingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages CSS log setting resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        agency = config.require_object("agency")
        base_path = config.require_object("basePath")
        bucket = config.require_object("bucket")
        test = huaweicloud.css.LogSetting("test",
            cluster_id=cluster_id,
            agency=agency,
            base_path=base_path,
            bucket=bucket)
        ```

        ## Import

        The CSS log setting can be imported using `cluster_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/logSetting:LogSetting test <cluster_id>
        ```

        :param str resource_name: The name of the resource.
        :param LogSettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogSettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency: Optional[pulumi.Input[_builtins.str]] = None,
                 base_path: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogSettingArgs.__new__(LogSettingArgs)

            if agency is None and not opts.urn:
                raise TypeError("Missing required property 'agency'")
            __props__.__dict__["agency"] = agency
            if base_path is None and not opts.urn:
                raise TypeError("Missing required property 'base_path'")
            __props__.__dict__["base_path"] = base_path
            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["period"] = period
            __props__.__dict__["region"] = region
            __props__.__dict__["auto_enabled"] = None
            __props__.__dict__["log_switch"] = None
            __props__.__dict__["updated_at"] = None
        super(LogSetting, __self__).__init__(
            'huaweicloud:Css/logSetting:LogSetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agency: Optional[pulumi.Input[_builtins.str]] = None,
            auto_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            base_path: Optional[pulumi.Input[_builtins.str]] = None,
            bucket: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_switch: Optional[pulumi.Input[_builtins.bool]] = None,
            period: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogSetting':
        """
        Get an existing LogSetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency: Specifies the agency name. You can create an agency to allow CSS to
               call other cloud services.
        :param pulumi.Input[_builtins.bool] auto_enabled: Whether to enable automatic backup.
        :param pulumi.Input[_builtins.str] base_path: Specifies the storage path of backed up logs in the OBS bucket.
        :param pulumi.Input[_builtins.str] bucket: Specifies the name of the OBS bucket for storing logs.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the cluster whose log function you want to enable.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] log_switch: Whether to enable the log function.
        :param pulumi.Input[_builtins.str] period: Specifies the backup start time. Format: GMT.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogSettingState.__new__(_LogSettingState)

        __props__.__dict__["agency"] = agency
        __props__.__dict__["auto_enabled"] = auto_enabled
        __props__.__dict__["base_path"] = base_path
        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["log_switch"] = log_switch
        __props__.__dict__["period"] = period
        __props__.__dict__["region"] = region
        __props__.__dict__["updated_at"] = updated_at
        return LogSetting(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the agency name. You can create an agency to allow CSS to
        call other cloud services.
        """
        return pulumi.get(self, "agency")

    @_builtins.property
    @pulumi.getter(name="autoEnabled")
    def auto_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to enable automatic backup.
        """
        return pulumi.get(self, "auto_enabled")

    @_builtins.property
    @pulumi.getter(name="basePath")
    def base_path(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the storage path of backed up logs in the OBS bucket.
        """
        return pulumi.get(self, "base_path")

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the OBS bucket for storing logs.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies ID of the cluster whose log function you want to enable.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="logSwitch")
    def log_switch(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to enable the log function.
        """
        return pulumi.get(self, "log_switch")

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the backup start time. Format: GMT.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

