# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogstashPipelineArgs', 'LogstashPipeline']

@pulumi.input_type
class LogstashPipelineArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 names: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 keep_alive: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LogstashPipeline resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] names: Specifies the configuration file names of the CSS logstash cluster pipeline.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] keep_alive: Specifies whether keep alive. The value can be **true** and **false**.
               Defaults to **false**. During hot start, the value of keep alive of existing pipelines in the cluster needs to
               be consistent.
               Changing this creates a new resource.
               
               > **NOTE:** Keepalive can be enabled for long-running services. Enabling it will configure a daemon process
               on each node. If the Logstash service is faulty, the daemon process will rectify the fault and restart the
               service. Do not enable it for short running services, or your migration tasks may fail due to lack of source data.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "names", names)
        if keep_alive is not None:
            pulumi.set(__self__, "keep_alive", keep_alive)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies ID of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def names(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the configuration file names of the CSS logstash cluster pipeline.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "names", value)

    @_builtins.property
    @pulumi.getter(name="keepAlive")
    def keep_alive(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether keep alive. The value can be **true** and **false**.
        Defaults to **false**. During hot start, the value of keep alive of existing pipelines in the cluster needs to
        be consistent.
        Changing this creates a new resource.

        > **NOTE:** Keepalive can be enabled for long-running services. Enabling it will configure a daemon process
        on each node. If the Logstash service is faulty, the daemon process will rectify the fault and restart the
        service. Do not enable it for short running services, or your migration tasks may fail due to lack of source data.
        """
        return pulumi.get(self, "keep_alive")

    @keep_alive.setter
    def keep_alive(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keep_alive", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LogstashPipelineState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_alive: Optional[pulumi.Input[_builtins.bool]] = None,
                 names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pipelines: Optional[pulumi.Input[Sequence[pulumi.Input['LogstashPipelinePipelineArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogstashPipeline resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] keep_alive: Specifies whether keep alive. The value can be **true** and **false**.
               Defaults to **false**. During hot start, the value of keep alive of existing pipelines in the cluster needs to
               be consistent.
               Changing this creates a new resource.
               
               > **NOTE:** Keepalive can be enabled for long-running services. Enabling it will configure a daemon process
               on each node. If the Logstash service is faulty, the daemon process will rectify the fault and restart the
               service. Do not enable it for short running services, or your migration tasks may fail due to lack of source data.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] names: Specifies the configuration file names of the CSS logstash cluster pipeline.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['LogstashPipelinePipelineArgs']]] pipelines: The pipeline list of the CSS logstash cluster.
               The pipelines structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if keep_alive is not None:
            pulumi.set(__self__, "keep_alive", keep_alive)
        if names is not None:
            pulumi.set(__self__, "names", names)
        if pipelines is not None:
            pulumi.set(__self__, "pipelines", pipelines)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies ID of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="keepAlive")
    def keep_alive(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether keep alive. The value can be **true** and **false**.
        Defaults to **false**. During hot start, the value of keep alive of existing pipelines in the cluster needs to
        be consistent.
        Changing this creates a new resource.

        > **NOTE:** Keepalive can be enabled for long-running services. Enabling it will configure a daemon process
        on each node. If the Logstash service is faulty, the daemon process will rectify the fault and restart the
        service. Do not enable it for short running services, or your migration tasks may fail due to lack of source data.
        """
        return pulumi.get(self, "keep_alive")

    @keep_alive.setter
    def keep_alive(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keep_alive", value)

    @_builtins.property
    @pulumi.getter
    def names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the configuration file names of the CSS logstash cluster pipeline.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "names", value)

    @_builtins.property
    @pulumi.getter
    def pipelines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogstashPipelinePipelineArgs']]]]:
        """
        The pipeline list of the CSS logstash cluster.
        The pipelines structure is documented below.
        """
        return pulumi.get(self, "pipelines")

    @pipelines.setter
    def pipelines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogstashPipelinePipelineArgs']]]]):
        pulumi.set(self, "pipelines", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Css/logstashPipeline:LogstashPipeline")
class LogstashPipeline(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_alive: Optional[pulumi.Input[_builtins.bool]] = None,
                 names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages CSS logstash cluster pipeline resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        config_file_names = config.require_object("configFileNames")
        test = huaweicloud.css.LogstashPipeline("test",
            cluster_id=cluster_id,
            names=config_file_names)
        ```

        ## Import

        The CSS logstash cluster pipeline can be imported using `cluster_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/logstashPipeline:LogstashPipeline test <cluster_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] keep_alive: Specifies whether keep alive. The value can be **true** and **false**.
               Defaults to **false**. During hot start, the value of keep alive of existing pipelines in the cluster needs to
               be consistent.
               Changing this creates a new resource.
               
               > **NOTE:** Keepalive can be enabled for long-running services. Enabling it will configure a daemon process
               on each node. If the Logstash service is faulty, the daemon process will rectify the fault and restart the
               service. Do not enable it for short running services, or your migration tasks may fail due to lack of source data.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] names: Specifies the configuration file names of the CSS logstash cluster pipeline.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogstashPipelineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages CSS logstash cluster pipeline resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        config_file_names = config.require_object("configFileNames")
        test = huaweicloud.css.LogstashPipeline("test",
            cluster_id=cluster_id,
            names=config_file_names)
        ```

        ## Import

        The CSS logstash cluster pipeline can be imported using `cluster_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/logstashPipeline:LogstashPipeline test <cluster_id>
        ```

        :param str resource_name: The name of the resource.
        :param LogstashPipelineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogstashPipelineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_alive: Optional[pulumi.Input[_builtins.bool]] = None,
                 names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogstashPipelineArgs.__new__(LogstashPipelineArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["keep_alive"] = keep_alive
            if names is None and not opts.urn:
                raise TypeError("Missing required property 'names'")
            __props__.__dict__["names"] = names
            __props__.__dict__["region"] = region
            __props__.__dict__["pipelines"] = None
        super(LogstashPipeline, __self__).__init__(
            'huaweicloud:Css/logstashPipeline:LogstashPipeline',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            keep_alive: Optional[pulumi.Input[_builtins.bool]] = None,
            names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pipelines: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogstashPipelinePipelineArgs', 'LogstashPipelinePipelineArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogstashPipeline':
        """
        Get an existing LogstashPipeline resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] keep_alive: Specifies whether keep alive. The value can be **true** and **false**.
               Defaults to **false**. During hot start, the value of keep alive of existing pipelines in the cluster needs to
               be consistent.
               Changing this creates a new resource.
               
               > **NOTE:** Keepalive can be enabled for long-running services. Enabling it will configure a daemon process
               on each node. If the Logstash service is faulty, the daemon process will rectify the fault and restart the
               service. Do not enable it for short running services, or your migration tasks may fail due to lack of source data.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] names: Specifies the configuration file names of the CSS logstash cluster pipeline.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogstashPipelinePipelineArgs', 'LogstashPipelinePipelineArgsDict']]]] pipelines: The pipeline list of the CSS logstash cluster.
               The pipelines structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogstashPipelineState.__new__(_LogstashPipelineState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["keep_alive"] = keep_alive
        __props__.__dict__["names"] = names
        __props__.__dict__["pipelines"] = pipelines
        __props__.__dict__["region"] = region
        return LogstashPipeline(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies ID of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="keepAlive")
    def keep_alive(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether keep alive. The value can be **true** and **false**.
        Defaults to **false**. During hot start, the value of keep alive of existing pipelines in the cluster needs to
        be consistent.
        Changing this creates a new resource.

        > **NOTE:** Keepalive can be enabled for long-running services. Enabling it will configure a daemon process
        on each node. If the Logstash service is faulty, the daemon process will rectify the fault and restart the
        service. Do not enable it for short running services, or your migration tasks may fail due to lack of source data.
        """
        return pulumi.get(self, "keep_alive")

    @_builtins.property
    @pulumi.getter
    def names(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the configuration file names of the CSS logstash cluster pipeline.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "names")

    @_builtins.property
    @pulumi.getter
    def pipelines(self) -> pulumi.Output[Sequence['outputs.LogstashPipelinePipeline']]:
        """
        The pipeline list of the CSS logstash cluster.
        The pipelines structure is documented below.
        """
        return pulumi.get(self, "pipelines")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

