# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['LogstashCustomTemplateArgs', 'LogstashCustomTemplate']

@pulumi.input_type
class LogstashCustomTemplateArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 configuration_name: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LogstashCustomTemplate resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] configuration_name: Specifies the name of the configuration file you want to
               add to the custom template.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the custom template.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the custom template.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "configuration_name", configuration_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the configuration file you want to
        add to the custom template.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "configuration_name")

    @configuration_name.setter
    def configuration_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "configuration_name", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the custom template.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the custom template.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LogstashCustomTemplateState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 conf_content: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration_name: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogstashCustomTemplate resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] conf_content: The configuration file content of the custom template.
        :param pulumi.Input[_builtins.str] configuration_name: Specifies the name of the configuration file you want to
               add to the custom template.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the custom template.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the custom template.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] template_id: The ID of the custom template.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if conf_content is not None:
            pulumi.set(__self__, "conf_content", conf_content)
        if configuration_name is not None:
            pulumi.set(__self__, "configuration_name", configuration_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="confContent")
    def conf_content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The configuration file content of the custom template.
        """
        return pulumi.get(self, "conf_content")

    @conf_content.setter
    def conf_content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "conf_content", value)

    @_builtins.property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the configuration file you want to
        add to the custom template.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "configuration_name")

    @configuration_name.setter
    def configuration_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "configuration_name", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the custom template.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the custom template.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the custom template.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)


@pulumi.type_token("huaweicloud:Css/logstashCustomTemplate:LogstashCustomTemplate")
class LogstashCustomTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration_name: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages CSS logstash custom template within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        name = config.require_object("name")
        configuration_name = config.require_object("configurationName")
        test = huaweicloud.css.LogstashCustomTemplate("test",
            cluster_id=cluster_id,
            name=name,
            configuration_name=configuration_name)
        ```

        ## Import

        The CSS logstash custom template can be imported using `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/logstashCustomTemplate:LogstashCustomTemplate test <name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `cluster_id`, `configuration_name`.

        It is generally recommended running `pulumi preview` after importing the CSS logstash custom template.

        You can then decide if changes should be applied to the CSS logstash custom template,

        or the CSS logstash custom template definition should be updated to align with the CSS logstash custom template.

        Also you can ignore changes as below.

        hcl

        resource "huaweicloud_css_logstash_custom_template" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              cluster_id, configuration_name,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] configuration_name: Specifies the name of the configuration file you want to
               add to the custom template.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the custom template.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the custom template.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogstashCustomTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages CSS logstash custom template within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        name = config.require_object("name")
        configuration_name = config.require_object("configurationName")
        test = huaweicloud.css.LogstashCustomTemplate("test",
            cluster_id=cluster_id,
            name=name,
            configuration_name=configuration_name)
        ```

        ## Import

        The CSS logstash custom template can be imported using `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/logstashCustomTemplate:LogstashCustomTemplate test <name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `cluster_id`, `configuration_name`.

        It is generally recommended running `pulumi preview` after importing the CSS logstash custom template.

        You can then decide if changes should be applied to the CSS logstash custom template,

        or the CSS logstash custom template definition should be updated to align with the CSS logstash custom template.

        Also you can ignore changes as below.

        hcl

        resource "huaweicloud_css_logstash_custom_template" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              cluster_id, configuration_name,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param LogstashCustomTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogstashCustomTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration_name: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogstashCustomTemplateArgs.__new__(LogstashCustomTemplateArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if configuration_name is None and not opts.urn:
                raise TypeError("Missing required property 'configuration_name'")
            __props__.__dict__["configuration_name"] = configuration_name
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["conf_content"] = None
            __props__.__dict__["template_id"] = None
        super(LogstashCustomTemplate, __self__).__init__(
            'huaweicloud:Css/logstashCustomTemplate:LogstashCustomTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            conf_content: Optional[pulumi.Input[_builtins.str]] = None,
            configuration_name: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            template_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogstashCustomTemplate':
        """
        Get an existing LogstashCustomTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] conf_content: The configuration file content of the custom template.
        :param pulumi.Input[_builtins.str] configuration_name: Specifies the name of the configuration file you want to
               add to the custom template.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the custom template.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the custom template.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] template_id: The ID of the custom template.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogstashCustomTemplateState.__new__(_LogstashCustomTemplateState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["conf_content"] = conf_content
        __props__.__dict__["configuration_name"] = configuration_name
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["template_id"] = template_id
        return LogstashCustomTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="confContent")
    def conf_content(self) -> pulumi.Output[_builtins.str]:
        """
        The configuration file content of the custom template.
        """
        return pulumi.get(self, "conf_content")

    @_builtins.property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the configuration file you want to
        add to the custom template.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "configuration_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the custom template.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the custom template.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the custom template.
        """
        return pulumi.get(self, "template_id")

