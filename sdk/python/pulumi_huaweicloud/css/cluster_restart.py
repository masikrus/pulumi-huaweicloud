# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ClusterRestartArgs', 'ClusterRestart']

@pulumi.input_type
class ClusterRestartArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 is_rolling: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ClusterRestart resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the operation type of the CSS cluster restart.
               The value can be **role** or **node**. The value can only be **role** when the `is_rolling` is **true**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the value under the operation type. If the operation
               role is node, the value is the node ID. If the operation role is role, the value is one or multiple node
               types (such as **ess**, **ess-master**, **ess-client**, **ess-cold**, and **all**). Use commas (,) to
               separate multiple node types.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] is_rolling: Specifies whether to roll restart.
               Changing this creates a new resource.
               
               > **NOTE:** Rolling restart is only supported when the number of nodes in the cluster (including Master nodes,
               Client nodes, and cold data nodes) is greater than 3.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if is_rolling is not None:
            pulumi.set(__self__, "is_rolling", is_rolling)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the CSS cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operation type of the CSS cluster restart.
        The value can be **role** or **node**. The value can only be **role** when the `is_rolling` is **true**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value under the operation type. If the operation
        role is node, the value is the node ID. If the operation role is role, the value is one or multiple node
        types (such as **ess**, **ess-master**, **ess-client**, **ess-cold**, and **all**). Use commas (,) to
        separate multiple node types.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="isRolling")
    def is_rolling(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to roll restart.
        Changing this creates a new resource.

        > **NOTE:** Rolling restart is only supported when the number of nodes in the cluster (including Master nodes,
        Client nodes, and cold data nodes) is greater than 3.
        """
        return pulumi.get(self, "is_rolling")

    @is_rolling.setter
    def is_rolling(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_rolling", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ClusterRestartState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_rolling: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ClusterRestart resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] is_rolling: Specifies whether to roll restart.
               Changing this creates a new resource.
               
               > **NOTE:** Rolling restart is only supported when the number of nodes in the cluster (including Master nodes,
               Client nodes, and cold data nodes) is greater than 3.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the operation type of the CSS cluster restart.
               The value can be **role** or **node**. The value can only be **role** when the `is_rolling` is **true**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the value under the operation type. If the operation
               role is node, the value is the node ID. If the operation role is role, the value is one or multiple node
               types (such as **ess**, **ess-master**, **ess-client**, **ess-cold**, and **all**). Use commas (,) to
               separate multiple node types.
               Changing this creates a new resource.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if is_rolling is not None:
            pulumi.set(__self__, "is_rolling", is_rolling)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the CSS cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="isRolling")
    def is_rolling(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to roll restart.
        Changing this creates a new resource.

        > **NOTE:** Rolling restart is only supported when the number of nodes in the cluster (including Master nodes,
        Client nodes, and cold data nodes) is greater than 3.
        """
        return pulumi.get(self, "is_rolling")

    @is_rolling.setter
    def is_rolling(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_rolling", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operation type of the CSS cluster restart.
        The value can be **role** or **node**. The value can only be **role** when the `is_rolling` is **true**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value under the operation type. If the operation
        role is node, the value is the node ID. If the operation role is role, the value is one or multiple node
        types (such as **ess**, **ess-master**, **ess-client**, **ess-cold**, and **all**). Use commas (,) to
        separate multiple node types.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.type_token("huaweicloud:Css/clusterRestart:ClusterRestart")
class ClusterRestart(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_rolling: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages CSS cluster restart resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.css.ClusterRestart("test",
            cluster_id=cluster_id,
            type="role",
            value="ess")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] is_rolling: Specifies whether to roll restart.
               Changing this creates a new resource.
               
               > **NOTE:** Rolling restart is only supported when the number of nodes in the cluster (including Master nodes,
               Client nodes, and cold data nodes) is greater than 3.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the operation type of the CSS cluster restart.
               The value can be **role** or **node**. The value can only be **role** when the `is_rolling` is **true**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the value under the operation type. If the operation
               role is node, the value is the node ID. If the operation role is role, the value is one or multiple node
               types (such as **ess**, **ess-master**, **ess-client**, **ess-cold**, and **all**). Use commas (,) to
               separate multiple node types.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterRestartArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages CSS cluster restart resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.css.ClusterRestart("test",
            cluster_id=cluster_id,
            type="role",
            value="ess")
        ```

        :param str resource_name: The name of the resource.
        :param ClusterRestartArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterRestartArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_rolling: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterRestartArgs.__new__(ClusterRestartArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["is_rolling"] = is_rolling
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
        super(ClusterRestart, __self__).__init__(
            'huaweicloud:Css/clusterRestart:ClusterRestart',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            is_rolling: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            value: Optional[pulumi.Input[_builtins.str]] = None) -> 'ClusterRestart':
        """
        Get an existing ClusterRestart resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] is_rolling: Specifies whether to roll restart.
               Changing this creates a new resource.
               
               > **NOTE:** Rolling restart is only supported when the number of nodes in the cluster (including Master nodes,
               Client nodes, and cold data nodes) is greater than 3.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the operation type of the CSS cluster restart.
               The value can be **role** or **node**. The value can only be **role** when the `is_rolling` is **true**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the value under the operation type. If the operation
               role is node, the value is the node ID. If the operation role is role, the value is one or multiple node
               types (such as **ess**, **ess-master**, **ess-client**, **ess-cold**, and **all**). Use commas (,) to
               separate multiple node types.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterRestartState.__new__(_ClusterRestartState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["is_rolling"] = is_rolling
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["value"] = value
        return ClusterRestart(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the CSS cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="isRolling")
    def is_rolling(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to roll restart.
        Changing this creates a new resource.

        > **NOTE:** Rolling restart is only supported when the number of nodes in the cluster (including Master nodes,
        Client nodes, and cold data nodes) is greater than 3.
        """
        return pulumi.get(self, "is_rolling")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the operation type of the CSS cluster restart.
        The value can be **role** or **node**. The value can only be **role** when the `is_rolling` is **true**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the value under the operation type. If the operation
        role is node, the value is the node ID. If the operation role is role, the value is one or multiple node
        types (such as **ess**, **ess-master**, **ess-client**, **ess-cold**, and **all**). Use commas (,) to
        separate multiple node types.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "value")

