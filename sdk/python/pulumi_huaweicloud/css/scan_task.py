# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ScanTaskArgs', 'ScanTask']

@pulumi.input_type
class ScanTaskArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 alarm: Optional[pulumi.Input['ScanTaskAlarmArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ScanTask resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS cluster.
               Changing this creates a new resource.
        :param pulumi.Input['ScanTaskAlarmArgs'] alarm: Specifies sending SMN alarm message configuration
               after the cluster scan task is completed.
               Changing this creates a new resource.
               The alarm structure is documented below.
               
               <a name="css_scan_task_alarm"></a>
               The `alarm` block supports:
        :param pulumi.Input[_builtins.str] description: Specifies the description of the cluster scan task.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the cluster scan task.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        if alarm is not None:
            pulumi.set(__self__, "alarm", alarm)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies ID of the CSS cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def alarm(self) -> Optional[pulumi.Input['ScanTaskAlarmArgs']]:
        """
        Specifies sending SMN alarm message configuration
        after the cluster scan task is completed.
        Changing this creates a new resource.
        The alarm structure is documented below.

        <a name="css_scan_task_alarm"></a>
        The `alarm` block supports:
        """
        return pulumi.get(self, "alarm")

    @alarm.setter
    def alarm(self, value: Optional[pulumi.Input['ScanTaskAlarmArgs']]):
        pulumi.set(self, "alarm", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the cluster scan task.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the cluster scan task.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ScanTaskState:
    def __init__(__self__, *,
                 alarm: Optional[pulumi.Input['ScanTaskAlarmArgs']] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 smn_fail_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 smn_status: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 summaries: Optional[pulumi.Input[Sequence[pulumi.Input['ScanTaskSummaryArgs']]]] = None,
                 task_risks: Optional[pulumi.Input[Sequence[pulumi.Input['ScanTaskTaskRiskArgs']]]] = None):
        """
        Input properties used for looking up and filtering ScanTask resources.
        :param pulumi.Input['ScanTaskAlarmArgs'] alarm: Specifies sending SMN alarm message configuration
               after the cluster scan task is completed.
               Changing this creates a new resource.
               The alarm structure is documented below.
               
               <a name="css_scan_task_alarm"></a>
               The `alarm` block supports:
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the cluster scan task.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the cluster scan task.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the cluster scan task.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] smn_fail_reason: The reason for failure in sending SMN alarm.
        :param pulumi.Input[_builtins.str] smn_status: The SMN alarm sending status after the cluster scan task is completed.
        :param pulumi.Input[_builtins.str] status: The execution status of the cluster scan task.
        :param pulumi.Input[Sequence[pulumi.Input['ScanTaskSummaryArgs']]] summaries: The risk summary after the cluster scan task is completed.
               The summary structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ScanTaskTaskRiskArgs']]] task_risks: The risk found by the cluster scan task.
               The task_risks structure is documented below.
        """
        if alarm is not None:
            pulumi.set(__self__, "alarm", alarm)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if smn_fail_reason is not None:
            pulumi.set(__self__, "smn_fail_reason", smn_fail_reason)
        if smn_status is not None:
            pulumi.set(__self__, "smn_status", smn_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if summaries is not None:
            pulumi.set(__self__, "summaries", summaries)
        if task_risks is not None:
            pulumi.set(__self__, "task_risks", task_risks)

    @_builtins.property
    @pulumi.getter
    def alarm(self) -> Optional[pulumi.Input['ScanTaskAlarmArgs']]:
        """
        Specifies sending SMN alarm message configuration
        after the cluster scan task is completed.
        Changing this creates a new resource.
        The alarm structure is documented below.

        <a name="css_scan_task_alarm"></a>
        The `alarm` block supports:
        """
        return pulumi.get(self, "alarm")

    @alarm.setter
    def alarm(self, value: Optional[pulumi.Input['ScanTaskAlarmArgs']]):
        pulumi.set(self, "alarm", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies ID of the CSS cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the cluster scan task.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the cluster scan task.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the cluster scan task.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="smnFailReason")
    def smn_fail_reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The reason for failure in sending SMN alarm.
        """
        return pulumi.get(self, "smn_fail_reason")

    @smn_fail_reason.setter
    def smn_fail_reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "smn_fail_reason", value)

    @_builtins.property
    @pulumi.getter(name="smnStatus")
    def smn_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The SMN alarm sending status after the cluster scan task is completed.
        """
        return pulumi.get(self, "smn_status")

    @smn_status.setter
    def smn_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "smn_status", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The execution status of the cluster scan task.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def summaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScanTaskSummaryArgs']]]]:
        """
        The risk summary after the cluster scan task is completed.
        The summary structure is documented below.
        """
        return pulumi.get(self, "summaries")

    @summaries.setter
    def summaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScanTaskSummaryArgs']]]]):
        pulumi.set(self, "summaries", value)

    @_builtins.property
    @pulumi.getter(name="taskRisks")
    def task_risks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScanTaskTaskRiskArgs']]]]:
        """
        The risk found by the cluster scan task.
        The task_risks structure is documented below.
        """
        return pulumi.get(self, "task_risks")

    @task_risks.setter
    def task_risks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScanTaskTaskRiskArgs']]]]):
        pulumi.set(self, "task_risks", value)


@pulumi.type_token("huaweicloud:Css/scanTask:ScanTask")
class ScanTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm: Optional[pulumi.Input[Union['ScanTaskAlarmArgs', 'ScanTaskAlarmArgsDict']]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CSS cluster scan task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        scan_task_name = config.require_object("scanTaskName")
        test = huaweicloud.css.ScanTask("test",
            cluster_id=cluster_id,
            name=scan_task_name)
        ```

        ## Import

        The CSS cluster scan task can be imported using `cluster_id` and `name` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/scanTask:ScanTask test <cluster_id>/<name>
        ```

        Note that the imported state may not be identical to your resource definition, due to the attribute missing from the

        API response. The missing attribute is: `alarm`.

        It is generally recommended running `pulumi preview` after importing a scan task.

        You can then decide if changes should be applied to the scan task, or the resource definition should be updated to align

        with the scan task. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_css_scan_task" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              alarm,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ScanTaskAlarmArgs', 'ScanTaskAlarmArgsDict']] alarm: Specifies sending SMN alarm message configuration
               after the cluster scan task is completed.
               Changing this creates a new resource.
               The alarm structure is documented below.
               
               <a name="css_scan_task_alarm"></a>
               The `alarm` block supports:
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the cluster scan task.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the cluster scan task.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScanTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CSS cluster scan task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        scan_task_name = config.require_object("scanTaskName")
        test = huaweicloud.css.ScanTask("test",
            cluster_id=cluster_id,
            name=scan_task_name)
        ```

        ## Import

        The CSS cluster scan task can be imported using `cluster_id` and `name` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/scanTask:ScanTask test <cluster_id>/<name>
        ```

        Note that the imported state may not be identical to your resource definition, due to the attribute missing from the

        API response. The missing attribute is: `alarm`.

        It is generally recommended running `pulumi preview` after importing a scan task.

        You can then decide if changes should be applied to the scan task, or the resource definition should be updated to align

        with the scan task. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_css_scan_task" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              alarm,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ScanTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScanTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm: Optional[pulumi.Input[Union['ScanTaskAlarmArgs', 'ScanTaskAlarmArgsDict']]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScanTaskArgs.__new__(ScanTaskArgs)

            __props__.__dict__["alarm"] = alarm
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["created_at"] = None
            __props__.__dict__["smn_fail_reason"] = None
            __props__.__dict__["smn_status"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["summaries"] = None
            __props__.__dict__["task_risks"] = None
        super(ScanTask, __self__).__init__(
            'huaweicloud:Css/scanTask:ScanTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alarm: Optional[pulumi.Input[Union['ScanTaskAlarmArgs', 'ScanTaskAlarmArgsDict']]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            smn_fail_reason: Optional[pulumi.Input[_builtins.str]] = None,
            smn_status: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            summaries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScanTaskSummaryArgs', 'ScanTaskSummaryArgsDict']]]]] = None,
            task_risks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScanTaskTaskRiskArgs', 'ScanTaskTaskRiskArgsDict']]]]] = None) -> 'ScanTask':
        """
        Get an existing ScanTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ScanTaskAlarmArgs', 'ScanTaskAlarmArgsDict']] alarm: Specifies sending SMN alarm message configuration
               after the cluster scan task is completed.
               Changing this creates a new resource.
               The alarm structure is documented below.
               
               <a name="css_scan_task_alarm"></a>
               The `alarm` block supports:
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the cluster scan task.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the cluster scan task.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the cluster scan task.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] smn_fail_reason: The reason for failure in sending SMN alarm.
        :param pulumi.Input[_builtins.str] smn_status: The SMN alarm sending status after the cluster scan task is completed.
        :param pulumi.Input[_builtins.str] status: The execution status of the cluster scan task.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ScanTaskSummaryArgs', 'ScanTaskSummaryArgsDict']]]] summaries: The risk summary after the cluster scan task is completed.
               The summary structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ScanTaskTaskRiskArgs', 'ScanTaskTaskRiskArgsDict']]]] task_risks: The risk found by the cluster scan task.
               The task_risks structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScanTaskState.__new__(_ScanTaskState)

        __props__.__dict__["alarm"] = alarm
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["smn_fail_reason"] = smn_fail_reason
        __props__.__dict__["smn_status"] = smn_status
        __props__.__dict__["status"] = status
        __props__.__dict__["summaries"] = summaries
        __props__.__dict__["task_risks"] = task_risks
        return ScanTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def alarm(self) -> pulumi.Output[Optional['outputs.ScanTaskAlarm']]:
        """
        Specifies sending SMN alarm message configuration
        after the cluster scan task is completed.
        Changing this creates a new resource.
        The alarm structure is documented below.

        <a name="css_scan_task_alarm"></a>
        The `alarm` block supports:
        """
        return pulumi.get(self, "alarm")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies ID of the CSS cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the cluster scan task.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the cluster scan task.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the cluster scan task.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="smnFailReason")
    def smn_fail_reason(self) -> pulumi.Output[_builtins.str]:
        """
        The reason for failure in sending SMN alarm.
        """
        return pulumi.get(self, "smn_fail_reason")

    @_builtins.property
    @pulumi.getter(name="smnStatus")
    def smn_status(self) -> pulumi.Output[_builtins.str]:
        """
        The SMN alarm sending status after the cluster scan task is completed.
        """
        return pulumi.get(self, "smn_status")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The execution status of the cluster scan task.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def summaries(self) -> pulumi.Output[Sequence['outputs.ScanTaskSummary']]:
        """
        The risk summary after the cluster scan task is completed.
        The summary structure is documented below.
        """
        return pulumi.get(self, "summaries")

    @_builtins.property
    @pulumi.getter(name="taskRisks")
    def task_risks(self) -> pulumi.Output[Sequence['outputs.ScanTaskTaskRisk']]:
        """
        The risk found by the cluster scan task.
        The task_risks structure is documented below.
        """
        return pulumi.get(self, "task_risks")

