# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EsCoreUpgradeArgs', 'EsCoreUpgrade']

@pulumi.input_type
class EsCoreUpgradeArgs:
    def __init__(__self__, *,
                 agency: pulumi.Input[_builtins.str],
                 cluster_id: pulumi.Input[_builtins.str],
                 indices_backup_check: pulumi.Input[_builtins.bool],
                 target_image_id: pulumi.Input[_builtins.str],
                 upgrade_type: pulumi.Input[_builtins.str],
                 cluster_load_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EsCoreUpgrade resource.
        :param pulumi.Input[_builtins.str] agency: Specifies the IAM agency used to access CSS.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
        :param pulumi.Input[_builtins.bool] indices_backup_check: Specifies whether to perform backup verification.
        :param pulumi.Input[_builtins.str] target_image_id: Specifies the upgradeable target image ID.
        :param pulumi.Input[_builtins.str] upgrade_type: Specifies the upgrade type.
               The value can be **same**, **cross** and **crossEngine**.
        :param pulumi.Input[_builtins.bool] cluster_load_check: Whether to verify the load. Default is **true**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "agency", agency)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "indices_backup_check", indices_backup_check)
        pulumi.set(__self__, "target_image_id", target_image_id)
        pulumi.set(__self__, "upgrade_type", upgrade_type)
        if cluster_load_check is not None:
            pulumi.set(__self__, "cluster_load_check", cluster_load_check)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the IAM agency used to access CSS.
        """
        return pulumi.get(self, "agency")

    @agency.setter
    def agency(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "agency", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the CSS cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="indicesBackupCheck")
    def indices_backup_check(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether to perform backup verification.
        """
        return pulumi.get(self, "indices_backup_check")

    @indices_backup_check.setter
    def indices_backup_check(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "indices_backup_check", value)

    @_builtins.property
    @pulumi.getter(name="targetImageId")
    def target_image_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the upgradeable target image ID.
        """
        return pulumi.get(self, "target_image_id")

    @target_image_id.setter
    def target_image_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_image_id", value)

    @_builtins.property
    @pulumi.getter(name="upgradeType")
    def upgrade_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the upgrade type.
        The value can be **same**, **cross** and **crossEngine**.
        """
        return pulumi.get(self, "upgrade_type")

    @upgrade_type.setter
    def upgrade_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "upgrade_type", value)

    @_builtins.property
    @pulumi.getter(name="clusterLoadCheck")
    def cluster_load_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to verify the load. Default is **true**.
        """
        return pulumi.get(self, "cluster_load_check")

    @cluster_load_check.setter
    def cluster_load_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cluster_load_check", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _EsCoreUpgradeState:
    def __init__(__self__, *,
                 agency: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_load_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 indices_backup_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_details: Optional[pulumi.Input[Sequence[pulumi.Input['EsCoreUpgradeUpgradeDetailArgs']]]] = None,
                 upgrade_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EsCoreUpgrade resources.
        :param pulumi.Input[_builtins.str] agency: Specifies the IAM agency used to access CSS.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
        :param pulumi.Input[_builtins.bool] cluster_load_check: Whether to verify the load. Default is **true**.
        :param pulumi.Input[_builtins.bool] indices_backup_check: Specifies whether to perform backup verification.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] target_image_id: Specifies the upgradeable target image ID.
        :param pulumi.Input[Sequence[pulumi.Input['EsCoreUpgradeUpgradeDetailArgs']]] upgrade_details: The upgrade task detail.
               The upgrade_detail structure is documented below.
        :param pulumi.Input[_builtins.str] upgrade_type: Specifies the upgrade type.
               The value can be **same**, **cross** and **crossEngine**.
        """
        if agency is not None:
            pulumi.set(__self__, "agency", agency)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_load_check is not None:
            pulumi.set(__self__, "cluster_load_check", cluster_load_check)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if indices_backup_check is not None:
            pulumi.set(__self__, "indices_backup_check", indices_backup_check)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if target_image_id is not None:
            pulumi.set(__self__, "target_image_id", target_image_id)
        if upgrade_details is not None:
            pulumi.set(__self__, "upgrade_details", upgrade_details)
        if upgrade_type is not None:
            pulumi.set(__self__, "upgrade_type", upgrade_type)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IAM agency used to access CSS.
        """
        return pulumi.get(self, "agency")

    @agency.setter
    def agency(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the CSS cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterLoadCheck")
    def cluster_load_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to verify the load. Default is **true**.
        """
        return pulumi.get(self, "cluster_load_check")

    @cluster_load_check.setter
    def cluster_load_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cluster_load_check", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="indicesBackupCheck")
    def indices_backup_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform backup verification.
        """
        return pulumi.get(self, "indices_backup_check")

    @indices_backup_check.setter
    def indices_backup_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "indices_backup_check", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="targetImageId")
    def target_image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the upgradeable target image ID.
        """
        return pulumi.get(self, "target_image_id")

    @target_image_id.setter
    def target_image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_image_id", value)

    @_builtins.property
    @pulumi.getter(name="upgradeDetails")
    def upgrade_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EsCoreUpgradeUpgradeDetailArgs']]]]:
        """
        The upgrade task detail.
        The upgrade_detail structure is documented below.
        """
        return pulumi.get(self, "upgrade_details")

    @upgrade_details.setter
    def upgrade_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EsCoreUpgradeUpgradeDetailArgs']]]]):
        pulumi.set(self, "upgrade_details", value)

    @_builtins.property
    @pulumi.getter(name="upgradeType")
    def upgrade_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the upgrade type.
        The value can be **same**, **cross** and **crossEngine**.
        """
        return pulumi.get(self, "upgrade_type")

    @upgrade_type.setter
    def upgrade_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "upgrade_type", value)


@pulumi.type_token("huaweicloud:Css/esCoreUpgrade:EsCoreUpgrade")
class EsCoreUpgrade(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_load_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 indices_backup_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages CSS ElasticSearch core upgrade resource within HuaweiCloud.

        > **NOTE:** After the upgrade is successful, the `engine_version` field of the managed CSS cluster
        (huaweicloud_css_cluster) has changed. You need to manually synchronize the field value in the script,
        otherwise **forceNew** will be triggered.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        target_image_id = config.require_object("targetImageId")
        agency = config.require_object("agency")
        test = huaweicloud.css.EsCoreUpgrade("test",
            cluster_id=cluster_id,
            target_image_id=target_image_id,
            upgrade_type="cross",
            agency=agency,
            indices_backup_check=True,
            cluster_load_check=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency: Specifies the IAM agency used to access CSS.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
        :param pulumi.Input[_builtins.bool] cluster_load_check: Whether to verify the load. Default is **true**.
        :param pulumi.Input[_builtins.bool] indices_backup_check: Specifies whether to perform backup verification.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] target_image_id: Specifies the upgradeable target image ID.
        :param pulumi.Input[_builtins.str] upgrade_type: Specifies the upgrade type.
               The value can be **same**, **cross** and **crossEngine**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EsCoreUpgradeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages CSS ElasticSearch core upgrade resource within HuaweiCloud.

        > **NOTE:** After the upgrade is successful, the `engine_version` field of the managed CSS cluster
        (huaweicloud_css_cluster) has changed. You need to manually synchronize the field value in the script,
        otherwise **forceNew** will be triggered.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        target_image_id = config.require_object("targetImageId")
        agency = config.require_object("agency")
        test = huaweicloud.css.EsCoreUpgrade("test",
            cluster_id=cluster_id,
            target_image_id=target_image_id,
            upgrade_type="cross",
            agency=agency,
            indices_backup_check=True,
            cluster_load_check=True)
        ```

        :param str resource_name: The name of the resource.
        :param EsCoreUpgradeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EsCoreUpgradeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_load_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 indices_backup_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EsCoreUpgradeArgs.__new__(EsCoreUpgradeArgs)

            if agency is None and not opts.urn:
                raise TypeError("Missing required property 'agency'")
            __props__.__dict__["agency"] = agency
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["cluster_load_check"] = cluster_load_check
            __props__.__dict__["enable_force_new"] = enable_force_new
            if indices_backup_check is None and not opts.urn:
                raise TypeError("Missing required property 'indices_backup_check'")
            __props__.__dict__["indices_backup_check"] = indices_backup_check
            __props__.__dict__["region"] = region
            if target_image_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_image_id'")
            __props__.__dict__["target_image_id"] = target_image_id
            if upgrade_type is None and not opts.urn:
                raise TypeError("Missing required property 'upgrade_type'")
            __props__.__dict__["upgrade_type"] = upgrade_type
            __props__.__dict__["upgrade_details"] = None
        super(EsCoreUpgrade, __self__).__init__(
            'huaweicloud:Css/esCoreUpgrade:EsCoreUpgrade',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agency: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_load_check: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            indices_backup_check: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            target_image_id: Optional[pulumi.Input[_builtins.str]] = None,
            upgrade_details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EsCoreUpgradeUpgradeDetailArgs', 'EsCoreUpgradeUpgradeDetailArgsDict']]]]] = None,
            upgrade_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'EsCoreUpgrade':
        """
        Get an existing EsCoreUpgrade resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency: Specifies the IAM agency used to access CSS.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS cluster.
        :param pulumi.Input[_builtins.bool] cluster_load_check: Whether to verify the load. Default is **true**.
        :param pulumi.Input[_builtins.bool] indices_backup_check: Specifies whether to perform backup verification.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] target_image_id: Specifies the upgradeable target image ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EsCoreUpgradeUpgradeDetailArgs', 'EsCoreUpgradeUpgradeDetailArgsDict']]]] upgrade_details: The upgrade task detail.
               The upgrade_detail structure is documented below.
        :param pulumi.Input[_builtins.str] upgrade_type: Specifies the upgrade type.
               The value can be **same**, **cross** and **crossEngine**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EsCoreUpgradeState.__new__(_EsCoreUpgradeState)

        __props__.__dict__["agency"] = agency
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_load_check"] = cluster_load_check
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["indices_backup_check"] = indices_backup_check
        __props__.__dict__["region"] = region
        __props__.__dict__["target_image_id"] = target_image_id
        __props__.__dict__["upgrade_details"] = upgrade_details
        __props__.__dict__["upgrade_type"] = upgrade_type
        return EsCoreUpgrade(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the IAM agency used to access CSS.
        """
        return pulumi.get(self, "agency")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the CSS cluster.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterLoadCheck")
    def cluster_load_check(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether to verify the load. Default is **true**.
        """
        return pulumi.get(self, "cluster_load_check")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="indicesBackupCheck")
    def indices_backup_check(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to perform backup verification.
        """
        return pulumi.get(self, "indices_backup_check")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="targetImageId")
    def target_image_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the upgradeable target image ID.
        """
        return pulumi.get(self, "target_image_id")

    @_builtins.property
    @pulumi.getter(name="upgradeDetails")
    def upgrade_details(self) -> pulumi.Output[Sequence['outputs.EsCoreUpgradeUpgradeDetail']]:
        """
        The upgrade task detail.
        The upgrade_detail structure is documented below.
        """
        return pulumi.get(self, "upgrade_details")

    @_builtins.property
    @pulumi.getter(name="upgradeType")
    def upgrade_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the upgrade type.
        The value can be **same**, **cross** and **crossEngine**.
        """
        return pulumi.get(self, "upgrade_type")

