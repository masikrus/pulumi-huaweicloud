# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['LogstashCustomCertificateArgs', 'LogstashCustomCertificate']

@pulumi.input_type
class LogstashCustomCertificateArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[_builtins.str],
                 cert_object: pulumi.Input[_builtins.str],
                 cluster_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LogstashCustomCertificate resource.
        :param pulumi.Input[_builtins.str] bucket_name: Specifies the OBS bucket name where the certificate file is stored.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] cert_object: Specifies the certificate file path to upload in the OBS bucket.
               The certificate name ranges from `4` to `32` digits, must start with a letter and end with
               (.cer|.crt|.rsa|.jks|.pem|.p10|.pfx|.p12|.csr|.der|.keystore), it can contain letters, numbers,
               dashes, underlines or decimal points, but cannot contain other special characters.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "cert_object", cert_object)
        pulumi.set(__self__, "cluster_id", cluster_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the OBS bucket name where the certificate file is stored.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="certObject")
    def cert_object(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the certificate file path to upload in the OBS bucket.
        The certificate name ranges from `4` to `32` digits, must start with a letter and end with
        (.cer|.crt|.rsa|.jks|.pem|.p10|.pfx|.p12|.csr|.der|.keystore), it can contain letters, numbers,
        dashes, underlines or decimal points, but cannot contain other special characters.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cert_object")

    @cert_object.setter
    def cert_object(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cert_object", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies ID of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LogstashCustomCertificateState:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cert_object: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogstashCustomCertificate resources.
        :param pulumi.Input[_builtins.str] bucket_name: Specifies the OBS bucket name where the certificate file is stored.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] cert_object: Specifies the certificate file path to upload in the OBS bucket.
               The certificate name ranges from `4` to `32` digits, must start with a letter and end with
               (.cer|.crt|.rsa|.jks|.pem|.p10|.pfx|.p12|.csr|.der|.keystore), it can contain letters, numbers,
               dashes, underlines or decimal points, but cannot contain other special characters.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: The custom certificate name.
        :param pulumi.Input[_builtins.str] path: The custom certificate path after uploading.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: The custom certificate status.
        :param pulumi.Input[_builtins.str] updated_at: The custom certificate upload time.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if cert_object is not None:
            pulumi.set(__self__, "cert_object", cert_object)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OBS bucket name where the certificate file is stored.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="certObject")
    def cert_object(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate file path to upload in the OBS bucket.
        The certificate name ranges from `4` to `32` digits, must start with a letter and end with
        (.cer|.crt|.rsa|.jks|.pem|.p10|.pfx|.p12|.csr|.der|.keystore), it can contain letters, numbers,
        dashes, underlines or decimal points, but cannot contain other special characters.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cert_object")

    @cert_object.setter
    def cert_object(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cert_object", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies ID of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The custom certificate name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The custom certificate path after uploading.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The custom certificate status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The custom certificate upload time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Css/logstashCustomCertificate:LogstashCustomCertificate")
class LogstashCustomCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cert_object: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages CSS logstash cluster custom certificate resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        bucket_name = config.require_object("bucketName")
        cert_object = config.require_object("certObject")
        test = huaweicloud.css.LogstashCustomCertificate("test",
            cluster_id=cluster_id,
            bucket_name=bucket_name,
            cert_object=cert_object)
        ```

        ## Import

        The CSS logstash cluster custom certificate can be imported using `cluster_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/logstashCustomCertificate:LogstashCustomCertificate test <cluster_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to the attribute missing from the

        API response. The missing attributes include: `bucket_name`, `cert_object`.

        It is generally recommended running `pulumi preview` after importing a CSS logstash cluster custom certificate.

        You can then decide if changes should be applied to the CSS logstash cluster custom certificate, or the resource

        definition should be updated to align with the CSS logstash cluster custom certificate. Also you can ignore changes

        as below.

        hcl

        resource "huaweicloud_css_logstash_custom_certificate" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              bucket_name, cert_object,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bucket_name: Specifies the OBS bucket name where the certificate file is stored.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] cert_object: Specifies the certificate file path to upload in the OBS bucket.
               The certificate name ranges from `4` to `32` digits, must start with a letter and end with
               (.cer|.crt|.rsa|.jks|.pem|.p10|.pfx|.p12|.csr|.der|.keystore), it can contain letters, numbers,
               dashes, underlines or decimal points, but cannot contain other special characters.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogstashCustomCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages CSS logstash cluster custom certificate resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        bucket_name = config.require_object("bucketName")
        cert_object = config.require_object("certObject")
        test = huaweicloud.css.LogstashCustomCertificate("test",
            cluster_id=cluster_id,
            bucket_name=bucket_name,
            cert_object=cert_object)
        ```

        ## Import

        The CSS logstash cluster custom certificate can be imported using `cluster_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/logstashCustomCertificate:LogstashCustomCertificate test <cluster_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to the attribute missing from the

        API response. The missing attributes include: `bucket_name`, `cert_object`.

        It is generally recommended running `pulumi preview` after importing a CSS logstash cluster custom certificate.

        You can then decide if changes should be applied to the CSS logstash cluster custom certificate, or the resource

        definition should be updated to align with the CSS logstash cluster custom certificate. Also you can ignore changes

        as below.

        hcl

        resource "huaweicloud_css_logstash_custom_certificate" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              bucket_name, cert_object,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param LogstashCustomCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogstashCustomCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cert_object: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogstashCustomCertificateArgs.__new__(LogstashCustomCertificateArgs)

            if bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_name'")
            __props__.__dict__["bucket_name"] = bucket_name
            if cert_object is None and not opts.urn:
                raise TypeError("Missing required property 'cert_object'")
            __props__.__dict__["cert_object"] = cert_object
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["region"] = region
            __props__.__dict__["name"] = None
            __props__.__dict__["path"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(LogstashCustomCertificate, __self__).__init__(
            'huaweicloud:Css/logstashCustomCertificate:LogstashCustomCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
            cert_object: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogstashCustomCertificate':
        """
        Get an existing LogstashCustomCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bucket_name: Specifies the OBS bucket name where the certificate file is stored.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] cert_object: Specifies the certificate file path to upload in the OBS bucket.
               The certificate name ranges from `4` to `32` digits, must start with a letter and end with
               (.cer|.crt|.rsa|.jks|.pem|.p10|.pfx|.p12|.csr|.der|.keystore), it can contain letters, numbers,
               dashes, underlines or decimal points, but cannot contain other special characters.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: The custom certificate name.
        :param pulumi.Input[_builtins.str] path: The custom certificate path after uploading.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: The custom certificate status.
        :param pulumi.Input[_builtins.str] updated_at: The custom certificate upload time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogstashCustomCertificateState.__new__(_LogstashCustomCertificateState)

        __props__.__dict__["bucket_name"] = bucket_name
        __props__.__dict__["cert_object"] = cert_object
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["name"] = name
        __props__.__dict__["path"] = path
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        return LogstashCustomCertificate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the OBS bucket name where the certificate file is stored.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "bucket_name")

    @_builtins.property
    @pulumi.getter(name="certObject")
    def cert_object(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the certificate file path to upload in the OBS bucket.
        The certificate name ranges from `4` to `32` digits, must start with a letter and end with
        (.cer|.crt|.rsa|.jks|.pem|.p10|.pfx|.p12|.csr|.der|.keystore), it can contain letters, numbers,
        dashes, underlines or decimal points, but cannot contain other special characters.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cert_object")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies ID of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The custom certificate name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[_builtins.str]:
        """
        The custom certificate path after uploading.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The custom certificate status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The custom certificate upload time.
        """
        return pulumi.get(self, "updated_at")

