# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogstashConfigurationArgs', 'LogstashConfiguration']

@pulumi.input_type
class LogstashConfigurationArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 conf_content: pulumi.Input[_builtins.str],
                 setting: pulumi.Input['LogstashConfigurationSettingArgs'],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sensitive_words: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a LogstashConfiguration resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] conf_content: Specifies the configuration file content of the CSS logstash cluster.
        :param pulumi.Input['LogstashConfigurationSettingArgs'] setting: Specifies configuration file setting information of the CSS logstash cluster.
               The setting structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the configuration file name of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] sensitive_words: Specifies the input list of sensitive strings that need to be hidden.
               After configuring the hidden string list, all strings in the list will be hidden as `***` in the returned
               configuration content (the list supports a maximum of `20` items, and the maximum length of a single string
               is 512 bytes).
               
               > **NOTE:** When this field is used, the configuration file content will also trigger update changes when the
               update operation is performed again, restoring the hidden content. If you import resources, you need to manually
               restore sensitive characters hidden in the configuration content.
               
               <a name="Css_logstash_configuration_setting"></a>
               The `setting` block supports:
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "conf_content", conf_content)
        pulumi.set(__self__, "setting", setting)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sensitive_words is not None:
            pulumi.set(__self__, "sensitive_words", sensitive_words)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies ID of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="confContent")
    def conf_content(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the configuration file content of the CSS logstash cluster.
        """
        return pulumi.get(self, "conf_content")

    @conf_content.setter
    def conf_content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "conf_content", value)

    @_builtins.property
    @pulumi.getter
    def setting(self) -> pulumi.Input['LogstashConfigurationSettingArgs']:
        """
        Specifies configuration file setting information of the CSS logstash cluster.
        The setting structure is documented below.
        """
        return pulumi.get(self, "setting")

    @setting.setter
    def setting(self, value: pulumi.Input['LogstashConfigurationSettingArgs']):
        pulumi.set(self, "setting", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration file name of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sensitiveWords")
    def sensitive_words(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the input list of sensitive strings that need to be hidden.
        After configuring the hidden string list, all strings in the list will be hidden as `***` in the returned
        configuration content (the list supports a maximum of `20` items, and the maximum length of a single string
        is 512 bytes).

        > **NOTE:** When this field is used, the configuration file content will also trigger update changes when the
        update operation is performed again, restoring the hidden content. If you import resources, you need to manually
        restore sensitive characters hidden in the configuration content.

        <a name="Css_logstash_configuration_setting"></a>
        The `setting` block supports:
        """
        return pulumi.get(self, "sensitive_words")

    @sensitive_words.setter
    def sensitive_words(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "sensitive_words", value)


@pulumi.input_type
class _LogstashConfigurationState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 conf_content: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sensitive_words: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 setting: Optional[pulumi.Input['LogstashConfigurationSettingArgs']] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogstashConfiguration resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] conf_content: Specifies the configuration file content of the CSS logstash cluster.
        :param pulumi.Input[_builtins.str] name: Specifies the configuration file name of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] sensitive_words: Specifies the input list of sensitive strings that need to be hidden.
               After configuring the hidden string list, all strings in the list will be hidden as `***` in the returned
               configuration content (the list supports a maximum of `20` items, and the maximum length of a single string
               is 512 bytes).
               
               > **NOTE:** When this field is used, the configuration file content will also trigger update changes when the
               update operation is performed again, restoring the hidden content. If you import resources, you need to manually
               restore sensitive characters hidden in the configuration content.
               
               <a name="Css_logstash_configuration_setting"></a>
               The `setting` block supports:
        :param pulumi.Input['LogstashConfigurationSettingArgs'] setting: Specifies configuration file setting information of the CSS logstash cluster.
               The setting structure is documented below.
        :param pulumi.Input[_builtins.str] status: The configuration file content check status.
        :param pulumi.Input[_builtins.str] updated_at: The update time of configuration file.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if conf_content is not None:
            pulumi.set(__self__, "conf_content", conf_content)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sensitive_words is not None:
            pulumi.set(__self__, "sensitive_words", sensitive_words)
        if setting is not None:
            pulumi.set(__self__, "setting", setting)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies ID of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="confContent")
    def conf_content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration file content of the CSS logstash cluster.
        """
        return pulumi.get(self, "conf_content")

    @conf_content.setter
    def conf_content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "conf_content", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration file name of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sensitiveWords")
    def sensitive_words(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the input list of sensitive strings that need to be hidden.
        After configuring the hidden string list, all strings in the list will be hidden as `***` in the returned
        configuration content (the list supports a maximum of `20` items, and the maximum length of a single string
        is 512 bytes).

        > **NOTE:** When this field is used, the configuration file content will also trigger update changes when the
        update operation is performed again, restoring the hidden content. If you import resources, you need to manually
        restore sensitive characters hidden in the configuration content.

        <a name="Css_logstash_configuration_setting"></a>
        The `setting` block supports:
        """
        return pulumi.get(self, "sensitive_words")

    @sensitive_words.setter
    def sensitive_words(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "sensitive_words", value)

    @_builtins.property
    @pulumi.getter
    def setting(self) -> Optional[pulumi.Input['LogstashConfigurationSettingArgs']]:
        """
        Specifies configuration file setting information of the CSS logstash cluster.
        The setting structure is documented below.
        """
        return pulumi.get(self, "setting")

    @setting.setter
    def setting(self, value: Optional[pulumi.Input['LogstashConfigurationSettingArgs']]):
        pulumi.set(self, "setting", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The configuration file content check status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time of configuration file.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Css/logstashConfiguration:LogstashConfiguration")
class LogstashConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 conf_content: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sensitive_words: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 setting: Optional[pulumi.Input[Union['LogstashConfigurationSettingArgs', 'LogstashConfigurationSettingArgsDict']]] = None,
                 __props__=None):
        """
        Manages a CSS logstah configuration resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        logstash_conf_name = config.require_object("logstashConfName")
        conf_content = config.require_object("confContent")
        test = huaweicloud.css.LogstashConfiguration("test",
            cluster_id=cluster_id,
            name=logstash_conf_name,
            conf_content=conf_content,
            setting={
                "queue_type": "memory",
            })
        ```

        ## Import

        The CSS logstash configuration can be imported using `cluster_id` and `name` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/logstashConfiguration:LogstashConfiguration test <cluster_id>/<name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `sensitive_words`.

        It is generally recommended running `pulumi preview` after importing a CSS logstash configuration.

        You can then decide if changes should be applied to the CSS logstash configuration, or the resource definition should

        be updated to align with the CSS logstash configuration. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_css_logstash_configuration" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              sensitive_words,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] conf_content: Specifies the configuration file content of the CSS logstash cluster.
        :param pulumi.Input[_builtins.str] name: Specifies the configuration file name of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] sensitive_words: Specifies the input list of sensitive strings that need to be hidden.
               After configuring the hidden string list, all strings in the list will be hidden as `***` in the returned
               configuration content (the list supports a maximum of `20` items, and the maximum length of a single string
               is 512 bytes).
               
               > **NOTE:** When this field is used, the configuration file content will also trigger update changes when the
               update operation is performed again, restoring the hidden content. If you import resources, you need to manually
               restore sensitive characters hidden in the configuration content.
               
               <a name="Css_logstash_configuration_setting"></a>
               The `setting` block supports:
        :param pulumi.Input[Union['LogstashConfigurationSettingArgs', 'LogstashConfigurationSettingArgsDict']] setting: Specifies configuration file setting information of the CSS logstash cluster.
               The setting structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogstashConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CSS logstah configuration resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        logstash_conf_name = config.require_object("logstashConfName")
        conf_content = config.require_object("confContent")
        test = huaweicloud.css.LogstashConfiguration("test",
            cluster_id=cluster_id,
            name=logstash_conf_name,
            conf_content=conf_content,
            setting={
                "queue_type": "memory",
            })
        ```

        ## Import

        The CSS logstash configuration can be imported using `cluster_id` and `name` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Css/logstashConfiguration:LogstashConfiguration test <cluster_id>/<name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `sensitive_words`.

        It is generally recommended running `pulumi preview` after importing a CSS logstash configuration.

        You can then decide if changes should be applied to the CSS logstash configuration, or the resource definition should

        be updated to align with the CSS logstash configuration. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_css_logstash_configuration" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              sensitive_words,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param LogstashConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogstashConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 conf_content: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sensitive_words: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 setting: Optional[pulumi.Input[Union['LogstashConfigurationSettingArgs', 'LogstashConfigurationSettingArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogstashConfigurationArgs.__new__(LogstashConfigurationArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if conf_content is None and not opts.urn:
                raise TypeError("Missing required property 'conf_content'")
            __props__.__dict__["conf_content"] = conf_content
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["sensitive_words"] = sensitive_words
            if setting is None and not opts.urn:
                raise TypeError("Missing required property 'setting'")
            __props__.__dict__["setting"] = setting
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(LogstashConfiguration, __self__).__init__(
            'huaweicloud:Css/logstashConfiguration:LogstashConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            conf_content: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            sensitive_words: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            setting: Optional[pulumi.Input[Union['LogstashConfigurationSettingArgs', 'LogstashConfigurationSettingArgsDict']]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogstashConfiguration':
        """
        Get an existing LogstashConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies ID of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] conf_content: Specifies the configuration file content of the CSS logstash cluster.
        :param pulumi.Input[_builtins.str] name: Specifies the configuration file name of the CSS logstash cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] sensitive_words: Specifies the input list of sensitive strings that need to be hidden.
               After configuring the hidden string list, all strings in the list will be hidden as `***` in the returned
               configuration content (the list supports a maximum of `20` items, and the maximum length of a single string
               is 512 bytes).
               
               > **NOTE:** When this field is used, the configuration file content will also trigger update changes when the
               update operation is performed again, restoring the hidden content. If you import resources, you need to manually
               restore sensitive characters hidden in the configuration content.
               
               <a name="Css_logstash_configuration_setting"></a>
               The `setting` block supports:
        :param pulumi.Input[Union['LogstashConfigurationSettingArgs', 'LogstashConfigurationSettingArgsDict']] setting: Specifies configuration file setting information of the CSS logstash cluster.
               The setting structure is documented below.
        :param pulumi.Input[_builtins.str] status: The configuration file content check status.
        :param pulumi.Input[_builtins.str] updated_at: The update time of configuration file.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogstashConfigurationState.__new__(_LogstashConfigurationState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["conf_content"] = conf_content
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["sensitive_words"] = sensitive_words
        __props__.__dict__["setting"] = setting
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        return LogstashConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies ID of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="confContent")
    def conf_content(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the configuration file content of the CSS logstash cluster.
        """
        return pulumi.get(self, "conf_content")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the configuration file name of the CSS logstash cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sensitiveWords")
    def sensitive_words(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the input list of sensitive strings that need to be hidden.
        After configuring the hidden string list, all strings in the list will be hidden as `***` in the returned
        configuration content (the list supports a maximum of `20` items, and the maximum length of a single string
        is 512 bytes).

        > **NOTE:** When this field is used, the configuration file content will also trigger update changes when the
        update operation is performed again, restoring the hidden content. If you import resources, you need to manually
        restore sensitive characters hidden in the configuration content.

        <a name="Css_logstash_configuration_setting"></a>
        The `setting` block supports:
        """
        return pulumi.get(self, "sensitive_words")

    @_builtins.property
    @pulumi.getter
    def setting(self) -> pulumi.Output['outputs.LogstashConfigurationSetting']:
        """
        Specifies configuration file setting information of the CSS logstash cluster.
        The setting structure is documented below.
        """
        return pulumi.get(self, "setting")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The configuration file content check status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time of configuration file.
        """
        return pulumi.get(self, "updated_at")

