# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetLogstashConfigurationsResult',
    'AwaitableGetLogstashConfigurationsResult',
    'get_logstash_configurations',
    'get_logstash_configurations_output',
]

@pulumi.output_type
class GetLogstashConfigurationsResult:
    """
    A collection of values returned by getLogstashConfigurations.
    """
    def __init__(__self__, cluster_id=None, confs=None, id=None, name=None, region=None, status=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if confs and not isinstance(confs, list):
            raise TypeError("Expected argument 'confs' to be a list")
        pulumi.set(__self__, "confs", confs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def confs(self) -> Sequence['outputs.GetLogstashConfigurationsConfResult']:
        """
        The configuration file list.
        """
        return pulumi.get(self, "confs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The configuration file name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The configuration file content check status.
        """
        return pulumi.get(self, "status")


class AwaitableGetLogstashConfigurationsResult(GetLogstashConfigurationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogstashConfigurationsResult(
            cluster_id=self.cluster_id,
            confs=self.confs,
            id=self.id,
            name=self.name,
            region=self.region,
            status=self.status)


def get_logstash_configurations(cluster_id: Optional[_builtins.str] = None,
                                name: Optional[_builtins.str] = None,
                                region: Optional[_builtins.str] = None,
                                status: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogstashConfigurationsResult:
    """
    Use this data source to get the list of CSS logstash configurations.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    name = config.require_object("name")
    test = huaweicloud.Css.get_logstash_configurations(cluster_id=cluster_id,
        name=name)
    ```


    :param _builtins.str cluster_id: Specifies ID of the CSS logstash cluster.
    :param _builtins.str name: Specifies the configuration file name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the configuration file content check status.
           The values can be **checking**, **available** and **unavailable**.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Css/getLogstashConfigurations:getLogstashConfigurations', __args__, opts=opts, typ=GetLogstashConfigurationsResult).value

    return AwaitableGetLogstashConfigurationsResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        confs=pulumi.get(__ret__, 'confs'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_logstash_configurations_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogstashConfigurationsResult]:
    """
    Use this data source to get the list of CSS logstash configurations.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    name = config.require_object("name")
    test = huaweicloud.Css.get_logstash_configurations(cluster_id=cluster_id,
        name=name)
    ```


    :param _builtins.str cluster_id: Specifies ID of the CSS logstash cluster.
    :param _builtins.str name: Specifies the configuration file name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the configuration file content check status.
           The values can be **checking**, **available** and **unavailable**.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Css/getLogstashConfigurations:getLogstashConfigurations', __args__, opts=opts, typ=GetLogstashConfigurationsResult)
    return __ret__.apply(lambda __response__: GetLogstashConfigurationsResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        confs=pulumi.get(__response__, 'confs'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
