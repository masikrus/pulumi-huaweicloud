# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogstashConnectivityArgs', 'LogstashConnectivity']

@pulumi.input_type
class LogstashConnectivityArgs:
    def __init__(__self__, *,
                 address_and_ports: pulumi.Input[Sequence[pulumi.Input['LogstashConnectivityAddressAndPortArgs']]],
                 cluster_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LogstashConnectivity resource.
        :param pulumi.Input[Sequence[pulumi.Input['LogstashConnectivityAddressAndPortArgs']]] address_and_ports: Specifies the list of addresses and ports.
               The address_and_ports structure is documented below.
               
               <a name="css_logstash_address_and_ports"></a>
               The `address_and_ports` block supports:
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS logstash cluster.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "address_and_ports", address_and_ports)
        pulumi.set(__self__, "cluster_id", cluster_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="addressAndPorts")
    def address_and_ports(self) -> pulumi.Input[Sequence[pulumi.Input['LogstashConnectivityAddressAndPortArgs']]]:
        """
        Specifies the list of addresses and ports.
        The address_and_ports structure is documented below.

        <a name="css_logstash_address_and_ports"></a>
        The `address_and_ports` block supports:
        """
        return pulumi.get(self, "address_and_ports")

    @address_and_ports.setter
    def address_and_ports(self, value: pulumi.Input[Sequence[pulumi.Input['LogstashConnectivityAddressAndPortArgs']]]):
        pulumi.set(self, "address_and_ports", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the CSS logstash cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LogstashConnectivityState:
    def __init__(__self__, *,
                 address_and_ports: Optional[pulumi.Input[Sequence[pulumi.Input['LogstashConnectivityAddressAndPortArgs']]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connectivity_results: Optional[pulumi.Input[Sequence[pulumi.Input['LogstashConnectivityConnectivityResultArgs']]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogstashConnectivity resources.
        :param pulumi.Input[Sequence[pulumi.Input['LogstashConnectivityAddressAndPortArgs']]] address_and_ports: Specifies the list of addresses and ports.
               The address_and_ports structure is documented below.
               
               <a name="css_logstash_address_and_ports"></a>
               The `address_and_ports` block supports:
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS logstash cluster.
        :param pulumi.Input[Sequence[pulumi.Input['LogstashConnectivityConnectivityResultArgs']]] connectivity_results: The connectivity results.
               The connectivity_results structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        if address_and_ports is not None:
            pulumi.set(__self__, "address_and_ports", address_and_ports)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if connectivity_results is not None:
            pulumi.set(__self__, "connectivity_results", connectivity_results)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="addressAndPorts")
    def address_and_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogstashConnectivityAddressAndPortArgs']]]]:
        """
        Specifies the list of addresses and ports.
        The address_and_ports structure is documented below.

        <a name="css_logstash_address_and_ports"></a>
        The `address_and_ports` block supports:
        """
        return pulumi.get(self, "address_and_ports")

    @address_and_ports.setter
    def address_and_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogstashConnectivityAddressAndPortArgs']]]]):
        pulumi.set(self, "address_and_ports", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the CSS logstash cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="connectivityResults")
    def connectivity_results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogstashConnectivityConnectivityResultArgs']]]]:
        """
        The connectivity results.
        The connectivity_results structure is documented below.
        """
        return pulumi.get(self, "connectivity_results")

    @connectivity_results.setter
    def connectivity_results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogstashConnectivityConnectivityResultArgs']]]]):
        pulumi.set(self, "connectivity_results", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Css/logstashConnectivity:LogstashConnectivity")
class LogstashConnectivity(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_and_ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogstashConnectivityAddressAndPortArgs', 'LogstashConnectivityAddressAndPortArgsDict']]]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages CSS logstash connectivity resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.css.LogstashConnectivity("test",
            cluster_id=cluster_id,
            address_and_ports=[{
                "address": "192.168.0.11",
                "port": 9600,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogstashConnectivityAddressAndPortArgs', 'LogstashConnectivityAddressAndPortArgsDict']]]] address_and_ports: Specifies the list of addresses and ports.
               The address_and_ports structure is documented below.
               
               <a name="css_logstash_address_and_ports"></a>
               The `address_and_ports` block supports:
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS logstash cluster.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogstashConnectivityArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages CSS logstash connectivity resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.css.LogstashConnectivity("test",
            cluster_id=cluster_id,
            address_and_ports=[{
                "address": "192.168.0.11",
                "port": 9600,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param LogstashConnectivityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogstashConnectivityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_and_ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogstashConnectivityAddressAndPortArgs', 'LogstashConnectivityAddressAndPortArgsDict']]]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogstashConnectivityArgs.__new__(LogstashConnectivityArgs)

            if address_and_ports is None and not opts.urn:
                raise TypeError("Missing required property 'address_and_ports'")
            __props__.__dict__["address_and_ports"] = address_and_ports
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["region"] = region
            __props__.__dict__["connectivity_results"] = None
        super(LogstashConnectivity, __self__).__init__(
            'huaweicloud:Css/logstashConnectivity:LogstashConnectivity',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_and_ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogstashConnectivityAddressAndPortArgs', 'LogstashConnectivityAddressAndPortArgsDict']]]]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            connectivity_results: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogstashConnectivityConnectivityResultArgs', 'LogstashConnectivityConnectivityResultArgsDict']]]]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogstashConnectivity':
        """
        Get an existing LogstashConnectivity resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogstashConnectivityAddressAndPortArgs', 'LogstashConnectivityAddressAndPortArgsDict']]]] address_and_ports: Specifies the list of addresses and ports.
               The address_and_ports structure is documented below.
               
               <a name="css_logstash_address_and_ports"></a>
               The `address_and_ports` block supports:
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the CSS logstash cluster.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogstashConnectivityConnectivityResultArgs', 'LogstashConnectivityConnectivityResultArgsDict']]]] connectivity_results: The connectivity results.
               The connectivity_results structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogstashConnectivityState.__new__(_LogstashConnectivityState)

        __props__.__dict__["address_and_ports"] = address_and_ports
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["connectivity_results"] = connectivity_results
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["region"] = region
        return LogstashConnectivity(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="addressAndPorts")
    def address_and_ports(self) -> pulumi.Output[Sequence['outputs.LogstashConnectivityAddressAndPort']]:
        """
        Specifies the list of addresses and ports.
        The address_and_ports structure is documented below.

        <a name="css_logstash_address_and_ports"></a>
        The `address_and_ports` block supports:
        """
        return pulumi.get(self, "address_and_ports")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the CSS logstash cluster.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="connectivityResults")
    def connectivity_results(self) -> pulumi.Output[Sequence['outputs.LogstashConnectivityConnectivityResult']]:
        """
        The connectivity results.
        The connectivity_results structure is documented below.
        """
        return pulumi.get(self, "connectivity_results")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

