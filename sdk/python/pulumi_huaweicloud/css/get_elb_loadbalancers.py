# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetElbLoadbalancersResult',
    'AwaitableGetElbLoadbalancersResult',
    'get_elb_loadbalancers',
    'get_elb_loadbalancers_output',
]

@pulumi.output_type
class GetElbLoadbalancersResult:
    """
    A collection of values returned by getElbLoadbalancers.
    """
    def __init__(__self__, cluster_id=None, id=None, is_cross=None, loadbalancer_id=None, loadbalancers=None, name=None, protocol_id=None, region=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_cross and not isinstance(is_cross, bool):
            raise TypeError("Expected argument 'is_cross' to be a bool")
        pulumi.set(__self__, "is_cross", is_cross)
        if loadbalancer_id and not isinstance(loadbalancer_id, str):
            raise TypeError("Expected argument 'loadbalancer_id' to be a str")
        pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        if loadbalancers and not isinstance(loadbalancers, list):
            raise TypeError("Expected argument 'loadbalancers' to be a list")
        pulumi.set(__self__, "loadbalancers", loadbalancers)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if protocol_id and not isinstance(protocol_id, str):
            raise TypeError("Expected argument 'protocol_id' to be a str")
        pulumi.set(__self__, "protocol_id", protocol_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCross")
    def is_cross(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_cross")

    @_builtins.property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "loadbalancer_id")

    @_builtins.property
    @pulumi.getter
    def loadbalancers(self) -> Sequence['outputs.GetElbLoadbalancersLoadbalancerResult']:
        """
        The list of the loadbalancer.
        """
        return pulumi.get(self, "loadbalancers")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The loadbalancer name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="protocolId")
    def protocol_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "protocol_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetElbLoadbalancersResult(GetElbLoadbalancersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetElbLoadbalancersResult(
            cluster_id=self.cluster_id,
            id=self.id,
            is_cross=self.is_cross,
            loadbalancer_id=self.loadbalancer_id,
            loadbalancers=self.loadbalancers,
            name=self.name,
            protocol_id=self.protocol_id,
            region=self.region)


def get_elb_loadbalancers(cluster_id: Optional[_builtins.str] = None,
                          is_cross: Optional[_builtins.bool] = None,
                          loadbalancer_id: Optional[_builtins.str] = None,
                          name: Optional[_builtins.str] = None,
                          protocol_id: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetElbLoadbalancersResult:
    """
    Use this data source to get the list of loadbalancer the CSS supported.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    name = config.require_object("name")
    test = huaweicloud.Css.get_elb_loadbalancers(cluster_id=cluster_id,
        name=name)
    ```


    :param _builtins.str cluster_id: Specifies the ID of the CSS cluster.
    :param _builtins.bool is_cross: Specifies whether to enable cross-VPC backend.
    :param _builtins.str loadbalancer_id: Specifies the ID of the loadbalancer.
    :param _builtins.str name: Specifies the name of the loadbalancer.
    :param _builtins.str protocol_id: Specifies the layer 7 protocol ID of the loadbalancer.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['isCross'] = is_cross
    __args__['loadbalancerId'] = loadbalancer_id
    __args__['name'] = name
    __args__['protocolId'] = protocol_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Css/getElbLoadbalancers:getElbLoadbalancers', __args__, opts=opts, typ=GetElbLoadbalancersResult).value

    return AwaitableGetElbLoadbalancersResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        is_cross=pulumi.get(__ret__, 'is_cross'),
        loadbalancer_id=pulumi.get(__ret__, 'loadbalancer_id'),
        loadbalancers=pulumi.get(__ret__, 'loadbalancers'),
        name=pulumi.get(__ret__, 'name'),
        protocol_id=pulumi.get(__ret__, 'protocol_id'),
        region=pulumi.get(__ret__, 'region'))
def get_elb_loadbalancers_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 is_cross: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                 loadbalancer_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 protocol_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetElbLoadbalancersResult]:
    """
    Use this data source to get the list of loadbalancer the CSS supported.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    name = config.require_object("name")
    test = huaweicloud.Css.get_elb_loadbalancers(cluster_id=cluster_id,
        name=name)
    ```


    :param _builtins.str cluster_id: Specifies the ID of the CSS cluster.
    :param _builtins.bool is_cross: Specifies whether to enable cross-VPC backend.
    :param _builtins.str loadbalancer_id: Specifies the ID of the loadbalancer.
    :param _builtins.str name: Specifies the name of the loadbalancer.
    :param _builtins.str protocol_id: Specifies the layer 7 protocol ID of the loadbalancer.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['isCross'] = is_cross
    __args__['loadbalancerId'] = loadbalancer_id
    __args__['name'] = name
    __args__['protocolId'] = protocol_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Css/getElbLoadbalancers:getElbLoadbalancers', __args__, opts=opts, typ=GetElbLoadbalancersResult)
    return __ret__.apply(lambda __response__: GetElbLoadbalancersResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        is_cross=pulumi.get(__response__, 'is_cross'),
        loadbalancer_id=pulumi.get(__response__, 'loadbalancer_id'),
        loadbalancers=pulumi.get(__response__, 'loadbalancers'),
        name=pulumi.get(__response__, 'name'),
        protocol_id=pulumi.get(__response__, 'protocol_id'),
        region=pulumi.get(__response__, 'region')))
