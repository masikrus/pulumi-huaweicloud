# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetModelTemplatesResult',
    'AwaitableGetModelTemplatesResult',
    'get_model_templates',
    'get_model_templates_output',
]

@pulumi.output_type
class GetModelTemplatesResult:
    """
    A collection of values returned by getModelTemplates.
    """
    def __init__(__self__, engine=None, environment=None, id=None, keyword=None, region=None, templates=None, type=None):
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if environment and not isinstance(environment, str):
            raise TypeError("Expected argument 'environment' to be a str")
        pulumi.set(__self__, "environment", environment)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keyword and not isinstance(keyword, str):
            raise TypeError("Expected argument 'keyword' to be a str")
        pulumi.set(__self__, "keyword", keyword)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if templates and not isinstance(templates, list):
            raise TypeError("Expected argument 'templates' to be a list")
        pulumi.set(__self__, "templates", templates)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> Optional[_builtins.str]:
        """
        The AI engine.  
        The valid values are **Caffe**, **MXNet**, **MindSpore**, **PyTorch**, and **TensorFlow**.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def environment(self) -> Optional[_builtins.str]:
        """
        Model runtime environment.  
        The valid values are **aarch64**, **python2.7**, **python2.7-cpu**, **python2.7-gpu**, **python3.6**,
        **python3.6-gpu**, and **python3.6-gpu**.
        """
        return pulumi.get(self, "environment")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def keyword(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "keyword")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetModelTemplatesTemplateResult']:
        """
        The list of model templates.
        The templates structure is documented below.
        """
        return pulumi.get(self, "templates")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the input parameter.
        """
        return pulumi.get(self, "type")


class AwaitableGetModelTemplatesResult(GetModelTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetModelTemplatesResult(
            engine=self.engine,
            environment=self.environment,
            id=self.id,
            keyword=self.keyword,
            region=self.region,
            templates=self.templates,
            type=self.type)


def get_model_templates(engine: Optional[_builtins.str] = None,
                        environment: Optional[_builtins.str] = None,
                        keyword: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        type: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetModelTemplatesResult:
    """
    Use this data source to get model templates of ModelArts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.ModelArts.get_model_templates(type="Classification")
    ```


    :param _builtins.str engine: The AI engine.  
           The valid values are **Caffe**, **Caffe1.0 CPU**, **Caffe1.0 GPU**, **MXNet**, **MXNet1.2.1**,
           **MindSpore**, **PyTorch**, **PyTorch1.0**, **TensorFlow**, and **TensorFlow1.8**.
    :param _builtins.str environment: Model runtime environment.  
           The valid values are **ascend-arm-py2.7**, **python2.7**, and **python3.6**.
    :param _builtins.str keyword: Keywords to search in name or description. Fuzzy match is supported.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: The type of model. The valid values are **Classification** and **Common**.
    """
    __args__ = dict()
    __args__['engine'] = engine
    __args__['environment'] = environment
    __args__['keyword'] = keyword
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ModelArts/getModelTemplates:getModelTemplates', __args__, opts=opts, typ=GetModelTemplatesResult).value

    return AwaitableGetModelTemplatesResult(
        engine=pulumi.get(__ret__, 'engine'),
        environment=pulumi.get(__ret__, 'environment'),
        id=pulumi.get(__ret__, 'id'),
        keyword=pulumi.get(__ret__, 'keyword'),
        region=pulumi.get(__ret__, 'region'),
        templates=pulumi.get(__ret__, 'templates'),
        type=pulumi.get(__ret__, 'type'))
def get_model_templates_output(engine: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               environment: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               keyword: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetModelTemplatesResult]:
    """
    Use this data source to get model templates of ModelArts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.ModelArts.get_model_templates(type="Classification")
    ```


    :param _builtins.str engine: The AI engine.  
           The valid values are **Caffe**, **Caffe1.0 CPU**, **Caffe1.0 GPU**, **MXNet**, **MXNet1.2.1**,
           **MindSpore**, **PyTorch**, **PyTorch1.0**, **TensorFlow**, and **TensorFlow1.8**.
    :param _builtins.str environment: Model runtime environment.  
           The valid values are **ascend-arm-py2.7**, **python2.7**, and **python3.6**.
    :param _builtins.str keyword: Keywords to search in name or description. Fuzzy match is supported.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: The type of model. The valid values are **Classification** and **Common**.
    """
    __args__ = dict()
    __args__['engine'] = engine
    __args__['environment'] = environment
    __args__['keyword'] = keyword
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ModelArts/getModelTemplates:getModelTemplates', __args__, opts=opts, typ=GetModelTemplatesResult)
    return __ret__.apply(lambda __response__: GetModelTemplatesResult(
        engine=pulumi.get(__response__, 'engine'),
        environment=pulumi.get(__response__, 'environment'),
        id=pulumi.get(__response__, 'id'),
        keyword=pulumi.get(__response__, 'keyword'),
        region=pulumi.get(__response__, 'region'),
        templates=pulumi.get(__response__, 'templates'),
        type=pulumi.get(__response__, 'type')))
