# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourceFlavorsResult',
    'AwaitableGetResourceFlavorsResult',
    'get_resource_flavors',
    'get_resource_flavors_output',
]

@pulumi.output_type
class GetResourceFlavorsResult:
    """
    A collection of values returned by getResourceFlavors.
    """
    def __init__(__self__, flavors=None, id=None, region=None, tag=None, type=None):
        if flavors and not isinstance(flavors, list):
            raise TypeError("Expected argument 'flavors' to be a list")
        pulumi.set(__self__, "flavors", flavors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tag and not isinstance(tag, str):
            raise TypeError("Expected argument 'tag' to be a str")
        pulumi.set(__self__, "tag", tag)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetResourceFlavorsFlavorResult']:
        """
        The list of resource flavors.
        The flavors structure is documented below.
        """
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Disk type.  
        Value options are as follows:
        + **SSD**: ultra-high I/O disk.
        + **GPSSD**: general-purpose SSD disk.
        + **SAS**: high I/O disk.
        + **SATA**: common disk.
        """
        return pulumi.get(self, "type")


class AwaitableGetResourceFlavorsResult(GetResourceFlavorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceFlavorsResult(
            flavors=self.flavors,
            id=self.id,
            region=self.region,
            tag=self.tag,
            type=self.type)


def get_resource_flavors(region: Optional[_builtins.str] = None,
                         tag: Optional[_builtins.str] = None,
                         type: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceFlavorsResult:
    """
    Use this data source to get resource flavors of ModelArts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.ModelArts.get_resource_flavors(type="Dedicate",
        tag="os.modelarts/scope")
    ```


    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str tag: The tag key.
    :param _builtins.str type: The type of resource flavor.  
           Value options are as follows:
           + **Dedicate**: physical resources.
           + **Logical**: logical resources.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['tag'] = tag
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ModelArts/getResourceFlavors:getResourceFlavors', __args__, opts=opts, typ=GetResourceFlavorsResult).value

    return AwaitableGetResourceFlavorsResult(
        flavors=pulumi.get(__ret__, 'flavors'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        tag=pulumi.get(__ret__, 'tag'),
        type=pulumi.get(__ret__, 'type'))
def get_resource_flavors_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                tag: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceFlavorsResult]:
    """
    Use this data source to get resource flavors of ModelArts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.ModelArts.get_resource_flavors(type="Dedicate",
        tag="os.modelarts/scope")
    ```


    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str tag: The tag key.
    :param _builtins.str type: The type of resource flavor.  
           Value options are as follows:
           + **Dedicate**: physical resources.
           + **Logical**: logical resources.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['tag'] = tag
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ModelArts/getResourceFlavors:getResourceFlavors', __args__, opts=opts, typ=GetResourceFlavorsResult)
    return __ret__.apply(lambda __response__: GetResourceFlavorsResult(
        flavors=pulumi.get(__response__, 'flavors'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        tag=pulumi.get(__response__, 'tag'),
        type=pulumi.get(__response__, 'type')))
