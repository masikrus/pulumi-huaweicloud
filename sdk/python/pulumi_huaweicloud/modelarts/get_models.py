# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetModelsResult',
    'AwaitableGetModelsResult',
    'get_models',
    'get_models_output',
]

@pulumi.output_type
class GetModelsResult:
    """
    A collection of values returned by getModels.
    """
    def __init__(__self__, description=None, exact_match=None, id=None, model_type=None, models=None, name=None, not_model_type=None, region=None, status=None, version=None, workspace_id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if exact_match and not isinstance(exact_match, str):
            raise TypeError("Expected argument 'exact_match' to be a str")
        pulumi.set(__self__, "exact_match", exact_match)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if model_type and not isinstance(model_type, str):
            raise TypeError("Expected argument 'model_type' to be a str")
        pulumi.set(__self__, "model_type", model_type)
        if models and not isinstance(models, list):
            raise TypeError("Expected argument 'models' to be a list")
        pulumi.set(__self__, "models", models)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if not_model_type and not isinstance(not_model_type, str):
            raise TypeError("Expected argument 'not_model_type' to be a str")
        pulumi.set(__self__, "not_model_type", not_model_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Model description that consists of 1 to 100 characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "exact_match")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[_builtins.str]:
        """
        Model type.  
        It can be **TensorFlow**, **MXNet**, **Caffe**, **Spark_MLlib**, **Scikit_Learn**,
        **XGBoost**, **Image**, **PyTorch**, or **Template**.
        """
        return pulumi.get(self, "model_type")

    @_builtins.property
    @pulumi.getter
    def models(self) -> Sequence['outputs.GetModelsModelResult']:
        """
        The list of models.
        The Models structure is documented below.
        """
        return pulumi.get(self, "models")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Model name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notModelType")
    def not_model_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "not_model_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Model status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Model version.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.str]:
        """
        Workspace ID.  
        Value 0 indicates the default workspace.
        """
        return pulumi.get(self, "workspace_id")


class AwaitableGetModelsResult(GetModelsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetModelsResult(
            description=self.description,
            exact_match=self.exact_match,
            id=self.id,
            model_type=self.model_type,
            models=self.models,
            name=self.name,
            not_model_type=self.not_model_type,
            region=self.region,
            status=self.status,
            version=self.version,
            workspace_id=self.workspace_id)


def get_models(description: Optional[_builtins.str] = None,
               exact_match: Optional[_builtins.str] = None,
               model_type: Optional[_builtins.str] = None,
               name: Optional[_builtins.str] = None,
               not_model_type: Optional[_builtins.str] = None,
               region: Optional[_builtins.str] = None,
               status: Optional[_builtins.str] = None,
               version: Optional[_builtins.str] = None,
               workspace_id: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetModelsResult:
    """
    Use this data source to get models of ModelArts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    model_name = config.require_object("modelName")
    test = huaweicloud.ModelArts.get_models(name=model_name,
        exact_match="true")
    ```


    :param _builtins.str description: The description of the model. Fuzzy match is supported.
    :param _builtins.str exact_match: Whether to use exact match.  
           Set this parameter to **true** to use exact match.
    :param _builtins.str model_type: Model type, which is used for obtaining models of this type.  
           It can be **TensorFlow**, **MXNet**, **Caffe**, **Spark_MLlib**, **Scikit_Learn**,
           **XGBoost**, **Image**, **PyTorch**, or **Template**.
           Either **model_type** or **not_model_type** can be configured.
    :param _builtins.str name: Model name. Fuzzy match is supported. Set **exact_match** to **true** to use exact match.
    :param _builtins.str not_model_type: Model type, which is used for obtaining models of types except for this type.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Model status.  
           Value options are as follows:
           + **publishing**: The model is being published.
           + **published**: The model has been published.
           + **failed**: Publishing the model failed.
           + **building**: The image is being created.
           + **building_failed**: Creating an image failed.
    :param _builtins.str version: Model version.
    :param _builtins.str workspace_id: Workspace ID, which defaults to 0.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['exactMatch'] = exact_match
    __args__['modelType'] = model_type
    __args__['name'] = name
    __args__['notModelType'] = not_model_type
    __args__['region'] = region
    __args__['status'] = status
    __args__['version'] = version
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ModelArts/getModels:getModels', __args__, opts=opts, typ=GetModelsResult).value

    return AwaitableGetModelsResult(
        description=pulumi.get(__ret__, 'description'),
        exact_match=pulumi.get(__ret__, 'exact_match'),
        id=pulumi.get(__ret__, 'id'),
        model_type=pulumi.get(__ret__, 'model_type'),
        models=pulumi.get(__ret__, 'models'),
        name=pulumi.get(__ret__, 'name'),
        not_model_type=pulumi.get(__ret__, 'not_model_type'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        version=pulumi.get(__ret__, 'version'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_models_output(description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      exact_match: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      model_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      not_model_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      workspace_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetModelsResult]:
    """
    Use this data source to get models of ModelArts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    model_name = config.require_object("modelName")
    test = huaweicloud.ModelArts.get_models(name=model_name,
        exact_match="true")
    ```


    :param _builtins.str description: The description of the model. Fuzzy match is supported.
    :param _builtins.str exact_match: Whether to use exact match.  
           Set this parameter to **true** to use exact match.
    :param _builtins.str model_type: Model type, which is used for obtaining models of this type.  
           It can be **TensorFlow**, **MXNet**, **Caffe**, **Spark_MLlib**, **Scikit_Learn**,
           **XGBoost**, **Image**, **PyTorch**, or **Template**.
           Either **model_type** or **not_model_type** can be configured.
    :param _builtins.str name: Model name. Fuzzy match is supported. Set **exact_match** to **true** to use exact match.
    :param _builtins.str not_model_type: Model type, which is used for obtaining models of types except for this type.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Model status.  
           Value options are as follows:
           + **publishing**: The model is being published.
           + **published**: The model has been published.
           + **failed**: Publishing the model failed.
           + **building**: The image is being created.
           + **building_failed**: Creating an image failed.
    :param _builtins.str version: Model version.
    :param _builtins.str workspace_id: Workspace ID, which defaults to 0.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['exactMatch'] = exact_match
    __args__['modelType'] = model_type
    __args__['name'] = name
    __args__['notModelType'] = not_model_type
    __args__['region'] = region
    __args__['status'] = status
    __args__['version'] = version
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ModelArts/getModels:getModels', __args__, opts=opts, typ=GetModelsResult)
    return __ret__.apply(lambda __response__: GetModelsResult(
        description=pulumi.get(__response__, 'description'),
        exact_match=pulumi.get(__response__, 'exact_match'),
        id=pulumi.get(__response__, 'id'),
        model_type=pulumi.get(__response__, 'model_type'),
        models=pulumi.get(__response__, 'models'),
        name=pulumi.get(__response__, 'name'),
        not_model_type=pulumi.get(__response__, 'not_model_type'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        version=pulumi.get(__response__, 'version'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
