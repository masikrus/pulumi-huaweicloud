# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceArgs', 'Service']

@pulumi.input_type
class ServiceArgs:
    def __init__(__self__, *,
                 configs: pulumi.Input[Sequence[pulumi.Input['ServiceConfigArgs']]],
                 infer_type: pulumi.Input[_builtins.str],
                 additional_properties: Optional[pulumi.Input['ServiceAdditionalPropertiesArgs']] = None,
                 change_status_to: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input['ServiceScheduleArgs']] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Service resource.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceConfigArgs']]] configs: Model running configurations.  
               If `infer_type` is **batch** or **edge**, you can configure only one model.
               If `infer_type` is **real-time**, you can configure multiple models and assign weights based on service requirements.
               However, the versions of multiple models must be unique.
               The Config structure is documented below.
        :param pulumi.Input[_builtins.str] infer_type: Inference mode.  
               Value options are as follows:
               + **real-time**: A real-time service. A model is deployed as a web service and provides real-time test UI and monitoring.
               + **batch**: A batch service, which can perform inference on batch data and automatically stops after data is processed.
               + **edge**: An edge service, which uses Intelligent EdgeFabric (IEF) to deploy a model as a web service on an edge
               node created on IEF.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input['ServiceAdditionalPropertiesArgs'] additional_properties: Additional attributes for model deployment, facilitating service instance management.
               
               <a name="ModelartsService_CustomSpec"></a>
               The `CustomSpec` block supports:
        :param pulumi.Input[_builtins.str] change_status_to: Which status you want to change the service to.
               The valid value can be **running** or **stopped**.
               If this parameter is not configured, the service status is not changed.
               
               <a name="ModelartsService_Config"></a>
               The `Config` block supports:
        :param pulumi.Input[_builtins.str] description: The description of the service.
        :param pulumi.Input[_builtins.str] name: Service name, which consists of 1 to 64 characters.  
               Only letters, digits, hyphens (-), and underscores (_) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] pool_name: The ID of the new dedicated resource pool.  
               When using dedicated resource pool to deploy services, ensure that the cluster status is normal.
               If both `pool_name` and `config.pool_name` are configured, `pool_name` in real-time config is preferred.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input['ServiceScheduleArgs'] schedule: Service scheduling configuration, which can be configured only for real-time services.
               If this parameter is configured, the service will be stopped automatically.
               By default, the service runs for a long time.
               The Schedule structure is documented below.
        :param pulumi.Input[_builtins.str] security_group_id: The security group ID.  
               By default, this parameter is left blank.
               This parameter is mandatory if `vpc_id` is configured.
               A security group is a virtual firewall that provides secure network access control policies for service instances.
               A security group must contain at least one inbound rule to permit the requests whose protocol is TCP,
               source address is 0.0.0.0/0, and port number is 8080.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet ID.  
               By default, this parameter is left blank.
               This parameter is mandatory if `vpc_id` is configured.
               Enter the network ID displayed in the subnet details on the VPC management console.
               A subnet provides dedicated network resources that are isolated from other networks.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID to which a real-time service instance is deployed.  
               By default, this parameter is left blank. In this case, ModelArts allocates a dedicated VPC to each user,
               and users are isolated from each other.
               To access other service components in the VPC of the service instance,
               set this parameter to the ID of the corresponding VPC.
               Once a VPC is configured, it cannot be modified. If both `vpc_id` and `pool_name` are configured,
               only the dedicated resource pool takes effect.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: ID of the workspace to which a service belongs.  
               The default value is **0**, indicating the default workspace.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "infer_type", infer_type)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if change_status_to is not None:
            pulumi.set(__self__, "change_status_to", change_status_to)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pool_name is not None:
            pulumi.set(__self__, "pool_name", pool_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceConfigArgs']]]:
        """
        Model running configurations.  
        If `infer_type` is **batch** or **edge**, you can configure only one model.
        If `infer_type` is **real-time**, you can configure multiple models and assign weights based on service requirements.
        However, the versions of multiple models must be unique.
        The Config structure is documented below.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceConfigArgs']]]):
        pulumi.set(self, "configs", value)

    @_builtins.property
    @pulumi.getter(name="inferType")
    def infer_type(self) -> pulumi.Input[_builtins.str]:
        """
        Inference mode.  
        Value options are as follows:
        + **real-time**: A real-time service. A model is deployed as a web service and provides real-time test UI and monitoring.
        + **batch**: A batch service, which can perform inference on batch data and automatically stops after data is processed.
        + **edge**: An edge service, which uses Intelligent EdgeFabric (IEF) to deploy a model as a web service on an edge
        node created on IEF.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "infer_type")

    @infer_type.setter
    def infer_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "infer_type", value)

    @_builtins.property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input['ServiceAdditionalPropertiesArgs']]:
        """
        Additional attributes for model deployment, facilitating service instance management.

        <a name="ModelartsService_CustomSpec"></a>
        The `CustomSpec` block supports:
        """
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input['ServiceAdditionalPropertiesArgs']]):
        pulumi.set(self, "additional_properties", value)

    @_builtins.property
    @pulumi.getter(name="changeStatusTo")
    def change_status_to(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Which status you want to change the service to.
        The valid value can be **running** or **stopped**.
        If this parameter is not configured, the service status is not changed.

        <a name="ModelartsService_Config"></a>
        The `Config` block supports:
        """
        return pulumi.get(self, "change_status_to")

    @change_status_to.setter
    def change_status_to(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "change_status_to", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the service.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service name, which consists of 1 to 64 characters.  
        Only letters, digits, hyphens (-), and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="poolName")
    def pool_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the new dedicated resource pool.  
        When using dedicated resource pool to deploy services, ensure that the cluster status is normal.
        If both `pool_name` and `config.pool_name` are configured, `pool_name` in real-time config is preferred.
        """
        return pulumi.get(self, "pool_name")

    @pool_name.setter
    def pool_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pool_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['ServiceScheduleArgs']]:
        """
        Service scheduling configuration, which can be configured only for real-time services.
        If this parameter is configured, the service will be stopped automatically.
        By default, the service runs for a long time.
        The Schedule structure is documented below.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['ServiceScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The security group ID.  
        By default, this parameter is left blank.
        This parameter is mandatory if `vpc_id` is configured.
        A security group is a virtual firewall that provides secure network access control policies for service instances.
        A security group must contain at least one inbound rule to permit the requests whose protocol is TCP,
        source address is 0.0.0.0/0, and port number is 8080.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subnet ID.  
        By default, this parameter is left blank.
        This parameter is mandatory if `vpc_id` is configured.
        Enter the network ID displayed in the subnet details on the VPC management console.
        A subnet provides dedicated network resources that are isolated from other networks.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC ID to which a real-time service instance is deployed.  
        By default, this parameter is left blank. In this case, ModelArts allocates a dedicated VPC to each user,
        and users are isolated from each other.
        To access other service components in the VPC of the service instance,
        set this parameter to the ID of the corresponding VPC.
        Once a VPC is configured, it cannot be modified. If both `vpc_id` and `pool_name` are configured,
        only the dedicated resource pool takes effect.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the workspace to which a service belongs.  
        The default value is **0**, indicating the default workspace.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class _ServiceState:
    def __init__(__self__, *,
                 access_address: Optional[pulumi.Input[_builtins.str]] = None,
                 additional_properties: Optional[pulumi.Input['ServiceAdditionalPropertiesArgs']] = None,
                 bind_access_address: Optional[pulumi.Input[_builtins.str]] = None,
                 change_status_to: Optional[pulumi.Input[_builtins.str]] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceConfigArgs']]]] = None,
                 debug_url: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 failed_times: Optional[pulumi.Input[_builtins.int]] = None,
                 infer_type: Optional[pulumi.Input[_builtins.str]] = None,
                 invocation_times: Optional[pulumi.Input[_builtins.int]] = None,
                 is_free: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_shared: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input['ServiceScheduleArgs']] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 shared_count: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Service resources.
        :param pulumi.Input[_builtins.str] access_address: Access address of an inference request.  
               This parameter is available when `infer_type` is set to **real-time**.
        :param pulumi.Input['ServiceAdditionalPropertiesArgs'] additional_properties: Additional attributes for model deployment, facilitating service instance management.
               
               <a name="ModelartsService_CustomSpec"></a>
               The `CustomSpec` block supports:
        :param pulumi.Input[_builtins.str] bind_access_address: Request address of a custom domain name.  
               This parameter is available after a domain name is bound.
        :param pulumi.Input[_builtins.str] change_status_to: Which status you want to change the service to.
               The valid value can be **running** or **stopped**.
               If this parameter is not configured, the service status is not changed.
               
               <a name="ModelartsService_Config"></a>
               The `Config` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['ServiceConfigArgs']]] configs: Model running configurations.  
               If `infer_type` is **batch** or **edge**, you can configure only one model.
               If `infer_type` is **real-time**, you can configure multiple models and assign weights based on service requirements.
               However, the versions of multiple models must be unique.
               The Config structure is documented below.
        :param pulumi.Input[_builtins.str] debug_url: Online debugging address of a real-time service.  
               This parameter is available only when the model supports online debugging and there is only one instance.
        :param pulumi.Input[_builtins.str] description: The description of the service.
        :param pulumi.Input[_builtins.int] failed_times: Number of failed service calls.
        :param pulumi.Input[_builtins.str] infer_type: Inference mode.  
               Value options are as follows:
               + **real-time**: A real-time service. A model is deployed as a web service and provides real-time test UI and monitoring.
               + **batch**: A batch service, which can perform inference on batch data and automatically stops after data is processed.
               + **edge**: An edge service, which uses Intelligent EdgeFabric (IEF) to deploy a model as a web service on an edge
               node created on IEF.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] invocation_times: Total number of service calls.
        :param pulumi.Input[_builtins.bool] is_free: Whether a free-of-charge flavor is used.
        :param pulumi.Input[_builtins.bool] is_shared: Whether a service is subscribed.
        :param pulumi.Input[_builtins.str] name: Service name, which consists of 1 to 64 characters.  
               Only letters, digits, hyphens (-), and underscores (_) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] owner: User to which a service belongs
        :param pulumi.Input[_builtins.str] pool_name: The ID of the new dedicated resource pool.  
               When using dedicated resource pool to deploy services, ensure that the cluster status is normal.
               If both `pool_name` and `config.pool_name` are configured, `pool_name` in real-time config is preferred.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input['ServiceScheduleArgs'] schedule: Service scheduling configuration, which can be configured only for real-time services.
               If this parameter is configured, the service will be stopped automatically.
               By default, the service runs for a long time.
               The Schedule structure is documented below.
        :param pulumi.Input[_builtins.str] security_group_id: The security group ID.  
               By default, this parameter is left blank.
               This parameter is mandatory if `vpc_id` is configured.
               A security group is a virtual firewall that provides secure network access control policies for service instances.
               A security group must contain at least one inbound rule to permit the requests whose protocol is TCP,
               source address is 0.0.0.0/0, and port number is 8080.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] shared_count: Number of subscribed services.
        :param pulumi.Input[_builtins.str] status: Service status.  
               Value options are as follows:
               + **running**: The service is running properly.
               + **deploying**: The service is being deployed, including image creation and resource scheduling deployment.
               + **concerning**: An alarm has been generated, indicating that some backend instances malfunction.
               + **failed**: Deploying the service failed. For details about the failure cause, see the event and log tab pages.
               + **stopped**: The service has been stopped.
               + **finished**: Service running is completed. This status is available only for batch services.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet ID.  
               By default, this parameter is left blank.
               This parameter is mandatory if `vpc_id` is configured.
               Enter the network ID displayed in the subnet details on the VPC management console.
               A subnet provides dedicated network resources that are isolated from other networks.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID to which a real-time service instance is deployed.  
               By default, this parameter is left blank. In this case, ModelArts allocates a dedicated VPC to each user,
               and users are isolated from each other.
               To access other service components in the VPC of the service instance,
               set this parameter to the ID of the corresponding VPC.
               Once a VPC is configured, it cannot be modified. If both `vpc_id` and `pool_name` are configured,
               only the dedicated resource pool takes effect.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: ID of the workspace to which a service belongs.  
               The default value is **0**, indicating the default workspace.
               
               Changing this parameter will create a new resource.
        """
        if access_address is not None:
            pulumi.set(__self__, "access_address", access_address)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if bind_access_address is not None:
            pulumi.set(__self__, "bind_access_address", bind_access_address)
        if change_status_to is not None:
            pulumi.set(__self__, "change_status_to", change_status_to)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if debug_url is not None:
            pulumi.set(__self__, "debug_url", debug_url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if failed_times is not None:
            pulumi.set(__self__, "failed_times", failed_times)
        if infer_type is not None:
            pulumi.set(__self__, "infer_type", infer_type)
        if invocation_times is not None:
            pulumi.set(__self__, "invocation_times", invocation_times)
        if is_free is not None:
            pulumi.set(__self__, "is_free", is_free)
        if is_shared is not None:
            pulumi.set(__self__, "is_shared", is_shared)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if pool_name is not None:
            pulumi.set(__self__, "pool_name", pool_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if shared_count is not None:
            pulumi.set(__self__, "shared_count", shared_count)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="accessAddress")
    def access_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Access address of an inference request.  
        This parameter is available when `infer_type` is set to **real-time**.
        """
        return pulumi.get(self, "access_address")

    @access_address.setter
    def access_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_address", value)

    @_builtins.property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input['ServiceAdditionalPropertiesArgs']]:
        """
        Additional attributes for model deployment, facilitating service instance management.

        <a name="ModelartsService_CustomSpec"></a>
        The `CustomSpec` block supports:
        """
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input['ServiceAdditionalPropertiesArgs']]):
        pulumi.set(self, "additional_properties", value)

    @_builtins.property
    @pulumi.getter(name="bindAccessAddress")
    def bind_access_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Request address of a custom domain name.  
        This parameter is available after a domain name is bound.
        """
        return pulumi.get(self, "bind_access_address")

    @bind_access_address.setter
    def bind_access_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bind_access_address", value)

    @_builtins.property
    @pulumi.getter(name="changeStatusTo")
    def change_status_to(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Which status you want to change the service to.
        The valid value can be **running** or **stopped**.
        If this parameter is not configured, the service status is not changed.

        <a name="ModelartsService_Config"></a>
        The `Config` block supports:
        """
        return pulumi.get(self, "change_status_to")

    @change_status_to.setter
    def change_status_to(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "change_status_to", value)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceConfigArgs']]]]:
        """
        Model running configurations.  
        If `infer_type` is **batch** or **edge**, you can configure only one model.
        If `infer_type` is **real-time**, you can configure multiple models and assign weights based on service requirements.
        However, the versions of multiple models must be unique.
        The Config structure is documented below.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @_builtins.property
    @pulumi.getter(name="debugUrl")
    def debug_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Online debugging address of a real-time service.  
        This parameter is available only when the model supports online debugging and there is only one instance.
        """
        return pulumi.get(self, "debug_url")

    @debug_url.setter
    def debug_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "debug_url", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the service.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="failedTimes")
    def failed_times(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of failed service calls.
        """
        return pulumi.get(self, "failed_times")

    @failed_times.setter
    def failed_times(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "failed_times", value)

    @_builtins.property
    @pulumi.getter(name="inferType")
    def infer_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Inference mode.  
        Value options are as follows:
        + **real-time**: A real-time service. A model is deployed as a web service and provides real-time test UI and monitoring.
        + **batch**: A batch service, which can perform inference on batch data and automatically stops after data is processed.
        + **edge**: An edge service, which uses Intelligent EdgeFabric (IEF) to deploy a model as a web service on an edge
        node created on IEF.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "infer_type")

    @infer_type.setter
    def infer_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "infer_type", value)

    @_builtins.property
    @pulumi.getter(name="invocationTimes")
    def invocation_times(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Total number of service calls.
        """
        return pulumi.get(self, "invocation_times")

    @invocation_times.setter
    def invocation_times(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "invocation_times", value)

    @_builtins.property
    @pulumi.getter(name="isFree")
    def is_free(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether a free-of-charge flavor is used.
        """
        return pulumi.get(self, "is_free")

    @is_free.setter
    def is_free(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_free", value)

    @_builtins.property
    @pulumi.getter(name="isShared")
    def is_shared(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether a service is subscribed.
        """
        return pulumi.get(self, "is_shared")

    @is_shared.setter
    def is_shared(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_shared", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service name, which consists of 1 to 64 characters.  
        Only letters, digits, hyphens (-), and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User to which a service belongs
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter(name="poolName")
    def pool_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the new dedicated resource pool.  
        When using dedicated resource pool to deploy services, ensure that the cluster status is normal.
        If both `pool_name` and `config.pool_name` are configured, `pool_name` in real-time config is preferred.
        """
        return pulumi.get(self, "pool_name")

    @pool_name.setter
    def pool_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pool_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['ServiceScheduleArgs']]:
        """
        Service scheduling configuration, which can be configured only for real-time services.
        If this parameter is configured, the service will be stopped automatically.
        By default, the service runs for a long time.
        The Schedule structure is documented below.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['ServiceScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The security group ID.  
        By default, this parameter is left blank.
        This parameter is mandatory if `vpc_id` is configured.
        A security group is a virtual firewall that provides secure network access control policies for service instances.
        A security group must contain at least one inbound rule to permit the requests whose protocol is TCP,
        source address is 0.0.0.0/0, and port number is 8080.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="sharedCount")
    def shared_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of subscribed services.
        """
        return pulumi.get(self, "shared_count")

    @shared_count.setter
    def shared_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "shared_count", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service status.  
        Value options are as follows:
        + **running**: The service is running properly.
        + **deploying**: The service is being deployed, including image creation and resource scheduling deployment.
        + **concerning**: An alarm has been generated, indicating that some backend instances malfunction.
        + **failed**: Deploying the service failed. For details about the failure cause, see the event and log tab pages.
        + **stopped**: The service has been stopped.
        + **finished**: Service running is completed. This status is available only for batch services.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subnet ID.  
        By default, this parameter is left blank.
        This parameter is mandatory if `vpc_id` is configured.
        Enter the network ID displayed in the subnet details on the VPC management console.
        A subnet provides dedicated network resources that are isolated from other networks.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC ID to which a real-time service instance is deployed.  
        By default, this parameter is left blank. In this case, ModelArts allocates a dedicated VPC to each user,
        and users are isolated from each other.
        To access other service components in the VPC of the service instance,
        set this parameter to the ID of the corresponding VPC.
        Once a VPC is configured, it cannot be modified. If both `vpc_id` and `pool_name` are configured,
        only the dedicated resource pool takes effect.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the workspace to which a service belongs.  
        The default value is **0**, indicating the default workspace.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:ModelArts/service:Service")
class Service(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_properties: Optional[pulumi.Input[Union['ServiceAdditionalPropertiesArgs', 'ServiceAdditionalPropertiesArgsDict']]] = None,
                 change_status_to: Optional[pulumi.Input[_builtins.str]] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceConfigArgs', 'ServiceConfigArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 infer_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[Union['ServiceScheduleArgs', 'ServiceScheduleArgsDict']]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a ModelArts service resource within HuaweiCloud.

        ## Example Usage

        ### Create a real-time service

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        model_id = config.require_object("modelId")
        test = huaweicloud.modelarts.Service("test",
            name="demo",
            infer_type="real-time",
            description="This is a demo",
            configs=[{
                "specification": "modelarts.vm.gpu.p4u8.container",
                "instance_count": 1,
                "weight": 100,
                "model_id": model_id,
                "envs": {
                    "a": "1",
                    "b": "2",
                },
            }],
            additional_properties={
                "smn_notification": {
                    "topic_urn": test_huaweicloud_smn_topic["id"],
                    "events": [3],
                },
                "log_report_channels": {
                    "type": "LTS",
                },
            })
        ```

        ### Create a real-time service and configuring it to automatically stop

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        model_id = config.require_object("modelId")
        test = huaweicloud.modelarts.Service("test",
            name="demo",
            infer_type="real-time",
            description="This is a demo",
            configs=[{
                "specification": "modelarts.vm.gpu.p4u8.container",
                "instance_count": 1,
                "weight": 100,
                "model_id": model_id,
                "envs": {
                    "a": "1",
                    "b": "2",
                },
            }],
            additional_properties={
                "smn_notification": {
                    "topic_urn": test_huaweicloud_smn_topic["id"],
                    "events": [3],
                },
                "log_report_channels": {
                    "type": "LTS",
                },
            },
            schedule={
                "type": "stop",
                "duration": 1,
                "time_unit": "HOURS",
            })
        ```

        ## Import

        The modelarts service can be imported using `id` e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/service:Service test 60495dd7-d56b-43c7-8f98-03833833f8e0
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `change_status_to`.

        It is generally recommended running `pulumi preview` after

        importing a dataset. You can then decide if changes should be applied to the dataset, or the resource definition

        should be updated to align with the dataset. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_modelarts_service" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              change_status_to,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ServiceAdditionalPropertiesArgs', 'ServiceAdditionalPropertiesArgsDict']] additional_properties: Additional attributes for model deployment, facilitating service instance management.
               
               <a name="ModelartsService_CustomSpec"></a>
               The `CustomSpec` block supports:
        :param pulumi.Input[_builtins.str] change_status_to: Which status you want to change the service to.
               The valid value can be **running** or **stopped**.
               If this parameter is not configured, the service status is not changed.
               
               <a name="ModelartsService_Config"></a>
               The `Config` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceConfigArgs', 'ServiceConfigArgsDict']]]] configs: Model running configurations.  
               If `infer_type` is **batch** or **edge**, you can configure only one model.
               If `infer_type` is **real-time**, you can configure multiple models and assign weights based on service requirements.
               However, the versions of multiple models must be unique.
               The Config structure is documented below.
        :param pulumi.Input[_builtins.str] description: The description of the service.
        :param pulumi.Input[_builtins.str] infer_type: Inference mode.  
               Value options are as follows:
               + **real-time**: A real-time service. A model is deployed as a web service and provides real-time test UI and monitoring.
               + **batch**: A batch service, which can perform inference on batch data and automatically stops after data is processed.
               + **edge**: An edge service, which uses Intelligent EdgeFabric (IEF) to deploy a model as a web service on an edge
               node created on IEF.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Service name, which consists of 1 to 64 characters.  
               Only letters, digits, hyphens (-), and underscores (_) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] pool_name: The ID of the new dedicated resource pool.  
               When using dedicated resource pool to deploy services, ensure that the cluster status is normal.
               If both `pool_name` and `config.pool_name` are configured, `pool_name` in real-time config is preferred.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['ServiceScheduleArgs', 'ServiceScheduleArgsDict']] schedule: Service scheduling configuration, which can be configured only for real-time services.
               If this parameter is configured, the service will be stopped automatically.
               By default, the service runs for a long time.
               The Schedule structure is documented below.
        :param pulumi.Input[_builtins.str] security_group_id: The security group ID.  
               By default, this parameter is left blank.
               This parameter is mandatory if `vpc_id` is configured.
               A security group is a virtual firewall that provides secure network access control policies for service instances.
               A security group must contain at least one inbound rule to permit the requests whose protocol is TCP,
               source address is 0.0.0.0/0, and port number is 8080.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet ID.  
               By default, this parameter is left blank.
               This parameter is mandatory if `vpc_id` is configured.
               Enter the network ID displayed in the subnet details on the VPC management console.
               A subnet provides dedicated network resources that are isolated from other networks.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID to which a real-time service instance is deployed.  
               By default, this parameter is left blank. In this case, ModelArts allocates a dedicated VPC to each user,
               and users are isolated from each other.
               To access other service components in the VPC of the service instance,
               set this parameter to the ID of the corresponding VPC.
               Once a VPC is configured, it cannot be modified. If both `vpc_id` and `pool_name` are configured,
               only the dedicated resource pool takes effect.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: ID of the workspace to which a service belongs.  
               The default value is **0**, indicating the default workspace.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a ModelArts service resource within HuaweiCloud.

        ## Example Usage

        ### Create a real-time service

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        model_id = config.require_object("modelId")
        test = huaweicloud.modelarts.Service("test",
            name="demo",
            infer_type="real-time",
            description="This is a demo",
            configs=[{
                "specification": "modelarts.vm.gpu.p4u8.container",
                "instance_count": 1,
                "weight": 100,
                "model_id": model_id,
                "envs": {
                    "a": "1",
                    "b": "2",
                },
            }],
            additional_properties={
                "smn_notification": {
                    "topic_urn": test_huaweicloud_smn_topic["id"],
                    "events": [3],
                },
                "log_report_channels": {
                    "type": "LTS",
                },
            })
        ```

        ### Create a real-time service and configuring it to automatically stop

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        model_id = config.require_object("modelId")
        test = huaweicloud.modelarts.Service("test",
            name="demo",
            infer_type="real-time",
            description="This is a demo",
            configs=[{
                "specification": "modelarts.vm.gpu.p4u8.container",
                "instance_count": 1,
                "weight": 100,
                "model_id": model_id,
                "envs": {
                    "a": "1",
                    "b": "2",
                },
            }],
            additional_properties={
                "smn_notification": {
                    "topic_urn": test_huaweicloud_smn_topic["id"],
                    "events": [3],
                },
                "log_report_channels": {
                    "type": "LTS",
                },
            },
            schedule={
                "type": "stop",
                "duration": 1,
                "time_unit": "HOURS",
            })
        ```

        ## Import

        The modelarts service can be imported using `id` e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/service:Service test 60495dd7-d56b-43c7-8f98-03833833f8e0
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `change_status_to`.

        It is generally recommended running `pulumi preview` after

        importing a dataset. You can then decide if changes should be applied to the dataset, or the resource definition

        should be updated to align with the dataset. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_modelarts_service" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              change_status_to,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_properties: Optional[pulumi.Input[Union['ServiceAdditionalPropertiesArgs', 'ServiceAdditionalPropertiesArgsDict']]] = None,
                 change_status_to: Optional[pulumi.Input[_builtins.str]] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceConfigArgs', 'ServiceConfigArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 infer_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[Union['ServiceScheduleArgs', 'ServiceScheduleArgsDict']]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceArgs.__new__(ServiceArgs)

            __props__.__dict__["additional_properties"] = additional_properties
            __props__.__dict__["change_status_to"] = change_status_to
            if configs is None and not opts.urn:
                raise TypeError("Missing required property 'configs'")
            __props__.__dict__["configs"] = configs
            __props__.__dict__["description"] = description
            if infer_type is None and not opts.urn:
                raise TypeError("Missing required property 'infer_type'")
            __props__.__dict__["infer_type"] = infer_type
            __props__.__dict__["name"] = name
            __props__.__dict__["pool_name"] = pool_name
            __props__.__dict__["region"] = region
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["security_group_id"] = security_group_id
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["access_address"] = None
            __props__.__dict__["bind_access_address"] = None
            __props__.__dict__["debug_url"] = None
            __props__.__dict__["failed_times"] = None
            __props__.__dict__["invocation_times"] = None
            __props__.__dict__["is_free"] = None
            __props__.__dict__["is_shared"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["shared_count"] = None
            __props__.__dict__["status"] = None
        super(Service, __self__).__init__(
            'huaweicloud:ModelArts/service:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_address: Optional[pulumi.Input[_builtins.str]] = None,
            additional_properties: Optional[pulumi.Input[Union['ServiceAdditionalPropertiesArgs', 'ServiceAdditionalPropertiesArgsDict']]] = None,
            bind_access_address: Optional[pulumi.Input[_builtins.str]] = None,
            change_status_to: Optional[pulumi.Input[_builtins.str]] = None,
            configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceConfigArgs', 'ServiceConfigArgsDict']]]]] = None,
            debug_url: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            failed_times: Optional[pulumi.Input[_builtins.int]] = None,
            infer_type: Optional[pulumi.Input[_builtins.str]] = None,
            invocation_times: Optional[pulumi.Input[_builtins.int]] = None,
            is_free: Optional[pulumi.Input[_builtins.bool]] = None,
            is_shared: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            owner: Optional[pulumi.Input[_builtins.str]] = None,
            pool_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            schedule: Optional[pulumi.Input[Union['ServiceScheduleArgs', 'ServiceScheduleArgsDict']]] = None,
            security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            shared_count: Optional[pulumi.Input[_builtins.int]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Service':
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_address: Access address of an inference request.  
               This parameter is available when `infer_type` is set to **real-time**.
        :param pulumi.Input[Union['ServiceAdditionalPropertiesArgs', 'ServiceAdditionalPropertiesArgsDict']] additional_properties: Additional attributes for model deployment, facilitating service instance management.
               
               <a name="ModelartsService_CustomSpec"></a>
               The `CustomSpec` block supports:
        :param pulumi.Input[_builtins.str] bind_access_address: Request address of a custom domain name.  
               This parameter is available after a domain name is bound.
        :param pulumi.Input[_builtins.str] change_status_to: Which status you want to change the service to.
               The valid value can be **running** or **stopped**.
               If this parameter is not configured, the service status is not changed.
               
               <a name="ModelartsService_Config"></a>
               The `Config` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceConfigArgs', 'ServiceConfigArgsDict']]]] configs: Model running configurations.  
               If `infer_type` is **batch** or **edge**, you can configure only one model.
               If `infer_type` is **real-time**, you can configure multiple models and assign weights based on service requirements.
               However, the versions of multiple models must be unique.
               The Config structure is documented below.
        :param pulumi.Input[_builtins.str] debug_url: Online debugging address of a real-time service.  
               This parameter is available only when the model supports online debugging and there is only one instance.
        :param pulumi.Input[_builtins.str] description: The description of the service.
        :param pulumi.Input[_builtins.int] failed_times: Number of failed service calls.
        :param pulumi.Input[_builtins.str] infer_type: Inference mode.  
               Value options are as follows:
               + **real-time**: A real-time service. A model is deployed as a web service and provides real-time test UI and monitoring.
               + **batch**: A batch service, which can perform inference on batch data and automatically stops after data is processed.
               + **edge**: An edge service, which uses Intelligent EdgeFabric (IEF) to deploy a model as a web service on an edge
               node created on IEF.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] invocation_times: Total number of service calls.
        :param pulumi.Input[_builtins.bool] is_free: Whether a free-of-charge flavor is used.
        :param pulumi.Input[_builtins.bool] is_shared: Whether a service is subscribed.
        :param pulumi.Input[_builtins.str] name: Service name, which consists of 1 to 64 characters.  
               Only letters, digits, hyphens (-), and underscores (_) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] owner: User to which a service belongs
        :param pulumi.Input[_builtins.str] pool_name: The ID of the new dedicated resource pool.  
               When using dedicated resource pool to deploy services, ensure that the cluster status is normal.
               If both `pool_name` and `config.pool_name` are configured, `pool_name` in real-time config is preferred.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['ServiceScheduleArgs', 'ServiceScheduleArgsDict']] schedule: Service scheduling configuration, which can be configured only for real-time services.
               If this parameter is configured, the service will be stopped automatically.
               By default, the service runs for a long time.
               The Schedule structure is documented below.
        :param pulumi.Input[_builtins.str] security_group_id: The security group ID.  
               By default, this parameter is left blank.
               This parameter is mandatory if `vpc_id` is configured.
               A security group is a virtual firewall that provides secure network access control policies for service instances.
               A security group must contain at least one inbound rule to permit the requests whose protocol is TCP,
               source address is 0.0.0.0/0, and port number is 8080.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] shared_count: Number of subscribed services.
        :param pulumi.Input[_builtins.str] status: Service status.  
               Value options are as follows:
               + **running**: The service is running properly.
               + **deploying**: The service is being deployed, including image creation and resource scheduling deployment.
               + **concerning**: An alarm has been generated, indicating that some backend instances malfunction.
               + **failed**: Deploying the service failed. For details about the failure cause, see the event and log tab pages.
               + **stopped**: The service has been stopped.
               + **finished**: Service running is completed. This status is available only for batch services.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet ID.  
               By default, this parameter is left blank.
               This parameter is mandatory if `vpc_id` is configured.
               Enter the network ID displayed in the subnet details on the VPC management console.
               A subnet provides dedicated network resources that are isolated from other networks.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID to which a real-time service instance is deployed.  
               By default, this parameter is left blank. In this case, ModelArts allocates a dedicated VPC to each user,
               and users are isolated from each other.
               To access other service components in the VPC of the service instance,
               set this parameter to the ID of the corresponding VPC.
               Once a VPC is configured, it cannot be modified. If both `vpc_id` and `pool_name` are configured,
               only the dedicated resource pool takes effect.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: ID of the workspace to which a service belongs.  
               The default value is **0**, indicating the default workspace.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceState.__new__(_ServiceState)

        __props__.__dict__["access_address"] = access_address
        __props__.__dict__["additional_properties"] = additional_properties
        __props__.__dict__["bind_access_address"] = bind_access_address
        __props__.__dict__["change_status_to"] = change_status_to
        __props__.__dict__["configs"] = configs
        __props__.__dict__["debug_url"] = debug_url
        __props__.__dict__["description"] = description
        __props__.__dict__["failed_times"] = failed_times
        __props__.__dict__["infer_type"] = infer_type
        __props__.__dict__["invocation_times"] = invocation_times
        __props__.__dict__["is_free"] = is_free
        __props__.__dict__["is_shared"] = is_shared
        __props__.__dict__["name"] = name
        __props__.__dict__["owner"] = owner
        __props__.__dict__["pool_name"] = pool_name
        __props__.__dict__["region"] = region
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["shared_count"] = shared_count
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["workspace_id"] = workspace_id
        return Service(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessAddress")
    def access_address(self) -> pulumi.Output[_builtins.str]:
        """
        Access address of an inference request.  
        This parameter is available when `infer_type` is set to **real-time**.
        """
        return pulumi.get(self, "access_address")

    @_builtins.property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> pulumi.Output['outputs.ServiceAdditionalProperties']:
        """
        Additional attributes for model deployment, facilitating service instance management.

        <a name="ModelartsService_CustomSpec"></a>
        The `CustomSpec` block supports:
        """
        return pulumi.get(self, "additional_properties")

    @_builtins.property
    @pulumi.getter(name="bindAccessAddress")
    def bind_access_address(self) -> pulumi.Output[_builtins.str]:
        """
        Request address of a custom domain name.  
        This parameter is available after a domain name is bound.
        """
        return pulumi.get(self, "bind_access_address")

    @_builtins.property
    @pulumi.getter(name="changeStatusTo")
    def change_status_to(self) -> pulumi.Output[_builtins.str]:
        """
        Which status you want to change the service to.
        The valid value can be **running** or **stopped**.
        If this parameter is not configured, the service status is not changed.

        <a name="ModelartsService_Config"></a>
        The `Config` block supports:
        """
        return pulumi.get(self, "change_status_to")

    @_builtins.property
    @pulumi.getter
    def configs(self) -> pulumi.Output[Sequence['outputs.ServiceConfig']]:
        """
        Model running configurations.  
        If `infer_type` is **batch** or **edge**, you can configure only one model.
        If `infer_type` is **real-time**, you can configure multiple models and assign weights based on service requirements.
        However, the versions of multiple models must be unique.
        The Config structure is documented below.
        """
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter(name="debugUrl")
    def debug_url(self) -> pulumi.Output[_builtins.str]:
        """
        Online debugging address of a real-time service.  
        This parameter is available only when the model supports online debugging and there is only one instance.
        """
        return pulumi.get(self, "debug_url")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        The description of the service.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="failedTimes")
    def failed_times(self) -> pulumi.Output[_builtins.int]:
        """
        Number of failed service calls.
        """
        return pulumi.get(self, "failed_times")

    @_builtins.property
    @pulumi.getter(name="inferType")
    def infer_type(self) -> pulumi.Output[_builtins.str]:
        """
        Inference mode.  
        Value options are as follows:
        + **real-time**: A real-time service. A model is deployed as a web service and provides real-time test UI and monitoring.
        + **batch**: A batch service, which can perform inference on batch data and automatically stops after data is processed.
        + **edge**: An edge service, which uses Intelligent EdgeFabric (IEF) to deploy a model as a web service on an edge
        node created on IEF.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "infer_type")

    @_builtins.property
    @pulumi.getter(name="invocationTimes")
    def invocation_times(self) -> pulumi.Output[_builtins.int]:
        """
        Total number of service calls.
        """
        return pulumi.get(self, "invocation_times")

    @_builtins.property
    @pulumi.getter(name="isFree")
    def is_free(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether a free-of-charge flavor is used.
        """
        return pulumi.get(self, "is_free")

    @_builtins.property
    @pulumi.getter(name="isShared")
    def is_shared(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether a service is subscribed.
        """
        return pulumi.get(self, "is_shared")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Service name, which consists of 1 to 64 characters.  
        Only letters, digits, hyphens (-), and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Output[_builtins.str]:
        """
        User to which a service belongs
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="poolName")
    def pool_name(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the new dedicated resource pool.  
        When using dedicated resource pool to deploy services, ensure that the cluster status is normal.
        If both `pool_name` and `config.pool_name` are configured, `pool_name` in real-time config is preferred.
        """
        return pulumi.get(self, "pool_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> pulumi.Output['outputs.ServiceSchedule']:
        """
        Service scheduling configuration, which can be configured only for real-time services.
        If this parameter is configured, the service will be stopped automatically.
        By default, the service runs for a long time.
        The Schedule structure is documented below.
        """
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The security group ID.  
        By default, this parameter is left blank.
        This parameter is mandatory if `vpc_id` is configured.
        A security group is a virtual firewall that provides secure network access control policies for service instances.
        A security group must contain at least one inbound rule to permit the requests whose protocol is TCP,
        source address is 0.0.0.0/0, and port number is 8080.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="sharedCount")
    def shared_count(self) -> pulumi.Output[_builtins.int]:
        """
        Number of subscribed services.
        """
        return pulumi.get(self, "shared_count")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Service status.  
        Value options are as follows:
        + **running**: The service is running properly.
        + **deploying**: The service is being deployed, including image creation and resource scheduling deployment.
        + **concerning**: An alarm has been generated, indicating that some backend instances malfunction.
        + **failed**: Deploying the service failed. For details about the failure cause, see the event and log tab pages.
        + **stopped**: The service has been stopped.
        + **finished**: Service running is completed. This status is available only for batch services.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        The subnet ID.  
        By default, this parameter is left blank.
        This parameter is mandatory if `vpc_id` is configured.
        Enter the network ID displayed in the subnet details on the VPC management console.
        A subnet provides dedicated network resources that are isolated from other networks.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        The VPC ID to which a real-time service instance is deployed.  
        By default, this parameter is left blank. In this case, ModelArts allocates a dedicated VPC to each user,
        and users are isolated from each other.
        To access other service components in the VPC of the service instance,
        set this parameter to the ID of the corresponding VPC.
        Once a VPC is configured, it cannot be modified. If both `vpc_id` and `pool_name` are configured,
        only the dedicated resource pool takes effect.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the workspace to which a service belongs.  
        The default value is **0**, indicating the default workspace.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

