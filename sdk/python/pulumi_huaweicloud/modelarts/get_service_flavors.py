# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetServiceFlavorsResult',
    'AwaitableGetServiceFlavorsResult',
    'get_service_flavors',
    'get_service_flavors_output',
]

@pulumi.output_type
class GetServiceFlavorsResult:
    """
    A collection of values returned by getServiceFlavors.
    """
    def __init__(__self__, flavors=None, id=None, infer_type=None, is_free=None, is_open=None, is_personal_cluster=None, region=None, status=None):
        if flavors and not isinstance(flavors, list):
            raise TypeError("Expected argument 'flavors' to be a list")
        pulumi.set(__self__, "flavors", flavors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if infer_type and not isinstance(infer_type, str):
            raise TypeError("Expected argument 'infer_type' to be a str")
        pulumi.set(__self__, "infer_type", infer_type)
        if is_free and not isinstance(is_free, bool):
            raise TypeError("Expected argument 'is_free' to be a bool")
        pulumi.set(__self__, "is_free", is_free)
        if is_open and not isinstance(is_open, bool):
            raise TypeError("Expected argument 'is_open' to be a bool")
        pulumi.set(__self__, "is_open", is_open)
        if is_personal_cluster and not isinstance(is_personal_cluster, bool):
            raise TypeError("Expected argument 'is_personal_cluster' to be a bool")
        pulumi.set(__self__, "is_personal_cluster", is_personal_cluster)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetServiceFlavorsFlavorResult']:
        """
        The list of flavors.
        The flavors structure is documented below.
        """
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="inferType")
    def infer_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "infer_type")

    @_builtins.property
    @pulumi.getter(name="isFree")
    def is_free(self) -> Optional[_builtins.bool]:
        """
        Whether the flavor is free of charge.  
        The value **true** indicates that the flavor is free of charge.
        """
        return pulumi.get(self, "is_free")

    @_builtins.property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> Optional[_builtins.bool]:
        """
        Whether this flavor is open or not.  
        The default value is **true**.
        When the value is **false**, submit a service ticket to apply for the flavor.
        """
        return pulumi.get(self, "is_open")

    @_builtins.property
    @pulumi.getter(name="isPersonalCluster")
    def is_personal_cluster(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_personal_cluster")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Flavor status.  
        The valid values are as follows:
        + **normal**: The flavor is on-sales.
        + **sellout**: The flavor cannot be used to deploy services because it is sold out.
        """
        return pulumi.get(self, "status")


class AwaitableGetServiceFlavorsResult(GetServiceFlavorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceFlavorsResult(
            flavors=self.flavors,
            id=self.id,
            infer_type=self.infer_type,
            is_free=self.is_free,
            is_open=self.is_open,
            is_personal_cluster=self.is_personal_cluster,
            region=self.region,
            status=self.status)


def get_service_flavors(infer_type: Optional[_builtins.str] = None,
                        is_free: Optional[_builtins.bool] = None,
                        is_open: Optional[_builtins.bool] = None,
                        is_personal_cluster: Optional[_builtins.bool] = None,
                        region: Optional[_builtins.str] = None,
                        status: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceFlavorsResult:
    """
    Use this data source to get supported service deployment flavors of ModelArts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    flavors = huaweicloud.ModelArts.get_service_flavors(is_open=True,
        status="normal")
    ```


    :param _builtins.str infer_type: Inference mode.  
           Value options are as follows:
           + **real-time**: A real-time service. A model is deployed as a web service and provides real-time test UI and monitoring.
           + **batch**: A batch service, which can perform inference on batch data and automatically stops after data is processed.
           + **edge**: An edge service, which uses Intelligent EdgeFabric (IEF) to deploy a model as a web service on an edge
           node created on IEF.
    :param _builtins.bool is_free: Whether the flavor is free of charge.  
           The value **true** indicates that the flavor is free of charge.
    :param _builtins.bool is_open: Whether this flavor is open or not.  
           The default value is **true**.
           When the value is **false**, submit a service ticket to apply for the flavor.
    :param _builtins.bool is_personal_cluster: Whether this flavors is supported by dedicated resource pool.
           Defaults to **false**.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Flavor status.  
           The options are as follows:
           + **normal**: The flavor is on-sales.
           + **sellout**: The flavor cannot be used to deploy services because it is sold out.
    """
    __args__ = dict()
    __args__['inferType'] = infer_type
    __args__['isFree'] = is_free
    __args__['isOpen'] = is_open
    __args__['isPersonalCluster'] = is_personal_cluster
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ModelArts/getServiceFlavors:getServiceFlavors', __args__, opts=opts, typ=GetServiceFlavorsResult).value

    return AwaitableGetServiceFlavorsResult(
        flavors=pulumi.get(__ret__, 'flavors'),
        id=pulumi.get(__ret__, 'id'),
        infer_type=pulumi.get(__ret__, 'infer_type'),
        is_free=pulumi.get(__ret__, 'is_free'),
        is_open=pulumi.get(__ret__, 'is_open'),
        is_personal_cluster=pulumi.get(__ret__, 'is_personal_cluster'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_service_flavors_output(infer_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               is_free: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                               is_open: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                               is_personal_cluster: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceFlavorsResult]:
    """
    Use this data source to get supported service deployment flavors of ModelArts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    flavors = huaweicloud.ModelArts.get_service_flavors(is_open=True,
        status="normal")
    ```


    :param _builtins.str infer_type: Inference mode.  
           Value options are as follows:
           + **real-time**: A real-time service. A model is deployed as a web service and provides real-time test UI and monitoring.
           + **batch**: A batch service, which can perform inference on batch data and automatically stops after data is processed.
           + **edge**: An edge service, which uses Intelligent EdgeFabric (IEF) to deploy a model as a web service on an edge
           node created on IEF.
    :param _builtins.bool is_free: Whether the flavor is free of charge.  
           The value **true** indicates that the flavor is free of charge.
    :param _builtins.bool is_open: Whether this flavor is open or not.  
           The default value is **true**.
           When the value is **false**, submit a service ticket to apply for the flavor.
    :param _builtins.bool is_personal_cluster: Whether this flavors is supported by dedicated resource pool.
           Defaults to **false**.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Flavor status.  
           The options are as follows:
           + **normal**: The flavor is on-sales.
           + **sellout**: The flavor cannot be used to deploy services because it is sold out.
    """
    __args__ = dict()
    __args__['inferType'] = infer_type
    __args__['isFree'] = is_free
    __args__['isOpen'] = is_open
    __args__['isPersonalCluster'] = is_personal_cluster
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ModelArts/getServiceFlavors:getServiceFlavors', __args__, opts=opts, typ=GetServiceFlavorsResult)
    return __ret__.apply(lambda __response__: GetServiceFlavorsResult(
        flavors=pulumi.get(__response__, 'flavors'),
        id=pulumi.get(__response__, 'id'),
        infer_type=pulumi.get(__response__, 'infer_type'),
        is_free=pulumi.get(__response__, 'is_free'),
        is_open=pulumi.get(__response__, 'is_open'),
        is_personal_cluster=pulumi.get(__response__, 'is_personal_cluster'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
