# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DevserverArgs', 'Devserver']

@pulumi.input_type
class DevserverArgs:
    def __init__(__self__, *,
                 flavor: pulumi.Input[_builtins.str],
                 image_id: pulumi.Input[_builtins.str],
                 security_group_id: pulumi.Input[_builtins.str],
                 subnet_id: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 key_pair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roce_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume: Optional[pulumi.Input['DevserverRootVolumeArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Devserver resource.
        :param pulumi.Input[_builtins.str] flavor: Specifies the flavor of the DevServer.
               Changing this creates a new resource.
               For the flavor, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html)
               to submit a service ticket to apply for the flavor.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID of the DevServer.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] security_group_id: Specifies the ID of security group to which the DevServer belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the DevServer belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC to which the DevServer belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] admin_pass: Specifies the login password for logging in to the server.
               Changing this creates a new resource.
               The password format must meet the following conditions:
               + Must be `8` to `26` characters.
               + The password must contain at least three types of the following characters: digit, uppercase letter, lowercase letter
               and special characters (!@%-_=+[{}]:,./?).
               + The password cannot be the username or the username spelled backwards
               + The password cannot contain root, administrator or their reverse order.
               
               > Exactly one of `admin_pass` and `key_pair_name` must be provided.
        :param pulumi.Input[_builtins.str] architecture: Specifies the architecture of the DevServer.
               Changing this creates a new resource.
               This parameter value is related to the `flavor` parameter.
               The valid values are as follows:
               + **X86**
               + **ARM**
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Defaults to **false**.  
               This parameter is available if `charging_mode` is set to **PRE_PAID**.
               The valid values are **true** and **false**.
               
               <a name="devServer_root_volume"></a>
               The `root_volume` block supports:
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone where the DevServer is located.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the DevServer.
               Changing this creates a new resource.
               The valid values are as follows:
               + **PRE_PAID**: The yearly/monthly billing mode.
               + **POST_PAID**: The pay-per-use billing mode.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the DevServer belongs.
               Changing this creates a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.bool] ipv6_enable: Specifies whether to enable IPv6.
               Changing this creates a new resource.
               This parameter is available only when the current subnet, flavor and image all support IPv6.
        :param pulumi.Input[_builtins.str] key_pair_name: Specifies the key pair name for logging in to the server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DevServer.
               Changing this creates a new resource.
               The name valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
               allowed.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period of the DevServer.
               Changing this creates a new resource.
               This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit of the DevServer.
               Changing this creates a new resource.
               This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
               The valid values are as follows:
               + **MONTH**
               + **YEAR**
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] roce_id: Specifies the RoCE network ID of the DevServer.
               Changing this creates a new resource.
               This parameter value is related to the `flavor` parameter.
        :param pulumi.Input['DevserverRootVolumeArgs'] root_volume: Specifies the system disk configuration of the DevServer.
               Changing this creates a new resource.
               This parameter is related to the `flavor` parameter.
               The root_volume structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the type of system disk.
               Changing this creates a new resource.
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        :param pulumi.Input[_builtins.str] user_data: Specifies the user data defined for the server.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if admin_pass is not None:
            pulumi.set(__self__, "admin_pass", admin_pass)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if ipv6_enable is not None:
            pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        if key_pair_name is not None:
            pulumi.set(__self__, "key_pair_name", key_pair_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if roce_id is not None:
            pulumi.set(__self__, "roce_id", roce_id)
        if root_volume is not None:
            pulumi.set(__self__, "root_volume", root_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the flavor of the DevServer.
        Changing this creates a new resource.
        For the flavor, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html)
        to submit a service ticket to apply for the flavor.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the image ID of the DevServer.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of security group to which the DevServer belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the subnet to which the DevServer belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the VPC to which the DevServer belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login password for logging in to the server.
        Changing this creates a new resource.
        The password format must meet the following conditions:
        + Must be `8` to `26` characters.
        + The password must contain at least three types of the following characters: digit, uppercase letter, lowercase letter
        and special characters (!@%-_=+[{}]:,./?).
        + The password cannot be the username or the username spelled backwards
        + The password cannot contain root, administrator or their reverse order.

        > Exactly one of `admin_pass` and `key_pair_name` must be provided.
        """
        return pulumi.get(self, "admin_pass")

    @admin_pass.setter
    def admin_pass(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_pass", value)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the architecture of the DevServer.
        Changing this creates a new resource.
        This parameter value is related to the `flavor` parameter.
        The valid values are as follows:
        + **X86**
        + **ARM**
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "architecture", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Defaults to **false**.  
        This parameter is available if `charging_mode` is set to **PRE_PAID**.
        The valid values are **true** and **false**.

        <a name="devServer_root_volume"></a>
        The `root_volume` block supports:
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone where the DevServer is located.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging mode of the DevServer.
        Changing this creates a new resource.
        The valid values are as follows:
        + **PRE_PAID**: The yearly/monthly billing mode.
        + **POST_PAID**: The pay-per-use billing mode.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the DevServer belongs.
        Changing this creates a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable IPv6.
        Changing this creates a new resource.
        This parameter is available only when the current subnet, flavor and image all support IPv6.
        """
        return pulumi.get(self, "ipv6_enable")

    @ipv6_enable.setter
    def ipv6_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_enable", value)

    @_builtins.property
    @pulumi.getter(name="keyPairName")
    def key_pair_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key pair name for logging in to the server.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "key_pair_name")

    @key_pair_name.setter
    def key_pair_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_pair_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the DevServer.
        Changing this creates a new resource.
        The name valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
        allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the charging period of the DevServer.
        Changing this creates a new resource.
        This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging period unit of the DevServer.
        Changing this creates a new resource.
        This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
        The valid values are as follows:
        + **MONTH**
        + **YEAR**
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="roceId")
    def roce_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the RoCE network ID of the DevServer.
        Changing this creates a new resource.
        This parameter value is related to the `flavor` parameter.
        """
        return pulumi.get(self, "roce_id")

    @roce_id.setter
    def roce_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "roce_id", value)

    @_builtins.property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> Optional[pulumi.Input['DevserverRootVolumeArgs']]:
        """
        Specifies the system disk configuration of the DevServer.
        Changing this creates a new resource.
        This parameter is related to the `flavor` parameter.
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volume")

    @root_volume.setter
    def root_volume(self, value: Optional[pulumi.Input['DevserverRootVolumeArgs']]):
        pulumi.set(self, "root_volume", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of system disk.
        Changing this creates a new resource.
        The valid values are as follows:
        + **ESSD**: Extreme SSD type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SAS**: High I/O type.
        + **SATA**: Common I/O type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user data defined for the server.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class _DevserverState:
    def __init__(__self__, *,
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 key_pair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roce_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume: Optional[pulumi.Input['DevserverRootVolumeArgs']] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Devserver resources.
        :param pulumi.Input[_builtins.str] admin_pass: Specifies the login password for logging in to the server.
               Changing this creates a new resource.
               The password format must meet the following conditions:
               + Must be `8` to `26` characters.
               + The password must contain at least three types of the following characters: digit, uppercase letter, lowercase letter
               and special characters (!@%-_=+[{}]:,./?).
               + The password cannot be the username or the username spelled backwards
               + The password cannot contain root, administrator or their reverse order.
               
               > Exactly one of `admin_pass` and `key_pair_name` must be provided.
        :param pulumi.Input[_builtins.str] architecture: Specifies the architecture of the DevServer.
               Changing this creates a new resource.
               This parameter value is related to the `flavor` parameter.
               The valid values are as follows:
               + **X86**
               + **ARM**
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Defaults to **false**.  
               This parameter is available if `charging_mode` is set to **PRE_PAID**.
               The valid values are **true** and **false**.
               
               <a name="devServer_root_volume"></a>
               The `root_volume` block supports:
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone where the DevServer is located.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the DevServer.
               Changing this creates a new resource.
               The valid values are as follows:
               + **PRE_PAID**: The yearly/monthly billing mode.
               + **POST_PAID**: The pay-per-use billing mode.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the DevServer, in RFC3339 format.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the DevServer belongs.
               Changing this creates a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] flavor: Specifies the flavor of the DevServer.
               Changing this creates a new resource.
               For the flavor, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html)
               to submit a service ticket to apply for the flavor.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID of the DevServer.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] ipv6_enable: Specifies whether to enable IPv6.
               Changing this creates a new resource.
               This parameter is available only when the current subnet, flavor and image all support IPv6.
        :param pulumi.Input[_builtins.str] key_pair_name: Specifies the key pair name for logging in to the server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DevServer.
               Changing this creates a new resource.
               The name valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
               allowed.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period of the DevServer.
               Changing this creates a new resource.
               This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit of the DevServer.
               Changing this creates a new resource.
               This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
               The valid values are as follows:
               + **MONTH**
               + **YEAR**
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] roce_id: Specifies the RoCE network ID of the DevServer.
               Changing this creates a new resource.
               This parameter value is related to the `flavor` parameter.
        :param pulumi.Input['DevserverRootVolumeArgs'] root_volume: Specifies the system disk configuration of the DevServer.
               Changing this creates a new resource.
               This parameter is related to the `flavor` parameter.
               The root_volume structure is documented below.
        :param pulumi.Input[_builtins.str] security_group_id: Specifies the ID of security group to which the DevServer belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the DevServer belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of system disk.
               Changing this creates a new resource.
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        :param pulumi.Input[_builtins.str] user_data: Specifies the user data defined for the server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC to which the DevServer belongs.
               Changing this creates a new resource.
        """
        if admin_pass is not None:
            pulumi.set(__self__, "admin_pass", admin_pass)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if ipv6_enable is not None:
            pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        if key_pair_name is not None:
            pulumi.set(__self__, "key_pair_name", key_pair_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if roce_id is not None:
            pulumi.set(__self__, "roce_id", roce_id)
        if root_volume is not None:
            pulumi.set(__self__, "root_volume", root_volume)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login password for logging in to the server.
        Changing this creates a new resource.
        The password format must meet the following conditions:
        + Must be `8` to `26` characters.
        + The password must contain at least three types of the following characters: digit, uppercase letter, lowercase letter
        and special characters (!@%-_=+[{}]:,./?).
        + The password cannot be the username or the username spelled backwards
        + The password cannot contain root, administrator or their reverse order.

        > Exactly one of `admin_pass` and `key_pair_name` must be provided.
        """
        return pulumi.get(self, "admin_pass")

    @admin_pass.setter
    def admin_pass(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_pass", value)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the architecture of the DevServer.
        Changing this creates a new resource.
        This parameter value is related to the `flavor` parameter.
        The valid values are as follows:
        + **X86**
        + **ARM**
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "architecture", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Defaults to **false**.  
        This parameter is available if `charging_mode` is set to **PRE_PAID**.
        The valid values are **true** and **false**.

        <a name="devServer_root_volume"></a>
        The `root_volume` block supports:
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone where the DevServer is located.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging mode of the DevServer.
        Changing this creates a new resource.
        The valid values are as follows:
        + **PRE_PAID**: The yearly/monthly billing mode.
        + **POST_PAID**: The pay-per-use billing mode.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the DevServer, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the DevServer belongs.
        Changing this creates a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the flavor of the DevServer.
        Changing this creates a new resource.
        For the flavor, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html)
        to submit a service ticket to apply for the flavor.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image ID of the DevServer.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable IPv6.
        Changing this creates a new resource.
        This parameter is available only when the current subnet, flavor and image all support IPv6.
        """
        return pulumi.get(self, "ipv6_enable")

    @ipv6_enable.setter
    def ipv6_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_enable", value)

    @_builtins.property
    @pulumi.getter(name="keyPairName")
    def key_pair_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key pair name for logging in to the server.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "key_pair_name")

    @key_pair_name.setter
    def key_pair_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_pair_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the DevServer.
        Changing this creates a new resource.
        The name valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
        allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the charging period of the DevServer.
        Changing this creates a new resource.
        This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging period unit of the DevServer.
        Changing this creates a new resource.
        This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
        The valid values are as follows:
        + **MONTH**
        + **YEAR**
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="roceId")
    def roce_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the RoCE network ID of the DevServer.
        Changing this creates a new resource.
        This parameter value is related to the `flavor` parameter.
        """
        return pulumi.get(self, "roce_id")

    @roce_id.setter
    def roce_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "roce_id", value)

    @_builtins.property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> Optional[pulumi.Input['DevserverRootVolumeArgs']]:
        """
        Specifies the system disk configuration of the DevServer.
        Changing this creates a new resource.
        This parameter is related to the `flavor` parameter.
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volume")

    @root_volume.setter
    def root_volume(self, value: Optional[pulumi.Input['DevserverRootVolumeArgs']]):
        pulumi.set(self, "root_volume", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of security group to which the DevServer belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the subnet to which the DevServer belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of system disk.
        Changing this creates a new resource.
        The valid values are as follows:
        + **ESSD**: Extreme SSD type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SAS**: High I/O type.
        + **SATA**: Common I/O type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user data defined for the server.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_data", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the VPC to which the DevServer belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:ModelArts/devserver:Devserver")
class Devserver(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 key_pair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roce_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume: Optional[pulumi.Input[Union['DevserverRootVolumeArgs', 'DevserverRootVolumeArgsDict']]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a ModelArts DevServer resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_name = config.require_object("serverName")
        server_flavor = config.require_object("serverFlavor")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        security_group_id = config.require_object("securityGroupId")
        image_id = config.require_object("imageId")
        admin_pass = config.require_object("adminPass")
        test = huaweicloud.modelarts.Devserver("test",
            name=server_name,
            flavor=server_flavor,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            security_group_id=security_group_id,
            image_id=image_id,
            admin_pass=admin_pass,
            root_volume={
                "size": 100,
                "type": "SSD",
            },
            charging_mode="PRE_PAID",
            period=1,
            period_unit="MONTH",
            auto_renew="true")
        ```

        ## Import

        The DevServer resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/devserver:Devserver test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `subnet_id`, `security_group_id`, `availability_zone`, `admin_pass`,

        `enterprise_project_id`, `root_volume`, `ipv6_enable`, `roce_id`, `user_data`, `period_unit`, `period`, `auto_renew`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_modelarts_devserver" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              subnet_id, security_group_id, availability_zone, admin_pass, enterprise_project_id, root_volume, ipv6_enable,
            
              roce_id, user_data, period_unit, period, auto_renew,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] admin_pass: Specifies the login password for logging in to the server.
               Changing this creates a new resource.
               The password format must meet the following conditions:
               + Must be `8` to `26` characters.
               + The password must contain at least three types of the following characters: digit, uppercase letter, lowercase letter
               and special characters (!@%-_=+[{}]:,./?).
               + The password cannot be the username or the username spelled backwards
               + The password cannot contain root, administrator or their reverse order.
               
               > Exactly one of `admin_pass` and `key_pair_name` must be provided.
        :param pulumi.Input[_builtins.str] architecture: Specifies the architecture of the DevServer.
               Changing this creates a new resource.
               This parameter value is related to the `flavor` parameter.
               The valid values are as follows:
               + **X86**
               + **ARM**
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Defaults to **false**.  
               This parameter is available if `charging_mode` is set to **PRE_PAID**.
               The valid values are **true** and **false**.
               
               <a name="devServer_root_volume"></a>
               The `root_volume` block supports:
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone where the DevServer is located.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the DevServer.
               Changing this creates a new resource.
               The valid values are as follows:
               + **PRE_PAID**: The yearly/monthly billing mode.
               + **POST_PAID**: The pay-per-use billing mode.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the DevServer belongs.
               Changing this creates a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] flavor: Specifies the flavor of the DevServer.
               Changing this creates a new resource.
               For the flavor, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html)
               to submit a service ticket to apply for the flavor.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID of the DevServer.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] ipv6_enable: Specifies whether to enable IPv6.
               Changing this creates a new resource.
               This parameter is available only when the current subnet, flavor and image all support IPv6.
        :param pulumi.Input[_builtins.str] key_pair_name: Specifies the key pair name for logging in to the server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DevServer.
               Changing this creates a new resource.
               The name valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
               allowed.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period of the DevServer.
               Changing this creates a new resource.
               This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit of the DevServer.
               Changing this creates a new resource.
               This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
               The valid values are as follows:
               + **MONTH**
               + **YEAR**
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] roce_id: Specifies the RoCE network ID of the DevServer.
               Changing this creates a new resource.
               This parameter value is related to the `flavor` parameter.
        :param pulumi.Input[Union['DevserverRootVolumeArgs', 'DevserverRootVolumeArgsDict']] root_volume: Specifies the system disk configuration of the DevServer.
               Changing this creates a new resource.
               This parameter is related to the `flavor` parameter.
               The root_volume structure is documented below.
        :param pulumi.Input[_builtins.str] security_group_id: Specifies the ID of security group to which the DevServer belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the DevServer belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of system disk.
               Changing this creates a new resource.
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        :param pulumi.Input[_builtins.str] user_data: Specifies the user data defined for the server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC to which the DevServer belongs.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DevserverArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a ModelArts DevServer resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_name = config.require_object("serverName")
        server_flavor = config.require_object("serverFlavor")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        security_group_id = config.require_object("securityGroupId")
        image_id = config.require_object("imageId")
        admin_pass = config.require_object("adminPass")
        test = huaweicloud.modelarts.Devserver("test",
            name=server_name,
            flavor=server_flavor,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            security_group_id=security_group_id,
            image_id=image_id,
            admin_pass=admin_pass,
            root_volume={
                "size": 100,
                "type": "SSD",
            },
            charging_mode="PRE_PAID",
            period=1,
            period_unit="MONTH",
            auto_renew="true")
        ```

        ## Import

        The DevServer resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/devserver:Devserver test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `subnet_id`, `security_group_id`, `availability_zone`, `admin_pass`,

        `enterprise_project_id`, `root_volume`, `ipv6_enable`, `roce_id`, `user_data`, `period_unit`, `period`, `auto_renew`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_modelarts_devserver" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              subnet_id, security_group_id, availability_zone, admin_pass, enterprise_project_id, root_volume, ipv6_enable,
            
              roce_id, user_data, period_unit, period, auto_renew,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DevserverArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DevserverArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 key_pair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roce_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume: Optional[pulumi.Input[Union['DevserverRootVolumeArgs', 'DevserverRootVolumeArgsDict']]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DevserverArgs.__new__(DevserverArgs)

            __props__.__dict__["admin_pass"] = None if admin_pass is None else pulumi.Output.secret(admin_pass)
            __props__.__dict__["architecture"] = architecture
            __props__.__dict__["auto_renew"] = auto_renew
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["charging_mode"] = charging_mode
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if flavor is None and not opts.urn:
                raise TypeError("Missing required property 'flavor'")
            __props__.__dict__["flavor"] = flavor
            if image_id is None and not opts.urn:
                raise TypeError("Missing required property 'image_id'")
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["ipv6_enable"] = ipv6_enable
            __props__.__dict__["key_pair_name"] = key_pair_name
            __props__.__dict__["name"] = name
            __props__.__dict__["period"] = period
            __props__.__dict__["period_unit"] = period_unit
            __props__.__dict__["region"] = region
            __props__.__dict__["roce_id"] = roce_id
            __props__.__dict__["root_volume"] = root_volume
            if security_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'security_group_id'")
            __props__.__dict__["security_group_id"] = security_group_id
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["type"] = type
            __props__.__dict__["user_data"] = user_data
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["created_at"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["adminPass"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Devserver, __self__).__init__(
            'huaweicloud:ModelArts/devserver:Devserver',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
            architecture: Optional[pulumi.Input[_builtins.str]] = None,
            auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            flavor: Optional[pulumi.Input[_builtins.str]] = None,
            image_id: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_enable: Optional[pulumi.Input[_builtins.bool]] = None,
            key_pair_name: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            period: Optional[pulumi.Input[_builtins.int]] = None,
            period_unit: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            roce_id: Optional[pulumi.Input[_builtins.str]] = None,
            root_volume: Optional[pulumi.Input[Union['DevserverRootVolumeArgs', 'DevserverRootVolumeArgsDict']]] = None,
            security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            user_data: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Devserver':
        """
        Get an existing Devserver resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] admin_pass: Specifies the login password for logging in to the server.
               Changing this creates a new resource.
               The password format must meet the following conditions:
               + Must be `8` to `26` characters.
               + The password must contain at least three types of the following characters: digit, uppercase letter, lowercase letter
               and special characters (!@%-_=+[{}]:,./?).
               + The password cannot be the username or the username spelled backwards
               + The password cannot contain root, administrator or their reverse order.
               
               > Exactly one of `admin_pass` and `key_pair_name` must be provided.
        :param pulumi.Input[_builtins.str] architecture: Specifies the architecture of the DevServer.
               Changing this creates a new resource.
               This parameter value is related to the `flavor` parameter.
               The valid values are as follows:
               + **X86**
               + **ARM**
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Defaults to **false**.  
               This parameter is available if `charging_mode` is set to **PRE_PAID**.
               The valid values are **true** and **false**.
               
               <a name="devServer_root_volume"></a>
               The `root_volume` block supports:
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone where the DevServer is located.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the DevServer.
               Changing this creates a new resource.
               The valid values are as follows:
               + **PRE_PAID**: The yearly/monthly billing mode.
               + **POST_PAID**: The pay-per-use billing mode.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the DevServer, in RFC3339 format.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the DevServer belongs.
               Changing this creates a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] flavor: Specifies the flavor of the DevServer.
               Changing this creates a new resource.
               For the flavor, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html)
               to submit a service ticket to apply for the flavor.
        :param pulumi.Input[_builtins.str] image_id: Specifies the image ID of the DevServer.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] ipv6_enable: Specifies whether to enable IPv6.
               Changing this creates a new resource.
               This parameter is available only when the current subnet, flavor and image all support IPv6.
        :param pulumi.Input[_builtins.str] key_pair_name: Specifies the key pair name for logging in to the server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DevServer.
               Changing this creates a new resource.
               The name valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
               allowed.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period of the DevServer.
               Changing this creates a new resource.
               This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit of the DevServer.
               Changing this creates a new resource.
               This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
               The valid values are as follows:
               + **MONTH**
               + **YEAR**
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] roce_id: Specifies the RoCE network ID of the DevServer.
               Changing this creates a new resource.
               This parameter value is related to the `flavor` parameter.
        :param pulumi.Input[Union['DevserverRootVolumeArgs', 'DevserverRootVolumeArgsDict']] root_volume: Specifies the system disk configuration of the DevServer.
               Changing this creates a new resource.
               This parameter is related to the `flavor` parameter.
               The root_volume structure is documented below.
        :param pulumi.Input[_builtins.str] security_group_id: Specifies the ID of security group to which the DevServer belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the DevServer belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of system disk.
               Changing this creates a new resource.
               The valid values are as follows:
               + **ESSD**: Extreme SSD type.
               + **SSD**: Ultra-high I/O type.
               + **GPSSD**: General purpose SSD type.
               + **SAS**: High I/O type.
               + **SATA**: Common I/O type.
        :param pulumi.Input[_builtins.str] user_data: Specifies the user data defined for the server.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC to which the DevServer belongs.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DevserverState.__new__(_DevserverState)

        __props__.__dict__["admin_pass"] = admin_pass
        __props__.__dict__["architecture"] = architecture
        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["flavor"] = flavor
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["ipv6_enable"] = ipv6_enable
        __props__.__dict__["key_pair_name"] = key_pair_name
        __props__.__dict__["name"] = name
        __props__.__dict__["period"] = period
        __props__.__dict__["period_unit"] = period_unit
        __props__.__dict__["region"] = region
        __props__.__dict__["roce_id"] = roce_id
        __props__.__dict__["root_volume"] = root_volume
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["type"] = type
        __props__.__dict__["user_data"] = user_data
        __props__.__dict__["vpc_id"] = vpc_id
        return Devserver(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the login password for logging in to the server.
        Changing this creates a new resource.
        The password format must meet the following conditions:
        + Must be `8` to `26` characters.
        + The password must contain at least three types of the following characters: digit, uppercase letter, lowercase letter
        and special characters (!@%-_=+[{}]:,./?).
        + The password cannot be the username or the username spelled backwards
        + The password cannot contain root, administrator or their reverse order.

        > Exactly one of `admin_pass` and `key_pair_name` must be provided.
        """
        return pulumi.get(self, "admin_pass")

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the architecture of the DevServer.
        Changing this creates a new resource.
        This parameter value is related to the `flavor` parameter.
        The valid values are as follows:
        + **X86**
        + **ARM**
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Defaults to **false**.  
        This parameter is available if `charging_mode` is set to **PRE_PAID**.
        The valid values are **true** and **false**.

        <a name="devServer_root_volume"></a>
        The `root_volume` block supports:
        """
        return pulumi.get(self, "auto_renew")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the availability zone where the DevServer is located.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the charging mode of the DevServer.
        Changing this creates a new resource.
        The valid values are as follows:
        + **PRE_PAID**: The yearly/monthly billing mode.
        + **POST_PAID**: The pay-per-use billing mode.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the DevServer, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the DevServer belongs.
        Changing this creates a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the flavor of the DevServer.
        Changing this creates a new resource.
        For the flavor, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html)
        to submit a service ticket to apply for the flavor.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the image ID of the DevServer.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable IPv6.
        Changing this creates a new resource.
        This parameter is available only when the current subnet, flavor and image all support IPv6.
        """
        return pulumi.get(self, "ipv6_enable")

    @_builtins.property
    @pulumi.getter(name="keyPairName")
    def key_pair_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the key pair name for logging in to the server.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "key_pair_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the DevServer.
        Changing this creates a new resource.
        The name valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
        allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the charging period of the DevServer.
        Changing this creates a new resource.
        This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the charging period unit of the DevServer.
        Changing this creates a new resource.
        This parameter is required and available if `charging_mode` is set to **PRE_PAID**.
        The valid values are as follows:
        + **MONTH**
        + **YEAR**
        """
        return pulumi.get(self, "period_unit")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="roceId")
    def roce_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the RoCE network ID of the DevServer.
        Changing this creates a new resource.
        This parameter value is related to the `flavor` parameter.
        """
        return pulumi.get(self, "roce_id")

    @_builtins.property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> pulumi.Output[Optional['outputs.DevserverRootVolume']]:
        """
        Specifies the system disk configuration of the DevServer.
        Changing this creates a new resource.
        This parameter is related to the `flavor` parameter.
        The root_volume structure is documented below.
        """
        return pulumi.get(self, "root_volume")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of security group to which the DevServer belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the subnet to which the DevServer belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of system disk.
        Changing this creates a new resource.
        The valid values are as follows:
        + **ESSD**: Extreme SSD type.
        + **SSD**: Ultra-high I/O type.
        + **GPSSD**: General purpose SSD type.
        + **SAS**: High I/O type.
        + **SATA**: Common I/O type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the user data defined for the server.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "user_data")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the VPC to which the DevServer belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "vpc_id")

