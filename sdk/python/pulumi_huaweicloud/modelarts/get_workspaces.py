# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetWorkspacesResult',
    'AwaitableGetWorkspacesResult',
    'get_workspaces',
    'get_workspaces_output',
]

@pulumi.output_type
class GetWorkspacesResult:
    """
    A collection of values returned by getWorkspaces.
    """
    def __init__(__self__, enterprise_project_id=None, filter_accessible=None, id=None, name=None, region=None, workspaces=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if filter_accessible and not isinstance(filter_accessible, bool):
            raise TypeError("Expected argument 'filter_accessible' to be a bool")
        pulumi.set(__self__, "filter_accessible", filter_accessible)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if workspaces and not isinstance(workspaces, list):
            raise TypeError("Expected argument 'workspaces' to be a list")
        pulumi.set(__self__, "workspaces", workspaces)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID to which the workspace belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="filterAccessible")
    def filter_accessible(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "filter_accessible")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Workspace name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def workspaces(self) -> Sequence['outputs.GetWorkspacesWorkspaceResult']:
        """
        The list of workspaces.
        The workspaces structure is documented below.
        """
        return pulumi.get(self, "workspaces")


class AwaitableGetWorkspacesResult(GetWorkspacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkspacesResult(
            enterprise_project_id=self.enterprise_project_id,
            filter_accessible=self.filter_accessible,
            id=self.id,
            name=self.name,
            region=self.region,
            workspaces=self.workspaces)


def get_workspaces(enterprise_project_id: Optional[_builtins.str] = None,
                   filter_accessible: Optional[_builtins.bool] = None,
                   name: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkspacesResult:
    """
    Use this data source to get workspaces of ModelArts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_name = config.require_object("workspaceName")
    test = huaweicloud.ModelArts.get_workspaces(name=workspace_name)
    ```


    :param _builtins.str enterprise_project_id: The enterprise project ID to which the workspace belongs.
    :param _builtins.bool filter_accessible: Whether to filter that the current user does not have permission to access.  
           Defaults to **false**, query all workspaces.
    :param _builtins.str name: Workspace name. Fuzzy match is supported.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['filterAccessible'] = filter_accessible
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ModelArts/getWorkspaces:getWorkspaces', __args__, opts=opts, typ=GetWorkspacesResult).value

    return AwaitableGetWorkspacesResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        filter_accessible=pulumi.get(__ret__, 'filter_accessible'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        workspaces=pulumi.get(__ret__, 'workspaces'))
def get_workspaces_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          filter_accessible: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkspacesResult]:
    """
    Use this data source to get workspaces of ModelArts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_name = config.require_object("workspaceName")
    test = huaweicloud.ModelArts.get_workspaces(name=workspace_name)
    ```


    :param _builtins.str enterprise_project_id: The enterprise project ID to which the workspace belongs.
    :param _builtins.bool filter_accessible: Whether to filter that the current user does not have permission to access.  
           Defaults to **false**, query all workspaces.
    :param _builtins.str name: Workspace name. Fuzzy match is supported.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['filterAccessible'] = filter_accessible
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ModelArts/getWorkspaces:getWorkspaces', __args__, opts=opts, typ=GetWorkspacesResult)
    return __ret__.apply(lambda __response__: GetWorkspacesResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        filter_accessible=pulumi.get(__response__, 'filter_accessible'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        workspaces=pulumi.get(__response__, 'workspaces')))
