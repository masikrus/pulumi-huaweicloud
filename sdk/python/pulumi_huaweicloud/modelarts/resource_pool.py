# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourcePoolArgs', 'ResourcePool']

@pulumi.input_type
class ResourcePoolArgs:
    def __init__(__self__, *,
                 resources: pulumi.Input[Sequence[pulumi.Input['ResourcePoolResourceArgs']]],
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolClusterArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input['ResourcePoolMetadataArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_login: Optional[pulumi.Input['ResourcePoolUserLoginArgs']] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ResourcePool resource.
        :param pulumi.Input[Sequence[pulumi.Input['ResourcePoolResourceArgs']]] resources: Specifies the list of resource specifications in the resource pool.  
               Including resource flavors and the number of resources of the corresponding flavors.
               The resources structure is documented below.
               
               > If there are billing nodes in the resource pool, you cannot scale down or delete the node pool through this resource.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
               
               > 1. `charging_mode`, `period_unit`, `period`, `auto_renew` are mandatory when `vpc_id` is specified.
               <br>2. When creating a resource pool, if the `charging_mode`, `period_unit`, `period` and `auto_renew` parameters
               and subscription parameters in the `metadata.annotations` are specified at the same time, the former will take precedence.
               
               <a name="ModelartsResourcePool_ResourceFlavor"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the resource pool.
               Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ResourcePoolClusterArgs']]] clusters: Specifies the list of the CCE clusters. It is mandatory when `vpc_id` is
               specified and can not be specified when `network_id` is specified.
               The clusters structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the dedicated resource pool.  
               This parameter and `os.modelarts/description` in `metadata.annotations` are set at the same time, the former will
               take precedence.
        :param pulumi.Input['ResourcePoolMetadataArgs'] metadata: Specifies the metadata of the dedicated resource pool.
               The metadata structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the OS name of the image.
        :param pulumi.Input[_builtins.str] network_id: Specifies the ModelArt network ID of the resource pool.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period of the resource pool.
               If `period_unit` is set to **month**, the value ranges from `1` to `9`.
               If `period_unit` is set to **year**, the value ranges from `1` to `3`.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit of the resource pool.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] prefix: Specifies the prefix of the user-defined node name of the resource pool.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scopes: Specifies the list of job types supported by the resource pool. It is mandatory when
               `network_id` is specified and can not be specified when `vpc_id` is specified. The options are as follows:
               + **Train**: training job.
               + **Infer**: inference job.
               + **Notebook**: Notebook job.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of a subnet. It is mandatory when
               `resources.security_group_ids`is specified, and can not be specified when `network_id` is specified.
        :param pulumi.Input['ResourcePoolUserLoginArgs'] user_login: Specifies the user login info of the resource pool. It is mandatory when
               `vpc_id` is specified and can not be specified when `network_id` is specified.
               The user_login structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID. It is mandatory when `resources.subnet_id`,
               `resources.security_group_ids` is specified, and can not be specified when `network_id` is specified.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID, which defaults to **0**.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "resources", resources)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if user_login is not None:
            pulumi.set(__self__, "user_login", user_login)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Input[Sequence[pulumi.Input['ResourcePoolResourceArgs']]]:
        """
        Specifies the list of resource specifications in the resource pool.  
        Including resource flavors and the number of resources of the corresponding flavors.
        The resources structure is documented below.

        > If there are billing nodes in the resource pool, you cannot scale down or delete the node pool through this resource.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input[Sequence[pulumi.Input['ResourcePoolResourceArgs']]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Valid values are **true** and **false**.

        > 1. `charging_mode`, `period_unit`, `period`, `auto_renew` are mandatory when `vpc_id` is specified.
        <br>2. When creating a resource pool, if the `charging_mode`, `period_unit`, `period` and `auto_renew` parameters
        and subscription parameters in the `metadata.annotations` are specified at the same time, the former will take precedence.

        <a name="ModelartsResourcePool_ResourceFlavor"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging mode of the resource pool.
        Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolClusterArgs']]]]:
        """
        Specifies the list of the CCE clusters. It is mandatory when `vpc_id` is
        specified and can not be specified when `network_id` is specified.
        The clusters structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolClusterArgs']]]]):
        pulumi.set(self, "clusters", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the dedicated resource pool.  
        This parameter and `os.modelarts/description` in `metadata.annotations` are set at the same time, the former will
        take precedence.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ResourcePoolMetadataArgs']]:
        """
        Specifies the metadata of the dedicated resource pool.
        The metadata structure is documented below.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ResourcePoolMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OS name of the image.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ModelArt network ID of the resource pool.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the charging period of the resource pool.
        If `period_unit` is set to **month**, the value ranges from `1` to `9`.
        If `period_unit` is set to **year**, the value ranges from `1` to `3`.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging period unit of the resource pool.
        Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the prefix of the user-defined node name of the resource pool.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of job types supported by the resource pool. It is mandatory when
        `network_id` is specified and can not be specified when `vpc_id` is specified. The options are as follows:
        + **Train**: training job.
        + **Infer**: inference job.
        + **Notebook**: Notebook job.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "scopes", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network ID of a subnet. It is mandatory when
        `resources.security_group_ids`is specified, and can not be specified when `network_id` is specified.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="userLogin")
    def user_login(self) -> Optional[pulumi.Input['ResourcePoolUserLoginArgs']]:
        """
        Specifies the user login info of the resource pool. It is mandatory when
        `vpc_id` is specified and can not be specified when `network_id` is specified.
        The user_login structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_login")

    @user_login.setter
    def user_login(self, value: Optional[pulumi.Input['ResourcePoolUserLoginArgs']]):
        pulumi.set(self, "user_login", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the VPC ID. It is mandatory when `resources.subnet_id`,
        `resources.security_group_ids` is specified, and can not be specified when `network_id` is specified.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID, which defaults to **0**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class _ResourcePoolState:
    def __init__(__self__, *,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolClusterArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input['ResourcePoolMetadataArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolResourceArgs']]]] = None,
                 resources_order_origins: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolResourcesOrderOriginArgs']]]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 server_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_login: Optional[pulumi.Input['ResourcePoolUserLoginArgs']] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ResourcePool resources.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
               
               > 1. `charging_mode`, `period_unit`, `period`, `auto_renew` are mandatory when `vpc_id` is specified.
               <br>2. When creating a resource pool, if the `charging_mode`, `period_unit`, `period` and `auto_renew` parameters
               and subscription parameters in the `metadata.annotations` are specified at the same time, the former will take precedence.
               
               <a name="ModelartsResourcePool_ResourceFlavor"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the resource pool.
               Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ResourcePoolClusterArgs']]] clusters: Specifies the list of the CCE clusters. It is mandatory when `vpc_id` is
               specified and can not be specified when `network_id` is specified.
               The clusters structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the dedicated resource pool.  
               This parameter and `os.modelarts/description` in `metadata.annotations` are set at the same time, the former will
               take precedence.
        :param pulumi.Input['ResourcePoolMetadataArgs'] metadata: Specifies the metadata of the dedicated resource pool.
               The metadata structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the OS name of the image.
        :param pulumi.Input[_builtins.str] network_id: Specifies the ModelArt network ID of the resource pool.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period of the resource pool.
               If `period_unit` is set to **month**, the value ranges from `1` to `9`.
               If `period_unit` is set to **year**, the value ranges from `1` to `3`.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit of the resource pool.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] prefix: Specifies the prefix of the user-defined node name of the resource pool.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_pool_id: Indicates the resource ID of the resource pool.
        :param pulumi.Input[Sequence[pulumi.Input['ResourcePoolResourceArgs']]] resources: Specifies the list of resource specifications in the resource pool.  
               Including resource flavors and the number of resources of the corresponding flavors.
               The resources structure is documented below.
               
               > If there are billing nodes in the resource pool, you cannot scale down or delete the node pool through this resource.
        :param pulumi.Input[Sequence[pulumi.Input['ResourcePoolResourcesOrderOriginArgs']]] resources_order_origins: The script configuration value after the last change, according to which the resources are sorted.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scopes: Specifies the list of job types supported by the resource pool. It is mandatory when
               `network_id` is specified and can not be specified when `vpc_id` is specified. The options are as follows:
               + **Train**: training job.
               + **Infer**: inference job.
               + **Notebook**: Notebook job.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] server_ids: The list of service IDs corresponding to the latest expanded nodes.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the resource pool.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of a subnet. It is mandatory when
               `resources.security_group_ids`is specified, and can not be specified when `network_id` is specified.
        :param pulumi.Input['ResourcePoolUserLoginArgs'] user_login: Specifies the user login info of the resource pool. It is mandatory when
               `vpc_id` is specified and can not be specified when `network_id` is specified.
               The user_login structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID. It is mandatory when `resources.subnet_id`,
               `resources.security_group_ids` is specified, and can not be specified when `network_id` is specified.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID, which defaults to **0**.
               
               Changing this parameter will create a new resource.
        """
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_pool_id is not None:
            pulumi.set(__self__, "resource_pool_id", resource_pool_id)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if resources_order_origins is not None:
            pulumi.set(__self__, "resources_order_origins", resources_order_origins)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if server_ids is not None:
            pulumi.set(__self__, "server_ids", server_ids)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if user_login is not None:
            pulumi.set(__self__, "user_login", user_login)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Valid values are **true** and **false**.

        > 1. `charging_mode`, `period_unit`, `period`, `auto_renew` are mandatory when `vpc_id` is specified.
        <br>2. When creating a resource pool, if the `charging_mode`, `period_unit`, `period` and `auto_renew` parameters
        and subscription parameters in the `metadata.annotations` are specified at the same time, the former will take precedence.

        <a name="ModelartsResourcePool_ResourceFlavor"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging mode of the resource pool.
        Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolClusterArgs']]]]:
        """
        Specifies the list of the CCE clusters. It is mandatory when `vpc_id` is
        specified and can not be specified when `network_id` is specified.
        The clusters structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolClusterArgs']]]]):
        pulumi.set(self, "clusters", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the dedicated resource pool.  
        This parameter and `os.modelarts/description` in `metadata.annotations` are set at the same time, the former will
        take precedence.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ResourcePoolMetadataArgs']]:
        """
        Specifies the metadata of the dedicated resource pool.
        The metadata structure is documented below.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ResourcePoolMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OS name of the image.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ModelArt network ID of the resource pool.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the charging period of the resource pool.
        If `period_unit` is set to **month**, the value ranges from `1` to `9`.
        If `period_unit` is set to **year**, the value ranges from `1` to `3`.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging period unit of the resource pool.
        Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the prefix of the user-defined node name of the resource pool.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourcePoolId")
    def resource_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the resource ID of the resource pool.
        """
        return pulumi.get(self, "resource_pool_id")

    @resource_pool_id.setter
    def resource_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolResourceArgs']]]]:
        """
        Specifies the list of resource specifications in the resource pool.  
        Including resource flavors and the number of resources of the corresponding flavors.
        The resources structure is documented below.

        > If there are billing nodes in the resource pool, you cannot scale down or delete the node pool through this resource.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter(name="resourcesOrderOrigins")
    def resources_order_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolResourcesOrderOriginArgs']]]]:
        """
        The script configuration value after the last change, according to which the resources are sorted.
        """
        return pulumi.get(self, "resources_order_origins")

    @resources_order_origins.setter
    def resources_order_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolResourcesOrderOriginArgs']]]]):
        pulumi.set(self, "resources_order_origins", value)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of job types supported by the resource pool. It is mandatory when
        `network_id` is specified and can not be specified when `vpc_id` is specified. The options are as follows:
        + **Train**: training job.
        + **Infer**: inference job.
        + **Notebook**: Notebook job.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "scopes", value)

    @_builtins.property
    @pulumi.getter(name="serverIds")
    def server_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of service IDs corresponding to the latest expanded nodes.
        """
        return pulumi.get(self, "server_ids")

    @server_ids.setter
    def server_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "server_ids", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the resource pool.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network ID of a subnet. It is mandatory when
        `resources.security_group_ids`is specified, and can not be specified when `network_id` is specified.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="userLogin")
    def user_login(self) -> Optional[pulumi.Input['ResourcePoolUserLoginArgs']]:
        """
        Specifies the user login info of the resource pool. It is mandatory when
        `vpc_id` is specified and can not be specified when `network_id` is specified.
        The user_login structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_login")

    @user_login.setter
    def user_login(self, value: Optional[pulumi.Input['ResourcePoolUserLoginArgs']]):
        pulumi.set(self, "user_login", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the VPC ID. It is mandatory when `resources.subnet_id`,
        `resources.security_group_ids` is specified, and can not be specified when `network_id` is specified.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID, which defaults to **0**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:ModelArts/resourcePool:ResourcePool")
class ResourcePool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolClusterArgs', 'ResourcePoolClusterArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Union['ResourcePoolMetadataArgs', 'ResourcePoolMetadataArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolResourceArgs', 'ResourcePoolResourceArgsDict']]]]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_login: Optional[pulumi.Input[Union['ResourcePoolUserLoginArgs', 'ResourcePoolUserLoginArgsDict']]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a ModelArts dedicated resource pool resource within HuaweiCloud.

        > If you want to expand hyper instance nodes, the provider version must be `1.75.5` or later.

        > When importing a resource pool, resources may change due to order reasons. Please synchronize manually or use
          `lifecycle.ignore_changes` to ignore it.

        ## Example Usage

        ### create a basic resource pool

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        modelarts_network_id = config.require_object("modelartsNetworkId")
        cce_cluster_id = config.require_object("cceClusterId")
        login_key_pair_name = config.require_object("loginKeyPairName")
        test = huaweicloud.modelarts.ResourcePool("test",
            name="demo",
            description="This is a demo",
            scopes=[
                "Train",
                "Infer",
                "Notebook",
            ],
            network_id=modelarts_network_id,
            resources=[{
                "flavor_id": "modelarts.vm.cpu.16u64g.d",
                "count": 1,
                "extend_params": json.dumps({
                    "dockerBaseSize": "50",
                    "runtime": "docker",
                }),
                "data_volumes": [{
                    "volume_type": "SSD",
                    "size": "500Gi",
                    "extend_params": json.dumps({
                        "billing": "on",
                        "volumeGroup": "vguser0",
                    }),
                }],
                "volume_group_configs": [
                    {
                        "lvm_config": {
                            "lv_type": "linear",
                        },
                        "types": ["local"],
                        "volume_group": "vgpaas",
                    },
                    {
                        "lvm_config": {
                            "lv_type": "linear",
                            "path": "/data",
                        },
                        "volume_group": "vguser0",
                    },
                ],
            }],
            clusters=[{
                "provider_id": cce_cluster_id,
            }],
            user_login={
                "key_pair_name": login_key_pair_name,
            })
        ```

        ### create a lite resource pool

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        cce_cluster_id = config.require_object("cceClusterId")
        login_user_password = config.require_object("loginUserPassword")
        security_group_ids = config.require_object("securityGroupIds")
        test = huaweicloud.modelarts.ResourcePool("test",
            name="demo",
            prefix="test-prefix",
            description="This is a demo",
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            clusters=[{
                "provider_id": cce_cluster_id,
            }],
            user_login={
                "password": login_user_password,
            },
            resources=[{
                "flavor_id": "modelarts.vm.cpu.8ud",
                "count": 1,
                "node_pool": "test-name",
                "vpc_id": vpc_id,
                "subnet_id": subnet_id,
                "security_group_ids": security_group_ids,
                "labels": {
                    "aaa": "111",
                    "bbb": "222",
                },
                "tags": {
                    "key": "terraform",
                    "owner": "value",
                },
                "taints": [{
                    "key": "key",
                    "value": "value",
                    "effect": "NoSchedule",
                }],
            }],
            charging_mode="prePaid",
            period_unit="month",
            period=1,
            auto_renew="false")
        ```

        ### Prepaid resource pool expansion node (expansion node billing period is one month and auto-renew is disabled)

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_pool_name = config.require_object("resourcePoolName")
        subnet_id = config.require_object("subnetId")
        vpc_id = config.require_object("vpcId")
        description = config.require_object("description")
        login_user_password = config.require_object("loginUserPassword")
        resource_image_id = config.require_object("resourceImageId")
        resource_flavor_id = config.require_object("resourceFlavorId")
        resource_provider_id = config.require_object("resourceProviderId")
        test = huaweicloud.modelarts.ResourcePool("test",
            name=resource_pool_name,
            subnet_id=resource_pool_name,
            vpc_id=subnet_id,
            description=description,
            metadata={
                "annotations": json.dumps({
                    "os.modelarts/billing.mode": "1",
                    "os.modelarts/period.type": "2",
                    "os.modelarts/period.num": "1",
                    "os.modelarts/auto.renew": "0",
                    "os.modelarts/auto.pay": "1",
                }),
            },
            resources=[{
                "flavor_id": resource_flavor_id,
                "count": 2,
                "max_count": 2,
                "os": {
                    "image_id": resource_image_id,
                },
            }],
            clusters=[{
                "provider_id": resource_provider_id,
            }],
            charging_mode="prePaid",
            period_unit="month",
            period=2,
            auto_renew="false",
            user_login={
                "password": login_user_password,
            })
        ```

        ## Import

        The ModelArts resource pool can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/resourcePool:ResourcePool test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `period_unit`, `period`, `auto_renew`,

        `user_login`, `metadata`. It is generally recommended running `pulumi preview` after importing a ModelArts

        resource pool

        You can then decide if changes should be applied to the ModelArts resource pool, or the resource definition should be

        updated to align with the ModelArts resource pool. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_modelarts_resource_pool" "resource_pool" {

          ...

          lifecycle {

            ignore_changes = [
            
              period_unit, period, auto_renew, user_login, metadata
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
               
               > 1. `charging_mode`, `period_unit`, `period`, `auto_renew` are mandatory when `vpc_id` is specified.
               <br>2. When creating a resource pool, if the `charging_mode`, `period_unit`, `period` and `auto_renew` parameters
               and subscription parameters in the `metadata.annotations` are specified at the same time, the former will take precedence.
               
               <a name="ModelartsResourcePool_ResourceFlavor"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the resource pool.
               Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolClusterArgs', 'ResourcePoolClusterArgsDict']]]] clusters: Specifies the list of the CCE clusters. It is mandatory when `vpc_id` is
               specified and can not be specified when `network_id` is specified.
               The clusters structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the dedicated resource pool.  
               This parameter and `os.modelarts/description` in `metadata.annotations` are set at the same time, the former will
               take precedence.
        :param pulumi.Input[Union['ResourcePoolMetadataArgs', 'ResourcePoolMetadataArgsDict']] metadata: Specifies the metadata of the dedicated resource pool.
               The metadata structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the OS name of the image.
        :param pulumi.Input[_builtins.str] network_id: Specifies the ModelArt network ID of the resource pool.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period of the resource pool.
               If `period_unit` is set to **month**, the value ranges from `1` to `9`.
               If `period_unit` is set to **year**, the value ranges from `1` to `3`.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit of the resource pool.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] prefix: Specifies the prefix of the user-defined node name of the resource pool.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolResourceArgs', 'ResourcePoolResourceArgsDict']]]] resources: Specifies the list of resource specifications in the resource pool.  
               Including resource flavors and the number of resources of the corresponding flavors.
               The resources structure is documented below.
               
               > If there are billing nodes in the resource pool, you cannot scale down or delete the node pool through this resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scopes: Specifies the list of job types supported by the resource pool. It is mandatory when
               `network_id` is specified and can not be specified when `vpc_id` is specified. The options are as follows:
               + **Train**: training job.
               + **Infer**: inference job.
               + **Notebook**: Notebook job.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of a subnet. It is mandatory when
               `resources.security_group_ids`is specified, and can not be specified when `network_id` is specified.
        :param pulumi.Input[Union['ResourcePoolUserLoginArgs', 'ResourcePoolUserLoginArgsDict']] user_login: Specifies the user login info of the resource pool. It is mandatory when
               `vpc_id` is specified and can not be specified when `network_id` is specified.
               The user_login structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID. It is mandatory when `resources.subnet_id`,
               `resources.security_group_ids` is specified, and can not be specified when `network_id` is specified.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID, which defaults to **0**.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourcePoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a ModelArts dedicated resource pool resource within HuaweiCloud.

        > If you want to expand hyper instance nodes, the provider version must be `1.75.5` or later.

        > When importing a resource pool, resources may change due to order reasons. Please synchronize manually or use
          `lifecycle.ignore_changes` to ignore it.

        ## Example Usage

        ### create a basic resource pool

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        modelarts_network_id = config.require_object("modelartsNetworkId")
        cce_cluster_id = config.require_object("cceClusterId")
        login_key_pair_name = config.require_object("loginKeyPairName")
        test = huaweicloud.modelarts.ResourcePool("test",
            name="demo",
            description="This is a demo",
            scopes=[
                "Train",
                "Infer",
                "Notebook",
            ],
            network_id=modelarts_network_id,
            resources=[{
                "flavor_id": "modelarts.vm.cpu.16u64g.d",
                "count": 1,
                "extend_params": json.dumps({
                    "dockerBaseSize": "50",
                    "runtime": "docker",
                }),
                "data_volumes": [{
                    "volume_type": "SSD",
                    "size": "500Gi",
                    "extend_params": json.dumps({
                        "billing": "on",
                        "volumeGroup": "vguser0",
                    }),
                }],
                "volume_group_configs": [
                    {
                        "lvm_config": {
                            "lv_type": "linear",
                        },
                        "types": ["local"],
                        "volume_group": "vgpaas",
                    },
                    {
                        "lvm_config": {
                            "lv_type": "linear",
                            "path": "/data",
                        },
                        "volume_group": "vguser0",
                    },
                ],
            }],
            clusters=[{
                "provider_id": cce_cluster_id,
            }],
            user_login={
                "key_pair_name": login_key_pair_name,
            })
        ```

        ### create a lite resource pool

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        cce_cluster_id = config.require_object("cceClusterId")
        login_user_password = config.require_object("loginUserPassword")
        security_group_ids = config.require_object("securityGroupIds")
        test = huaweicloud.modelarts.ResourcePool("test",
            name="demo",
            prefix="test-prefix",
            description="This is a demo",
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            clusters=[{
                "provider_id": cce_cluster_id,
            }],
            user_login={
                "password": login_user_password,
            },
            resources=[{
                "flavor_id": "modelarts.vm.cpu.8ud",
                "count": 1,
                "node_pool": "test-name",
                "vpc_id": vpc_id,
                "subnet_id": subnet_id,
                "security_group_ids": security_group_ids,
                "labels": {
                    "aaa": "111",
                    "bbb": "222",
                },
                "tags": {
                    "key": "terraform",
                    "owner": "value",
                },
                "taints": [{
                    "key": "key",
                    "value": "value",
                    "effect": "NoSchedule",
                }],
            }],
            charging_mode="prePaid",
            period_unit="month",
            period=1,
            auto_renew="false")
        ```

        ### Prepaid resource pool expansion node (expansion node billing period is one month and auto-renew is disabled)

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_pool_name = config.require_object("resourcePoolName")
        subnet_id = config.require_object("subnetId")
        vpc_id = config.require_object("vpcId")
        description = config.require_object("description")
        login_user_password = config.require_object("loginUserPassword")
        resource_image_id = config.require_object("resourceImageId")
        resource_flavor_id = config.require_object("resourceFlavorId")
        resource_provider_id = config.require_object("resourceProviderId")
        test = huaweicloud.modelarts.ResourcePool("test",
            name=resource_pool_name,
            subnet_id=resource_pool_name,
            vpc_id=subnet_id,
            description=description,
            metadata={
                "annotations": json.dumps({
                    "os.modelarts/billing.mode": "1",
                    "os.modelarts/period.type": "2",
                    "os.modelarts/period.num": "1",
                    "os.modelarts/auto.renew": "0",
                    "os.modelarts/auto.pay": "1",
                }),
            },
            resources=[{
                "flavor_id": resource_flavor_id,
                "count": 2,
                "max_count": 2,
                "os": {
                    "image_id": resource_image_id,
                },
            }],
            clusters=[{
                "provider_id": resource_provider_id,
            }],
            charging_mode="prePaid",
            period_unit="month",
            period=2,
            auto_renew="false",
            user_login={
                "password": login_user_password,
            })
        ```

        ## Import

        The ModelArts resource pool can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/resourcePool:ResourcePool test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `period_unit`, `period`, `auto_renew`,

        `user_login`, `metadata`. It is generally recommended running `pulumi preview` after importing a ModelArts

        resource pool

        You can then decide if changes should be applied to the ModelArts resource pool, or the resource definition should be

        updated to align with the ModelArts resource pool. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_modelarts_resource_pool" "resource_pool" {

          ...

          lifecycle {

            ignore_changes = [
            
              period_unit, period, auto_renew, user_login, metadata
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ResourcePoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourcePoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolClusterArgs', 'ResourcePoolClusterArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Union['ResourcePoolMetadataArgs', 'ResourcePoolMetadataArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolResourceArgs', 'ResourcePoolResourceArgsDict']]]]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_login: Optional[pulumi.Input[Union['ResourcePoolUserLoginArgs', 'ResourcePoolUserLoginArgsDict']]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourcePoolArgs.__new__(ResourcePoolArgs)

            __props__.__dict__["auto_renew"] = auto_renew
            __props__.__dict__["charging_mode"] = charging_mode
            __props__.__dict__["clusters"] = clusters
            __props__.__dict__["description"] = description
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["period"] = period
            __props__.__dict__["period_unit"] = period_unit
            __props__.__dict__["prefix"] = prefix
            __props__.__dict__["region"] = region
            if resources is None and not opts.urn:
                raise TypeError("Missing required property 'resources'")
            __props__.__dict__["resources"] = resources
            __props__.__dict__["scopes"] = scopes
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["user_login"] = user_login
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["resource_pool_id"] = None
            __props__.__dict__["resources_order_origins"] = None
            __props__.__dict__["server_ids"] = None
            __props__.__dict__["status"] = None
        super(ResourcePool, __self__).__init__(
            'huaweicloud:ModelArts/resourcePool:ResourcePool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
            charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
            clusters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolClusterArgs', 'ResourcePoolClusterArgsDict']]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            metadata: Optional[pulumi.Input[Union['ResourcePoolMetadataArgs', 'ResourcePoolMetadataArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_id: Optional[pulumi.Input[_builtins.str]] = None,
            period: Optional[pulumi.Input[_builtins.int]] = None,
            period_unit: Optional[pulumi.Input[_builtins.str]] = None,
            prefix: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolResourceArgs', 'ResourcePoolResourceArgsDict']]]]] = None,
            resources_order_origins: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolResourcesOrderOriginArgs', 'ResourcePoolResourcesOrderOriginArgsDict']]]]] = None,
            scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            server_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            user_login: Optional[pulumi.Input[Union['ResourcePoolUserLoginArgs', 'ResourcePoolUserLoginArgsDict']]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ResourcePool':
        """
        Get an existing ResourcePool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
               
               > 1. `charging_mode`, `period_unit`, `period`, `auto_renew` are mandatory when `vpc_id` is specified.
               <br>2. When creating a resource pool, if the `charging_mode`, `period_unit`, `period` and `auto_renew` parameters
               and subscription parameters in the `metadata.annotations` are specified at the same time, the former will take precedence.
               
               <a name="ModelartsResourcePool_ResourceFlavor"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the resource pool.
               Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolClusterArgs', 'ResourcePoolClusterArgsDict']]]] clusters: Specifies the list of the CCE clusters. It is mandatory when `vpc_id` is
               specified and can not be specified when `network_id` is specified.
               The clusters structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the dedicated resource pool.  
               This parameter and `os.modelarts/description` in `metadata.annotations` are set at the same time, the former will
               take precedence.
        :param pulumi.Input[Union['ResourcePoolMetadataArgs', 'ResourcePoolMetadataArgsDict']] metadata: Specifies the metadata of the dedicated resource pool.
               The metadata structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the OS name of the image.
        :param pulumi.Input[_builtins.str] network_id: Specifies the ModelArt network ID of the resource pool.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period of the resource pool.
               If `period_unit` is set to **month**, the value ranges from `1` to `9`.
               If `period_unit` is set to **year**, the value ranges from `1` to `3`.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit of the resource pool.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] prefix: Specifies the prefix of the user-defined node name of the resource pool.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_pool_id: Indicates the resource ID of the resource pool.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolResourceArgs', 'ResourcePoolResourceArgsDict']]]] resources: Specifies the list of resource specifications in the resource pool.  
               Including resource flavors and the number of resources of the corresponding flavors.
               The resources structure is documented below.
               
               > If there are billing nodes in the resource pool, you cannot scale down or delete the node pool through this resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolResourcesOrderOriginArgs', 'ResourcePoolResourcesOrderOriginArgsDict']]]] resources_order_origins: The script configuration value after the last change, according to which the resources are sorted.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scopes: Specifies the list of job types supported by the resource pool. It is mandatory when
               `network_id` is specified and can not be specified when `vpc_id` is specified. The options are as follows:
               + **Train**: training job.
               + **Infer**: inference job.
               + **Notebook**: Notebook job.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] server_ids: The list of service IDs corresponding to the latest expanded nodes.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the resource pool.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of a subnet. It is mandatory when
               `resources.security_group_ids`is specified, and can not be specified when `network_id` is specified.
        :param pulumi.Input[Union['ResourcePoolUserLoginArgs', 'ResourcePoolUserLoginArgsDict']] user_login: Specifies the user login info of the resource pool. It is mandatory when
               `vpc_id` is specified and can not be specified when `network_id` is specified.
               The user_login structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID. It is mandatory when `resources.subnet_id`,
               `resources.security_group_ids` is specified, and can not be specified when `network_id` is specified.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID, which defaults to **0**.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourcePoolState.__new__(_ResourcePoolState)

        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["clusters"] = clusters
        __props__.__dict__["description"] = description
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["period"] = period
        __props__.__dict__["period_unit"] = period_unit
        __props__.__dict__["prefix"] = prefix
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_pool_id"] = resource_pool_id
        __props__.__dict__["resources"] = resources
        __props__.__dict__["resources_order_origins"] = resources_order_origins
        __props__.__dict__["scopes"] = scopes
        __props__.__dict__["server_ids"] = server_ids
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["user_login"] = user_login
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["workspace_id"] = workspace_id
        return ResourcePool(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled. Valid values are **true** and **false**.

        > 1. `charging_mode`, `period_unit`, `period`, `auto_renew` are mandatory when `vpc_id` is specified.
        <br>2. When creating a resource pool, if the `charging_mode`, `period_unit`, `period` and `auto_renew` parameters
        and subscription parameters in the `metadata.annotations` are specified at the same time, the former will take precedence.

        <a name="ModelartsResourcePool_ResourceFlavor"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "auto_renew")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the charging mode of the resource pool.
        Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> pulumi.Output[Sequence['outputs.ResourcePoolCluster']]:
        """
        Specifies the list of the CCE clusters. It is mandatory when `vpc_id` is
        specified and can not be specified when `network_id` is specified.
        The clusters structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "clusters")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the dedicated resource pool.  
        This parameter and `os.modelarts/description` in `metadata.annotations` are set at the same time, the former will
        take precedence.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.ResourcePoolMetadata']:
        """
        Specifies the metadata of the dedicated resource pool.
        The metadata structure is documented below.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the OS name of the image.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ModelArt network ID of the resource pool.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the charging period of the resource pool.
        If `period_unit` is set to **month**, the value ranges from `1` to `9`.
        If `period_unit` is set to **year**, the value ranges from `1` to `3`.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the charging period unit of the resource pool.
        Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period_unit")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the prefix of the user-defined node name of the resource pool.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourcePoolId")
    def resource_pool_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the resource ID of the resource pool.
        """
        return pulumi.get(self, "resource_pool_id")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Sequence['outputs.ResourcePoolResource']]:
        """
        Specifies the list of resource specifications in the resource pool.  
        Including resource flavors and the number of resources of the corresponding flavors.
        The resources structure is documented below.

        > If there are billing nodes in the resource pool, you cannot scale down or delete the node pool through this resource.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="resourcesOrderOrigins")
    def resources_order_origins(self) -> pulumi.Output[Sequence['outputs.ResourcePoolResourcesOrderOrigin']]:
        """
        The script configuration value after the last change, according to which the resources are sorted.
        """
        return pulumi.get(self, "resources_order_origins")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of job types supported by the resource pool. It is mandatory when
        `network_id` is specified and can not be specified when `vpc_id` is specified. The options are as follows:
        + **Train**: training job.
        + **Infer**: inference job.
        + **Notebook**: Notebook job.
        """
        return pulumi.get(self, "scopes")

    @_builtins.property
    @pulumi.getter(name="serverIds")
    def server_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The list of service IDs corresponding to the latest expanded nodes.
        """
        return pulumi.get(self, "server_ids")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of the resource pool.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the network ID of a subnet. It is mandatory when
        `resources.security_group_ids`is specified, and can not be specified when `network_id` is specified.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="userLogin")
    def user_login(self) -> pulumi.Output['outputs.ResourcePoolUserLogin']:
        """
        Specifies the user login info of the resource pool. It is mandatory when
        `vpc_id` is specified and can not be specified when `network_id` is specified.
        The user_login structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_login")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the VPC ID. It is mandatory when `resources.subnet_id`,
        `resources.security_group_ids` is specified, and can not be specified when `network_id` is specified.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workspace ID, which defaults to **0**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

