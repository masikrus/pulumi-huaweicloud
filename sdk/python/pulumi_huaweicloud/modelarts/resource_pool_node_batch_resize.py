# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourcePoolNodeBatchResizeArgs', 'ResourcePoolNodeBatchResize']

@pulumi.input_type
class ResourcePoolNodeBatchResizeArgs:
    def __init__(__self__, *,
                 nodes: pulumi.Input[Sequence[pulumi.Input['ResourcePoolNodeBatchResizeNodeArgs']]],
                 resource_pool_name: pulumi.Input[_builtins.str],
                 source: pulumi.Input['ResourcePoolNodeBatchResizeSourceArgs'],
                 target: pulumi.Input['ResourcePoolNodeBatchResizeTargetArgs'],
                 billing: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ResourcePoolNodeBatchResize resource.
        :param pulumi.Input[Sequence[pulumi.Input['ResourcePoolNodeBatchResizeNodeArgs']]] nodes: Specifies the list of nodes to be scaled.  
               The nodes structure is documented below.
        :param pulumi.Input[_builtins.str] resource_pool_name: Specifies the resource pool name to which the resource nodes belong.
        :param pulumi.Input['ResourcePoolNodeBatchResizeSourceArgs'] source: Specifies the configuration of the source node pool to which the node
               to be scaled belongs.
               The source structure is documented below.
        :param pulumi.Input['ResourcePoolNodeBatchResizeTargetArgs'] target: Specifies the configuration of the target node pool to which the node
               to be scaled belongs.
               The target structure is documented below.
        :param pulumi.Input[_builtins.str] billing: Specifies whether to automatically pay, in JSON format.  
               This parameter is **required** only when upgrading specification of the nodes and cannot be set when downgrading.
               
               <a name="resource_pool_node_batch_resize_nodes"></a>
               The `nodes` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the resource pool is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "resource_pool_name", resource_pool_name)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        if billing is not None:
            pulumi.set(__self__, "billing", billing)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> pulumi.Input[Sequence[pulumi.Input['ResourcePoolNodeBatchResizeNodeArgs']]]:
        """
        Specifies the list of nodes to be scaled.  
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: pulumi.Input[Sequence[pulumi.Input['ResourcePoolNodeBatchResizeNodeArgs']]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter(name="resourcePoolName")
    def resource_pool_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource pool name to which the resource nodes belong.
        """
        return pulumi.get(self, "resource_pool_name")

    @resource_pool_name.setter
    def resource_pool_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_pool_name", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Input['ResourcePoolNodeBatchResizeSourceArgs']:
        """
        Specifies the configuration of the source node pool to which the node
        to be scaled belongs.
        The source structure is documented below.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['ResourcePoolNodeBatchResizeSourceArgs']):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Input['ResourcePoolNodeBatchResizeTargetArgs']:
        """
        Specifies the configuration of the target node pool to which the node
        to be scaled belongs.
        The target structure is documented below.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['ResourcePoolNodeBatchResizeTargetArgs']):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter
    def billing(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to automatically pay, in JSON format.  
        This parameter is **required** only when upgrading specification of the nodes and cannot be set when downgrading.

        <a name="resource_pool_node_batch_resize_nodes"></a>
        The `nodes` block supports:
        """
        return pulumi.get(self, "billing")

    @billing.setter
    def billing(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "billing", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the resource pool is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ResourcePoolNodeBatchResizeState:
    def __init__(__self__, *,
                 billing: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolNodeBatchResizeNodeArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 server_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 source: Optional[pulumi.Input['ResourcePoolNodeBatchResizeSourceArgs']] = None,
                 target: Optional[pulumi.Input['ResourcePoolNodeBatchResizeTargetArgs']] = None):
        """
        Input properties used for looking up and filtering ResourcePoolNodeBatchResize resources.
        :param pulumi.Input[_builtins.str] billing: Specifies whether to automatically pay, in JSON format.  
               This parameter is **required** only when upgrading specification of the nodes and cannot be set when downgrading.
               
               <a name="resource_pool_node_batch_resize_nodes"></a>
               The `nodes` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['ResourcePoolNodeBatchResizeNodeArgs']]] nodes: Specifies the list of nodes to be scaled.  
               The nodes structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the resource pool is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] resource_pool_name: Specifies the resource pool name to which the resource nodes belong.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] server_ids: The list of service IDs corresponding to the currently upgraded specification nodes.
        :param pulumi.Input['ResourcePoolNodeBatchResizeSourceArgs'] source: Specifies the configuration of the source node pool to which the node
               to be scaled belongs.
               The source structure is documented below.
        :param pulumi.Input['ResourcePoolNodeBatchResizeTargetArgs'] target: Specifies the configuration of the target node pool to which the node
               to be scaled belongs.
               The target structure is documented below.
        """
        if billing is not None:
            pulumi.set(__self__, "billing", billing)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_pool_name is not None:
            pulumi.set(__self__, "resource_pool_name", resource_pool_name)
        if server_ids is not None:
            pulumi.set(__self__, "server_ids", server_ids)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def billing(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to automatically pay, in JSON format.  
        This parameter is **required** only when upgrading specification of the nodes and cannot be set when downgrading.

        <a name="resource_pool_node_batch_resize_nodes"></a>
        The `nodes` block supports:
        """
        return pulumi.get(self, "billing")

    @billing.setter
    def billing(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "billing", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolNodeBatchResizeNodeArgs']]]]:
        """
        Specifies the list of nodes to be scaled.  
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolNodeBatchResizeNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the resource pool is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourcePoolName")
    def resource_pool_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource pool name to which the resource nodes belong.
        """
        return pulumi.get(self, "resource_pool_name")

    @resource_pool_name.setter
    def resource_pool_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_pool_name", value)

    @_builtins.property
    @pulumi.getter(name="serverIds")
    def server_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of service IDs corresponding to the currently upgraded specification nodes.
        """
        return pulumi.get(self, "server_ids")

    @server_ids.setter
    def server_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "server_ids", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['ResourcePoolNodeBatchResizeSourceArgs']]:
        """
        Specifies the configuration of the source node pool to which the node
        to be scaled belongs.
        The source structure is documented below.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['ResourcePoolNodeBatchResizeSourceArgs']]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['ResourcePoolNodeBatchResizeTargetArgs']]:
        """
        Specifies the configuration of the target node pool to which the node
        to be scaled belongs.
        The target structure is documented below.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['ResourcePoolNodeBatchResizeTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.type_token("huaweicloud:ModelArts/resourcePoolNodeBatchResize:ResourcePoolNodeBatchResize")
class ResourcePoolNodeBatchResize(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 billing: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolNodeBatchResizeNodeArgs', 'ResourcePoolNodeBatchResizeNodeArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[Union['ResourcePoolNodeBatchResizeSourceArgs', 'ResourcePoolNodeBatchResizeSourceArgsDict']]] = None,
                 target: Optional[pulumi.Input[Union['ResourcePoolNodeBatchResizeTargetArgs', 'ResourcePoolNodeBatchResizeTargetArgsDict']]] = None,
                 __props__=None):
        """
        Use this resource to batch adjust step size of the hyper instance nodes under the resource pool within HuaweiCloud.

        > This resource is only a one-time operation resource for batch adjust the step size of resource pool nodes.
           Deleting this resource will not clear the corresponding request records, only removing the resource information
           from the tfstate file.

        ## Increase the step size of prepaid nodes from 1 to 2

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_pool_name = config.require_object("resourcePoolName")
        node_batch_uids = config.require_object("nodeBatchUids")
        source_node_pool_configuration = config.require_object("sourceNodePoolConfiguration")
        target_node_pool_configuration = config.require_object("targetNodePoolConfiguration")
        test = huaweicloud.modelarts.ResourcePoolNodeBatchResize("test",
            nodes=[{
                "batch_uid": entry["value"],
            } for entry in [{"key": k, "value": v} for k, v in node_batch_uids]],
            resource_pool_name=resource_pool_name,
            source={
                "node_pool": source_node_pool_configuration["nodePool"],
                "flavor": source_node_pool_configuration["flavor"],
                "creating_step": {
                    "type": "hyperinstance",
                    "step": 1,
                },
            },
            target={
                "node_pool": target_node_pool_configuration["nodePool"],
                "flavor": target_node_pool_configuration["flavor"],
                "creating_step": {
                    "type": "hyperinstance",
                    "step": 2,
                },
            },
            billing=json.dumps({
                "autoPay": "1",
            }))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] billing: Specifies whether to automatically pay, in JSON format.  
               This parameter is **required** only when upgrading specification of the nodes and cannot be set when downgrading.
               
               <a name="resource_pool_node_batch_resize_nodes"></a>
               The `nodes` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolNodeBatchResizeNodeArgs', 'ResourcePoolNodeBatchResizeNodeArgsDict']]]] nodes: Specifies the list of nodes to be scaled.  
               The nodes structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the resource pool is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] resource_pool_name: Specifies the resource pool name to which the resource nodes belong.
        :param pulumi.Input[Union['ResourcePoolNodeBatchResizeSourceArgs', 'ResourcePoolNodeBatchResizeSourceArgsDict']] source: Specifies the configuration of the source node pool to which the node
               to be scaled belongs.
               The source structure is documented below.
        :param pulumi.Input[Union['ResourcePoolNodeBatchResizeTargetArgs', 'ResourcePoolNodeBatchResizeTargetArgsDict']] target: Specifies the configuration of the target node pool to which the node
               to be scaled belongs.
               The target structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourcePoolNodeBatchResizeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to batch adjust step size of the hyper instance nodes under the resource pool within HuaweiCloud.

        > This resource is only a one-time operation resource for batch adjust the step size of resource pool nodes.
           Deleting this resource will not clear the corresponding request records, only removing the resource information
           from the tfstate file.

        ## Increase the step size of prepaid nodes from 1 to 2

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_pool_name = config.require_object("resourcePoolName")
        node_batch_uids = config.require_object("nodeBatchUids")
        source_node_pool_configuration = config.require_object("sourceNodePoolConfiguration")
        target_node_pool_configuration = config.require_object("targetNodePoolConfiguration")
        test = huaweicloud.modelarts.ResourcePoolNodeBatchResize("test",
            nodes=[{
                "batch_uid": entry["value"],
            } for entry in [{"key": k, "value": v} for k, v in node_batch_uids]],
            resource_pool_name=resource_pool_name,
            source={
                "node_pool": source_node_pool_configuration["nodePool"],
                "flavor": source_node_pool_configuration["flavor"],
                "creating_step": {
                    "type": "hyperinstance",
                    "step": 1,
                },
            },
            target={
                "node_pool": target_node_pool_configuration["nodePool"],
                "flavor": target_node_pool_configuration["flavor"],
                "creating_step": {
                    "type": "hyperinstance",
                    "step": 2,
                },
            },
            billing=json.dumps({
                "autoPay": "1",
            }))
        ```

        :param str resource_name: The name of the resource.
        :param ResourcePoolNodeBatchResizeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourcePoolNodeBatchResizeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 billing: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolNodeBatchResizeNodeArgs', 'ResourcePoolNodeBatchResizeNodeArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[Union['ResourcePoolNodeBatchResizeSourceArgs', 'ResourcePoolNodeBatchResizeSourceArgsDict']]] = None,
                 target: Optional[pulumi.Input[Union['ResourcePoolNodeBatchResizeTargetArgs', 'ResourcePoolNodeBatchResizeTargetArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourcePoolNodeBatchResizeArgs.__new__(ResourcePoolNodeBatchResizeArgs)

            __props__.__dict__["billing"] = billing
            __props__.__dict__["enable_force_new"] = enable_force_new
            if nodes is None and not opts.urn:
                raise TypeError("Missing required property 'nodes'")
            __props__.__dict__["nodes"] = nodes
            __props__.__dict__["region"] = region
            if resource_pool_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_pool_name'")
            __props__.__dict__["resource_pool_name"] = resource_pool_name
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            if target is None and not opts.urn:
                raise TypeError("Missing required property 'target'")
            __props__.__dict__["target"] = target
            __props__.__dict__["server_ids"] = None
        super(ResourcePoolNodeBatchResize, __self__).__init__(
            'huaweicloud:ModelArts/resourcePoolNodeBatchResize:ResourcePoolNodeBatchResize',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            billing: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolNodeBatchResizeNodeArgs', 'ResourcePoolNodeBatchResizeNodeArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
            server_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            source: Optional[pulumi.Input[Union['ResourcePoolNodeBatchResizeSourceArgs', 'ResourcePoolNodeBatchResizeSourceArgsDict']]] = None,
            target: Optional[pulumi.Input[Union['ResourcePoolNodeBatchResizeTargetArgs', 'ResourcePoolNodeBatchResizeTargetArgsDict']]] = None) -> 'ResourcePoolNodeBatchResize':
        """
        Get an existing ResourcePoolNodeBatchResize resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] billing: Specifies whether to automatically pay, in JSON format.  
               This parameter is **required** only when upgrading specification of the nodes and cannot be set when downgrading.
               
               <a name="resource_pool_node_batch_resize_nodes"></a>
               The `nodes` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourcePoolNodeBatchResizeNodeArgs', 'ResourcePoolNodeBatchResizeNodeArgsDict']]]] nodes: Specifies the list of nodes to be scaled.  
               The nodes structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the resource pool is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] resource_pool_name: Specifies the resource pool name to which the resource nodes belong.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] server_ids: The list of service IDs corresponding to the currently upgraded specification nodes.
        :param pulumi.Input[Union['ResourcePoolNodeBatchResizeSourceArgs', 'ResourcePoolNodeBatchResizeSourceArgsDict']] source: Specifies the configuration of the source node pool to which the node
               to be scaled belongs.
               The source structure is documented below.
        :param pulumi.Input[Union['ResourcePoolNodeBatchResizeTargetArgs', 'ResourcePoolNodeBatchResizeTargetArgsDict']] target: Specifies the configuration of the target node pool to which the node
               to be scaled belongs.
               The target structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourcePoolNodeBatchResizeState.__new__(_ResourcePoolNodeBatchResizeState)

        __props__.__dict__["billing"] = billing
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_pool_name"] = resource_pool_name
        __props__.__dict__["server_ids"] = server_ids
        __props__.__dict__["source"] = source
        __props__.__dict__["target"] = target
        return ResourcePoolNodeBatchResize(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def billing(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether to automatically pay, in JSON format.  
        This parameter is **required** only when upgrading specification of the nodes and cannot be set when downgrading.

        <a name="resource_pool_node_batch_resize_nodes"></a>
        The `nodes` block supports:
        """
        return pulumi.get(self, "billing")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Sequence['outputs.ResourcePoolNodeBatchResizeNode']]:
        """
        Specifies the list of nodes to be scaled.  
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the resource pool is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourcePoolName")
    def resource_pool_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the resource pool name to which the resource nodes belong.
        """
        return pulumi.get(self, "resource_pool_name")

    @_builtins.property
    @pulumi.getter(name="serverIds")
    def server_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The list of service IDs corresponding to the currently upgraded specification nodes.
        """
        return pulumi.get(self, "server_ids")

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Output['outputs.ResourcePoolNodeBatchResizeSource']:
        """
        Specifies the configuration of the source node pool to which the node
        to be scaled belongs.
        The source structure is documented below.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Output['outputs.ResourcePoolNodeBatchResizeTarget']:
        """
        Specifies the configuration of the target node pool to which the node
        to be scaled belongs.
        The target structure is documented below.
        """
        return pulumi.get(self, "target")

