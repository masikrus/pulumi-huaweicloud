# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceV2Args', 'ServiceV2']

@pulumi.input_type
class ServiceV2Args:
    def __init__(__self__, *,
                 group_configs: pulumi.Input[Sequence[pulumi.Input['ServiceV2GroupConfigArgs']]],
                 runtime_config: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 upgrade_config: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 deploy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 log_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceV2LogConfigArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ServiceV2 resource.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceV2GroupConfigArgs']]] group_configs: Specifies the instance group configurations of the service.  
               The group_configs structure is documented below.
               When the value of parameter `type` is **BATCH** or **EDGE**, only one group can be configured.
               When the value of parameter `type` is **REAL_TIME**, multiple service instances can be configured and weights can be
               assigned according to business needs.
        :param pulumi.Input[_builtins.str] runtime_config: Specifies the configuration of the service runtime, in JSON format.
        :param pulumi.Input[_builtins.str] type: Specifies the type of LTS configuration.
               Currently, the valid value is **STDOUT**.
        :param pulumi.Input[_builtins.str] upgrade_config: Specifies the upgrade configuration of the service, in JSON format.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the service.  
               The maximum valid length is `8`, only digits and dots (.) are allowed.
               
               > Specifies the old version number can switch the historical version.
        :param pulumi.Input[_builtins.str] deploy_type: Specifies the deploy type of the service.  
               The valid values are as follows:
               + **SINGLE**
               + **MULTI**
               + **DIST**
        :param pulumi.Input[_builtins.str] description: Specifies the description of the service.
               The maximum valid length is `100`, and cannot contain these special characters (`!><=&'"`).
        :param pulumi.Input[Sequence[pulumi.Input['ServiceV2LogConfigArgs']]] log_configs: Specifies the log configurations of the service.  
               The log_configs structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the instance group.  
               The valid length is limited from `1` to `64`, only English letters, Chinese characters, digits, hyphens (-) and
               underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the service is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the service.
               A maximum of `20` tags can be configured.
               
               <a name="v2_service_group_configs"></a>
               The `group_configs` block supports:
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID of the service.
        """
        pulumi.set(__self__, "group_configs", group_configs)
        pulumi.set(__self__, "runtime_config", runtime_config)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "upgrade_config", upgrade_config)
        pulumi.set(__self__, "version", version)
        if deploy_type is not None:
            pulumi.set(__self__, "deploy_type", deploy_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if log_configs is not None:
            pulumi.set(__self__, "log_configs", log_configs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="groupConfigs")
    def group_configs(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceV2GroupConfigArgs']]]:
        """
        Specifies the instance group configurations of the service.  
        The group_configs structure is documented below.
        When the value of parameter `type` is **BATCH** or **EDGE**, only one group can be configured.
        When the value of parameter `type` is **REAL_TIME**, multiple service instances can be configured and weights can be
        assigned according to business needs.
        """
        return pulumi.get(self, "group_configs")

    @group_configs.setter
    def group_configs(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceV2GroupConfigArgs']]]):
        pulumi.set(self, "group_configs", value)

    @_builtins.property
    @pulumi.getter(name="runtimeConfig")
    def runtime_config(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the configuration of the service runtime, in JSON format.
        """
        return pulumi.get(self, "runtime_config")

    @runtime_config.setter
    def runtime_config(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "runtime_config", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of LTS configuration.
        Currently, the valid value is **STDOUT**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="upgradeConfig")
    def upgrade_config(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the upgrade configuration of the service, in JSON format.
        """
        return pulumi.get(self, "upgrade_config")

    @upgrade_config.setter
    def upgrade_config(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "upgrade_config", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the version of the service.  
        The maximum valid length is `8`, only digits and dots (.) are allowed.

        > Specifies the old version number can switch the historical version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="deployType")
    def deploy_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the deploy type of the service.  
        The valid values are as follows:
        + **SINGLE**
        + **MULTI**
        + **DIST**
        """
        return pulumi.get(self, "deploy_type")

    @deploy_type.setter
    def deploy_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deploy_type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the service.
        The maximum valid length is `100`, and cannot contain these special characters (`!><=&'"`).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="logConfigs")
    def log_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceV2LogConfigArgs']]]]:
        """
        Specifies the log configurations of the service.  
        The log_configs structure is documented below.
        """
        return pulumi.get(self, "log_configs")

    @log_configs.setter
    def log_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceV2LogConfigArgs']]]]):
        pulumi.set(self, "log_configs", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the instance group.  
        The valid length is limited from `1` to `64`, only English letters, Chinese characters, digits, hyphens (-) and
        underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the service is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the service.
        A maximum of `20` tags can be configured.

        <a name="v2_service_group_configs"></a>
        The `group_configs` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID of the service.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class _ServiceV2State:
    def __init__(__self__, *,
                 deploy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceV2GroupConfigArgs']]]] = None,
                 history_versions: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 log_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceV2LogConfigArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 predict_urls: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceV2PredictUrlArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_config: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_config: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ServiceV2 resources.
        :param pulumi.Input[_builtins.str] deploy_type: Specifies the deploy type of the service.  
               The valid values are as follows:
               + **SINGLE**
               + **MULTI**
               + **DIST**
        :param pulumi.Input[_builtins.str] description: Specifies the description of the service.
               The maximum valid length is `100`, and cannot contain these special characters (`!><=&'"`).
        :param pulumi.Input[Sequence[pulumi.Input['ServiceV2GroupConfigArgs']]] group_configs: Specifies the instance group configurations of the service.  
               The group_configs structure is documented below.
               When the value of parameter `type` is **BATCH** or **EDGE**, only one group can be configured.
               When the value of parameter `type` is **REAL_TIME**, multiple service instances can be configured and weights can be
               assigned according to business needs.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] history_versions: The deployed history information of the service versions.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceV2LogConfigArgs']]] log_configs: Specifies the log configurations of the service.  
               The log_configs structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the instance group.  
               The valid length is limited from `1` to `64`, only English letters, Chinese characters, digits, hyphens (-) and
               underscores (_) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceV2PredictUrlArgs']]] predict_urls: The access addresses of the service.  
               The predict_url structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the service is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] runtime_config: Specifies the configuration of the service runtime, in JSON format.
        :param pulumi.Input[_builtins.str] status: The status of the service.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the service.
               A maximum of `20` tags can be configured.
               
               <a name="v2_service_group_configs"></a>
               The `group_configs` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the type of LTS configuration.
               Currently, the valid value is **STDOUT**.
        :param pulumi.Input[_builtins.str] upgrade_config: Specifies the upgrade configuration of the service, in JSON format.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the service.  
               The maximum valid length is `8`, only digits and dots (.) are allowed.
               
               > Specifies the old version number can switch the historical version.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID of the service.
        """
        if deploy_type is not None:
            pulumi.set(__self__, "deploy_type", deploy_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_configs is not None:
            pulumi.set(__self__, "group_configs", group_configs)
        if history_versions is not None:
            pulumi.set(__self__, "history_versions", history_versions)
        if log_configs is not None:
            pulumi.set(__self__, "log_configs", log_configs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if predict_urls is not None:
            pulumi.set(__self__, "predict_urls", predict_urls)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if runtime_config is not None:
            pulumi.set(__self__, "runtime_config", runtime_config)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if upgrade_config is not None:
            pulumi.set(__self__, "upgrade_config", upgrade_config)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="deployType")
    def deploy_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the deploy type of the service.  
        The valid values are as follows:
        + **SINGLE**
        + **MULTI**
        + **DIST**
        """
        return pulumi.get(self, "deploy_type")

    @deploy_type.setter
    def deploy_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deploy_type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the service.
        The maximum valid length is `100`, and cannot contain these special characters (`!><=&'"`).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="groupConfigs")
    def group_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceV2GroupConfigArgs']]]]:
        """
        Specifies the instance group configurations of the service.  
        The group_configs structure is documented below.
        When the value of parameter `type` is **BATCH** or **EDGE**, only one group can be configured.
        When the value of parameter `type` is **REAL_TIME**, multiple service instances can be configured and weights can be
        assigned according to business needs.
        """
        return pulumi.get(self, "group_configs")

    @group_configs.setter
    def group_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceV2GroupConfigArgs']]]]):
        pulumi.set(self, "group_configs", value)

    @_builtins.property
    @pulumi.getter(name="historyVersions")
    def history_versions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The deployed history information of the service versions.
        """
        return pulumi.get(self, "history_versions")

    @history_versions.setter
    def history_versions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "history_versions", value)

    @_builtins.property
    @pulumi.getter(name="logConfigs")
    def log_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceV2LogConfigArgs']]]]:
        """
        Specifies the log configurations of the service.  
        The log_configs structure is documented below.
        """
        return pulumi.get(self, "log_configs")

    @log_configs.setter
    def log_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceV2LogConfigArgs']]]]):
        pulumi.set(self, "log_configs", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the instance group.  
        The valid length is limited from `1` to `64`, only English letters, Chinese characters, digits, hyphens (-) and
        underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="predictUrls")
    def predict_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceV2PredictUrlArgs']]]]:
        """
        The access addresses of the service.  
        The predict_url structure is documented below.
        """
        return pulumi.get(self, "predict_urls")

    @predict_urls.setter
    def predict_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceV2PredictUrlArgs']]]]):
        pulumi.set(self, "predict_urls", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the service is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="runtimeConfig")
    def runtime_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration of the service runtime, in JSON format.
        """
        return pulumi.get(self, "runtime_config")

    @runtime_config.setter
    def runtime_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "runtime_config", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the service.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the service.
        A maximum of `20` tags can be configured.

        <a name="v2_service_group_configs"></a>
        The `group_configs` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of LTS configuration.
        Currently, the valid value is **STDOUT**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="upgradeConfig")
    def upgrade_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the upgrade configuration of the service, in JSON format.
        """
        return pulumi.get(self, "upgrade_config")

    @upgrade_config.setter
    def upgrade_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "upgrade_config", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the service.  
        The maximum valid length is `8`, only digits and dots (.) are allowed.

        > Specifies the old version number can switch the historical version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID of the service.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:ModelArts/serviceV2:ServiceV2")
class ServiceV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deploy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceV2GroupConfigArgs', 'ServiceV2GroupConfigArgsDict']]]]] = None,
                 log_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceV2LogConfigArgs', 'ServiceV2LogConfigArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_config: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_config: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a service resource of the ModelArts service within HuaweiCloud.

        ## Example Usage

        ### Creates an online service with a group configuration

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        subnet_id = config.require_object("subnetId")
        resource_pool_id = config.require_object("resourcePoolId")
        image_storage_path_in_swr = config.require_object("imageStoragePathInSwr")
        test = huaweicloud.modelarts.ServiceV2("test",
            name=service_name,
            version="0.0.1",
            type="REAL_TIME",
            description="Created by terraform script",
            workspace_id="0",
            deploy_type="SINGLE",
            group_configs=[{
                "framework": "COMMON",
                "name": "group-1",
                "pool_id": resource_pool_id,
                "weight": 100,
                "count": 2,
                "unit_configs": [{
                    "image": {
                        "source": "SWR",
                        "swr_path": image_storage_path_in_swr,
                    },
                    "custom_spec": {
                        "memory": 1024,
                        "cpu": 1,
                    },
                    "cmd": "sleep 20",
                    "count": 1,
                    "recovery": "Instance",
                    "envs": {
                        "foo": "bar",
                    },
                }],
            }],
            tags={
                "foo": "bar",
                "key": "value",
            },
            runtime_config=json.dumps({
                "service_invoke": {
                    "port": 9876,
                    "protocol": "HTTPS",
                    "auth_type": "TOKEN",
                    "direct_channel_auth_enable": False,
                },
                "service_limit": {
                    "request_size_limit": 20,
                    "request_timeout": 30,
                    "ip_white_list": [],
                    "ip_black_list": [],
                    "rate_limit": {
                        "num": 200,
                        "unit": "SECONDS",
                    },
                },
            }),
            upgrade_config=json.dumps({
                "type": "ROLLING",
                "rolling_update": {
                    "max_surge": "50%",
                    "max_unavailable": "50%",
                },
            }))
        ```

        ## Import

        Service can be imported using resource `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/serviceV2:ServiceV2 test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] deploy_type: Specifies the deploy type of the service.  
               The valid values are as follows:
               + **SINGLE**
               + **MULTI**
               + **DIST**
        :param pulumi.Input[_builtins.str] description: Specifies the description of the service.
               The maximum valid length is `100`, and cannot contain these special characters (`!><=&'"`).
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceV2GroupConfigArgs', 'ServiceV2GroupConfigArgsDict']]]] group_configs: Specifies the instance group configurations of the service.  
               The group_configs structure is documented below.
               When the value of parameter `type` is **BATCH** or **EDGE**, only one group can be configured.
               When the value of parameter `type` is **REAL_TIME**, multiple service instances can be configured and weights can be
               assigned according to business needs.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceV2LogConfigArgs', 'ServiceV2LogConfigArgsDict']]]] log_configs: Specifies the log configurations of the service.  
               The log_configs structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the instance group.  
               The valid length is limited from `1` to `64`, only English letters, Chinese characters, digits, hyphens (-) and
               underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the service is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] runtime_config: Specifies the configuration of the service runtime, in JSON format.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the service.
               A maximum of `20` tags can be configured.
               
               <a name="v2_service_group_configs"></a>
               The `group_configs` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the type of LTS configuration.
               Currently, the valid value is **STDOUT**.
        :param pulumi.Input[_builtins.str] upgrade_config: Specifies the upgrade configuration of the service, in JSON format.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the service.  
               The maximum valid length is `8`, only digits and dots (.) are allowed.
               
               > Specifies the old version number can switch the historical version.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID of the service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a service resource of the ModelArts service within HuaweiCloud.

        ## Example Usage

        ### Creates an online service with a group configuration

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        subnet_id = config.require_object("subnetId")
        resource_pool_id = config.require_object("resourcePoolId")
        image_storage_path_in_swr = config.require_object("imageStoragePathInSwr")
        test = huaweicloud.modelarts.ServiceV2("test",
            name=service_name,
            version="0.0.1",
            type="REAL_TIME",
            description="Created by terraform script",
            workspace_id="0",
            deploy_type="SINGLE",
            group_configs=[{
                "framework": "COMMON",
                "name": "group-1",
                "pool_id": resource_pool_id,
                "weight": 100,
                "count": 2,
                "unit_configs": [{
                    "image": {
                        "source": "SWR",
                        "swr_path": image_storage_path_in_swr,
                    },
                    "custom_spec": {
                        "memory": 1024,
                        "cpu": 1,
                    },
                    "cmd": "sleep 20",
                    "count": 1,
                    "recovery": "Instance",
                    "envs": {
                        "foo": "bar",
                    },
                }],
            }],
            tags={
                "foo": "bar",
                "key": "value",
            },
            runtime_config=json.dumps({
                "service_invoke": {
                    "port": 9876,
                    "protocol": "HTTPS",
                    "auth_type": "TOKEN",
                    "direct_channel_auth_enable": False,
                },
                "service_limit": {
                    "request_size_limit": 20,
                    "request_timeout": 30,
                    "ip_white_list": [],
                    "ip_black_list": [],
                    "rate_limit": {
                        "num": 200,
                        "unit": "SECONDS",
                    },
                },
            }),
            upgrade_config=json.dumps({
                "type": "ROLLING",
                "rolling_update": {
                    "max_surge": "50%",
                    "max_unavailable": "50%",
                },
            }))
        ```

        ## Import

        Service can be imported using resource `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/serviceV2:ServiceV2 test <id>
        ```

        :param str resource_name: The name of the resource.
        :param ServiceV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deploy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceV2GroupConfigArgs', 'ServiceV2GroupConfigArgsDict']]]]] = None,
                 log_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceV2LogConfigArgs', 'ServiceV2LogConfigArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_config: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_config: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceV2Args.__new__(ServiceV2Args)

            __props__.__dict__["deploy_type"] = deploy_type
            __props__.__dict__["description"] = description
            if group_configs is None and not opts.urn:
                raise TypeError("Missing required property 'group_configs'")
            __props__.__dict__["group_configs"] = group_configs
            __props__.__dict__["log_configs"] = log_configs
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if runtime_config is None and not opts.urn:
                raise TypeError("Missing required property 'runtime_config'")
            __props__.__dict__["runtime_config"] = runtime_config
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if upgrade_config is None and not opts.urn:
                raise TypeError("Missing required property 'upgrade_config'")
            __props__.__dict__["upgrade_config"] = upgrade_config
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["history_versions"] = None
            __props__.__dict__["predict_urls"] = None
            __props__.__dict__["status"] = None
        super(ServiceV2, __self__).__init__(
            'huaweicloud:ModelArts/serviceV2:ServiceV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            deploy_type: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            group_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceV2GroupConfigArgs', 'ServiceV2GroupConfigArgsDict']]]]] = None,
            history_versions: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            log_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceV2LogConfigArgs', 'ServiceV2LogConfigArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            predict_urls: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceV2PredictUrlArgs', 'ServiceV2PredictUrlArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            runtime_config: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            upgrade_config: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ServiceV2':
        """
        Get an existing ServiceV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] deploy_type: Specifies the deploy type of the service.  
               The valid values are as follows:
               + **SINGLE**
               + **MULTI**
               + **DIST**
        :param pulumi.Input[_builtins.str] description: Specifies the description of the service.
               The maximum valid length is `100`, and cannot contain these special characters (`!><=&'"`).
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceV2GroupConfigArgs', 'ServiceV2GroupConfigArgsDict']]]] group_configs: Specifies the instance group configurations of the service.  
               The group_configs structure is documented below.
               When the value of parameter `type` is **BATCH** or **EDGE**, only one group can be configured.
               When the value of parameter `type` is **REAL_TIME**, multiple service instances can be configured and weights can be
               assigned according to business needs.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] history_versions: The deployed history information of the service versions.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceV2LogConfigArgs', 'ServiceV2LogConfigArgsDict']]]] log_configs: Specifies the log configurations of the service.  
               The log_configs structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the instance group.  
               The valid length is limited from `1` to `64`, only English letters, Chinese characters, digits, hyphens (-) and
               underscores (_) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceV2PredictUrlArgs', 'ServiceV2PredictUrlArgsDict']]]] predict_urls: The access addresses of the service.  
               The predict_url structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the service is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] runtime_config: Specifies the configuration of the service runtime, in JSON format.
        :param pulumi.Input[_builtins.str] status: The status of the service.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the service.
               A maximum of `20` tags can be configured.
               
               <a name="v2_service_group_configs"></a>
               The `group_configs` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the type of LTS configuration.
               Currently, the valid value is **STDOUT**.
        :param pulumi.Input[_builtins.str] upgrade_config: Specifies the upgrade configuration of the service, in JSON format.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the service.  
               The maximum valid length is `8`, only digits and dots (.) are allowed.
               
               > Specifies the old version number can switch the historical version.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID of the service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceV2State.__new__(_ServiceV2State)

        __props__.__dict__["deploy_type"] = deploy_type
        __props__.__dict__["description"] = description
        __props__.__dict__["group_configs"] = group_configs
        __props__.__dict__["history_versions"] = history_versions
        __props__.__dict__["log_configs"] = log_configs
        __props__.__dict__["name"] = name
        __props__.__dict__["predict_urls"] = predict_urls
        __props__.__dict__["region"] = region
        __props__.__dict__["runtime_config"] = runtime_config
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["upgrade_config"] = upgrade_config
        __props__.__dict__["version"] = version
        __props__.__dict__["workspace_id"] = workspace_id
        return ServiceV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="deployType")
    def deploy_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the deploy type of the service.  
        The valid values are as follows:
        + **SINGLE**
        + **MULTI**
        + **DIST**
        """
        return pulumi.get(self, "deploy_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the service.
        The maximum valid length is `100`, and cannot contain these special characters (`!><=&'"`).
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="groupConfigs")
    def group_configs(self) -> pulumi.Output[Sequence['outputs.ServiceV2GroupConfig']]:
        """
        Specifies the instance group configurations of the service.  
        The group_configs structure is documented below.
        When the value of parameter `type` is **BATCH** or **EDGE**, only one group can be configured.
        When the value of parameter `type` is **REAL_TIME**, multiple service instances can be configured and weights can be
        assigned according to business needs.
        """
        return pulumi.get(self, "group_configs")

    @_builtins.property
    @pulumi.getter(name="historyVersions")
    def history_versions(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The deployed history information of the service versions.
        """
        return pulumi.get(self, "history_versions")

    @_builtins.property
    @pulumi.getter(name="logConfigs")
    def log_configs(self) -> pulumi.Output[Sequence['outputs.ServiceV2LogConfig']]:
        """
        Specifies the log configurations of the service.  
        The log_configs structure is documented below.
        """
        return pulumi.get(self, "log_configs")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the instance group.  
        The valid length is limited from `1` to `64`, only English letters, Chinese characters, digits, hyphens (-) and
        underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="predictUrls")
    def predict_urls(self) -> pulumi.Output[Sequence['outputs.ServiceV2PredictUrl']]:
        """
        The access addresses of the service.  
        The predict_url structure is documented below.
        """
        return pulumi.get(self, "predict_urls")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the service is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="runtimeConfig")
    def runtime_config(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the configuration of the service runtime, in JSON format.
        """
        return pulumi.get(self, "runtime_config")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the service.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the service.
        A maximum of `20` tags can be configured.

        <a name="v2_service_group_configs"></a>
        The `group_configs` block supports:
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of LTS configuration.
        Currently, the valid value is **STDOUT**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="upgradeConfig")
    def upgrade_config(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the upgrade configuration of the service, in JSON format.
        """
        return pulumi.get(self, "upgrade_config")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the version of the service.  
        The maximum valid length is `8`, only digits and dots (.) are allowed.

        > Specifies the old version number can switch the historical version.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the workspace ID of the service.
        """
        return pulumi.get(self, "workspace_id")

