# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkspaceArgs', 'Workspace']

@pulumi.input_type
class WorkspaceArgs:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 grants: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceGrantArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Workspace resource.
        :param pulumi.Input[_builtins.str] auth_type: Authorization type.  
               Value options are as follows:
               + **public**: public access within the tenant.
               + **private**: Only the creator and main account can access.
               + **internal**: Creator, main account, and specified IAM sub-accounts can access.
               
               Defaults to **public**.
        :param pulumi.Input[_builtins.str] description: The description of the workspace.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project id of the workspace.  
               Value 0 indicates the default enterprise project.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceGrantArgs']]] grants: List of authorized users.  
               It is mandatory when **auth_type** is **internal**.
               The grants structure is documented below.
               
               <a name="ModelartsWorkspace_Grants"></a>
               The `grants` block supports:
        :param pulumi.Input[_builtins.str] name: Workspace name, which consists of 4 to 64 characters.  
               Only chinese and english letters, digits, hyphens (-), and underscores (_) are allowed.
               **default** is the name of the default workspace reserved by the system.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authorization type.  
        Value options are as follows:
        + **public**: public access within the tenant.
        + **private**: Only the creator and main account can access.
        + **internal**: Creator, main account, and specified IAM sub-accounts can access.

        Defaults to **public**.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the workspace.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The enterprise project id of the workspace.  
        Value 0 indicates the default enterprise project.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def grants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceGrantArgs']]]]:
        """
        List of authorized users.  
        It is mandatory when **auth_type** is **internal**.
        The grants structure is documented below.

        <a name="ModelartsWorkspace_Grants"></a>
        The `grants` block supports:
        """
        return pulumi.get(self, "grants")

    @grants.setter
    def grants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceGrantArgs']]]]):
        pulumi.set(self, "grants", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Workspace name, which consists of 4 to 64 characters.  
        Only chinese and english letters, digits, hyphens (-), and underscores (_) are allowed.
        **default** is the name of the default workspace reserved by the system.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _WorkspaceState:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 grants: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceGrantArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_info: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Workspace resources.
        :param pulumi.Input[_builtins.str] auth_type: Authorization type.  
               Value options are as follows:
               + **public**: public access within the tenant.
               + **private**: Only the creator and main account can access.
               + **internal**: Creator, main account, and specified IAM sub-accounts can access.
               
               Defaults to **public**.
        :param pulumi.Input[_builtins.str] description: The description of the workspace.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project id of the workspace.  
               Value 0 indicates the default enterprise project.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceGrantArgs']]] grants: List of authorized users.  
               It is mandatory when **auth_type** is **internal**.
               The grants structure is documented below.
               
               <a name="ModelartsWorkspace_Grants"></a>
               The `grants` block supports:
        :param pulumi.Input[_builtins.str] name: Workspace name, which consists of 4 to 64 characters.  
               Only chinese and english letters, digits, hyphens (-), and underscores (_) are allowed.
               **default** is the name of the default workspace reserved by the system.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Workspace status.  
               Valid values are **CREATE_FAILED**, **NORMALL**, **DELETING** and **DELETE_FAILED**.
        :param pulumi.Input[_builtins.str] status_info: Status details.  
               If the deletion fails, you can check the reason through this field.
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_info is not None:
            pulumi.set(__self__, "status_info", status_info)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authorization type.  
        Value options are as follows:
        + **public**: public access within the tenant.
        + **private**: Only the creator and main account can access.
        + **internal**: Creator, main account, and specified IAM sub-accounts can access.

        Defaults to **public**.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the workspace.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The enterprise project id of the workspace.  
        Value 0 indicates the default enterprise project.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def grants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceGrantArgs']]]]:
        """
        List of authorized users.  
        It is mandatory when **auth_type** is **internal**.
        The grants structure is documented below.

        <a name="ModelartsWorkspace_Grants"></a>
        The `grants` block supports:
        """
        return pulumi.get(self, "grants")

    @grants.setter
    def grants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceGrantArgs']]]]):
        pulumi.set(self, "grants", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Workspace name, which consists of 4 to 64 characters.  
        Only chinese and english letters, digits, hyphens (-), and underscores (_) are allowed.
        **default** is the name of the default workspace reserved by the system.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Workspace status.  
        Valid values are **CREATE_FAILED**, **NORMALL**, **DELETING** and **DELETE_FAILED**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusInfo")
    def status_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status details.  
        If the deletion fails, you can check the reason through this field.
        """
        return pulumi.get(self, "status_info")

    @status_info.setter
    def status_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status_info", value)


@pulumi.type_token("huaweicloud:ModelArts/workspace:Workspace")
class Workspace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 grants: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WorkspaceGrantArgs', 'WorkspaceGrantArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a Modelarts workspace resource within HuaweiCloud.

        ## Example Usage

        ### Create a public workspace

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.modelarts.Workspace("test",
            name="demo",
            description="This is a demo")
        ```

        ### Create an internal workspace

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        user_id = config.require_object("userId")
        test = huaweicloud.modelarts.Workspace("test",
            name="demo",
            description="This is a demo",
            auth_type="internal",
            grants=[{
                "user_id": user_id,
            }])
        ```

        ## Import

        The Modelarts workspace can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/workspace:Workspace test 0ce123456a00f2591fabc00385ff1234
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_type: Authorization type.  
               Value options are as follows:
               + **public**: public access within the tenant.
               + **private**: Only the creator and main account can access.
               + **internal**: Creator, main account, and specified IAM sub-accounts can access.
               
               Defaults to **public**.
        :param pulumi.Input[_builtins.str] description: The description of the workspace.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project id of the workspace.  
               Value 0 indicates the default enterprise project.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WorkspaceGrantArgs', 'WorkspaceGrantArgsDict']]]] grants: List of authorized users.  
               It is mandatory when **auth_type** is **internal**.
               The grants structure is documented below.
               
               <a name="ModelartsWorkspace_Grants"></a>
               The `grants` block supports:
        :param pulumi.Input[_builtins.str] name: Workspace name, which consists of 4 to 64 characters.  
               Only chinese and english letters, digits, hyphens (-), and underscores (_) are allowed.
               **default** is the name of the default workspace reserved by the system.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WorkspaceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Modelarts workspace resource within HuaweiCloud.

        ## Example Usage

        ### Create a public workspace

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.modelarts.Workspace("test",
            name="demo",
            description="This is a demo")
        ```

        ### Create an internal workspace

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        user_id = config.require_object("userId")
        test = huaweicloud.modelarts.Workspace("test",
            name="demo",
            description="This is a demo",
            auth_type="internal",
            grants=[{
                "user_id": user_id,
            }])
        ```

        ## Import

        The Modelarts workspace can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/workspace:Workspace test 0ce123456a00f2591fabc00385ff1234
        ```

        :param str resource_name: The name of the resource.
        :param WorkspaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkspaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 grants: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WorkspaceGrantArgs', 'WorkspaceGrantArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkspaceArgs.__new__(WorkspaceArgs)

            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["grants"] = grants
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["status"] = None
            __props__.__dict__["status_info"] = None
        super(Workspace, __self__).__init__(
            'huaweicloud:ModelArts/workspace:Workspace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_type: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            grants: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WorkspaceGrantArgs', 'WorkspaceGrantArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_info: Optional[pulumi.Input[_builtins.str]] = None) -> 'Workspace':
        """
        Get an existing Workspace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_type: Authorization type.  
               Value options are as follows:
               + **public**: public access within the tenant.
               + **private**: Only the creator and main account can access.
               + **internal**: Creator, main account, and specified IAM sub-accounts can access.
               
               Defaults to **public**.
        :param pulumi.Input[_builtins.str] description: The description of the workspace.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project id of the workspace.  
               Value 0 indicates the default enterprise project.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WorkspaceGrantArgs', 'WorkspaceGrantArgsDict']]]] grants: List of authorized users.  
               It is mandatory when **auth_type** is **internal**.
               The grants structure is documented below.
               
               <a name="ModelartsWorkspace_Grants"></a>
               The `grants` block supports:
        :param pulumi.Input[_builtins.str] name: Workspace name, which consists of 4 to 64 characters.  
               Only chinese and english letters, digits, hyphens (-), and underscores (_) are allowed.
               **default** is the name of the default workspace reserved by the system.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Workspace status.  
               Valid values are **CREATE_FAILED**, **NORMALL**, **DELETING** and **DELETE_FAILED**.
        :param pulumi.Input[_builtins.str] status_info: Status details.  
               If the deletion fails, you can check the reason through this field.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkspaceState.__new__(_WorkspaceState)

        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["grants"] = grants
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["status_info"] = status_info
        return Workspace(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[_builtins.str]:
        """
        Authorization type.  
        Value options are as follows:
        + **public**: public access within the tenant.
        + **private**: Only the creator and main account can access.
        + **internal**: Creator, main account, and specified IAM sub-accounts can access.

        Defaults to **public**.
        """
        return pulumi.get(self, "auth_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description of the workspace.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The enterprise project id of the workspace.  
        Value 0 indicates the default enterprise project.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def grants(self) -> pulumi.Output[Optional[Sequence['outputs.WorkspaceGrant']]]:
        """
        List of authorized users.  
        It is mandatory when **auth_type** is **internal**.
        The grants structure is documented below.

        <a name="ModelartsWorkspace_Grants"></a>
        The `grants` block supports:
        """
        return pulumi.get(self, "grants")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Workspace name, which consists of 4 to 64 characters.  
        Only chinese and english letters, digits, hyphens (-), and underscores (_) are allowed.
        **default** is the name of the default workspace reserved by the system.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Workspace status.  
        Valid values are **CREATE_FAILED**, **NORMALL**, **DELETING** and **DELETE_FAILED**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusInfo")
    def status_info(self) -> pulumi.Output[_builtins.str]:
        """
        Status details.  
        If the deletion fails, you can check the reason through this field.
        """
        return pulumi.get(self, "status_info")

