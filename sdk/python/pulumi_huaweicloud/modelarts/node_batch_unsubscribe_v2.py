# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['NodeBatchUnsubscribeV2Args', 'NodeBatchUnsubscribeV2']

@pulumi.input_type
class NodeBatchUnsubscribeV2Args:
    def __init__(__self__, *,
                 node_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 resource_pool_name: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a NodeBatchUnsubscribeV2 resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] node_ids: Specifies the ID list of resource nodes to be unsubscribed.
        :param pulumi.Input[_builtins.str] resource_pool_name: Specifies the resource pool name to which the resource nodes
               belong.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the resource nodes are located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "node_ids", node_ids)
        pulumi.set(__self__, "resource_pool_name", resource_pool_name)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="nodeIds")
    def node_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the ID list of resource nodes to be unsubscribed.
        """
        return pulumi.get(self, "node_ids")

    @node_ids.setter
    def node_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "node_ids", value)

    @_builtins.property
    @pulumi.getter(name="resourcePoolName")
    def resource_pool_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource pool name to which the resource nodes
        belong.
        """
        return pulumi.get(self, "resource_pool_name")

    @resource_pool_name.setter
    def resource_pool_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_pool_name", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the resource nodes are located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _NodeBatchUnsubscribeV2State:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_pool_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering NodeBatchUnsubscribeV2 resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] node_ids: Specifies the ID list of resource nodes to be unsubscribed.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the resource nodes are located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_pool_name: Specifies the resource pool name to which the resource nodes
               belong.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if node_ids is not None:
            pulumi.set(__self__, "node_ids", node_ids)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_pool_name is not None:
            pulumi.set(__self__, "resource_pool_name", resource_pool_name)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="nodeIds")
    def node_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the ID list of resource nodes to be unsubscribed.
        """
        return pulumi.get(self, "node_ids")

    @node_ids.setter
    def node_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_ids", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the resource nodes are located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourcePoolName")
    def resource_pool_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource pool name to which the resource nodes
        belong.
        """
        return pulumi.get(self, "resource_pool_name")

    @resource_pool_name.setter
    def resource_pool_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_pool_name", value)


@pulumi.type_token("huaweicloud:ModelArts/nodeBatchUnsubscribeV2:NodeBatchUnsubscribeV2")
class NodeBatchUnsubscribeV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to batch delete the ModelArts nodes within HuaweiCloud.

        > This resource is only a one-time action resource for batch unsubscribe the ModelArts nodes. Deleting this resource
           will not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        > This resource can only be used to delete nodes with prePaid billing.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_pool_name = config.require_object("resourcePoolName")
        node_ids = config.require_object("nodeIds")
        test = huaweicloud.modelarts.NodeBatchUnsubscribeV2("test",
            resource_pool_name=resource_pool_name,
            node_ids=node_ids)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] node_ids: Specifies the ID list of resource nodes to be unsubscribed.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the resource nodes are located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_pool_name: Specifies the resource pool name to which the resource nodes
               belong.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NodeBatchUnsubscribeV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to batch delete the ModelArts nodes within HuaweiCloud.

        > This resource is only a one-time action resource for batch unsubscribe the ModelArts nodes. Deleting this resource
           will not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        > This resource can only be used to delete nodes with prePaid billing.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_pool_name = config.require_object("resourcePoolName")
        node_ids = config.require_object("nodeIds")
        test = huaweicloud.modelarts.NodeBatchUnsubscribeV2("test",
            resource_pool_name=resource_pool_name,
            node_ids=node_ids)
        ```

        :param str resource_name: The name of the resource.
        :param NodeBatchUnsubscribeV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NodeBatchUnsubscribeV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NodeBatchUnsubscribeV2Args.__new__(NodeBatchUnsubscribeV2Args)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if node_ids is None and not opts.urn:
                raise TypeError("Missing required property 'node_ids'")
            __props__.__dict__["node_ids"] = node_ids
            __props__.__dict__["region"] = region
            if resource_pool_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_pool_name'")
            __props__.__dict__["resource_pool_name"] = resource_pool_name
        super(NodeBatchUnsubscribeV2, __self__).__init__(
            'huaweicloud:ModelArts/nodeBatchUnsubscribeV2:NodeBatchUnsubscribeV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_pool_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'NodeBatchUnsubscribeV2':
        """
        Get an existing NodeBatchUnsubscribeV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] node_ids: Specifies the ID list of resource nodes to be unsubscribed.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the resource nodes are located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_pool_name: Specifies the resource pool name to which the resource nodes
               belong.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NodeBatchUnsubscribeV2State.__new__(_NodeBatchUnsubscribeV2State)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["node_ids"] = node_ids
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_pool_name"] = resource_pool_name
        return NodeBatchUnsubscribeV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="nodeIds")
    def node_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the ID list of resource nodes to be unsubscribed.
        """
        return pulumi.get(self, "node_ids")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the resource nodes are located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourcePoolName")
    def resource_pool_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the resource pool name to which the resource nodes
        belong.
        """
        return pulumi.get(self, "resource_pool_name")

