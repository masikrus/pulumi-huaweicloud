# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkArgs', 'Network']

@pulumi.input_type
class NetworkArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_connections: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPeerConnectionArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Network resource.
        :param pulumi.Input[_builtins.str] cidr: Network CIDR.
               Valid CIDR blocks are 10.0.0.0/8-24, 172.16.0.0/12-24, and 192.168.0.0/16-24.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of network.  
               The name can contain `4` to `32` characters, only lowercase letters, digits and hyphens (-) are allowed.
               The name must start with a lowercase letter and end with a lowercase letter or digit.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkPeerConnectionArgs']]] peer_connections: List of networks that can be connected in peer mode.
               The peer_connections structure is documented below.
               
               <a name="ModelartsNetwork_PeerConnection"></a>
               The `peer_connections` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Workspace ID, which defaults to 0.  
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer_connections is not None:
            pulumi.set(__self__, "peer_connections", peer_connections)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[_builtins.str]:
        """
        Network CIDR.
        Valid CIDR blocks are 10.0.0.0/8-24, 172.16.0.0/12-24, and 192.168.0.0/16-24.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of network.  
        The name can contain `4` to `32` characters, only lowercase letters, digits and hyphens (-) are allowed.
        The name must start with a lowercase letter and end with a lowercase letter or digit.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="peerConnections")
    def peer_connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPeerConnectionArgs']]]]:
        """
        List of networks that can be connected in peer mode.
        The peer_connections structure is documented below.

        <a name="ModelartsNetwork_PeerConnection"></a>
        The `peer_connections` block supports:
        """
        return pulumi.get(self, "peer_connections")

    @peer_connections.setter
    def peer_connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPeerConnectionArgs']]]]):
        pulumi.set(self, "peer_connections", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Workspace ID, which defaults to 0.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class _NetworkState:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_connections: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPeerConnectionArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Network resources.
        :param pulumi.Input[_builtins.str] cidr: Network CIDR.
               Valid CIDR blocks are 10.0.0.0/8-24, 172.16.0.0/12-24, and 192.168.0.0/16-24.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of network.  
               The name can contain `4` to `32` characters, only lowercase letters, digits and hyphens (-) are allowed.
               The name must start with a lowercase letter and end with a lowercase letter or digit.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkPeerConnectionArgs']]] peer_connections: List of networks that can be connected in peer mode.
               The peer_connections structure is documented below.
               
               <a name="ModelartsNetwork_PeerConnection"></a>
               The `peer_connections` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of network.  
               Value options are as follows:
               + **Creating**: The network is being created.
               + **Active**: The network is available.
               + **Abnormal**: The network is in an error state.
        :param pulumi.Input[_builtins.str] workspace_id: Workspace ID, which defaults to 0.  
               
               Changing this parameter will create a new resource.
        """
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer_connections is not None:
            pulumi.set(__self__, "peer_connections", peer_connections)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Network CIDR.
        Valid CIDR blocks are 10.0.0.0/8-24, 172.16.0.0/12-24, and 192.168.0.0/16-24.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of network.  
        The name can contain `4` to `32` characters, only lowercase letters, digits and hyphens (-) are allowed.
        The name must start with a lowercase letter and end with a lowercase letter or digit.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="peerConnections")
    def peer_connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPeerConnectionArgs']]]]:
        """
        List of networks that can be connected in peer mode.
        The peer_connections structure is documented below.

        <a name="ModelartsNetwork_PeerConnection"></a>
        The `peer_connections` block supports:
        """
        return pulumi.get(self, "peer_connections")

    @peer_connections.setter
    def peer_connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPeerConnectionArgs']]]]):
        pulumi.set(self, "peer_connections", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of network.  
        Value options are as follows:
        + **Creating**: The network is being created.
        + **Active**: The network is available.
        + **Abnormal**: The network is in an error state.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Workspace ID, which defaults to 0.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:ModelArts/network:Network")
class Network(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkPeerConnectionArgs', 'NetworkPeerConnectionArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a Modelarts network resource within HuaweiCloud.\\
        A maximum of 15 networks can be created.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cidr = config.require_object("cidr")
        test = huaweicloud.modelarts.Network("test",
            name="demo",
            cidr=cidr)
        ```

        ## Import

        The modelarts network can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/network:Network test 0ce123456a00f2591fabc00385ff1234
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cidr: Network CIDR.
               Valid CIDR blocks are 10.0.0.0/8-24, 172.16.0.0/12-24, and 192.168.0.0/16-24.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of network.  
               The name can contain `4` to `32` characters, only lowercase letters, digits and hyphens (-) are allowed.
               The name must start with a lowercase letter and end with a lowercase letter or digit.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkPeerConnectionArgs', 'NetworkPeerConnectionArgsDict']]]] peer_connections: List of networks that can be connected in peer mode.
               The peer_connections structure is documented below.
               
               <a name="ModelartsNetwork_PeerConnection"></a>
               The `peer_connections` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Workspace ID, which defaults to 0.  
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Modelarts network resource within HuaweiCloud.\\
        A maximum of 15 networks can be created.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cidr = config.require_object("cidr")
        test = huaweicloud.modelarts.Network("test",
            name="demo",
            cidr=cidr)
        ```

        ## Import

        The modelarts network can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/network:Network test 0ce123456a00f2591fabc00385ff1234
        ```

        :param str resource_name: The name of the resource.
        :param NetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkPeerConnectionArgs', 'NetworkPeerConnectionArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkArgs.__new__(NetworkArgs)

            if cidr is None and not opts.urn:
                raise TypeError("Missing required property 'cidr'")
            __props__.__dict__["cidr"] = cidr
            __props__.__dict__["name"] = name
            __props__.__dict__["peer_connections"] = peer_connections
            __props__.__dict__["region"] = region
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["status"] = None
        super(Network, __self__).__init__(
            'huaweicloud:ModelArts/network:Network',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            peer_connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkPeerConnectionArgs', 'NetworkPeerConnectionArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Network':
        """
        Get an existing Network resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cidr: Network CIDR.
               Valid CIDR blocks are 10.0.0.0/8-24, 172.16.0.0/12-24, and 192.168.0.0/16-24.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of network.  
               The name can contain `4` to `32` characters, only lowercase letters, digits and hyphens (-) are allowed.
               The name must start with a lowercase letter and end with a lowercase letter or digit.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkPeerConnectionArgs', 'NetworkPeerConnectionArgsDict']]]] peer_connections: List of networks that can be connected in peer mode.
               The peer_connections structure is documented below.
               
               <a name="ModelartsNetwork_PeerConnection"></a>
               The `peer_connections` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of network.  
               Value options are as follows:
               + **Creating**: The network is being created.
               + **Active**: The network is available.
               + **Abnormal**: The network is in an error state.
        :param pulumi.Input[_builtins.str] workspace_id: Workspace ID, which defaults to 0.  
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkState.__new__(_NetworkState)

        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["name"] = name
        __props__.__dict__["peer_connections"] = peer_connections
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["workspace_id"] = workspace_id
        return Network(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[_builtins.str]:
        """
        Network CIDR.
        Valid CIDR blocks are 10.0.0.0/8-24, 172.16.0.0/12-24, and 192.168.0.0/16-24.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of network.  
        The name can contain `4` to `32` characters, only lowercase letters, digits and hyphens (-) are allowed.
        The name must start with a lowercase letter and end with a lowercase letter or digit.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="peerConnections")
    def peer_connections(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkPeerConnection']]]:
        """
        List of networks that can be connected in peer mode.
        The peer_connections structure is documented below.

        <a name="ModelartsNetwork_PeerConnection"></a>
        The `peer_connections` block supports:
        """
        return pulumi.get(self, "peer_connections")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of network.  
        Value options are as follows:
        + **Creating**: The network is being created.
        + **Active**: The network is available.
        + **Abnormal**: The network is in an error state.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Workspace ID, which defaults to 0.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

