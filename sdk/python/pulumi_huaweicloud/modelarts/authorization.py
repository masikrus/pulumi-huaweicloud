# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AuthorizationArgs', 'Authorization']

@pulumi.input_type
class AuthorizationArgs:
    def __init__(__self__, *,
                 agency_name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 user_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Authorization resource.
        :param pulumi.Input[_builtins.str] agency_name: Agency name.  
               If the agency does not exist, it will be created automatically,
               the agency name can be **modelarts_agency** or prefixed with **ma_agency_**.
        :param pulumi.Input[_builtins.str] type: Authorization type. The valid value is **agency**.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_id: User ID.  
               If user_id is set to **all-users**, all IAM users are authorized.
               If this user has been authorized, the authorization setting will be updated.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "agency_name", agency_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_id", user_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> pulumi.Input[_builtins.str]:
        """
        Agency name.  
        If the agency does not exist, it will be created automatically,
        the agency name can be **modelarts_agency** or prefixed with **ma_agency_**.
        """
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "agency_name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Authorization type. The valid value is **agency**.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[_builtins.str]:
        """
        User ID.  
        If user_id is set to **all-users**, all IAM users are authorized.
        If this user has been authorized, the authorization setting will be updated.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AuthorizationState:
    def __init__(__self__, *,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Authorization resources.
        :param pulumi.Input[_builtins.str] agency_name: Agency name.  
               If the agency does not exist, it will be created automatically,
               the agency name can be **modelarts_agency** or prefixed with **ma_agency_**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Authorization type. The valid value is **agency**.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_id: User ID.  
               If user_id is set to **all-users**, all IAM users are authorized.
               If this user has been authorized, the authorization setting will be updated.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_name: User Name.  
               The value is **all-users** if `user_id` is set to **all-users**.
        """
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Agency name.  
        If the agency does not exist, it will be created automatically,
        the agency name can be **modelarts_agency** or prefixed with **ma_agency_**.
        """
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authorization type. The valid value is **agency**.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User ID.  
        If user_id is set to **all-users**, all IAM users are authorized.
        If this user has been authorized, the authorization setting will be updated.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User Name.  
        The value is **all-users** if `user_id` is set to **all-users**.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


@pulumi.type_token("huaweicloud:ModelArts/authorization:Authorization")
class Authorization(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a ModelArts authorization resource within HuaweiCloud.

        ## Example Usage

        ### Authorized to an IAM user

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        user_id = config.require_object("userId")
        test = huaweicloud.modelarts.Authorization("test",
            user_id=user_id,
            type="agency",
            agency_name="ma_agency_userName")
        ```

        ### Authorized to all IAM users

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.modelarts.Authorization("test",
            user_id="all-users",
            type="agency",
            agency_name="modelarts_agency")
        ```

        ## Import

        The ModelArts authorization can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/authorization:Authorization test 0ce123456a00f2591fabc00385ff1234
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency_name: Agency name.  
               If the agency does not exist, it will be created automatically,
               the agency name can be **modelarts_agency** or prefixed with **ma_agency_**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Authorization type. The valid value is **agency**.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_id: User ID.  
               If user_id is set to **all-users**, all IAM users are authorized.
               If this user has been authorized, the authorization setting will be updated.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuthorizationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a ModelArts authorization resource within HuaweiCloud.

        ## Example Usage

        ### Authorized to an IAM user

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        user_id = config.require_object("userId")
        test = huaweicloud.modelarts.Authorization("test",
            user_id=user_id,
            type="agency",
            agency_name="ma_agency_userName")
        ```

        ### Authorized to all IAM users

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.modelarts.Authorization("test",
            user_id="all-users",
            type="agency",
            agency_name="modelarts_agency")
        ```

        ## Import

        The ModelArts authorization can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ModelArts/authorization:Authorization test 0ce123456a00f2591fabc00385ff1234
        ```

        :param str resource_name: The name of the resource.
        :param AuthorizationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuthorizationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuthorizationArgs.__new__(AuthorizationArgs)

            if agency_name is None and not opts.urn:
                raise TypeError("Missing required property 'agency_name'")
            __props__.__dict__["agency_name"] = agency_name
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if user_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_id'")
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["user_name"] = None
        super(Authorization, __self__).__init__(
            'huaweicloud:ModelArts/authorization:Authorization',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agency_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            user_id: Optional[pulumi.Input[_builtins.str]] = None,
            user_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'Authorization':
        """
        Get an existing Authorization resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency_name: Agency name.  
               If the agency does not exist, it will be created automatically,
               the agency name can be **modelarts_agency** or prefixed with **ma_agency_**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Authorization type. The valid value is **agency**.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_id: User ID.  
               If user_id is set to **all-users**, all IAM users are authorized.
               If this user has been authorized, the authorization setting will be updated.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_name: User Name.  
               The value is **all-users** if `user_id` is set to **all-users**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuthorizationState.__new__(_AuthorizationState)

        __props__.__dict__["agency_name"] = agency_name
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["user_name"] = user_name
        return Authorization(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> pulumi.Output[_builtins.str]:
        """
        Agency name.  
        If the agency does not exist, it will be created automatically,
        the agency name can be **modelarts_agency** or prefixed with **ma_agency_**.
        """
        return pulumi.get(self, "agency_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Authorization type. The valid value is **agency**.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[_builtins.str]:
        """
        User ID.  
        If user_id is set to **all-users**, all IAM users are authorized.
        If this user has been authorized, the authorization setting will be updated.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[_builtins.str]:
        """
        User Name.  
        The value is **all-users** if `user_id` is set to **all-users**.
        """
        return pulumi.get(self, "user_name")

