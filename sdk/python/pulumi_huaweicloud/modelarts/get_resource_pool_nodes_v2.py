# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourcePoolNodesV2Result',
    'AwaitableGetResourcePoolNodesV2Result',
    'get_resource_pool_nodes_v2',
    'get_resource_pool_nodes_v2_output',
]

@pulumi.output_type
class GetResourcePoolNodesV2Result:
    """
    A collection of values returned by getResourcePoolNodesV2.
    """
    def __init__(__self__, id=None, nodes=None, region=None, resource_pool_name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if nodes and not isinstance(nodes, list):
            raise TypeError("Expected argument 'nodes' to be a list")
        pulumi.set(__self__, "nodes", nodes)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_pool_name and not isinstance(resource_pool_name, str):
            raise TypeError("Expected argument 'resource_pool_name' to be a str")
        pulumi.set(__self__, "resource_pool_name", resource_pool_name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetResourcePoolNodesV2NodeResult']:
        """
        All queried resource nodes under a specified resource pool.  
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourcePoolName")
    def resource_pool_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_pool_name")


class AwaitableGetResourcePoolNodesV2Result(GetResourcePoolNodesV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourcePoolNodesV2Result(
            id=self.id,
            nodes=self.nodes,
            region=self.region,
            resource_pool_name=self.resource_pool_name)


def get_resource_pool_nodes_v2(region: Optional[_builtins.str] = None,
                               resource_pool_name: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourcePoolNodesV2Result:
    """
    Use this data source to get node list under a specified resource pool within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_pool_name = config.require_object("resourcePoolName")
    test = huaweicloud.ModelArts.get_resource_pool_nodes_v2(resource_pool_name=resource_pool_name)
    ```


    :param _builtins.str region: Specifies the region where the resource nodes are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_pool_name: Specifies the resource pool name to which the resource nodes belong.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['resourcePoolName'] = resource_pool_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ModelArts/getResourcePoolNodesV2:getResourcePoolNodesV2', __args__, opts=opts, typ=GetResourcePoolNodesV2Result).value

    return AwaitableGetResourcePoolNodesV2Result(
        id=pulumi.get(__ret__, 'id'),
        nodes=pulumi.get(__ret__, 'nodes'),
        region=pulumi.get(__ret__, 'region'),
        resource_pool_name=pulumi.get(__ret__, 'resource_pool_name'))
def get_resource_pool_nodes_v2_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      resource_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourcePoolNodesV2Result]:
    """
    Use this data source to get node list under a specified resource pool within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_pool_name = config.require_object("resourcePoolName")
    test = huaweicloud.ModelArts.get_resource_pool_nodes_v2(resource_pool_name=resource_pool_name)
    ```


    :param _builtins.str region: Specifies the region where the resource nodes are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_pool_name: Specifies the resource pool name to which the resource nodes belong.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['resourcePoolName'] = resource_pool_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ModelArts/getResourcePoolNodesV2:getResourcePoolNodesV2', __args__, opts=opts, typ=GetResourcePoolNodesV2Result)
    return __ret__.apply(lambda __response__: GetResourcePoolNodesV2Result(
        id=pulumi.get(__response__, 'id'),
        nodes=pulumi.get(__response__, 'nodes'),
        region=pulumi.get(__response__, 'region'),
        resource_pool_name=pulumi.get(__response__, 'resource_pool_name')))
