# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetUserGroupsResult',
    'AwaitableGetUserGroupsResult',
    'get_user_groups',
    'get_user_groups_output',
]

@pulumi.output_type
class GetUserGroupsResult:
    """
    A collection of values returned by getUserGroups.
    """
    def __init__(__self__, id=None, region=None, user_groups=None, vpn_server_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if user_groups and not isinstance(user_groups, list):
            raise TypeError("Expected argument 'user_groups' to be a list")
        pulumi.set(__self__, "user_groups", user_groups)
        if vpn_server_id and not isinstance(vpn_server_id, str):
            raise TypeError("Expected argument 'vpn_server_id' to be a str")
        pulumi.set(__self__, "vpn_server_id", vpn_server_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="userGroups")
    def user_groups(self) -> Sequence['outputs.GetUserGroupsUserGroupResult']:
        """
        The user group list information.
        """
        return pulumi.get(self, "user_groups")

    @_builtins.property
    @pulumi.getter(name="vpnServerId")
    def vpn_server_id(self) -> _builtins.str:
        return pulumi.get(self, "vpn_server_id")


class AwaitableGetUserGroupsResult(GetUserGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserGroupsResult(
            id=self.id,
            region=self.region,
            user_groups=self.user_groups,
            vpn_server_id=self.vpn_server_id)


def get_user_groups(region: Optional[_builtins.str] = None,
                    vpn_server_id: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserGroupsResult:
    """
    Use this data source to get the list of VPN user groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    vpn_server_id = config.require_object("vpnServerId")
    test = huaweicloud.vpn.get_user_groups(vpn_server_id=vpn_server_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str vpn_server_id: Specifies the ID of a VPN server.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['vpnServerId'] = vpn_server_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:vpn/getUserGroups:getUserGroups', __args__, opts=opts, typ=GetUserGroupsResult).value

    return AwaitableGetUserGroupsResult(
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        user_groups=pulumi.get(__ret__, 'user_groups'),
        vpn_server_id=pulumi.get(__ret__, 'vpn_server_id'))
def get_user_groups_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           vpn_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserGroupsResult]:
    """
    Use this data source to get the list of VPN user groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    vpn_server_id = config.require_object("vpnServerId")
    test = huaweicloud.vpn.get_user_groups(vpn_server_id=vpn_server_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str vpn_server_id: Specifies the ID of a VPN server.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['vpnServerId'] = vpn_server_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:vpn/getUserGroups:getUserGroups', __args__, opts=opts, typ=GetUserGroupsResult)
    return __ret__.apply(lambda __response__: GetUserGroupsResult(
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        user_groups=pulumi.get(__response__, 'user_groups'),
        vpn_server_id=pulumi.get(__response__, 'vpn_server_id')))
