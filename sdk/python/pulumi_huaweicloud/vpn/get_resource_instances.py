# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetResourceInstancesResult',
    'AwaitableGetResourceInstancesResult',
    'get_resource_instances',
    'get_resource_instances_output',
]

@pulumi.output_type
class GetResourceInstancesResult:
    """
    A collection of values returned by getResourceInstances.
    """
    def __init__(__self__, id=None, matches=None, region=None, resource_type=None, resources=None, tags=None, without_any_tag=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if matches and not isinstance(matches, list):
            raise TypeError("Expected argument 'matches' to be a list")
        pulumi.set(__self__, "matches", matches)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if without_any_tag and not isinstance(without_any_tag, bool):
            raise TypeError("Expected argument 'without_any_tag' to be a bool")
        pulumi.set(__self__, "without_any_tag", without_any_tag)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetResourceInstancesMatchResult']]:
        return pulumi.get(self, "matches")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetResourceInstancesResourceResult']:
        """
        Indicates the resource object list.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetResourceInstancesTagResult']]:
        """
        Indicates the tag list.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="withoutAnyTag")
    def without_any_tag(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "without_any_tag")


class AwaitableGetResourceInstancesResult(GetResourceInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceInstancesResult(
            id=self.id,
            matches=self.matches,
            region=self.region,
            resource_type=self.resource_type,
            resources=self.resources,
            tags=self.tags,
            without_any_tag=self.without_any_tag)


def get_resource_instances(matches: Optional[Sequence[Union['GetResourceInstancesMatchArgs', 'GetResourceInstancesMatchArgsDict']]] = None,
                           region: Optional[_builtins.str] = None,
                           resource_type: Optional[_builtins.str] = None,
                           tags: Optional[Sequence[Union['GetResourceInstancesTagArgs', 'GetResourceInstancesTagArgsDict']]] = None,
                           without_any_tag: Optional[_builtins.bool] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceInstancesResult:
    """
    Use this data source to get the list of VPN resource instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_type = config.require_object("resourceType")
    test = huaweicloud.vpn.get_resource_instances(resource_type=resource_type)
    ```


    :param Sequence[Union['GetResourceInstancesMatchArgs', 'GetResourceInstancesMatchArgsDict']] matches: Specifies the search field, including a key and a value.
           
           The matches structure is documented below.
           
           <a name="tags_struct"></a>
           The `tags` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_type: Specifies the resource type.
           Valid values are **vpn-gateway**, **customer-gateway**, **vpn-connection**, **p2c-vpn-gateways**.
    :param Sequence[Union['GetResourceInstancesTagArgs', 'GetResourceInstancesTagArgsDict']] tags: Specifies the tag list.
           A maximum of **20** tags can be specified.
           
           The tags structure is documented below.
    :param _builtins.bool without_any_tag: Specifies whether to filter instances.
           + If this parameter is set to **true**, all resources without tags are queried. The `tags` field is ignored.
           + If this parameter is set to **false**, all resources are queried or resources are filtered by `tags` or `matches`.
           
           Defaults to **false**.
    """
    __args__ = dict()
    __args__['matches'] = matches
    __args__['region'] = region
    __args__['resourceType'] = resource_type
    __args__['tags'] = tags
    __args__['withoutAnyTag'] = without_any_tag
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:vpn/getResourceInstances:getResourceInstances', __args__, opts=opts, typ=GetResourceInstancesResult).value

    return AwaitableGetResourceInstancesResult(
        id=pulumi.get(__ret__, 'id'),
        matches=pulumi.get(__ret__, 'matches'),
        region=pulumi.get(__ret__, 'region'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        resources=pulumi.get(__ret__, 'resources'),
        tags=pulumi.get(__ret__, 'tags'),
        without_any_tag=pulumi.get(__ret__, 'without_any_tag'))
def get_resource_instances_output(matches: Optional[pulumi.Input[Optional[Sequence[Union['GetResourceInstancesMatchArgs', 'GetResourceInstancesMatchArgsDict']]]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                                  tags: Optional[pulumi.Input[Optional[Sequence[Union['GetResourceInstancesTagArgs', 'GetResourceInstancesTagArgsDict']]]]] = None,
                                  without_any_tag: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceInstancesResult]:
    """
    Use this data source to get the list of VPN resource instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_type = config.require_object("resourceType")
    test = huaweicloud.vpn.get_resource_instances(resource_type=resource_type)
    ```


    :param Sequence[Union['GetResourceInstancesMatchArgs', 'GetResourceInstancesMatchArgsDict']] matches: Specifies the search field, including a key and a value.
           
           The matches structure is documented below.
           
           <a name="tags_struct"></a>
           The `tags` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_type: Specifies the resource type.
           Valid values are **vpn-gateway**, **customer-gateway**, **vpn-connection**, **p2c-vpn-gateways**.
    :param Sequence[Union['GetResourceInstancesTagArgs', 'GetResourceInstancesTagArgsDict']] tags: Specifies the tag list.
           A maximum of **20** tags can be specified.
           
           The tags structure is documented below.
    :param _builtins.bool without_any_tag: Specifies whether to filter instances.
           + If this parameter is set to **true**, all resources without tags are queried. The `tags` field is ignored.
           + If this parameter is set to **false**, all resources are queried or resources are filtered by `tags` or `matches`.
           
           Defaults to **false**.
    """
    __args__ = dict()
    __args__['matches'] = matches
    __args__['region'] = region
    __args__['resourceType'] = resource_type
    __args__['tags'] = tags
    __args__['withoutAnyTag'] = without_any_tag
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:vpn/getResourceInstances:getResourceInstances', __args__, opts=opts, typ=GetResourceInstancesResult)
    return __ret__.apply(lambda __response__: GetResourceInstancesResult(
        id=pulumi.get(__response__, 'id'),
        matches=pulumi.get(__response__, 'matches'),
        region=pulumi.get(__response__, 'region'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        resources=pulumi.get(__response__, 'resources'),
        tags=pulumi.get(__response__, 'tags'),
        without_any_tag=pulumi.get(__response__, 'without_any_tag')))
