# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetP2cGatewayConnectionsResult',
    'AwaitableGetP2cGatewayConnectionsResult',
    'get_p2c_gateway_connections',
    'get_p2c_gateway_connections_output',
]

@pulumi.output_type
class GetP2cGatewayConnectionsResult:
    """
    A collection of values returned by getP2cGatewayConnections.
    """
    def __init__(__self__, connections=None, id=None, p2c_gateway_id=None, region=None):
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        pulumi.set(__self__, "connections", connections)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if p2c_gateway_id and not isinstance(p2c_gateway_id, str):
            raise TypeError("Expected argument 'p2c_gateway_id' to be a str")
        pulumi.set(__self__, "p2c_gateway_id", p2c_gateway_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetP2cGatewayConnectionsConnectionResult']:
        """
        The connection list.
        """
        return pulumi.get(self, "connections")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="p2cGatewayId")
    def p2c_gateway_id(self) -> _builtins.str:
        return pulumi.get(self, "p2c_gateway_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetP2cGatewayConnectionsResult(GetP2cGatewayConnectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetP2cGatewayConnectionsResult(
            connections=self.connections,
            id=self.id,
            p2c_gateway_id=self.p2c_gateway_id,
            region=self.region)


def get_p2c_gateway_connections(p2c_gateway_id: Optional[_builtins.str] = None,
                                region: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetP2cGatewayConnectionsResult:
    """
    Use this data source to get the list of P2C VPN gateway connections.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    gateway_id = config.require_object("gatewayId")
    test = huaweicloud.vpn.get_p2c_gateway_connections(p2c_gateway_id=gateway_id)
    ```


    :param _builtins.str p2c_gateway_id: Specifies the ID of a P2C VPN gateway instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['p2cGatewayId'] = p2c_gateway_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:vpn/getP2cGatewayConnections:getP2cGatewayConnections', __args__, opts=opts, typ=GetP2cGatewayConnectionsResult).value

    return AwaitableGetP2cGatewayConnectionsResult(
        connections=pulumi.get(__ret__, 'connections'),
        id=pulumi.get(__ret__, 'id'),
        p2c_gateway_id=pulumi.get(__ret__, 'p2c_gateway_id'),
        region=pulumi.get(__ret__, 'region'))
def get_p2c_gateway_connections_output(p2c_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetP2cGatewayConnectionsResult]:
    """
    Use this data source to get the list of P2C VPN gateway connections.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    gateway_id = config.require_object("gatewayId")
    test = huaweicloud.vpn.get_p2c_gateway_connections(p2c_gateway_id=gateway_id)
    ```


    :param _builtins.str p2c_gateway_id: Specifies the ID of a P2C VPN gateway instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['p2cGatewayId'] = p2c_gateway_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:vpn/getP2cGatewayConnections:getP2cGatewayConnections', __args__, opts=opts, typ=GetP2cGatewayConnectionsResult)
    return __ret__.apply(lambda __response__: GetP2cGatewayConnectionsResult(
        connections=pulumi.get(__response__, 'connections'),
        id=pulumi.get(__response__, 'id'),
        p2c_gateway_id=pulumi.get(__response__, 'p2c_gateway_id'),
        region=pulumi.get(__response__, 'region')))
