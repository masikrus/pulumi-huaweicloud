# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServerArgs', 'Server']

@pulumi.input_type
class ServerArgs:
    def __init__(__self__, *,
                 client_cidr: pulumi.Input[_builtins.str],
                 local_subnets: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 p2c_vgw_id: pulumi.Input[_builtins.str],
                 client_auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 client_ca_certificates: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClientCaCertificateArgs']]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_certificate: Optional[pulumi.Input['ServerServerCertificateArgs']] = None,
                 ssl_options: Optional[pulumi.Input['ServerSslOptionsArgs']] = None,
                 tunnel_protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Server resource.
        :param pulumi.Input[_builtins.str] client_cidr: Specifies the client CIDR block. A virtual IP address on this CIDR block will be
               assigned to a client for establishing a connection. The value is in the format of dotted decimal notation/mask,
               for example, **192.168.1.0/24**. The client CIDR block cannot conflict with the routes in the default route table of
               the VPC to which the gateway belongs or any local CIDR block of the server. The number of available IP addresses in
               the client CIDR block must be greater than **four** times the maximum number of gateway connections. The client CIDR
               block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, **240.0.0.0/4**, or **169.254.0.0/16**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] local_subnets: Specifies the list of local CIDR blocks. A local CIDR block is a destination CIDR
               block on the cloud to be accessed by client CIDR blocks through a VPN. The value is in the format of dotted decimal
               notation/mask, for example, **10.10.1.0/24**. By default, a maximum of **20** local CIDR blocks are supported. The
               local CIDR block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, or **240.0.0.0/4**.
        :param pulumi.Input[_builtins.str] p2c_vgw_id: Specifies the ID of a P2C VPN gateway instance.
        :param pulumi.Input[_builtins.str] client_auth_type: Specifies the client authentication mode.
               Value can be as follows:
               + **CERT**: certificate authentication
               + **LOCAL_PASSWORD**: password authentication (local)
               
               The default value is **LOCAL_PASSWORD**.
        :param pulumi.Input[Sequence[pulumi.Input['ServerClientCaCertificateArgs']]] client_ca_certificates: Specifies the list of client CA certificates, which are used to
               authenticate client certificates. This parameter is mandatory when **SSL** is used as the `tunnel_protocol` and
               the `client_auth_type` is **CERT**. A maximum of **10** client CA certificates can be uploaded.
               
               The client_ca_certificates structure is documented below.
        :param pulumi.Input[_builtins.str] os_type: Specifies the OS type.
               Value can be **Windows**, **Linux**, **MacOS**, **Android** or **iOS**. The default value is **Windows**.
               
               <a name="block--client_ca_certificates"></a>
               The `client_ca_certificates` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['ServerServerCertificateArgs'] server_certificate: Specifies the server certificate info. This parameter is mandatory when
               **SSL** is used as the `tunnel_protocol`. It is recommended to use a certificate with a strong cryptographic
               algorithm, such as **RSA-3072** or **RSA-4096**.
               
               The server_certificate structure is documented below.
        :param pulumi.Input['ServerSslOptionsArgs'] ssl_options: Specifies the SSL options. This parameter is mandatory when **SSL** is used as the
               `tunnel_protocol`.
               
               The ssl_options structure is documented below.
        :param pulumi.Input[_builtins.str] tunnel_protocol: Specifies the tunnel protocol. Value can be **SSL**.
               Defaults to **SSL**.
        """
        pulumi.set(__self__, "client_cidr", client_cidr)
        pulumi.set(__self__, "local_subnets", local_subnets)
        pulumi.set(__self__, "p2c_vgw_id", p2c_vgw_id)
        if client_auth_type is not None:
            pulumi.set(__self__, "client_auth_type", client_auth_type)
        if client_ca_certificates is not None:
            pulumi.set(__self__, "client_ca_certificates", client_ca_certificates)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server_certificate is not None:
            pulumi.set(__self__, "server_certificate", server_certificate)
        if ssl_options is not None:
            pulumi.set(__self__, "ssl_options", ssl_options)
        if tunnel_protocol is not None:
            pulumi.set(__self__, "tunnel_protocol", tunnel_protocol)

    @_builtins.property
    @pulumi.getter(name="clientCidr")
    def client_cidr(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the client CIDR block. A virtual IP address on this CIDR block will be
        assigned to a client for establishing a connection. The value is in the format of dotted decimal notation/mask,
        for example, **192.168.1.0/24**. The client CIDR block cannot conflict with the routes in the default route table of
        the VPC to which the gateway belongs or any local CIDR block of the server. The number of available IP addresses in
        the client CIDR block must be greater than **four** times the maximum number of gateway connections. The client CIDR
        block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, **240.0.0.0/4**, or **169.254.0.0/16**.
        """
        return pulumi.get(self, "client_cidr")

    @client_cidr.setter
    def client_cidr(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_cidr", value)

    @_builtins.property
    @pulumi.getter(name="localSubnets")
    def local_subnets(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the list of local CIDR blocks. A local CIDR block is a destination CIDR
        block on the cloud to be accessed by client CIDR blocks through a VPN. The value is in the format of dotted decimal
        notation/mask, for example, **10.10.1.0/24**. By default, a maximum of **20** local CIDR blocks are supported. The
        local CIDR block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, or **240.0.0.0/4**.
        """
        return pulumi.get(self, "local_subnets")

    @local_subnets.setter
    def local_subnets(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "local_subnets", value)

    @_builtins.property
    @pulumi.getter(name="p2cVgwId")
    def p2c_vgw_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a P2C VPN gateway instance.
        """
        return pulumi.get(self, "p2c_vgw_id")

    @p2c_vgw_id.setter
    def p2c_vgw_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "p2c_vgw_id", value)

    @_builtins.property
    @pulumi.getter(name="clientAuthType")
    def client_auth_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the client authentication mode.
        Value can be as follows:
        + **CERT**: certificate authentication
        + **LOCAL_PASSWORD**: password authentication (local)

        The default value is **LOCAL_PASSWORD**.
        """
        return pulumi.get(self, "client_auth_type")

    @client_auth_type.setter
    def client_auth_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_auth_type", value)

    @_builtins.property
    @pulumi.getter(name="clientCaCertificates")
    def client_ca_certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerClientCaCertificateArgs']]]]:
        """
        Specifies the list of client CA certificates, which are used to
        authenticate client certificates. This parameter is mandatory when **SSL** is used as the `tunnel_protocol` and
        the `client_auth_type` is **CERT**. A maximum of **10** client CA certificates can be uploaded.

        The client_ca_certificates structure is documented below.
        """
        return pulumi.get(self, "client_ca_certificates")

    @client_ca_certificates.setter
    def client_ca_certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClientCaCertificateArgs']]]]):
        pulumi.set(self, "client_ca_certificates", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OS type.
        Value can be **Windows**, **Linux**, **MacOS**, **Android** or **iOS**. The default value is **Windows**.

        <a name="block--client_ca_certificates"></a>
        The `client_ca_certificates` block supports:
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serverCertificate")
    def server_certificate(self) -> Optional[pulumi.Input['ServerServerCertificateArgs']]:
        """
        Specifies the server certificate info. This parameter is mandatory when
        **SSL** is used as the `tunnel_protocol`. It is recommended to use a certificate with a strong cryptographic
        algorithm, such as **RSA-3072** or **RSA-4096**.

        The server_certificate structure is documented below.
        """
        return pulumi.get(self, "server_certificate")

    @server_certificate.setter
    def server_certificate(self, value: Optional[pulumi.Input['ServerServerCertificateArgs']]):
        pulumi.set(self, "server_certificate", value)

    @_builtins.property
    @pulumi.getter(name="sslOptions")
    def ssl_options(self) -> Optional[pulumi.Input['ServerSslOptionsArgs']]:
        """
        Specifies the SSL options. This parameter is mandatory when **SSL** is used as the
        `tunnel_protocol`.

        The ssl_options structure is documented below.
        """
        return pulumi.get(self, "ssl_options")

    @ssl_options.setter
    def ssl_options(self, value: Optional[pulumi.Input['ServerSslOptionsArgs']]):
        pulumi.set(self, "ssl_options", value)

    @_builtins.property
    @pulumi.getter(name="tunnelProtocol")
    def tunnel_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the tunnel protocol. Value can be **SSL**.
        Defaults to **SSL**.
        """
        return pulumi.get(self, "tunnel_protocol")

    @tunnel_protocol.setter
    def tunnel_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_protocol", value)


@pulumi.input_type
class _ServerState:
    def __init__(__self__, *,
                 client_auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 client_ca_certificates: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClientCaCertificateArgs']]]] = None,
                 client_ca_certificates_uploadeds: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClientCaCertificatesUploadedArgs']]]] = None,
                 client_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 client_config: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 local_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 p2c_vgw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_certificate: Optional[pulumi.Input['ServerServerCertificateArgs']] = None,
                 ssl_options: Optional[pulumi.Input['ServerSslOptionsArgs']] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Server resources.
        :param pulumi.Input[_builtins.str] client_auth_type: Specifies the client authentication mode.
               Value can be as follows:
               + **CERT**: certificate authentication
               + **LOCAL_PASSWORD**: password authentication (local)
               
               The default value is **LOCAL_PASSWORD**.
        :param pulumi.Input[Sequence[pulumi.Input['ServerClientCaCertificateArgs']]] client_ca_certificates: Specifies the list of client CA certificates, which are used to
               authenticate client certificates. This parameter is mandatory when **SSL** is used as the `tunnel_protocol` and
               the `client_auth_type` is **CERT**. A maximum of **10** client CA certificates can be uploaded.
               
               The client_ca_certificates structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ServerClientCaCertificatesUploadedArgs']]] client_ca_certificates_uploadeds: Indicates the list of client CA certificates.
        :param pulumi.Input[_builtins.str] client_cidr: Specifies the client CIDR block. A virtual IP address on this CIDR block will be
               assigned to a client for establishing a connection. The value is in the format of dotted decimal notation/mask,
               for example, **192.168.1.0/24**. The client CIDR block cannot conflict with the routes in the default route table of
               the VPC to which the gateway belongs or any local CIDR block of the server. The number of available IP addresses in
               the client CIDR block must be greater than **four** times the maximum number of gateway connections. The client CIDR
               block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, **240.0.0.0/4**, or **169.254.0.0/16**.
        :param pulumi.Input[_builtins.str] client_config: The client config.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the client CA certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] local_subnets: Specifies the list of local CIDR blocks. A local CIDR block is a destination CIDR
               block on the cloud to be accessed by client CIDR blocks through a VPN. The value is in the format of dotted decimal
               notation/mask, for example, **10.10.1.0/24**. By default, a maximum of **20** local CIDR blocks are supported. The
               local CIDR block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, or **240.0.0.0/4**.
        :param pulumi.Input[_builtins.str] os_type: Specifies the OS type.
               Value can be **Windows**, **Linux**, **MacOS**, **Android** or **iOS**. The default value is **Windows**.
               
               <a name="block--client_ca_certificates"></a>
               The `client_ca_certificates` block supports:
        :param pulumi.Input[_builtins.str] p2c_vgw_id: Specifies the ID of a P2C VPN gateway instance.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['ServerServerCertificateArgs'] server_certificate: Specifies the server certificate info. This parameter is mandatory when
               **SSL** is used as the `tunnel_protocol`. It is recommended to use a certificate with a strong cryptographic
               algorithm, such as **RSA-3072** or **RSA-4096**.
               
               The server_certificate structure is documented below.
        :param pulumi.Input['ServerSslOptionsArgs'] ssl_options: Specifies the SSL options. This parameter is mandatory when **SSL** is used as the
               `tunnel_protocol`.
               
               The ssl_options structure is documented below.
        :param pulumi.Input[_builtins.str] status: The server status.
        :param pulumi.Input[_builtins.str] tunnel_protocol: Specifies the tunnel protocol. Value can be **SSL**.
               Defaults to **SSL**.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the client CA certificate.
        """
        if client_auth_type is not None:
            pulumi.set(__self__, "client_auth_type", client_auth_type)
        if client_ca_certificates is not None:
            pulumi.set(__self__, "client_ca_certificates", client_ca_certificates)
        if client_ca_certificates_uploadeds is not None:
            pulumi.set(__self__, "client_ca_certificates_uploadeds", client_ca_certificates_uploadeds)
        if client_cidr is not None:
            pulumi.set(__self__, "client_cidr", client_cidr)
        if client_config is not None:
            pulumi.set(__self__, "client_config", client_config)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if local_subnets is not None:
            pulumi.set(__self__, "local_subnets", local_subnets)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if p2c_vgw_id is not None:
            pulumi.set(__self__, "p2c_vgw_id", p2c_vgw_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server_certificate is not None:
            pulumi.set(__self__, "server_certificate", server_certificate)
        if ssl_options is not None:
            pulumi.set(__self__, "ssl_options", ssl_options)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_protocol is not None:
            pulumi.set(__self__, "tunnel_protocol", tunnel_protocol)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="clientAuthType")
    def client_auth_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the client authentication mode.
        Value can be as follows:
        + **CERT**: certificate authentication
        + **LOCAL_PASSWORD**: password authentication (local)

        The default value is **LOCAL_PASSWORD**.
        """
        return pulumi.get(self, "client_auth_type")

    @client_auth_type.setter
    def client_auth_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_auth_type", value)

    @_builtins.property
    @pulumi.getter(name="clientCaCertificates")
    def client_ca_certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerClientCaCertificateArgs']]]]:
        """
        Specifies the list of client CA certificates, which are used to
        authenticate client certificates. This parameter is mandatory when **SSL** is used as the `tunnel_protocol` and
        the `client_auth_type` is **CERT**. A maximum of **10** client CA certificates can be uploaded.

        The client_ca_certificates structure is documented below.
        """
        return pulumi.get(self, "client_ca_certificates")

    @client_ca_certificates.setter
    def client_ca_certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClientCaCertificateArgs']]]]):
        pulumi.set(self, "client_ca_certificates", value)

    @_builtins.property
    @pulumi.getter(name="clientCaCertificatesUploadeds")
    def client_ca_certificates_uploadeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerClientCaCertificatesUploadedArgs']]]]:
        """
        Indicates the list of client CA certificates.
        """
        return pulumi.get(self, "client_ca_certificates_uploadeds")

    @client_ca_certificates_uploadeds.setter
    def client_ca_certificates_uploadeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClientCaCertificatesUploadedArgs']]]]):
        pulumi.set(self, "client_ca_certificates_uploadeds", value)

    @_builtins.property
    @pulumi.getter(name="clientCidr")
    def client_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the client CIDR block. A virtual IP address on this CIDR block will be
        assigned to a client for establishing a connection. The value is in the format of dotted decimal notation/mask,
        for example, **192.168.1.0/24**. The client CIDR block cannot conflict with the routes in the default route table of
        the VPC to which the gateway belongs or any local CIDR block of the server. The number of available IP addresses in
        the client CIDR block must be greater than **four** times the maximum number of gateway connections. The client CIDR
        block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, **240.0.0.0/4**, or **169.254.0.0/16**.
        """
        return pulumi.get(self, "client_cidr")

    @client_cidr.setter
    def client_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_cidr", value)

    @_builtins.property
    @pulumi.getter(name="clientConfig")
    def client_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The client config.
        """
        return pulumi.get(self, "client_config")

    @client_config.setter
    def client_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_config", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the client CA certificate.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="localSubnets")
    def local_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of local CIDR blocks. A local CIDR block is a destination CIDR
        block on the cloud to be accessed by client CIDR blocks through a VPN. The value is in the format of dotted decimal
        notation/mask, for example, **10.10.1.0/24**. By default, a maximum of **20** local CIDR blocks are supported. The
        local CIDR block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, or **240.0.0.0/4**.
        """
        return pulumi.get(self, "local_subnets")

    @local_subnets.setter
    def local_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "local_subnets", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OS type.
        Value can be **Windows**, **Linux**, **MacOS**, **Android** or **iOS**. The default value is **Windows**.

        <a name="block--client_ca_certificates"></a>
        The `client_ca_certificates` block supports:
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="p2cVgwId")
    def p2c_vgw_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a P2C VPN gateway instance.
        """
        return pulumi.get(self, "p2c_vgw_id")

    @p2c_vgw_id.setter
    def p2c_vgw_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "p2c_vgw_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serverCertificate")
    def server_certificate(self) -> Optional[pulumi.Input['ServerServerCertificateArgs']]:
        """
        Specifies the server certificate info. This parameter is mandatory when
        **SSL** is used as the `tunnel_protocol`. It is recommended to use a certificate with a strong cryptographic
        algorithm, such as **RSA-3072** or **RSA-4096**.

        The server_certificate structure is documented below.
        """
        return pulumi.get(self, "server_certificate")

    @server_certificate.setter
    def server_certificate(self, value: Optional[pulumi.Input['ServerServerCertificateArgs']]):
        pulumi.set(self, "server_certificate", value)

    @_builtins.property
    @pulumi.getter(name="sslOptions")
    def ssl_options(self) -> Optional[pulumi.Input['ServerSslOptionsArgs']]:
        """
        Specifies the SSL options. This parameter is mandatory when **SSL** is used as the
        `tunnel_protocol`.

        The ssl_options structure is documented below.
        """
        return pulumi.get(self, "ssl_options")

    @ssl_options.setter
    def ssl_options(self, value: Optional[pulumi.Input['ServerSslOptionsArgs']]):
        pulumi.set(self, "ssl_options", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The server status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="tunnelProtocol")
    def tunnel_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the tunnel protocol. Value can be **SSL**.
        Defaults to **SSL**.
        """
        return pulumi.get(self, "tunnel_protocol")

    @tunnel_protocol.setter
    def tunnel_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_protocol", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time of the client CA certificate.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:vpn/server:Server")
class Server(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 client_ca_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerClientCaCertificateArgs', 'ServerClientCaCertificateArgsDict']]]]] = None,
                 client_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 local_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 p2c_vgw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_certificate: Optional[pulumi.Input[Union['ServerServerCertificateArgs', 'ServerServerCertificateArgsDict']]] = None,
                 ssl_options: Optional[pulumi.Input[Union['ServerSslOptionsArgs', 'ServerSslOptionsArgsDict']]] = None,
                 tunnel_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a VPN server resource within HuaweiCloud.

        ## Example Usage

        ### create a server, and client auth type is LOCAL_PASSWORD

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        p2c_vgw_id = config.require_object("p2cVgwId")
        local_subnets = config.require_object("localSubnets")
        client_cidr = config.require_object("clientCidr")
        server_certificate_id = config.require_object("serverCertificateId")
        test = huaweicloud.vpn.Server("test",
            p2c_vgw_id=p2c_vgw_id,
            local_subnets=local_subnets,
            client_cidr=client_cidr,
            client_auth_type="LOCAL_PASSWORD",
            server_certificate={
                "id": server_certificate_id,
            },
            ssl_options={
                "protocol": "TCP",
                "port": 443,
                "encryption_algorithm": "AES-128-GCM",
                "is_compressed": False,
            })
        ```

        ## Import

        The server can be imported using `p2c_vgw_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:vpn/server:Server test <p2c_vgw_id>/<id>
        ```

        Please add the followings if some attributes are missing when importing the resource.

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `client_ca_certificates` and `os_type`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the server, or the resource definition should be updated to

        align with the server. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_vpn_server" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              client_ca_certificates, os_type,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] client_auth_type: Specifies the client authentication mode.
               Value can be as follows:
               + **CERT**: certificate authentication
               + **LOCAL_PASSWORD**: password authentication (local)
               
               The default value is **LOCAL_PASSWORD**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServerClientCaCertificateArgs', 'ServerClientCaCertificateArgsDict']]]] client_ca_certificates: Specifies the list of client CA certificates, which are used to
               authenticate client certificates. This parameter is mandatory when **SSL** is used as the `tunnel_protocol` and
               the `client_auth_type` is **CERT**. A maximum of **10** client CA certificates can be uploaded.
               
               The client_ca_certificates structure is documented below.
        :param pulumi.Input[_builtins.str] client_cidr: Specifies the client CIDR block. A virtual IP address on this CIDR block will be
               assigned to a client for establishing a connection. The value is in the format of dotted decimal notation/mask,
               for example, **192.168.1.0/24**. The client CIDR block cannot conflict with the routes in the default route table of
               the VPC to which the gateway belongs or any local CIDR block of the server. The number of available IP addresses in
               the client CIDR block must be greater than **four** times the maximum number of gateway connections. The client CIDR
               block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, **240.0.0.0/4**, or **169.254.0.0/16**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] local_subnets: Specifies the list of local CIDR blocks. A local CIDR block is a destination CIDR
               block on the cloud to be accessed by client CIDR blocks through a VPN. The value is in the format of dotted decimal
               notation/mask, for example, **10.10.1.0/24**. By default, a maximum of **20** local CIDR blocks are supported. The
               local CIDR block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, or **240.0.0.0/4**.
        :param pulumi.Input[_builtins.str] os_type: Specifies the OS type.
               Value can be **Windows**, **Linux**, **MacOS**, **Android** or **iOS**. The default value is **Windows**.
               
               <a name="block--client_ca_certificates"></a>
               The `client_ca_certificates` block supports:
        :param pulumi.Input[_builtins.str] p2c_vgw_id: Specifies the ID of a P2C VPN gateway instance.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['ServerServerCertificateArgs', 'ServerServerCertificateArgsDict']] server_certificate: Specifies the server certificate info. This parameter is mandatory when
               **SSL** is used as the `tunnel_protocol`. It is recommended to use a certificate with a strong cryptographic
               algorithm, such as **RSA-3072** or **RSA-4096**.
               
               The server_certificate structure is documented below.
        :param pulumi.Input[Union['ServerSslOptionsArgs', 'ServerSslOptionsArgsDict']] ssl_options: Specifies the SSL options. This parameter is mandatory when **SSL** is used as the
               `tunnel_protocol`.
               
               The ssl_options structure is documented below.
        :param pulumi.Input[_builtins.str] tunnel_protocol: Specifies the tunnel protocol. Value can be **SSL**.
               Defaults to **SSL**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a VPN server resource within HuaweiCloud.

        ## Example Usage

        ### create a server, and client auth type is LOCAL_PASSWORD

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        p2c_vgw_id = config.require_object("p2cVgwId")
        local_subnets = config.require_object("localSubnets")
        client_cidr = config.require_object("clientCidr")
        server_certificate_id = config.require_object("serverCertificateId")
        test = huaweicloud.vpn.Server("test",
            p2c_vgw_id=p2c_vgw_id,
            local_subnets=local_subnets,
            client_cidr=client_cidr,
            client_auth_type="LOCAL_PASSWORD",
            server_certificate={
                "id": server_certificate_id,
            },
            ssl_options={
                "protocol": "TCP",
                "port": 443,
                "encryption_algorithm": "AES-128-GCM",
                "is_compressed": False,
            })
        ```

        ## Import

        The server can be imported using `p2c_vgw_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:vpn/server:Server test <p2c_vgw_id>/<id>
        ```

        Please add the followings if some attributes are missing when importing the resource.

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `client_ca_certificates` and `os_type`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the server, or the resource definition should be updated to

        align with the server. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_vpn_server" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              client_ca_certificates, os_type,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 client_ca_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerClientCaCertificateArgs', 'ServerClientCaCertificateArgsDict']]]]] = None,
                 client_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 local_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 p2c_vgw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_certificate: Optional[pulumi.Input[Union['ServerServerCertificateArgs', 'ServerServerCertificateArgsDict']]] = None,
                 ssl_options: Optional[pulumi.Input[Union['ServerSslOptionsArgs', 'ServerSslOptionsArgsDict']]] = None,
                 tunnel_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServerArgs.__new__(ServerArgs)

            __props__.__dict__["client_auth_type"] = client_auth_type
            __props__.__dict__["client_ca_certificates"] = client_ca_certificates
            if client_cidr is None and not opts.urn:
                raise TypeError("Missing required property 'client_cidr'")
            __props__.__dict__["client_cidr"] = client_cidr
            __props__.__dict__["enable_force_new"] = enable_force_new
            if local_subnets is None and not opts.urn:
                raise TypeError("Missing required property 'local_subnets'")
            __props__.__dict__["local_subnets"] = local_subnets
            __props__.__dict__["os_type"] = os_type
            if p2c_vgw_id is None and not opts.urn:
                raise TypeError("Missing required property 'p2c_vgw_id'")
            __props__.__dict__["p2c_vgw_id"] = p2c_vgw_id
            __props__.__dict__["region"] = region
            __props__.__dict__["server_certificate"] = server_certificate
            __props__.__dict__["ssl_options"] = ssl_options
            __props__.__dict__["tunnel_protocol"] = tunnel_protocol
            __props__.__dict__["client_ca_certificates_uploadeds"] = None
            __props__.__dict__["client_config"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(Server, __self__).__init__(
            'huaweicloud:vpn/server:Server',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_auth_type: Optional[pulumi.Input[_builtins.str]] = None,
            client_ca_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerClientCaCertificateArgs', 'ServerClientCaCertificateArgsDict']]]]] = None,
            client_ca_certificates_uploadeds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerClientCaCertificatesUploadedArgs', 'ServerClientCaCertificatesUploadedArgsDict']]]]] = None,
            client_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            client_config: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            local_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            os_type: Optional[pulumi.Input[_builtins.str]] = None,
            p2c_vgw_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            server_certificate: Optional[pulumi.Input[Union['ServerServerCertificateArgs', 'ServerServerCertificateArgsDict']]] = None,
            ssl_options: Optional[pulumi.Input[Union['ServerSslOptionsArgs', 'ServerSslOptionsArgsDict']]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_protocol: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'Server':
        """
        Get an existing Server resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] client_auth_type: Specifies the client authentication mode.
               Value can be as follows:
               + **CERT**: certificate authentication
               + **LOCAL_PASSWORD**: password authentication (local)
               
               The default value is **LOCAL_PASSWORD**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServerClientCaCertificateArgs', 'ServerClientCaCertificateArgsDict']]]] client_ca_certificates: Specifies the list of client CA certificates, which are used to
               authenticate client certificates. This parameter is mandatory when **SSL** is used as the `tunnel_protocol` and
               the `client_auth_type` is **CERT**. A maximum of **10** client CA certificates can be uploaded.
               
               The client_ca_certificates structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServerClientCaCertificatesUploadedArgs', 'ServerClientCaCertificatesUploadedArgsDict']]]] client_ca_certificates_uploadeds: Indicates the list of client CA certificates.
        :param pulumi.Input[_builtins.str] client_cidr: Specifies the client CIDR block. A virtual IP address on this CIDR block will be
               assigned to a client for establishing a connection. The value is in the format of dotted decimal notation/mask,
               for example, **192.168.1.0/24**. The client CIDR block cannot conflict with the routes in the default route table of
               the VPC to which the gateway belongs or any local CIDR block of the server. The number of available IP addresses in
               the client CIDR block must be greater than **four** times the maximum number of gateway connections. The client CIDR
               block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, **240.0.0.0/4**, or **169.254.0.0/16**.
        :param pulumi.Input[_builtins.str] client_config: The client config.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the client CA certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] local_subnets: Specifies the list of local CIDR blocks. A local CIDR block is a destination CIDR
               block on the cloud to be accessed by client CIDR blocks through a VPN. The value is in the format of dotted decimal
               notation/mask, for example, **10.10.1.0/24**. By default, a maximum of **20** local CIDR blocks are supported. The
               local CIDR block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, or **240.0.0.0/4**.
        :param pulumi.Input[_builtins.str] os_type: Specifies the OS type.
               Value can be **Windows**, **Linux**, **MacOS**, **Android** or **iOS**. The default value is **Windows**.
               
               <a name="block--client_ca_certificates"></a>
               The `client_ca_certificates` block supports:
        :param pulumi.Input[_builtins.str] p2c_vgw_id: Specifies the ID of a P2C VPN gateway instance.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['ServerServerCertificateArgs', 'ServerServerCertificateArgsDict']] server_certificate: Specifies the server certificate info. This parameter is mandatory when
               **SSL** is used as the `tunnel_protocol`. It is recommended to use a certificate with a strong cryptographic
               algorithm, such as **RSA-3072** or **RSA-4096**.
               
               The server_certificate structure is documented below.
        :param pulumi.Input[Union['ServerSslOptionsArgs', 'ServerSslOptionsArgsDict']] ssl_options: Specifies the SSL options. This parameter is mandatory when **SSL** is used as the
               `tunnel_protocol`.
               
               The ssl_options structure is documented below.
        :param pulumi.Input[_builtins.str] status: The server status.
        :param pulumi.Input[_builtins.str] tunnel_protocol: Specifies the tunnel protocol. Value can be **SSL**.
               Defaults to **SSL**.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the client CA certificate.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServerState.__new__(_ServerState)

        __props__.__dict__["client_auth_type"] = client_auth_type
        __props__.__dict__["client_ca_certificates"] = client_ca_certificates
        __props__.__dict__["client_ca_certificates_uploadeds"] = client_ca_certificates_uploadeds
        __props__.__dict__["client_cidr"] = client_cidr
        __props__.__dict__["client_config"] = client_config
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["local_subnets"] = local_subnets
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["p2c_vgw_id"] = p2c_vgw_id
        __props__.__dict__["region"] = region
        __props__.__dict__["server_certificate"] = server_certificate
        __props__.__dict__["ssl_options"] = ssl_options
        __props__.__dict__["status"] = status
        __props__.__dict__["tunnel_protocol"] = tunnel_protocol
        __props__.__dict__["updated_at"] = updated_at
        return Server(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clientAuthType")
    def client_auth_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the client authentication mode.
        Value can be as follows:
        + **CERT**: certificate authentication
        + **LOCAL_PASSWORD**: password authentication (local)

        The default value is **LOCAL_PASSWORD**.
        """
        return pulumi.get(self, "client_auth_type")

    @_builtins.property
    @pulumi.getter(name="clientCaCertificates")
    def client_ca_certificates(self) -> pulumi.Output[Optional[Sequence['outputs.ServerClientCaCertificate']]]:
        """
        Specifies the list of client CA certificates, which are used to
        authenticate client certificates. This parameter is mandatory when **SSL** is used as the `tunnel_protocol` and
        the `client_auth_type` is **CERT**. A maximum of **10** client CA certificates can be uploaded.

        The client_ca_certificates structure is documented below.
        """
        return pulumi.get(self, "client_ca_certificates")

    @_builtins.property
    @pulumi.getter(name="clientCaCertificatesUploadeds")
    def client_ca_certificates_uploadeds(self) -> pulumi.Output[Sequence['outputs.ServerClientCaCertificatesUploaded']]:
        """
        Indicates the list of client CA certificates.
        """
        return pulumi.get(self, "client_ca_certificates_uploadeds")

    @_builtins.property
    @pulumi.getter(name="clientCidr")
    def client_cidr(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the client CIDR block. A virtual IP address on this CIDR block will be
        assigned to a client for establishing a connection. The value is in the format of dotted decimal notation/mask,
        for example, **192.168.1.0/24**. The client CIDR block cannot conflict with the routes in the default route table of
        the VPC to which the gateway belongs or any local CIDR block of the server. The number of available IP addresses in
        the client CIDR block must be greater than **four** times the maximum number of gateway connections. The client CIDR
        block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, **240.0.0.0/4**, or **169.254.0.0/16**.
        """
        return pulumi.get(self, "client_cidr")

    @_builtins.property
    @pulumi.getter(name="clientConfig")
    def client_config(self) -> pulumi.Output[_builtins.str]:
        """
        The client config.
        """
        return pulumi.get(self, "client_config")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the client CA certificate.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="localSubnets")
    def local_subnets(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of local CIDR blocks. A local CIDR block is a destination CIDR
        block on the cloud to be accessed by client CIDR blocks through a VPN. The value is in the format of dotted decimal
        notation/mask, for example, **10.10.1.0/24**. By default, a maximum of **20** local CIDR blocks are supported. The
        local CIDR block cannot be **0.0.0.0/8**, **127.0.0.0/8**, **224.0.0.0/4**, or **240.0.0.0/4**.
        """
        return pulumi.get(self, "local_subnets")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the OS type.
        Value can be **Windows**, **Linux**, **MacOS**, **Android** or **iOS**. The default value is **Windows**.

        <a name="block--client_ca_certificates"></a>
        The `client_ca_certificates` block supports:
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="p2cVgwId")
    def p2c_vgw_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a P2C VPN gateway instance.
        """
        return pulumi.get(self, "p2c_vgw_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverCertificate")
    def server_certificate(self) -> pulumi.Output[Optional['outputs.ServerServerCertificate']]:
        """
        Specifies the server certificate info. This parameter is mandatory when
        **SSL** is used as the `tunnel_protocol`. It is recommended to use a certificate with a strong cryptographic
        algorithm, such as **RSA-3072** or **RSA-4096**.

        The server_certificate structure is documented below.
        """
        return pulumi.get(self, "server_certificate")

    @_builtins.property
    @pulumi.getter(name="sslOptions")
    def ssl_options(self) -> pulumi.Output['outputs.ServerSslOptions']:
        """
        Specifies the SSL options. This parameter is mandatory when **SSL** is used as the
        `tunnel_protocol`.

        The ssl_options structure is documented below.
        """
        return pulumi.get(self, "ssl_options")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The server status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tunnelProtocol")
    def tunnel_protocol(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the tunnel protocol. Value can be **SSL**.
        Defaults to **SSL**.
        """
        return pulumi.get(self, "tunnel_protocol")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time of the client CA certificate.
        """
        return pulumi.get(self, "updated_at")

