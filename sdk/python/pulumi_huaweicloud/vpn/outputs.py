# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ConnectionIkepolicy',
    'ConnectionIkepolicyDpd',
    'ConnectionIpsecpolicy',
    'ConnectionPolicyRule',
    'GatewayCertificate',
    'GatewayEip1',
    'GatewayEip2',
    'GatewayMasterEip',
    'GatewaySlaveEip',
    'ServerClientCaCertificate',
    'ServerClientCaCertificatesUploaded',
    'ServerServerCertificate',
    'ServerSslOptions',
    'UserGroupUser',
    'GetAccessPoliciesAccessPolicyResult',
    'GetConnectionHealthChecksConnectionHealthCheckResult',
    'GetConnectionLogsLogResult',
    'GetConnectionsConnectionResult',
    'GetConnectionsConnectionIkepolicyResult',
    'GetConnectionsConnectionIkepolicyDpdResult',
    'GetConnectionsConnectionIpsecpolicyResult',
    'GetConnectionsConnectionPolicyRuleResult',
    'GetCustomerGatewaysCustomerGatewayResult',
    'GetCustomerGatewaysCustomerGatewayCaCertificateResult',
    'GetGatewayAvailabilityZonesV51AvailabilityZoneResult',
    'GetGatewayAvailabilityZonesV51AvailabilityZoneAvailableSpecResult',
    'GetGatewayRouteTablesRoutingTableResult',
    'GetGatewayRouteTablesRoutingTableNexthopResourceResult',
    'GetGatewaysGatewayResult',
    'GetGatewaysGatewayEipResult',
    'GetP2cGatewayConnectionsConnectionResult',
    'GetP2cGatewaysP2cVpnGatewayResult',
    'GetP2cGatewaysP2cVpnGatewayEipResult',
    'GetP2cGatewaysP2cVpnGatewayTagResult',
    'GetQuotasQuotaResult',
    'GetQuotasQuotaResourceResult',
    'GetResourceInstancesMatchResult',
    'GetResourceInstancesResourceResult',
    'GetResourceInstancesResourceTagResult',
    'GetResourceInstancesTagResult',
    'GetServersVpnServerResult',
    'GetServersVpnServerClientCaCertificateResult',
    'GetServersVpnServerServerCertificateResult',
    'GetServersVpnServerSslOptionResult',
    'GetTagsTagResult',
    'GetUserGroupsUserGroupResult',
    'GetUsersUserResult',
]

@pulumi.output_type
class ConnectionIkepolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationAlgorithm":
            suggest = "authentication_algorithm"
        elif key == "authenticationMethod":
            suggest = "authentication_method"
        elif key == "dhGroup":
            suggest = "dh_group"
        elif key == "encryptionAlgorithm":
            suggest = "encryption_algorithm"
        elif key == "ikeVersion":
            suggest = "ike_version"
        elif key == "lifetimeSeconds":
            suggest = "lifetime_seconds"
        elif key == "localId":
            suggest = "local_id"
        elif key == "localIdType":
            suggest = "local_id_type"
        elif key == "peerId":
            suggest = "peer_id"
        elif key == "peerIdType":
            suggest = "peer_id_type"
        elif key == "phase1NegotiationMode":
            suggest = "phase1_negotiation_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionIkepolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionIkepolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionIkepolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_algorithm: Optional[_builtins.str] = None,
                 authentication_method: Optional[_builtins.str] = None,
                 dh_group: Optional[_builtins.str] = None,
                 dpd: Optional['outputs.ConnectionIkepolicyDpd'] = None,
                 encryption_algorithm: Optional[_builtins.str] = None,
                 ike_version: Optional[_builtins.str] = None,
                 lifetime_seconds: Optional[_builtins.int] = None,
                 local_id: Optional[_builtins.str] = None,
                 local_id_type: Optional[_builtins.str] = None,
                 peer_id: Optional[_builtins.str] = None,
                 peer_id_type: Optional[_builtins.str] = None,
                 pfs: Optional[_builtins.str] = None,
                 phase1_negotiation_mode: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_algorithm: The authentication algorithm. The value can be **sha1**, **md5**,
               **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
               please use them with caution.
        :param _builtins.str authentication_method: The authentication method during IKE negotiation.
               The value can be **pre-share** and **digital-envelope-v2**. Defaults to **pre-share**.
        :param _builtins.str dh_group: Specifies the DH group used for key exchange in phase 1.
               The value can be **group1**, **group2**, **group5**, **group14**, **group15**, **group16**, **group19**, **group20**,
               or **group21**. Exercise caution when using **group1**, **group2**, **group5**,
               or **group14** as they have low security. Defaults to **group15**.
        :param 'ConnectionIkepolicyDpdArgs' dpd: Specifies the dead peer detection (DPD) object.
               The dpd structure is documented below.
               
               <a name="Connection_DPD"></a>
               The `dpd` block supports:
        :param _builtins.str encryption_algorithm: The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
               **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
               **3des** is less secure, please use it with caution.
        :param _builtins.str ike_version: The IKE negotiation version. The value can be **v1** and **v2**. Defaults to **v2**.
        :param _builtins.int lifetime_seconds: The lifecycle time of Ipsec tunnel in seconds.
               The value ranges from `60` to `604,800`. Defaults to `3600`.
        :param _builtins.str local_id: The local ID.
        :param _builtins.str local_id_type: The local ID type. The value can be **ip** or **fqdn**. Defaults to **ip**.
        :param _builtins.str peer_id: The peer ID.
        :param _builtins.str peer_id_type: The peer ID type. The value can be **ip**, **fqdn** or **any**. Defaults to **ip**.
        :param _builtins.str pfs: The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
               **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        :param _builtins.str phase1_negotiation_mode: The negotiation mode, only works when the ike_version is v1.
               The value can be **main** or **aggressive**. Defaults to **main**.
        """
        if authentication_algorithm is not None:
            pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if dpd is not None:
            pulumi.set(__self__, "dpd", dpd)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if lifetime_seconds is not None:
            pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if local_id_type is not None:
            pulumi.set(__self__, "local_id_type", local_id_type)
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if peer_id_type is not None:
            pulumi.set(__self__, "peer_id_type", peer_id_type)
        if pfs is not None:
            pulumi.set(__self__, "pfs", pfs)
        if phase1_negotiation_mode is not None:
            pulumi.set(__self__, "phase1_negotiation_mode", phase1_negotiation_mode)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> Optional[_builtins.str]:
        """
        The authentication algorithm. The value can be **sha1**, **md5**,
        **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
        please use them with caution.
        """
        return pulumi.get(self, "authentication_algorithm")

    @_builtins.property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[_builtins.str]:
        """
        The authentication method during IKE negotiation.
        The value can be **pre-share** and **digital-envelope-v2**. Defaults to **pre-share**.
        """
        return pulumi.get(self, "authentication_method")

    @_builtins.property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[_builtins.str]:
        """
        Specifies the DH group used for key exchange in phase 1.
        The value can be **group1**, **group2**, **group5**, **group14**, **group15**, **group16**, **group19**, **group20**,
        or **group21**. Exercise caution when using **group1**, **group2**, **group5**,
        or **group14** as they have low security. Defaults to **group15**.
        """
        return pulumi.get(self, "dh_group")

    @_builtins.property
    @pulumi.getter
    def dpd(self) -> Optional['outputs.ConnectionIkepolicyDpd']:
        """
        Specifies the dead peer detection (DPD) object.
        The dpd structure is documented below.

        <a name="Connection_DPD"></a>
        The `dpd` block supports:
        """
        return pulumi.get(self, "dpd")

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[_builtins.str]:
        """
        The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
        **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
        **3des** is less secure, please use it with caution.
        """
        return pulumi.get(self, "encryption_algorithm")

    @_builtins.property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[_builtins.str]:
        """
        The IKE negotiation version. The value can be **v1** and **v2**. Defaults to **v2**.
        """
        return pulumi.get(self, "ike_version")

    @_builtins.property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> Optional[_builtins.int]:
        """
        The lifecycle time of Ipsec tunnel in seconds.
        The value ranges from `60` to `604,800`. Defaults to `3600`.
        """
        return pulumi.get(self, "lifetime_seconds")

    @_builtins.property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[_builtins.str]:
        """
        The local ID.
        """
        return pulumi.get(self, "local_id")

    @_builtins.property
    @pulumi.getter(name="localIdType")
    def local_id_type(self) -> Optional[_builtins.str]:
        """
        The local ID type. The value can be **ip** or **fqdn**. Defaults to **ip**.
        """
        return pulumi.get(self, "local_id_type")

    @_builtins.property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[_builtins.str]:
        """
        The peer ID.
        """
        return pulumi.get(self, "peer_id")

    @_builtins.property
    @pulumi.getter(name="peerIdType")
    def peer_id_type(self) -> Optional[_builtins.str]:
        """
        The peer ID type. The value can be **ip**, **fqdn** or **any**. Defaults to **ip**.
        """
        return pulumi.get(self, "peer_id_type")

    @_builtins.property
    @pulumi.getter
    def pfs(self) -> Optional[_builtins.str]:
        """
        The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
        **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        """
        return pulumi.get(self, "pfs")

    @_builtins.property
    @pulumi.getter(name="phase1NegotiationMode")
    def phase1_negotiation_mode(self) -> Optional[_builtins.str]:
        """
        The negotiation mode, only works when the ike_version is v1.
        The value can be **main** or **aggressive**. Defaults to **main**.
        """
        return pulumi.get(self, "phase1_negotiation_mode")


@pulumi.output_type
class ConnectionIkepolicyDpd(dict):
    def __init__(__self__, *,
                 interval: Optional[_builtins.int] = None,
                 msg: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None):
        """
        :param _builtins.int interval: Specifies the DPD idle timeout period.
               The value ranges from `10` to `3,600`, in seconds. Defaults to `30`.
        :param _builtins.str msg: Specifies the format of DPD packets. The value can be:
               + **seq-hash-notify**: indicates that the payload of DPD packets is in the sequence of hash-notify;
               + **seq-notify-hash**: indicates that the payload of DPD packets is in the sequence of notify-hash;
               
               Defaults to **seq-hash-notify**.
               
               <a name="Connection_CreateRequestIpsecPolicy"></a>
               The `ipsecpolicy` block supports:
        :param _builtins.int timeout: Specifies the interval for retransmitting DPD packets.
               The value ranges from `2` to `60`, in seconds. Defaults to `15`.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[_builtins.int]:
        """
        Specifies the DPD idle timeout period.
        The value ranges from `10` to `3,600`, in seconds. Defaults to `30`.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter
    def msg(self) -> Optional[_builtins.str]:
        """
        Specifies the format of DPD packets. The value can be:
        + **seq-hash-notify**: indicates that the payload of DPD packets is in the sequence of hash-notify;
        + **seq-notify-hash**: indicates that the payload of DPD packets is in the sequence of notify-hash;

        Defaults to **seq-hash-notify**.

        <a name="Connection_CreateRequestIpsecPolicy"></a>
        The `ipsecpolicy` block supports:
        """
        return pulumi.get(self, "msg")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Specifies the interval for retransmitting DPD packets.
        The value ranges from `2` to `60`, in seconds. Defaults to `15`.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ConnectionIpsecpolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationAlgorithm":
            suggest = "authentication_algorithm"
        elif key == "encapsulationMode":
            suggest = "encapsulation_mode"
        elif key == "encryptionAlgorithm":
            suggest = "encryption_algorithm"
        elif key == "lifetimeSeconds":
            suggest = "lifetime_seconds"
        elif key == "transformProtocol":
            suggest = "transform_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionIpsecpolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionIpsecpolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionIpsecpolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_algorithm: Optional[_builtins.str] = None,
                 encapsulation_mode: Optional[_builtins.str] = None,
                 encryption_algorithm: Optional[_builtins.str] = None,
                 lifetime_seconds: Optional[_builtins.int] = None,
                 pfs: Optional[_builtins.str] = None,
                 transform_protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_algorithm: The authentication algorithm. The value can be **sha1**, **md5**,
               **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
               please use them with caution.
        :param _builtins.str encapsulation_mode: The encapsulation mode, only **tunnel** supported for now.
               Defaults to **tunnel**.
               
               <a name="Connection_PolicyRule"></a>
               The `policy_rules` block supports:
        :param _builtins.str encryption_algorithm: The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
               **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
               **3des** is less secure, please use it with caution.
        :param _builtins.int lifetime_seconds: The lifecycle time of Ipsec tunnel in seconds.
               The value ranges from `60` to `604,800`. Defaults to `3600`.
        :param _builtins.str pfs: The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
               **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        :param _builtins.str transform_protocol: The transform protocol. Only **esp** supported for now.
               Defaults to **esp**.
        """
        if authentication_algorithm is not None:
            pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        if encapsulation_mode is not None:
            pulumi.set(__self__, "encapsulation_mode", encapsulation_mode)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if lifetime_seconds is not None:
            pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        if pfs is not None:
            pulumi.set(__self__, "pfs", pfs)
        if transform_protocol is not None:
            pulumi.set(__self__, "transform_protocol", transform_protocol)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> Optional[_builtins.str]:
        """
        The authentication algorithm. The value can be **sha1**, **md5**,
        **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
        please use them with caution.
        """
        return pulumi.get(self, "authentication_algorithm")

    @_builtins.property
    @pulumi.getter(name="encapsulationMode")
    def encapsulation_mode(self) -> Optional[_builtins.str]:
        """
        The encapsulation mode, only **tunnel** supported for now.
        Defaults to **tunnel**.

        <a name="Connection_PolicyRule"></a>
        The `policy_rules` block supports:
        """
        return pulumi.get(self, "encapsulation_mode")

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[_builtins.str]:
        """
        The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
        **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
        **3des** is less secure, please use it with caution.
        """
        return pulumi.get(self, "encryption_algorithm")

    @_builtins.property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> Optional[_builtins.int]:
        """
        The lifecycle time of Ipsec tunnel in seconds.
        The value ranges from `60` to `604,800`. Defaults to `3600`.
        """
        return pulumi.get(self, "lifetime_seconds")

    @_builtins.property
    @pulumi.getter
    def pfs(self) -> Optional[_builtins.str]:
        """
        The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
        **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        """
        return pulumi.get(self, "pfs")

    @_builtins.property
    @pulumi.getter(name="transformProtocol")
    def transform_protocol(self) -> Optional[_builtins.str]:
        """
        The transform protocol. Only **esp** supported for now.
        Defaults to **esp**.
        """
        return pulumi.get(self, "transform_protocol")


@pulumi.output_type
class ConnectionPolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleIndex":
            suggest = "rule_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionPolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionPolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionPolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Optional[Sequence[_builtins.str]] = None,
                 rule_index: Optional[_builtins.int] = None,
                 source: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] destinations: The list of destination CIDRs.
        :param _builtins.int rule_index: The rule index.
        :param _builtins.str source: The source CIDR.
        """
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if rule_index is not None:
            pulumi.set(__self__, "rule_index", rule_index)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of destination CIDRs.
        """
        return pulumi.get(self, "destinations")

    @_builtins.property
    @pulumi.getter(name="ruleIndex")
    def rule_index(self) -> Optional[_builtins.int]:
        """
        The rule index.
        """
        return pulumi.get(self, "rule_index")

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[_builtins.str]:
        """
        The source CIDR.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class GatewayCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateChain":
            suggest = "certificate_chain"
        elif key == "encCertificate":
            suggest = "enc_certificate"
        elif key == "encPrivateKey":
            suggest = "enc_private_key"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "certificateChainExpireTime":
            suggest = "certificate_chain_expire_time"
        elif key == "certificateChainSerialNumber":
            suggest = "certificate_chain_serial_number"
        elif key == "certificateChainSubject":
            suggest = "certificate_chain_subject"
        elif key == "certificateExpireTime":
            suggest = "certificate_expire_time"
        elif key == "certificateId":
            suggest = "certificate_id"
        elif key == "certificateSerialNumber":
            suggest = "certificate_serial_number"
        elif key == "certificateSubject":
            suggest = "certificate_subject"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "encCertificateExpireTime":
            suggest = "enc_certificate_expire_time"
        elif key == "encCertificateSerialNumber":
            suggest = "enc_certificate_serial_number"
        elif key == "encCertificateSubject":
            suggest = "enc_certificate_subject"
        elif key == "signatureAlgorithm":
            suggest = "signature_algorithm"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_chain: _builtins.str,
                 content: _builtins.str,
                 enc_certificate: _builtins.str,
                 enc_private_key: _builtins.str,
                 name: _builtins.str,
                 private_key: _builtins.str,
                 certificate_chain_expire_time: Optional[_builtins.str] = None,
                 certificate_chain_serial_number: Optional[_builtins.str] = None,
                 certificate_chain_subject: Optional[_builtins.str] = None,
                 certificate_expire_time: Optional[_builtins.str] = None,
                 certificate_id: Optional[_builtins.str] = None,
                 certificate_serial_number: Optional[_builtins.str] = None,
                 certificate_subject: Optional[_builtins.str] = None,
                 created_at: Optional[_builtins.str] = None,
                 enc_certificate_expire_time: Optional[_builtins.str] = None,
                 enc_certificate_serial_number: Optional[_builtins.str] = None,
                 enc_certificate_subject: Optional[_builtins.str] = None,
                 issuer: Optional[_builtins.str] = None,
                 signature_algorithm: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str certificate_chain: The certificate chain of the gateway certificate.
        :param _builtins.str content: The content of the gateway certificate.
        :param _builtins.str enc_certificate: The enc certificate of the gateway certificate.
        :param _builtins.str enc_private_key: The enc private key of the gateway certificate.
        :param _builtins.str name: The name of the gateway certificate.
        :param _builtins.str private_key: The private of the gateway certificate.
        :param _builtins.str certificate_chain_expire_time: The expire time of the certificate.
        :param _builtins.str certificate_chain_serial_number: The serial number of the certificate chain.
        :param _builtins.str certificate_chain_subject: The subject of the certificate chain.
        :param _builtins.str certificate_expire_time: The expire time of the certificate.
        :param _builtins.str certificate_id: The certificate ID.
        :param _builtins.str certificate_serial_number: The serial number of the certificate.
        :param _builtins.str certificate_subject: The subject of the certificate.
        :param _builtins.str created_at: The create time of the gateway certificate.
        :param _builtins.str enc_certificate_expire_time: The expire time of the enc certificate.
        :param _builtins.str enc_certificate_serial_number: The serial number of the enc certificate.
        :param _builtins.str enc_certificate_subject: The subject of the enc certificate.
        :param _builtins.str issuer: The issuer of the certificate.
        :param _builtins.str signature_algorithm: The signature algorithm of the certificate.
        :param _builtins.str status: The status of the certificate.
        :param _builtins.str updated_at: The update time of the gateway certificate.
        """
        pulumi.set(__self__, "certificate_chain", certificate_chain)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "enc_certificate", enc_certificate)
        pulumi.set(__self__, "enc_private_key", enc_private_key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_key", private_key)
        if certificate_chain_expire_time is not None:
            pulumi.set(__self__, "certificate_chain_expire_time", certificate_chain_expire_time)
        if certificate_chain_serial_number is not None:
            pulumi.set(__self__, "certificate_chain_serial_number", certificate_chain_serial_number)
        if certificate_chain_subject is not None:
            pulumi.set(__self__, "certificate_chain_subject", certificate_chain_subject)
        if certificate_expire_time is not None:
            pulumi.set(__self__, "certificate_expire_time", certificate_expire_time)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_serial_number is not None:
            pulumi.set(__self__, "certificate_serial_number", certificate_serial_number)
        if certificate_subject is not None:
            pulumi.set(__self__, "certificate_subject", certificate_subject)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enc_certificate_expire_time is not None:
            pulumi.set(__self__, "enc_certificate_expire_time", enc_certificate_expire_time)
        if enc_certificate_serial_number is not None:
            pulumi.set(__self__, "enc_certificate_serial_number", enc_certificate_serial_number)
        if enc_certificate_subject is not None:
            pulumi.set(__self__, "enc_certificate_subject", enc_certificate_subject)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> _builtins.str:
        """
        The certificate chain of the gateway certificate.
        """
        return pulumi.get(self, "certificate_chain")

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        The content of the gateway certificate.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="encCertificate")
    def enc_certificate(self) -> _builtins.str:
        """
        The enc certificate of the gateway certificate.
        """
        return pulumi.get(self, "enc_certificate")

    @_builtins.property
    @pulumi.getter(name="encPrivateKey")
    def enc_private_key(self) -> _builtins.str:
        """
        The enc private key of the gateway certificate.
        """
        return pulumi.get(self, "enc_private_key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the gateway certificate.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> _builtins.str:
        """
        The private of the gateway certificate.
        """
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter(name="certificateChainExpireTime")
    def certificate_chain_expire_time(self) -> Optional[_builtins.str]:
        """
        The expire time of the certificate.
        """
        return pulumi.get(self, "certificate_chain_expire_time")

    @_builtins.property
    @pulumi.getter(name="certificateChainSerialNumber")
    def certificate_chain_serial_number(self) -> Optional[_builtins.str]:
        """
        The serial number of the certificate chain.
        """
        return pulumi.get(self, "certificate_chain_serial_number")

    @_builtins.property
    @pulumi.getter(name="certificateChainSubject")
    def certificate_chain_subject(self) -> Optional[_builtins.str]:
        """
        The subject of the certificate chain.
        """
        return pulumi.get(self, "certificate_chain_subject")

    @_builtins.property
    @pulumi.getter(name="certificateExpireTime")
    def certificate_expire_time(self) -> Optional[_builtins.str]:
        """
        The expire time of the certificate.
        """
        return pulumi.get(self, "certificate_expire_time")

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[_builtins.str]:
        """
        The certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @_builtins.property
    @pulumi.getter(name="certificateSerialNumber")
    def certificate_serial_number(self) -> Optional[_builtins.str]:
        """
        The serial number of the certificate.
        """
        return pulumi.get(self, "certificate_serial_number")

    @_builtins.property
    @pulumi.getter(name="certificateSubject")
    def certificate_subject(self) -> Optional[_builtins.str]:
        """
        The subject of the certificate.
        """
        return pulumi.get(self, "certificate_subject")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The create time of the gateway certificate.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="encCertificateExpireTime")
    def enc_certificate_expire_time(self) -> Optional[_builtins.str]:
        """
        The expire time of the enc certificate.
        """
        return pulumi.get(self, "enc_certificate_expire_time")

    @_builtins.property
    @pulumi.getter(name="encCertificateSerialNumber")
    def enc_certificate_serial_number(self) -> Optional[_builtins.str]:
        """
        The serial number of the enc certificate.
        """
        return pulumi.get(self, "enc_certificate_serial_number")

    @_builtins.property
    @pulumi.getter(name="encCertificateSubject")
    def enc_certificate_subject(self) -> Optional[_builtins.str]:
        """
        The subject of the enc certificate.
        """
        return pulumi.get(self, "enc_certificate_subject")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> Optional[_builtins.str]:
        """
        The issuer of the certificate.
        """
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[_builtins.str]:
        """
        The signature algorithm of the certificate.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the certificate.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The update time of the gateway certificate.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GatewayEip1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthId":
            suggest = "bandwidth_id"
        elif key == "bandwidthName":
            suggest = "bandwidth_name"
        elif key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "chargeMode":
            suggest = "charge_mode"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayEip1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayEip1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayEip1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_id: Optional[_builtins.str] = None,
                 bandwidth_name: Optional[_builtins.str] = None,
                 bandwidth_size: Optional[_builtins.int] = None,
                 charge_mode: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_version: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str bandwidth_id: The bandwidth ID.
        :param _builtins.str bandwidth_name: The bandwidth name.  
               The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               
               Changing this parameter will create a new resource.
        :param _builtins.int bandwidth_size: Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
               cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
               When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.
               
               Changing this parameter will create a new resource.
        :param _builtins.str charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
               
               Changing this parameter will create a new resource.
               
               > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
               create a new EIP.
               
               <a name="Gateway_certificate"></a>
               The `certificate` block supports:
        :param _builtins.str id: The public IP ID.
               
               Changing this parameter will create a new resource.
        :param _builtins.str ip_address: The public IP address.
        :param _builtins.int ip_version: The public IP version.
        :param _builtins.str type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[_builtins.str]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[_builtins.str]:
        """
        The bandwidth name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_name")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[_builtins.int]:
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
        When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.

        <a name="Gateway_certificate"></a>
        The `certificate` block supports:
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GatewayEip2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthId":
            suggest = "bandwidth_id"
        elif key == "bandwidthName":
            suggest = "bandwidth_name"
        elif key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "chargeMode":
            suggest = "charge_mode"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayEip2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayEip2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayEip2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_id: Optional[_builtins.str] = None,
                 bandwidth_name: Optional[_builtins.str] = None,
                 bandwidth_size: Optional[_builtins.int] = None,
                 charge_mode: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_version: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str bandwidth_id: The bandwidth ID.
        :param _builtins.str bandwidth_name: The bandwidth name.  
               The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               
               Changing this parameter will create a new resource.
        :param _builtins.int bandwidth_size: Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
               cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
               When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.
               
               Changing this parameter will create a new resource.
        :param _builtins.str charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
               
               Changing this parameter will create a new resource.
               
               > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
               create a new EIP.
               
               <a name="Gateway_certificate"></a>
               The `certificate` block supports:
        :param _builtins.str id: The public IP ID.
               
               Changing this parameter will create a new resource.
        :param _builtins.str ip_address: The public IP address.
        :param _builtins.int ip_version: The public IP version.
        :param _builtins.str type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[_builtins.str]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[_builtins.str]:
        """
        The bandwidth name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_name")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[_builtins.int]:
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
        When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.

        <a name="Gateway_certificate"></a>
        The `certificate` block supports:
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GatewayMasterEip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthId":
            suggest = "bandwidth_id"
        elif key == "bandwidthName":
            suggest = "bandwidth_name"
        elif key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "chargeMode":
            suggest = "charge_mode"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayMasterEip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayMasterEip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayMasterEip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_id: Optional[_builtins.str] = None,
                 bandwidth_name: Optional[_builtins.str] = None,
                 bandwidth_size: Optional[_builtins.int] = None,
                 charge_mode: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_version: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str bandwidth_id: The bandwidth ID.
        :param _builtins.str bandwidth_name: The bandwidth name.  
               The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               
               Changing this parameter will create a new resource.
        :param _builtins.int bandwidth_size: Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
               cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
               When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.
               
               Changing this parameter will create a new resource.
        :param _builtins.str charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
               
               Changing this parameter will create a new resource.
               
               > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
               create a new EIP.
               
               <a name="Gateway_certificate"></a>
               The `certificate` block supports:
        :param _builtins.str id: The public IP ID.
               
               Changing this parameter will create a new resource.
        :param _builtins.str ip_address: The public IP address.
        :param _builtins.int ip_version: The public IP version.
        :param _builtins.str type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[_builtins.str]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[_builtins.str]:
        """
        The bandwidth name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_name")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[_builtins.int]:
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
        When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.

        <a name="Gateway_certificate"></a>
        The `certificate` block supports:
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GatewaySlaveEip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthId":
            suggest = "bandwidth_id"
        elif key == "bandwidthName":
            suggest = "bandwidth_name"
        elif key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "chargeMode":
            suggest = "charge_mode"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaySlaveEip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaySlaveEip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaySlaveEip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_id: Optional[_builtins.str] = None,
                 bandwidth_name: Optional[_builtins.str] = None,
                 bandwidth_size: Optional[_builtins.int] = None,
                 charge_mode: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_version: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str bandwidth_id: The bandwidth ID.
        :param _builtins.str bandwidth_name: The bandwidth name.  
               The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               
               Changing this parameter will create a new resource.
        :param _builtins.int bandwidth_size: Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
               cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
               When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.
               
               Changing this parameter will create a new resource.
        :param _builtins.str charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
               
               Changing this parameter will create a new resource.
               
               > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
               create a new EIP.
               
               <a name="Gateway_certificate"></a>
               The `certificate` block supports:
        :param _builtins.str id: The public IP ID.
               
               Changing this parameter will create a new resource.
        :param _builtins.str ip_address: The public IP address.
        :param _builtins.int ip_version: The public IP version.
        :param _builtins.str type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[_builtins.str]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[_builtins.str]:
        """
        The bandwidth name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_name")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[_builtins.int]:
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
        When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.

        <a name="Gateway_certificate"></a>
        The `certificate` block supports:
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServerClientCaCertificate(dict):
    def __init__(__self__, *,
                 content: _builtins.str,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str content: Specifies the certificate content.
        :param _builtins.str name: Specifies the certificate name. If this parameter is left blank, the system automatically
               generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
               underscores (_), and hyphens (-).
               
               <a name="block--server_certificate"></a>
               The `server_certificate` block supports:
        """
        pulumi.set(__self__, "content", content)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        Specifies the certificate content.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the certificate name. If this parameter is left blank, the system automatically
        generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
        underscores (_), and hyphens (-).

        <a name="block--server_certificate"></a>
        The `server_certificate` block supports:
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ServerClientCaCertificatesUploaded(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "expirationTime":
            suggest = "expiration_time"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "signatureAlgorithm":
            suggest = "signature_algorithm"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerClientCaCertificatesUploaded. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerClientCaCertificatesUploaded.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerClientCaCertificatesUploaded.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 expiration_time: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 issuer: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 serial_number: Optional[_builtins.str] = None,
                 signature_algorithm: Optional[_builtins.str] = None,
                 subject: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str created_at: The creation time of the client CA certificate.
        :param _builtins.str expiration_time: The expiration time of the server certificate.
        :param _builtins.str id: Specifies the certificate ID, which is the ID of a certificated uploaded in the Cloud
               Certificate Manager (CCM).
               
               <a name="block--ssl_options"></a>
               The `ssl_options` block supports:
        :param _builtins.str issuer: The issuer of the server certificate.
        :param _builtins.str name: Specifies the certificate name. If this parameter is left blank, the system automatically
               generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
               underscores (_), and hyphens (-).
               
               <a name="block--server_certificate"></a>
               The `server_certificate` block supports:
        :param _builtins.str serial_number: The serial number of the server certificate.
        :param _builtins.str signature_algorithm: The signature algorithm of the server certificate.
        :param _builtins.str subject: The subject of the server certificate.
        :param _builtins.str updated_at: The update time of the client CA certificate.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The creation time of the client CA certificate.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[_builtins.str]:
        """
        The expiration time of the server certificate.
        """
        return pulumi.get(self, "expiration_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the certificate ID, which is the ID of a certificated uploaded in the Cloud
        Certificate Manager (CCM).

        <a name="block--ssl_options"></a>
        The `ssl_options` block supports:
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> Optional[_builtins.str]:
        """
        The issuer of the server certificate.
        """
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the certificate name. If this parameter is left blank, the system automatically
        generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
        underscores (_), and hyphens (-).

        <a name="block--server_certificate"></a>
        The `server_certificate` block supports:
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[_builtins.str]:
        """
        The serial number of the server certificate.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[_builtins.str]:
        """
        The signature algorithm of the server certificate.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> Optional[_builtins.str]:
        """
        The subject of the server certificate.
        """
        return pulumi.get(self, "subject")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The update time of the client CA certificate.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ServerServerCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationTime":
            suggest = "expiration_time"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "signatureAlgorithm":
            suggest = "signature_algorithm"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerServerCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerServerCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerServerCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.str,
                 expiration_time: Optional[_builtins.str] = None,
                 issuer: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 serial_number: Optional[_builtins.str] = None,
                 signature_algorithm: Optional[_builtins.str] = None,
                 subject: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Specifies the certificate ID, which is the ID of a certificated uploaded in the Cloud
               Certificate Manager (CCM).
               
               <a name="block--ssl_options"></a>
               The `ssl_options` block supports:
        :param _builtins.str expiration_time: The expiration time of the server certificate.
        :param _builtins.str issuer: The issuer of the server certificate.
        :param _builtins.str name: Specifies the certificate name. If this parameter is left blank, the system automatically
               generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
               underscores (_), and hyphens (-).
               
               <a name="block--server_certificate"></a>
               The `server_certificate` block supports:
        :param _builtins.str serial_number: The serial number of the server certificate.
        :param _builtins.str signature_algorithm: The signature algorithm of the server certificate.
        :param _builtins.str subject: The subject of the server certificate.
        """
        pulumi.set(__self__, "id", id)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the certificate ID, which is the ID of a certificated uploaded in the Cloud
        Certificate Manager (CCM).

        <a name="block--ssl_options"></a>
        The `ssl_options` block supports:
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[_builtins.str]:
        """
        The expiration time of the server certificate.
        """
        return pulumi.get(self, "expiration_time")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> Optional[_builtins.str]:
        """
        The issuer of the server certificate.
        """
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the certificate name. If this parameter is left blank, the system automatically
        generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
        underscores (_), and hyphens (-).

        <a name="block--server_certificate"></a>
        The `server_certificate` block supports:
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[_builtins.str]:
        """
        The serial number of the server certificate.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[_builtins.str]:
        """
        The signature algorithm of the server certificate.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> Optional[_builtins.str]:
        """
        The subject of the server certificate.
        """
        return pulumi.get(self, "subject")


@pulumi.output_type
class ServerSslOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationAlgorithm":
            suggest = "authentication_algorithm"
        elif key == "encryptionAlgorithm":
            suggest = "encryption_algorithm"
        elif key == "isCompressed":
            suggest = "is_compressed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerSslOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerSslOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerSslOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_algorithm: Optional[_builtins.str] = None,
                 encryption_algorithm: Optional[_builtins.str] = None,
                 is_compressed: Optional[_builtins.bool] = None,
                 port: Optional[_builtins.int] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_algorithm: The authentication algorithm.
        :param _builtins.str encryption_algorithm: Specifies the encryption algorithm.
               Value can be **AES-128-GCM**, **AES-256-GCM**. The default value is **AES-128-GCM**.
        :param _builtins.bool is_compressed: Specifies whether to compress data. The default value is **false**.
        :param _builtins.int port: Specifies the port number. Value can be **443**, **1194**. The default value is **443**.
        :param _builtins.str protocol: Specifies the protocol. Value can be **TCP**. Defaults to **TCP**.
        """
        if authentication_algorithm is not None:
            pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if is_compressed is not None:
            pulumi.set(__self__, "is_compressed", is_compressed)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> Optional[_builtins.str]:
        """
        The authentication algorithm.
        """
        return pulumi.get(self, "authentication_algorithm")

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[_builtins.str]:
        """
        Specifies the encryption algorithm.
        Value can be **AES-128-GCM**, **AES-256-GCM**. The default value is **AES-128-GCM**.
        """
        return pulumi.get(self, "encryption_algorithm")

    @_builtins.property
    @pulumi.getter(name="isCompressed")
    def is_compressed(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to compress data. The default value is **false**.
        """
        return pulumi.get(self, "is_compressed")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the port number. Value can be **443**, **1194**. The default value is **443**.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Specifies the protocol. Value can be **TCP**. Defaults to **TCP**.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class UserGroupUser(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Specifies the user ID.
        :param _builtins.str description: Specifies the description of the user group.
        :param _builtins.str name: Specifies the name of the user group.
        """
        pulumi.set(__self__, "id", id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the user ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the user group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the user group.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAccessPoliciesAccessPolicyResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 dest_ip_cidrs: Sequence[_builtins.str],
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str,
                 user_group_id: _builtins.str,
                 user_group_name: _builtins.str):
        """
        :param _builtins.str created_at: The creation time.
        :param _builtins.str description: The access policy description.
        :param Sequence[_builtins.str] dest_ip_cidrs: The destination CIDR block list.
        :param _builtins.str id: The ID of an access policy.
        :param _builtins.str name: The name of an access policy.
        :param _builtins.str updated_at: The update time.
        :param _builtins.str user_group_id: The ID of the associated user group.
        :param _builtins.str user_group_name: The name of the associated user group.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dest_ip_cidrs", dest_ip_cidrs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "user_group_id", user_group_id)
        pulumi.set(__self__, "user_group_name", user_group_name)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The access policy description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="destIpCidrs")
    def dest_ip_cidrs(self) -> Sequence[_builtins.str]:
        """
        The destination CIDR block list.
        """
        return pulumi.get(self, "dest_ip_cidrs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of an access policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of an access policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> _builtins.str:
        """
        The ID of the associated user group.
        """
        return pulumi.get(self, "user_group_id")

    @_builtins.property
    @pulumi.getter(name="userGroupName")
    def user_group_name(self) -> _builtins.str:
        """
        The name of the associated user group.
        """
        return pulumi.get(self, "user_group_name")


@pulumi.output_type
class GetConnectionHealthChecksConnectionHealthCheckResult(dict):
    def __init__(__self__, *,
                 connection_id: _builtins.str,
                 destination_ip: _builtins.str,
                 id: _builtins.str,
                 proto_type: _builtins.str,
                 source_ip: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str connection_id: Specifies the ID of the VPN connection.
        :param _builtins.str destination_ip: Specifies the destination IP of the VPN connection health check.
        :param _builtins.str id: The ID of the connection health check.
        :param _builtins.str proto_type: The proto type of the connection health check.
        :param _builtins.str source_ip: Specifies the source IP of the VPN connection health check.
        :param _builtins.str status: Specifies the status of the VPN connection health check.
        :param _builtins.str type: The type of the connection health check.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "destination_ip", destination_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "proto_type", proto_type)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        """
        Specifies the ID of the VPN connection.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> _builtins.str:
        """
        Specifies the destination IP of the VPN connection health check.
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the connection health check.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="protoType")
    def proto_type(self) -> _builtins.str:
        """
        The proto type of the connection health check.
        """
        return pulumi.get(self, "proto_type")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Specifies the source IP of the VPN connection health check.
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the VPN connection health check.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the connection health check.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetConnectionLogsLogResult(dict):
    def __init__(__self__, *,
                 raw_message: _builtins.str,
                 time: _builtins.int):
        """
        :param _builtins.str raw_message: Indicates the log information.
        :param _builtins.int time: Indicates the time stamp of log.
        """
        pulumi.set(__self__, "raw_message", raw_message)
        pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter(name="rawMessage")
    def raw_message(self) -> _builtins.str:
        """
        Indicates the log information.
        """
        return pulumi.get(self, "raw_message")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.int:
        """
        Indicates the time stamp of log.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 connection_monitor_id: _builtins.str,
                 created_at: _builtins.str,
                 customer_gateway_id: _builtins.str,
                 enable_nqa: _builtins.bool,
                 enterprise_project_id: _builtins.str,
                 gateway_id: _builtins.str,
                 gateway_ip: _builtins.str,
                 ha_role: _builtins.str,
                 id: _builtins.str,
                 ikepolicies: Sequence['outputs.GetConnectionsConnectionIkepolicyResult'],
                 ipsecpolicies: Sequence['outputs.GetConnectionsConnectionIpsecpolicyResult'],
                 name: _builtins.str,
                 peer_subnets: Sequence[_builtins.str],
                 policy_rules: Sequence['outputs.GetConnectionsConnectionPolicyRuleResult'],
                 status: _builtins.str,
                 tunnel_local_address: _builtins.str,
                 tunnel_peer_address: _builtins.str,
                 updated_at: _builtins.str,
                 vpn_type: _builtins.str):
        """
        :param _builtins.str connection_monitor_id: Indicates the connection monitor ID of the connection.
        :param _builtins.str created_at: The created time.
        :param _builtins.str customer_gateway_id: Indicates the customer gateway ID of the connection.
        :param _builtins.bool enable_nqa: Indicates the enable nqa of the connection.
        :param _builtins.str enterprise_project_id: Indicates the enterprise project ID of the connection.
        :param _builtins.str gateway_id: Specifies the gateway ID of the VPN connection.
        :param _builtins.str gateway_ip: Specifies the gateway IP of the VPN connection.
        :param _builtins.str ha_role: Indicates the ha role of the connection.
        :param _builtins.str id: Indicates the ID of the connection.
        :param Sequence['GetConnectionsConnectionIkepolicyArgs'] ikepolicies: Indicates the ikepolicy information of the connection.
        :param Sequence['GetConnectionsConnectionIpsecpolicyArgs'] ipsecpolicies: Indicates the ipsecpolicy information of the connection.
        :param _builtins.str name: Specifies the name of the VPN connection.
        :param Sequence[_builtins.str] peer_subnets: Indicates the peer subnets of the connection.
        :param Sequence['GetConnectionsConnectionPolicyRuleArgs'] policy_rules: Indicates the policy rules information of the connection.
        :param _builtins.str status: Specifies the status of the VPN connection.
        :param _builtins.str tunnel_local_address: Indicates the tunnel local address of the connection.
        :param _builtins.str tunnel_peer_address: Indicates the tunnel peer address of the connection.
        :param _builtins.str updated_at: The last updated time.
        :param _builtins.str vpn_type: Specifies the VPN type of the VPN connection.
        """
        pulumi.set(__self__, "connection_monitor_id", connection_monitor_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "customer_gateway_id", customer_gateway_id)
        pulumi.set(__self__, "enable_nqa", enable_nqa)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "ha_role", ha_role)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ikepolicies", ikepolicies)
        pulumi.set(__self__, "ipsecpolicies", ipsecpolicies)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peer_subnets", peer_subnets)
        pulumi.set(__self__, "policy_rules", policy_rules)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tunnel_local_address", tunnel_local_address)
        pulumi.set(__self__, "tunnel_peer_address", tunnel_peer_address)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpn_type", vpn_type)

    @_builtins.property
    @pulumi.getter(name="connectionMonitorId")
    def connection_monitor_id(self) -> _builtins.str:
        """
        Indicates the connection monitor ID of the connection.
        """
        return pulumi.get(self, "connection_monitor_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The created time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="customerGatewayId")
    def customer_gateway_id(self) -> _builtins.str:
        """
        Indicates the customer gateway ID of the connection.
        """
        return pulumi.get(self, "customer_gateway_id")

    @_builtins.property
    @pulumi.getter(name="enableNqa")
    def enable_nqa(self) -> _builtins.bool:
        """
        Indicates the enable nqa of the connection.
        """
        return pulumi.get(self, "enable_nqa")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Indicates the enterprise project ID of the connection.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> _builtins.str:
        """
        Specifies the gateway ID of the VPN connection.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> _builtins.str:
        """
        Specifies the gateway IP of the VPN connection.
        """
        return pulumi.get(self, "gateway_ip")

    @_builtins.property
    @pulumi.getter(name="haRole")
    def ha_role(self) -> _builtins.str:
        """
        Indicates the ha role of the connection.
        """
        return pulumi.get(self, "ha_role")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the connection.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ikepolicies(self) -> Sequence['outputs.GetConnectionsConnectionIkepolicyResult']:
        """
        Indicates the ikepolicy information of the connection.
        """
        return pulumi.get(self, "ikepolicies")

    @_builtins.property
    @pulumi.getter
    def ipsecpolicies(self) -> Sequence['outputs.GetConnectionsConnectionIpsecpolicyResult']:
        """
        Indicates the ipsecpolicy information of the connection.
        """
        return pulumi.get(self, "ipsecpolicies")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the VPN connection.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="peerSubnets")
    def peer_subnets(self) -> Sequence[_builtins.str]:
        """
        Indicates the peer subnets of the connection.
        """
        return pulumi.get(self, "peer_subnets")

    @_builtins.property
    @pulumi.getter(name="policyRules")
    def policy_rules(self) -> Sequence['outputs.GetConnectionsConnectionPolicyRuleResult']:
        """
        Indicates the policy rules information of the connection.
        """
        return pulumi.get(self, "policy_rules")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the VPN connection.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tunnelLocalAddress")
    def tunnel_local_address(self) -> _builtins.str:
        """
        Indicates the tunnel local address of the connection.
        """
        return pulumi.get(self, "tunnel_local_address")

    @_builtins.property
    @pulumi.getter(name="tunnelPeerAddress")
    def tunnel_peer_address(self) -> _builtins.str:
        """
        Indicates the tunnel peer address of the connection.
        """
        return pulumi.get(self, "tunnel_peer_address")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The last updated time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpnType")
    def vpn_type(self) -> _builtins.str:
        """
        Specifies the VPN type of the VPN connection.
        """
        return pulumi.get(self, "vpn_type")


@pulumi.output_type
class GetConnectionsConnectionIkepolicyResult(dict):
    def __init__(__self__, *,
                 authentication_algorithm: _builtins.str,
                 authentication_method: _builtins.str,
                 dh_group: _builtins.str,
                 dpds: Sequence['outputs.GetConnectionsConnectionIkepolicyDpdResult'],
                 encryption_algorithm: _builtins.str,
                 ike_version: _builtins.str,
                 lifetime_seconds: _builtins.int,
                 local_id: _builtins.str,
                 local_id_type: _builtins.str,
                 peer_id: _builtins.str,
                 peer_id_type: _builtins.str,
                 phase1_negotiation_mode: _builtins.str):
        """
        :param _builtins.str authentication_algorithm: Indicates the authentication algorithm of the ikepolicy certificate.
        :param _builtins.str authentication_method: Indicates the souauthentication methodrce of the ikepolicy certificate.
        :param _builtins.str dh_group: Indicates the dh group of the ikepolicy certificate.
        :param Sequence['GetConnectionsConnectionIkepolicyDpdArgs'] dpds: Indicates the dpd information of the ikepolicy certificate.
        :param _builtins.str encryption_algorithm: Indicates the encryption algorithm of the ikepolicy certificate.
        :param _builtins.str ike_version: Indicates the ike version of the ikepolicy certificate.
        :param _builtins.int lifetime_seconds: Indicates the lifetime seconds of the ipsecpolicy certificate.
        :param _builtins.str local_id: Indicates the local ID of the ikepolicy certificate.
        :param _builtins.str local_id_type: Indicates the local ID type of the ikepolicy certificate.
        :param _builtins.str peer_id: Indicates the peer ID of the ikepolicy certificate.
        :param _builtins.str peer_id_type: Indicates the peer ID type of the ikepolicy certificate.
        :param _builtins.str phase1_negotiation_mode: Indicates the phase1 negotiation mode of the ikepolicy certificate.
        """
        pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        pulumi.set(__self__, "authentication_method", authentication_method)
        pulumi.set(__self__, "dh_group", dh_group)
        pulumi.set(__self__, "dpds", dpds)
        pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        pulumi.set(__self__, "ike_version", ike_version)
        pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        pulumi.set(__self__, "local_id", local_id)
        pulumi.set(__self__, "local_id_type", local_id_type)
        pulumi.set(__self__, "peer_id", peer_id)
        pulumi.set(__self__, "peer_id_type", peer_id_type)
        pulumi.set(__self__, "phase1_negotiation_mode", phase1_negotiation_mode)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> _builtins.str:
        """
        Indicates the authentication algorithm of the ikepolicy certificate.
        """
        return pulumi.get(self, "authentication_algorithm")

    @_builtins.property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> _builtins.str:
        """
        Indicates the souauthentication methodrce of the ikepolicy certificate.
        """
        return pulumi.get(self, "authentication_method")

    @_builtins.property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> _builtins.str:
        """
        Indicates the dh group of the ikepolicy certificate.
        """
        return pulumi.get(self, "dh_group")

    @_builtins.property
    @pulumi.getter
    def dpds(self) -> Sequence['outputs.GetConnectionsConnectionIkepolicyDpdResult']:
        """
        Indicates the dpd information of the ikepolicy certificate.
        """
        return pulumi.get(self, "dpds")

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> _builtins.str:
        """
        Indicates the encryption algorithm of the ikepolicy certificate.
        """
        return pulumi.get(self, "encryption_algorithm")

    @_builtins.property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> _builtins.str:
        """
        Indicates the ike version of the ikepolicy certificate.
        """
        return pulumi.get(self, "ike_version")

    @_builtins.property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> _builtins.int:
        """
        Indicates the lifetime seconds of the ipsecpolicy certificate.
        """
        return pulumi.get(self, "lifetime_seconds")

    @_builtins.property
    @pulumi.getter(name="localId")
    def local_id(self) -> _builtins.str:
        """
        Indicates the local ID of the ikepolicy certificate.
        """
        return pulumi.get(self, "local_id")

    @_builtins.property
    @pulumi.getter(name="localIdType")
    def local_id_type(self) -> _builtins.str:
        """
        Indicates the local ID type of the ikepolicy certificate.
        """
        return pulumi.get(self, "local_id_type")

    @_builtins.property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> _builtins.str:
        """
        Indicates the peer ID of the ikepolicy certificate.
        """
        return pulumi.get(self, "peer_id")

    @_builtins.property
    @pulumi.getter(name="peerIdType")
    def peer_id_type(self) -> _builtins.str:
        """
        Indicates the peer ID type of the ikepolicy certificate.
        """
        return pulumi.get(self, "peer_id_type")

    @_builtins.property
    @pulumi.getter(name="phase1NegotiationMode")
    def phase1_negotiation_mode(self) -> _builtins.str:
        """
        Indicates the phase1 negotiation mode of the ikepolicy certificate.
        """
        return pulumi.get(self, "phase1_negotiation_mode")


@pulumi.output_type
class GetConnectionsConnectionIkepolicyDpdResult(dict):
    def __init__(__self__, *,
                 interval: _builtins.int,
                 msg: _builtins.str,
                 timeout: _builtins.int):
        """
        :param _builtins.int interval: Indicates the interval of the dpd certificate.
        :param _builtins.str msg: Indicates the msg of the dpd certificate.
        :param _builtins.int timeout: Indicates the timeout of the dpd certificate.
        """
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "msg", msg)
        pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Indicates the interval of the dpd certificate.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter
    def msg(self) -> _builtins.str:
        """
        Indicates the msg of the dpd certificate.
        """
        return pulumi.get(self, "msg")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        Indicates the timeout of the dpd certificate.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetConnectionsConnectionIpsecpolicyResult(dict):
    def __init__(__self__, *,
                 authentication_algorithm: _builtins.str,
                 encapsulation_mode: _builtins.str,
                 encryption_algorithm: _builtins.str,
                 lifetime_seconds: _builtins.int,
                 pfs: _builtins.str,
                 transform_protocol: _builtins.str):
        """
        :param _builtins.str authentication_algorithm: Indicates the authentication algorithm of the ikepolicy certificate.
        :param _builtins.str encapsulation_mode: Indicates the encapsulation mode of the ipsecpolicy certificate.
        :param _builtins.str encryption_algorithm: Indicates the encryption algorithm of the ikepolicy certificate.
        :param _builtins.int lifetime_seconds: Indicates the lifetime seconds of the ipsecpolicy certificate.
        :param _builtins.str pfs: Indicates the pfs of the ipsecpolicy certificate.
        :param _builtins.str transform_protocol: Indicates the transform protocol of the ipsecpolicy certificate.
        """
        pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        pulumi.set(__self__, "encapsulation_mode", encapsulation_mode)
        pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        pulumi.set(__self__, "pfs", pfs)
        pulumi.set(__self__, "transform_protocol", transform_protocol)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> _builtins.str:
        """
        Indicates the authentication algorithm of the ikepolicy certificate.
        """
        return pulumi.get(self, "authentication_algorithm")

    @_builtins.property
    @pulumi.getter(name="encapsulationMode")
    def encapsulation_mode(self) -> _builtins.str:
        """
        Indicates the encapsulation mode of the ipsecpolicy certificate.
        """
        return pulumi.get(self, "encapsulation_mode")

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> _builtins.str:
        """
        Indicates the encryption algorithm of the ikepolicy certificate.
        """
        return pulumi.get(self, "encryption_algorithm")

    @_builtins.property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> _builtins.int:
        """
        Indicates the lifetime seconds of the ipsecpolicy certificate.
        """
        return pulumi.get(self, "lifetime_seconds")

    @_builtins.property
    @pulumi.getter
    def pfs(self) -> _builtins.str:
        """
        Indicates the pfs of the ipsecpolicy certificate.
        """
        return pulumi.get(self, "pfs")

    @_builtins.property
    @pulumi.getter(name="transformProtocol")
    def transform_protocol(self) -> _builtins.str:
        """
        Indicates the transform protocol of the ipsecpolicy certificate.
        """
        return pulumi.get(self, "transform_protocol")


@pulumi.output_type
class GetConnectionsConnectionPolicyRuleResult(dict):
    def __init__(__self__, *,
                 destinations: Sequence[_builtins.str],
                 rule_index: _builtins.int,
                 source: _builtins.str):
        """
        :param Sequence[_builtins.str] destinations: Indicates the destination of the policy rules certificate.
        :param _builtins.int rule_index: Indicates the rule index of the policy rules.
        :param _builtins.str source: Indicates the source of the policy rules certificate.
        """
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "rule_index", rule_index)
        pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter
    def destinations(self) -> Sequence[_builtins.str]:
        """
        Indicates the destination of the policy rules certificate.
        """
        return pulumi.get(self, "destinations")

    @_builtins.property
    @pulumi.getter(name="ruleIndex")
    def rule_index(self) -> _builtins.int:
        """
        Indicates the rule index of the policy rules.
        """
        return pulumi.get(self, "rule_index")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        Indicates the source of the policy rules certificate.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class GetCustomerGatewaysCustomerGatewayResult(dict):
    def __init__(__self__, *,
                 asn: _builtins.int,
                 ca_certificates: Sequence['outputs.GetCustomerGatewaysCustomerGatewayCaCertificateResult'],
                 created_at: _builtins.str,
                 id: _builtins.str,
                 id_type: _builtins.str,
                 id_value: _builtins.str,
                 ip: _builtins.str,
                 name: _builtins.str,
                 route_mode: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.int asn: Specifies the BGP ASN number of the customer gateway, only works when the route_mode is
               **bgp**. The value ranges from `1` to `4,294,967,295`.
        :param Sequence['GetCustomerGatewaysCustomerGatewayCaCertificateArgs'] ca_certificates: Indicates the ca certificate information of the customer gateway.
               The ca_certificate structure is documented below.
        :param _builtins.str created_at: The created time.
        :param _builtins.str id: Indicates the ID of the customer gateway.
        :param _builtins.str id_type: Indicates the id_type of the customer gateway.
        :param _builtins.str id_value: Indicates the id_value of the customer gateway.
        :param _builtins.str ip: Specifies the IP address of the customer gateway.
        :param _builtins.str name: Specifies the customer gateway name.
        :param _builtins.str route_mode: Specifies the route mode of the customer gateway. The value can be **static** and **bgp**.
        :param _builtins.str updated_at: The last updated time.
        """
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "ca_certificates", ca_certificates)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "id_type", id_type)
        pulumi.set(__self__, "id_value", id_value)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "route_mode", route_mode)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def asn(self) -> _builtins.int:
        """
        Specifies the BGP ASN number of the customer gateway, only works when the route_mode is
        **bgp**. The value ranges from `1` to `4,294,967,295`.
        """
        return pulumi.get(self, "asn")

    @_builtins.property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Sequence['outputs.GetCustomerGatewaysCustomerGatewayCaCertificateResult']:
        """
        Indicates the ca certificate information of the customer gateway.
        The ca_certificate structure is documented below.
        """
        return pulumi.get(self, "ca_certificates")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The created time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the customer gateway.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idType")
    def id_type(self) -> _builtins.str:
        """
        Indicates the id_type of the customer gateway.
        """
        return pulumi.get(self, "id_type")

    @_builtins.property
    @pulumi.getter(name="idValue")
    def id_value(self) -> _builtins.str:
        """
        Indicates the id_value of the customer gateway.
        """
        return pulumi.get(self, "id_value")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Specifies the IP address of the customer gateway.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the customer gateway name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> _builtins.str:
        """
        Specifies the route mode of the customer gateway. The value can be **static** and **bgp**.
        """
        return pulumi.get(self, "route_mode")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The last updated time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetCustomerGatewaysCustomerGatewayCaCertificateResult(dict):
    def __init__(__self__, *,
                 expire_time: _builtins.str,
                 is_updatable: _builtins.bool,
                 issuer: _builtins.str,
                 serial_number: _builtins.str,
                 signature_algorithm: _builtins.str,
                 subject: _builtins.str):
        """
        :param _builtins.str expire_time: Indicates the expire time of the customer gateway certificate.
        :param _builtins.bool is_updatable: Indicates whether the customer gateway certificate is updatable.
        :param _builtins.str issuer: Indicates the issuer of the customer gateway certificate.
        :param _builtins.str serial_number: Indicates the serial number of the customer gateway certificate.
        :param _builtins.str signature_algorithm: Indicates the signature algorithm of the customer gateway certificate.
        :param _builtins.str subject: Indicates the subject of the customer gateway certificate.
        """
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "is_updatable", is_updatable)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        pulumi.set(__self__, "subject", subject)

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> _builtins.str:
        """
        Indicates the expire time of the customer gateway certificate.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter(name="isUpdatable")
    def is_updatable(self) -> _builtins.bool:
        """
        Indicates whether the customer gateway certificate is updatable.
        """
        return pulumi.get(self, "is_updatable")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> _builtins.str:
        """
        Indicates the issuer of the customer gateway certificate.
        """
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        """
        Indicates the serial number of the customer gateway certificate.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> _builtins.str:
        """
        Indicates the signature algorithm of the customer gateway certificate.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> _builtins.str:
        """
        Indicates the subject of the customer gateway certificate.
        """
        return pulumi.get(self, "subject")


@pulumi.output_type
class GetGatewayAvailabilityZonesV51AvailabilityZoneResult(dict):
    def __init__(__self__, *,
                 available_specs: Sequence['outputs.GetGatewayAvailabilityZonesV51AvailabilityZoneAvailableSpecResult'],
                 name: _builtins.str,
                 public_border_group: _builtins.str):
        """
        :param Sequence['GetGatewayAvailabilityZonesV51AvailabilityZoneAvailableSpecArgs'] available_specs: Indicates the available specs.
        :param _builtins.str name: Indicates the AZ name.
        :param _builtins.str public_border_group: Indicates the common boundary group.
        """
        pulumi.set(__self__, "available_specs", available_specs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_border_group", public_border_group)

    @_builtins.property
    @pulumi.getter(name="availableSpecs")
    def available_specs(self) -> Sequence['outputs.GetGatewayAvailabilityZonesV51AvailabilityZoneAvailableSpecResult']:
        """
        Indicates the available specs.
        """
        return pulumi.get(self, "available_specs")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the AZ name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        Indicates the common boundary group.
        """
        return pulumi.get(self, "public_border_group")


@pulumi.output_type
class GetGatewayAvailabilityZonesV51AvailabilityZoneAvailableSpecResult(dict):
    def __init__(__self__, *,
                 attachment_type: _builtins.str,
                 flavor: _builtins.str,
                 ip_version: _builtins.str):
        """
        :param _builtins.str attachment_type: Indicates the attachment type.
        :param _builtins.str flavor: Indicates the VPN gateway flavor.
        :param _builtins.str ip_version: Indicates the IP version of VPN gateway.
        """
        pulumi.set(__self__, "attachment_type", attachment_type)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "ip_version", ip_version)

    @_builtins.property
    @pulumi.getter(name="attachmentType")
    def attachment_type(self) -> _builtins.str:
        """
        Indicates the attachment type.
        """
        return pulumi.get(self, "attachment_type")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        """
        Indicates the VPN gateway flavor.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        """
        Indicates the IP version of VPN gateway.
        """
        return pulumi.get(self, "ip_version")


@pulumi.output_type
class GetGatewayRouteTablesRoutingTableResult(dict):
    def __init__(__self__, *,
                 as_path: _builtins.str,
                 destination: _builtins.str,
                 med: _builtins.int,
                 nexthop: _builtins.str,
                 nexthop_resources: Sequence['outputs.GetGatewayRouteTablesRoutingTableNexthopResourceResult'],
                 origin: _builtins.str,
                 outbound_interface_ip: _builtins.str):
        """
        :param _builtins.str as_path: Indicates the AS path of a BGP route.
        :param _builtins.str destination: Indicates the destination address of a route.
        :param _builtins.int med: Indicates the MED value of a BGP route.
        :param _builtins.str nexthop: Indicates the next-hop IP address.
        :param Sequence['GetGatewayRouteTablesRoutingTableNexthopResourceArgs'] nexthop_resources: Indicates the next hop resource of a route.
        :param _builtins.str origin: Indicates the origin of a BGP route.
        :param _builtins.str outbound_interface_ip: Indicates the IP address of the outbound interface.
        """
        pulumi.set(__self__, "as_path", as_path)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "med", med)
        pulumi.set(__self__, "nexthop", nexthop)
        pulumi.set(__self__, "nexthop_resources", nexthop_resources)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "outbound_interface_ip", outbound_interface_ip)

    @_builtins.property
    @pulumi.getter(name="asPath")
    def as_path(self) -> _builtins.str:
        """
        Indicates the AS path of a BGP route.
        """
        return pulumi.get(self, "as_path")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        """
        Indicates the destination address of a route.
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def med(self) -> _builtins.int:
        """
        Indicates the MED value of a BGP route.
        """
        return pulumi.get(self, "med")

    @_builtins.property
    @pulumi.getter
    def nexthop(self) -> _builtins.str:
        """
        Indicates the next-hop IP address.
        """
        return pulumi.get(self, "nexthop")

    @_builtins.property
    @pulumi.getter(name="nexthopResources")
    def nexthop_resources(self) -> Sequence['outputs.GetGatewayRouteTablesRoutingTableNexthopResourceResult']:
        """
        Indicates the next hop resource of a route.
        """
        return pulumi.get(self, "nexthop_resources")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> _builtins.str:
        """
        Indicates the origin of a BGP route.
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter(name="outboundInterfaceIp")
    def outbound_interface_ip(self) -> _builtins.str:
        """
        Indicates the IP address of the outbound interface.
        """
        return pulumi.get(self, "outbound_interface_ip")


@pulumi.output_type
class GetGatewayRouteTablesRoutingTableNexthopResourceResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Indicates the next-hop resource ID, which is in UUID format.
        :param _builtins.str type: Indicates the next-hop resource type.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the next-hop resource ID, which is in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the next-hop resource type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewaysGatewayResult(dict):
    def __init__(__self__, *,
                 access_private_ips: Sequence[_builtins.str],
                 access_subnet_id: _builtins.str,
                 access_vpc_id: _builtins.str,
                 attachment_type: _builtins.str,
                 availability_zones: Sequence[_builtins.str],
                 bgp_asn: _builtins.int,
                 connect_subnet: _builtins.str,
                 connection_number: _builtins.int,
                 created_at: _builtins.str,
                 eips: Sequence['outputs.GetGatewaysGatewayEipResult'],
                 enterprise_project_id: _builtins.str,
                 er_attachment_id: _builtins.str,
                 er_id: _builtins.str,
                 flavor: _builtins.str,
                 ha_mode: _builtins.str,
                 id: _builtins.str,
                 local_subnets: Sequence[_builtins.str],
                 name: _builtins.str,
                 network_type: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str,
                 used_connection_group: _builtins.int,
                 used_connection_number: _builtins.int,
                 vpc_id: _builtins.str):
        """
        :param Sequence[_builtins.str] access_private_ips: The list of private access IPs.
        :param _builtins.str access_subnet_id: The ID of the access subnet.
        :param _builtins.str access_vpc_id: The ID of the access VPC.
        :param _builtins.str attachment_type: Specifies the attachment type of the gateway.
               The value can be: **vpc** and **er**.
        :param Sequence[_builtins.str] availability_zones: The availability zone IDs.
        :param _builtins.int bgp_asn: The ASN number of BGP
        :param _builtins.str connect_subnet: The VPC network segment used by the VPN gateway.
        :param _builtins.int connection_number: The max number of connections.
        :param _builtins.str created_at: The create time.
        :param Sequence['GetGatewaysGatewayEipArgs'] eips: The EIPs used by the fateway.
               The eips structure is documented below.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the gateway.
        :param _builtins.str er_attachment_id: The ER attachment ID.
        :param _builtins.str er_id: The ID of the ER to which the VPN gateway is connected.
        :param _builtins.str flavor: The flavor of the VPN gateway.
        :param _builtins.str ha_mode: The HA mode.
               The value can be: **active-active** and **active-standby**.
        :param _builtins.str id: The public IP ID.
        :param Sequence[_builtins.str] local_subnets: The local subnets.
        :param _builtins.str name: Specifies the name of the gateway.
        :param _builtins.str network_type: Specifies the network type of the gateway.
               The value can be: **public** and **private**.
        :param _builtins.str status: The status of the gateway.
        :param _builtins.str updated_at: The update time.
        :param _builtins.int used_connection_group: The number of used connection groups.
        :param _builtins.int used_connection_number: The number of used connections.
        :param _builtins.str vpc_id: The ID of the VPC to which the VPN gateway is connected.
        """
        pulumi.set(__self__, "access_private_ips", access_private_ips)
        pulumi.set(__self__, "access_subnet_id", access_subnet_id)
        pulumi.set(__self__, "access_vpc_id", access_vpc_id)
        pulumi.set(__self__, "attachment_type", attachment_type)
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "bgp_asn", bgp_asn)
        pulumi.set(__self__, "connect_subnet", connect_subnet)
        pulumi.set(__self__, "connection_number", connection_number)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "eips", eips)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "er_attachment_id", er_attachment_id)
        pulumi.set(__self__, "er_id", er_id)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "ha_mode", ha_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_subnets", local_subnets)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "used_connection_group", used_connection_group)
        pulumi.set(__self__, "used_connection_number", used_connection_number)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="accessPrivateIps")
    def access_private_ips(self) -> Sequence[_builtins.str]:
        """
        The list of private access IPs.
        """
        return pulumi.get(self, "access_private_ips")

    @_builtins.property
    @pulumi.getter(name="accessSubnetId")
    def access_subnet_id(self) -> _builtins.str:
        """
        The ID of the access subnet.
        """
        return pulumi.get(self, "access_subnet_id")

    @_builtins.property
    @pulumi.getter(name="accessVpcId")
    def access_vpc_id(self) -> _builtins.str:
        """
        The ID of the access VPC.
        """
        return pulumi.get(self, "access_vpc_id")

    @_builtins.property
    @pulumi.getter(name="attachmentType")
    def attachment_type(self) -> _builtins.str:
        """
        Specifies the attachment type of the gateway.
        The value can be: **vpc** and **er**.
        """
        return pulumi.get(self, "attachment_type")

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        The availability zone IDs.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> _builtins.int:
        """
        The ASN number of BGP
        """
        return pulumi.get(self, "bgp_asn")

    @_builtins.property
    @pulumi.getter(name="connectSubnet")
    def connect_subnet(self) -> _builtins.str:
        """
        The VPC network segment used by the VPN gateway.
        """
        return pulumi.get(self, "connect_subnet")

    @_builtins.property
    @pulumi.getter(name="connectionNumber")
    def connection_number(self) -> _builtins.int:
        """
        The max number of connections.
        """
        return pulumi.get(self, "connection_number")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The create time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def eips(self) -> Sequence['outputs.GetGatewaysGatewayEipResult']:
        """
        The EIPs used by the fateway.
        The eips structure is documented below.
        """
        return pulumi.get(self, "eips")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID of the gateway.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="erAttachmentId")
    def er_attachment_id(self) -> _builtins.str:
        """
        The ER attachment ID.
        """
        return pulumi.get(self, "er_attachment_id")

    @_builtins.property
    @pulumi.getter(name="erId")
    def er_id(self) -> _builtins.str:
        """
        The ID of the ER to which the VPN gateway is connected.
        """
        return pulumi.get(self, "er_id")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        """
        The flavor of the VPN gateway.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="haMode")
    def ha_mode(self) -> _builtins.str:
        """
        The HA mode.
        The value can be: **active-active** and **active-standby**.
        """
        return pulumi.get(self, "ha_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The public IP ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="localSubnets")
    def local_subnets(self) -> Sequence[_builtins.str]:
        """
        The local subnets.
        """
        return pulumi.get(self, "local_subnets")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the gateway.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        Specifies the network type of the gateway.
        The value can be: **public** and **private**.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the gateway.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="usedConnectionGroup")
    def used_connection_group(self) -> _builtins.int:
        """
        The number of used connection groups.
        """
        return pulumi.get(self, "used_connection_group")

    @_builtins.property
    @pulumi.getter(name="usedConnectionNumber")
    def used_connection_number(self) -> _builtins.int:
        """
        The number of used connections.
        """
        return pulumi.get(self, "used_connection_number")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the VPC to which the VPN gateway is connected.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetGatewaysGatewayEipResult(dict):
    def __init__(__self__, *,
                 bandwidth_billing_info: _builtins.str,
                 bandwidth_id: _builtins.str,
                 bandwidth_name: _builtins.str,
                 bandwidth_size: _builtins.int,
                 billing_info: _builtins.str,
                 charge_mode: _builtins.str,
                 id: _builtins.str,
                 ip_address: _builtins.str,
                 ip_version: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str bandwidth_billing_info: The bandwidth billing info.
        :param _builtins.str bandwidth_id: The bandwidth ID.
        :param _builtins.str bandwidth_name: The bandwidth name.
        :param _builtins.int bandwidth_size: Bandwidth size in Mbit/s.
        :param _builtins.str billing_info: The billing info.
        :param _builtins.str charge_mode: The charge mode of the bandwidth.
        :param _builtins.str id: The public IP ID.
        :param _builtins.str ip_address: The public IP address.
        :param _builtins.int ip_version: The public IP version.
        :param _builtins.str type: The EIP type.
        """
        pulumi.set(__self__, "bandwidth_billing_info", bandwidth_billing_info)
        pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        pulumi.set(__self__, "billing_info", billing_info)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthBillingInfo")
    def bandwidth_billing_info(self) -> _builtins.str:
        """
        The bandwidth billing info.
        """
        return pulumi.get(self, "bandwidth_billing_info")

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> _builtins.str:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> _builtins.str:
        """
        The bandwidth name.
        """
        return pulumi.get(self, "bandwidth_name")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> _builtins.int:
        """
        Bandwidth size in Mbit/s.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="billingInfo")
    def billing_info(self) -> _builtins.str:
        """
        The billing info.
        """
        return pulumi.get(self, "billing_info")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        The charge mode of the bandwidth.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The public IP ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The EIP type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetP2cGatewayConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 client_ip: _builtins.str,
                 client_user_name: _builtins.str,
                 client_virtual_ip: _builtins.str,
                 connection_established_time: _builtins.str,
                 connection_id: _builtins.str,
                 inbound_bytes: _builtins.int,
                 inbound_packets: _builtins.int,
                 outbound_bytes: _builtins.int,
                 outbound_packets: _builtins.int,
                 timestamp: _builtins.str):
        """
        :param _builtins.str client_ip: The IP address of a client.
        :param _builtins.str client_user_name: The username of a client.
        :param _builtins.str client_virtual_ip: The virtual IP address of a client.
        :param _builtins.str connection_established_time: The time when a connection is established.
        :param _builtins.str connection_id: The connection ID.
        :param _builtins.int inbound_bytes: The number of inbound bytes.
        :param _builtins.int inbound_packets: The number of inbound packets.
        :param _builtins.int outbound_bytes: The number of outbound bytes.
        :param _builtins.int outbound_packets: The number of outbound packets.
        :param _builtins.str timestamp: The timestamp.
        """
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "client_user_name", client_user_name)
        pulumi.set(__self__, "client_virtual_ip", client_virtual_ip)
        pulumi.set(__self__, "connection_established_time", connection_established_time)
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "inbound_bytes", inbound_bytes)
        pulumi.set(__self__, "inbound_packets", inbound_packets)
        pulumi.set(__self__, "outbound_bytes", outbound_bytes)
        pulumi.set(__self__, "outbound_packets", outbound_packets)
        pulumi.set(__self__, "timestamp", timestamp)

    @_builtins.property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> _builtins.str:
        """
        The IP address of a client.
        """
        return pulumi.get(self, "client_ip")

    @_builtins.property
    @pulumi.getter(name="clientUserName")
    def client_user_name(self) -> _builtins.str:
        """
        The username of a client.
        """
        return pulumi.get(self, "client_user_name")

    @_builtins.property
    @pulumi.getter(name="clientVirtualIp")
    def client_virtual_ip(self) -> _builtins.str:
        """
        The virtual IP address of a client.
        """
        return pulumi.get(self, "client_virtual_ip")

    @_builtins.property
    @pulumi.getter(name="connectionEstablishedTime")
    def connection_established_time(self) -> _builtins.str:
        """
        The time when a connection is established.
        """
        return pulumi.get(self, "connection_established_time")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        """
        The connection ID.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="inboundBytes")
    def inbound_bytes(self) -> _builtins.int:
        """
        The number of inbound bytes.
        """
        return pulumi.get(self, "inbound_bytes")

    @_builtins.property
    @pulumi.getter(name="inboundPackets")
    def inbound_packets(self) -> _builtins.int:
        """
        The number of inbound packets.
        """
        return pulumi.get(self, "inbound_packets")

    @_builtins.property
    @pulumi.getter(name="outboundBytes")
    def outbound_bytes(self) -> _builtins.int:
        """
        The number of outbound bytes.
        """
        return pulumi.get(self, "outbound_bytes")

    @_builtins.property
    @pulumi.getter(name="outboundPackets")
    def outbound_packets(self) -> _builtins.int:
        """
        The number of outbound packets.
        """
        return pulumi.get(self, "outbound_packets")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> _builtins.str:
        """
        The timestamp.
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetP2cGatewaysP2cVpnGatewayResult(dict):
    def __init__(__self__, *,
                 availability_zone_ids: Sequence[_builtins.str],
                 connect_subnet: _builtins.str,
                 created_at: _builtins.str,
                 current_connection_number: _builtins.int,
                 eips: Sequence['outputs.GetP2cGatewaysP2cVpnGatewayEipResult'],
                 enterprise_project_id: _builtins.str,
                 flavor: _builtins.str,
                 frozen_effect: _builtins.int,
                 id: _builtins.str,
                 max_connection_number: _builtins.int,
                 name: _builtins.str,
                 order_id: _builtins.str,
                 status: _builtins.str,
                 tags: Sequence['outputs.GetP2cGatewaysP2cVpnGatewayTagResult'],
                 updated_at: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param Sequence[_builtins.str] availability_zone_ids: The list of availability zone ID.
        :param _builtins.str connect_subnet: The ID of the VPC subnet used by a VPN P2C gateway.
        :param _builtins.str created_at: The creation time.
        :param _builtins.int current_connection_number: The number of current client connections.
        :param Sequence['GetP2cGatewaysP2cVpnGatewayEipArgs'] eips: The EIP information.
        :param _builtins.str enterprise_project_id: The enterprise project ID.
        :param _builtins.str flavor: The specification of a VPN P2C gateway.
        :param _builtins.int frozen_effect: Whether a VPN P2C gateway can be deleted after being frozen.
        :param _builtins.str id: The EIP ID.
        :param _builtins.int max_connection_number: The maximum number of concurrent client connections.
        :param _builtins.str name: The name of a VPN P2C gateway.
        :param _builtins.str order_id: The order ID.
        :param _builtins.str status: The status of a VPN P2C gateway.
        :param Sequence['GetP2cGatewaysP2cVpnGatewayTagArgs'] tags: The tag list.
        :param _builtins.str updated_at: The update time.
        :param _builtins.str vpc_id: The ID of the VPC to which a VPN P2C gateway connects.
        """
        pulumi.set(__self__, "availability_zone_ids", availability_zone_ids)
        pulumi.set(__self__, "connect_subnet", connect_subnet)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "current_connection_number", current_connection_number)
        pulumi.set(__self__, "eips", eips)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "frozen_effect", frozen_effect)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_connection_number", max_connection_number)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZoneIds")
    def availability_zone_ids(self) -> Sequence[_builtins.str]:
        """
        The list of availability zone ID.
        """
        return pulumi.get(self, "availability_zone_ids")

    @_builtins.property
    @pulumi.getter(name="connectSubnet")
    def connect_subnet(self) -> _builtins.str:
        """
        The ID of the VPC subnet used by a VPN P2C gateway.
        """
        return pulumi.get(self, "connect_subnet")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="currentConnectionNumber")
    def current_connection_number(self) -> _builtins.int:
        """
        The number of current client connections.
        """
        return pulumi.get(self, "current_connection_number")

    @_builtins.property
    @pulumi.getter
    def eips(self) -> Sequence['outputs.GetP2cGatewaysP2cVpnGatewayEipResult']:
        """
        The EIP information.
        """
        return pulumi.get(self, "eips")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        """
        The specification of a VPN P2C gateway.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="frozenEffect")
    def frozen_effect(self) -> _builtins.int:
        """
        Whether a VPN P2C gateway can be deleted after being frozen.
        """
        return pulumi.get(self, "frozen_effect")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The EIP ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxConnectionNumber")
    def max_connection_number(self) -> _builtins.int:
        """
        The maximum number of concurrent client connections.
        """
        return pulumi.get(self, "max_connection_number")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of a VPN P2C gateway.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> _builtins.str:
        """
        The order ID.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of a VPN P2C gateway.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetP2cGatewaysP2cVpnGatewayTagResult']:
        """
        The tag list.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the VPC to which a VPN P2C gateway connects.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetP2cGatewaysP2cVpnGatewayEipResult(dict):
    def __init__(__self__, *,
                 bandwidth_billing_info: _builtins.str,
                 bandwidth_id: _builtins.str,
                 bandwidth_name: _builtins.str,
                 bandwidth_size: _builtins.int,
                 charge_mode: _builtins.str,
                 id: _builtins.str,
                 ip_address: _builtins.str,
                 ip_billing_info: _builtins.str,
                 ip_version: _builtins.int,
                 share_type: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str bandwidth_billing_info: The bandwidth order information.
        :param _builtins.str bandwidth_id: The bandwidth ID.
        :param _builtins.str bandwidth_name: The bandwidth name.
        :param _builtins.int bandwidth_size: The bandwidth size.
        :param _builtins.str charge_mode: The billing mode of EIP bandwidth.
        :param _builtins.str id: The EIP ID.
        :param _builtins.str ip_address: A public IPv4 address.
        :param _builtins.str ip_billing_info: The EIP order information.
        :param _builtins.int ip_version: The EIP version.
        :param _builtins.str share_type: The bandwidth share type.
        :param _builtins.str type: The EIP type.
        """
        pulumi.set(__self__, "bandwidth_billing_info", bandwidth_billing_info)
        pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_billing_info", ip_billing_info)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "share_type", share_type)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthBillingInfo")
    def bandwidth_billing_info(self) -> _builtins.str:
        """
        The bandwidth order information.
        """
        return pulumi.get(self, "bandwidth_billing_info")

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> _builtins.str:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> _builtins.str:
        """
        The bandwidth name.
        """
        return pulumi.get(self, "bandwidth_name")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> _builtins.int:
        """
        The bandwidth size.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        The billing mode of EIP bandwidth.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The EIP ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        A public IPv4 address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipBillingInfo")
    def ip_billing_info(self) -> _builtins.str:
        """
        The EIP order information.
        """
        return pulumi.get(self, "ip_billing_info")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        The EIP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="shareType")
    def share_type(self) -> _builtins.str:
        """
        The bandwidth share type.
        """
        return pulumi.get(self, "share_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The EIP type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetP2cGatewaysP2cVpnGatewayTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The tag key.
        :param _builtins.str value: The tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetQuotasQuotaResourceResult']):
        """
        :param Sequence['GetQuotasQuotaResourceArgs'] resources: The resource quota list.
        """
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetQuotasQuotaResourceResult']:
        """
        The resource quota list.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetQuotasQuotaResourceResult(dict):
    def __init__(__self__, *,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int quota: The quota upper limit.
        :param _builtins.str type: The resource type.
        :param _builtins.int used: The number of resources in use.
        """
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        The quota upper limit.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The number of resources in use.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetResourceInstancesMatchResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the match key.
               The value can be **resource_name**.
        :param _builtins.str value: Specifies the match value.
               The value is a sting of **0** to **255** characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the match key.
        The value can be **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the match value.
        The value is a sting of **0** to **255** characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResourceInstancesResourceResult(dict):
    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 tags: Sequence['outputs.GetResourceInstancesResourceTagResult']):
        """
        :param _builtins.str resource_id: Indicates the resource ID.
        :param _builtins.str resource_name: Indicates the resource name.
        :param Sequence['GetResourceInstancesResourceTagArgs'] tags: Specifies the tag list.
               A maximum of **20** tags can be specified.
               
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Indicates the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Indicates the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetResourceInstancesResourceTagResult']:
        """
        Specifies the tag list.
        A maximum of **20** tags can be specified.

        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetResourceInstancesResourceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the match key.
               The value can be **resource_name**.
        :param _builtins.str value: Specifies the match value.
               The value is a sting of **0** to **255** characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the match key.
        The value can be **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the match value.
        The value is a sting of **0** to **255** characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResourceInstancesTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the match key.
               The value can be **resource_name**.
        :param Sequence[_builtins.str] values: Specifies the value list of the tag.
               If values is an empty list, it indicates any value. The relationship between values is **OR**.
               The value is a sting of **0** to **255** characters. A maximum of **20** values can be specified.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the match key.
        The value can be **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the value list of the tag.
        If values is an empty list, it indicates any value. The relationship between values is **OR**.
        The value is a sting of **0** to **255** characters. A maximum of **20** values can be specified.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetServersVpnServerResult(dict):
    def __init__(__self__, *,
                 client_auth_type: _builtins.str,
                 client_ca_certificates: Sequence['outputs.GetServersVpnServerClientCaCertificateResult'],
                 client_cidr: _builtins.str,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 local_subnets: Sequence[_builtins.str],
                 p2c_vgw_id: _builtins.str,
                 server_certificates: Sequence['outputs.GetServersVpnServerServerCertificateResult'],
                 ssl_options: Sequence['outputs.GetServersVpnServerSslOptionResult'],
                 status: _builtins.str,
                 tunnel_protocol: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str client_auth_type: The client authentication mode.
        :param Sequence['GetServersVpnServerClientCaCertificateArgs'] client_ca_certificates: The client CA certificate information.
        :param _builtins.str client_cidr: The client CIDR block.
        :param _builtins.str created_at: The creation time of the client CA certificate.
        :param _builtins.str id: The client CA certificate ID.
        :param Sequence[_builtins.str] local_subnets: The local CIDR block list.
        :param _builtins.str p2c_vgw_id: The ID of a P2C VPN gateway.
        :param Sequence['GetServersVpnServerServerCertificateArgs'] server_certificates: The server certificate information.
        :param Sequence['GetServersVpnServerSslOptionArgs'] ssl_options: The SSL options information.
        :param _builtins.str status: The server status.
        :param _builtins.str tunnel_protocol: A tunnel protocol.
        :param _builtins.str updated_at: The update time of the client CA certificate.
        """
        pulumi.set(__self__, "client_auth_type", client_auth_type)
        pulumi.set(__self__, "client_ca_certificates", client_ca_certificates)
        pulumi.set(__self__, "client_cidr", client_cidr)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_subnets", local_subnets)
        pulumi.set(__self__, "p2c_vgw_id", p2c_vgw_id)
        pulumi.set(__self__, "server_certificates", server_certificates)
        pulumi.set(__self__, "ssl_options", ssl_options)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tunnel_protocol", tunnel_protocol)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="clientAuthType")
    def client_auth_type(self) -> _builtins.str:
        """
        The client authentication mode.
        """
        return pulumi.get(self, "client_auth_type")

    @_builtins.property
    @pulumi.getter(name="clientCaCertificates")
    def client_ca_certificates(self) -> Sequence['outputs.GetServersVpnServerClientCaCertificateResult']:
        """
        The client CA certificate information.
        """
        return pulumi.get(self, "client_ca_certificates")

    @_builtins.property
    @pulumi.getter(name="clientCidr")
    def client_cidr(self) -> _builtins.str:
        """
        The client CIDR block.
        """
        return pulumi.get(self, "client_cidr")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the client CA certificate.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The client CA certificate ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="localSubnets")
    def local_subnets(self) -> Sequence[_builtins.str]:
        """
        The local CIDR block list.
        """
        return pulumi.get(self, "local_subnets")

    @_builtins.property
    @pulumi.getter(name="p2cVgwId")
    def p2c_vgw_id(self) -> _builtins.str:
        """
        The ID of a P2C VPN gateway.
        """
        return pulumi.get(self, "p2c_vgw_id")

    @_builtins.property
    @pulumi.getter(name="serverCertificates")
    def server_certificates(self) -> Sequence['outputs.GetServersVpnServerServerCertificateResult']:
        """
        The server certificate information.
        """
        return pulumi.get(self, "server_certificates")

    @_builtins.property
    @pulumi.getter(name="sslOptions")
    def ssl_options(self) -> Sequence['outputs.GetServersVpnServerSslOptionResult']:
        """
        The SSL options information.
        """
        return pulumi.get(self, "ssl_options")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The server status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tunnelProtocol")
    def tunnel_protocol(self) -> _builtins.str:
        """
        A tunnel protocol.
        """
        return pulumi.get(self, "tunnel_protocol")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the client CA certificate.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetServersVpnServerClientCaCertificateResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 expiration_time: _builtins.str,
                 id: _builtins.str,
                 issuer: _builtins.str,
                 name: _builtins.str,
                 serial_number: _builtins.str,
                 signature_algorithm: _builtins.str,
                 subject: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the client CA certificate.
        :param _builtins.str expiration_time: The expiration time of the client CA certificate.
        :param _builtins.str id: The client CA certificate ID.
        :param _builtins.str issuer: The issuer of the client CA certificate.
        :param _builtins.str name: The name of the client CA certificate.
        :param _builtins.str serial_number: The serial number of the client CA certificate.
        :param _builtins.str signature_algorithm: The signature algorithm of the client CA certificate.
        :param _builtins.str subject: The subject of the client CA certificate.
        :param _builtins.str updated_at: The update time of the client CA certificate.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        pulumi.set(__self__, "subject", subject)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the client CA certificate.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> _builtins.str:
        """
        The expiration time of the client CA certificate.
        """
        return pulumi.get(self, "expiration_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The client CA certificate ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> _builtins.str:
        """
        The issuer of the client CA certificate.
        """
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the client CA certificate.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        """
        The serial number of the client CA certificate.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> _builtins.str:
        """
        The signature algorithm of the client CA certificate.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> _builtins.str:
        """
        The subject of the client CA certificate.
        """
        return pulumi.get(self, "subject")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the client CA certificate.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetServersVpnServerServerCertificateResult(dict):
    def __init__(__self__, *,
                 expiration_time: _builtins.str,
                 id: _builtins.str,
                 issuer: _builtins.str,
                 name: _builtins.str,
                 serial_number: _builtins.str,
                 signature_algorithm: _builtins.str,
                 subject: _builtins.str):
        """
        :param _builtins.str expiration_time: The expiration time of the client CA certificate.
        :param _builtins.str id: The client CA certificate ID.
        :param _builtins.str issuer: The issuer of the client CA certificate.
        :param _builtins.str name: The name of the client CA certificate.
        :param _builtins.str serial_number: The serial number of the client CA certificate.
        :param _builtins.str signature_algorithm: The signature algorithm of the client CA certificate.
        :param _builtins.str subject: The subject of the client CA certificate.
        """
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        pulumi.set(__self__, "subject", subject)

    @_builtins.property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> _builtins.str:
        """
        The expiration time of the client CA certificate.
        """
        return pulumi.get(self, "expiration_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The client CA certificate ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> _builtins.str:
        """
        The issuer of the client CA certificate.
        """
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the client CA certificate.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        """
        The serial number of the client CA certificate.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> _builtins.str:
        """
        The signature algorithm of the client CA certificate.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> _builtins.str:
        """
        The subject of the client CA certificate.
        """
        return pulumi.get(self, "subject")


@pulumi.output_type
class GetServersVpnServerSslOptionResult(dict):
    def __init__(__self__, *,
                 authentication_algorithm: _builtins.str,
                 encryption_algorithm: _builtins.str,
                 is_compressed: _builtins.bool,
                 port: _builtins.int,
                 protocol: _builtins.str):
        """
        :param _builtins.str authentication_algorithm: The authentication algorithm.
        :param _builtins.str encryption_algorithm: The encryption algorithm.
        :param _builtins.bool is_compressed: Whether compression is enabled.
        :param _builtins.int port: The port.
        :param _builtins.str protocol: The protocol.
        """
        pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        pulumi.set(__self__, "is_compressed", is_compressed)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> _builtins.str:
        """
        The authentication algorithm.
        """
        return pulumi.get(self, "authentication_algorithm")

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> _builtins.str:
        """
        The encryption algorithm.
        """
        return pulumi.get(self, "encryption_algorithm")

    @_builtins.property
    @pulumi.getter(name="isCompressed")
    def is_compressed(self) -> _builtins.bool:
        """
        Whether compression is enabled.
        """
        return pulumi.get(self, "is_compressed")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Indicates a tag key.
        :param Sequence[_builtins.str] values: Indicates a tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates a tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Indicates a tag value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetUserGroupsUserGroupResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 user_number: _builtins.int):
        """
        :param _builtins.str created_at: The creation time.
        :param _builtins.str description: The user group description.
        :param _builtins.str id: The user group ID.
        :param _builtins.str name: The user group name.
        :param _builtins.str type: The user group type.
        :param _builtins.str updated_at: The update time.
        :param _builtins.int user_number: The number of users.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "user_number", user_number)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The user group description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The user group ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The user group name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The user group type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userNumber")
    def user_number(self) -> _builtins.int:
        """
        The number of users.
        """
        return pulumi.get(self, "user_number")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str,
                 user_group_id: _builtins.str,
                 user_group_name: _builtins.str):
        """
        :param _builtins.str created_at: The creation time.
        :param _builtins.str description: The user description.
        :param _builtins.str id: The user ID.
        :param _builtins.str name: The username.
        :param _builtins.str updated_at: The update time.
        :param _builtins.str user_group_id: The ID of the user group to which a user belongs.
        :param _builtins.str user_group_name: The name of the user group to which a user belongs.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "user_group_id", user_group_id)
        pulumi.set(__self__, "user_group_name", user_group_name)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The user description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The user ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The username.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> _builtins.str:
        """
        The ID of the user group to which a user belongs.
        """
        return pulumi.get(self, "user_group_id")

    @_builtins.property
    @pulumi.getter(name="userGroupName")
    def user_group_name(self) -> _builtins.str:
        """
        The name of the user group to which a user belongs.
        """
        return pulumi.get(self, "user_group_name")


