# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetP2cGatewayAvailabilityZonesResult',
    'AwaitableGetP2cGatewayAvailabilityZonesResult',
    'get_p2c_gateway_availability_zones',
    'get_p2c_gateway_availability_zones_output',
]

@pulumi.output_type
class GetP2cGatewayAvailabilityZonesResult:
    """
    A collection of values returned by getP2cGatewayAvailabilityZones.
    """
    def __init__(__self__, availability_zones=None, flavor=None, id=None, region=None):
        if availability_zones and not isinstance(availability_zones, list):
            raise TypeError("Expected argument 'availability_zones' to be a list")
        pulumi.set(__self__, "availability_zones", availability_zones)
        if flavor and not isinstance(flavor, str):
            raise TypeError("Expected argument 'flavor' to be a str")
        pulumi.set(__self__, "flavor", flavor)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        The list of availability zones.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetP2cGatewayAvailabilityZonesResult(GetP2cGatewayAvailabilityZonesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetP2cGatewayAvailabilityZonesResult(
            availability_zones=self.availability_zones,
            flavor=self.flavor,
            id=self.id,
            region=self.region)


def get_p2c_gateway_availability_zones(flavor: Optional[_builtins.str] = None,
                                       region: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetP2cGatewayAvailabilityZonesResult:
    """
    Use this data source to get the list of VPN P2C gateway availability zones.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.vpn.get_p2c_gateway_availability_zones()
    ```


    :param _builtins.str flavor: Specifies a flavor. The value can be **Professional1**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['flavor'] = flavor
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:vpn/getP2cGatewayAvailabilityZones:getP2cGatewayAvailabilityZones', __args__, opts=opts, typ=GetP2cGatewayAvailabilityZonesResult).value

    return AwaitableGetP2cGatewayAvailabilityZonesResult(
        availability_zones=pulumi.get(__ret__, 'availability_zones'),
        flavor=pulumi.get(__ret__, 'flavor'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_p2c_gateway_availability_zones_output(flavor: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetP2cGatewayAvailabilityZonesResult]:
    """
    Use this data source to get the list of VPN P2C gateway availability zones.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.vpn.get_p2c_gateway_availability_zones()
    ```


    :param _builtins.str flavor: Specifies a flavor. The value can be **Professional1**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['flavor'] = flavor
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:vpn/getP2cGatewayAvailabilityZones:getP2cGatewayAvailabilityZones', __args__, opts=opts, typ=GetP2cGatewayAvailabilityZonesResult)
    return __ret__.apply(lambda __response__: GetP2cGatewayAvailabilityZonesResult(
        availability_zones=pulumi.get(__response__, 'availability_zones'),
        flavor=pulumi.get(__response__, 'flavor'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
