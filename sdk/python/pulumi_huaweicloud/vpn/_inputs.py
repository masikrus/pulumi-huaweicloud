# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ConnectionIkepolicyArgs',
    'ConnectionIkepolicyArgsDict',
    'ConnectionIkepolicyDpdArgs',
    'ConnectionIkepolicyDpdArgsDict',
    'ConnectionIpsecpolicyArgs',
    'ConnectionIpsecpolicyArgsDict',
    'ConnectionPolicyRuleArgs',
    'ConnectionPolicyRuleArgsDict',
    'GatewayCertificateArgs',
    'GatewayCertificateArgsDict',
    'GatewayEip1Args',
    'GatewayEip1ArgsDict',
    'GatewayEip2Args',
    'GatewayEip2ArgsDict',
    'GatewayMasterEipArgs',
    'GatewayMasterEipArgsDict',
    'GatewaySlaveEipArgs',
    'GatewaySlaveEipArgsDict',
    'ServerClientCaCertificateArgs',
    'ServerClientCaCertificateArgsDict',
    'ServerClientCaCertificatesUploadedArgs',
    'ServerClientCaCertificatesUploadedArgsDict',
    'ServerServerCertificateArgs',
    'ServerServerCertificateArgsDict',
    'ServerSslOptionsArgs',
    'ServerSslOptionsArgsDict',
    'UserGroupUserArgs',
    'UserGroupUserArgsDict',
    'GetResourceInstancesMatchArgs',
    'GetResourceInstancesMatchArgsDict',
    'GetResourceInstancesTagArgs',
    'GetResourceInstancesTagArgsDict',
]

MYPY = False

if not MYPY:
    class ConnectionIkepolicyArgsDict(TypedDict):
        authentication_algorithm: NotRequired[pulumi.Input[_builtins.str]]
        """
        The authentication algorithm. The value can be **sha1**, **md5**,
        **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
        please use them with caution.
        """
        authentication_method: NotRequired[pulumi.Input[_builtins.str]]
        """
        The authentication method during IKE negotiation.
        The value can be **pre-share** and **digital-envelope-v2**. Defaults to **pre-share**.
        """
        dh_group: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the DH group used for key exchange in phase 1.
        The value can be **group1**, **group2**, **group5**, **group14**, **group15**, **group16**, **group19**, **group20**,
        or **group21**. Exercise caution when using **group1**, **group2**, **group5**,
        or **group14** as they have low security. Defaults to **group15**.
        """
        dpd: NotRequired[pulumi.Input['ConnectionIkepolicyDpdArgsDict']]
        """
        Specifies the dead peer detection (DPD) object.
        The dpd structure is documented below.

        <a name="Connection_DPD"></a>
        The `dpd` block supports:
        """
        encryption_algorithm: NotRequired[pulumi.Input[_builtins.str]]
        """
        The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
        **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
        **3des** is less secure, please use it with caution.
        """
        ike_version: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IKE negotiation version. The value can be **v1** and **v2**. Defaults to **v2**.
        """
        lifetime_seconds: NotRequired[pulumi.Input[_builtins.int]]
        """
        The lifecycle time of Ipsec tunnel in seconds.
        The value ranges from `60` to `604,800`. Defaults to `3600`.
        """
        local_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The local ID.
        """
        local_id_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The local ID type. The value can be **ip** or **fqdn**. Defaults to **ip**.
        """
        peer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The peer ID.
        """
        peer_id_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The peer ID type. The value can be **ip**, **fqdn** or **any**. Defaults to **ip**.
        """
        pfs: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
        **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        """
        phase1_negotiation_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        The negotiation mode, only works when the ike_version is v1.
        The value can be **main** or **aggressive**. Defaults to **main**.
        """
elif False:
    ConnectionIkepolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionIkepolicyArgs:
    def __init__(__self__, *,
                 authentication_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_method: Optional[pulumi.Input[_builtins.str]] = None,
                 dh_group: Optional[pulumi.Input[_builtins.str]] = None,
                 dpd: Optional[pulumi.Input['ConnectionIkepolicyDpdArgs']] = None,
                 encryption_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_version: Optional[pulumi.Input[_builtins.str]] = None,
                 lifetime_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 local_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_id_type: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_id_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pfs: Optional[pulumi.Input[_builtins.str]] = None,
                 phase1_negotiation_mode: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_algorithm: The authentication algorithm. The value can be **sha1**, **md5**,
               **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
               please use them with caution.
        :param pulumi.Input[_builtins.str] authentication_method: The authentication method during IKE negotiation.
               The value can be **pre-share** and **digital-envelope-v2**. Defaults to **pre-share**.
        :param pulumi.Input[_builtins.str] dh_group: Specifies the DH group used for key exchange in phase 1.
               The value can be **group1**, **group2**, **group5**, **group14**, **group15**, **group16**, **group19**, **group20**,
               or **group21**. Exercise caution when using **group1**, **group2**, **group5**,
               or **group14** as they have low security. Defaults to **group15**.
        :param pulumi.Input['ConnectionIkepolicyDpdArgs'] dpd: Specifies the dead peer detection (DPD) object.
               The dpd structure is documented below.
               
               <a name="Connection_DPD"></a>
               The `dpd` block supports:
        :param pulumi.Input[_builtins.str] encryption_algorithm: The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
               **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
               **3des** is less secure, please use it with caution.
        :param pulumi.Input[_builtins.str] ike_version: The IKE negotiation version. The value can be **v1** and **v2**. Defaults to **v2**.
        :param pulumi.Input[_builtins.int] lifetime_seconds: The lifecycle time of Ipsec tunnel in seconds.
               The value ranges from `60` to `604,800`. Defaults to `3600`.
        :param pulumi.Input[_builtins.str] local_id: The local ID.
        :param pulumi.Input[_builtins.str] local_id_type: The local ID type. The value can be **ip** or **fqdn**. Defaults to **ip**.
        :param pulumi.Input[_builtins.str] peer_id: The peer ID.
        :param pulumi.Input[_builtins.str] peer_id_type: The peer ID type. The value can be **ip**, **fqdn** or **any**. Defaults to **ip**.
        :param pulumi.Input[_builtins.str] pfs: The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
               **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        :param pulumi.Input[_builtins.str] phase1_negotiation_mode: The negotiation mode, only works when the ike_version is v1.
               The value can be **main** or **aggressive**. Defaults to **main**.
        """
        if authentication_algorithm is not None:
            pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if dpd is not None:
            pulumi.set(__self__, "dpd", dpd)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if lifetime_seconds is not None:
            pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if local_id_type is not None:
            pulumi.set(__self__, "local_id_type", local_id_type)
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if peer_id_type is not None:
            pulumi.set(__self__, "peer_id_type", peer_id_type)
        if pfs is not None:
            pulumi.set(__self__, "pfs", pfs)
        if phase1_negotiation_mode is not None:
            pulumi.set(__self__, "phase1_negotiation_mode", phase1_negotiation_mode)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The authentication algorithm. The value can be **sha1**, **md5**,
        **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
        please use them with caution.
        """
        return pulumi.get(self, "authentication_algorithm")

    @authentication_algorithm.setter
    def authentication_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The authentication method during IKE negotiation.
        The value can be **pre-share** and **digital-envelope-v2**. Defaults to **pre-share**.
        """
        return pulumi.get(self, "authentication_method")

    @authentication_method.setter
    def authentication_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_method", value)

    @_builtins.property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DH group used for key exchange in phase 1.
        The value can be **group1**, **group2**, **group5**, **group14**, **group15**, **group16**, **group19**, **group20**,
        or **group21**. Exercise caution when using **group1**, **group2**, **group5**,
        or **group14** as they have low security. Defaults to **group15**.
        """
        return pulumi.get(self, "dh_group")

    @dh_group.setter
    def dh_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dh_group", value)

    @_builtins.property
    @pulumi.getter
    def dpd(self) -> Optional[pulumi.Input['ConnectionIkepolicyDpdArgs']]:
        """
        Specifies the dead peer detection (DPD) object.
        The dpd structure is documented below.

        <a name="Connection_DPD"></a>
        The `dpd` block supports:
        """
        return pulumi.get(self, "dpd")

    @dpd.setter
    def dpd(self, value: Optional[pulumi.Input['ConnectionIkepolicyDpdArgs']]):
        pulumi.set(self, "dpd", value)

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
        **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
        **3des** is less secure, please use it with caution.
        """
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IKE negotiation version. The value can be **v1** and **v2**. Defaults to **v2**.
        """
        return pulumi.get(self, "ike_version")

    @ike_version.setter
    def ike_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_version", value)

    @_builtins.property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The lifecycle time of Ipsec tunnel in seconds.
        The value ranges from `60` to `604,800`. Defaults to `3600`.
        """
        return pulumi.get(self, "lifetime_seconds")

    @lifetime_seconds.setter
    def lifetime_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lifetime_seconds", value)

    @_builtins.property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The local ID.
        """
        return pulumi.get(self, "local_id")

    @local_id.setter
    def local_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_id", value)

    @_builtins.property
    @pulumi.getter(name="localIdType")
    def local_id_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The local ID type. The value can be **ip** or **fqdn**. Defaults to **ip**.
        """
        return pulumi.get(self, "local_id_type")

    @local_id_type.setter
    def local_id_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_id_type", value)

    @_builtins.property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The peer ID.
        """
        return pulumi.get(self, "peer_id")

    @peer_id.setter
    def peer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_id", value)

    @_builtins.property
    @pulumi.getter(name="peerIdType")
    def peer_id_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The peer ID type. The value can be **ip**, **fqdn** or **any**. Defaults to **ip**.
        """
        return pulumi.get(self, "peer_id_type")

    @peer_id_type.setter
    def peer_id_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_id_type", value)

    @_builtins.property
    @pulumi.getter
    def pfs(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
        **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        """
        return pulumi.get(self, "pfs")

    @pfs.setter
    def pfs(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pfs", value)

    @_builtins.property
    @pulumi.getter(name="phase1NegotiationMode")
    def phase1_negotiation_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The negotiation mode, only works when the ike_version is v1.
        The value can be **main** or **aggressive**. Defaults to **main**.
        """
        return pulumi.get(self, "phase1_negotiation_mode")

    @phase1_negotiation_mode.setter
    def phase1_negotiation_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "phase1_negotiation_mode", value)


if not MYPY:
    class ConnectionIkepolicyDpdArgsDict(TypedDict):
        interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the DPD idle timeout period.
        The value ranges from `10` to `3,600`, in seconds. Defaults to `30`.
        """
        msg: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the format of DPD packets. The value can be:
        + **seq-hash-notify**: indicates that the payload of DPD packets is in the sequence of hash-notify;
        + **seq-notify-hash**: indicates that the payload of DPD packets is in the sequence of notify-hash;

        Defaults to **seq-hash-notify**.

        <a name="Connection_CreateRequestIpsecPolicy"></a>
        The `ipsecpolicy` block supports:
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the interval for retransmitting DPD packets.
        The value ranges from `2` to `60`, in seconds. Defaults to `15`.
        """
elif False:
    ConnectionIkepolicyDpdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionIkepolicyDpdArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 msg: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] interval: Specifies the DPD idle timeout period.
               The value ranges from `10` to `3,600`, in seconds. Defaults to `30`.
        :param pulumi.Input[_builtins.str] msg: Specifies the format of DPD packets. The value can be:
               + **seq-hash-notify**: indicates that the payload of DPD packets is in the sequence of hash-notify;
               + **seq-notify-hash**: indicates that the payload of DPD packets is in the sequence of notify-hash;
               
               Defaults to **seq-hash-notify**.
               
               <a name="Connection_CreateRequestIpsecPolicy"></a>
               The `ipsecpolicy` block supports:
        :param pulumi.Input[_builtins.int] timeout: Specifies the interval for retransmitting DPD packets.
               The value ranges from `2` to `60`, in seconds. Defaults to `15`.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the DPD idle timeout period.
        The value ranges from `10` to `3,600`, in seconds. Defaults to `30`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter
    def msg(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the format of DPD packets. The value can be:
        + **seq-hash-notify**: indicates that the payload of DPD packets is in the sequence of hash-notify;
        + **seq-notify-hash**: indicates that the payload of DPD packets is in the sequence of notify-hash;

        Defaults to **seq-hash-notify**.

        <a name="Connection_CreateRequestIpsecPolicy"></a>
        The `ipsecpolicy` block supports:
        """
        return pulumi.get(self, "msg")

    @msg.setter
    def msg(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "msg", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the interval for retransmitting DPD packets.
        The value ranges from `2` to `60`, in seconds. Defaults to `15`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class ConnectionIpsecpolicyArgsDict(TypedDict):
        authentication_algorithm: NotRequired[pulumi.Input[_builtins.str]]
        """
        The authentication algorithm. The value can be **sha1**, **md5**,
        **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
        please use them with caution.
        """
        encapsulation_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        The encapsulation mode, only **tunnel** supported for now.
        Defaults to **tunnel**.

        <a name="Connection_PolicyRule"></a>
        The `policy_rules` block supports:
        """
        encryption_algorithm: NotRequired[pulumi.Input[_builtins.str]]
        """
        The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
        **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
        **3des** is less secure, please use it with caution.
        """
        lifetime_seconds: NotRequired[pulumi.Input[_builtins.int]]
        """
        The lifecycle time of Ipsec tunnel in seconds.
        The value ranges from `60` to `604,800`. Defaults to `3600`.
        """
        pfs: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
        **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        """
        transform_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        The transform protocol. Only **esp** supported for now.
        Defaults to **esp**.
        """
elif False:
    ConnectionIpsecpolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionIpsecpolicyArgs:
    def __init__(__self__, *,
                 authentication_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 encapsulation_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 lifetime_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 pfs: Optional[pulumi.Input[_builtins.str]] = None,
                 transform_protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_algorithm: The authentication algorithm. The value can be **sha1**, **md5**,
               **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
               please use them with caution.
        :param pulumi.Input[_builtins.str] encapsulation_mode: The encapsulation mode, only **tunnel** supported for now.
               Defaults to **tunnel**.
               
               <a name="Connection_PolicyRule"></a>
               The `policy_rules` block supports:
        :param pulumi.Input[_builtins.str] encryption_algorithm: The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
               **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
               **3des** is less secure, please use it with caution.
        :param pulumi.Input[_builtins.int] lifetime_seconds: The lifecycle time of Ipsec tunnel in seconds.
               The value ranges from `60` to `604,800`. Defaults to `3600`.
        :param pulumi.Input[_builtins.str] pfs: The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
               **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        :param pulumi.Input[_builtins.str] transform_protocol: The transform protocol. Only **esp** supported for now.
               Defaults to **esp**.
        """
        if authentication_algorithm is not None:
            pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        if encapsulation_mode is not None:
            pulumi.set(__self__, "encapsulation_mode", encapsulation_mode)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if lifetime_seconds is not None:
            pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        if pfs is not None:
            pulumi.set(__self__, "pfs", pfs)
        if transform_protocol is not None:
            pulumi.set(__self__, "transform_protocol", transform_protocol)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The authentication algorithm. The value can be **sha1**, **md5**,
        **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
        please use them with caution.
        """
        return pulumi.get(self, "authentication_algorithm")

    @authentication_algorithm.setter
    def authentication_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="encapsulationMode")
    def encapsulation_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The encapsulation mode, only **tunnel** supported for now.
        Defaults to **tunnel**.

        <a name="Connection_PolicyRule"></a>
        The `policy_rules` block supports:
        """
        return pulumi.get(self, "encapsulation_mode")

    @encapsulation_mode.setter
    def encapsulation_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation_mode", value)

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
        **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
        **3des** is less secure, please use it with caution.
        """
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The lifecycle time of Ipsec tunnel in seconds.
        The value ranges from `60` to `604,800`. Defaults to `3600`.
        """
        return pulumi.get(self, "lifetime_seconds")

    @lifetime_seconds.setter
    def lifetime_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lifetime_seconds", value)

    @_builtins.property
    @pulumi.getter
    def pfs(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
        **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        """
        return pulumi.get(self, "pfs")

    @pfs.setter
    def pfs(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pfs", value)

    @_builtins.property
    @pulumi.getter(name="transformProtocol")
    def transform_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The transform protocol. Only **esp** supported for now.
        Defaults to **esp**.
        """
        return pulumi.get(self, "transform_protocol")

    @transform_protocol.setter
    def transform_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transform_protocol", value)


if not MYPY:
    class ConnectionPolicyRuleArgsDict(TypedDict):
        destinations: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The list of destination CIDRs.
        """
        rule_index: NotRequired[pulumi.Input[_builtins.int]]
        """
        The rule index.
        """
        source: NotRequired[pulumi.Input[_builtins.str]]
        """
        The source CIDR.
        """
elif False:
    ConnectionPolicyRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionPolicyRuleArgs:
    def __init__(__self__, *,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 rule_index: Optional[pulumi.Input[_builtins.int]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] destinations: The list of destination CIDRs.
        :param pulumi.Input[_builtins.int] rule_index: The rule index.
        :param pulumi.Input[_builtins.str] source: The source CIDR.
        """
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if rule_index is not None:
            pulumi.set(__self__, "rule_index", rule_index)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of destination CIDRs.
        """
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "destinations", value)

    @_builtins.property
    @pulumi.getter(name="ruleIndex")
    def rule_index(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The rule index.
        """
        return pulumi.get(self, "rule_index")

    @rule_index.setter
    def rule_index(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rule_index", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The source CIDR.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)


if not MYPY:
    class GatewayCertificateArgsDict(TypedDict):
        certificate_chain: pulumi.Input[_builtins.str]
        """
        The certificate chain of the gateway certificate.
        """
        content: pulumi.Input[_builtins.str]
        """
        The content of the gateway certificate.
        """
        enc_certificate: pulumi.Input[_builtins.str]
        """
        The enc certificate of the gateway certificate.
        """
        enc_private_key: pulumi.Input[_builtins.str]
        """
        The enc private key of the gateway certificate.
        """
        name: pulumi.Input[_builtins.str]
        """
        The name of the gateway certificate.
        """
        private_key: pulumi.Input[_builtins.str]
        """
        The private of the gateway certificate.
        """
        certificate_chain_expire_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        The expire time of the certificate.
        """
        certificate_chain_serial_number: NotRequired[pulumi.Input[_builtins.str]]
        """
        The serial number of the certificate chain.
        """
        certificate_chain_subject: NotRequired[pulumi.Input[_builtins.str]]
        """
        The subject of the certificate chain.
        """
        certificate_expire_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        The expire time of the certificate.
        """
        certificate_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The certificate ID.
        """
        certificate_serial_number: NotRequired[pulumi.Input[_builtins.str]]
        """
        The serial number of the certificate.
        """
        certificate_subject: NotRequired[pulumi.Input[_builtins.str]]
        """
        The subject of the certificate.
        """
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The create time of the gateway certificate.
        """
        enc_certificate_expire_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        The expire time of the enc certificate.
        """
        enc_certificate_serial_number: NotRequired[pulumi.Input[_builtins.str]]
        """
        The serial number of the enc certificate.
        """
        enc_certificate_subject: NotRequired[pulumi.Input[_builtins.str]]
        """
        The subject of the enc certificate.
        """
        issuer: NotRequired[pulumi.Input[_builtins.str]]
        """
        The issuer of the certificate.
        """
        signature_algorithm: NotRequired[pulumi.Input[_builtins.str]]
        """
        The signature algorithm of the certificate.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The status of the certificate.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The update time of the gateway certificate.
        """
elif False:
    GatewayCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayCertificateArgs:
    def __init__(__self__, *,
                 certificate_chain: pulumi.Input[_builtins.str],
                 content: pulumi.Input[_builtins.str],
                 enc_certificate: pulumi.Input[_builtins.str],
                 enc_private_key: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 private_key: pulumi.Input[_builtins.str],
                 certificate_chain_expire_time: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_chain_serial_number: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_chain_subject: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_expire_time: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_serial_number: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_subject: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enc_certificate_expire_time: Optional[pulumi.Input[_builtins.str]] = None,
                 enc_certificate_serial_number: Optional[pulumi.Input[_builtins.str]] = None,
                 enc_certificate_subject: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] certificate_chain: The certificate chain of the gateway certificate.
        :param pulumi.Input[_builtins.str] content: The content of the gateway certificate.
        :param pulumi.Input[_builtins.str] enc_certificate: The enc certificate of the gateway certificate.
        :param pulumi.Input[_builtins.str] enc_private_key: The enc private key of the gateway certificate.
        :param pulumi.Input[_builtins.str] name: The name of the gateway certificate.
        :param pulumi.Input[_builtins.str] private_key: The private of the gateway certificate.
        :param pulumi.Input[_builtins.str] certificate_chain_expire_time: The expire time of the certificate.
        :param pulumi.Input[_builtins.str] certificate_chain_serial_number: The serial number of the certificate chain.
        :param pulumi.Input[_builtins.str] certificate_chain_subject: The subject of the certificate chain.
        :param pulumi.Input[_builtins.str] certificate_expire_time: The expire time of the certificate.
        :param pulumi.Input[_builtins.str] certificate_id: The certificate ID.
        :param pulumi.Input[_builtins.str] certificate_serial_number: The serial number of the certificate.
        :param pulumi.Input[_builtins.str] certificate_subject: The subject of the certificate.
        :param pulumi.Input[_builtins.str] created_at: The create time of the gateway certificate.
        :param pulumi.Input[_builtins.str] enc_certificate_expire_time: The expire time of the enc certificate.
        :param pulumi.Input[_builtins.str] enc_certificate_serial_number: The serial number of the enc certificate.
        :param pulumi.Input[_builtins.str] enc_certificate_subject: The subject of the enc certificate.
        :param pulumi.Input[_builtins.str] issuer: The issuer of the certificate.
        :param pulumi.Input[_builtins.str] signature_algorithm: The signature algorithm of the certificate.
        :param pulumi.Input[_builtins.str] status: The status of the certificate.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the gateway certificate.
        """
        pulumi.set(__self__, "certificate_chain", certificate_chain)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "enc_certificate", enc_certificate)
        pulumi.set(__self__, "enc_private_key", enc_private_key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_key", private_key)
        if certificate_chain_expire_time is not None:
            pulumi.set(__self__, "certificate_chain_expire_time", certificate_chain_expire_time)
        if certificate_chain_serial_number is not None:
            pulumi.set(__self__, "certificate_chain_serial_number", certificate_chain_serial_number)
        if certificate_chain_subject is not None:
            pulumi.set(__self__, "certificate_chain_subject", certificate_chain_subject)
        if certificate_expire_time is not None:
            pulumi.set(__self__, "certificate_expire_time", certificate_expire_time)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_serial_number is not None:
            pulumi.set(__self__, "certificate_serial_number", certificate_serial_number)
        if certificate_subject is not None:
            pulumi.set(__self__, "certificate_subject", certificate_subject)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enc_certificate_expire_time is not None:
            pulumi.set(__self__, "enc_certificate_expire_time", enc_certificate_expire_time)
        if enc_certificate_serial_number is not None:
            pulumi.set(__self__, "enc_certificate_serial_number", enc_certificate_serial_number)
        if enc_certificate_subject is not None:
            pulumi.set(__self__, "enc_certificate_subject", enc_certificate_subject)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> pulumi.Input[_builtins.str]:
        """
        The certificate chain of the gateway certificate.
        """
        return pulumi.get(self, "certificate_chain")

    @certificate_chain.setter
    def certificate_chain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "certificate_chain", value)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str]:
        """
        The content of the gateway certificate.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter(name="encCertificate")
    def enc_certificate(self) -> pulumi.Input[_builtins.str]:
        """
        The enc certificate of the gateway certificate.
        """
        return pulumi.get(self, "enc_certificate")

    @enc_certificate.setter
    def enc_certificate(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "enc_certificate", value)

    @_builtins.property
    @pulumi.getter(name="encPrivateKey")
    def enc_private_key(self) -> pulumi.Input[_builtins.str]:
        """
        The enc private key of the gateway certificate.
        """
        return pulumi.get(self, "enc_private_key")

    @enc_private_key.setter
    def enc_private_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "enc_private_key", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the gateway certificate.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[_builtins.str]:
        """
        The private of the gateway certificate.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter(name="certificateChainExpireTime")
    def certificate_chain_expire_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The expire time of the certificate.
        """
        return pulumi.get(self, "certificate_chain_expire_time")

    @certificate_chain_expire_time.setter
    def certificate_chain_expire_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_chain_expire_time", value)

    @_builtins.property
    @pulumi.getter(name="certificateChainSerialNumber")
    def certificate_chain_serial_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The serial number of the certificate chain.
        """
        return pulumi.get(self, "certificate_chain_serial_number")

    @certificate_chain_serial_number.setter
    def certificate_chain_serial_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_chain_serial_number", value)

    @_builtins.property
    @pulumi.getter(name="certificateChainSubject")
    def certificate_chain_subject(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject of the certificate chain.
        """
        return pulumi.get(self, "certificate_chain_subject")

    @certificate_chain_subject.setter
    def certificate_chain_subject(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_chain_subject", value)

    @_builtins.property
    @pulumi.getter(name="certificateExpireTime")
    def certificate_expire_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The expire time of the certificate.
        """
        return pulumi.get(self, "certificate_expire_time")

    @certificate_expire_time.setter
    def certificate_expire_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_expire_time", value)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="certificateSerialNumber")
    def certificate_serial_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The serial number of the certificate.
        """
        return pulumi.get(self, "certificate_serial_number")

    @certificate_serial_number.setter
    def certificate_serial_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_serial_number", value)

    @_builtins.property
    @pulumi.getter(name="certificateSubject")
    def certificate_subject(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject of the certificate.
        """
        return pulumi.get(self, "certificate_subject")

    @certificate_subject.setter
    def certificate_subject(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_subject", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The create time of the gateway certificate.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="encCertificateExpireTime")
    def enc_certificate_expire_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The expire time of the enc certificate.
        """
        return pulumi.get(self, "enc_certificate_expire_time")

    @enc_certificate_expire_time.setter
    def enc_certificate_expire_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enc_certificate_expire_time", value)

    @_builtins.property
    @pulumi.getter(name="encCertificateSerialNumber")
    def enc_certificate_serial_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The serial number of the enc certificate.
        """
        return pulumi.get(self, "enc_certificate_serial_number")

    @enc_certificate_serial_number.setter
    def enc_certificate_serial_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enc_certificate_serial_number", value)

    @_builtins.property
    @pulumi.getter(name="encCertificateSubject")
    def enc_certificate_subject(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject of the enc certificate.
        """
        return pulumi.get(self, "enc_certificate_subject")

    @enc_certificate_subject.setter
    def enc_certificate_subject(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enc_certificate_subject", value)

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The issuer of the certificate.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer", value)

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The signature algorithm of the certificate.
        """
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signature_algorithm", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the certificate.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time of the gateway certificate.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class GatewayEip1ArgsDict(TypedDict):
        bandwidth_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The bandwidth ID.
        """
        bandwidth_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The bandwidth name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        bandwidth_size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
        When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.

        Changing this parameter will create a new resource.
        """
        charge_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.

        <a name="Gateway_certificate"></a>
        The `certificate` block supports:
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The public IP address.
        """
        ip_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        The public IP version.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
elif False:
    GatewayEip1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayEip1Args:
    def __init__(__self__, *,
                 bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_name: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_size: Optional[pulumi.Input[_builtins.int]] = None,
                 charge_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] bandwidth_id: The bandwidth ID.
        :param pulumi.Input[_builtins.str] bandwidth_name: The bandwidth name.  
               The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] bandwidth_size: Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
               cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
               When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
               
               Changing this parameter will create a new resource.
               
               > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
               create a new EIP.
               
               <a name="Gateway_certificate"></a>
               The `certificate` block supports:
        :param pulumi.Input[_builtins.str] id: The public IP ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ip_address: The public IP address.
        :param pulumi.Input[_builtins.int] ip_version: The public IP version.
        :param pulumi.Input[_builtins.str] type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @bandwidth_id.setter
    def bandwidth_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_id", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bandwidth name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_name")

    @bandwidth_name.setter
    def bandwidth_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_name", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
        When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_size")

    @bandwidth_size.setter
    def bandwidth_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_size", value)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.

        <a name="Gateway_certificate"></a>
        The `certificate` block supports:
        """
        return pulumi.get(self, "charge_mode")

    @charge_mode.setter
    def charge_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charge_mode", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class GatewayEip2ArgsDict(TypedDict):
        bandwidth_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The bandwidth ID.
        """
        bandwidth_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The bandwidth name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        bandwidth_size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
        When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.

        Changing this parameter will create a new resource.
        """
        charge_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.

        <a name="Gateway_certificate"></a>
        The `certificate` block supports:
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The public IP address.
        """
        ip_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        The public IP version.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
elif False:
    GatewayEip2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayEip2Args:
    def __init__(__self__, *,
                 bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_name: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_size: Optional[pulumi.Input[_builtins.int]] = None,
                 charge_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] bandwidth_id: The bandwidth ID.
        :param pulumi.Input[_builtins.str] bandwidth_name: The bandwidth name.  
               The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] bandwidth_size: Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
               cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
               When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
               
               Changing this parameter will create a new resource.
               
               > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
               create a new EIP.
               
               <a name="Gateway_certificate"></a>
               The `certificate` block supports:
        :param pulumi.Input[_builtins.str] id: The public IP ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ip_address: The public IP address.
        :param pulumi.Input[_builtins.int] ip_version: The public IP version.
        :param pulumi.Input[_builtins.str] type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @bandwidth_id.setter
    def bandwidth_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_id", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bandwidth name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_name")

    @bandwidth_name.setter
    def bandwidth_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_name", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
        When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_size")

    @bandwidth_size.setter
    def bandwidth_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_size", value)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.

        <a name="Gateway_certificate"></a>
        The `certificate` block supports:
        """
        return pulumi.get(self, "charge_mode")

    @charge_mode.setter
    def charge_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charge_mode", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class GatewayMasterEipArgsDict(TypedDict):
        bandwidth_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The bandwidth ID.
        """
        bandwidth_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The bandwidth name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        bandwidth_size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
        When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.

        Changing this parameter will create a new resource.
        """
        charge_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.

        <a name="Gateway_certificate"></a>
        The `certificate` block supports:
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The public IP address.
        """
        ip_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        The public IP version.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
elif False:
    GatewayMasterEipArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayMasterEipArgs:
    def __init__(__self__, *,
                 bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_name: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_size: Optional[pulumi.Input[_builtins.int]] = None,
                 charge_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] bandwidth_id: The bandwidth ID.
        :param pulumi.Input[_builtins.str] bandwidth_name: The bandwidth name.  
               The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] bandwidth_size: Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
               cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
               When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
               
               Changing this parameter will create a new resource.
               
               > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
               create a new EIP.
               
               <a name="Gateway_certificate"></a>
               The `certificate` block supports:
        :param pulumi.Input[_builtins.str] id: The public IP ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ip_address: The public IP address.
        :param pulumi.Input[_builtins.int] ip_version: The public IP version.
        :param pulumi.Input[_builtins.str] type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @bandwidth_id.setter
    def bandwidth_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_id", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bandwidth name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_name")

    @bandwidth_name.setter
    def bandwidth_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_name", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
        When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_size")

    @bandwidth_size.setter
    def bandwidth_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_size", value)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.

        <a name="Gateway_certificate"></a>
        The `certificate` block supports:
        """
        return pulumi.get(self, "charge_mode")

    @charge_mode.setter
    def charge_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charge_mode", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class GatewaySlaveEipArgsDict(TypedDict):
        bandwidth_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The bandwidth ID.
        """
        bandwidth_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The bandwidth name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        bandwidth_size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
        When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.

        Changing this parameter will create a new resource.
        """
        charge_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.

        <a name="Gateway_certificate"></a>
        The `certificate` block supports:
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The public IP address.
        """
        ip_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        The public IP version.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
elif False:
    GatewaySlaveEipArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewaySlaveEipArgs:
    def __init__(__self__, *,
                 bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_name: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_size: Optional[pulumi.Input[_builtins.int]] = None,
                 charge_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] bandwidth_id: The bandwidth ID.
        :param pulumi.Input[_builtins.str] bandwidth_name: The bandwidth name.  
               The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] bandwidth_size: Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
               cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
               When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
               
               Changing this parameter will create a new resource.
               
               > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
               create a new EIP.
               
               <a name="Gateway_certificate"></a>
               The `certificate` block supports:
        :param pulumi.Input[_builtins.str] id: The public IP ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ip_address: The public IP address.
        :param pulumi.Input[_builtins.int] ip_version: The public IP version.
        :param pulumi.Input[_builtins.str] type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @bandwidth_id.setter
    def bandwidth_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_id", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bandwidth name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_name")

    @bandwidth_name.setter
    def bandwidth_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_name", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than `100`. When the `flavor` is **Professional1**, the value cannot be greater than `300`.
        When the `flavor` is **Professional2**, the value cannot be greater than `1,000`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_size")

    @bandwidth_size.setter
    def bandwidth_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_size", value)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.

        <a name="Gateway_certificate"></a>
        The `certificate` block supports:
        """
        return pulumi.get(self, "charge_mode")

    @charge_mode.setter
    def charge_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charge_mode", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ServerClientCaCertificateArgsDict(TypedDict):
        content: pulumi.Input[_builtins.str]
        """
        Specifies the certificate content.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the certificate name. If this parameter is left blank, the system automatically
        generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
        underscores (_), and hyphens (-).

        <a name="block--server_certificate"></a>
        The `server_certificate` block supports:
        """
elif False:
    ServerClientCaCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerClientCaCertificateArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] content: Specifies the certificate content.
        :param pulumi.Input[_builtins.str] name: Specifies the certificate name. If this parameter is left blank, the system automatically
               generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
               underscores (_), and hyphens (-).
               
               <a name="block--server_certificate"></a>
               The `server_certificate` block supports:
        """
        pulumi.set(__self__, "content", content)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the certificate content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate name. If this parameter is left blank, the system automatically
        generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
        underscores (_), and hyphens (-).

        <a name="block--server_certificate"></a>
        The `server_certificate` block supports:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ServerClientCaCertificatesUploadedArgsDict(TypedDict):
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The creation time of the client CA certificate.
        """
        expiration_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        The expiration time of the server certificate.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the certificate ID, which is the ID of a certificated uploaded in the Cloud
        Certificate Manager (CCM).

        <a name="block--ssl_options"></a>
        The `ssl_options` block supports:
        """
        issuer: NotRequired[pulumi.Input[_builtins.str]]
        """
        The issuer of the server certificate.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the certificate name. If this parameter is left blank, the system automatically
        generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
        underscores (_), and hyphens (-).

        <a name="block--server_certificate"></a>
        The `server_certificate` block supports:
        """
        serial_number: NotRequired[pulumi.Input[_builtins.str]]
        """
        The serial number of the server certificate.
        """
        signature_algorithm: NotRequired[pulumi.Input[_builtins.str]]
        """
        The signature algorithm of the server certificate.
        """
        subject: NotRequired[pulumi.Input[_builtins.str]]
        """
        The subject of the server certificate.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The update time of the client CA certificate.
        """
elif False:
    ServerClientCaCertificatesUploadedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerClientCaCertificatesUploadedArgs:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration_time: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 serial_number: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 subject: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] created_at: The creation time of the client CA certificate.
        :param pulumi.Input[_builtins.str] expiration_time: The expiration time of the server certificate.
        :param pulumi.Input[_builtins.str] id: Specifies the certificate ID, which is the ID of a certificated uploaded in the Cloud
               Certificate Manager (CCM).
               
               <a name="block--ssl_options"></a>
               The `ssl_options` block supports:
        :param pulumi.Input[_builtins.str] issuer: The issuer of the server certificate.
        :param pulumi.Input[_builtins.str] name: Specifies the certificate name. If this parameter is left blank, the system automatically
               generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
               underscores (_), and hyphens (-).
               
               <a name="block--server_certificate"></a>
               The `server_certificate` block supports:
        :param pulumi.Input[_builtins.str] serial_number: The serial number of the server certificate.
        :param pulumi.Input[_builtins.str] signature_algorithm: The signature algorithm of the server certificate.
        :param pulumi.Input[_builtins.str] subject: The subject of the server certificate.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the client CA certificate.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the client CA certificate.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The expiration time of the server certificate.
        """
        return pulumi.get(self, "expiration_time")

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expiration_time", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate ID, which is the ID of a certificated uploaded in the Cloud
        Certificate Manager (CCM).

        <a name="block--ssl_options"></a>
        The `ssl_options` block supports:
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The issuer of the server certificate.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate name. If this parameter is left blank, the system automatically
        generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
        underscores (_), and hyphens (-).

        <a name="block--server_certificate"></a>
        The `server_certificate` block supports:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The serial number of the server certificate.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "serial_number", value)

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The signature algorithm of the server certificate.
        """
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signature_algorithm", value)

    @_builtins.property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject of the server certificate.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subject", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time of the client CA certificate.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class ServerServerCertificateArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the certificate ID, which is the ID of a certificated uploaded in the Cloud
        Certificate Manager (CCM).

        <a name="block--ssl_options"></a>
        The `ssl_options` block supports:
        """
        expiration_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        The expiration time of the server certificate.
        """
        issuer: NotRequired[pulumi.Input[_builtins.str]]
        """
        The issuer of the server certificate.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the certificate name. If this parameter is left blank, the system automatically
        generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
        underscores (_), and hyphens (-).

        <a name="block--server_certificate"></a>
        The `server_certificate` block supports:
        """
        serial_number: NotRequired[pulumi.Input[_builtins.str]]
        """
        The serial number of the server certificate.
        """
        signature_algorithm: NotRequired[pulumi.Input[_builtins.str]]
        """
        The signature algorithm of the server certificate.
        """
        subject: NotRequired[pulumi.Input[_builtins.str]]
        """
        The subject of the server certificate.
        """
elif False:
    ServerServerCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerServerCertificateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 expiration_time: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 serial_number: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 subject: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the certificate ID, which is the ID of a certificated uploaded in the Cloud
               Certificate Manager (CCM).
               
               <a name="block--ssl_options"></a>
               The `ssl_options` block supports:
        :param pulumi.Input[_builtins.str] expiration_time: The expiration time of the server certificate.
        :param pulumi.Input[_builtins.str] issuer: The issuer of the server certificate.
        :param pulumi.Input[_builtins.str] name: Specifies the certificate name. If this parameter is left blank, the system automatically
               generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
               underscores (_), and hyphens (-).
               
               <a name="block--server_certificate"></a>
               The `server_certificate` block supports:
        :param pulumi.Input[_builtins.str] serial_number: The serial number of the server certificate.
        :param pulumi.Input[_builtins.str] signature_algorithm: The signature algorithm of the server certificate.
        :param pulumi.Input[_builtins.str] subject: The subject of the server certificate.
        """
        pulumi.set(__self__, "id", id)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the certificate ID, which is the ID of a certificated uploaded in the Cloud
        Certificate Manager (CCM).

        <a name="block--ssl_options"></a>
        The `ssl_options` block supports:
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The expiration time of the server certificate.
        """
        return pulumi.get(self, "expiration_time")

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expiration_time", value)

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The issuer of the server certificate.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate name. If this parameter is left blank, the system automatically
        generates a certificate name. The value is a string of **1** to **64** characters, which can contain digits, letters,
        underscores (_), and hyphens (-).

        <a name="block--server_certificate"></a>
        The `server_certificate` block supports:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The serial number of the server certificate.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "serial_number", value)

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The signature algorithm of the server certificate.
        """
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signature_algorithm", value)

    @_builtins.property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject of the server certificate.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subject", value)


if not MYPY:
    class ServerSslOptionsArgsDict(TypedDict):
        authentication_algorithm: NotRequired[pulumi.Input[_builtins.str]]
        """
        The authentication algorithm.
        """
        encryption_algorithm: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the encryption algorithm.
        Value can be **AES-128-GCM**, **AES-256-GCM**. The default value is **AES-128-GCM**.
        """
        is_compressed: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to compress data. The default value is **false**.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the port number. Value can be **443**, **1194**. The default value is **443**.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the protocol. Value can be **TCP**. Defaults to **TCP**.
        """
elif False:
    ServerSslOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerSslOptionsArgs:
    def __init__(__self__, *,
                 authentication_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 is_compressed: Optional[pulumi.Input[_builtins.bool]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_algorithm: The authentication algorithm.
        :param pulumi.Input[_builtins.str] encryption_algorithm: Specifies the encryption algorithm.
               Value can be **AES-128-GCM**, **AES-256-GCM**. The default value is **AES-128-GCM**.
        :param pulumi.Input[_builtins.bool] is_compressed: Specifies whether to compress data. The default value is **false**.
        :param pulumi.Input[_builtins.int] port: Specifies the port number. Value can be **443**, **1194**. The default value is **443**.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol. Value can be **TCP**. Defaults to **TCP**.
        """
        if authentication_algorithm is not None:
            pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if is_compressed is not None:
            pulumi.set(__self__, "is_compressed", is_compressed)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The authentication algorithm.
        """
        return pulumi.get(self, "authentication_algorithm")

    @authentication_algorithm.setter
    def authentication_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the encryption algorithm.
        Value can be **AES-128-GCM**, **AES-256-GCM**. The default value is **AES-128-GCM**.
        """
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="isCompressed")
    def is_compressed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to compress data. The default value is **false**.
        """
        return pulumi.get(self, "is_compressed")

    @is_compressed.setter
    def is_compressed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_compressed", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the port number. Value can be **443**, **1194**. The default value is **443**.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protocol. Value can be **TCP**. Defaults to **TCP**.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class UserGroupUserArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the user ID.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the user group.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the user group.
        """
elif False:
    UserGroupUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserGroupUserArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the user ID.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the user group.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the user group.
        """
        pulumi.set(__self__, "id", id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the user ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the user group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the user group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class GetResourceInstancesMatchArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the match key.
        The value can be **resource_name**.
        """
        value: _builtins.str
        """
        Specifies the match value.
        The value is a sting of **0** to **255** characters.
        """
elif False:
    GetResourceInstancesMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourceInstancesMatchArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the match key.
               The value can be **resource_name**.
        :param _builtins.str value: Specifies the match value.
               The value is a sting of **0** to **255** characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the match key.
        The value can be **resource_name**.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the match value.
        The value is a sting of **0** to **255** characters.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: _builtins.str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetResourceInstancesTagArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the match key.
        The value can be **resource_name**.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the value list of the tag.
        If values is an empty list, it indicates any value. The relationship between values is **OR**.
        The value is a sting of **0** to **255** characters. A maximum of **20** values can be specified.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
elif False:
    GetResourceInstancesTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourceInstancesTagArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the match key.
               The value can be **resource_name**.
        :param Sequence[_builtins.str] values: Specifies the value list of the tag.
               If values is an empty list, it indicates any value. The relationship between values is **OR**.
               The value is a sting of **0** to **255** characters. A maximum of **20** values can be specified.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the match key.
        The value can be **resource_name**.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the value list of the tag.
        If values is an empty list, it indicates any value. The relationship between values is **OR**.
        The value is a sting of **0** to **255** characters. A maximum of **20** values can be specified.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


