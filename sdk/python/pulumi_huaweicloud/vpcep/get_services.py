# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetServicesResult',
    'AwaitableGetServicesResult',
    'get_services',
    'get_services_output',
]

@pulumi.output_type
class GetServicesResult:
    """
    A collection of values returned by getServices.
    """
    def __init__(__self__, endpoint_services=None, id=None, public_border_group=None, region=None, server_type=None, service_id=None, service_name=None, status=None):
        if endpoint_services and not isinstance(endpoint_services, list):
            raise TypeError("Expected argument 'endpoint_services' to be a list")
        pulumi.set(__self__, "endpoint_services", endpoint_services)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if public_border_group and not isinstance(public_border_group, str):
            raise TypeError("Expected argument 'public_border_group' to be a str")
        pulumi.set(__self__, "public_border_group", public_border_group)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_type and not isinstance(server_type, str):
            raise TypeError("Expected argument 'server_type' to be a str")
        pulumi.set(__self__, "server_type", server_type)
        if service_id and not isinstance(service_id, str):
            raise TypeError("Expected argument 'service_id' to be a str")
        pulumi.set(__self__, "service_id", service_id)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="endpointServices")
    def endpoint_services(self) -> Sequence['outputs.GetServicesEndpointServiceResult']:
        """
        The list of VPC endpoint service.
        """
        return pulumi.get(self, "endpoint_services")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> Optional[_builtins.str]:
        """
        The information about Public Border Group of the pool corresponding to
        the VPC endpoint service.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[_builtins.str]:
        """
        The backend resource type.
        """
        return pulumi.get(self, "server_type")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_id")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[_builtins.str]:
        """
        The full name of the VPC endpoint service.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")


class AwaitableGetServicesResult(GetServicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServicesResult(
            endpoint_services=self.endpoint_services,
            id=self.id,
            public_border_group=self.public_border_group,
            region=self.region,
            server_type=self.server_type,
            service_id=self.service_id,
            service_name=self.service_name,
            status=self.status)


def get_services(public_border_group: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 server_type: Optional[_builtins.str] = None,
                 service_id: Optional[_builtins.str] = None,
                 service_name: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServicesResult:
    """
    Use this data source to get VPC endpoint services.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    service_name = config.require_object("serviceName")
    server_type = config.require_object("serverType")
    status = config.require_object("status")
    services = huaweicloud.Vpcep.get_services(service_name=service_name,
        server_type=server_type,
        status=status)
    ```


    :param _builtins.str public_border_group: Specifies the information about Public Border Group of the pool
           corresponding to the VPC endpoint service.
    :param _builtins.str region: The region in which to obtain the VPC endpoint services. If omitted, the
           provider-level region will be used.
    :param _builtins.str server_type: Specifies the backend resource type. The valid values are as follows:
           + **VM**: Indicates the cloud server, which can be used as a server.
           + **LB**: Indicates the shared load balancer, which is applicable to services with high access traffic and services.
    :param _builtins.str service_id: Specifies the ID of VPC endpoint service.
    :param _builtins.str service_name: Specifies the full name of the VPC endpoint service.
    :param _builtins.str status: Specifies the status of the VPC endpoint service.
           The value can be **available** or **failed**.
    """
    __args__ = dict()
    __args__['publicBorderGroup'] = public_border_group
    __args__['region'] = region
    __args__['serverType'] = server_type
    __args__['serviceId'] = service_id
    __args__['serviceName'] = service_name
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpcep/getServices:getServices', __args__, opts=opts, typ=GetServicesResult).value

    return AwaitableGetServicesResult(
        endpoint_services=pulumi.get(__ret__, 'endpoint_services'),
        id=pulumi.get(__ret__, 'id'),
        public_border_group=pulumi.get(__ret__, 'public_border_group'),
        region=pulumi.get(__ret__, 'region'),
        server_type=pulumi.get(__ret__, 'server_type'),
        service_id=pulumi.get(__ret__, 'service_id'),
        service_name=pulumi.get(__ret__, 'service_name'),
        status=pulumi.get(__ret__, 'status'))
def get_services_output(public_border_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        server_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        service_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        service_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServicesResult]:
    """
    Use this data source to get VPC endpoint services.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    service_name = config.require_object("serviceName")
    server_type = config.require_object("serverType")
    status = config.require_object("status")
    services = huaweicloud.Vpcep.get_services(service_name=service_name,
        server_type=server_type,
        status=status)
    ```


    :param _builtins.str public_border_group: Specifies the information about Public Border Group of the pool
           corresponding to the VPC endpoint service.
    :param _builtins.str region: The region in which to obtain the VPC endpoint services. If omitted, the
           provider-level region will be used.
    :param _builtins.str server_type: Specifies the backend resource type. The valid values are as follows:
           + **VM**: Indicates the cloud server, which can be used as a server.
           + **LB**: Indicates the shared load balancer, which is applicable to services with high access traffic and services.
    :param _builtins.str service_id: Specifies the ID of VPC endpoint service.
    :param _builtins.str service_name: Specifies the full name of the VPC endpoint service.
    :param _builtins.str status: Specifies the status of the VPC endpoint service.
           The value can be **available** or **failed**.
    """
    __args__ = dict()
    __args__['publicBorderGroup'] = public_border_group
    __args__['region'] = region
    __args__['serverType'] = server_type
    __args__['serviceId'] = service_id
    __args__['serviceName'] = service_name
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpcep/getServices:getServices', __args__, opts=opts, typ=GetServicesResult)
    return __ret__.apply(lambda __response__: GetServicesResult(
        endpoint_services=pulumi.get(__response__, 'endpoint_services'),
        id=pulumi.get(__response__, 'id'),
        public_border_group=pulumi.get(__response__, 'public_border_group'),
        region=pulumi.get(__response__, 'region'),
        server_type=pulumi.get(__response__, 'server_type'),
        service_id=pulumi.get(__response__, 'service_id'),
        service_name=pulumi.get(__response__, 'service_name'),
        status=pulumi.get(__response__, 'status')))
