# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetServiceConnectionsResult',
    'AwaitableGetServiceConnectionsResult',
    'get_service_connections',
    'get_service_connections_output',
]

@pulumi.output_type
class GetServiceConnectionsResult:
    """
    A collection of values returned by getServiceConnections.
    """
    def __init__(__self__, connections=None, endpoint_id=None, id=None, marker_id=None, region=None, service_id=None, status=None):
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        pulumi.set(__self__, "connections", connections)
        if endpoint_id and not isinstance(endpoint_id, str):
            raise TypeError("Expected argument 'endpoint_id' to be a str")
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if marker_id and not isinstance(marker_id, str):
            raise TypeError("Expected argument 'marker_id' to be a str")
        pulumi.set(__self__, "marker_id", marker_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if service_id and not isinstance(service_id, str):
            raise TypeError("Expected argument 'service_id' to be a str")
        pulumi.set(__self__, "service_id", service_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetServiceConnectionsConnectionResult']:
        """
        The list of VPC endpoint service connections.
        """
        return pulumi.get(self, "connections")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[_builtins.str]:
        """
        The ID of VPC endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="markerId")
    def marker_id(self) -> Optional[_builtins.str]:
        """
        The packet ID of the VPC endpoint.
        """
        return pulumi.get(self, "marker_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> _builtins.str:
        return pulumi.get(self, "service_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The connection status of the VPC endpoint.
        """
        return pulumi.get(self, "status")


class AwaitableGetServiceConnectionsResult(GetServiceConnectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceConnectionsResult(
            connections=self.connections,
            endpoint_id=self.endpoint_id,
            id=self.id,
            marker_id=self.marker_id,
            region=self.region,
            service_id=self.service_id,
            status=self.status)


def get_service_connections(endpoint_id: Optional[_builtins.str] = None,
                            marker_id: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            service_id: Optional[_builtins.str] = None,
                            status: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceConnectionsResult:
    """
    Use this data source to get a list of the VPC endpoint service connections.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    service_id = config.require_object("serviceId")
    test = huaweicloud.Vpcep.get_service_connections(service_id=service_id)
    ```


    :param _builtins.str endpoint_id: Specifies the ID of VPC endpoint which has connected to
           VPC endpoint service.
    :param _builtins.str marker_id: Specifies the packet ID of the VPC endpoint.
    :param _builtins.str region: Specifies the region in which to querry the VPC endpoint service connections.
           If omitted, the provider-level region will be used.
    :param _builtins.str service_id: Specifies the ID of VPC endpoint service.
    :param _builtins.str status: Specifies the connection status of the VPC endpoint.
           The value can be **pendingAcceptance**, **accepted**, **rejected** and **failed**.
    """
    __args__ = dict()
    __args__['endpointId'] = endpoint_id
    __args__['markerId'] = marker_id
    __args__['region'] = region
    __args__['serviceId'] = service_id
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpcep/getServiceConnections:getServiceConnections', __args__, opts=opts, typ=GetServiceConnectionsResult).value

    return AwaitableGetServiceConnectionsResult(
        connections=pulumi.get(__ret__, 'connections'),
        endpoint_id=pulumi.get(__ret__, 'endpoint_id'),
        id=pulumi.get(__ret__, 'id'),
        marker_id=pulumi.get(__ret__, 'marker_id'),
        region=pulumi.get(__ret__, 'region'),
        service_id=pulumi.get(__ret__, 'service_id'),
        status=pulumi.get(__ret__, 'status'))
def get_service_connections_output(endpoint_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   marker_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   service_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceConnectionsResult]:
    """
    Use this data source to get a list of the VPC endpoint service connections.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    service_id = config.require_object("serviceId")
    test = huaweicloud.Vpcep.get_service_connections(service_id=service_id)
    ```


    :param _builtins.str endpoint_id: Specifies the ID of VPC endpoint which has connected to
           VPC endpoint service.
    :param _builtins.str marker_id: Specifies the packet ID of the VPC endpoint.
    :param _builtins.str region: Specifies the region in which to querry the VPC endpoint service connections.
           If omitted, the provider-level region will be used.
    :param _builtins.str service_id: Specifies the ID of VPC endpoint service.
    :param _builtins.str status: Specifies the connection status of the VPC endpoint.
           The value can be **pendingAcceptance**, **accepted**, **rejected** and **failed**.
    """
    __args__ = dict()
    __args__['endpointId'] = endpoint_id
    __args__['markerId'] = marker_id
    __args__['region'] = region
    __args__['serviceId'] = service_id
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpcep/getServiceConnections:getServiceConnections', __args__, opts=opts, typ=GetServiceConnectionsResult)
    return __ret__.apply(lambda __response__: GetServiceConnectionsResult(
        connections=pulumi.get(__response__, 'connections'),
        endpoint_id=pulumi.get(__response__, 'endpoint_id'),
        id=pulumi.get(__response__, 'id'),
        marker_id=pulumi.get(__response__, 'marker_id'),
        region=pulumi.get(__response__, 'region'),
        service_id=pulumi.get(__response__, 'service_id'),
        status=pulumi.get(__response__, 'status')))
