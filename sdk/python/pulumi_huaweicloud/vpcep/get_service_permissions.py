# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetServicePermissionsResult',
    'AwaitableGetServicePermissionsResult',
    'get_service_permissions',
    'get_service_permissions_output',
]

@pulumi.output_type
class GetServicePermissionsResult:
    """
    A collection of values returned by getServicePermissions.
    """
    def __init__(__self__, id=None, permission=None, permissions=None, region=None, service_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if permission and not isinstance(permission, str):
            raise TypeError("Expected argument 'permission' to be a str")
        pulumi.set(__self__, "permission", permission)
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        pulumi.set(__self__, "permissions", permissions)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if service_id and not isinstance(service_id, str):
            raise TypeError("Expected argument 'service_id' to be a str")
        pulumi.set(__self__, "service_id", service_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def permission(self) -> Optional[_builtins.str]:
        """
        The account or organization to access the VPC endpoint service.
        """
        return pulumi.get(self, "permission")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetServicePermissionsPermissionResult']:
        """
        The list of VPC endpoint service permissions.
        """
        return pulumi.get(self, "permissions")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> _builtins.str:
        return pulumi.get(self, "service_id")


class AwaitableGetServicePermissionsResult(GetServicePermissionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServicePermissionsResult(
            id=self.id,
            permission=self.permission,
            permissions=self.permissions,
            region=self.region,
            service_id=self.service_id)


def get_service_permissions(permission: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            service_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServicePermissionsResult:
    """
    Use this data source to get VPC endpoint service permissions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    service_id = config.require_object("serviceId")
    permission = config.require_object("permission")
    permissions = huaweicloud.Vpcep.get_service_permissions(service_id=service_id,
        permission=permission)
    ```


    :param _builtins.str permission: Specifies the account or organization to access the VPC endpoint service.
           The permission format is **iam:domain::domain_id** or **organizations:orgPath::org_path**.
    :param _builtins.str region: The region in which to obtain the VPC endpoint service. If omitted, the
           provider-level region will be used.
    :param _builtins.str service_id: Specifies the ID of VPC endpoint service.
    """
    __args__ = dict()
    __args__['permission'] = permission
    __args__['region'] = region
    __args__['serviceId'] = service_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpcep/getServicePermissions:getServicePermissions', __args__, opts=opts, typ=GetServicePermissionsResult).value

    return AwaitableGetServicePermissionsResult(
        id=pulumi.get(__ret__, 'id'),
        permission=pulumi.get(__ret__, 'permission'),
        permissions=pulumi.get(__ret__, 'permissions'),
        region=pulumi.get(__ret__, 'region'),
        service_id=pulumi.get(__ret__, 'service_id'))
def get_service_permissions_output(permission: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   service_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServicePermissionsResult]:
    """
    Use this data source to get VPC endpoint service permissions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    service_id = config.require_object("serviceId")
    permission = config.require_object("permission")
    permissions = huaweicloud.Vpcep.get_service_permissions(service_id=service_id,
        permission=permission)
    ```


    :param _builtins.str permission: Specifies the account or organization to access the VPC endpoint service.
           The permission format is **iam:domain::domain_id** or **organizations:orgPath::org_path**.
    :param _builtins.str region: The region in which to obtain the VPC endpoint service. If omitted, the
           provider-level region will be used.
    :param _builtins.str service_id: Specifies the ID of VPC endpoint service.
    """
    __args__ = dict()
    __args__['permission'] = permission
    __args__['region'] = region
    __args__['serviceId'] = service_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpcep/getServicePermissions:getServicePermissions', __args__, opts=opts, typ=GetServicePermissionsResult)
    return __ret__.apply(lambda __response__: GetServicePermissionsResult(
        id=pulumi.get(__response__, 'id'),
        permission=pulumi.get(__response__, 'permission'),
        permissions=pulumi.get(__response__, 'permissions'),
        region=pulumi.get(__response__, 'region'),
        service_id=pulumi.get(__response__, 'service_id')))
