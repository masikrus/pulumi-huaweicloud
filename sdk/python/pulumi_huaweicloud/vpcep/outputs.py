# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ApprovalConnection',
    'ServiceConnection',
    'ServicePortMapping',
    'GetEndpointsEndpointResult',
    'GetPublicServicesServiceResult',
    'GetQuotasQuotaResult',
    'GetServiceConnectionsConnectionResult',
    'GetServicePermissionsPermissionResult',
    'GetServicesEndpointServiceResult',
]

@pulumi.output_type
class ApprovalConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainId":
            suggest = "domain_id"
        elif key == "endpointId":
            suggest = "endpoint_id"
        elif key == "packetId":
            suggest = "packet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApprovalConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApprovalConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApprovalConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 domain_id: Optional[_builtins.str] = None,
                 endpoint_id: Optional[_builtins.str] = None,
                 packet_id: Optional[_builtins.int] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: The description of the VPC endpoint service connection.
        :param _builtins.str domain_id: The user's domain ID.
        :param _builtins.str endpoint_id: The unique ID of the VPC endpoint.
        :param _builtins.int packet_id: The packet ID of the VPC endpoint.
        :param _builtins.str status: The connection status of the VPC endpoint.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if packet_id is not None:
            pulumi.set(__self__, "packet_id", packet_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the VPC endpoint service connection.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[_builtins.str]:
        """
        The user's domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[_builtins.str]:
        """
        The unique ID of the VPC endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter(name="packetId")
    def packet_id(self) -> Optional[_builtins.int]:
        """
        The packet ID of the VPC endpoint.
        """
        return pulumi.get(self, "packet_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The connection status of the VPC endpoint.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ServiceConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainId":
            suggest = "domain_id"
        elif key == "endpointId":
            suggest = "endpoint_id"
        elif key == "packetId":
            suggest = "packet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 domain_id: Optional[_builtins.str] = None,
                 endpoint_id: Optional[_builtins.str] = None,
                 packet_id: Optional[_builtins.int] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the description of the VPC endpoint service.
        :param _builtins.str domain_id: The user's domain ID.
        :param _builtins.str endpoint_id: The unique ID of the VPC endpoint.
        :param _builtins.int packet_id: The packet ID of the VPC endpoint.
        :param _builtins.str status: The connection status of the VPC endpoint.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if packet_id is not None:
            pulumi.set(__self__, "packet_id", packet_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the VPC endpoint service.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[_builtins.str]:
        """
        The user's domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[_builtins.str]:
        """
        The unique ID of the VPC endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter(name="packetId")
    def packet_id(self) -> Optional[_builtins.int]:
        """
        The packet ID of the VPC endpoint.
        """
        return pulumi.get(self, "packet_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The connection status of the VPC endpoint.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ServicePortMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "servicePort":
            suggest = "service_port"
        elif key == "terminalPort":
            suggest = "terminal_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServicePortMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServicePortMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServicePortMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: Optional[_builtins.str] = None,
                 service_port: Optional[_builtins.int] = None,
                 terminal_port: Optional[_builtins.int] = None):
        """
        :param _builtins.str protocol: Specifies the protocol used in port mappings. Only **TCP** is supported.
        :param _builtins.int service_port: Specifies the port for accessing the VPC endpoint service. This port is provided by
               the backend service to provide services. The value ranges from `1` to `65,535`.
        :param _builtins.int terminal_port: Specifies the port for accessing the VPC endpoint. This port is provided by the VPC
               endpoint, allowing you to access the VPC endpoint service. The value ranges from `1` to `65,535`.
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_port is not None:
            pulumi.set(__self__, "service_port", service_port)
        if terminal_port is not None:
            pulumi.set(__self__, "terminal_port", terminal_port)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Specifies the protocol used in port mappings. Only **TCP** is supported.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="servicePort")
    def service_port(self) -> Optional[_builtins.int]:
        """
        Specifies the port for accessing the VPC endpoint service. This port is provided by
        the backend service to provide services. The value ranges from `1` to `65,535`.
        """
        return pulumi.get(self, "service_port")

    @_builtins.property
    @pulumi.getter(name="terminalPort")
    def terminal_port(self) -> Optional[_builtins.int]:
        """
        Specifies the port for accessing the VPC endpoint. This port is provided by the VPC
        endpoint, allowing you to access the VPC endpoint service. The value ranges from `1` to `65,535`.
        """
        return pulumi.get(self, "terminal_port")


@pulumi.output_type
class GetEndpointsEndpointResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enable_dns: _builtins.bool,
                 enable_whitelist: _builtins.bool,
                 id: _builtins.str,
                 ip_address: _builtins.str,
                 packet_id: _builtins.int,
                 service_id: _builtins.str,
                 service_name: _builtins.str,
                 service_type: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str,
                 vpc_id: _builtins.str,
                 whitelists: Sequence[_builtins.str]):
        """
        :param _builtins.str created_at: The creation time of the VPC endpoint. Use UTC time format, the format is: YYYY-MM-DDTHH:MM:SSZ.
        :param _builtins.str description: The description of VPC endpoint.
        :param _builtins.bool enable_dns: Whether to create a private domain name. The value can be **true** or **false**.
               When the type of endpoint service is **gateway**, the field is not valid.
        :param _builtins.bool enable_whitelist: Whether to enable access control.
               This field is displayed when creating an endpoint connected to an **interface** type endpoint service.
        :param _builtins.str id: The ID of the VPC endpoint.
        :param _builtins.str ip_address: The IP address for accessing the associated VPC endpoint service.
        :param _builtins.int packet_id: The packet ID of the VPC endpoint.
               OBS uses this field to implement double-ended fixed features, and distinguish what endpoint instance it is.
        :param _builtins.str service_id: The ID of the VPC endpoint service.
        :param _builtins.str service_name: The name of the VPC endpoint service.
        :param _builtins.str service_type: The type of the VPC endpoint service. The valid value can be:
               + **gateway**: Configured by operation and maintenance personnel.
               Users do not need to create it and can use it directly.
               + **interface**: Including cloud services configured by operation and maintenance personnel
               and private services created by users themselves. Among them, the cloud services configured
               by operation and maintenance personnel do not need to be created, and users can use them directly.
               You can query the public endpoint service list to view all user-visible and connectable
               endpoint services configured by operation and maintenance personnel, and create an **interface**
               type endpoint service by creating an endpoint service.
        :param _builtins.str status: The status of the VPC endpoint. The value can be **accepted**, **pendingAcceptance**, **creating**,
               **failed**, **deleting**, or **rejected**.
        :param _builtins.str subnet_id: The network ID of the subnet in the VPC specified by `vpc_id`, in UUID format.
        :param Mapping[str, _builtins.str] tags: The key/value pairs associating with the VPC endpoint.
        :param _builtins.str updated_at: The update time of the VPC endpoint. Use UTC time format, the format is: YYYY-MM-DDTHH:MM:SSZ.
        :param _builtins.str vpc_id: The ID of the VPC where the endpoint is created.
        :param Sequence[_builtins.str] whitelists: The list of IP address or CIDR block which can be accessed to the
               VPC endpoint.
               If not created, an empty list is returned.
               This field is displayed when creating an endpoint connected to an **interface** type endpoint service.
               Array length: **1** - **1000**.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable_dns", enable_dns)
        pulumi.set(__self__, "enable_whitelist", enable_whitelist)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "packet_id", packet_id)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "whitelists", whitelists)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the VPC endpoint. Use UTC time format, the format is: YYYY-MM-DDTHH:MM:SSZ.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of VPC endpoint.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableDns")
    def enable_dns(self) -> _builtins.bool:
        """
        Whether to create a private domain name. The value can be **true** or **false**.
        When the type of endpoint service is **gateway**, the field is not valid.
        """
        return pulumi.get(self, "enable_dns")

    @_builtins.property
    @pulumi.getter(name="enableWhitelist")
    def enable_whitelist(self) -> _builtins.bool:
        """
        Whether to enable access control.
        This field is displayed when creating an endpoint connected to an **interface** type endpoint service.
        """
        return pulumi.get(self, "enable_whitelist")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the VPC endpoint.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        The IP address for accessing the associated VPC endpoint service.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="packetId")
    def packet_id(self) -> _builtins.int:
        """
        The packet ID of the VPC endpoint.
        OBS uses this field to implement double-ended fixed features, and distinguish what endpoint instance it is.
        """
        return pulumi.get(self, "packet_id")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> _builtins.str:
        """
        The ID of the VPC endpoint service.
        """
        return pulumi.get(self, "service_id")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The name of the VPC endpoint service.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        The type of the VPC endpoint service. The valid value can be:
        + **gateway**: Configured by operation and maintenance personnel.
        Users do not need to create it and can use it directly.
        + **interface**: Including cloud services configured by operation and maintenance personnel
        and private services created by users themselves. Among them, the cloud services configured
        by operation and maintenance personnel do not need to be created, and users can use them directly.
        You can query the public endpoint service list to view all user-visible and connectable
        endpoint services configured by operation and maintenance personnel, and create an **interface**
        type endpoint service by creating an endpoint service.
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the VPC endpoint. The value can be **accepted**, **pendingAcceptance**, **creating**,
        **failed**, **deleting**, or **rejected**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The network ID of the subnet in the VPC specified by `vpc_id`, in UUID format.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs associating with the VPC endpoint.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the VPC endpoint. Use UTC time format, the format is: YYYY-MM-DDTHH:MM:SSZ.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the VPC where the endpoint is created.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter
    def whitelists(self) -> Sequence[_builtins.str]:
        """
        The list of IP address or CIDR block which can be accessed to the
        VPC endpoint.
        If not created, an empty list is returned.
        This field is displayed when creating an endpoint connected to an **interface** type endpoint service.
        Array length: **1** - **1000**.
        """
        return pulumi.get(self, "whitelists")


@pulumi.output_type
class GetPublicServicesServiceResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 is_charge: _builtins.bool,
                 owner: _builtins.str,
                 service_name: _builtins.str,
                 service_type: _builtins.str):
        """
        :param _builtins.str id: The unique ID of the public VPC endpoint service.
        :param _builtins.bool is_charge: Indicates whether the associated VPC endpoint carries a charge.
        :param _builtins.str owner: The owner of the VPC endpoint service.
        :param _builtins.str service_name: Specifies the name of the public VPC endpoint service. The value is not
               case-sensitive and supports fuzzy match.
        :param _builtins.str service_type: The type of the VPC endpoint service.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_charge", is_charge)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "service_type", service_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique ID of the public VPC endpoint service.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCharge")
    def is_charge(self) -> _builtins.bool:
        """
        Indicates whether the associated VPC endpoint carries a charge.
        """
        return pulumi.get(self, "is_charge")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        The owner of the VPC endpoint service.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        Specifies the name of the public VPC endpoint service. The value is not
        case-sensitive and supports fuzzy match.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        The type of the VPC endpoint service.
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int quota: The number of available quotas.
        :param _builtins.str type: Specifies the resource type.
               The value can be **endpoint_service** or **endpoint**.
        :param _builtins.int used: The number of used quotas.
        """
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        The number of available quotas.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the resource type.
        The value can be **endpoint_service** or **endpoint**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The number of used quotas.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetServiceConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 endpoint_id: _builtins.str,
                 marker_id: _builtins.int,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of VPC endpoint.
        :param _builtins.str description: The description of the VPC endpoint connection.
        :param _builtins.str domain_id: The Domain ID.
        :param _builtins.str endpoint_id: Specifies the ID of VPC endpoint which has connected to
               VPC endpoint service.
        :param _builtins.int marker_id: Specifies the packet ID of the VPC endpoint.
        :param _builtins.str status: Specifies the connection status of the VPC endpoint.
               The value can be **pendingAcceptance**, **accepted**, **rejected** and **failed**.
        :param _builtins.str updated_at: The latest update time of VPC endpoint.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "marker_id", marker_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of VPC endpoint.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the VPC endpoint connection.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The Domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> _builtins.str:
        """
        Specifies the ID of VPC endpoint which has connected to
        VPC endpoint service.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter(name="markerId")
    def marker_id(self) -> _builtins.int:
        """
        Specifies the packet ID of the VPC endpoint.
        """
        return pulumi.get(self, "marker_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the connection status of the VPC endpoint.
        The value can be **pendingAcceptance**, **accepted**, **rejected** and **failed**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of VPC endpoint.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetServicePermissionsPermissionResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 permission: _builtins.str,
                 permission_id: _builtins.str,
                 permission_type: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of VPC endpoint permission.
        :param _builtins.str permission: Specifies the account or organization to access the VPC endpoint service.
               The permission format is **iam:domain::domain_id** or **organizations:orgPath::org_path**.
        :param _builtins.str permission_id: The ID of permission.
        :param _builtins.str permission_type: The permission type of the VPC endpoint service. The value can be **domainId** or **orgPath**.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "permission_id", permission_id)
        pulumi.set(__self__, "permission_type", permission_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of VPC endpoint permission.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def permission(self) -> _builtins.str:
        """
        Specifies the account or organization to access the VPC endpoint service.
        The permission format is **iam:domain::domain_id** or **organizations:orgPath::org_path**.
        """
        return pulumi.get(self, "permission")

    @_builtins.property
    @pulumi.getter(name="permissionId")
    def permission_id(self) -> _builtins.str:
        """
        The ID of permission.
        """
        return pulumi.get(self, "permission_id")

    @_builtins.property
    @pulumi.getter(name="permissionType")
    def permission_type(self) -> _builtins.str:
        """
        The permission type of the VPC endpoint service. The value can be **domainId** or **orgPath**.
        """
        return pulumi.get(self, "permission_type")


@pulumi.output_type
class GetServicesEndpointServiceResult(dict):
    def __init__(__self__, *,
                 approval_enabled: _builtins.bool,
                 connection_count: _builtins.int,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enable_policy: _builtins.bool,
                 id: _builtins.str,
                 public_border_group: _builtins.str,
                 server_type: _builtins.str,
                 service_name: _builtins.str,
                 service_type: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 tcp_proxy: _builtins.str,
                 updated_at: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.bool approval_enabled: Whether connection approval is required. The default value is false.
        :param _builtins.int connection_count: The number of VPC endpoints that are in the Creating or Accepted status.
        :param _builtins.str created_at: The creation time of VPC endpoint service.
        :param _builtins.str description: The description of the VPC endpoint service.
        :param _builtins.bool enable_policy: Whether the VPC endpoint policy is enabled. Defaults to **false**.
        :param _builtins.str id: The ID of VPC endpoint service.
        :param _builtins.str public_border_group: Specifies the information about Public Border Group of the pool
               corresponding to the VPC endpoint service.
        :param _builtins.str server_type: Specifies the backend resource type. The valid values are as follows:
               + **VM**: Indicates the cloud server, which can be used as a server.
               + **LB**: Indicates the shared load balancer, which is applicable to services with high access traffic and services.
        :param _builtins.str service_name: Specifies the full name of the VPC endpoint service.
        :param _builtins.str service_type: The type of VPC endpoint service.
        :param _builtins.str status: Specifies the status of the VPC endpoint service.
               The value can be **available** or **failed**.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the VPC endpoint service.
        :param _builtins.str tcp_proxy: Whether the client information, such as IP address, port number and marker_id, is
               transmitted to the server.
        :param _builtins.str updated_at: The latest update time of VPC endpoint service.
        :param _builtins.str vpc_id: The ID of the VPC to which the backend resource of the VPC endpoint service belongs.
        """
        pulumi.set(__self__, "approval_enabled", approval_enabled)
        pulumi.set(__self__, "connection_count", connection_count)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable_policy", enable_policy)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "server_type", server_type)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tcp_proxy", tcp_proxy)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="approvalEnabled")
    def approval_enabled(self) -> _builtins.bool:
        """
        Whether connection approval is required. The default value is false.
        """
        return pulumi.get(self, "approval_enabled")

    @_builtins.property
    @pulumi.getter(name="connectionCount")
    def connection_count(self) -> _builtins.int:
        """
        The number of VPC endpoints that are in the Creating or Accepted status.
        """
        return pulumi.get(self, "connection_count")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of VPC endpoint service.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the VPC endpoint service.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enablePolicy")
    def enable_policy(self) -> _builtins.bool:
        """
        Whether the VPC endpoint policy is enabled. Defaults to **false**.
        """
        return pulumi.get(self, "enable_policy")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of VPC endpoint service.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        Specifies the information about Public Border Group of the pool
        corresponding to the VPC endpoint service.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter(name="serverType")
    def server_type(self) -> _builtins.str:
        """
        Specifies the backend resource type. The valid values are as follows:
        + **VM**: Indicates the cloud server, which can be used as a server.
        + **LB**: Indicates the shared load balancer, which is applicable to services with high access traffic and services.
        """
        return pulumi.get(self, "server_type")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        Specifies the full name of the VPC endpoint service.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        The type of VPC endpoint service.
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the VPC endpoint service.
        The value can be **available** or **failed**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the VPC endpoint service.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tcpProxy")
    def tcp_proxy(self) -> _builtins.str:
        """
        Whether the client information, such as IP address, port number and marker_id, is
        transmitted to the server.
        """
        return pulumi.get(self, "tcp_proxy")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of VPC endpoint service.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the VPC to which the backend resource of the VPC endpoint service belongs.
        """
        return pulumi.get(self, "vpc_id")


