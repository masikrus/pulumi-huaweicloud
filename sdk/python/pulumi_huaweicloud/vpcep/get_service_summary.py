# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetServiceSummaryResult',
    'AwaitableGetServiceSummaryResult',
    'get_service_summary',
    'get_service_summary_output',
]

@pulumi.output_type
class GetServiceSummaryResult:
    """
    A collection of values returned by getServiceSummary.
    """
    def __init__(__self__, created_at=None, enable_policy=None, endpoint_service_id=None, endpoint_service_name=None, id=None, is_charge=None, public_border_group=None, region=None, service_name=None, service_type=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if enable_policy and not isinstance(enable_policy, bool):
            raise TypeError("Expected argument 'enable_policy' to be a bool")
        pulumi.set(__self__, "enable_policy", enable_policy)
        if endpoint_service_id and not isinstance(endpoint_service_id, str):
            raise TypeError("Expected argument 'endpoint_service_id' to be a str")
        pulumi.set(__self__, "endpoint_service_id", endpoint_service_id)
        if endpoint_service_name and not isinstance(endpoint_service_name, str):
            raise TypeError("Expected argument 'endpoint_service_name' to be a str")
        pulumi.set(__self__, "endpoint_service_name", endpoint_service_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_charge and not isinstance(is_charge, bool):
            raise TypeError("Expected argument 'is_charge' to be a bool")
        pulumi.set(__self__, "is_charge", is_charge)
        if public_border_group and not isinstance(public_border_group, str):
            raise TypeError("Expected argument 'public_border_group' to be a str")
        pulumi.set(__self__, "public_border_group", public_border_group)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        pulumi.set(__self__, "service_type", service_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the VPC endpoint service, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enablePolicy")
    def enable_policy(self) -> _builtins.bool:
        """
        Whether the VPC endpoint policy can be customized.
        """
        return pulumi.get(self, "enable_policy")

    @_builtins.property
    @pulumi.getter(name="endpointServiceId")
    def endpoint_service_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_service_id")

    @_builtins.property
    @pulumi.getter(name="endpointServiceName")
    def endpoint_service_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_service_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCharge")
    def is_charge(self) -> _builtins.bool:
        """
        Whether the VPC endpoint connected to the VPC endpoint service is charged.
        """
        return pulumi.get(self, "is_charge")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        The public border group information about the pool corresponding to the VPC endpoint.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The name of the VPC endpoint service.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        The type of the VPC endpoint service.
        """
        return pulumi.get(self, "service_type")


class AwaitableGetServiceSummaryResult(GetServiceSummaryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceSummaryResult(
            created_at=self.created_at,
            enable_policy=self.enable_policy,
            endpoint_service_id=self.endpoint_service_id,
            endpoint_service_name=self.endpoint_service_name,
            id=self.id,
            is_charge=self.is_charge,
            public_border_group=self.public_border_group,
            region=self.region,
            service_name=self.service_name,
            service_type=self.service_type)


def get_service_summary(endpoint_service_id: Optional[_builtins.str] = None,
                        endpoint_service_name: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceSummaryResult:
    """
    Use this data source to get a VPC endpoint service summary information.

    > This data source allows current user query the summary information about VPC endpoint service created even if
      it belongs to other users or the system.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    endpoint_service_name = config.require_object("endpointServiceName")
    test = huaweicloud.Vpcep.get_service_summary(endpoint_service_name=endpoint_service_name)
    ```


    :param _builtins.str endpoint_service_id: Specifies the ID of the VPC endpoint service.
    :param _builtins.str endpoint_service_name: Specifies the name of the VPC endpoint service.
           
           > Exactly one of `endpoint_service_id` or `endpoint_service_name` must be set.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['endpointServiceId'] = endpoint_service_id
    __args__['endpointServiceName'] = endpoint_service_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpcep/getServiceSummary:getServiceSummary', __args__, opts=opts, typ=GetServiceSummaryResult).value

    return AwaitableGetServiceSummaryResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        enable_policy=pulumi.get(__ret__, 'enable_policy'),
        endpoint_service_id=pulumi.get(__ret__, 'endpoint_service_id'),
        endpoint_service_name=pulumi.get(__ret__, 'endpoint_service_name'),
        id=pulumi.get(__ret__, 'id'),
        is_charge=pulumi.get(__ret__, 'is_charge'),
        public_border_group=pulumi.get(__ret__, 'public_border_group'),
        region=pulumi.get(__ret__, 'region'),
        service_name=pulumi.get(__ret__, 'service_name'),
        service_type=pulumi.get(__ret__, 'service_type'))
def get_service_summary_output(endpoint_service_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               endpoint_service_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceSummaryResult]:
    """
    Use this data source to get a VPC endpoint service summary information.

    > This data source allows current user query the summary information about VPC endpoint service created even if
      it belongs to other users or the system.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    endpoint_service_name = config.require_object("endpointServiceName")
    test = huaweicloud.Vpcep.get_service_summary(endpoint_service_name=endpoint_service_name)
    ```


    :param _builtins.str endpoint_service_id: Specifies the ID of the VPC endpoint service.
    :param _builtins.str endpoint_service_name: Specifies the name of the VPC endpoint service.
           
           > Exactly one of `endpoint_service_id` or `endpoint_service_name` must be set.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['endpointServiceId'] = endpoint_service_id
    __args__['endpointServiceName'] = endpoint_service_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpcep/getServiceSummary:getServiceSummary', __args__, opts=opts, typ=GetServiceSummaryResult)
    return __ret__.apply(lambda __response__: GetServiceSummaryResult(
        created_at=pulumi.get(__response__, 'created_at'),
        enable_policy=pulumi.get(__response__, 'enable_policy'),
        endpoint_service_id=pulumi.get(__response__, 'endpoint_service_id'),
        endpoint_service_name=pulumi.get(__response__, 'endpoint_service_name'),
        id=pulumi.get(__response__, 'id'),
        is_charge=pulumi.get(__response__, 'is_charge'),
        public_border_group=pulumi.get(__response__, 'public_border_group'),
        region=pulumi.get(__response__, 'region'),
        service_name=pulumi.get(__response__, 'service_name'),
        service_type=pulumi.get(__response__, 'service_type')))
