# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEndpointsResult',
    'AwaitableGetEndpointsResult',
    'get_endpoints',
    'get_endpoints_output',
]

@pulumi.output_type
class GetEndpointsResult:
    """
    A collection of values returned by getEndpoints.
    """
    def __init__(__self__, endpoint_id=None, endpoints=None, id=None, region=None, service_name=None, vpc_id=None):
        if endpoint_id and not isinstance(endpoint_id, str):
            raise TypeError("Expected argument 'endpoint_id' to be a str")
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        if endpoints and not isinstance(endpoints, list):
            raise TypeError("Expected argument 'endpoints' to be a list")
        pulumi.set(__self__, "endpoints", endpoints)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetEndpointsEndpointResult']:
        """
        A list of VPC endpoints.
        """
        return pulumi.get(self, "endpoints")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[_builtins.str]:
        """
        The name of the VPC endpoint service.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        """
        The ID of the VPC where the endpoint is created.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetEndpointsResult(GetEndpointsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEndpointsResult(
            endpoint_id=self.endpoint_id,
            endpoints=self.endpoints,
            id=self.id,
            region=self.region,
            service_name=self.service_name,
            vpc_id=self.vpc_id)


def get_endpoints(endpoint_id: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  service_name: Optional[_builtins.str] = None,
                  vpc_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEndpointsResult:
    """
    Use this data source to get a list of VPC endpoints.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    service_name = config.require_object("serviceName")
    endpoint_id = config.require_object("endpointId")
    endpoints = huaweicloud.Vpcep.get_endpoints(service_name=service_name,
        endpoint_id=endpoint_id)
    ```


    :param _builtins.str endpoint_id: The ID of the VPC endpoint.
    :param _builtins.str region: The region in which to query the VPC endpoints.
           If omitted, the provider-level region will be used.
    :param _builtins.str service_name: The name of the VPC endpoint service.
    :param _builtins.str vpc_id: The ID of the VPC where the endpoint is created.
    """
    __args__ = dict()
    __args__['endpointId'] = endpoint_id
    __args__['region'] = region
    __args__['serviceName'] = service_name
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpcep/getEndpoints:getEndpoints', __args__, opts=opts, typ=GetEndpointsResult).value

    return AwaitableGetEndpointsResult(
        endpoint_id=pulumi.get(__ret__, 'endpoint_id'),
        endpoints=pulumi.get(__ret__, 'endpoints'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        service_name=pulumi.get(__ret__, 'service_name'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_endpoints_output(endpoint_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         service_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         vpc_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEndpointsResult]:
    """
    Use this data source to get a list of VPC endpoints.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    service_name = config.require_object("serviceName")
    endpoint_id = config.require_object("endpointId")
    endpoints = huaweicloud.Vpcep.get_endpoints(service_name=service_name,
        endpoint_id=endpoint_id)
    ```


    :param _builtins.str endpoint_id: The ID of the VPC endpoint.
    :param _builtins.str region: The region in which to query the VPC endpoints.
           If omitted, the provider-level region will be used.
    :param _builtins.str service_name: The name of the VPC endpoint service.
    :param _builtins.str vpc_id: The ID of the VPC where the endpoint is created.
    """
    __args__ = dict()
    __args__['endpointId'] = endpoint_id
    __args__['region'] = region
    __args__['serviceName'] = service_name
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpcep/getEndpoints:getEndpoints', __args__, opts=opts, typ=GetEndpointsResult)
    return __ret__.apply(lambda __response__: GetEndpointsResult(
        endpoint_id=pulumi.get(__response__, 'endpoint_id'),
        endpoints=pulumi.get(__response__, 'endpoints'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        service_name=pulumi.get(__response__, 'service_name'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))
