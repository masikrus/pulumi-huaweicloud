# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetWorkloadPlansResult',
    'AwaitableGetWorkloadPlansResult',
    'get_workload_plans',
    'get_workload_plans_output',
]

@pulumi.output_type
class GetWorkloadPlansResult:
    """
    A collection of values returned by getWorkloadPlans.
    """
    def __init__(__self__, cluster_id=None, id=None, logical_cluster_name=None, plans=None, region=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if logical_cluster_name and not isinstance(logical_cluster_name, str):
            raise TypeError("Expected argument 'logical_cluster_name' to be a str")
        pulumi.set(__self__, "logical_cluster_name", logical_cluster_name)
        if plans and not isinstance(plans, list):
            raise TypeError("Expected argument 'plans' to be a list")
        pulumi.set(__self__, "plans", plans)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        The cluster ID to which the workload plan belongs.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logicalClusterName")
    def logical_cluster_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "logical_cluster_name")

    @_builtins.property
    @pulumi.getter
    def plans(self) -> Sequence['outputs.GetWorkloadPlansPlanResult']:
        """
        All workload plans that match the filter parameters.
        """
        return pulumi.get(self, "plans")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetWorkloadPlansResult(GetWorkloadPlansResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkloadPlansResult(
            cluster_id=self.cluster_id,
            id=self.id,
            logical_cluster_name=self.logical_cluster_name,
            plans=self.plans,
            region=self.region)


def get_workload_plans(cluster_id: Optional[_builtins.str] = None,
                       logical_cluster_name: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkloadPlansResult:
    """
    Using this data source to query the list of workload plans within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Dws.get_workload_plans(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the DWS cluster ID to which the workload plans belong.
    :param _builtins.str logical_cluster_name: Specifies the logical cluster name to which the workload plans belong.
           This parameter is only available when the DWS cluster is logical cluster.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['logicalClusterName'] = logical_cluster_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dws/getWorkloadPlans:getWorkloadPlans', __args__, opts=opts, typ=GetWorkloadPlansResult).value

    return AwaitableGetWorkloadPlansResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        logical_cluster_name=pulumi.get(__ret__, 'logical_cluster_name'),
        plans=pulumi.get(__ret__, 'plans'),
        region=pulumi.get(__ret__, 'region'))
def get_workload_plans_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                              logical_cluster_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkloadPlansResult]:
    """
    Using this data source to query the list of workload plans within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Dws.get_workload_plans(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the DWS cluster ID to which the workload plans belong.
    :param _builtins.str logical_cluster_name: Specifies the logical cluster name to which the workload plans belong.
           This parameter is only available when the DWS cluster is logical cluster.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['logicalClusterName'] = logical_cluster_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dws/getWorkloadPlans:getWorkloadPlans', __args__, opts=opts, typ=GetWorkloadPlansResult)
    return __ret__.apply(lambda __response__: GetWorkloadPlansResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        logical_cluster_name=pulumi.get(__response__, 'logical_cluster_name'),
        plans=pulumi.get(__response__, 'plans'),
        region=pulumi.get(__response__, 'region')))
