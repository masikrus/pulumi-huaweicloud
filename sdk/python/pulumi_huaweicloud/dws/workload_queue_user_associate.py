# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['WorkloadQueueUserAssociateArgs', 'WorkloadQueueUserAssociate']

@pulumi.input_type
class WorkloadQueueUserAssociateArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 queue_name: pulumi.Input[_builtins.str],
                 user_names: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a WorkloadQueueUserAssociate resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] queue_name: Specifies the workload queue name to associate with the users.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_names: Specifies the user names bound to the workload queue.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "queue_name", queue_name)
        pulumi.set(__self__, "user_names", user_names)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DWS cluster ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workload queue name to associate with the users.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "queue_name", value)

    @_builtins.property
    @pulumi.getter(name="userNames")
    def user_names(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the user names bound to the workload queue.
        """
        return pulumi.get(self, "user_names")

    @user_names.setter
    def user_names(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "user_names", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _WorkloadQueueUserAssociateState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 user_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering WorkloadQueueUserAssociate resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] queue_name: Specifies the workload queue name to associate with the users.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_names: Specifies the user names bound to the workload queue.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if user_names is not None:
            pulumi.set(__self__, "user_names", user_names)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DWS cluster ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workload queue name to associate with the users.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="userNames")
    def user_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the user names bound to the workload queue.
        """
        return pulumi.get(self, "user_names")

    @user_names.setter
    def user_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "user_names", value)


@pulumi.type_token("huaweicloud:Dws/workloadQueueUserAssociate:WorkloadQueueUserAssociate")
class WorkloadQueueUserAssociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 user_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Use this resource to bind the users to the workload queue within HuaweiCloud.

        > A user can only be associated with one workload queue.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        dws_cluster_id = config.require_object("dwsClusterId")
        workload_queue_name = config.require_object("workloadQueueName")
        associated_user_names = config.require_object("associatedUserNames")
        test = huaweicloud.dws.WorkloadQueueUserAssociate("test",
            cluster_id=dws_cluster_id,
            queue_name=workload_queue_name,
            user_names=associated_user_names)
        ```

        ## Import

        The resource can be imported using `cluster_id` and `queue_name` (also `id`), separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/workloadQueueUserAssociate:WorkloadQueueUserAssociate test <cluster_id>/<queue_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] queue_name: Specifies the workload queue name to associate with the users.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_names: Specifies the user names bound to the workload queue.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkloadQueueUserAssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to bind the users to the workload queue within HuaweiCloud.

        > A user can only be associated with one workload queue.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        dws_cluster_id = config.require_object("dwsClusterId")
        workload_queue_name = config.require_object("workloadQueueName")
        associated_user_names = config.require_object("associatedUserNames")
        test = huaweicloud.dws.WorkloadQueueUserAssociate("test",
            cluster_id=dws_cluster_id,
            queue_name=workload_queue_name,
            user_names=associated_user_names)
        ```

        ## Import

        The resource can be imported using `cluster_id` and `queue_name` (also `id`), separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/workloadQueueUserAssociate:WorkloadQueueUserAssociate test <cluster_id>/<queue_name>
        ```

        :param str resource_name: The name of the resource.
        :param WorkloadQueueUserAssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkloadQueueUserAssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 user_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkloadQueueUserAssociateArgs.__new__(WorkloadQueueUserAssociateArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if queue_name is None and not opts.urn:
                raise TypeError("Missing required property 'queue_name'")
            __props__.__dict__["queue_name"] = queue_name
            __props__.__dict__["region"] = region
            if user_names is None and not opts.urn:
                raise TypeError("Missing required property 'user_names'")
            __props__.__dict__["user_names"] = user_names
        super(WorkloadQueueUserAssociate, __self__).__init__(
            'huaweicloud:Dws/workloadQueueUserAssociate:WorkloadQueueUserAssociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            queue_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            user_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'WorkloadQueueUserAssociate':
        """
        Get an existing WorkloadQueueUserAssociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] queue_name: Specifies the workload queue name to associate with the users.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_names: Specifies the user names bound to the workload queue.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkloadQueueUserAssociateState.__new__(_WorkloadQueueUserAssociateState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["queue_name"] = queue_name
        __props__.__dict__["region"] = region
        __props__.__dict__["user_names"] = user_names
        return WorkloadQueueUserAssociate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DWS cluster ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workload queue name to associate with the users.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "queue_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="userNames")
    def user_names(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the user names bound to the workload queue.
        """
        return pulumi.get(self, "user_names")

