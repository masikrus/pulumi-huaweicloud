# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogicalClusterArgs', 'LogicalCluster']

@pulumi.input_type
class LogicalClusterArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 cluster_rings: pulumi.Input[Sequence[pulumi.Input['LogicalClusterClusterRingArgs']]],
                 logical_cluster_name: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LogicalCluster resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['LogicalClusterClusterRingArgs']]] cluster_rings: Specifies the DWS logical cluster ring list information.
               Changing this parameter will create a new resource.
               The cluster_rings structure is documented below.
               
               <a name="LogicalCluster_ClusterRings"></a>
               The `cluster_rings` block supports:
        :param pulumi.Input[_builtins.str] logical_cluster_name: Specifies the logical cluster name. Changing this parameter will
               create a new resource. Only letters, digits, and underscores (_) are allowed. The maximum length is 63 characters.
               The name must be unique and cannot be the keywords `group_version1`, `group_version2`, `group_version3`,
               `installation`, `elastic_group`, `optimal`, and `query`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_rings", cluster_rings)
        pulumi.set(__self__, "logical_cluster_name", logical_cluster_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DWS cluster ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterRings")
    def cluster_rings(self) -> pulumi.Input[Sequence[pulumi.Input['LogicalClusterClusterRingArgs']]]:
        """
        Specifies the DWS logical cluster ring list information.
        Changing this parameter will create a new resource.
        The cluster_rings structure is documented below.

        <a name="LogicalCluster_ClusterRings"></a>
        The `cluster_rings` block supports:
        """
        return pulumi.get(self, "cluster_rings")

    @cluster_rings.setter
    def cluster_rings(self, value: pulumi.Input[Sequence[pulumi.Input['LogicalClusterClusterRingArgs']]]):
        pulumi.set(self, "cluster_rings", value)

    @_builtins.property
    @pulumi.getter(name="logicalClusterName")
    def logical_cluster_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the logical cluster name. Changing this parameter will
        create a new resource. Only letters, digits, and underscores (_) are allowed. The maximum length is 63 characters.
        The name must be unique and cannot be the keywords `group_version1`, `group_version2`, `group_version3`,
        `installation`, `elastic_group`, `optimal`, and `query`.
        """
        return pulumi.get(self, "logical_cluster_name")

    @logical_cluster_name.setter
    def logical_cluster_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "logical_cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LogicalClusterState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_rings: Optional[pulumi.Input[Sequence[pulumi.Input['LogicalClusterClusterRingArgs']]]] = None,
                 delete_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 edit_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 first_logical_cluster: Optional[pulumi.Input[_builtins.bool]] = None,
                 logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 restart_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogicalCluster resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['LogicalClusterClusterRingArgs']]] cluster_rings: Specifies the DWS logical cluster ring list information.
               Changing this parameter will create a new resource.
               The cluster_rings structure is documented below.
               
               <a name="LogicalCluster_ClusterRings"></a>
               The `cluster_rings` block supports:
        :param pulumi.Input[_builtins.bool] delete_enable: Whether deletion is allowed.
        :param pulumi.Input[_builtins.bool] edit_enable: Whether editing is allowed.
        :param pulumi.Input[_builtins.bool] first_logical_cluster: Whether it is the first logical cluster. The first logical cluster cannot be deleted.
        :param pulumi.Input[_builtins.str] logical_cluster_name: Specifies the logical cluster name. Changing this parameter will
               create a new resource. Only letters, digits, and underscores (_) are allowed. The maximum length is 63 characters.
               The name must be unique and cannot be the keywords `group_version1`, `group_version2`, `group_version3`,
               `installation`, `elastic_group`, `optimal`, and `query`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] restart_enable: Whether to allow restart.
        :param pulumi.Input[_builtins.str] status: The DWS logical cluster status.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_rings is not None:
            pulumi.set(__self__, "cluster_rings", cluster_rings)
        if delete_enable is not None:
            pulumi.set(__self__, "delete_enable", delete_enable)
        if edit_enable is not None:
            pulumi.set(__self__, "edit_enable", edit_enable)
        if first_logical_cluster is not None:
            pulumi.set(__self__, "first_logical_cluster", first_logical_cluster)
        if logical_cluster_name is not None:
            pulumi.set(__self__, "logical_cluster_name", logical_cluster_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if restart_enable is not None:
            pulumi.set(__self__, "restart_enable", restart_enable)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DWS cluster ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterRings")
    def cluster_rings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogicalClusterClusterRingArgs']]]]:
        """
        Specifies the DWS logical cluster ring list information.
        Changing this parameter will create a new resource.
        The cluster_rings structure is documented below.

        <a name="LogicalCluster_ClusterRings"></a>
        The `cluster_rings` block supports:
        """
        return pulumi.get(self, "cluster_rings")

    @cluster_rings.setter
    def cluster_rings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogicalClusterClusterRingArgs']]]]):
        pulumi.set(self, "cluster_rings", value)

    @_builtins.property
    @pulumi.getter(name="deleteEnable")
    def delete_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether deletion is allowed.
        """
        return pulumi.get(self, "delete_enable")

    @delete_enable.setter
    def delete_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_enable", value)

    @_builtins.property
    @pulumi.getter(name="editEnable")
    def edit_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether editing is allowed.
        """
        return pulumi.get(self, "edit_enable")

    @edit_enable.setter
    def edit_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "edit_enable", value)

    @_builtins.property
    @pulumi.getter(name="firstLogicalCluster")
    def first_logical_cluster(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether it is the first logical cluster. The first logical cluster cannot be deleted.
        """
        return pulumi.get(self, "first_logical_cluster")

    @first_logical_cluster.setter
    def first_logical_cluster(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "first_logical_cluster", value)

    @_builtins.property
    @pulumi.getter(name="logicalClusterName")
    def logical_cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the logical cluster name. Changing this parameter will
        create a new resource. Only letters, digits, and underscores (_) are allowed. The maximum length is 63 characters.
        The name must be unique and cannot be the keywords `group_version1`, `group_version2`, `group_version3`,
        `installation`, `elastic_group`, `optimal`, and `query`.
        """
        return pulumi.get(self, "logical_cluster_name")

    @logical_cluster_name.setter
    def logical_cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logical_cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="restartEnable")
    def restart_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to allow restart.
        """
        return pulumi.get(self, "restart_enable")

    @restart_enable.setter
    def restart_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "restart_enable", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DWS logical cluster status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:Dws/logicalCluster:LogicalCluster")
class LogicalCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_rings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogicalClusterClusterRingArgs', 'LogicalClusterClusterRingArgsDict']]]]] = None,
                 logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB(DWS) logical cluster resource within HuaweiCloud.

        > **NOTE:** The first DWS logical cluster can't be deleted. When performing a delete operation, the resource will only
        be removed from the state, but it remains in the cloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        ring_hosts = config.require_object("ringHosts")
        test = huaweicloud.dws.LogicalCluster("test",
            cluster_rings=[{
                "ring_hosts": [{
                    "host_name": entry["value"]["hostName"],
                    "back_ip": entry["value"]["backIp"],
                    "cpu_cores": entry["value"]["cpuCores"],
                    "memory": entry["value"]["memory"],
                    "disk_size": entry["value"]["diskSize"],
                } for entry in [{"key": k, "value": v} for k, v in ring_hosts]],
            }],
            logical_cluster_name="test_name",
            cluster_id=cluster_id)
        ```

        ## Import

        The DWS logical cluster resource can be imported using the `cluster_id` and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/logicalCluster:LogicalCluster test <cluster_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogicalClusterClusterRingArgs', 'LogicalClusterClusterRingArgsDict']]]] cluster_rings: Specifies the DWS logical cluster ring list information.
               Changing this parameter will create a new resource.
               The cluster_rings structure is documented below.
               
               <a name="LogicalCluster_ClusterRings"></a>
               The `cluster_rings` block supports:
        :param pulumi.Input[_builtins.str] logical_cluster_name: Specifies the logical cluster name. Changing this parameter will
               create a new resource. Only letters, digits, and underscores (_) are allowed. The maximum length is 63 characters.
               The name must be unique and cannot be the keywords `group_version1`, `group_version2`, `group_version3`,
               `installation`, `elastic_group`, `optimal`, and `query`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogicalClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB(DWS) logical cluster resource within HuaweiCloud.

        > **NOTE:** The first DWS logical cluster can't be deleted. When performing a delete operation, the resource will only
        be removed from the state, but it remains in the cloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        ring_hosts = config.require_object("ringHosts")
        test = huaweicloud.dws.LogicalCluster("test",
            cluster_rings=[{
                "ring_hosts": [{
                    "host_name": entry["value"]["hostName"],
                    "back_ip": entry["value"]["backIp"],
                    "cpu_cores": entry["value"]["cpuCores"],
                    "memory": entry["value"]["memory"],
                    "disk_size": entry["value"]["diskSize"],
                } for entry in [{"key": k, "value": v} for k, v in ring_hosts]],
            }],
            logical_cluster_name="test_name",
            cluster_id=cluster_id)
        ```

        ## Import

        The DWS logical cluster resource can be imported using the `cluster_id` and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/logicalCluster:LogicalCluster test <cluster_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param LogicalClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogicalClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_rings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogicalClusterClusterRingArgs', 'LogicalClusterClusterRingArgsDict']]]]] = None,
                 logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogicalClusterArgs.__new__(LogicalClusterArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if cluster_rings is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_rings'")
            __props__.__dict__["cluster_rings"] = cluster_rings
            if logical_cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'logical_cluster_name'")
            __props__.__dict__["logical_cluster_name"] = logical_cluster_name
            __props__.__dict__["region"] = region
            __props__.__dict__["delete_enable"] = None
            __props__.__dict__["edit_enable"] = None
            __props__.__dict__["first_logical_cluster"] = None
            __props__.__dict__["restart_enable"] = None
            __props__.__dict__["status"] = None
        super(LogicalCluster, __self__).__init__(
            'huaweicloud:Dws/logicalCluster:LogicalCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_rings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogicalClusterClusterRingArgs', 'LogicalClusterClusterRingArgsDict']]]]] = None,
            delete_enable: Optional[pulumi.Input[_builtins.bool]] = None,
            edit_enable: Optional[pulumi.Input[_builtins.bool]] = None,
            first_logical_cluster: Optional[pulumi.Input[_builtins.bool]] = None,
            logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            restart_enable: Optional[pulumi.Input[_builtins.bool]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogicalCluster':
        """
        Get an existing LogicalCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogicalClusterClusterRingArgs', 'LogicalClusterClusterRingArgsDict']]]] cluster_rings: Specifies the DWS logical cluster ring list information.
               Changing this parameter will create a new resource.
               The cluster_rings structure is documented below.
               
               <a name="LogicalCluster_ClusterRings"></a>
               The `cluster_rings` block supports:
        :param pulumi.Input[_builtins.bool] delete_enable: Whether deletion is allowed.
        :param pulumi.Input[_builtins.bool] edit_enable: Whether editing is allowed.
        :param pulumi.Input[_builtins.bool] first_logical_cluster: Whether it is the first logical cluster. The first logical cluster cannot be deleted.
        :param pulumi.Input[_builtins.str] logical_cluster_name: Specifies the logical cluster name. Changing this parameter will
               create a new resource. Only letters, digits, and underscores (_) are allowed. The maximum length is 63 characters.
               The name must be unique and cannot be the keywords `group_version1`, `group_version2`, `group_version3`,
               `installation`, `elastic_group`, `optimal`, and `query`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] restart_enable: Whether to allow restart.
        :param pulumi.Input[_builtins.str] status: The DWS logical cluster status.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogicalClusterState.__new__(_LogicalClusterState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_rings"] = cluster_rings
        __props__.__dict__["delete_enable"] = delete_enable
        __props__.__dict__["edit_enable"] = edit_enable
        __props__.__dict__["first_logical_cluster"] = first_logical_cluster
        __props__.__dict__["logical_cluster_name"] = logical_cluster_name
        __props__.__dict__["region"] = region
        __props__.__dict__["restart_enable"] = restart_enable
        __props__.__dict__["status"] = status
        return LogicalCluster(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DWS cluster ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterRings")
    def cluster_rings(self) -> pulumi.Output[Sequence['outputs.LogicalClusterClusterRing']]:
        """
        Specifies the DWS logical cluster ring list information.
        Changing this parameter will create a new resource.
        The cluster_rings structure is documented below.

        <a name="LogicalCluster_ClusterRings"></a>
        The `cluster_rings` block supports:
        """
        return pulumi.get(self, "cluster_rings")

    @_builtins.property
    @pulumi.getter(name="deleteEnable")
    def delete_enable(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether deletion is allowed.
        """
        return pulumi.get(self, "delete_enable")

    @_builtins.property
    @pulumi.getter(name="editEnable")
    def edit_enable(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether editing is allowed.
        """
        return pulumi.get(self, "edit_enable")

    @_builtins.property
    @pulumi.getter(name="firstLogicalCluster")
    def first_logical_cluster(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether it is the first logical cluster. The first logical cluster cannot be deleted.
        """
        return pulumi.get(self, "first_logical_cluster")

    @_builtins.property
    @pulumi.getter(name="logicalClusterName")
    def logical_cluster_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the logical cluster name. Changing this parameter will
        create a new resource. Only letters, digits, and underscores (_) are allowed. The maximum length is 63 characters.
        The name must be unique and cannot be the keywords `group_version1`, `group_version2`, `group_version3`,
        `installation`, `elastic_group`, `optimal`, and `query`.
        """
        return pulumi.get(self, "logical_cluster_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="restartEnable")
    def restart_enable(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to allow restart.
        """
        return pulumi.get(self, "restart_enable")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The DWS logical cluster status.
        """
        return pulumi.get(self, "status")

