# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkloadQueueArgs', 'WorkloadQueue']

@pulumi.input_type
class WorkloadQueueArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 configurations: pulumi.Input[Sequence[pulumi.Input['WorkloadQueueConfigurationArgs']]],
                 logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a WorkloadQueue resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID of to which the workload queue belongs.
               Changing this parameter will create a new resource.
               
               > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadQueueConfigurationArgs']]] configurations: Specifies the configuration information for workload queue.
               Changing this parameter will create a new resource.
               The configuration structure is documented below.
               
               <a name="DWS_workloadQueue_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the workload queue, which must be unique and contains
               `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
               lowercase letter. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "configurations", configurations)
        if logical_cluster_name is not None:
            pulumi.set(__self__, "logical_cluster_name", logical_cluster_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cluster ID of to which the workload queue belongs.
        Changing this parameter will create a new resource.

        > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> pulumi.Input[Sequence[pulumi.Input['WorkloadQueueConfigurationArgs']]]:
        """
        Specifies the configuration information for workload queue.
        Changing this parameter will create a new resource.
        The configuration structure is documented below.

        <a name="DWS_workloadQueue_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: pulumi.Input[Sequence[pulumi.Input['WorkloadQueueConfigurationArgs']]]):
        pulumi.set(self, "configurations", value)

    @_builtins.property
    @pulumi.getter(name="logicalClusterName")
    def logical_cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logical_cluster_name")

    @logical_cluster_name.setter
    def logical_cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logical_cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the workload queue, which must be unique and contains
        `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
        lowercase letter. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _WorkloadQueueState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadQueueConfigurationArgs']]]] = None,
                 logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering WorkloadQueue resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID of to which the workload queue belongs.
               Changing this parameter will create a new resource.
               
               > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadQueueConfigurationArgs']]] configurations: Specifies the configuration information for workload queue.
               Changing this parameter will create a new resource.
               The configuration structure is documented below.
               
               <a name="DWS_workloadQueue_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the workload queue, which must be unique and contains
               `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
               lowercase letter. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if logical_cluster_name is not None:
            pulumi.set(__self__, "logical_cluster_name", logical_cluster_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster ID of to which the workload queue belongs.
        Changing this parameter will create a new resource.

        > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadQueueConfigurationArgs']]]]:
        """
        Specifies the configuration information for workload queue.
        Changing this parameter will create a new resource.
        The configuration structure is documented below.

        <a name="DWS_workloadQueue_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadQueueConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @_builtins.property
    @pulumi.getter(name="logicalClusterName")
    def logical_cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logical_cluster_name")

    @logical_cluster_name.setter
    def logical_cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logical_cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the workload queue, which must be unique and contains
        `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
        lowercase letter. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Dws/workloadQueue:WorkloadQueue")
class WorkloadQueue(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WorkloadQueueConfigurationArgs', 'WorkloadQueueConfigurationArgsDict']]]]] = None,
                 logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB(DWS) workload queue resource within HuaweiCloud.

        ## Example Usage

        ### Create a workload queue with CPU exclusive quotas

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        queue_name = config.require_object("queueName")
        test = huaweicloud.dws.WorkloadQueue("test",
            cluster_id=cluster_id,
            name=queue_name,
            configurations=[
                {
                    "resource_name": "cpu_limit",
                    "resource_value": 10,
                },
                {
                    "resource_name": "memory",
                    "resource_value": 0,
                },
                {
                    "resource_name": "tablespace",
                    "resource_value": -1,
                },
                {
                    "resource_name": "activestatements",
                    "resource_value": -1,
                },
            ])
        ```

        ### Create a workload queue with CPU shared quotas

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        queue_name = config.require_object("queueName")
        test = huaweicloud.dws.WorkloadQueue("test",
            cluster_id=cluster_id,
            name=queue_name,
            configurations=[
                {
                    "resource_name": "cpu_share",
                    "resource_value": 10,
                },
                {
                    "resource_name": "memory",
                    "resource_value": 0,
                },
                {
                    "resource_name": "tablespace",
                    "resource_value": -1,
                },
                {
                    "resource_name": "activestatements",
                    "resource_value": -1,
                },
            ])
        ```

        ## Import

        The workload queue can be imported using `cluster_id` and `name`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/workloadQueue:WorkloadQueue test <cluster_id>/<name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `configuration`.

        It is generally recommended running `pulumi preview` after importing a workload queue.

        You can then decide if changes should be applied to the cluster, or the resource definition

        should be updated to align with the cluster. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dws_cluster" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              configuration,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID of to which the workload queue belongs.
               Changing this parameter will create a new resource.
               
               > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WorkloadQueueConfigurationArgs', 'WorkloadQueueConfigurationArgsDict']]]] configurations: Specifies the configuration information for workload queue.
               Changing this parameter will create a new resource.
               The configuration structure is documented below.
               
               <a name="DWS_workloadQueue_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the workload queue, which must be unique and contains
               `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
               lowercase letter. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkloadQueueArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB(DWS) workload queue resource within HuaweiCloud.

        ## Example Usage

        ### Create a workload queue with CPU exclusive quotas

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        queue_name = config.require_object("queueName")
        test = huaweicloud.dws.WorkloadQueue("test",
            cluster_id=cluster_id,
            name=queue_name,
            configurations=[
                {
                    "resource_name": "cpu_limit",
                    "resource_value": 10,
                },
                {
                    "resource_name": "memory",
                    "resource_value": 0,
                },
                {
                    "resource_name": "tablespace",
                    "resource_value": -1,
                },
                {
                    "resource_name": "activestatements",
                    "resource_value": -1,
                },
            ])
        ```

        ### Create a workload queue with CPU shared quotas

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        queue_name = config.require_object("queueName")
        test = huaweicloud.dws.WorkloadQueue("test",
            cluster_id=cluster_id,
            name=queue_name,
            configurations=[
                {
                    "resource_name": "cpu_share",
                    "resource_value": 10,
                },
                {
                    "resource_name": "memory",
                    "resource_value": 0,
                },
                {
                    "resource_name": "tablespace",
                    "resource_value": -1,
                },
                {
                    "resource_name": "activestatements",
                    "resource_value": -1,
                },
            ])
        ```

        ## Import

        The workload queue can be imported using `cluster_id` and `name`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/workloadQueue:WorkloadQueue test <cluster_id>/<name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `configuration`.

        It is generally recommended running `pulumi preview` after importing a workload queue.

        You can then decide if changes should be applied to the cluster, or the resource definition

        should be updated to align with the cluster. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dws_cluster" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              configuration,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param WorkloadQueueArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkloadQueueArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WorkloadQueueConfigurationArgs', 'WorkloadQueueConfigurationArgsDict']]]]] = None,
                 logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkloadQueueArgs.__new__(WorkloadQueueArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if configurations is None and not opts.urn:
                raise TypeError("Missing required property 'configurations'")
            __props__.__dict__["configurations"] = configurations
            __props__.__dict__["logical_cluster_name"] = logical_cluster_name
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
        super(WorkloadQueue, __self__).__init__(
            'huaweicloud:Dws/workloadQueue:WorkloadQueue',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WorkloadQueueConfigurationArgs', 'WorkloadQueueConfigurationArgsDict']]]]] = None,
            logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'WorkloadQueue':
        """
        Get an existing WorkloadQueue resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID of to which the workload queue belongs.
               Changing this parameter will create a new resource.
               
               > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WorkloadQueueConfigurationArgs', 'WorkloadQueueConfigurationArgsDict']]]] configurations: Specifies the configuration information for workload queue.
               Changing this parameter will create a new resource.
               The configuration structure is documented below.
               
               <a name="DWS_workloadQueue_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the workload queue, which must be unique and contains
               `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
               lowercase letter. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkloadQueueState.__new__(_WorkloadQueueState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["configurations"] = configurations
        __props__.__dict__["logical_cluster_name"] = logical_cluster_name
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        return WorkloadQueue(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster ID of to which the workload queue belongs.
        Changing this parameter will create a new resource.

        > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> pulumi.Output[Sequence['outputs.WorkloadQueueConfiguration']]:
        """
        Specifies the configuration information for workload queue.
        Changing this parameter will create a new resource.
        The configuration structure is documented below.

        <a name="DWS_workloadQueue_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter(name="logicalClusterName")
    def logical_cluster_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "logical_cluster_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the workload queue, which must be unique and contains
        `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
        lowercase letter. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

