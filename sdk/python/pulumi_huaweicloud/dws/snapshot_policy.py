# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SnapshotPolicyArgs', 'SnapshotPolicy']

@pulumi.input_type
class SnapshotPolicyArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 strategy: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SnapshotPolicy resource.
        :param pulumi.Input[_builtins.str] cluster_id: The cluster ID of which the automated snapshot policy belongs to.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] strategy: The strategy of the automated snapshot policy.  
               Its format is a Cron expression, which specifies when to create a snapshot.
               
               Changing this parameter will create a new resource.
               
               > Note: The UTC time is used by default. Set the policy based on the time zone and time difference as required.
        :param pulumi.Input[_builtins.str] type: The type of the automated snapshot policy.  
               The options are as follows:
               + **full**: A full snapshot backs up the data of an entire cluster.
               + **increment**: An incremental snapshot records the changes made after the previous snapshot was created.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the automated snapshot policy.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "strategy", strategy)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        The cluster ID of which the automated snapshot policy belongs to.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> pulumi.Input[_builtins.str]:
        """
        The strategy of the automated snapshot policy.  
        Its format is a Cron expression, which specifies when to create a snapshot.

        Changing this parameter will create a new resource.

        > Note: The UTC time is used by default. Set the policy based on the time zone and time difference as required.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "strategy", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the automated snapshot policy.  
        The options are as follows:
        + **full**: A full snapshot backs up the data of an entire cluster.
        + **increment**: An incremental snapshot records the changes made after the previous snapshot was created.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the automated snapshot policy.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _SnapshotPolicyState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SnapshotPolicy resources.
        :param pulumi.Input[_builtins.str] cluster_id: The cluster ID of which the automated snapshot policy belongs to.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the automated snapshot policy.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] strategy: The strategy of the automated snapshot policy.  
               Its format is a Cron expression, which specifies when to create a snapshot.
               
               Changing this parameter will create a new resource.
               
               > Note: The UTC time is used by default. Set the policy based on the time zone and time difference as required.
        :param pulumi.Input[_builtins.str] type: The type of the automated snapshot policy.  
               The options are as follows:
               + **full**: A full snapshot backs up the data of an entire cluster.
               + **increment**: An incremental snapshot records the changes made after the previous snapshot was created.
               
               Changing this parameter will create a new resource.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster ID of which the automated snapshot policy belongs to.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the automated snapshot policy.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The strategy of the automated snapshot policy.  
        Its format is a Cron expression, which specifies when to create a snapshot.

        Changing this parameter will create a new resource.

        > Note: The UTC time is used by default. Set the policy based on the time zone and time difference as required.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "strategy", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the automated snapshot policy.  
        The options are as follows:
        + **full**: A full snapshot backs up the data of an entire cluster.
        + **increment**: An incremental snapshot records the changes made after the previous snapshot was created.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:Dws/snapshotPolicy:SnapshotPolicy")
class SnapshotPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB(DWS) automated snapshot policy resource within HuaweiCloud.

        ## Example Usage

        ### Create a policy to periodically create a full snapshot

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.dws.SnapshotPolicy("test",
            name="demo",
            cluster_id=cluster_id,
            type="full",
            strategy="0 8 6 4 * ?")
        ```

        ### Create a policy to periodically create a full snapshot at specified time

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.dws.SnapshotPolicy("test",
            name="demo",
            cluster_id=cluster_id,
            type="full",
            strategy="2023-05-19T09:24:00")
        ```

        ### Create a policy to periodically create a increment snapshot

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.dws.SnapshotPolicy("test",
            name="demo",
            cluster_id=cluster_id,
            type="increment",
            strategy="0 8 6 4 * ?")
        ```

        ## Import

        The DWS snapshot policy can be imported using `cluster_id` and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/snapshotPolicy:SnapshotPolicy test <cluster_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: The cluster ID of which the automated snapshot policy belongs to.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the automated snapshot policy.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] strategy: The strategy of the automated snapshot policy.  
               Its format is a Cron expression, which specifies when to create a snapshot.
               
               Changing this parameter will create a new resource.
               
               > Note: The UTC time is used by default. Set the policy based on the time zone and time difference as required.
        :param pulumi.Input[_builtins.str] type: The type of the automated snapshot policy.  
               The options are as follows:
               + **full**: A full snapshot backs up the data of an entire cluster.
               + **increment**: An incremental snapshot records the changes made after the previous snapshot was created.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SnapshotPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB(DWS) automated snapshot policy resource within HuaweiCloud.

        ## Example Usage

        ### Create a policy to periodically create a full snapshot

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.dws.SnapshotPolicy("test",
            name="demo",
            cluster_id=cluster_id,
            type="full",
            strategy="0 8 6 4 * ?")
        ```

        ### Create a policy to periodically create a full snapshot at specified time

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.dws.SnapshotPolicy("test",
            name="demo",
            cluster_id=cluster_id,
            type="full",
            strategy="2023-05-19T09:24:00")
        ```

        ### Create a policy to periodically create a increment snapshot

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.dws.SnapshotPolicy("test",
            name="demo",
            cluster_id=cluster_id,
            type="increment",
            strategy="0 8 6 4 * ?")
        ```

        ## Import

        The DWS snapshot policy can be imported using `cluster_id` and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/snapshotPolicy:SnapshotPolicy test <cluster_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param SnapshotPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnapshotPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnapshotPolicyArgs.__new__(SnapshotPolicyArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if strategy is None and not opts.urn:
                raise TypeError("Missing required property 'strategy'")
            __props__.__dict__["strategy"] = strategy
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(SnapshotPolicy, __self__).__init__(
            'huaweicloud:Dws/snapshotPolicy:SnapshotPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            strategy: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'SnapshotPolicy':
        """
        Get an existing SnapshotPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: The cluster ID of which the automated snapshot policy belongs to.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the automated snapshot policy.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] strategy: The strategy of the automated snapshot policy.  
               Its format is a Cron expression, which specifies when to create a snapshot.
               
               Changing this parameter will create a new resource.
               
               > Note: The UTC time is used by default. Set the policy based on the time zone and time difference as required.
        :param pulumi.Input[_builtins.str] type: The type of the automated snapshot policy.  
               The options are as follows:
               + **full**: A full snapshot backs up the data of an entire cluster.
               + **increment**: An incremental snapshot records the changes made after the previous snapshot was created.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnapshotPolicyState.__new__(_SnapshotPolicyState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["strategy"] = strategy
        __props__.__dict__["type"] = type
        return SnapshotPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        The cluster ID of which the automated snapshot policy belongs to.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the automated snapshot policy.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> pulumi.Output[_builtins.str]:
        """
        The strategy of the automated snapshot policy.  
        Its format is a Cron expression, which specifies when to create a snapshot.

        Changing this parameter will create a new resource.

        > Note: The UTC time is used by default. Set the policy based on the time zone and time difference as required.
        """
        return pulumi.get(self, "strategy")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the automated snapshot policy.  
        The options are as follows:
        + **full**: A full snapshot backs up the data of an entire cluster.
        + **increment**: An incremental snapshot records the changes made after the previous snapshot was created.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

