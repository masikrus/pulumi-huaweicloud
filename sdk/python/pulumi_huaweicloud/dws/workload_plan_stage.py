# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkloadPlanStageInitArgs', 'WorkloadPlanStage']

@pulumi.input_type
class WorkloadPlanStageInitArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 end_time: pulumi.Input[_builtins.str],
                 plan_id: pulumi.Input[_builtins.str],
                 queues: pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageQueueArgs']]],
                 start_time: pulumi.Input[_builtins.str],
                 day: Optional[pulumi.Input[_builtins.str]] = None,
                 month: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a WorkloadPlanStage resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the cluster to which the workload plan belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] end_time: Specifies the end time of the workload plan.
               The time format is **hh:mm:ss**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] plan_id: Specifies the ID of the plan to which the workload plan stage belongs.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageQueueArgs']]] queues: Specifies the workload queue configurations.
               Changing this creates a new resource.
               The queues structure is documented below.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time of the workload plan.
               The time format is **hh:mm:ss**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] day: Specifies the execution days of the workload plan. The valid value ranges
               from `1` to `31`, separate by commas, e.g. **1,13,25**. Default to all days.
               Changing this creates a new resource.
               
               <a name="block_queues"></a>
               The `queues` block supports:
        :param pulumi.Input[_builtins.str] month: Specifies the execution months of the workload plan. The valid value ranges
               from `1` to `12`, separate by commas, e.g. **1,3,5**. Default to all months.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of workload queue which the workload plan stage running.
               Changing this creates a new resource.
               
               <a name="block_queues_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "plan_id", plan_id)
        pulumi.set(__self__, "queues", queues)
        pulumi.set(__self__, "start_time", start_time)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the cluster to which the workload plan belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the end time of the workload plan.
        The time format is **hh:mm:ss**. Changing this creates a new resource.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="planId")
    def plan_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the plan to which the workload plan stage belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "plan_id", value)

    @_builtins.property
    @pulumi.getter
    def queues(self) -> pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageQueueArgs']]]:
        """
        Specifies the workload queue configurations.
        Changing this creates a new resource.
        The queues structure is documented below.
        """
        return pulumi.get(self, "queues")

    @queues.setter
    def queues(self, value: pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageQueueArgs']]]):
        pulumi.set(self, "queues", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the start time of the workload plan.
        The time format is **hh:mm:ss**. Changing this creates a new resource.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def day(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the execution days of the workload plan. The valid value ranges
        from `1` to `31`, separate by commas, e.g. **1,13,25**. Default to all days.
        Changing this creates a new resource.

        <a name="block_queues"></a>
        The `queues` block supports:
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "day", value)

    @_builtins.property
    @pulumi.getter
    def month(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the execution months of the workload plan. The valid value ranges
        from `1` to `12`, separate by commas, e.g. **1,3,5**. Default to all months.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "month")

    @month.setter
    def month(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "month", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of workload queue which the workload plan stage running.
        Changing this creates a new resource.

        <a name="block_queues_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _WorkloadPlanStageState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 day: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 month: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageQueueArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering WorkloadPlanStage resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the cluster to which the workload plan belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] day: Specifies the execution days of the workload plan. The valid value ranges
               from `1` to `31`, separate by commas, e.g. **1,13,25**. Default to all days.
               Changing this creates a new resource.
               
               <a name="block_queues"></a>
               The `queues` block supports:
        :param pulumi.Input[_builtins.str] end_time: Specifies the end time of the workload plan.
               The time format is **hh:mm:ss**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] month: Specifies the execution months of the workload plan. The valid value ranges
               from `1` to `12`, separate by commas, e.g. **1,3,5**. Default to all months.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of workload queue which the workload plan stage running.
               Changing this creates a new resource.
               
               <a name="block_queues_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] plan_id: Specifies the ID of the plan to which the workload plan stage belongs.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageQueueArgs']]] queues: Specifies the workload queue configurations.
               Changing this creates a new resource.
               The queues structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time of the workload plan.
               The time format is **hh:mm:ss**. Changing this creates a new resource.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if queues is not None:
            pulumi.set(__self__, "queues", queues)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the cluster to which the workload plan belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def day(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the execution days of the workload plan. The valid value ranges
        from `1` to `31`, separate by commas, e.g. **1,13,25**. Default to all days.
        Changing this creates a new resource.

        <a name="block_queues"></a>
        The `queues` block supports:
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "day", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the end time of the workload plan.
        The time format is **hh:mm:ss**. Changing this creates a new resource.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter
    def month(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the execution months of the workload plan. The valid value ranges
        from `1` to `12`, separate by commas, e.g. **1,3,5**. Default to all months.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "month")

    @month.setter
    def month(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "month", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of workload queue which the workload plan stage running.
        Changing this creates a new resource.

        <a name="block_queues_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the plan to which the workload plan stage belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plan_id", value)

    @_builtins.property
    @pulumi.getter
    def queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageQueueArgs']]]]:
        """
        Specifies the workload queue configurations.
        Changing this creates a new resource.
        The queues structure is documented below.
        """
        return pulumi.get(self, "queues")

    @queues.setter
    def queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageQueueArgs']]]]):
        pulumi.set(self, "queues", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the start time of the workload plan.
        The time format is **hh:mm:ss**. Changing this creates a new resource.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)


@pulumi.type_token("huaweicloud:Dws/workloadPlanStage:WorkloadPlanStage")
class WorkloadPlanStage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 day: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 month: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WorkloadPlanStageQueueArgs', 'WorkloadPlanStageQueueArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB(DWS) workload plan stage resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        plan_id = config.require_object("planId")
        stage_name = config.require_object("stageName")
        pool_name = config.require_object("poolName")
        test = huaweicloud.dws.WorkloadPlanStage("test",
            cluster_id=cluster_id,
            plan_id=plan_id,
            name=stage_nme,
            start_time="01:00:00",
            end_time="00:00:00",
            queues=[{
                "name": pool_name,
                "configurations": [
                    {
                        "resource_name": "cpu",
                        "resource_value": 1,
                    },
                    {
                        "resource_name": "cpu_limit",
                        "resource_value": 0,
                    },
                    {
                        "resource_name": "memory",
                        "resource_value": 0,
                    },
                    {
                        "resource_name": "concurrency",
                        "resource_value": 10,
                    },
                    {
                        "resource_name": "shortQueryConcurrencyNum",
                        "resource_value": -1,
                    },
                ],
            }])
        ```

        ## Import

        The workload plan stage can be imported using `cluster_id`, `plan_id` and `name`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/workloadPlanStage:WorkloadPlanStage test <cluster_id>/<plan_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the cluster to which the workload plan belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] day: Specifies the execution days of the workload plan. The valid value ranges
               from `1` to `31`, separate by commas, e.g. **1,13,25**. Default to all days.
               Changing this creates a new resource.
               
               <a name="block_queues"></a>
               The `queues` block supports:
        :param pulumi.Input[_builtins.str] end_time: Specifies the end time of the workload plan.
               The time format is **hh:mm:ss**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] month: Specifies the execution months of the workload plan. The valid value ranges
               from `1` to `12`, separate by commas, e.g. **1,3,5**. Default to all months.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of workload queue which the workload plan stage running.
               Changing this creates a new resource.
               
               <a name="block_queues_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] plan_id: Specifies the ID of the plan to which the workload plan stage belongs.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WorkloadPlanStageQueueArgs', 'WorkloadPlanStageQueueArgsDict']]]] queues: Specifies the workload queue configurations.
               Changing this creates a new resource.
               The queues structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time of the workload plan.
               The time format is **hh:mm:ss**. Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkloadPlanStageInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB(DWS) workload plan stage resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        plan_id = config.require_object("planId")
        stage_name = config.require_object("stageName")
        pool_name = config.require_object("poolName")
        test = huaweicloud.dws.WorkloadPlanStage("test",
            cluster_id=cluster_id,
            plan_id=plan_id,
            name=stage_nme,
            start_time="01:00:00",
            end_time="00:00:00",
            queues=[{
                "name": pool_name,
                "configurations": [
                    {
                        "resource_name": "cpu",
                        "resource_value": 1,
                    },
                    {
                        "resource_name": "cpu_limit",
                        "resource_value": 0,
                    },
                    {
                        "resource_name": "memory",
                        "resource_value": 0,
                    },
                    {
                        "resource_name": "concurrency",
                        "resource_value": 10,
                    },
                    {
                        "resource_name": "shortQueryConcurrencyNum",
                        "resource_value": -1,
                    },
                ],
            }])
        ```

        ## Import

        The workload plan stage can be imported using `cluster_id`, `plan_id` and `name`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/workloadPlanStage:WorkloadPlanStage test <cluster_id>/<plan_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param WorkloadPlanStageInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkloadPlanStageInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 day: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 month: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WorkloadPlanStageQueueArgs', 'WorkloadPlanStageQueueArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkloadPlanStageInitArgs.__new__(WorkloadPlanStageInitArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["day"] = day
            if end_time is None and not opts.urn:
                raise TypeError("Missing required property 'end_time'")
            __props__.__dict__["end_time"] = end_time
            __props__.__dict__["month"] = month
            __props__.__dict__["name"] = name
            if plan_id is None and not opts.urn:
                raise TypeError("Missing required property 'plan_id'")
            __props__.__dict__["plan_id"] = plan_id
            if queues is None and not opts.urn:
                raise TypeError("Missing required property 'queues'")
            __props__.__dict__["queues"] = queues
            __props__.__dict__["region"] = region
            if start_time is None and not opts.urn:
                raise TypeError("Missing required property 'start_time'")
            __props__.__dict__["start_time"] = start_time
        super(WorkloadPlanStage, __self__).__init__(
            'huaweicloud:Dws/workloadPlanStage:WorkloadPlanStage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            day: Optional[pulumi.Input[_builtins.str]] = None,
            end_time: Optional[pulumi.Input[_builtins.str]] = None,
            month: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            plan_id: Optional[pulumi.Input[_builtins.str]] = None,
            queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WorkloadPlanStageQueueArgs', 'WorkloadPlanStageQueueArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            start_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'WorkloadPlanStage':
        """
        Get an existing WorkloadPlanStage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the cluster to which the workload plan belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] day: Specifies the execution days of the workload plan. The valid value ranges
               from `1` to `31`, separate by commas, e.g. **1,13,25**. Default to all days.
               Changing this creates a new resource.
               
               <a name="block_queues"></a>
               The `queues` block supports:
        :param pulumi.Input[_builtins.str] end_time: Specifies the end time of the workload plan.
               The time format is **hh:mm:ss**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] month: Specifies the execution months of the workload plan. The valid value ranges
               from `1` to `12`, separate by commas, e.g. **1,3,5**. Default to all months.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of workload queue which the workload plan stage running.
               Changing this creates a new resource.
               
               <a name="block_queues_configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] plan_id: Specifies the ID of the plan to which the workload plan stage belongs.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WorkloadPlanStageQueueArgs', 'WorkloadPlanStageQueueArgsDict']]]] queues: Specifies the workload queue configurations.
               Changing this creates a new resource.
               The queues structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time of the workload plan.
               The time format is **hh:mm:ss**. Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkloadPlanStageState.__new__(_WorkloadPlanStageState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["day"] = day
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["month"] = month
        __props__.__dict__["name"] = name
        __props__.__dict__["plan_id"] = plan_id
        __props__.__dict__["queues"] = queues
        __props__.__dict__["region"] = region
        __props__.__dict__["start_time"] = start_time
        return WorkloadPlanStage(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the cluster to which the workload plan belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def day(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the execution days of the workload plan. The valid value ranges
        from `1` to `31`, separate by commas, e.g. **1,13,25**. Default to all days.
        Changing this creates a new resource.

        <a name="block_queues"></a>
        The `queues` block supports:
        """
        return pulumi.get(self, "day")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the end time of the workload plan.
        The time format is **hh:mm:ss**. Changing this creates a new resource.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def month(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the execution months of the workload plan. The valid value ranges
        from `1` to `12`, separate by commas, e.g. **1,3,5**. Default to all months.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "month")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of workload queue which the workload plan stage running.
        Changing this creates a new resource.

        <a name="block_queues_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="planId")
    def plan_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the plan to which the workload plan stage belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "plan_id")

    @_builtins.property
    @pulumi.getter
    def queues(self) -> pulumi.Output[Sequence['outputs.WorkloadPlanStageQueue']]:
        """
        Specifies the workload queue configurations.
        Changing this creates a new resource.
        The queues structure is documented below.
        """
        return pulumi.get(self, "queues")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the start time of the workload plan.
        The time format is **hh:mm:ss**. Changing this creates a new resource.
        """
        return pulumi.get(self, "start_time")

