# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetClusterNodesResult',
    'AwaitableGetClusterNodesResult',
    'get_cluster_nodes',
    'get_cluster_nodes_output',
]

@pulumi.output_type
class GetClusterNodesResult:
    """
    A collection of values returned by getClusterNodes.
    """
    def __init__(__self__, cluster_id=None, filter=None, filter_by=None, id=None, node_id=None, nodes=None, region=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if filter_by and not isinstance(filter_by, str):
            raise TypeError("Expected argument 'filter_by' to be a str")
        pulumi.set(__self__, "filter_by", filter_by)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if node_id and not isinstance(node_id, str):
            raise TypeError("Expected argument 'node_id' to be a str")
        pulumi.set(__self__, "node_id", node_id)
        if nodes and not isinstance(nodes, list):
            raise TypeError("Expected argument 'nodes' to be a list")
        pulumi.set(__self__, "nodes", nodes)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter(name="filterBy")
    def filter_by(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "filter_by")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetClusterNodesNodeResult']:
        """
        All nodes that match the filter parameters.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetClusterNodesResult(GetClusterNodesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterNodesResult(
            cluster_id=self.cluster_id,
            filter=self.filter,
            filter_by=self.filter_by,
            id=self.id,
            node_id=self.node_id,
            nodes=self.nodes,
            region=self.region)


def get_cluster_nodes(cluster_id: Optional[_builtins.str] = None,
                      filter: Optional[_builtins.str] = None,
                      filter_by: Optional[_builtins.str] = None,
                      node_id: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterNodesResult:
    """
    Use this data source to get the list of nodes under specified DWS cluster within HuaweiCloud.

    ## Example Usage

    ### Use node ID to query a ring to which the node belongs

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dws_cluster_id = config.require_object("dwsClusterId")
    node_id = config.require_object("nodeId")
    test = huaweicloud.Dws.get_cluster_nodes(cluster_id=dws_cluster_id,
        node_id=node_id)
    ```

    ### Use resource status to query all idel nodes under the specified DWS cluster

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dws_cluster_id = config.require_object("dwsClusterId")
    test = huaweicloud.Dws.get_cluster_nodes(cluster_id=dws_cluster_id,
        filter_by="instCreateType",
        filter="NODE")
    ```


    :param _builtins.str cluster_id: Specifies the DWS cluster ID.
    :param _builtins.str filter: Specifies the type corresponding to the `filter_by` parameter.
           + If the `filter_by` is set to `status`, the valid values are **ALL**, **FREE**, **ACTIVE**, **FAILED**, **UNKNOWN**,
           **CREATE_FAILED**, **DELETE_FAILED** and **STOPPED**.
           + If the `filter_by` is set to `instCreatetype`, the valid values are **ALL**, **INST** (idle) and **NODE** (used).
           
           > 1. If `filter` is set to **All**, it means to query all nodes, including deleted historical nodes.
           <br/>2. If not specified, it means to query existing all nodes.
    :param _builtins.str filter_by: Specifies the query filter criteria.  
           The valid values are as follows:
           + **status**
           + **instCreateType**
    :param _builtins.str node_id: Specifies the ID of the node.
           If you specify this parameter, the query result is a ring containing the node.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['filter'] = filter
    __args__['filterBy'] = filter_by
    __args__['nodeId'] = node_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dws/getClusterNodes:getClusterNodes', __args__, opts=opts, typ=GetClusterNodesResult).value

    return AwaitableGetClusterNodesResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        filter=pulumi.get(__ret__, 'filter'),
        filter_by=pulumi.get(__ret__, 'filter_by'),
        id=pulumi.get(__ret__, 'id'),
        node_id=pulumi.get(__ret__, 'node_id'),
        nodes=pulumi.get(__ret__, 'nodes'),
        region=pulumi.get(__ret__, 'region'))
def get_cluster_nodes_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                             filter: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             filter_by: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             node_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClusterNodesResult]:
    """
    Use this data source to get the list of nodes under specified DWS cluster within HuaweiCloud.

    ## Example Usage

    ### Use node ID to query a ring to which the node belongs

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dws_cluster_id = config.require_object("dwsClusterId")
    node_id = config.require_object("nodeId")
    test = huaweicloud.Dws.get_cluster_nodes(cluster_id=dws_cluster_id,
        node_id=node_id)
    ```

    ### Use resource status to query all idel nodes under the specified DWS cluster

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dws_cluster_id = config.require_object("dwsClusterId")
    test = huaweicloud.Dws.get_cluster_nodes(cluster_id=dws_cluster_id,
        filter_by="instCreateType",
        filter="NODE")
    ```


    :param _builtins.str cluster_id: Specifies the DWS cluster ID.
    :param _builtins.str filter: Specifies the type corresponding to the `filter_by` parameter.
           + If the `filter_by` is set to `status`, the valid values are **ALL**, **FREE**, **ACTIVE**, **FAILED**, **UNKNOWN**,
           **CREATE_FAILED**, **DELETE_FAILED** and **STOPPED**.
           + If the `filter_by` is set to `instCreatetype`, the valid values are **ALL**, **INST** (idle) and **NODE** (used).
           
           > 1. If `filter` is set to **All**, it means to query all nodes, including deleted historical nodes.
           <br/>2. If not specified, it means to query existing all nodes.
    :param _builtins.str filter_by: Specifies the query filter criteria.  
           The valid values are as follows:
           + **status**
           + **instCreateType**
    :param _builtins.str node_id: Specifies the ID of the node.
           If you specify this parameter, the query result is a ring containing the node.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['filter'] = filter
    __args__['filterBy'] = filter_by
    __args__['nodeId'] = node_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dws/getClusterNodes:getClusterNodes', __args__, opts=opts, typ=GetClusterNodesResult)
    return __ret__.apply(lambda __response__: GetClusterNodesResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        filter=pulumi.get(__response__, 'filter'),
        filter_by=pulumi.get(__response__, 'filter_by'),
        id=pulumi.get(__response__, 'id'),
        node_id=pulumi.get(__response__, 'node_id'),
        nodes=pulumi.get(__response__, 'nodes'),
        region=pulumi.get(__response__, 'region')))
