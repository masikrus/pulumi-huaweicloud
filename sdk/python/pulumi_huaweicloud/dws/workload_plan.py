# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkloadPlanArgs', 'WorkloadPlan']

@pulumi.input_type
class WorkloadPlanArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a WorkloadPlan resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID of to which the workload plan belongs.
               Changing this parameter will create a new resource.
               
               > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the workload plan, which must be unique and contains
               `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
               lowercase letter. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        if logical_cluster_name is not None:
            pulumi.set(__self__, "logical_cluster_name", logical_cluster_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cluster ID of to which the workload plan belongs.
        Changing this parameter will create a new resource.

        > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="logicalClusterName")
    def logical_cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logical_cluster_name")

    @logical_cluster_name.setter
    def logical_cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logical_cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the workload plan, which must be unique and contains
        `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
        lowercase letter. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _WorkloadPlanState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 current_stage_name: Optional[pulumi.Input[_builtins.str]] = None,
                 logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 stages: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageArgs']]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering WorkloadPlan resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID of to which the workload plan belongs.
               Changing this parameter will create a new resource.
               
               > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        :param pulumi.Input[_builtins.str] current_stage_name: The name of the current plan stage of the workload plan.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the workload plan, which must be unique and contains
               `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
               lowercase letter. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageArgs']]] stages: All plan stages under the workload plan.
               The stages structure is documented below.
        :param pulumi.Input[_builtins.str] status: The workload plan status. The valid values are as follows:  
               + **enabled**: The workload plan has been started.
               + **disabled**: The workload plan has not been started.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if current_stage_name is not None:
            pulumi.set(__self__, "current_stage_name", current_stage_name)
        if logical_cluster_name is not None:
            pulumi.set(__self__, "logical_cluster_name", logical_cluster_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster ID of to which the workload plan belongs.
        Changing this parameter will create a new resource.

        > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="currentStageName")
    def current_stage_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the current plan stage of the workload plan.
        """
        return pulumi.get(self, "current_stage_name")

    @current_stage_name.setter
    def current_stage_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "current_stage_name", value)

    @_builtins.property
    @pulumi.getter(name="logicalClusterName")
    def logical_cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logical_cluster_name")

    @logical_cluster_name.setter
    def logical_cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logical_cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the workload plan, which must be unique and contains
        `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
        lowercase letter. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def stages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageArgs']]]]:
        """
        All plan stages under the workload plan.
        The stages structure is documented below.
        """
        return pulumi.get(self, "stages")

    @stages.setter
    def stages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageArgs']]]]):
        pulumi.set(self, "stages", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The workload plan status. The valid values are as follows:  
        + **enabled**: The workload plan has been started.
        + **disabled**: The workload plan has not been started.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:Dws/workloadPlan:WorkloadPlan")
class WorkloadPlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB(DWS) workload plan resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        plan_name = config.require_object("planName")
        test = huaweicloud.dws.WorkloadPlan("test",
            cluster_id=cluster_id,
            name=plan_name)
        ```

        ## Import

        The workload plan can be imported using `cluster_id` and `name`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/workloadPlan:WorkloadPlan test <cluster_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID of to which the workload plan belongs.
               Changing this parameter will create a new resource.
               
               > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the workload plan, which must be unique and contains
               `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
               lowercase letter. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkloadPlanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB(DWS) workload plan resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        plan_name = config.require_object("planName")
        test = huaweicloud.dws.WorkloadPlan("test",
            cluster_id=cluster_id,
            name=plan_name)
        ```

        ## Import

        The workload plan can be imported using `cluster_id` and `name`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/workloadPlan:WorkloadPlan test <cluster_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param WorkloadPlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkloadPlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkloadPlanArgs.__new__(WorkloadPlanArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["logical_cluster_name"] = logical_cluster_name
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["current_stage_name"] = None
            __props__.__dict__["stages"] = None
            __props__.__dict__["status"] = None
        super(WorkloadPlan, __self__).__init__(
            'huaweicloud:Dws/workloadPlan:WorkloadPlan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            current_stage_name: Optional[pulumi.Input[_builtins.str]] = None,
            logical_cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            stages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WorkloadPlanStageArgs', 'WorkloadPlanStageArgsDict']]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'WorkloadPlan':
        """
        Get an existing WorkloadPlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID of to which the workload plan belongs.
               Changing this parameter will create a new resource.
               
               > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        :param pulumi.Input[_builtins.str] current_stage_name: The name of the current plan stage of the workload plan.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the workload plan, which must be unique and contains
               `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
               lowercase letter. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WorkloadPlanStageArgs', 'WorkloadPlanStageArgsDict']]]] stages: All plan stages under the workload plan.
               The stages structure is documented below.
        :param pulumi.Input[_builtins.str] status: The workload plan status. The valid values are as follows:  
               + **enabled**: The workload plan has been started.
               + **disabled**: The workload plan has not been started.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkloadPlanState.__new__(_WorkloadPlanState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["current_stage_name"] = current_stage_name
        __props__.__dict__["logical_cluster_name"] = logical_cluster_name
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["stages"] = stages
        __props__.__dict__["status"] = status
        return WorkloadPlan(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster ID of to which the workload plan belongs.
        Changing this parameter will create a new resource.

        > Currently, only regular cluster is supported, and logical cluster is temporarily not supported.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="currentStageName")
    def current_stage_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the current plan stage of the workload plan.
        """
        return pulumi.get(self, "current_stage_name")

    @_builtins.property
    @pulumi.getter(name="logicalClusterName")
    def logical_cluster_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "logical_cluster_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the workload plan, which must be unique and contains
        `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
        lowercase letter. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def stages(self) -> pulumi.Output[Sequence['outputs.WorkloadPlanStage']]:
        """
        All plan stages under the workload plan.
        The stages structure is documented below.
        """
        return pulumi.get(self, "stages")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The workload plan status. The valid values are as follows:  
        + **enabled**: The workload plan has been started.
        + **disabled**: The workload plan has not been started.
        """
        return pulumi.get(self, "status")

