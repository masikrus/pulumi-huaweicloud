# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ParameterConfigurationsArgs', 'ParameterConfigurations']

@pulumi.input_type
class ParameterConfigurationsArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 configurations: pulumi.Input[Sequence[pulumi.Input['ParameterConfigurationsConfigurationArgs']]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ParameterConfigurations resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ParameterConfigurationsConfigurationArgs']]] configurations: Specifies the list of the DWS cluster parameter configurations.
               The configurations structure is documented below.
               
               <a name="parameter_configurations"></a>
               The `configurations` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "configurations", configurations)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DWS cluster ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> pulumi.Input[Sequence[pulumi.Input['ParameterConfigurationsConfigurationArgs']]]:
        """
        Specifies the list of the DWS cluster parameter configurations.
        The configurations structure is documented below.

        <a name="parameter_configurations"></a>
        The `configurations` block supports:
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: pulumi.Input[Sequence[pulumi.Input['ParameterConfigurationsConfigurationArgs']]]):
        pulumi.set(self, "configurations", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ParameterConfigurationsState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterConfigurationsConfigurationArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ParameterConfigurations resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ParameterConfigurationsConfigurationArgs']]] configurations: Specifies the list of the DWS cluster parameter configurations.
               The configurations structure is documented below.
               
               <a name="parameter_configurations"></a>
               The `configurations` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DWS cluster ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ParameterConfigurationsConfigurationArgs']]]]:
        """
        Specifies the list of the DWS cluster parameter configurations.
        The configurations structure is documented below.

        <a name="parameter_configurations"></a>
        The `configurations` block supports:
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterConfigurationsConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Dws/parameterConfigurations:ParameterConfigurations")
class ParameterConfigurations(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ParameterConfigurationsConfigurationArgs', 'ParameterConfigurationsConfigurationArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to modify the parameter configurations of DWS cluster within HuaweiCloud.

        > 1. Only one `Dws.ParameterConfigurations` resource can be created for a DWS cluster.
        >       <br>2. If the modified parameters require restarting the DWS cluster, the modified values ​​will be displayed in the
        >       corresponding tfstate file after the resource is created, and the cluster status will be pending restart, and some
        >       operation and maintenance operations will be disabled. The modified values ​​will not take effect until the cluster
        >       is restarted, and the cluster will be restored to an available state.
        >       <br>3. This resource is only used to modify the DWS cluster parameter configurations. Deleting this resource will
        >       not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        dws_cluster_id = config.require_object("dwsClusterId")
        parameter_name = config.require_object("parameterName")
        parameter_value = config.require_object("parameterValue")
        test = huaweicloud.dws.ParameterConfigurations("test",
            cluster_id=dws_cluster_id,
            configurations=[{
                "name": parameter_name,
                "type": "cn",
                "value": parameter_value,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ParameterConfigurationsConfigurationArgs', 'ParameterConfigurationsConfigurationArgsDict']]]] configurations: Specifies the list of the DWS cluster parameter configurations.
               The configurations structure is documented below.
               
               <a name="parameter_configurations"></a>
               The `configurations` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ParameterConfigurationsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to modify the parameter configurations of DWS cluster within HuaweiCloud.

        > 1. Only one `Dws.ParameterConfigurations` resource can be created for a DWS cluster.
        >       <br>2. If the modified parameters require restarting the DWS cluster, the modified values ​​will be displayed in the
        >       corresponding tfstate file after the resource is created, and the cluster status will be pending restart, and some
        >       operation and maintenance operations will be disabled. The modified values ​​will not take effect until the cluster
        >       is restarted, and the cluster will be restored to an available state.
        >       <br>3. This resource is only used to modify the DWS cluster parameter configurations. Deleting this resource will
        >       not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        dws_cluster_id = config.require_object("dwsClusterId")
        parameter_name = config.require_object("parameterName")
        parameter_value = config.require_object("parameterValue")
        test = huaweicloud.dws.ParameterConfigurations("test",
            cluster_id=dws_cluster_id,
            configurations=[{
                "name": parameter_name,
                "type": "cn",
                "value": parameter_value,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param ParameterConfigurationsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ParameterConfigurationsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ParameterConfigurationsConfigurationArgs', 'ParameterConfigurationsConfigurationArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ParameterConfigurationsArgs.__new__(ParameterConfigurationsArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if configurations is None and not opts.urn:
                raise TypeError("Missing required property 'configurations'")
            __props__.__dict__["configurations"] = configurations
            __props__.__dict__["region"] = region
        super(ParameterConfigurations, __self__).__init__(
            'huaweicloud:Dws/parameterConfigurations:ParameterConfigurations',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ParameterConfigurationsConfigurationArgs', 'ParameterConfigurationsConfigurationArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'ParameterConfigurations':
        """
        Get an existing ParameterConfigurations resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ParameterConfigurationsConfigurationArgs', 'ParameterConfigurationsConfigurationArgsDict']]]] configurations: Specifies the list of the DWS cluster parameter configurations.
               The configurations structure is documented below.
               
               <a name="parameter_configurations"></a>
               The `configurations` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ParameterConfigurationsState.__new__(_ParameterConfigurationsState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["configurations"] = configurations
        __props__.__dict__["region"] = region
        return ParameterConfigurations(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DWS cluster ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> pulumi.Output[Sequence['outputs.ParameterConfigurationsConfiguration']]:
        """
        Specifies the list of the DWS cluster parameter configurations.
        The configurations structure is documented below.

        <a name="parameter_configurations"></a>
        The `configurations` block supports:
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

