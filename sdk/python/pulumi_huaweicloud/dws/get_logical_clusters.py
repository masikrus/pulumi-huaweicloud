# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetLogicalClustersResult',
    'AwaitableGetLogicalClustersResult',
    'get_logical_clusters',
    'get_logical_clusters_output',
]

@pulumi.output_type
class GetLogicalClustersResult:
    """
    A collection of values returned by getLogicalClusters.
    """
    def __init__(__self__, add_enable=None, cluster_id=None, id=None, logical_clusters=None, region=None):
        if add_enable and not isinstance(add_enable, bool):
            raise TypeError("Expected argument 'add_enable' to be a bool")
        pulumi.set(__self__, "add_enable", add_enable)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if logical_clusters and not isinstance(logical_clusters, list):
            raise TypeError("Expected argument 'logical_clusters' to be a list")
        pulumi.set(__self__, "logical_clusters", logical_clusters)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="addEnable")
    def add_enable(self) -> _builtins.bool:
        """
        Whether the logical cluster can be added.
        """
        return pulumi.get(self, "add_enable")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logicalClusters")
    def logical_clusters(self) -> Sequence['outputs.GetLogicalClustersLogicalClusterResult']:
        """
        All logical clusters that match the filter parameters.
        """
        return pulumi.get(self, "logical_clusters")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetLogicalClustersResult(GetLogicalClustersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogicalClustersResult(
            add_enable=self.add_enable,
            cluster_id=self.cluster_id,
            id=self.id,
            logical_clusters=self.logical_clusters,
            region=self.region)


def get_logical_clusters(cluster_id: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogicalClustersResult:
    """
    Use this data source to get the list of DWS logical clusters within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dws_cluster_id = config.require_object("dwsClusterId")
    test = huaweicloud.Dws.get_logical_clusters(cluster_id=dws_cluster_id)
    ```


    :param _builtins.str cluster_id: Specified the ID of the cluster to which the logical clusters belong.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dws/getLogicalClusters:getLogicalClusters', __args__, opts=opts, typ=GetLogicalClustersResult).value

    return AwaitableGetLogicalClustersResult(
        add_enable=pulumi.get(__ret__, 'add_enable'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        logical_clusters=pulumi.get(__ret__, 'logical_clusters'),
        region=pulumi.get(__ret__, 'region'))
def get_logical_clusters_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogicalClustersResult]:
    """
    Use this data source to get the list of DWS logical clusters within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dws_cluster_id = config.require_object("dwsClusterId")
    test = huaweicloud.Dws.get_logical_clusters(cluster_id=dws_cluster_id)
    ```


    :param _builtins.str cluster_id: Specified the ID of the cluster to which the logical clusters belong.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dws/getLogicalClusters:getLogicalClusters', __args__, opts=opts, typ=GetLogicalClustersResult)
    return __ret__.apply(lambda __response__: GetLogicalClustersResult(
        add_enable=pulumi.get(__response__, 'add_enable'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        logical_clusters=pulumi.get(__response__, 'logical_clusters'),
        region=pulumi.get(__response__, 'region')))
