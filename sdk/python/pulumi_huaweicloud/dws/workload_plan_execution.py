# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['WorkloadPlanExecutionArgs', 'WorkloadPlanExecution']

@pulumi.input_type
class WorkloadPlanExecutionArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 plan_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 stage_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a WorkloadPlanExecution resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID of to which the workload plan to execute belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] plan_id: Specifies the ID of the workload plan to be executed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] stage_id: Specifies the plan stage ID to be executed after the successful start of the workload
               plan. If omitted, the workload plan will not take effect even if it is successfully started.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "plan_id", plan_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if stage_id is not None:
            pulumi.set(__self__, "stage_id", stage_id)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cluster ID of to which the workload plan to execute belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="planId")
    def plan_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workload plan to be executed.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "plan_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="stageId")
    def stage_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plan stage ID to be executed after the successful start of the workload
        plan. If omitted, the workload plan will not take effect even if it is successfully started.
        """
        return pulumi.get(self, "stage_id")

    @stage_id.setter
    def stage_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stage_id", value)


@pulumi.input_type
class _WorkloadPlanExecutionState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 stage_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering WorkloadPlanExecution resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID of to which the workload plan to execute belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] plan_id: Specifies the ID of the workload plan to be executed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] stage_id: Specifies the plan stage ID to be executed after the successful start of the workload
               plan. If omitted, the workload plan will not take effect even if it is successfully started.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if stage_id is not None:
            pulumi.set(__self__, "stage_id", stage_id)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster ID of to which the workload plan to execute belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workload plan to be executed.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plan_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="stageId")
    def stage_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plan stage ID to be executed after the successful start of the workload
        plan. If omitted, the workload plan will not take effect even if it is successfully started.
        """
        return pulumi.get(self, "stage_id")

    @stage_id.setter
    def stage_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stage_id", value)


@pulumi.type_token("huaweicloud:Dws/workloadPlanExecution:WorkloadPlanExecution")
class WorkloadPlanExecution(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 stage_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB(DWS) workload plan execution resource within HuaweiCloud.

        > 1. Only one workload plan can be started for each cluster.
        >      <br/> 2. A workload plan must have at least two plan stages before it can be started.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        plan_id = config.require_object("planId")
        stage_id = config.require_object("stageId")
        test = huaweicloud.dws.WorkloadPlanExecution("test",
            cluster_id=cluster_id,
            plan_id=plan_id,
            stage_id=stage_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID of to which the workload plan to execute belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] plan_id: Specifies the ID of the workload plan to be executed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] stage_id: Specifies the plan stage ID to be executed after the successful start of the workload
               plan. If omitted, the workload plan will not take effect even if it is successfully started.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkloadPlanExecutionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB(DWS) workload plan execution resource within HuaweiCloud.

        > 1. Only one workload plan can be started for each cluster.
        >      <br/> 2. A workload plan must have at least two plan stages before it can be started.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        plan_id = config.require_object("planId")
        stage_id = config.require_object("stageId")
        test = huaweicloud.dws.WorkloadPlanExecution("test",
            cluster_id=cluster_id,
            plan_id=plan_id,
            stage_id=stage_id)
        ```

        :param str resource_name: The name of the resource.
        :param WorkloadPlanExecutionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkloadPlanExecutionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 stage_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkloadPlanExecutionArgs.__new__(WorkloadPlanExecutionArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if plan_id is None and not opts.urn:
                raise TypeError("Missing required property 'plan_id'")
            __props__.__dict__["plan_id"] = plan_id
            __props__.__dict__["region"] = region
            __props__.__dict__["stage_id"] = stage_id
        super(WorkloadPlanExecution, __self__).__init__(
            'huaweicloud:Dws/workloadPlanExecution:WorkloadPlanExecution',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            plan_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            stage_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'WorkloadPlanExecution':
        """
        Get an existing WorkloadPlanExecution resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID of to which the workload plan to execute belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] plan_id: Specifies the ID of the workload plan to be executed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] stage_id: Specifies the plan stage ID to be executed after the successful start of the workload
               plan. If omitted, the workload plan will not take effect even if it is successfully started.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkloadPlanExecutionState.__new__(_WorkloadPlanExecutionState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["plan_id"] = plan_id
        __props__.__dict__["region"] = region
        __props__.__dict__["stage_id"] = stage_id
        return WorkloadPlanExecution(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster ID of to which the workload plan to execute belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="planId")
    def plan_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workload plan to be executed.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "plan_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="stageId")
    def stage_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the plan stage ID to be executed after the successful start of the workload
        plan. If omitted, the workload plan will not take effect even if it is successfully started.
        """
        return pulumi.get(self, "stage_id")

