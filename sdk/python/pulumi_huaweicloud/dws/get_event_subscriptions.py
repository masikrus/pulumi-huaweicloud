# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEventSubscriptionsResult',
    'AwaitableGetEventSubscriptionsResult',
    'get_event_subscriptions',
    'get_event_subscriptions_output',
]

@pulumi.output_type
class GetEventSubscriptionsResult:
    """
    A collection of values returned by getEventSubscriptions.
    """
    def __init__(__self__, category=None, enable=None, event_subscriptions=None, id=None, name=None, notification_target_name=None, region=None, severity=None, source_type=None):
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        pulumi.set(__self__, "category", category)
        if enable and not isinstance(enable, str):
            raise TypeError("Expected argument 'enable' to be a str")
        pulumi.set(__self__, "enable", enable)
        if event_subscriptions and not isinstance(event_subscriptions, list):
            raise TypeError("Expected argument 'event_subscriptions' to be a list")
        pulumi.set(__self__, "event_subscriptions", event_subscriptions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notification_target_name and not isinstance(notification_target_name, str):
            raise TypeError("Expected argument 'notification_target_name' to be a str")
        pulumi.set(__self__, "notification_target_name", notification_target_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if severity and not isinstance(severity, str):
            raise TypeError("Expected argument 'severity' to be a str")
        pulumi.set(__self__, "severity", severity)
        if source_type and not isinstance(source_type, str):
            raise TypeError("Expected argument 'source_type' to be a str")
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[_builtins.str]:
        """
        The category of source event.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.str]:
        """
        Whether the event subscription is enabled.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="eventSubscriptions")
    def event_subscriptions(self) -> Sequence['outputs.GetEventSubscriptionsEventSubscriptionResult']:
        """
        The list of event subscriptions.
        The event_subscriptions structure is documented below.
        """
        return pulumi.get(self, "event_subscriptions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the event subscription.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notificationTargetName")
    def notification_target_name(self) -> Optional[_builtins.str]:
        """
        The name of notification target.
        """
        return pulumi.get(self, "notification_target_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> Optional[_builtins.str]:
        """
        The severity of source event.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[_builtins.str]:
        """
        The type of source event.
        """
        return pulumi.get(self, "source_type")


class AwaitableGetEventSubscriptionsResult(GetEventSubscriptionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventSubscriptionsResult(
            category=self.category,
            enable=self.enable,
            event_subscriptions=self.event_subscriptions,
            id=self.id,
            name=self.name,
            notification_target_name=self.notification_target_name,
            region=self.region,
            severity=self.severity,
            source_type=self.source_type)


def get_event_subscriptions(category: Optional[_builtins.str] = None,
                            enable: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            notification_target_name: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            severity: Optional[_builtins.str] = None,
                            source_type: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventSubscriptionsResult:
    """
    Use this data source to get the list of event subscriptions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    subscription_name = config.require_object("subscriptionName")
    test = huaweicloud.Dws.get_event_subscriptions(name=subscription_name)
    ```


    :param _builtins.str category: Specifies the category of source event.
           The valid values are **management**, **monitor**, **security** and **system alarm**.
           If there are multiple categories, separate by commas, e.g. **management,security**.
    :param _builtins.str enable: Specifies whether the event subscription is enabled.
           The options are as follows:
           + **1**: enabled.
           + **0**: disabled.
    :param _builtins.str name: Specifies the name of the event subscription.
    :param _builtins.str notification_target_name: Specifies the name of notification target.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str severity: Specifies the severity of source event.
           The valid values are **normal** and **warning**. If there are multiple severities, separate by commas,
           e.g. **normal,warning**.
    :param _builtins.str source_type: Specifies the type of source event.
           The valid values are **cluster**, **backup** and **disaster-recovery**. If there are multiple types,
           separate by commas, e.g. **cluster,disaster-recovery**.
    """
    __args__ = dict()
    __args__['category'] = category
    __args__['enable'] = enable
    __args__['name'] = name
    __args__['notificationTargetName'] = notification_target_name
    __args__['region'] = region
    __args__['severity'] = severity
    __args__['sourceType'] = source_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dws/getEventSubscriptions:getEventSubscriptions', __args__, opts=opts, typ=GetEventSubscriptionsResult).value

    return AwaitableGetEventSubscriptionsResult(
        category=pulumi.get(__ret__, 'category'),
        enable=pulumi.get(__ret__, 'enable'),
        event_subscriptions=pulumi.get(__ret__, 'event_subscriptions'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        notification_target_name=pulumi.get(__ret__, 'notification_target_name'),
        region=pulumi.get(__ret__, 'region'),
        severity=pulumi.get(__ret__, 'severity'),
        source_type=pulumi.get(__ret__, 'source_type'))
def get_event_subscriptions_output(category: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   enable: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   notification_target_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   severity: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   source_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEventSubscriptionsResult]:
    """
    Use this data source to get the list of event subscriptions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    subscription_name = config.require_object("subscriptionName")
    test = huaweicloud.Dws.get_event_subscriptions(name=subscription_name)
    ```


    :param _builtins.str category: Specifies the category of source event.
           The valid values are **management**, **monitor**, **security** and **system alarm**.
           If there are multiple categories, separate by commas, e.g. **management,security**.
    :param _builtins.str enable: Specifies whether the event subscription is enabled.
           The options are as follows:
           + **1**: enabled.
           + **0**: disabled.
    :param _builtins.str name: Specifies the name of the event subscription.
    :param _builtins.str notification_target_name: Specifies the name of notification target.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str severity: Specifies the severity of source event.
           The valid values are **normal** and **warning**. If there are multiple severities, separate by commas,
           e.g. **normal,warning**.
    :param _builtins.str source_type: Specifies the type of source event.
           The valid values are **cluster**, **backup** and **disaster-recovery**. If there are multiple types,
           separate by commas, e.g. **cluster,disaster-recovery**.
    """
    __args__ = dict()
    __args__['category'] = category
    __args__['enable'] = enable
    __args__['name'] = name
    __args__['notificationTargetName'] = notification_target_name
    __args__['region'] = region
    __args__['severity'] = severity
    __args__['sourceType'] = source_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dws/getEventSubscriptions:getEventSubscriptions', __args__, opts=opts, typ=GetEventSubscriptionsResult)
    return __ret__.apply(lambda __response__: GetEventSubscriptionsResult(
        category=pulumi.get(__response__, 'category'),
        enable=pulumi.get(__response__, 'enable'),
        event_subscriptions=pulumi.get(__response__, 'event_subscriptions'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        notification_target_name=pulumi.get(__response__, 'notification_target_name'),
        region=pulumi.get(__response__, 'region'),
        severity=pulumi.get(__response__, 'severity'),
        source_type=pulumi.get(__response__, 'source_type')))
