# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetClusterCnsResult',
    'AwaitableGetClusterCnsResult',
    'get_cluster_cns',
    'get_cluster_cns_output',
]

@pulumi.output_type
class GetClusterCnsResult:
    """
    A collection of values returned by getClusterCns.
    """
    def __init__(__self__, cluster_id=None, cns=None, id=None, max_num=None, min_num=None, region=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if cns and not isinstance(cns, list):
            raise TypeError("Expected argument 'cns' to be a list")
        pulumi.set(__self__, "cns", cns)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_num and not isinstance(max_num, int):
            raise TypeError("Expected argument 'max_num' to be a int")
        pulumi.set(__self__, "max_num", max_num)
        if min_num and not isinstance(min_num, int):
            raise TypeError("Expected argument 'min_num' to be a int")
        pulumi.set(__self__, "min_num", min_num)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def cns(self) -> Sequence['outputs.GetClusterCnsCnResult']:
        """
        The list of the CNs under specified DWS cluster.
        """
        return pulumi.get(self, "cns")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxNum")
    def max_num(self) -> _builtins.int:
        """
        The maximum number of CNs supported by the cluster.
        """
        return pulumi.get(self, "max_num")

    @_builtins.property
    @pulumi.getter(name="minNum")
    def min_num(self) -> _builtins.int:
        """
        The minimum number of CNs supported by the cluster.
        """
        return pulumi.get(self, "min_num")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetClusterCnsResult(GetClusterCnsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterCnsResult(
            cluster_id=self.cluster_id,
            cns=self.cns,
            id=self.id,
            max_num=self.max_num,
            min_num=self.min_num,
            region=self.region)


def get_cluster_cns(cluster_id: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterCnsResult:
    """
    Use this data source to query the list of CNs under specified DWS cluster within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dws_cluster_id = config.require_object("dwsClusterId")
    test = huaweicloud.Dws.get_cluster_cns(cluster_id=dws_cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the DWS cluster ID to which the CNs belong.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dws/getClusterCns:getClusterCns', __args__, opts=opts, typ=GetClusterCnsResult).value

    return AwaitableGetClusterCnsResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        cns=pulumi.get(__ret__, 'cns'),
        id=pulumi.get(__ret__, 'id'),
        max_num=pulumi.get(__ret__, 'max_num'),
        min_num=pulumi.get(__ret__, 'min_num'),
        region=pulumi.get(__ret__, 'region'))
def get_cluster_cns_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClusterCnsResult]:
    """
    Use this data source to query the list of CNs under specified DWS cluster within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dws_cluster_id = config.require_object("dwsClusterId")
    test = huaweicloud.Dws.get_cluster_cns(cluster_id=dws_cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the DWS cluster ID to which the CNs belong.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dws/getClusterCns:getClusterCns', __args__, opts=opts, typ=GetClusterCnsResult)
    return __ret__.apply(lambda __response__: GetClusterCnsResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        cns=pulumi.get(__response__, 'cns'),
        id=pulumi.get(__response__, 'id'),
        max_num=pulumi.get(__response__, 'max_num'),
        min_num=pulumi.get(__response__, 'min_num'),
        region=pulumi.get(__response__, 'region')))
