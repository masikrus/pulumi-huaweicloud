# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PublicDomainAssociateArgs', 'PublicDomainAssociate']

@pulumi.input_type
class PublicDomainAssociateArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 domain_name: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a PublicDomainAssociate resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID to which the public domain name to be
               associated belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the public domain name.  
               The valid length is limited from `4` to `64`, only English letters, digits and hyphens (-) are
               allowed.
               The name must start with an English letter.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] ttl: Specifies cache period of the SOA record set, in seconds.  
               The valid value ranges from `300` to `2,147,483,647`. The default value is `300`.
               
               > If you want to modify the `ttl` value, the `domain_name` value must also be modified at the same time.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "domain_name", domain_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DWS cluster ID to which the public domain name to be
        associated belongs. Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the public domain name.  
        The valid length is limited from `4` to `64`, only English letters, digits and hyphens (-) are
        allowed.
        The name must start with an English letter.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies cache period of the SOA record set, in seconds.  
        The valid value ranges from `300` to `2,147,483,647`. The default value is `300`.

        > If you want to modify the `ttl` value, the `domain_name` value must also be modified at the same time.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class _PublicDomainAssociateState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering PublicDomainAssociate resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID to which the public domain name to be
               associated belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the public domain name.  
               The valid length is limited from `4` to `64`, only English letters, digits and hyphens (-) are
               allowed.
               The name must start with an English letter.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] ttl: Specifies cache period of the SOA record set, in seconds.  
               The valid value ranges from `300` to `2,147,483,647`. The default value is `300`.
               
               > If you want to modify the `ttl` value, the `domain_name` value must also be modified at the same time.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DWS cluster ID to which the public domain name to be
        associated belongs. Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the public domain name.  
        The valid length is limited from `4` to `64`, only English letters, digits and hyphens (-) are
        allowed.
        The name must start with an English letter.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies cache period of the SOA record set, in seconds.  
        The valid value ranges from `300` to `2,147,483,647`. The default value is `300`.

        > If you want to modify the `ttl` value, the `domain_name` value must also be modified at the same time.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ttl", value)


@pulumi.type_token("huaweicloud:Dws/publicDomainAssociate:PublicDomainAssociate")
class PublicDomainAssociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Use this resource to bind public domain name to DWS cluster within HuaweiCloud.

        > Before using this resource, make sure that the EIP has been bound to the DWS cluster.
           And the `public_bind_type` parameter of the `Dws.Cluster` resource cannot be set to **auto_assign**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        dws_cluster_id = config.require_object("dwsClusterId")
        public_domain_name = config.require_object("publicDomainName")
        test = huaweicloud.dws.PublicDomainAssociate("test",
            cluster_id=dws_cluster_id,
            domain_name=public_domain_name,
            ttl=1000)
        ```

        ## Import

        The resource can be imported using the `cluster_id` and `domain_name`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/publicDomainAssociate:PublicDomainAssociate test <cluster_id>/<domain_name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `ttl`. It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dws_public_domain_associate" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              ttl,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID to which the public domain name to be
               associated belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the public domain name.  
               The valid length is limited from `4` to `64`, only English letters, digits and hyphens (-) are
               allowed.
               The name must start with an English letter.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] ttl: Specifies cache period of the SOA record set, in seconds.  
               The valid value ranges from `300` to `2,147,483,647`. The default value is `300`.
               
               > If you want to modify the `ttl` value, the `domain_name` value must also be modified at the same time.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PublicDomainAssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to bind public domain name to DWS cluster within HuaweiCloud.

        > Before using this resource, make sure that the EIP has been bound to the DWS cluster.
           And the `public_bind_type` parameter of the `Dws.Cluster` resource cannot be set to **auto_assign**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        dws_cluster_id = config.require_object("dwsClusterId")
        public_domain_name = config.require_object("publicDomainName")
        test = huaweicloud.dws.PublicDomainAssociate("test",
            cluster_id=dws_cluster_id,
            domain_name=public_domain_name,
            ttl=1000)
        ```

        ## Import

        The resource can be imported using the `cluster_id` and `domain_name`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/publicDomainAssociate:PublicDomainAssociate test <cluster_id>/<domain_name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `ttl`. It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dws_public_domain_associate" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              ttl,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param PublicDomainAssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PublicDomainAssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PublicDomainAssociateArgs.__new__(PublicDomainAssociateArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["region"] = region
            __props__.__dict__["ttl"] = ttl
        super(PublicDomainAssociate, __self__).__init__(
            'huaweicloud:Dws/publicDomainAssociate:PublicDomainAssociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            ttl: Optional[pulumi.Input[_builtins.int]] = None) -> 'PublicDomainAssociate':
        """
        Get an existing PublicDomainAssociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID to which the public domain name to be
               associated belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the public domain name.  
               The valid length is limited from `4` to `64`, only English letters, digits and hyphens (-) are
               allowed.
               The name must start with an English letter.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] ttl: Specifies cache period of the SOA record set, in seconds.  
               The valid value ranges from `300` to `2,147,483,647`. The default value is `300`.
               
               > If you want to modify the `ttl` value, the `domain_name` value must also be modified at the same time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PublicDomainAssociateState.__new__(_PublicDomainAssociateState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["region"] = region
        __props__.__dict__["ttl"] = ttl
        return PublicDomainAssociate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DWS cluster ID to which the public domain name to be
        associated belongs. Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the public domain name.  
        The valid length is limited from `4` to `64`, only English letters, digits and hyphens (-) are
        allowed.
        The name must start with an English letter.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies cache period of the SOA record set, in seconds.  
        The valid value ranges from `300` to `2,147,483,647`. The default value is `300`.

        > If you want to modify the `ttl` value, the `domain_name` value must also be modified at the same time.
        """
        return pulumi.get(self, "ttl")

