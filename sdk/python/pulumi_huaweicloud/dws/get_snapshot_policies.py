# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSnapshotPoliciesResult',
    'AwaitableGetSnapshotPoliciesResult',
    'get_snapshot_policies',
    'get_snapshot_policies_output',
]

@pulumi.output_type
class GetSnapshotPoliciesResult:
    """
    A collection of values returned by getSnapshotPolicies.
    """
    def __init__(__self__, cluster_id=None, device_name=None, id=None, keep_day=None, policies=None, region=None, server_ips=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if device_name and not isinstance(device_name, str):
            raise TypeError("Expected argument 'device_name' to be a str")
        pulumi.set(__self__, "device_name", device_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keep_day and not isinstance(keep_day, int):
            raise TypeError("Expected argument 'keep_day' to be a int")
        pulumi.set(__self__, "keep_day", keep_day)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_ips and not isinstance(server_ips, list):
            raise TypeError("Expected argument 'server_ips' to be a list")
        pulumi.set(__self__, "server_ips", server_ips)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> _builtins.str:
        """
        The device on which the snapshots are stored.
        """
        return pulumi.get(self, "device_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keepDay")
    def keep_day(self) -> _builtins.int:
        """
        The number of days to retain the generated automated snapshot.
        """
        return pulumi.get(self, "keep_day")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetSnapshotPoliciesPolicyResult']:
        """
        All automated snapshot policies that match the filter parameters.
        """
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverIps")
    def server_ips(self) -> Sequence[_builtins.str]:
        """
        The shared IP addresses of the NFS corresponding to the snapshots.
        """
        return pulumi.get(self, "server_ips")


class AwaitableGetSnapshotPoliciesResult(GetSnapshotPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnapshotPoliciesResult(
            cluster_id=self.cluster_id,
            device_name=self.device_name,
            id=self.id,
            keep_day=self.keep_day,
            policies=self.policies,
            region=self.region,
            server_ips=self.server_ips)


def get_snapshot_policies(cluster_id: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSnapshotPoliciesResult:
    """
    Use this data source to query the list of snapshot policies under specified DWS cluster within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Dws.get_snapshot_policies(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the DWS cluster ID to which the snapshot policies belong.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dws/getSnapshotPolicies:getSnapshotPolicies', __args__, opts=opts, typ=GetSnapshotPoliciesResult).value

    return AwaitableGetSnapshotPoliciesResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        device_name=pulumi.get(__ret__, 'device_name'),
        id=pulumi.get(__ret__, 'id'),
        keep_day=pulumi.get(__ret__, 'keep_day'),
        policies=pulumi.get(__ret__, 'policies'),
        region=pulumi.get(__ret__, 'region'),
        server_ips=pulumi.get(__ret__, 'server_ips'))
def get_snapshot_policies_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSnapshotPoliciesResult]:
    """
    Use this data source to query the list of snapshot policies under specified DWS cluster within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Dws.get_snapshot_policies(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the DWS cluster ID to which the snapshot policies belong.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dws/getSnapshotPolicies:getSnapshotPolicies', __args__, opts=opts, typ=GetSnapshotPoliciesResult)
    return __ret__.apply(lambda __response__: GetSnapshotPoliciesResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        device_name=pulumi.get(__response__, 'device_name'),
        id=pulumi.get(__response__, 'id'),
        keep_day=pulumi.get(__response__, 'keep_day'),
        policies=pulumi.get(__response__, 'policies'),
        region=pulumi.get(__response__, 'region'),
        server_ips=pulumi.get(__response__, 'server_ips')))
