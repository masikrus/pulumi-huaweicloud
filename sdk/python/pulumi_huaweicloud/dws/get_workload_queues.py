# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetWorkloadQueuesResult',
    'AwaitableGetWorkloadQueuesResult',
    'get_workload_queues',
    'get_workload_queues_output',
]

@pulumi.output_type
class GetWorkloadQueuesResult:
    """
    A collection of values returned by getWorkloadQueues.
    """
    def __init__(__self__, cluster_id=None, id=None, logical_cluster_name=None, name=None, queues=None, region=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if logical_cluster_name and not isinstance(logical_cluster_name, str):
            raise TypeError("Expected argument 'logical_cluster_name' to be a str")
        pulumi.set(__self__, "logical_cluster_name", logical_cluster_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if queues and not isinstance(queues, list):
            raise TypeError("Expected argument 'queues' to be a list")
        pulumi.set(__self__, "queues", queues)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logicalClusterName")
    def logical_cluster_name(self) -> Optional[_builtins.str]:
        """
        The logical cluster name.
        """
        return pulumi.get(self, "logical_cluster_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the workload queue.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def queues(self) -> Sequence['outputs.GetWorkloadQueuesQueueResult']:
        """
        The list of the workload queues.
        The queues structure is documented below.
        """
        return pulumi.get(self, "queues")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetWorkloadQueuesResult(GetWorkloadQueuesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkloadQueuesResult(
            cluster_id=self.cluster_id,
            id=self.id,
            logical_cluster_name=self.logical_cluster_name,
            name=self.name,
            queues=self.queues,
            region=self.region)


def get_workload_queues(cluster_id: Optional[_builtins.str] = None,
                        logical_cluster_name: Optional[_builtins.str] = None,
                        name: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkloadQueuesResult:
    """
    Use this data source to get the list of workload queues.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Dws.get_workload_queues(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the cluster ID to which the workload queues belong.
    :param _builtins.str logical_cluster_name: Specifies the name of the cluster. Required
           if the cluster is a logical cluster.
    :param _builtins.str name: Specifies the name of the workload queue.
    :param _builtins.str region: Specifies the region in which to query the workload queues.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['logicalClusterName'] = logical_cluster_name
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dws/getWorkloadQueues:getWorkloadQueues', __args__, opts=opts, typ=GetWorkloadQueuesResult).value

    return AwaitableGetWorkloadQueuesResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        logical_cluster_name=pulumi.get(__ret__, 'logical_cluster_name'),
        name=pulumi.get(__ret__, 'name'),
        queues=pulumi.get(__ret__, 'queues'),
        region=pulumi.get(__ret__, 'region'))
def get_workload_queues_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                               logical_cluster_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkloadQueuesResult]:
    """
    Use this data source to get the list of workload queues.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Dws.get_workload_queues(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the cluster ID to which the workload queues belong.
    :param _builtins.str logical_cluster_name: Specifies the name of the cluster. Required
           if the cluster is a logical cluster.
    :param _builtins.str name: Specifies the name of the workload queue.
    :param _builtins.str region: Specifies the region in which to query the workload queues.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['logicalClusterName'] = logical_cluster_name
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dws/getWorkloadQueues:getWorkloadQueues', __args__, opts=opts, typ=GetWorkloadQueuesResult)
    return __ret__.apply(lambda __response__: GetWorkloadQueuesResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        logical_cluster_name=pulumi.get(__response__, 'logical_cluster_name'),
        name=pulumi.get(__response__, 'name'),
        queues=pulumi.get(__response__, 'queues'),
        region=pulumi.get(__response__, 'region')))
