# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DisasterRecoveryTaskArgs', 'DisasterRecoveryTask']

@pulumi.input_type
class DisasterRecoveryTaskArgs:
    def __init__(__self__, *,
                 dr_sync_period: pulumi.Input[_builtins.str],
                 dr_type: pulumi.Input[_builtins.str],
                 primary_cluster_id: pulumi.Input[_builtins.str],
                 standby_cluster_id: pulumi.Input[_builtins.str],
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DisasterRecoveryTask resource.
        :param pulumi.Input[_builtins.str] dr_sync_period: Specifies the synchronization period of the DR task. The valid
               value ranges from `1` to `3000`, the uint support `m` minute, `H` hour,`d` day. e.g. **20m**, means 20 minutes.
               When `status` is **unstart** or **stopped**, `dr_sync_period` can be change.
        :param pulumi.Input[_builtins.str] dr_type: Specifies the type of the DR task. Only support **az** now.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] primary_cluster_id: Specifies the ID of the primary cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] standby_cluster_id: Specifies the ID of the standby cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action for the DR task. The valid values are:
               + **start**: Starting the DR task. You can start a DR task when `status` is **unstart**, **stopped**
               or **start_failed**.
               + **pause**: Stopping the DR task. You can stop a DR task when `status` is **running** or **stop_failed**.
               + **switchover**: Switching to the DR cluster. You can perform a DR switchover when `status` is **running**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DR task. It must be unique and
               contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
               and must start with a letter. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "dr_sync_period", dr_sync_period)
        pulumi.set(__self__, "dr_type", dr_type)
        pulumi.set(__self__, "primary_cluster_id", primary_cluster_id)
        pulumi.set(__self__, "standby_cluster_id", standby_cluster_id)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="drSyncPeriod")
    def dr_sync_period(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the synchronization period of the DR task. The valid
        value ranges from `1` to `3000`, the uint support `m` minute, `H` hour,`d` day. e.g. **20m**, means 20 minutes.
        When `status` is **unstart** or **stopped**, `dr_sync_period` can be change.
        """
        return pulumi.get(self, "dr_sync_period")

    @dr_sync_period.setter
    def dr_sync_period(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dr_sync_period", value)

    @_builtins.property
    @pulumi.getter(name="drType")
    def dr_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the DR task. Only support **az** now.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "dr_type")

    @dr_type.setter
    def dr_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dr_type", value)

    @_builtins.property
    @pulumi.getter(name="primaryClusterId")
    def primary_cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the primary cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "primary_cluster_id")

    @primary_cluster_id.setter
    def primary_cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "primary_cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="standbyClusterId")
    def standby_cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the standby cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "standby_cluster_id")

    @standby_cluster_id.setter
    def standby_cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "standby_cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the action for the DR task. The valid values are:
        + **start**: Starting the DR task. You can start a DR task when `status` is **unstart**, **stopped**
        or **start_failed**.
        + **pause**: Stopping the DR task. You can stop a DR task when `status` is **running** or **stop_failed**.
        + **switchover**: Switching to the DR cluster. You can perform a DR switchover when `status` is **running**.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the DR task. It must be unique and
        contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
        and must start with a letter. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DisasterRecoveryTaskState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 dr_sync_period: Optional[pulumi.Input[_builtins.str]] = None,
                 dr_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_clusters: Optional[pulumi.Input[Sequence[pulumi.Input['DisasterRecoveryTaskPrimaryClusterArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 standby_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 standby_clusters: Optional[pulumi.Input[Sequence[pulumi.Input['DisasterRecoveryTaskStandbyClusterArgs']]]] = None,
                 started_at: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DisasterRecoveryTask resources.
        :param pulumi.Input[_builtins.str] action: Specifies the action for the DR task. The valid values are:
               + **start**: Starting the DR task. You can start a DR task when `status` is **unstart**, **stopped**
               or **start_failed**.
               + **pause**: Stopping the DR task. You can stop a DR task when `status` is **running** or **stop_failed**.
               + **switchover**: Switching to the DR cluster. You can perform a DR switchover when `status` is **running**.
        :param pulumi.Input[_builtins.str] created_at: The creation time, in UTC format.
        :param pulumi.Input[_builtins.str] dr_sync_period: Specifies the synchronization period of the DR task. The valid
               value ranges from `1` to `3000`, the uint support `m` minute, `H` hour,`d` day. e.g. **20m**, means 20 minutes.
               When `status` is **unstart** or **stopped**, `dr_sync_period` can be change.
        :param pulumi.Input[_builtins.str] dr_type: Specifies the type of the DR task. Only support **az** now.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DR task. It must be unique and
               contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
               and must start with a letter. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] primary_cluster_id: Specifies the ID of the primary cluster.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DisasterRecoveryTaskPrimaryClusterArgs']]] primary_clusters: The primary cluster.
               The cluster structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] standby_cluster_id: Specifies the ID of the standby cluster.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DisasterRecoveryTaskStandbyClusterArgs']]] standby_clusters: The standby cluster.
               The cluster structure is documented below.
        :param pulumi.Input[_builtins.str] started_at: The start time of the DR task, in UTC format.
        :param pulumi.Input[_builtins.str] status: The DR task cluster status.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dr_sync_period is not None:
            pulumi.set(__self__, "dr_sync_period", dr_sync_period)
        if dr_type is not None:
            pulumi.set(__self__, "dr_type", dr_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_cluster_id is not None:
            pulumi.set(__self__, "primary_cluster_id", primary_cluster_id)
        if primary_clusters is not None:
            pulumi.set(__self__, "primary_clusters", primary_clusters)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if standby_cluster_id is not None:
            pulumi.set(__self__, "standby_cluster_id", standby_cluster_id)
        if standby_clusters is not None:
            pulumi.set(__self__, "standby_clusters", standby_clusters)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the action for the DR task. The valid values are:
        + **start**: Starting the DR task. You can start a DR task when `status` is **unstart**, **stopped**
        or **start_failed**.
        + **pause**: Stopping the DR task. You can stop a DR task when `status` is **running** or **stop_failed**.
        + **switchover**: Switching to the DR cluster. You can perform a DR switchover when `status` is **running**.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time, in UTC format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="drSyncPeriod")
    def dr_sync_period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the synchronization period of the DR task. The valid
        value ranges from `1` to `3000`, the uint support `m` minute, `H` hour,`d` day. e.g. **20m**, means 20 minutes.
        When `status` is **unstart** or **stopped**, `dr_sync_period` can be change.
        """
        return pulumi.get(self, "dr_sync_period")

    @dr_sync_period.setter
    def dr_sync_period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dr_sync_period", value)

    @_builtins.property
    @pulumi.getter(name="drType")
    def dr_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the DR task. Only support **az** now.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "dr_type")

    @dr_type.setter
    def dr_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dr_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the DR task. It must be unique and
        contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
        and must start with a letter. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="primaryClusterId")
    def primary_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the primary cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "primary_cluster_id")

    @primary_cluster_id.setter
    def primary_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="primaryClusters")
    def primary_clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DisasterRecoveryTaskPrimaryClusterArgs']]]]:
        """
        The primary cluster.
        The cluster structure is documented below.
        """
        return pulumi.get(self, "primary_clusters")

    @primary_clusters.setter
    def primary_clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DisasterRecoveryTaskPrimaryClusterArgs']]]]):
        pulumi.set(self, "primary_clusters", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="standbyClusterId")
    def standby_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the standby cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "standby_cluster_id")

    @standby_cluster_id.setter
    def standby_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "standby_cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="standbyClusters")
    def standby_clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DisasterRecoveryTaskStandbyClusterArgs']]]]:
        """
        The standby cluster.
        The cluster structure is documented below.
        """
        return pulumi.get(self, "standby_clusters")

    @standby_clusters.setter
    def standby_clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DisasterRecoveryTaskStandbyClusterArgs']]]]):
        pulumi.set(self, "standby_clusters", value)

    @_builtins.property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The start time of the DR task, in UTC format.
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "started_at", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DR task cluster status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:Dws/disasterRecoveryTask:DisasterRecoveryTask")
class DisasterRecoveryTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 dr_sync_period: Optional[pulumi.Input[_builtins.str]] = None,
                 dr_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 standby_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB(DWS) disaster recovery task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        primary_cluster_id = config.require_object("primaryClusterId")
        standby_cluster_id = config.require_object("standbyClusterId")
        sync_period = config.require_object("syncPeriod")
        test = huaweicloud.dws.DisasterRecoveryTask("test",
            name=name,
            dr_type="az",
            primary_cluster_id=primary_cluster_id,
            standby_cluster_id=standby_cluster_id,
            dr_sync_period=sync_period,
            action="start")
        ```

        ## Import

        The DR task can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/disasterRecoveryTask:DisasterRecoveryTask test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `action`, `primary_cluster_id`, `standby_cluster_id`.

        It is generally recommended running `pulumi preview` after importing a DR task.

        You can then decide if changes should be applied to the DR task, or the resource definition

        should be updated to align with the DR task. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dws_disaster_recovery" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              action, primary_cluster_id, standby_cluster_id
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action for the DR task. The valid values are:
               + **start**: Starting the DR task. You can start a DR task when `status` is **unstart**, **stopped**
               or **start_failed**.
               + **pause**: Stopping the DR task. You can stop a DR task when `status` is **running** or **stop_failed**.
               + **switchover**: Switching to the DR cluster. You can perform a DR switchover when `status` is **running**.
        :param pulumi.Input[_builtins.str] dr_sync_period: Specifies the synchronization period of the DR task. The valid
               value ranges from `1` to `3000`, the uint support `m` minute, `H` hour,`d` day. e.g. **20m**, means 20 minutes.
               When `status` is **unstart** or **stopped**, `dr_sync_period` can be change.
        :param pulumi.Input[_builtins.str] dr_type: Specifies the type of the DR task. Only support **az** now.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DR task. It must be unique and
               contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
               and must start with a letter. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] primary_cluster_id: Specifies the ID of the primary cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] standby_cluster_id: Specifies the ID of the standby cluster.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DisasterRecoveryTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB(DWS) disaster recovery task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        primary_cluster_id = config.require_object("primaryClusterId")
        standby_cluster_id = config.require_object("standbyClusterId")
        sync_period = config.require_object("syncPeriod")
        test = huaweicloud.dws.DisasterRecoveryTask("test",
            name=name,
            dr_type="az",
            primary_cluster_id=primary_cluster_id,
            standby_cluster_id=standby_cluster_id,
            dr_sync_period=sync_period,
            action="start")
        ```

        ## Import

        The DR task can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/disasterRecoveryTask:DisasterRecoveryTask test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `action`, `primary_cluster_id`, `standby_cluster_id`.

        It is generally recommended running `pulumi preview` after importing a DR task.

        You can then decide if changes should be applied to the DR task, or the resource definition

        should be updated to align with the DR task. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dws_disaster_recovery" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              action, primary_cluster_id, standby_cluster_id
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DisasterRecoveryTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DisasterRecoveryTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 dr_sync_period: Optional[pulumi.Input[_builtins.str]] = None,
                 dr_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 standby_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DisasterRecoveryTaskArgs.__new__(DisasterRecoveryTaskArgs)

            __props__.__dict__["action"] = action
            if dr_sync_period is None and not opts.urn:
                raise TypeError("Missing required property 'dr_sync_period'")
            __props__.__dict__["dr_sync_period"] = dr_sync_period
            if dr_type is None and not opts.urn:
                raise TypeError("Missing required property 'dr_type'")
            __props__.__dict__["dr_type"] = dr_type
            __props__.__dict__["name"] = name
            if primary_cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'primary_cluster_id'")
            __props__.__dict__["primary_cluster_id"] = primary_cluster_id
            __props__.__dict__["region"] = region
            if standby_cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'standby_cluster_id'")
            __props__.__dict__["standby_cluster_id"] = standby_cluster_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["primary_clusters"] = None
            __props__.__dict__["standby_clusters"] = None
            __props__.__dict__["started_at"] = None
            __props__.__dict__["status"] = None
        super(DisasterRecoveryTask, __self__).__init__(
            'huaweicloud:Dws/disasterRecoveryTask:DisasterRecoveryTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            dr_sync_period: Optional[pulumi.Input[_builtins.str]] = None,
            dr_type: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            primary_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            primary_clusters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DisasterRecoveryTaskPrimaryClusterArgs', 'DisasterRecoveryTaskPrimaryClusterArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            standby_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            standby_clusters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DisasterRecoveryTaskStandbyClusterArgs', 'DisasterRecoveryTaskStandbyClusterArgsDict']]]]] = None,
            started_at: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'DisasterRecoveryTask':
        """
        Get an existing DisasterRecoveryTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action for the DR task. The valid values are:
               + **start**: Starting the DR task. You can start a DR task when `status` is **unstart**, **stopped**
               or **start_failed**.
               + **pause**: Stopping the DR task. You can stop a DR task when `status` is **running** or **stop_failed**.
               + **switchover**: Switching to the DR cluster. You can perform a DR switchover when `status` is **running**.
        :param pulumi.Input[_builtins.str] created_at: The creation time, in UTC format.
        :param pulumi.Input[_builtins.str] dr_sync_period: Specifies the synchronization period of the DR task. The valid
               value ranges from `1` to `3000`, the uint support `m` minute, `H` hour,`d` day. e.g. **20m**, means 20 minutes.
               When `status` is **unstart** or **stopped**, `dr_sync_period` can be change.
        :param pulumi.Input[_builtins.str] dr_type: Specifies the type of the DR task. Only support **az** now.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DR task. It must be unique and
               contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
               and must start with a letter. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] primary_cluster_id: Specifies the ID of the primary cluster.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DisasterRecoveryTaskPrimaryClusterArgs', 'DisasterRecoveryTaskPrimaryClusterArgsDict']]]] primary_clusters: The primary cluster.
               The cluster structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] standby_cluster_id: Specifies the ID of the standby cluster.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DisasterRecoveryTaskStandbyClusterArgs', 'DisasterRecoveryTaskStandbyClusterArgsDict']]]] standby_clusters: The standby cluster.
               The cluster structure is documented below.
        :param pulumi.Input[_builtins.str] started_at: The start time of the DR task, in UTC format.
        :param pulumi.Input[_builtins.str] status: The DR task cluster status.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DisasterRecoveryTaskState.__new__(_DisasterRecoveryTaskState)

        __props__.__dict__["action"] = action
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["dr_sync_period"] = dr_sync_period
        __props__.__dict__["dr_type"] = dr_type
        __props__.__dict__["name"] = name
        __props__.__dict__["primary_cluster_id"] = primary_cluster_id
        __props__.__dict__["primary_clusters"] = primary_clusters
        __props__.__dict__["region"] = region
        __props__.__dict__["standby_cluster_id"] = standby_cluster_id
        __props__.__dict__["standby_clusters"] = standby_clusters
        __props__.__dict__["started_at"] = started_at
        __props__.__dict__["status"] = status
        return DisasterRecoveryTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the action for the DR task. The valid values are:
        + **start**: Starting the DR task. You can start a DR task when `status` is **unstart**, **stopped**
        or **start_failed**.
        + **pause**: Stopping the DR task. You can stop a DR task when `status` is **running** or **stop_failed**.
        + **switchover**: Switching to the DR cluster. You can perform a DR switchover when `status` is **running**.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time, in UTC format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="drSyncPeriod")
    def dr_sync_period(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the synchronization period of the DR task. The valid
        value ranges from `1` to `3000`, the uint support `m` minute, `H` hour,`d` day. e.g. **20m**, means 20 minutes.
        When `status` is **unstart** or **stopped**, `dr_sync_period` can be change.
        """
        return pulumi.get(self, "dr_sync_period")

    @_builtins.property
    @pulumi.getter(name="drType")
    def dr_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the DR task. Only support **az** now.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "dr_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the DR task. It must be unique and
        contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
        and must start with a letter. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="primaryClusterId")
    def primary_cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the primary cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "primary_cluster_id")

    @_builtins.property
    @pulumi.getter(name="primaryClusters")
    def primary_clusters(self) -> pulumi.Output[Sequence['outputs.DisasterRecoveryTaskPrimaryCluster']]:
        """
        The primary cluster.
        The cluster structure is documented below.
        """
        return pulumi.get(self, "primary_clusters")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="standbyClusterId")
    def standby_cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the standby cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "standby_cluster_id")

    @_builtins.property
    @pulumi.getter(name="standbyClusters")
    def standby_clusters(self) -> pulumi.Output[Sequence['outputs.DisasterRecoveryTaskStandbyCluster']]:
        """
        The standby cluster.
        The cluster structure is documented below.
        """
        return pulumi.get(self, "standby_clusters")

    @_builtins.property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> pulumi.Output[_builtins.str]:
        """
        The start time of the DR task, in UTC format.
        """
        return pulumi.get(self, "started_at")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The DR task cluster status.
        """
        return pulumi.get(self, "status")

