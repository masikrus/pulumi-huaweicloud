# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDisasterRecoveryTasksResult',
    'AwaitableGetDisasterRecoveryTasksResult',
    'get_disaster_recovery_tasks',
    'get_disaster_recovery_tasks_output',
]

@pulumi.output_type
class GetDisasterRecoveryTasksResult:
    """
    A collection of values returned by getDisasterRecoveryTasks.
    """
    def __init__(__self__, dr_type=None, id=None, name=None, primary_cluster_name=None, primary_cluster_region=None, region=None, standby_cluster_name=None, standby_cluster_region=None, status=None, tasks=None):
        if dr_type and not isinstance(dr_type, str):
            raise TypeError("Expected argument 'dr_type' to be a str")
        pulumi.set(__self__, "dr_type", dr_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if primary_cluster_name and not isinstance(primary_cluster_name, str):
            raise TypeError("Expected argument 'primary_cluster_name' to be a str")
        pulumi.set(__self__, "primary_cluster_name", primary_cluster_name)
        if primary_cluster_region and not isinstance(primary_cluster_region, str):
            raise TypeError("Expected argument 'primary_cluster_region' to be a str")
        pulumi.set(__self__, "primary_cluster_region", primary_cluster_region)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if standby_cluster_name and not isinstance(standby_cluster_name, str):
            raise TypeError("Expected argument 'standby_cluster_name' to be a str")
        pulumi.set(__self__, "standby_cluster_name", standby_cluster_name)
        if standby_cluster_region and not isinstance(standby_cluster_region, str):
            raise TypeError("Expected argument 'standby_cluster_region' to be a str")
        pulumi.set(__self__, "standby_cluster_region", standby_cluster_region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)

    @_builtins.property
    @pulumi.getter(name="drType")
    def dr_type(self) -> Optional[_builtins.str]:
        """
        The type of the DR task.
        """
        return pulumi.get(self, "dr_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the DR task.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="primaryClusterName")
    def primary_cluster_name(self) -> Optional[_builtins.str]:
        """
        The name of the primary cluster.
        """
        return pulumi.get(self, "primary_cluster_name")

    @_builtins.property
    @pulumi.getter(name="primaryClusterRegion")
    def primary_cluster_region(self) -> Optional[_builtins.str]:
        """
        The region of the primary cluster.
        """
        return pulumi.get(self, "primary_cluster_region")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="standbyClusterName")
    def standby_cluster_name(self) -> Optional[_builtins.str]:
        """
        The name of the standby cluster.
        """
        return pulumi.get(self, "standby_cluster_name")

    @_builtins.property
    @pulumi.getter(name="standbyClusterRegion")
    def standby_cluster_region(self) -> Optional[_builtins.str]:
        """
        The region of the standby cluster.
        """
        return pulumi.get(self, "standby_cluster_region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the DR task.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetDisasterRecoveryTasksTaskResult']:
        """
        The list of DR tasks.
        The tasks structure is documented below.
        """
        return pulumi.get(self, "tasks")


class AwaitableGetDisasterRecoveryTasksResult(GetDisasterRecoveryTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDisasterRecoveryTasksResult(
            dr_type=self.dr_type,
            id=self.id,
            name=self.name,
            primary_cluster_name=self.primary_cluster_name,
            primary_cluster_region=self.primary_cluster_region,
            region=self.region,
            standby_cluster_name=self.standby_cluster_name,
            standby_cluster_region=self.standby_cluster_region,
            status=self.status,
            tasks=self.tasks)


def get_disaster_recovery_tasks(dr_type: Optional[_builtins.str] = None,
                                name: Optional[_builtins.str] = None,
                                primary_cluster_name: Optional[_builtins.str] = None,
                                primary_cluster_region: Optional[_builtins.str] = None,
                                region: Optional[_builtins.str] = None,
                                standby_cluster_name: Optional[_builtins.str] = None,
                                standby_cluster_region: Optional[_builtins.str] = None,
                                status: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDisasterRecoveryTasksResult:
    """
    Use this data source to get the list of DR tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dr_name = config.require_object("drName")
    test = huaweicloud.Dws.get_disaster_recovery_tasks(name=dr_name)
    ```


    :param _builtins.str dr_type: Specifies the type of the DR task. Only support **az** now.
    :param _builtins.str name: Specifies the name of the DR task.
    :param _builtins.str primary_cluster_name: Specifies the name of the primary cluster.
    :param _builtins.str primary_cluster_region: Specifies the region of the primary cluster.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str standby_cluster_name: Specifies the name of the standby cluster.
    :param _builtins.str standby_cluster_region: Specifies the region of the standby cluster.
    :param _builtins.str status: Specifies the status of the DR task. The valid values are:
           + **unstart**
           + **running**
           + **stopped**
           + **start_failed**
           + **stop_failed**
           + **abnormal**
    """
    __args__ = dict()
    __args__['drType'] = dr_type
    __args__['name'] = name
    __args__['primaryClusterName'] = primary_cluster_name
    __args__['primaryClusterRegion'] = primary_cluster_region
    __args__['region'] = region
    __args__['standbyClusterName'] = standby_cluster_name
    __args__['standbyClusterRegion'] = standby_cluster_region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dws/getDisasterRecoveryTasks:getDisasterRecoveryTasks', __args__, opts=opts, typ=GetDisasterRecoveryTasksResult).value

    return AwaitableGetDisasterRecoveryTasksResult(
        dr_type=pulumi.get(__ret__, 'dr_type'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        primary_cluster_name=pulumi.get(__ret__, 'primary_cluster_name'),
        primary_cluster_region=pulumi.get(__ret__, 'primary_cluster_region'),
        region=pulumi.get(__ret__, 'region'),
        standby_cluster_name=pulumi.get(__ret__, 'standby_cluster_name'),
        standby_cluster_region=pulumi.get(__ret__, 'standby_cluster_region'),
        status=pulumi.get(__ret__, 'status'),
        tasks=pulumi.get(__ret__, 'tasks'))
def get_disaster_recovery_tasks_output(dr_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       primary_cluster_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       primary_cluster_region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       standby_cluster_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       standby_cluster_region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDisasterRecoveryTasksResult]:
    """
    Use this data source to get the list of DR tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dr_name = config.require_object("drName")
    test = huaweicloud.Dws.get_disaster_recovery_tasks(name=dr_name)
    ```


    :param _builtins.str dr_type: Specifies the type of the DR task. Only support **az** now.
    :param _builtins.str name: Specifies the name of the DR task.
    :param _builtins.str primary_cluster_name: Specifies the name of the primary cluster.
    :param _builtins.str primary_cluster_region: Specifies the region of the primary cluster.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str standby_cluster_name: Specifies the name of the standby cluster.
    :param _builtins.str standby_cluster_region: Specifies the region of the standby cluster.
    :param _builtins.str status: Specifies the status of the DR task. The valid values are:
           + **unstart**
           + **running**
           + **stopped**
           + **start_failed**
           + **stop_failed**
           + **abnormal**
    """
    __args__ = dict()
    __args__['drType'] = dr_type
    __args__['name'] = name
    __args__['primaryClusterName'] = primary_cluster_name
    __args__['primaryClusterRegion'] = primary_cluster_region
    __args__['region'] = region
    __args__['standbyClusterName'] = standby_cluster_name
    __args__['standbyClusterRegion'] = standby_cluster_region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dws/getDisasterRecoveryTasks:getDisasterRecoveryTasks', __args__, opts=opts, typ=GetDisasterRecoveryTasksResult)
    return __ret__.apply(lambda __response__: GetDisasterRecoveryTasksResult(
        dr_type=pulumi.get(__response__, 'dr_type'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        primary_cluster_name=pulumi.get(__response__, 'primary_cluster_name'),
        primary_cluster_region=pulumi.get(__response__, 'primary_cluster_region'),
        region=pulumi.get(__response__, 'region'),
        standby_cluster_name=pulumi.get(__response__, 'standby_cluster_name'),
        standby_cluster_region=pulumi.get(__response__, 'standby_cluster_region'),
        status=pulumi.get(__response__, 'status'),
        tasks=pulumi.get(__response__, 'tasks')))
