# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ClusterElbArgs',
    'ClusterElbArgsDict',
    'ClusterEndpointArgs',
    'ClusterEndpointArgsDict',
    'ClusterMaintainWindowArgs',
    'ClusterMaintainWindowArgsDict',
    'ClusterPublicEndpointArgs',
    'ClusterPublicEndpointArgsDict',
    'ClusterPublicIpArgs',
    'ClusterPublicIpArgsDict',
    'ClusterVolumeArgs',
    'ClusterVolumeArgsDict',
    'DisasterRecoveryTaskPrimaryClusterArgs',
    'DisasterRecoveryTaskPrimaryClusterArgsDict',
    'DisasterRecoveryTaskStandbyClusterArgs',
    'DisasterRecoveryTaskStandbyClusterArgsDict',
    'LogicalClusterClusterRingArgs',
    'LogicalClusterClusterRingArgsDict',
    'LogicalClusterClusterRingRingHostArgs',
    'LogicalClusterClusterRingRingHostArgsDict',
    'ParameterConfigurationsConfigurationArgs',
    'ParameterConfigurationsConfigurationArgsDict',
    'WorkloadPlanStageArgs',
    'WorkloadPlanStageArgsDict',
    'WorkloadPlanStageQueueArgs',
    'WorkloadPlanStageQueueArgsDict',
    'WorkloadPlanStageQueueConfigurationArgs',
    'WorkloadPlanStageQueueConfigurationArgsDict',
    'WorkloadQueueConfigurationArgs',
    'WorkloadQueueConfigurationArgsDict',
]

MYPY = False

if not MYPY:
    class ClusterElbArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the ELB load balancer.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Cluster name, which must be unique and contains 4 to 64 characters, which
        consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
        Changing this creates a new cluster resource.
        """
        private_endpoint: NotRequired[pulumi.Input[_builtins.str]]
        """
        The private endpoint of the ELB load balancer.
        """
        private_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        The private IP address of the ELB load balancer.
        """
        private_ip_v6: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IPv6 address of the ELB load balancer.
        """
        public_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        The information about public IP.  

        Changing this parameter will create a new resource.

        The PublicIp structure is documented below.
        """
        vpc_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The VPC ID.
        Changing this parameter will create a new resource.
        """
elif False:
    ClusterElbArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterElbArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip_v6: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: The ID of the ELB load balancer.
        :param pulumi.Input[_builtins.str] name: Cluster name, which must be unique and contains 4 to 64 characters, which
               consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
               Changing this creates a new cluster resource.
        :param pulumi.Input[_builtins.str] private_endpoint: The private endpoint of the ELB load balancer.
        :param pulumi.Input[_builtins.str] private_ip: The private IP address of the ELB load balancer.
        :param pulumi.Input[_builtins.str] private_ip_v6: The IPv6 address of the ELB load balancer.
        :param pulumi.Input[_builtins.str] public_ip: The information about public IP.  
               
               Changing this parameter will create a new resource.
               
               The PublicIp structure is documented below.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID.
               Changing this parameter will create a new resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if private_ip_v6 is not None:
            pulumi.set(__self__, "private_ip_v6", private_ip_v6)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the ELB load balancer.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster name, which must be unique and contains 4 to 64 characters, which
        consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
        Changing this creates a new cluster resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The private endpoint of the ELB load balancer.
        """
        return pulumi.get(self, "private_endpoint")

    @private_endpoint.setter
    def private_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The private IP address of the ELB load balancer.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter(name="privateIpV6")
    def private_ip_v6(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IPv6 address of the ELB load balancer.
        """
        return pulumi.get(self, "private_ip_v6")

    @private_ip_v6.setter
    def private_ip_v6(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_v6", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The information about public IP.  

        Changing this parameter will create a new resource.

        The PublicIp structure is documented below.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


if not MYPY:
    class ClusterEndpointArgsDict(TypedDict):
        connect_info: NotRequired[pulumi.Input[_builtins.str]]
        """
        Private network connection information.
        """
        jdbc_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        JDBC URL. Format: jdbc:postgresql://<public_connect_info>/<YOUR_DATABASE_NAME>
        """
elif False:
    ClusterEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterEndpointArgs:
    def __init__(__self__, *,
                 connect_info: Optional[pulumi.Input[_builtins.str]] = None,
                 jdbc_url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] connect_info: Private network connection information.
        :param pulumi.Input[_builtins.str] jdbc_url: JDBC URL. Format: jdbc:postgresql://<public_connect_info>/<YOUR_DATABASE_NAME>
        """
        if connect_info is not None:
            pulumi.set(__self__, "connect_info", connect_info)
        if jdbc_url is not None:
            pulumi.set(__self__, "jdbc_url", jdbc_url)

    @_builtins.property
    @pulumi.getter(name="connectInfo")
    def connect_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private network connection information.
        """
        return pulumi.get(self, "connect_info")

    @connect_info.setter
    def connect_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connect_info", value)

    @_builtins.property
    @pulumi.getter(name="jdbcUrl")
    def jdbc_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        JDBC URL. Format: jdbc:postgresql://<public_connect_info>/<YOUR_DATABASE_NAME>
        """
        return pulumi.get(self, "jdbc_url")

    @jdbc_url.setter
    def jdbc_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "jdbc_url", value)


if not MYPY:
    class ClusterMaintainWindowArgsDict(TypedDict):
        day: NotRequired[pulumi.Input[_builtins.str]]
        """
        Maintenance time in each week in the unit of day.  
        The valid values are **Mon**, **Tue**, **Wed**, **Thu**, **Fri**,
        **Sat**, and **Sun**.
        """
        end_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Maintenance end time in HH:mm format. The time zone is GMT+0.
        """
        start_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Maintenance start time in HH:mm format. The time zone is GMT+0.
        """
elif False:
    ClusterMaintainWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterMaintainWindowArgs:
    def __init__(__self__, *,
                 day: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] day: Maintenance time in each week in the unit of day.  
               The valid values are **Mon**, **Tue**, **Wed**, **Thu**, **Fri**,
               **Sat**, and **Sun**.
        :param pulumi.Input[_builtins.str] end_time: Maintenance end time in HH:mm format. The time zone is GMT+0.
        :param pulumi.Input[_builtins.str] start_time: Maintenance start time in HH:mm format. The time zone is GMT+0.
        """
        if day is not None:
            pulumi.set(__self__, "day", day)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter
    def day(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Maintenance time in each week in the unit of day.  
        The valid values are **Mon**, **Tue**, **Wed**, **Thu**, **Fri**,
        **Sat**, and **Sun**.
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "day", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Maintenance end time in HH:mm format. The time zone is GMT+0.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Maintenance start time in HH:mm format. The time zone is GMT+0.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)


if not MYPY:
    class ClusterPublicEndpointArgsDict(TypedDict):
        jdbc_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        JDBC URL. Format: jdbc:postgresql://<public_connect_info>/<YOUR_DATABASE_NAME>
        """
        public_connect_info: NotRequired[pulumi.Input[_builtins.str]]
        """
        Public network connection information.
        """
elif False:
    ClusterPublicEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterPublicEndpointArgs:
    def __init__(__self__, *,
                 jdbc_url: Optional[pulumi.Input[_builtins.str]] = None,
                 public_connect_info: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] jdbc_url: JDBC URL. Format: jdbc:postgresql://<public_connect_info>/<YOUR_DATABASE_NAME>
        :param pulumi.Input[_builtins.str] public_connect_info: Public network connection information.
        """
        if jdbc_url is not None:
            pulumi.set(__self__, "jdbc_url", jdbc_url)
        if public_connect_info is not None:
            pulumi.set(__self__, "public_connect_info", public_connect_info)

    @_builtins.property
    @pulumi.getter(name="jdbcUrl")
    def jdbc_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        JDBC URL. Format: jdbc:postgresql://<public_connect_info>/<YOUR_DATABASE_NAME>
        """
        return pulumi.get(self, "jdbc_url")

    @jdbc_url.setter
    def jdbc_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "jdbc_url", value)

    @_builtins.property
    @pulumi.getter(name="publicConnectInfo")
    def public_connect_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public network connection information.
        """
        return pulumi.get(self, "public_connect_info")

    @public_connect_info.setter
    def public_connect_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_connect_info", value)


if not MYPY:
    class ClusterPublicIpArgsDict(TypedDict):
        eip_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The EIP ID.  

        <a name="DwsCluster_Volume"></a>
        The `Volume` block supports:
        """
        public_bind_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The bind type of public IP.  
        The valid value are **auto_assign**, **not_use**, and **bind_existing**. Defaults to **not_use**.
        """
elif False:
    ClusterPublicIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterPublicIpArgs:
    def __init__(__self__, *,
                 eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_bind_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] eip_id: The EIP ID.  
               
               <a name="DwsCluster_Volume"></a>
               The `Volume` block supports:
        :param pulumi.Input[_builtins.str] public_bind_type: The bind type of public IP.  
               The valid value are **auto_assign**, **not_use**, and **bind_existing**. Defaults to **not_use**.
        """
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if public_bind_type is not None:
            pulumi.set(__self__, "public_bind_type", public_bind_type)

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The EIP ID.  

        <a name="DwsCluster_Volume"></a>
        The `Volume` block supports:
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eip_id", value)

    @_builtins.property
    @pulumi.getter(name="publicBindType")
    def public_bind_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bind type of public IP.  
        The valid value are **auto_assign**, **not_use**, and **bind_existing**. Defaults to **not_use**.
        """
        return pulumi.get(self, "public_bind_type")

    @public_bind_type.setter
    def public_bind_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_bind_type", value)


if not MYPY:
    class ClusterVolumeArgsDict(TypedDict):
        capacity: NotRequired[pulumi.Input[_builtins.str]]
        """
        The capacity size, in GB.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The volume type. Value options are as follows:
        + **SSD**: Ultra-high I/O. The solid-state drive (SSD) is used.
        + **SAS**: High I/O. The SAS disk is used.
        + **SATA**: Common I/O. The SATA disk is used.
        """
elif False:
    ClusterVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterVolumeArgs:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] capacity: The capacity size, in GB.
        :param pulumi.Input[_builtins.str] type: The volume type. Value options are as follows:
               + **SSD**: Ultra-high I/O. The solid-state drive (SSD) is used.
               + **SAS**: High I/O. The SAS disk is used.
               + **SATA**: Common I/O. The SATA disk is used.
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The capacity size, in GB.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The volume type. Value options are as follows:
        + **SSD**: Ultra-high I/O. The solid-state drive (SSD) is used.
        + **SAS**: High I/O. The SAS disk is used.
        + **SATA**: Common I/O. The SATA disk is used.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DisasterRecoveryTaskPrimaryClusterArgsDict(TypedDict):
        cluster_az: NotRequired[pulumi.Input[_builtins.str]]
        """
        The availability zone to which the cluster belongs.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The cluster ID.
        """
        last_success_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The lasted success synchronized time, in UTC format.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the DR task. It must be unique and
        contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
        and must start with a letter. Changing this creates a new resource.
        """
        obs_bucket_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The cluster OBS name.
        """
        progress: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DR task cluster progress.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        role: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DR task cluster role.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DR task cluster status.
        """
elif False:
    DisasterRecoveryTaskPrimaryClusterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DisasterRecoveryTaskPrimaryClusterArgs:
    def __init__(__self__, *,
                 cluster_az: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_success_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 progress: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cluster_az: The availability zone to which the cluster belongs.
        :param pulumi.Input[_builtins.str] id: The cluster ID.
        :param pulumi.Input[_builtins.str] last_success_at: The lasted success synchronized time, in UTC format.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DR task. It must be unique and
               contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
               and must start with a letter. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] obs_bucket_name: The cluster OBS name.
        :param pulumi.Input[_builtins.str] progress: The DR task cluster progress.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] role: The DR task cluster role.
        :param pulumi.Input[_builtins.str] status: The DR task cluster status.
        """
        if cluster_az is not None:
            pulumi.set(__self__, "cluster_az", cluster_az)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_success_at is not None:
            pulumi.set(__self__, "last_success_at", last_success_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if obs_bucket_name is not None:
            pulumi.set(__self__, "obs_bucket_name", obs_bucket_name)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="clusterAz")
    def cluster_az(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The availability zone to which the cluster belongs.
        """
        return pulumi.get(self, "cluster_az")

    @cluster_az.setter
    def cluster_az(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_az", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="lastSuccessAt")
    def last_success_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lasted success synchronized time, in UTC format.
        """
        return pulumi.get(self, "last_success_at")

    @last_success_at.setter
    def last_success_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_success_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the DR task. It must be unique and
        contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
        and must start with a letter. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="obsBucketName")
    def obs_bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster OBS name.
        """
        return pulumi.get(self, "obs_bucket_name")

    @obs_bucket_name.setter
    def obs_bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "obs_bucket_name", value)

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DR task cluster progress.
        """
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "progress", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DR task cluster role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DR task cluster status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class DisasterRecoveryTaskStandbyClusterArgsDict(TypedDict):
        cluster_az: NotRequired[pulumi.Input[_builtins.str]]
        """
        The availability zone to which the cluster belongs.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The cluster ID.
        """
        last_success_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The lasted success synchronized time, in UTC format.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the DR task. It must be unique and
        contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
        and must start with a letter. Changing this creates a new resource.
        """
        obs_bucket_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The cluster OBS name.
        """
        progress: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DR task cluster progress.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        role: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DR task cluster role.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DR task cluster status.
        """
elif False:
    DisasterRecoveryTaskStandbyClusterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DisasterRecoveryTaskStandbyClusterArgs:
    def __init__(__self__, *,
                 cluster_az: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_success_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 progress: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cluster_az: The availability zone to which the cluster belongs.
        :param pulumi.Input[_builtins.str] id: The cluster ID.
        :param pulumi.Input[_builtins.str] last_success_at: The lasted success synchronized time, in UTC format.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DR task. It must be unique and
               contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
               and must start with a letter. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] obs_bucket_name: The cluster OBS name.
        :param pulumi.Input[_builtins.str] progress: The DR task cluster progress.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] role: The DR task cluster role.
        :param pulumi.Input[_builtins.str] status: The DR task cluster status.
        """
        if cluster_az is not None:
            pulumi.set(__self__, "cluster_az", cluster_az)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_success_at is not None:
            pulumi.set(__self__, "last_success_at", last_success_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if obs_bucket_name is not None:
            pulumi.set(__self__, "obs_bucket_name", obs_bucket_name)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="clusterAz")
    def cluster_az(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The availability zone to which the cluster belongs.
        """
        return pulumi.get(self, "cluster_az")

    @cluster_az.setter
    def cluster_az(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_az", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="lastSuccessAt")
    def last_success_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lasted success synchronized time, in UTC format.
        """
        return pulumi.get(self, "last_success_at")

    @last_success_at.setter
    def last_success_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_success_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the DR task. It must be unique and
        contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
        and must start with a letter. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="obsBucketName")
    def obs_bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster OBS name.
        """
        return pulumi.get(self, "obs_bucket_name")

    @obs_bucket_name.setter
    def obs_bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "obs_bucket_name", value)

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DR task cluster progress.
        """
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "progress", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DR task cluster role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DR task cluster status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class LogicalClusterClusterRingArgsDict(TypedDict):
        ring_hosts: pulumi.Input[Sequence[pulumi.Input['LogicalClusterClusterRingRingHostArgsDict']]]
        """
        Specifies the cluster host ring information. All host information of a ring
        must be specified. Changing this parameter will create a new resource.
        The ring_hosts structure is documented below.

        <a name="LogicalCluster_RingHosts"></a>
        The `ring_hosts` block supports:
        """
elif False:
    LogicalClusterClusterRingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LogicalClusterClusterRingArgs:
    def __init__(__self__, *,
                 ring_hosts: pulumi.Input[Sequence[pulumi.Input['LogicalClusterClusterRingRingHostArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['LogicalClusterClusterRingRingHostArgs']]] ring_hosts: Specifies the cluster host ring information. All host information of a ring
               must be specified. Changing this parameter will create a new resource.
               The ring_hosts structure is documented below.
               
               <a name="LogicalCluster_RingHosts"></a>
               The `ring_hosts` block supports:
        """
        pulumi.set(__self__, "ring_hosts", ring_hosts)

    @_builtins.property
    @pulumi.getter(name="ringHosts")
    def ring_hosts(self) -> pulumi.Input[Sequence[pulumi.Input['LogicalClusterClusterRingRingHostArgs']]]:
        """
        Specifies the cluster host ring information. All host information of a ring
        must be specified. Changing this parameter will create a new resource.
        The ring_hosts structure is documented below.

        <a name="LogicalCluster_RingHosts"></a>
        The `ring_hosts` block supports:
        """
        return pulumi.get(self, "ring_hosts")

    @ring_hosts.setter
    def ring_hosts(self, value: pulumi.Input[Sequence[pulumi.Input['LogicalClusterClusterRingRingHostArgs']]]):
        pulumi.set(self, "ring_hosts", value)


if not MYPY:
    class LogicalClusterClusterRingRingHostArgsDict(TypedDict):
        back_ip: pulumi.Input[_builtins.str]
        """
        Specifies the backend IP address. Changing this parameter will create a new resource.
        """
        cpu_cores: pulumi.Input[_builtins.int]
        """
        Specifies the number of CPU cores. Changing this parameter will create a new resource.
        """
        disk_size: pulumi.Input[_builtins.float]
        """
        Specifies the host disk size. Changing this parameter will create a new resource.
        """
        host_name: pulumi.Input[_builtins.str]
        """
        Specifies the host name. Changing this parameter will create a new resource.
        """
        memory: pulumi.Input[_builtins.float]
        """
        Specifies the host memory. Changing this parameter will create a new resource.
        """
elif False:
    LogicalClusterClusterRingRingHostArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LogicalClusterClusterRingRingHostArgs:
    def __init__(__self__, *,
                 back_ip: pulumi.Input[_builtins.str],
                 cpu_cores: pulumi.Input[_builtins.int],
                 disk_size: pulumi.Input[_builtins.float],
                 host_name: pulumi.Input[_builtins.str],
                 memory: pulumi.Input[_builtins.float]):
        """
        :param pulumi.Input[_builtins.str] back_ip: Specifies the backend IP address. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] cpu_cores: Specifies the number of CPU cores. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.float] disk_size: Specifies the host disk size. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] host_name: Specifies the host name. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.float] memory: Specifies the host memory. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "back_ip", back_ip)
        pulumi.set(__self__, "cpu_cores", cpu_cores)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "memory", memory)

    @_builtins.property
    @pulumi.getter(name="backIp")
    def back_ip(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend IP address. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "back_ip")

    @back_ip.setter
    def back_ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "back_ip", value)

    @_builtins.property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of CPU cores. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cpu_cores")

    @cpu_cores.setter
    def cpu_cores(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "cpu_cores", value)

    @_builtins.property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Input[_builtins.float]:
        """
        Specifies the host disk size. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "disk_size", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the host name. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> pulumi.Input[_builtins.float]:
        """
        Specifies the host memory. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "memory", value)


if not MYPY:
    class ParameterConfigurationsConfigurationArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the parameter.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the parameter.  
        The valid values are as follows:
        + **cn**
        + **dn**
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the parameter.
        """
elif False:
    ParameterConfigurationsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ParameterConfigurationsConfigurationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of the parameter.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the parameter.  
               The valid values are as follows:
               + **cn**
               + **dn**
        :param pulumi.Input[_builtins.str] value: Specifies the value of the parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the parameter.  
        The valid values are as follows:
        + **cn**
        + **dn**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class WorkloadPlanStageArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The plan stage ID.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the workload plan, which must be unique and contains
        `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
        lowercase letter. Changing this parameter will create a new resource.
        """
elif False:
    WorkloadPlanStageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadPlanStageArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: The plan stage ID.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the workload plan, which must be unique and contains
               `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
               lowercase letter. Changing this parameter will create a new resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The plan stage ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the workload plan, which must be unique and contains
        `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
        lowercase letter. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class WorkloadPlanStageQueueArgsDict(TypedDict):
        configurations: pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageQueueConfigurationArgsDict']]]
        """
        Specifies the configuration information for workload queue.
        Changing this creates a new resource.
        The configuration structure is documented below.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of workload queue which the workload plan stage running.
        Changing this creates a new resource.

        <a name="block_queues_configuration"></a>
        The `configuration` block supports:
        """
elif False:
    WorkloadPlanStageQueueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadPlanStageQueueArgs:
    def __init__(__self__, *,
                 configurations: pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageQueueConfigurationArgs']]],
                 name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageQueueConfigurationArgs']]] configurations: Specifies the configuration information for workload queue.
               Changing this creates a new resource.
               The configuration structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of workload queue which the workload plan stage running.
               Changing this creates a new resource.
               
               <a name="block_queues_configuration"></a>
               The `configuration` block supports:
        """
        pulumi.set(__self__, "configurations", configurations)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageQueueConfigurationArgs']]]:
        """
        Specifies the configuration information for workload queue.
        Changing this creates a new resource.
        The configuration structure is documented below.
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: pulumi.Input[Sequence[pulumi.Input['WorkloadPlanStageQueueConfigurationArgs']]]):
        pulumi.set(self, "configurations", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of workload queue which the workload plan stage running.
        Changing this creates a new resource.

        <a name="block_queues_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class WorkloadPlanStageQueueConfigurationArgsDict(TypedDict):
        resource_name: pulumi.Input[_builtins.str]
        """
        Specifies the resource name to be configured for the workload queue.
        Changing this creates a new resource. Value options:
        + **cpu**: Percentage of CPU time that can be used by users associated with the current workload queue to execute jobs.
        + **cpu_limit**: Maximum percentage of CPU cores used by a database user in a workload queue.
        + **memory**: Percentage of the memory that can be used by a workload queue.
        + **concurrency**: Maximum number of concurrent queries in a workload queue.
        + **shortQueryConcurrencyNum**: Maximum number of concurrent short queries in a workload queue.
        """
        resource_value: pulumi.Input[_builtins.int]
        """
        Specifies the value of the resource attribute for the workload queue.
        Changing this creates a new resource.
        When `resource_name` is **cpu**, the value is an integer ranging from `1` to `99`.
        When `resource_name` is **cpu_limit**, the value is an integer ranging from `0` to `100`. `0` indicates no limit.
        When `resource_name` is **memory**, `0` indicates no limit.
        When `resource_name` is **shortQueryConcurrencyNum**, `-1` indicates no limit.
        """
        resource_description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the resource attribute for
        the workload queue. Changing this creates a new resource.
        """
        value_unit: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value unit of the resource attribute for the workload queue.
        Changing this creates a new resource.
        """
elif False:
    WorkloadPlanStageQueueConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadPlanStageQueueConfigurationArgs:
    def __init__(__self__, *,
                 resource_name: pulumi.Input[_builtins.str],
                 resource_value: pulumi.Input[_builtins.int],
                 resource_description: Optional[pulumi.Input[_builtins.str]] = None,
                 value_unit: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] resource_name: Specifies the resource name to be configured for the workload queue.
               Changing this creates a new resource. Value options:
               + **cpu**: Percentage of CPU time that can be used by users associated with the current workload queue to execute jobs.
               + **cpu_limit**: Maximum percentage of CPU cores used by a database user in a workload queue.
               + **memory**: Percentage of the memory that can be used by a workload queue.
               + **concurrency**: Maximum number of concurrent queries in a workload queue.
               + **shortQueryConcurrencyNum**: Maximum number of concurrent short queries in a workload queue.
        :param pulumi.Input[_builtins.int] resource_value: Specifies the value of the resource attribute for the workload queue.
               Changing this creates a new resource.
               When `resource_name` is **cpu**, the value is an integer ranging from `1` to `99`.
               When `resource_name` is **cpu_limit**, the value is an integer ranging from `0` to `100`. `0` indicates no limit.
               When `resource_name` is **memory**, `0` indicates no limit.
               When `resource_name` is **shortQueryConcurrencyNum**, `-1` indicates no limit.
        :param pulumi.Input[_builtins.str] resource_description: Specifies the description of the resource attribute for
               the workload queue. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] value_unit: Specifies the value unit of the resource attribute for the workload queue.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_value", resource_value)
        if resource_description is not None:
            pulumi.set(__self__, "resource_description", resource_description)
        if value_unit is not None:
            pulumi.set(__self__, "value_unit", value_unit)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource name to be configured for the workload queue.
        Changing this creates a new resource. Value options:
        + **cpu**: Percentage of CPU time that can be used by users associated with the current workload queue to execute jobs.
        + **cpu_limit**: Maximum percentage of CPU cores used by a database user in a workload queue.
        + **memory**: Percentage of the memory that can be used by a workload queue.
        + **concurrency**: Maximum number of concurrent queries in a workload queue.
        + **shortQueryConcurrencyNum**: Maximum number of concurrent short queries in a workload queue.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the value of the resource attribute for the workload queue.
        Changing this creates a new resource.
        When `resource_name` is **cpu**, the value is an integer ranging from `1` to `99`.
        When `resource_name` is **cpu_limit**, the value is an integer ranging from `0` to `100`. `0` indicates no limit.
        When `resource_name` is **memory**, `0` indicates no limit.
        When `resource_name` is **shortQueryConcurrencyNum**, `-1` indicates no limit.
        """
        return pulumi.get(self, "resource_value")

    @resource_value.setter
    def resource_value(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "resource_value", value)

    @_builtins.property
    @pulumi.getter(name="resourceDescription")
    def resource_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the resource attribute for
        the workload queue. Changing this creates a new resource.
        """
        return pulumi.get(self, "resource_description")

    @resource_description.setter
    def resource_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_description", value)

    @_builtins.property
    @pulumi.getter(name="valueUnit")
    def value_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value unit of the resource attribute for the workload queue.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "value_unit")

    @value_unit.setter
    def value_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value_unit", value)


if not MYPY:
    class WorkloadQueueConfigurationArgsDict(TypedDict):
        resource_name: pulumi.Input[_builtins.str]
        """
        Specifies the resource name to be configured for the workload queue.  
        The valid value are as follows:
        + **memory**: memory resources.
        + **tablespace**: storage resources.
        + **activestatements**: query concurrency.
        + **cpu_limit**: exclusive quotas.
        + **cpu_share**: shared quotas.

        > When creating a workload queue, **memory**, **tablespace** and **activestatements** must be set. The **cpu_limit**
        and **cpu_share** are exclusive, one of them must be set, and the **cpu_limit** is only supported for clusters above
        **8.1.3**.
        """
        resource_value: pulumi.Input[_builtins.int]
        """
        Specifies the value of the resource attribute for the workload queue.
        + When the `resource name` is **memory**, the value range is from `0` to `100`, where `0` indicates no control,
        unit: %.
        + When the `resource name` is **tablespace**, the value range is from `-1` to `2,147,483,647`, where `-1` indicates
        no restriction, unit: MB.
        + When the `resource name` is **activestatements**, the value range is from `-1` to `2,147,483,647`, where `-1` and
        `0` indicates no control.
        + When the `resource name` is **cpu_limit**, the value range is from `0` to `99`, `0` means unlimited, unit: %.
        + When the `resource name` is **cpu_share**, the value range is from `1` to `99`, the default value is `20`, unit: %.
        """
elif False:
    WorkloadQueueConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadQueueConfigurationArgs:
    def __init__(__self__, *,
                 resource_name: pulumi.Input[_builtins.str],
                 resource_value: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.str] resource_name: Specifies the resource name to be configured for the workload queue.  
               The valid value are as follows:
               + **memory**: memory resources.
               + **tablespace**: storage resources.
               + **activestatements**: query concurrency.
               + **cpu_limit**: exclusive quotas.
               + **cpu_share**: shared quotas.
               
               > When creating a workload queue, **memory**, **tablespace** and **activestatements** must be set. The **cpu_limit**
               and **cpu_share** are exclusive, one of them must be set, and the **cpu_limit** is only supported for clusters above
               **8.1.3**.
        :param pulumi.Input[_builtins.int] resource_value: Specifies the value of the resource attribute for the workload queue.
               + When the `resource name` is **memory**, the value range is from `0` to `100`, where `0` indicates no control,
               unit: %.
               + When the `resource name` is **tablespace**, the value range is from `-1` to `2,147,483,647`, where `-1` indicates
               no restriction, unit: MB.
               + When the `resource name` is **activestatements**, the value range is from `-1` to `2,147,483,647`, where `-1` and
               `0` indicates no control.
               + When the `resource name` is **cpu_limit**, the value range is from `0` to `99`, `0` means unlimited, unit: %.
               + When the `resource name` is **cpu_share**, the value range is from `1` to `99`, the default value is `20`, unit: %.
        """
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_value", resource_value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource name to be configured for the workload queue.  
        The valid value are as follows:
        + **memory**: memory resources.
        + **tablespace**: storage resources.
        + **activestatements**: query concurrency.
        + **cpu_limit**: exclusive quotas.
        + **cpu_share**: shared quotas.

        > When creating a workload queue, **memory**, **tablespace** and **activestatements** must be set. The **cpu_limit**
        and **cpu_share** are exclusive, one of them must be set, and the **cpu_limit** is only supported for clusters above
        **8.1.3**.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the value of the resource attribute for the workload queue.
        + When the `resource name` is **memory**, the value range is from `0` to `100`, where `0` indicates no control,
        unit: %.
        + When the `resource name` is **tablespace**, the value range is from `-1` to `2,147,483,647`, where `-1` indicates
        no restriction, unit: MB.
        + When the `resource name` is **activestatements**, the value range is from `-1` to `2,147,483,647`, where `-1` and
        `0` indicates no control.
        + When the `resource name` is **cpu_limit**, the value range is from `0` to `99`, `0` means unlimited, unit: %.
        + When the `resource name` is **cpu_share**, the value range is from `1` to `99`, the default value is `20`, unit: %.
        """
        return pulumi.get(self, "resource_value")

    @resource_value.setter
    def resource_value(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "resource_value", value)


