# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ExtDataSourceArgs', 'ExtDataSource']

@pulumi.input_type
class ExtDataSourceArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 user_name: pulumi.Input[_builtins.str],
                 connect_info: Optional[pulumi.Input[_builtins.str]] = None,
                 data_source_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 reboot: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 user_pwd: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ExtDataSource resource.
        :param pulumi.Input[_builtins.str] cluster_id: The DWS cluster ID to which the external data source belongs.
               The cluster **type** must be **ANALYSIS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: The type of the external data source.  
               The valid values are **OBS**, and **MRS**.
               Changing this parameter will create a new resource.
               + If `type` is set to **MRS**, the `type` parameter of the `Mrs.cluster` resource must be **ANALYSIS**.
               + If `type` is set to **OBS**, the DWS cluster version must be `8.2.0` or later.
        :param pulumi.Input[_builtins.str] user_name: Specifies the user name of the external data source.  
               It is OBS agency name when `type` is **OBS**.
               This parameter can be modified only when `type` is **OBS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] connect_info: The connection information of the external data source.
               It is mandatory when **type** is **OBS**.
               The value is the **database** where the OBS data source connection is to be created.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] data_source_id: ID of the external data source. It is mandatory when **type** is **MRS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: The description of the external data source.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the external data source.  
               The name can contain `3` to `64` characters. Only letters, digits, and underscores (_) are allowed, and must start with
               a lowercase letter.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] reboot: Whether to reboot the cluster.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_pwd: The password of the external data source. It is mandatory when **type** is **MRS**.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_name", user_name)
        if connect_info is not None:
            pulumi.set(__self__, "connect_info", connect_info)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reboot is not None:
            pulumi.set(__self__, "reboot", reboot)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if user_pwd is not None:
            pulumi.set(__self__, "user_pwd", user_pwd)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        The DWS cluster ID to which the external data source belongs.
        The cluster **type** must be **ANALYSIS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the external data source.  
        The valid values are **OBS**, and **MRS**.
        Changing this parameter will create a new resource.
        + If `type` is set to **MRS**, the `type` parameter of the `Mrs.cluster` resource must be **ANALYSIS**.
        + If `type` is set to **OBS**, the DWS cluster version must be `8.2.0` or later.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the user name of the external data source.  
        It is OBS agency name when `type` is **OBS**.
        This parameter can be modified only when `type` is **OBS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="connectInfo")
    def connect_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The connection information of the external data source.
        It is mandatory when **type** is **OBS**.
        The value is the **database** where the OBS data source connection is to be created.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "connect_info")

    @connect_info.setter
    def connect_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connect_info", value)

    @_builtins.property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the external data source. It is mandatory when **type** is **MRS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "data_source_id")

    @data_source_id.setter
    def data_source_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_source_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the external data source.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the external data source.  
        The name can contain `3` to `64` characters. Only letters, digits, and underscores (_) are allowed, and must start with
        a lowercase letter.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def reboot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to reboot the cluster.
        """
        return pulumi.get(self, "reboot")

    @reboot.setter
    def reboot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reboot", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="userPwd")
    def user_pwd(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password of the external data source. It is mandatory when **type** is **MRS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_pwd")

    @user_pwd.setter
    def user_pwd(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_pwd", value)


@pulumi.input_type
class _ExtDataSourceState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configure_status: Optional[pulumi.Input[_builtins.str]] = None,
                 connect_info: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 data_source_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 reboot: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 user_pwd: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ExtDataSource resources.
        :param pulumi.Input[_builtins.str] cluster_id: The DWS cluster ID to which the external data source belongs.
               The cluster **type** must be **ANALYSIS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] configure_status: The configure status of the external data source.
        :param pulumi.Input[_builtins.str] connect_info: The connection information of the external data source.
               It is mandatory when **type** is **OBS**.
               The value is the **database** where the OBS data source connection is to be created.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the external data source.
        :param pulumi.Input[_builtins.str] data_source_id: ID of the external data source. It is mandatory when **type** is **MRS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: The description of the external data source.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the external data source.  
               The name can contain `3` to `64` characters. Only letters, digits, and underscores (_) are allowed, and must start with
               a lowercase letter.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] reboot: Whether to reboot the cluster.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the external data source.
        :param pulumi.Input[_builtins.str] type: The type of the external data source.  
               The valid values are **OBS**, and **MRS**.
               Changing this parameter will create a new resource.
               + If `type` is set to **MRS**, the `type` parameter of the `Mrs.cluster` resource must be **ANALYSIS**.
               + If `type` is set to **OBS**, the DWS cluster version must be `8.2.0` or later.
        :param pulumi.Input[_builtins.str] updated_at: The updated time of the external data source.
        :param pulumi.Input[_builtins.str] user_name: Specifies the user name of the external data source.  
               It is OBS agency name when `type` is **OBS**.
               This parameter can be modified only when `type` is **OBS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_pwd: The password of the external data source. It is mandatory when **type** is **MRS**.
               
               Changing this parameter will create a new resource.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if configure_status is not None:
            pulumi.set(__self__, "configure_status", configure_status)
        if connect_info is not None:
            pulumi.set(__self__, "connect_info", connect_info)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reboot is not None:
            pulumi.set(__self__, "reboot", reboot)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if user_pwd is not None:
            pulumi.set(__self__, "user_pwd", user_pwd)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DWS cluster ID to which the external data source belongs.
        The cluster **type** must be **ANALYSIS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="configureStatus")
    def configure_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The configure status of the external data source.
        """
        return pulumi.get(self, "configure_status")

    @configure_status.setter
    def configure_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "configure_status", value)

    @_builtins.property
    @pulumi.getter(name="connectInfo")
    def connect_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The connection information of the external data source.
        It is mandatory when **type** is **OBS**.
        The value is the **database** where the OBS data source connection is to be created.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "connect_info")

    @connect_info.setter
    def connect_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connect_info", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the external data source.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the external data source. It is mandatory when **type** is **MRS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "data_source_id")

    @data_source_id.setter
    def data_source_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_source_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the external data source.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the external data source.  
        The name can contain `3` to `64` characters. Only letters, digits, and underscores (_) are allowed, and must start with
        a lowercase letter.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def reboot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to reboot the cluster.
        """
        return pulumi.get(self, "reboot")

    @reboot.setter
    def reboot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reboot", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the external data source.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the external data source.  
        The valid values are **OBS**, and **MRS**.
        Changing this parameter will create a new resource.
        + If `type` is set to **MRS**, the `type` parameter of the `Mrs.cluster` resource must be **ANALYSIS**.
        + If `type` is set to **OBS**, the DWS cluster version must be `8.2.0` or later.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The updated time of the external data source.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user name of the external data source.  
        It is OBS agency name when `type` is **OBS**.
        This parameter can be modified only when `type` is **OBS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="userPwd")
    def user_pwd(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password of the external data source. It is mandatory when **type** is **MRS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_pwd")

    @user_pwd.setter
    def user_pwd(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_pwd", value)


@pulumi.type_token("huaweicloud:Dws/extDataSource:ExtDataSource")
class ExtDataSource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connect_info: Optional[pulumi.Input[_builtins.str]] = None,
                 data_source_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 reboot: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 user_pwd: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB(DWS) external data source resource within HuaweiCloud.

        ## Example Usage

        ### Create an external data source to MRS

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        mrs_id = config.require_object("mrsId")
        mrs_username = config.require_object("mrsUsername")
        mrs_password = config.require_object("mrsPassword")
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.dws.ExtDataSource("test",
            type="MRS",
            name="demo",
            data_source_id=mrs_id,
            user_name=mrs_username,
            user_pwd=mrs_password,
            cluster_id=cluster_id,
            description="This is a demo")
        ```

        ### Create an external data source to OBS

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        dws_agency_obs = config.require_object("dwsAgencyObs")
        dws_database = config.require_object("dwsDatabase")
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.dws.ExtDataSource("test",
            type="OBS",
            name="demo",
            user_name=dws_agency_obs,
            connect_info=dws_database,
            cluster_id=cluster_id,
            description="This is a demo")
        ```

        ## Import

        The dws external data source can be imported using `cluster_id` and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/extDataSource:ExtDataSource test <cluster_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `user_pwd`, `reboot`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dws_ext_data_source" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              user_pwd,reboot
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: The DWS cluster ID to which the external data source belongs.
               The cluster **type** must be **ANALYSIS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] connect_info: The connection information of the external data source.
               It is mandatory when **type** is **OBS**.
               The value is the **database** where the OBS data source connection is to be created.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] data_source_id: ID of the external data source. It is mandatory when **type** is **MRS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: The description of the external data source.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the external data source.  
               The name can contain `3` to `64` characters. Only letters, digits, and underscores (_) are allowed, and must start with
               a lowercase letter.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] reboot: Whether to reboot the cluster.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: The type of the external data source.  
               The valid values are **OBS**, and **MRS**.
               Changing this parameter will create a new resource.
               + If `type` is set to **MRS**, the `type` parameter of the `Mrs.cluster` resource must be **ANALYSIS**.
               + If `type` is set to **OBS**, the DWS cluster version must be `8.2.0` or later.
        :param pulumi.Input[_builtins.str] user_name: Specifies the user name of the external data source.  
               It is OBS agency name when `type` is **OBS**.
               This parameter can be modified only when `type` is **OBS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_pwd: The password of the external data source. It is mandatory when **type** is **MRS**.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExtDataSourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB(DWS) external data source resource within HuaweiCloud.

        ## Example Usage

        ### Create an external data source to MRS

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        mrs_id = config.require_object("mrsId")
        mrs_username = config.require_object("mrsUsername")
        mrs_password = config.require_object("mrsPassword")
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.dws.ExtDataSource("test",
            type="MRS",
            name="demo",
            data_source_id=mrs_id,
            user_name=mrs_username,
            user_pwd=mrs_password,
            cluster_id=cluster_id,
            description="This is a demo")
        ```

        ### Create an external data source to OBS

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        dws_agency_obs = config.require_object("dwsAgencyObs")
        dws_database = config.require_object("dwsDatabase")
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.dws.ExtDataSource("test",
            type="OBS",
            name="demo",
            user_name=dws_agency_obs,
            connect_info=dws_database,
            cluster_id=cluster_id,
            description="This is a demo")
        ```

        ## Import

        The dws external data source can be imported using `cluster_id` and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/extDataSource:ExtDataSource test <cluster_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `user_pwd`, `reboot`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dws_ext_data_source" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              user_pwd,reboot
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ExtDataSourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExtDataSourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connect_info: Optional[pulumi.Input[_builtins.str]] = None,
                 data_source_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 reboot: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 user_pwd: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExtDataSourceArgs.__new__(ExtDataSourceArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["connect_info"] = connect_info
            __props__.__dict__["data_source_id"] = data_source_id
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["reboot"] = reboot
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
            __props__.__dict__["user_pwd"] = None if user_pwd is None else pulumi.Output.secret(user_pwd)
            __props__.__dict__["configure_status"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["userPwd"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ExtDataSource, __self__).__init__(
            'huaweicloud:Dws/extDataSource:ExtDataSource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            configure_status: Optional[pulumi.Input[_builtins.str]] = None,
            connect_info: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            data_source_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            reboot: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            user_name: Optional[pulumi.Input[_builtins.str]] = None,
            user_pwd: Optional[pulumi.Input[_builtins.str]] = None) -> 'ExtDataSource':
        """
        Get an existing ExtDataSource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: The DWS cluster ID to which the external data source belongs.
               The cluster **type** must be **ANALYSIS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] configure_status: The configure status of the external data source.
        :param pulumi.Input[_builtins.str] connect_info: The connection information of the external data source.
               It is mandatory when **type** is **OBS**.
               The value is the **database** where the OBS data source connection is to be created.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the external data source.
        :param pulumi.Input[_builtins.str] data_source_id: ID of the external data source. It is mandatory when **type** is **MRS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: The description of the external data source.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The name of the external data source.  
               The name can contain `3` to `64` characters. Only letters, digits, and underscores (_) are allowed, and must start with
               a lowercase letter.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] reboot: Whether to reboot the cluster.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the external data source.
        :param pulumi.Input[_builtins.str] type: The type of the external data source.  
               The valid values are **OBS**, and **MRS**.
               Changing this parameter will create a new resource.
               + If `type` is set to **MRS**, the `type` parameter of the `Mrs.cluster` resource must be **ANALYSIS**.
               + If `type` is set to **OBS**, the DWS cluster version must be `8.2.0` or later.
        :param pulumi.Input[_builtins.str] updated_at: The updated time of the external data source.
        :param pulumi.Input[_builtins.str] user_name: Specifies the user name of the external data source.  
               It is OBS agency name when `type` is **OBS**.
               This parameter can be modified only when `type` is **OBS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_pwd: The password of the external data source. It is mandatory when **type** is **MRS**.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExtDataSourceState.__new__(_ExtDataSourceState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["configure_status"] = configure_status
        __props__.__dict__["connect_info"] = connect_info
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["data_source_id"] = data_source_id
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["reboot"] = reboot
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["user_name"] = user_name
        __props__.__dict__["user_pwd"] = user_pwd
        return ExtDataSource(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        The DWS cluster ID to which the external data source belongs.
        The cluster **type** must be **ANALYSIS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="configureStatus")
    def configure_status(self) -> pulumi.Output[_builtins.str]:
        """
        The configure status of the external data source.
        """
        return pulumi.get(self, "configure_status")

    @_builtins.property
    @pulumi.getter(name="connectInfo")
    def connect_info(self) -> pulumi.Output[_builtins.str]:
        """
        The connection information of the external data source.
        It is mandatory when **type** is **OBS**.
        The value is the **database** where the OBS data source connection is to be created.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "connect_info")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the external data source.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the external data source. It is mandatory when **type** is **MRS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "data_source_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        The description of the external data source.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the external data source.  
        The name can contain `3` to `64` characters. Only letters, digits, and underscores (_) are allowed, and must start with
        a lowercase letter.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def reboot(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether to reboot the cluster.
        """
        return pulumi.get(self, "reboot")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the external data source.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the external data source.  
        The valid values are **OBS**, and **MRS**.
        Changing this parameter will create a new resource.
        + If `type` is set to **MRS**, the `type` parameter of the `Mrs.cluster` resource must be **ANALYSIS**.
        + If `type` is set to **OBS**, the DWS cluster version must be `8.2.0` or later.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The updated time of the external data source.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the user name of the external data source.  
        It is OBS agency name when `type` is **OBS**.
        This parameter can be modified only when `type` is **OBS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="userPwd")
    def user_pwd(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The password of the external data source. It is mandatory when **type** is **MRS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_pwd")

