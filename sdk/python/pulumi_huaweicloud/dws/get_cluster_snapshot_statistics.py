# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetClusterSnapshotStatisticsResult',
    'AwaitableGetClusterSnapshotStatisticsResult',
    'get_cluster_snapshot_statistics',
    'get_cluster_snapshot_statistics_output',
]

@pulumi.output_type
class GetClusterSnapshotStatisticsResult:
    """
    A collection of values returned by getClusterSnapshotStatistics.
    """
    def __init__(__self__, cluster_id=None, id=None, region=None, statistics=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if statistics and not isinstance(statistics, list):
            raise TypeError("Expected argument 'statistics' to be a list")
        pulumi.set(__self__, "statistics", statistics)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def statistics(self) -> Sequence['outputs.GetClusterSnapshotStatisticsStatisticResult']:
        """
        The list of the snapshot statistics.
        """
        return pulumi.get(self, "statistics")


class AwaitableGetClusterSnapshotStatisticsResult(GetClusterSnapshotStatisticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterSnapshotStatisticsResult(
            cluster_id=self.cluster_id,
            id=self.id,
            region=self.region,
            statistics=self.statistics)


def get_cluster_snapshot_statistics(cluster_id: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterSnapshotStatisticsResult:
    """
    Use this data source to query the snapshot statistics under the specified DWS cluster within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dws_cluster_id = config.require_object("dwsClusterId")
    test = huaweicloud.Dws.get_cluster_snapshot_statistics(cluster_id=dws_cluster_id)
    ```


    :param _builtins.str cluster_id: Specified the ID of the DWS cluster.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dws/getClusterSnapshotStatistics:getClusterSnapshotStatistics', __args__, opts=opts, typ=GetClusterSnapshotStatisticsResult).value

    return AwaitableGetClusterSnapshotStatisticsResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        statistics=pulumi.get(__ret__, 'statistics'))
def get_cluster_snapshot_statistics_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClusterSnapshotStatisticsResult]:
    """
    Use this data source to query the snapshot statistics under the specified DWS cluster within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dws_cluster_id = config.require_object("dwsClusterId")
    test = huaweicloud.Dws.get_cluster_snapshot_statistics(cluster_id=dws_cluster_id)
    ```


    :param _builtins.str cluster_id: Specified the ID of the DWS cluster.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dws/getClusterSnapshotStatistics:getClusterSnapshotStatistics', __args__, opts=opts, typ=GetClusterSnapshotStatisticsResult)
    return __ret__.apply(lambda __response__: GetClusterSnapshotStatisticsResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        statistics=pulumi.get(__response__, 'statistics')))
