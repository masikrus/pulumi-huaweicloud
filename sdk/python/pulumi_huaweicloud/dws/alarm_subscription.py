# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AlarmSubscriptionArgs', 'AlarmSubscription']

@pulumi.input_type
class AlarmSubscriptionArgs:
    def __init__(__self__, *,
                 enable: pulumi.Input[_builtins.int],
                 notification_target: pulumi.Input[_builtins.str],
                 notification_target_name: pulumi.Input[_builtins.str],
                 notification_target_type: pulumi.Input[_builtins.str],
                 time_zone: pulumi.Input[_builtins.str],
                 alarm_level: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AlarmSubscription resource.
        :param pulumi.Input[_builtins.int] enable: Whether the alarm subscription is enabled.  
               The options are as follows:
               + **1**: enable.
               + **0**: closed.
        :param pulumi.Input[_builtins.str] notification_target: The notification target.
        :param pulumi.Input[_builtins.str] notification_target_name: The name of notification target.
        :param pulumi.Input[_builtins.str] notification_target_type: The type of notification target. Currently only **SMN** is supported.
        :param pulumi.Input[_builtins.str] time_zone: The time_zone of the alarm subscription.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] alarm_level: The level of alarm. separate multiple alarm levels with commas (,).
               The valid values are **urgent**, **important**, **minor**, and **prompt**.
        :param pulumi.Input[_builtins.str] name: The name of the alarm subscription.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "notification_target", notification_target)
        pulumi.set(__self__, "notification_target_name", notification_target_name)
        pulumi.set(__self__, "notification_target_type", notification_target_type)
        pulumi.set(__self__, "time_zone", time_zone)
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> pulumi.Input[_builtins.int]:
        """
        Whether the alarm subscription is enabled.  
        The options are as follows:
        + **1**: enable.
        + **0**: closed.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="notificationTarget")
    def notification_target(self) -> pulumi.Input[_builtins.str]:
        """
        The notification target.
        """
        return pulumi.get(self, "notification_target")

    @notification_target.setter
    def notification_target(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "notification_target", value)

    @_builtins.property
    @pulumi.getter(name="notificationTargetName")
    def notification_target_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of notification target.
        """
        return pulumi.get(self, "notification_target_name")

    @notification_target_name.setter
    def notification_target_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "notification_target_name", value)

    @_builtins.property
    @pulumi.getter(name="notificationTargetType")
    def notification_target_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of notification target. Currently only **SMN** is supported.
        """
        return pulumi.get(self, "notification_target_type")

    @notification_target_type.setter
    def notification_target_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "notification_target_type", value)

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[_builtins.str]:
        """
        The time_zone of the alarm subscription.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "time_zone", value)

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The level of alarm. separate multiple alarm levels with commas (,).
        The valid values are **urgent**, **important**, **minor**, and **prompt**.
        """
        return pulumi.get(self, "alarm_level")

    @alarm_level.setter
    def alarm_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_level", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the alarm subscription.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AlarmSubscriptionState:
    def __init__(__self__, *,
                 alarm_level: Optional[pulumi.Input[_builtins.str]] = None,
                 enable: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AlarmSubscription resources.
        :param pulumi.Input[_builtins.str] alarm_level: The level of alarm. separate multiple alarm levels with commas (,).
               The valid values are **urgent**, **important**, **minor**, and **prompt**.
        :param pulumi.Input[_builtins.int] enable: Whether the alarm subscription is enabled.  
               The options are as follows:
               + **1**: enable.
               + **0**: closed.
        :param pulumi.Input[_builtins.str] name: The name of the alarm subscription.
        :param pulumi.Input[_builtins.str] notification_target: The notification target.
        :param pulumi.Input[_builtins.str] notification_target_name: The name of notification target.
        :param pulumi.Input[_builtins.str] notification_target_type: The type of notification target. Currently only **SMN** is supported.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] time_zone: The time_zone of the alarm subscription.  
               
               Changing this parameter will create a new resource.
        """
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_target is not None:
            pulumi.set(__self__, "notification_target", notification_target)
        if notification_target_name is not None:
            pulumi.set(__self__, "notification_target_name", notification_target_name)
        if notification_target_type is not None:
            pulumi.set(__self__, "notification_target_type", notification_target_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The level of alarm. separate multiple alarm levels with commas (,).
        The valid values are **urgent**, **important**, **minor**, and **prompt**.
        """
        return pulumi.get(self, "alarm_level")

    @alarm_level.setter
    def alarm_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_level", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Whether the alarm subscription is enabled.  
        The options are as follows:
        + **1**: enable.
        + **0**: closed.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the alarm subscription.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="notificationTarget")
    def notification_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The notification target.
        """
        return pulumi.get(self, "notification_target")

    @notification_target.setter
    def notification_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_target", value)

    @_builtins.property
    @pulumi.getter(name="notificationTargetName")
    def notification_target_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of notification target.
        """
        return pulumi.get(self, "notification_target_name")

    @notification_target_name.setter
    def notification_target_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_target_name", value)

    @_builtins.property
    @pulumi.getter(name="notificationTargetType")
    def notification_target_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of notification target. Currently only **SMN** is supported.
        """
        return pulumi.get(self, "notification_target_type")

    @notification_target_type.setter
    def notification_target_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_target_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time_zone of the alarm subscription.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.type_token("huaweicloud:Dws/alarmSubscription:AlarmSubscription")
class AlarmSubscription(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_level: Optional[pulumi.Input[_builtins.str]] = None,
                 enable: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB(DWS) alarm subscription resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        smn_urn = config.require_object("smnUrn")
        smn_name = config.require_object("smnName")
        test = huaweicloud.dws.AlarmSubscription("test",
            name="demo",
            enable=1,
            notification_target=smn_urn,
            notification_target_name=smn_name,
            notification_target_type="SMN",
            alarm_level="urgent,important",
            time_zone="GMT+08:00")
        ```

        ## Import

        The DWS alarm subscription can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/alarmSubscription:AlarmSubscription test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alarm_level: The level of alarm. separate multiple alarm levels with commas (,).
               The valid values are **urgent**, **important**, **minor**, and **prompt**.
        :param pulumi.Input[_builtins.int] enable: Whether the alarm subscription is enabled.  
               The options are as follows:
               + **1**: enable.
               + **0**: closed.
        :param pulumi.Input[_builtins.str] name: The name of the alarm subscription.
        :param pulumi.Input[_builtins.str] notification_target: The notification target.
        :param pulumi.Input[_builtins.str] notification_target_name: The name of notification target.
        :param pulumi.Input[_builtins.str] notification_target_type: The type of notification target. Currently only **SMN** is supported.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] time_zone: The time_zone of the alarm subscription.  
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlarmSubscriptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB(DWS) alarm subscription resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        smn_urn = config.require_object("smnUrn")
        smn_name = config.require_object("smnName")
        test = huaweicloud.dws.AlarmSubscription("test",
            name="demo",
            enable=1,
            notification_target=smn_urn,
            notification_target_name=smn_name,
            notification_target_type="SMN",
            alarm_level="urgent,important",
            time_zone="GMT+08:00")
        ```

        ## Import

        The DWS alarm subscription can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/alarmSubscription:AlarmSubscription test <id>
        ```

        :param str resource_name: The name of the resource.
        :param AlarmSubscriptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlarmSubscriptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_level: Optional[pulumi.Input[_builtins.str]] = None,
                 enable: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlarmSubscriptionArgs.__new__(AlarmSubscriptionArgs)

            __props__.__dict__["alarm_level"] = alarm_level
            if enable is None and not opts.urn:
                raise TypeError("Missing required property 'enable'")
            __props__.__dict__["enable"] = enable
            __props__.__dict__["name"] = name
            if notification_target is None and not opts.urn:
                raise TypeError("Missing required property 'notification_target'")
            __props__.__dict__["notification_target"] = notification_target
            if notification_target_name is None and not opts.urn:
                raise TypeError("Missing required property 'notification_target_name'")
            __props__.__dict__["notification_target_name"] = notification_target_name
            if notification_target_type is None and not opts.urn:
                raise TypeError("Missing required property 'notification_target_type'")
            __props__.__dict__["notification_target_type"] = notification_target_type
            __props__.__dict__["region"] = region
            if time_zone is None and not opts.urn:
                raise TypeError("Missing required property 'time_zone'")
            __props__.__dict__["time_zone"] = time_zone
        super(AlarmSubscription, __self__).__init__(
            'huaweicloud:Dws/alarmSubscription:AlarmSubscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alarm_level: Optional[pulumi.Input[_builtins.str]] = None,
            enable: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            notification_target: Optional[pulumi.Input[_builtins.str]] = None,
            notification_target_name: Optional[pulumi.Input[_builtins.str]] = None,
            notification_target_type: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            time_zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'AlarmSubscription':
        """
        Get an existing AlarmSubscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alarm_level: The level of alarm. separate multiple alarm levels with commas (,).
               The valid values are **urgent**, **important**, **minor**, and **prompt**.
        :param pulumi.Input[_builtins.int] enable: Whether the alarm subscription is enabled.  
               The options are as follows:
               + **1**: enable.
               + **0**: closed.
        :param pulumi.Input[_builtins.str] name: The name of the alarm subscription.
        :param pulumi.Input[_builtins.str] notification_target: The notification target.
        :param pulumi.Input[_builtins.str] notification_target_name: The name of notification target.
        :param pulumi.Input[_builtins.str] notification_target_type: The type of notification target. Currently only **SMN** is supported.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] time_zone: The time_zone of the alarm subscription.  
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlarmSubscriptionState.__new__(_AlarmSubscriptionState)

        __props__.__dict__["alarm_level"] = alarm_level
        __props__.__dict__["enable"] = enable
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_target"] = notification_target
        __props__.__dict__["notification_target_name"] = notification_target_name
        __props__.__dict__["notification_target_type"] = notification_target_type
        __props__.__dict__["region"] = region
        __props__.__dict__["time_zone"] = time_zone
        return AlarmSubscription(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> pulumi.Output[_builtins.str]:
        """
        The level of alarm. separate multiple alarm levels with commas (,).
        The valid values are **urgent**, **important**, **minor**, and **prompt**.
        """
        return pulumi.get(self, "alarm_level")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> pulumi.Output[_builtins.int]:
        """
        Whether the alarm subscription is enabled.  
        The options are as follows:
        + **1**: enable.
        + **0**: closed.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the alarm subscription.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notificationTarget")
    def notification_target(self) -> pulumi.Output[_builtins.str]:
        """
        The notification target.
        """
        return pulumi.get(self, "notification_target")

    @_builtins.property
    @pulumi.getter(name="notificationTargetName")
    def notification_target_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of notification target.
        """
        return pulumi.get(self, "notification_target_name")

    @_builtins.property
    @pulumi.getter(name="notificationTargetType")
    def notification_target_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of notification target. Currently only **SMN** is supported.
        """
        return pulumi.get(self, "notification_target_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Output[_builtins.str]:
        """
        The time_zone of the alarm subscription.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time_zone")

