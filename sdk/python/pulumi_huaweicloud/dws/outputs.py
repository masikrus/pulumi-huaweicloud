# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ClusterElb',
    'ClusterEndpoint',
    'ClusterMaintainWindow',
    'ClusterPublicEndpoint',
    'ClusterPublicIp',
    'ClusterVolume',
    'DisasterRecoveryTaskPrimaryCluster',
    'DisasterRecoveryTaskStandbyCluster',
    'LogicalClusterClusterRing',
    'LogicalClusterClusterRingRingHost',
    'ParameterConfigurationsConfiguration',
    'WorkloadPlanStage',
    'WorkloadPlanStageQueue',
    'WorkloadPlanStageQueueConfiguration',
    'WorkloadQueueConfiguration',
    'GetAlarmSubscriptionsSubscriptionResult',
    'GetAvailabilityZonesAvailabilityZoneResult',
    'GetClusterCnsCnResult',
    'GetClusterLogsLogResult',
    'GetClusterNodesNodeResult',
    'GetClusterParametersParameterResult',
    'GetClusterParametersParameterValueResult',
    'GetClusterSnapshotStatisticsStatisticResult',
    'GetClusterTopoRingsRingResult',
    'GetClusterTopoRingsRingInstanceResult',
    'GetClustersClusterResult',
    'GetClustersClusterEndpointResult',
    'GetClustersClusterNodeResult',
    'GetClustersClusterPublicEndpointResult',
    'GetClustersClusterPublicIpResult',
    'GetDisasterRecoveryTasksTaskResult',
    'GetEventSubscriptionsEventSubscriptionResult',
    'GetFlaovrsFlavorResult',
    'GetFlaovrsFlavorElasticVolumeSpecResult',
    'GetLogicalClusterRingsClusterRingResult',
    'GetLogicalClusterRingsClusterRingRingHostResult',
    'GetLogicalClusterVolumesVolumeResult',
    'GetLogicalClustersLogicalClusterResult',
    'GetLogicalClustersLogicalClusterClusterRingResult',
    'GetLogicalClustersLogicalClusterClusterRingRingHostResult',
    'GetQuotasQuotaResult',
    'GetSnapshotPoliciesPolicyResult',
    'GetSnapshotsSnapshotResult',
    'GetStatisticsStatisticResult',
    'GetWorkloadPlansPlanResult',
    'GetWorkloadQueueAssociatedUsersUserResult',
    'GetWorkloadQueueAssociatedUsersUserOccupyResourceListResult',
    'GetWorkloadQueuesQueueResult',
    'GetWorkloadQueuesQueueConfigurationResult',
]

@pulumi.output_type
class ClusterElb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateEndpoint":
            suggest = "private_endpoint"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "privateIpV6":
            suggest = "private_ip_v6"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterElb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterElb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterElb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_endpoint: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None,
                 private_ip_v6: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 vpc_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: The ID of the ELB load balancer.
        :param _builtins.str name: Cluster name, which must be unique and contains 4 to 64 characters, which
               consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
               Changing this creates a new cluster resource.
        :param _builtins.str private_endpoint: The private endpoint of the ELB load balancer.
        :param _builtins.str private_ip: The private IP address of the ELB load balancer.
        :param _builtins.str private_ip_v6: The IPv6 address of the ELB load balancer.
        :param _builtins.str public_ip: The information about public IP.  
               
               Changing this parameter will create a new resource.
               
               The PublicIp structure is documented below.
        :param _builtins.str vpc_id: The VPC ID.
               Changing this parameter will create a new resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if private_ip_v6 is not None:
            pulumi.set(__self__, "private_ip_v6", private_ip_v6)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the ELB load balancer.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Cluster name, which must be unique and contains 4 to 64 characters, which
        consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
        Changing this creates a new cluster resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional[_builtins.str]:
        """
        The private endpoint of the ELB load balancer.
        """
        return pulumi.get(self, "private_endpoint")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        The private IP address of the ELB load balancer.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="privateIpV6")
    def private_ip_v6(self) -> Optional[_builtins.str]:
        """
        The IPv6 address of the ELB load balancer.
        """
        return pulumi.get(self, "private_ip_v6")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The information about public IP.  

        Changing this parameter will create a new resource.

        The PublicIp structure is documented below.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        """
        The VPC ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class ClusterEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectInfo":
            suggest = "connect_info"
        elif key == "jdbcUrl":
            suggest = "jdbc_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_info: Optional[_builtins.str] = None,
                 jdbc_url: Optional[_builtins.str] = None):
        """
        :param _builtins.str connect_info: Private network connection information.
        :param _builtins.str jdbc_url: JDBC URL. Format: jdbc:postgresql://<public_connect_info>/<YOUR_DATABASE_NAME>
        """
        if connect_info is not None:
            pulumi.set(__self__, "connect_info", connect_info)
        if jdbc_url is not None:
            pulumi.set(__self__, "jdbc_url", jdbc_url)

    @_builtins.property
    @pulumi.getter(name="connectInfo")
    def connect_info(self) -> Optional[_builtins.str]:
        """
        Private network connection information.
        """
        return pulumi.get(self, "connect_info")

    @_builtins.property
    @pulumi.getter(name="jdbcUrl")
    def jdbc_url(self) -> Optional[_builtins.str]:
        """
        JDBC URL. Format: jdbc:postgresql://<public_connect_info>/<YOUR_DATABASE_NAME>
        """
        return pulumi.get(self, "jdbc_url")


@pulumi.output_type
class ClusterMaintainWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterMaintainWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterMaintainWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterMaintainWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day: Optional[_builtins.str] = None,
                 end_time: Optional[_builtins.str] = None,
                 start_time: Optional[_builtins.str] = None):
        """
        :param _builtins.str day: Maintenance time in each week in the unit of day.  
               The valid values are **Mon**, **Tue**, **Wed**, **Thu**, **Fri**,
               **Sat**, and **Sun**.
        :param _builtins.str end_time: Maintenance end time in HH:mm format. The time zone is GMT+0.
        :param _builtins.str start_time: Maintenance start time in HH:mm format. The time zone is GMT+0.
        """
        if day is not None:
            pulumi.set(__self__, "day", day)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter
    def day(self) -> Optional[_builtins.str]:
        """
        Maintenance time in each week in the unit of day.  
        The valid values are **Mon**, **Tue**, **Wed**, **Thu**, **Fri**,
        **Sat**, and **Sun**.
        """
        return pulumi.get(self, "day")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Maintenance end time in HH:mm format. The time zone is GMT+0.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        """
        Maintenance start time in HH:mm format. The time zone is GMT+0.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class ClusterPublicEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jdbcUrl":
            suggest = "jdbc_url"
        elif key == "publicConnectInfo":
            suggest = "public_connect_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPublicEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPublicEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPublicEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jdbc_url: Optional[_builtins.str] = None,
                 public_connect_info: Optional[_builtins.str] = None):
        """
        :param _builtins.str jdbc_url: JDBC URL. Format: jdbc:postgresql://<public_connect_info>/<YOUR_DATABASE_NAME>
        :param _builtins.str public_connect_info: Public network connection information.
        """
        if jdbc_url is not None:
            pulumi.set(__self__, "jdbc_url", jdbc_url)
        if public_connect_info is not None:
            pulumi.set(__self__, "public_connect_info", public_connect_info)

    @_builtins.property
    @pulumi.getter(name="jdbcUrl")
    def jdbc_url(self) -> Optional[_builtins.str]:
        """
        JDBC URL. Format: jdbc:postgresql://<public_connect_info>/<YOUR_DATABASE_NAME>
        """
        return pulumi.get(self, "jdbc_url")

    @_builtins.property
    @pulumi.getter(name="publicConnectInfo")
    def public_connect_info(self) -> Optional[_builtins.str]:
        """
        Public network connection information.
        """
        return pulumi.get(self, "public_connect_info")


@pulumi.output_type
class ClusterPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eipId":
            suggest = "eip_id"
        elif key == "publicBindType":
            suggest = "public_bind_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 eip_id: Optional[_builtins.str] = None,
                 public_bind_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str eip_id: The EIP ID.  
               
               <a name="DwsCluster_Volume"></a>
               The `Volume` block supports:
        :param _builtins.str public_bind_type: The bind type of public IP.  
               The valid value are **auto_assign**, **not_use**, and **bind_existing**. Defaults to **not_use**.
        """
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if public_bind_type is not None:
            pulumi.set(__self__, "public_bind_type", public_bind_type)

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[_builtins.str]:
        """
        The EIP ID.  

        <a name="DwsCluster_Volume"></a>
        The `Volume` block supports:
        """
        return pulumi.get(self, "eip_id")

    @_builtins.property
    @pulumi.getter(name="publicBindType")
    def public_bind_type(self) -> Optional[_builtins.str]:
        """
        The bind type of public IP.  
        The valid value are **auto_assign**, **not_use**, and **bind_existing**. Defaults to **not_use**.
        """
        return pulumi.get(self, "public_bind_type")


@pulumi.output_type
class ClusterVolume(dict):
    def __init__(__self__, *,
                 capacity: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str capacity: The capacity size, in GB.
        :param _builtins.str type: The volume type. Value options are as follows:
               + **SSD**: Ultra-high I/O. The solid-state drive (SSD) is used.
               + **SAS**: High I/O. The SAS disk is used.
               + **SATA**: Common I/O. The SATA disk is used.
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[_builtins.str]:
        """
        The capacity size, in GB.
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The volume type. Value options are as follows:
        + **SSD**: Ultra-high I/O. The solid-state drive (SSD) is used.
        + **SAS**: High I/O. The SAS disk is used.
        + **SATA**: Common I/O. The SATA disk is used.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DisasterRecoveryTaskPrimaryCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterAz":
            suggest = "cluster_az"
        elif key == "lastSuccessAt":
            suggest = "last_success_at"
        elif key == "obsBucketName":
            suggest = "obs_bucket_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DisasterRecoveryTaskPrimaryCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DisasterRecoveryTaskPrimaryCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DisasterRecoveryTaskPrimaryCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_az: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 last_success_at: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 obs_bucket_name: Optional[_builtins.str] = None,
                 progress: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str cluster_az: The availability zone to which the cluster belongs.
        :param _builtins.str id: The cluster ID.
        :param _builtins.str last_success_at: The lasted success synchronized time, in UTC format.
        :param _builtins.str name: Specifies the name of the DR task. It must be unique and
               contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
               and must start with a letter. Changing this creates a new resource.
        :param _builtins.str obs_bucket_name: The cluster OBS name.
        :param _builtins.str progress: The DR task cluster progress.
        :param _builtins.str region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param _builtins.str role: The DR task cluster role.
        :param _builtins.str status: The DR task cluster status.
        """
        if cluster_az is not None:
            pulumi.set(__self__, "cluster_az", cluster_az)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_success_at is not None:
            pulumi.set(__self__, "last_success_at", last_success_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if obs_bucket_name is not None:
            pulumi.set(__self__, "obs_bucket_name", obs_bucket_name)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="clusterAz")
    def cluster_az(self) -> Optional[_builtins.str]:
        """
        The availability zone to which the cluster belongs.
        """
        return pulumi.get(self, "cluster_az")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The cluster ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastSuccessAt")
    def last_success_at(self) -> Optional[_builtins.str]:
        """
        The lasted success synchronized time, in UTC format.
        """
        return pulumi.get(self, "last_success_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the DR task. It must be unique and
        contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
        and must start with a letter. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="obsBucketName")
    def obs_bucket_name(self) -> Optional[_builtins.str]:
        """
        The cluster OBS name.
        """
        return pulumi.get(self, "obs_bucket_name")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[_builtins.str]:
        """
        The DR task cluster progress.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        The DR task cluster role.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The DR task cluster status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class DisasterRecoveryTaskStandbyCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterAz":
            suggest = "cluster_az"
        elif key == "lastSuccessAt":
            suggest = "last_success_at"
        elif key == "obsBucketName":
            suggest = "obs_bucket_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DisasterRecoveryTaskStandbyCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DisasterRecoveryTaskStandbyCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DisasterRecoveryTaskStandbyCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_az: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 last_success_at: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 obs_bucket_name: Optional[_builtins.str] = None,
                 progress: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str cluster_az: The availability zone to which the cluster belongs.
        :param _builtins.str id: The cluster ID.
        :param _builtins.str last_success_at: The lasted success synchronized time, in UTC format.
        :param _builtins.str name: Specifies the name of the DR task. It must be unique and
               contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
               and must start with a letter. Changing this creates a new resource.
        :param _builtins.str obs_bucket_name: The cluster OBS name.
        :param _builtins.str progress: The DR task cluster progress.
        :param _builtins.str region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param _builtins.str role: The DR task cluster role.
        :param _builtins.str status: The DR task cluster status.
        """
        if cluster_az is not None:
            pulumi.set(__self__, "cluster_az", cluster_az)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_success_at is not None:
            pulumi.set(__self__, "last_success_at", last_success_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if obs_bucket_name is not None:
            pulumi.set(__self__, "obs_bucket_name", obs_bucket_name)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="clusterAz")
    def cluster_az(self) -> Optional[_builtins.str]:
        """
        The availability zone to which the cluster belongs.
        """
        return pulumi.get(self, "cluster_az")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The cluster ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastSuccessAt")
    def last_success_at(self) -> Optional[_builtins.str]:
        """
        The lasted success synchronized time, in UTC format.
        """
        return pulumi.get(self, "last_success_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the DR task. It must be unique and
        contains `4` to `64` characters, which consist of letters, digits, hyphens(-), or underscores(_) only
        and must start with a letter. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="obsBucketName")
    def obs_bucket_name(self) -> Optional[_builtins.str]:
        """
        The cluster OBS name.
        """
        return pulumi.get(self, "obs_bucket_name")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[_builtins.str]:
        """
        The DR task cluster progress.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        The DR task cluster role.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The DR task cluster status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class LogicalClusterClusterRing(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ringHosts":
            suggest = "ring_hosts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogicalClusterClusterRing. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogicalClusterClusterRing.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogicalClusterClusterRing.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ring_hosts: Sequence['outputs.LogicalClusterClusterRingRingHost']):
        """
        :param Sequence['LogicalClusterClusterRingRingHostArgs'] ring_hosts: Specifies the cluster host ring information. All host information of a ring
               must be specified. Changing this parameter will create a new resource.
               The ring_hosts structure is documented below.
               
               <a name="LogicalCluster_RingHosts"></a>
               The `ring_hosts` block supports:
        """
        pulumi.set(__self__, "ring_hosts", ring_hosts)

    @_builtins.property
    @pulumi.getter(name="ringHosts")
    def ring_hosts(self) -> Sequence['outputs.LogicalClusterClusterRingRingHost']:
        """
        Specifies the cluster host ring information. All host information of a ring
        must be specified. Changing this parameter will create a new resource.
        The ring_hosts structure is documented below.

        <a name="LogicalCluster_RingHosts"></a>
        The `ring_hosts` block supports:
        """
        return pulumi.get(self, "ring_hosts")


@pulumi.output_type
class LogicalClusterClusterRingRingHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backIp":
            suggest = "back_ip"
        elif key == "cpuCores":
            suggest = "cpu_cores"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "hostName":
            suggest = "host_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogicalClusterClusterRingRingHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogicalClusterClusterRingRingHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogicalClusterClusterRingRingHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 back_ip: _builtins.str,
                 cpu_cores: _builtins.int,
                 disk_size: _builtins.float,
                 host_name: _builtins.str,
                 memory: _builtins.float):
        """
        :param _builtins.str back_ip: Specifies the backend IP address. Changing this parameter will create a new resource.
        :param _builtins.int cpu_cores: Specifies the number of CPU cores. Changing this parameter will create a new resource.
        :param _builtins.float disk_size: Specifies the host disk size. Changing this parameter will create a new resource.
        :param _builtins.str host_name: Specifies the host name. Changing this parameter will create a new resource.
        :param _builtins.float memory: Specifies the host memory. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "back_ip", back_ip)
        pulumi.set(__self__, "cpu_cores", cpu_cores)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "memory", memory)

    @_builtins.property
    @pulumi.getter(name="backIp")
    def back_ip(self) -> _builtins.str:
        """
        Specifies the backend IP address. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "back_ip")

    @_builtins.property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> _builtins.int:
        """
        Specifies the number of CPU cores. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cpu_cores")

    @_builtins.property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> _builtins.float:
        """
        Specifies the host disk size. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "disk_size")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.float:
        """
        Specifies the host memory. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class ParameterConfigurationsConfiguration(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the name of the parameter.
        :param _builtins.str type: Specifies the type of the parameter.  
               The valid values are as follows:
               + **cn**
               + **dn**
        :param _builtins.str value: Specifies the value of the parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the parameter.  
        The valid values are as follows:
        + **cn**
        + **dn**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class WorkloadPlanStage(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: The plan stage ID.
        :param _builtins.str name: Specifies the name of the workload plan, which must be unique and contains
               `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
               lowercase letter. Changing this parameter will create a new resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The plan stage ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the workload plan, which must be unique and contains
        `3` to `28` characters, composed only of lowercase letters, numbers, or underscores (_), and must start with a
        lowercase letter. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class WorkloadPlanStageQueue(dict):
    def __init__(__self__, *,
                 configurations: Sequence['outputs.WorkloadPlanStageQueueConfiguration'],
                 name: _builtins.str):
        """
        :param Sequence['WorkloadPlanStageQueueConfigurationArgs'] configurations: Specifies the configuration information for workload queue.
               Changing this creates a new resource.
               The configuration structure is documented below.
        :param _builtins.str name: Specifies the name of workload queue which the workload plan stage running.
               Changing this creates a new resource.
               
               <a name="block_queues_configuration"></a>
               The `configuration` block supports:
        """
        pulumi.set(__self__, "configurations", configurations)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.WorkloadPlanStageQueueConfiguration']:
        """
        Specifies the configuration information for workload queue.
        Changing this creates a new resource.
        The configuration structure is documented below.
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of workload queue which the workload plan stage running.
        Changing this creates a new resource.

        <a name="block_queues_configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class WorkloadPlanStageQueueConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceName":
            suggest = "resource_name"
        elif key == "resourceValue":
            suggest = "resource_value"
        elif key == "resourceDescription":
            suggest = "resource_description"
        elif key == "valueUnit":
            suggest = "value_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadPlanStageQueueConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadPlanStageQueueConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadPlanStageQueueConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_name: _builtins.str,
                 resource_value: _builtins.int,
                 resource_description: Optional[_builtins.str] = None,
                 value_unit: Optional[_builtins.str] = None):
        """
        :param _builtins.str resource_name: Specifies the resource name to be configured for the workload queue.
               Changing this creates a new resource. Value options:
               + **cpu**: Percentage of CPU time that can be used by users associated with the current workload queue to execute jobs.
               + **cpu_limit**: Maximum percentage of CPU cores used by a database user in a workload queue.
               + **memory**: Percentage of the memory that can be used by a workload queue.
               + **concurrency**: Maximum number of concurrent queries in a workload queue.
               + **shortQueryConcurrencyNum**: Maximum number of concurrent short queries in a workload queue.
        :param _builtins.int resource_value: Specifies the value of the resource attribute for the workload queue.
               Changing this creates a new resource.
               When `resource_name` is **cpu**, the value is an integer ranging from `1` to `99`.
               When `resource_name` is **cpu_limit**, the value is an integer ranging from `0` to `100`. `0` indicates no limit.
               When `resource_name` is **memory**, `0` indicates no limit.
               When `resource_name` is **shortQueryConcurrencyNum**, `-1` indicates no limit.
        :param _builtins.str resource_description: Specifies the description of the resource attribute for
               the workload queue. Changing this creates a new resource.
        :param _builtins.str value_unit: Specifies the value unit of the resource attribute for the workload queue.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_value", resource_value)
        if resource_description is not None:
            pulumi.set(__self__, "resource_description", resource_description)
        if value_unit is not None:
            pulumi.set(__self__, "value_unit", value_unit)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Specifies the resource name to be configured for the workload queue.
        Changing this creates a new resource. Value options:
        + **cpu**: Percentage of CPU time that can be used by users associated with the current workload queue to execute jobs.
        + **cpu_limit**: Maximum percentage of CPU cores used by a database user in a workload queue.
        + **memory**: Percentage of the memory that can be used by a workload queue.
        + **concurrency**: Maximum number of concurrent queries in a workload queue.
        + **shortQueryConcurrencyNum**: Maximum number of concurrent short queries in a workload queue.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> _builtins.int:
        """
        Specifies the value of the resource attribute for the workload queue.
        Changing this creates a new resource.
        When `resource_name` is **cpu**, the value is an integer ranging from `1` to `99`.
        When `resource_name` is **cpu_limit**, the value is an integer ranging from `0` to `100`. `0` indicates no limit.
        When `resource_name` is **memory**, `0` indicates no limit.
        When `resource_name` is **shortQueryConcurrencyNum**, `-1` indicates no limit.
        """
        return pulumi.get(self, "resource_value")

    @_builtins.property
    @pulumi.getter(name="resourceDescription")
    def resource_description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the resource attribute for
        the workload queue. Changing this creates a new resource.
        """
        return pulumi.get(self, "resource_description")

    @_builtins.property
    @pulumi.getter(name="valueUnit")
    def value_unit(self) -> Optional[_builtins.str]:
        """
        Specifies the value unit of the resource attribute for the workload queue.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "value_unit")


@pulumi.output_type
class WorkloadQueueConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceName":
            suggest = "resource_name"
        elif key == "resourceValue":
            suggest = "resource_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadQueueConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadQueueConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadQueueConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_name: _builtins.str,
                 resource_value: _builtins.int):
        """
        :param _builtins.str resource_name: Specifies the resource name to be configured for the workload queue.  
               The valid value are as follows:
               + **memory**: memory resources.
               + **tablespace**: storage resources.
               + **activestatements**: query concurrency.
               + **cpu_limit**: exclusive quotas.
               + **cpu_share**: shared quotas.
               
               > When creating a workload queue, **memory**, **tablespace** and **activestatements** must be set. The **cpu_limit**
               and **cpu_share** are exclusive, one of them must be set, and the **cpu_limit** is only supported for clusters above
               **8.1.3**.
        :param _builtins.int resource_value: Specifies the value of the resource attribute for the workload queue.
               + When the `resource name` is **memory**, the value range is from `0` to `100`, where `0` indicates no control,
               unit: %.
               + When the `resource name` is **tablespace**, the value range is from `-1` to `2,147,483,647`, where `-1` indicates
               no restriction, unit: MB.
               + When the `resource name` is **activestatements**, the value range is from `-1` to `2,147,483,647`, where `-1` and
               `0` indicates no control.
               + When the `resource name` is **cpu_limit**, the value range is from `0` to `99`, `0` means unlimited, unit: %.
               + When the `resource name` is **cpu_share**, the value range is from `1` to `99`, the default value is `20`, unit: %.
        """
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_value", resource_value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Specifies the resource name to be configured for the workload queue.  
        The valid value are as follows:
        + **memory**: memory resources.
        + **tablespace**: storage resources.
        + **activestatements**: query concurrency.
        + **cpu_limit**: exclusive quotas.
        + **cpu_share**: shared quotas.

        > When creating a workload queue, **memory**, **tablespace** and **activestatements** must be set. The **cpu_limit**
        and **cpu_share** are exclusive, one of them must be set, and the **cpu_limit** is only supported for clusters above
        **8.1.3**.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> _builtins.int:
        """
        Specifies the value of the resource attribute for the workload queue.
        + When the `resource name` is **memory**, the value range is from `0` to `100`, where `0` indicates no control,
        unit: %.
        + When the `resource name` is **tablespace**, the value range is from `-1` to `2,147,483,647`, where `-1` indicates
        no restriction, unit: MB.
        + When the `resource name` is **activestatements**, the value range is from `-1` to `2,147,483,647`, where `-1` and
        `0` indicates no control.
        + When the `resource name` is **cpu_limit**, the value range is from `0` to `99`, `0` means unlimited, unit: %.
        + When the `resource name` is **cpu_share**, the value range is from `1` to `99`, the default value is `20`, unit: %.
        """
        return pulumi.get(self, "resource_value")


@pulumi.output_type
class GetAlarmSubscriptionsSubscriptionResult(dict):
    def __init__(__self__, *,
                 alarm_level: _builtins.str,
                 enable: _builtins.int,
                 id: _builtins.str,
                 language: _builtins.str,
                 name: _builtins.str,
                 notification_target: _builtins.str,
                 notification_target_name: _builtins.str,
                 notification_target_type: _builtins.str,
                 time_zone: _builtins.str):
        """
        :param _builtins.str alarm_level: The level of the alarm subscription.
               + **urgent**
               + **important**
               + **minor**
               + **prompt**.
        :param _builtins.int enable: Whether alarm subscription is enabled.
               + **1**: Enabled.
               + **0**: Disabled.
        :param _builtins.str id: The ID of the alarm subscription.
        :param _builtins.str language: The language of the alarm subscription.
        :param _builtins.str name: The name of the alarm subscription.
        :param _builtins.str notification_target: The address of notification topic corresponding to the alarm subscription.
        :param _builtins.str notification_target_name: The name of notification topic corresponding to the alarm subscription.
        :param _builtins.str notification_target_type: The type of notification topic corresponding to the alarm subscription.
               + **SMN**
        :param _builtins.str time_zone: The time zone of the alarm subscription.
        """
        pulumi.set(__self__, "alarm_level", alarm_level)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notification_target", notification_target)
        pulumi.set(__self__, "notification_target_name", notification_target_name)
        pulumi.set(__self__, "notification_target_type", notification_target_type)
        pulumi.set(__self__, "time_zone", time_zone)

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> _builtins.str:
        """
        The level of the alarm subscription.
        + **urgent**
        + **important**
        + **minor**
        + **prompt**.
        """
        return pulumi.get(self, "alarm_level")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> _builtins.int:
        """
        Whether alarm subscription is enabled.
        + **1**: Enabled.
        + **0**: Disabled.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the alarm subscription.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def language(self) -> _builtins.str:
        """
        The language of the alarm subscription.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the alarm subscription.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notificationTarget")
    def notification_target(self) -> _builtins.str:
        """
        The address of notification topic corresponding to the alarm subscription.
        """
        return pulumi.get(self, "notification_target")

    @_builtins.property
    @pulumi.getter(name="notificationTargetName")
    def notification_target_name(self) -> _builtins.str:
        """
        The name of notification topic corresponding to the alarm subscription.
        """
        return pulumi.get(self, "notification_target_name")

    @_builtins.property
    @pulumi.getter(name="notificationTargetType")
    def notification_target_type(self) -> _builtins.str:
        """
        The type of notification topic corresponding to the alarm subscription.
        + **SMN**
        """
        return pulumi.get(self, "notification_target_type")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        The time zone of the alarm subscription.
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class GetAvailabilityZonesAvailabilityZoneResult(dict):
    def __init__(__self__, *,
                 display_name: _builtins.str,
                 name: _builtins.str,
                 public_border_group: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str display_name: The display name of the availability zone.
        :param _builtins.str name: The name of the availability zone.
        :param _builtins.str public_border_group: The availability zone group.
        :param _builtins.str status: The current status of the availability zone.
               + **available**
               + **unavailable**
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the availability zone.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the availability zone.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        The availability zone group.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current status of the availability zone.
        + **available**
        + **unavailable**
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetClusterCnsCnResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 private_ip: _builtins.str):
        """
        :param _builtins.str id: The ID of the CN.
        :param _builtins.str name: The name of the CN.
        :param _builtins.str private_ip: The private IP address of the CN.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip", private_ip)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the CN.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the CN.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The private IP address of the CN.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetClusterLogsLogResult(dict):
    def __init__(__self__, *,
                 access_url: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str access_url: The URL to access the LTS log.
        :param _builtins.str description: The description of the log.
        :param _builtins.str id: The ID of the log.
        :param _builtins.str type: The type of the log.
        """
        pulumi.set(__self__, "access_url", access_url)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="accessUrl")
    def access_url(self) -> _builtins.str:
        """
        The URL to access the LTS log.
        """
        return pulumi.get(self, "access_url")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the log.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the log.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the log.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetClusterNodesNodeResult(dict):
    def __init__(__self__, *,
                 alias_name: _builtins.str,
                 availability_zone: _builtins.str,
                 id: _builtins.str,
                 inst_create_type: _builtins.str,
                 name: _builtins.str,
                 spec: _builtins.str,
                 status: _builtins.str,
                 sub_status: _builtins.str):
        """
        :param _builtins.str alias_name: The alias of the node.
        :param _builtins.str availability_zone: The availability zone of the node.
        :param _builtins.str id: The ID of the node.
        :param _builtins.str inst_create_type: The occupancy status of nodes by the cluster.
               If the value is **NODE**, it indicates that the node is idle.
               If the value is empty, it indicates that the node has been used.
        :param _builtins.str name: The name of the node.
        :param _builtins.str spec: The specification of the node.
        :param _builtins.str status: The current status of the node.
        :param _builtins.str sub_status: The sub-status of the node.
               + **READ**: The ECS on the node ready.
               + **PREPAPED**: The node software has been installed.
               + **INITED**: The cluster has been created.
               + **CREATED**: The node has been created.
        """
        pulumi.set(__self__, "alias_name", alias_name)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inst_create_type", inst_create_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_status", sub_status)

    @_builtins.property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> _builtins.str:
        """
        The alias of the node.
        """
        return pulumi.get(self, "alias_name")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The availability zone of the node.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the node.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instCreateType")
    def inst_create_type(self) -> _builtins.str:
        """
        The occupancy status of nodes by the cluster.
        If the value is **NODE**, it indicates that the node is idle.
        If the value is empty, it indicates that the node has been used.
        """
        return pulumi.get(self, "inst_create_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the node.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def spec(self) -> _builtins.str:
        """
        The specification of the node.
        """
        return pulumi.get(self, "spec")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current status of the node.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subStatus")
    def sub_status(self) -> _builtins.str:
        """
        The sub-status of the node.
        + **READ**: The ECS on the node ready.
        + **PREPAPED**: The node software has been installed.
        + **INITED**: The cluster has been created.
        + **CREATED**: The node has been created.
        """
        return pulumi.get(self, "sub_status")


@pulumi.output_type
class GetClusterParametersParameterResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 name: _builtins.str,
                 readonly: _builtins.bool,
                 restart_required: _builtins.bool,
                 type: _builtins.str,
                 unit: _builtins.str,
                 value_range: _builtins.str,
                 values: Sequence['outputs.GetClusterParametersParameterValueResult']):
        """
        :param _builtins.str description: The description of the parameter.
        :param _builtins.str name: The name of the parameter.
        :param _builtins.bool readonly: Whether the parameter is read-only.
        :param _builtins.bool restart_required: Whether the DWS cluster needs to be restarted after modifying the parameter value.
        :param _builtins.str type: The type of the parameter.
               + **cn**
               + **dn**
        :param _builtins.str unit: The unit of the parameter.
        :param _builtins.str value_range: The range of the parameter value.
        :param Sequence['GetClusterParametersParameterValueArgs'] values: The list of the parameter values.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "readonly", readonly)
        pulumi.set(__self__, "restart_required", restart_required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value_range", value_range)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> _builtins.bool:
        """
        Whether the parameter is read-only.
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter(name="restartRequired")
    def restart_required(self) -> _builtins.bool:
        """
        Whether the DWS cluster needs to be restarted after modifying the parameter value.
        """
        return pulumi.get(self, "restart_required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the parameter.
        + **cn**
        + **dn**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit of the parameter.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> _builtins.str:
        """
        The range of the parameter value.
        """
        return pulumi.get(self, "value_range")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetClusterParametersParameterValueResult']:
        """
        The list of the parameter values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetClusterParametersParameterValueResult(dict):
    def __init__(__self__, *,
                 default_value: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str default_value: The default value of the parameter.
        :param _builtins.str type: The type of the parameter.
               + **cn**
               + **dn**
        :param _builtins.str value: The value of the parameter.
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> _builtins.str:
        """
        The default value of the parameter.
        """
        return pulumi.get(self, "default_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the parameter.
        + **cn**
        + **dn**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClusterSnapshotStatisticsStatisticResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 unit: _builtins.str,
                 value: _builtins.float):
        """
        :param _builtins.str name: The name of the resource statistic.
               + **storage.free**: The free capacity available for the snapshots.
               + **storage.paid**: The paid capacity by the snapshots.
               + **storage.used**: The capacity used by the snapshots.
        :param _builtins.str unit: The unit of the resource statistic.
        :param _builtins.float value: The value of the resource statistic.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the resource statistic.
        + **storage.free**: The free capacity available for the snapshots.
        + **storage.paid**: The paid capacity by the snapshots.
        + **storage.used**: The capacity used by the snapshots.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit of the resource statistic.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        The value of the resource statistic.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClusterTopoRingsRingResult(dict):
    def __init__(__self__, *,
                 instances: Sequence['outputs.GetClusterTopoRingsRingInstanceResult']):
        """
        :param Sequence['GetClusterTopoRingsRingInstanceArgs'] instances: The list of the cluster instances.
        """
        pulumi.set(__self__, "instances", instances)

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetClusterTopoRingsRingInstanceResult']:
        """
        The list of the cluster instances.
        """
        return pulumi.get(self, "instances")


@pulumi.output_type
class GetClusterTopoRingsRingInstanceResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 eip_address: _builtins.str,
                 elb_address: _builtins.str,
                 id: _builtins.str,
                 internal_ip: _builtins.str,
                 internal_mgnt_ip: _builtins.str,
                 manage_ip: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str,
                 traffic_ip: _builtins.str):
        """
        :param _builtins.str availability_zone: The availability zone of the instance.
        :param _builtins.str eip_address: The EIP address corresponding to the instance.
        :param _builtins.str elb_address: The ELB address corresponding to the instance
        :param _builtins.str id: The ID of the instance.
        :param _builtins.str internal_ip: The internal communication IP address of the instance.
        :param _builtins.str internal_mgnt_ip: The internal management IP address of the instance.
        :param _builtins.str manage_ip: The management IP address of the instance.
        :param _builtins.str name: The name of the instance.
        :param _builtins.str status: The current status of the instance.
               + **200**: Available.
               + **300**: Unavailable.
               + **302**: Deletion failed.
               + **303**: Creation failed.
               + **400**: Deleted.
               + **800**: Frozen.
               + **900**: Stopped.
        :param _builtins.str traffic_ip: The server IP address of the instance.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "eip_address", eip_address)
        pulumi.set(__self__, "elb_address", elb_address)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "internal_ip", internal_ip)
        pulumi.set(__self__, "internal_mgnt_ip", internal_mgnt_ip)
        pulumi.set(__self__, "manage_ip", manage_ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "traffic_ip", traffic_ip)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The availability zone of the instance.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="eipAddress")
    def eip_address(self) -> _builtins.str:
        """
        The EIP address corresponding to the instance.
        """
        return pulumi.get(self, "eip_address")

    @_builtins.property
    @pulumi.getter(name="elbAddress")
    def elb_address(self) -> _builtins.str:
        """
        The ELB address corresponding to the instance
        """
        return pulumi.get(self, "elb_address")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> _builtins.str:
        """
        The internal communication IP address of the instance.
        """
        return pulumi.get(self, "internal_ip")

    @_builtins.property
    @pulumi.getter(name="internalMgntIp")
    def internal_mgnt_ip(self) -> _builtins.str:
        """
        The internal management IP address of the instance.
        """
        return pulumi.get(self, "internal_mgnt_ip")

    @_builtins.property
    @pulumi.getter(name="manageIp")
    def manage_ip(self) -> _builtins.str:
        """
        The management IP address of the instance.
        """
        return pulumi.get(self, "manage_ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current status of the instance.
        + **200**: Available.
        + **300**: Unavailable.
        + **302**: Deletion failed.
        + **303**: Creation failed.
        + **400**: Deleted.
        + **800**: Frozen.
        + **900**: Stopped.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="trafficIp")
    def traffic_ip(self) -> _builtins.str:
        """
        The server IP address of the instance.
        """
        return pulumi.get(self, "traffic_ip")


@pulumi.output_type
class GetClustersClusterResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 created_at: _builtins.str,
                 endpoints: Sequence['outputs.GetClustersClusterEndpointResult'],
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 node_type: _builtins.str,
                 nodes: Sequence['outputs.GetClustersClusterNodeResult'],
                 number_of_node: _builtins.int,
                 port: _builtins.int,
                 public_endpoints: Sequence['outputs.GetClustersClusterPublicEndpointResult'],
                 public_ips: Sequence['outputs.GetClustersClusterPublicIpResult'],
                 recent_event: _builtins.int,
                 security_group_id: _builtins.str,
                 status: _builtins.str,
                 sub_status: _builtins.str,
                 subnet_id: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 task_status: _builtins.str,
                 updated_at: _builtins.str,
                 user_name: _builtins.str,
                 version: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str availability_zone: The availability zone of the cluster.
        :param _builtins.str created_at: The creation time of the cluster, in RFC3339 format.
        :param Sequence['GetClustersClusterEndpointArgs'] endpoints: The private network connection information of the cluster.
        :param _builtins.str enterprise_project_id: The enterprise project ID.
        :param _builtins.str id: The ID of the cluster instance.
        :param _builtins.str name: The name of the cluster.
        :param _builtins.str node_type: The flavor of the cluster.
        :param Sequence['GetClustersClusterNodeArgs'] nodes: The instance information of the cluster.
        :param _builtins.int number_of_node: The number of nodes of the cluster.
        :param _builtins.int port: The service port of the cluster.
        :param Sequence['GetClustersClusterPublicEndpointArgs'] public_endpoints: The public network connection information of the cluster.
        :param Sequence['GetClustersClusterPublicIpArgs'] public_ips: The public IP information of the cluster.
        :param _builtins.int recent_event: The number of recent events of the cluster.
        :param _builtins.str security_group_id: The security group ID corresponding to the cluster.
        :param _builtins.str status: The status of the cluster instance.
        :param _builtins.str sub_status: The sub-status of the available cluster state.
               + **NORMAL**
               + **READONLY**
               + **REDISTRIBUTING**
               + **REDISTRIBUTION-FAILURE**
               + **UNBALANCED**
               + **UNBALANCED | READONLY**
               + **DEGRADED**
               + **DEGRADED | READONLY**
               + **DEGRADED | UNBALANCED**
               + **UNBALANCED | REDISTRIBUTING**
               + **UNBALANCED | REDISTRIBUTION-FAILURE**
               + **READONLY | REDISTRIBUTION-FAILURE**
               + **UNBALANCED | READONLY | REDISTRIBUTION-FAILURE**
               + **DEGRADED | REDISTRIBUTION-FAILURE**
               + **DEGRADED | UNBALANCED | REDISTRIBUTION-FAILURE**
               + **DEGRADED | UNBALANCED | READONLY | REDISTRIBUTION-FAILURE**
               + **DEGRADED | UNBALANCED | READONLY**
        :param _builtins.str subnet_id: The subnet ID corresponding to the cluster.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the cluster.
        :param _builtins.str task_status: The management task status of the cluster.
        :param _builtins.str updated_at: The latest update time of the cluster, in RFC3339 format.
        :param _builtins.str user_name: Administrator username for logging in to the cluster.
        :param _builtins.str version: The version of the cluster.
        :param _builtins.str vpc_id: The ID of the VPC corresponding to the cluster.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "number_of_node", number_of_node)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "public_endpoints", public_endpoints)
        pulumi.set(__self__, "public_ips", public_ips)
        pulumi.set(__self__, "recent_event", recent_event)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_status", sub_status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "task_status", task_status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The availability zone of the cluster.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the cluster, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetClustersClusterEndpointResult']:
        """
        The private network connection information of the cluster.
        """
        return pulumi.get(self, "endpoints")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the cluster instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the cluster.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> _builtins.str:
        """
        The flavor of the cluster.
        """
        return pulumi.get(self, "node_type")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetClustersClusterNodeResult']:
        """
        The instance information of the cluster.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter(name="numberOfNode")
    def number_of_node(self) -> _builtins.int:
        """
        The number of nodes of the cluster.
        """
        return pulumi.get(self, "number_of_node")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The service port of the cluster.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="publicEndpoints")
    def public_endpoints(self) -> Sequence['outputs.GetClustersClusterPublicEndpointResult']:
        """
        The public network connection information of the cluster.
        """
        return pulumi.get(self, "public_endpoints")

    @_builtins.property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Sequence['outputs.GetClustersClusterPublicIpResult']:
        """
        The public IP information of the cluster.
        """
        return pulumi.get(self, "public_ips")

    @_builtins.property
    @pulumi.getter(name="recentEvent")
    def recent_event(self) -> _builtins.int:
        """
        The number of recent events of the cluster.
        """
        return pulumi.get(self, "recent_event")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The security group ID corresponding to the cluster.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the cluster instance.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subStatus")
    def sub_status(self) -> _builtins.str:
        """
        The sub-status of the available cluster state.
        + **NORMAL**
        + **READONLY**
        + **REDISTRIBUTING**
        + **REDISTRIBUTION-FAILURE**
        + **UNBALANCED**
        + **UNBALANCED | READONLY**
        + **DEGRADED**
        + **DEGRADED | READONLY**
        + **DEGRADED | UNBALANCED**
        + **UNBALANCED | REDISTRIBUTING**
        + **UNBALANCED | REDISTRIBUTION-FAILURE**
        + **READONLY | REDISTRIBUTION-FAILURE**
        + **UNBALANCED | READONLY | REDISTRIBUTION-FAILURE**
        + **DEGRADED | REDISTRIBUTION-FAILURE**
        + **DEGRADED | UNBALANCED | REDISTRIBUTION-FAILURE**
        + **DEGRADED | UNBALANCED | READONLY | REDISTRIBUTION-FAILURE**
        + **DEGRADED | UNBALANCED | READONLY**
        """
        return pulumi.get(self, "sub_status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The subnet ID corresponding to the cluster.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the cluster.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> _builtins.str:
        """
        The management task status of the cluster.
        """
        return pulumi.get(self, "task_status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the cluster, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        Administrator username for logging in to the cluster.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the cluster.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the VPC corresponding to the cluster.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetClustersClusterEndpointResult(dict):
    def __init__(__self__, *,
                 connect_info: _builtins.str,
                 jdbc_url: _builtins.str):
        """
        :param _builtins.str connect_info: The private network connection information.
        :param _builtins.str jdbc_url: The JDBC URL of the public network.
        """
        pulumi.set(__self__, "connect_info", connect_info)
        pulumi.set(__self__, "jdbc_url", jdbc_url)

    @_builtins.property
    @pulumi.getter(name="connectInfo")
    def connect_info(self) -> _builtins.str:
        """
        The private network connection information.
        """
        return pulumi.get(self, "connect_info")

    @_builtins.property
    @pulumi.getter(name="jdbcUrl")
    def jdbc_url(self) -> _builtins.str:
        """
        The JDBC URL of the public network.
        """
        return pulumi.get(self, "jdbc_url")


@pulumi.output_type
class GetClustersClusterNodeResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str id: The ID of the cluster instance.
        :param _builtins.str status: The status of the cluster instance.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the cluster instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the cluster instance.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetClustersClusterPublicEndpointResult(dict):
    def __init__(__self__, *,
                 jdbc_url: _builtins.str,
                 public_connect_info: _builtins.str):
        """
        :param _builtins.str jdbc_url: The JDBC URL of the public network.
        :param _builtins.str public_connect_info: The public network connection information.
        """
        pulumi.set(__self__, "jdbc_url", jdbc_url)
        pulumi.set(__self__, "public_connect_info", public_connect_info)

    @_builtins.property
    @pulumi.getter(name="jdbcUrl")
    def jdbc_url(self) -> _builtins.str:
        """
        The JDBC URL of the public network.
        """
        return pulumi.get(self, "jdbc_url")

    @_builtins.property
    @pulumi.getter(name="publicConnectInfo")
    def public_connect_info(self) -> _builtins.str:
        """
        The public network connection information.
        """
        return pulumi.get(self, "public_connect_info")


@pulumi.output_type
class GetClustersClusterPublicIpResult(dict):
    def __init__(__self__, *,
                 eip_id: _builtins.str,
                 public_bind_type: _builtins.str):
        """
        :param _builtins.str eip_id: The EIP ID.
        :param _builtins.str public_bind_type: The bind type of public IP.
               + **auto_assign**
               + **not_use**
               + **bind_existing**
        """
        pulumi.set(__self__, "eip_id", eip_id)
        pulumi.set(__self__, "public_bind_type", public_bind_type)

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> _builtins.str:
        """
        The EIP ID.
        """
        return pulumi.get(self, "eip_id")

    @_builtins.property
    @pulumi.getter(name="publicBindType")
    def public_bind_type(self) -> _builtins.str:
        """
        The bind type of public IP.
        + **auto_assign**
        + **not_use**
        + **bind_existing**
        """
        return pulumi.get(self, "public_bind_type")


@pulumi.output_type
class GetDisasterRecoveryTasksTaskResult(dict):
    def __init__(__self__, *,
                 create_at: _builtins.str,
                 dr_type: _builtins.str,
                 id: _builtins.str,
                 last_disaster_time: _builtins.str,
                 name: _builtins.str,
                 primary_cluster_id: _builtins.str,
                 primary_cluster_name: _builtins.str,
                 primary_cluster_project_id: _builtins.str,
                 primary_cluster_region: _builtins.str,
                 primary_cluster_role: _builtins.str,
                 primary_cluster_status: _builtins.str,
                 standby_cluster_id: _builtins.str,
                 standby_cluster_name: _builtins.str,
                 standby_cluster_project_id: _builtins.str,
                 standby_cluster_region: _builtins.str,
                 standby_cluster_role: _builtins.str,
                 standby_cluster_status: _builtins.str,
                 start_at: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str create_at: The creation time of the DR task, in UTC format.
        :param _builtins.str dr_type: Specifies the type of the DR task. Only support **az** now.
        :param _builtins.str id: The DR task ID.
        :param _builtins.str last_disaster_time: The lasted success synchronized time, in UTC format.
        :param _builtins.str name: Specifies the name of the DR task.
        :param _builtins.str primary_cluster_id: The primary cluster ID.
        :param _builtins.str primary_cluster_name: Specifies the name of the primary cluster.
        :param _builtins.str primary_cluster_project_id: The project ID of the primary cluster.
        :param _builtins.str primary_cluster_region: Specifies the region of the primary cluster.
        :param _builtins.str primary_cluster_role: The role of the primary cluster.
        :param _builtins.str primary_cluster_status: The status of the primary cluster.
        :param _builtins.str standby_cluster_id: The standby cluster ID.
        :param _builtins.str standby_cluster_name: Specifies the name of the standby cluster.
        :param _builtins.str standby_cluster_project_id: The project ID of the standby cluster.
        :param _builtins.str standby_cluster_region: Specifies the region of the standby cluster.
        :param _builtins.str standby_cluster_role: The role of the standby cluster.
        :param _builtins.str standby_cluster_status: The status of the standby cluster.
        :param _builtins.str start_at: The start time of the DR task, in UTC format.
        :param _builtins.str status: Specifies the status of the DR task. The valid values are:
               + **unstart**
               + **running**
               + **stopped**
               + **start_failed**
               + **stop_failed**
               + **abnormal**
        """
        pulumi.set(__self__, "create_at", create_at)
        pulumi.set(__self__, "dr_type", dr_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_disaster_time", last_disaster_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_cluster_id", primary_cluster_id)
        pulumi.set(__self__, "primary_cluster_name", primary_cluster_name)
        pulumi.set(__self__, "primary_cluster_project_id", primary_cluster_project_id)
        pulumi.set(__self__, "primary_cluster_region", primary_cluster_region)
        pulumi.set(__self__, "primary_cluster_role", primary_cluster_role)
        pulumi.set(__self__, "primary_cluster_status", primary_cluster_status)
        pulumi.set(__self__, "standby_cluster_id", standby_cluster_id)
        pulumi.set(__self__, "standby_cluster_name", standby_cluster_name)
        pulumi.set(__self__, "standby_cluster_project_id", standby_cluster_project_id)
        pulumi.set(__self__, "standby_cluster_region", standby_cluster_region)
        pulumi.set(__self__, "standby_cluster_role", standby_cluster_role)
        pulumi.set(__self__, "standby_cluster_status", standby_cluster_status)
        pulumi.set(__self__, "start_at", start_at)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createAt")
    def create_at(self) -> _builtins.str:
        """
        The creation time of the DR task, in UTC format.
        """
        return pulumi.get(self, "create_at")

    @_builtins.property
    @pulumi.getter(name="drType")
    def dr_type(self) -> _builtins.str:
        """
        Specifies the type of the DR task. Only support **az** now.
        """
        return pulumi.get(self, "dr_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The DR task ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastDisasterTime")
    def last_disaster_time(self) -> _builtins.str:
        """
        The lasted success synchronized time, in UTC format.
        """
        return pulumi.get(self, "last_disaster_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the DR task.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="primaryClusterId")
    def primary_cluster_id(self) -> _builtins.str:
        """
        The primary cluster ID.
        """
        return pulumi.get(self, "primary_cluster_id")

    @_builtins.property
    @pulumi.getter(name="primaryClusterName")
    def primary_cluster_name(self) -> _builtins.str:
        """
        Specifies the name of the primary cluster.
        """
        return pulumi.get(self, "primary_cluster_name")

    @_builtins.property
    @pulumi.getter(name="primaryClusterProjectId")
    def primary_cluster_project_id(self) -> _builtins.str:
        """
        The project ID of the primary cluster.
        """
        return pulumi.get(self, "primary_cluster_project_id")

    @_builtins.property
    @pulumi.getter(name="primaryClusterRegion")
    def primary_cluster_region(self) -> _builtins.str:
        """
        Specifies the region of the primary cluster.
        """
        return pulumi.get(self, "primary_cluster_region")

    @_builtins.property
    @pulumi.getter(name="primaryClusterRole")
    def primary_cluster_role(self) -> _builtins.str:
        """
        The role of the primary cluster.
        """
        return pulumi.get(self, "primary_cluster_role")

    @_builtins.property
    @pulumi.getter(name="primaryClusterStatus")
    def primary_cluster_status(self) -> _builtins.str:
        """
        The status of the primary cluster.
        """
        return pulumi.get(self, "primary_cluster_status")

    @_builtins.property
    @pulumi.getter(name="standbyClusterId")
    def standby_cluster_id(self) -> _builtins.str:
        """
        The standby cluster ID.
        """
        return pulumi.get(self, "standby_cluster_id")

    @_builtins.property
    @pulumi.getter(name="standbyClusterName")
    def standby_cluster_name(self) -> _builtins.str:
        """
        Specifies the name of the standby cluster.
        """
        return pulumi.get(self, "standby_cluster_name")

    @_builtins.property
    @pulumi.getter(name="standbyClusterProjectId")
    def standby_cluster_project_id(self) -> _builtins.str:
        """
        The project ID of the standby cluster.
        """
        return pulumi.get(self, "standby_cluster_project_id")

    @_builtins.property
    @pulumi.getter(name="standbyClusterRegion")
    def standby_cluster_region(self) -> _builtins.str:
        """
        Specifies the region of the standby cluster.
        """
        return pulumi.get(self, "standby_cluster_region")

    @_builtins.property
    @pulumi.getter(name="standbyClusterRole")
    def standby_cluster_role(self) -> _builtins.str:
        """
        The role of the standby cluster.
        """
        return pulumi.get(self, "standby_cluster_role")

    @_builtins.property
    @pulumi.getter(name="standbyClusterStatus")
    def standby_cluster_status(self) -> _builtins.str:
        """
        The status of the standby cluster.
        """
        return pulumi.get(self, "standby_cluster_status")

    @_builtins.property
    @pulumi.getter(name="startAt")
    def start_at(self) -> _builtins.str:
        """
        The start time of the DR task, in UTC format.
        """
        return pulumi.get(self, "start_at")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the DR task. The valid values are:
        + **unstart**
        + **running**
        + **stopped**
        + **start_failed**
        + **stop_failed**
        + **abnormal**
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetEventSubscriptionsEventSubscriptionResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 enable: _builtins.str,
                 id: _builtins.str,
                 language: _builtins.str,
                 name: _builtins.str,
                 name_space: _builtins.str,
                 notification_target: _builtins.str,
                 notification_target_name: _builtins.str,
                 notification_target_type: _builtins.str,
                 project_id: _builtins.str,
                 severity: _builtins.str,
                 source_id: _builtins.str,
                 source_type: _builtins.str,
                 time_zone: _builtins.str):
        """
        :param _builtins.str category: Specifies the category of source event.
               The valid values are **management**, **monitor**, **security** and **system alarm**.
               If there are multiple categories, separate by commas, e.g. **management,security**.
        :param _builtins.str enable: Specifies whether the event subscription is enabled.
               The options are as follows:
               + **1**: enabled.
               + **0**: disabled.
        :param _builtins.str id: The ID of event subscription.
        :param _builtins.str language: The language of the event subscription.
        :param _builtins.str name: Specifies the name of the event subscription.
        :param _builtins.str name_space: The name space of the event subscription.
        :param _builtins.str notification_target: The notification target.
        :param _builtins.str notification_target_name: Specifies the name of notification target.
        :param _builtins.str notification_target_type: The type of notification target.
        :param _builtins.str project_id: The project ID of the event subscription.
        :param _builtins.str severity: Specifies the severity of source event.
               The valid values are **normal** and **warning**. If there are multiple severities, separate by commas,
               e.g. **normal,warning**.
        :param _builtins.str source_id: The ID of source event.
        :param _builtins.str source_type: Specifies the type of source event.
               The valid values are **cluster**, **backup** and **disaster-recovery**. If there are multiple types,
               separate by commas, e.g. **cluster,disaster-recovery**.
        :param _builtins.str time_zone: The time zone of the event subscription.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_space", name_space)
        pulumi.set(__self__, "notification_target", notification_target)
        pulumi.set(__self__, "notification_target_name", notification_target_name)
        pulumi.set(__self__, "notification_target_type", notification_target_type)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "time_zone", time_zone)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Specifies the category of source event.
        The valid values are **management**, **monitor**, **security** and **system alarm**.
        If there are multiple categories, separate by commas, e.g. **management,security**.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> _builtins.str:
        """
        Specifies whether the event subscription is enabled.
        The options are as follows:
        + **1**: enabled.
        + **0**: disabled.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of event subscription.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def language(self) -> _builtins.str:
        """
        The language of the event subscription.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the event subscription.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameSpace")
    def name_space(self) -> _builtins.str:
        """
        The name space of the event subscription.
        """
        return pulumi.get(self, "name_space")

    @_builtins.property
    @pulumi.getter(name="notificationTarget")
    def notification_target(self) -> _builtins.str:
        """
        The notification target.
        """
        return pulumi.get(self, "notification_target")

    @_builtins.property
    @pulumi.getter(name="notificationTargetName")
    def notification_target_name(self) -> _builtins.str:
        """
        Specifies the name of notification target.
        """
        return pulumi.get(self, "notification_target_name")

    @_builtins.property
    @pulumi.getter(name="notificationTargetType")
    def notification_target_type(self) -> _builtins.str:
        """
        The type of notification target.
        """
        return pulumi.get(self, "notification_target_type")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID of the event subscription.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Specifies the severity of source event.
        The valid values are **normal** and **warning**. If there are multiple severities, separate by commas,
        e.g. **normal,warning**.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> _builtins.str:
        """
        The ID of source event.
        """
        return pulumi.get(self, "source_id")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> _builtins.str:
        """
        Specifies the type of source event.
        The valid values are **cluster**, **backup** and **disaster-recovery**. If there are multiple types,
        separate by commas, e.g. **cluster,disaster-recovery**.
        """
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        The time zone of the event subscription.
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class GetFlaovrsFlavorResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[_builtins.str],
                 datastore_type: _builtins.str,
                 datastore_version: _builtins.str,
                 elastic_volume_specs: Sequence['outputs.GetFlaovrsFlavorElasticVolumeSpecResult'],
                 flavor_id: _builtins.str,
                 memory: _builtins.int,
                 size: _builtins.int,
                 vcpus: _builtins.int,
                 volumetype: _builtins.str):
        """
        :param Sequence[_builtins.str] availability_zones: The list of availability zones.
        :param _builtins.str datastore_type: The type of datastore.  
               The options are as follows:
               - **dws**: OLAP, elastic scaling, unlimited scaling of compute and storage capacity.
               - **hybrid**: a single data warehouse used for transaction and analytics workloads,
               in single-node or cluster mode.
               - **stream**: built-in time series operators; up to 40:1 compression ratio; applicable to IoT services.
        :param _builtins.str datastore_version: The version of datastore.
        :param Sequence['GetFlaovrsFlavorElasticVolumeSpecArgs'] elastic_volume_specs: The ElasticVolumeSpec structure is documented below.
        :param _builtins.str flavor_id: The name of the dws node flavor.  
               It is referenced by `node_type` in `dws_get_flaovrs`.
        :param _builtins.int memory: The ram of the dws node flavor in GB.
        :param _builtins.int size: The default disk size in GB.
        :param _builtins.int vcpus: The vcpus of the dws node flavor.
        :param _builtins.str volumetype: Disk type.  
               The options are as follows:
               - **LOCAL_DISK**:common I/O disk.
               - **SSD**: ultra-high I/O disk.
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "datastore_type", datastore_type)
        pulumi.set(__self__, "datastore_version", datastore_version)
        pulumi.set(__self__, "elastic_volume_specs", elastic_volume_specs)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "vcpus", vcpus)
        pulumi.set(__self__, "volumetype", volumetype)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        The list of availability zones.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="datastoreType")
    def datastore_type(self) -> _builtins.str:
        """
        The type of datastore.  
        The options are as follows:
        - **dws**: OLAP, elastic scaling, unlimited scaling of compute and storage capacity.
        - **hybrid**: a single data warehouse used for transaction and analytics workloads,
        in single-node or cluster mode.
        - **stream**: built-in time series operators; up to 40:1 compression ratio; applicable to IoT services.
        """
        return pulumi.get(self, "datastore_type")

    @_builtins.property
    @pulumi.getter(name="datastoreVersion")
    def datastore_version(self) -> _builtins.str:
        """
        The version of datastore.
        """
        return pulumi.get(self, "datastore_version")

    @_builtins.property
    @pulumi.getter(name="elasticVolumeSpecs")
    def elastic_volume_specs(self) -> Sequence['outputs.GetFlaovrsFlavorElasticVolumeSpecResult']:
        """
        The ElasticVolumeSpec structure is documented below.
        """
        return pulumi.get(self, "elastic_volume_specs")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> _builtins.str:
        """
        The name of the dws node flavor.  
        It is referenced by `node_type` in `dws_get_flaovrs`.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        """
        The ram of the dws node flavor in GB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The default disk size in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        The vcpus of the dws node flavor.
        """
        return pulumi.get(self, "vcpus")

    @_builtins.property
    @pulumi.getter
    def volumetype(self) -> _builtins.str:
        """
        Disk type.  
        The options are as follows:
        - **LOCAL_DISK**:common I/O disk.
        - **SSD**: ultra-high I/O disk.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetFlaovrsFlavorElasticVolumeSpecResult(dict):
    def __init__(__self__, *,
                 max_size: _builtins.int,
                 min_size: _builtins.int,
                 step: _builtins.int):
        """
        :param _builtins.int max_size: Maximum disk size.
        :param _builtins.int min_size: Minimum disk size.
        :param _builtins.int step: Disk size increment step.
        """
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "step", step)

    @_builtins.property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> _builtins.int:
        """
        Maximum disk size.
        """
        return pulumi.get(self, "max_size")

    @_builtins.property
    @pulumi.getter(name="minSize")
    def min_size(self) -> _builtins.int:
        """
        Minimum disk size.
        """
        return pulumi.get(self, "min_size")

    @_builtins.property
    @pulumi.getter
    def step(self) -> _builtins.int:
        """
        Disk size increment step.
        """
        return pulumi.get(self, "step")


@pulumi.output_type
class GetLogicalClusterRingsClusterRingResult(dict):
    def __init__(__self__, *,
                 is_available: _builtins.bool,
                 ring_hosts: Sequence['outputs.GetLogicalClusterRingsClusterRingRingHostResult']):
        """
        :param _builtins.bool is_available: Indicates whether the cluster host ring is available. Only host rings with this field set to **true**
               can be used to create logical clusters.
        :param Sequence['GetLogicalClusterRingsClusterRingRingHostArgs'] ring_hosts: Indicates the cluster host ring list information.
               The ring_hosts structure is documented below.
        """
        pulumi.set(__self__, "is_available", is_available)
        pulumi.set(__self__, "ring_hosts", ring_hosts)

    @_builtins.property
    @pulumi.getter(name="isAvailable")
    def is_available(self) -> _builtins.bool:
        """
        Indicates whether the cluster host ring is available. Only host rings with this field set to **true**
        can be used to create logical clusters.
        """
        return pulumi.get(self, "is_available")

    @_builtins.property
    @pulumi.getter(name="ringHosts")
    def ring_hosts(self) -> Sequence['outputs.GetLogicalClusterRingsClusterRingRingHostResult']:
        """
        Indicates the cluster host ring list information.
        The ring_hosts structure is documented below.
        """
        return pulumi.get(self, "ring_hosts")


@pulumi.output_type
class GetLogicalClusterRingsClusterRingRingHostResult(dict):
    def __init__(__self__, *,
                 back_ip: _builtins.str,
                 cpu_cores: _builtins.int,
                 disk_size: _builtins.float,
                 host_name: _builtins.str,
                 memory: _builtins.float):
        """
        :param _builtins.str back_ip: Indicates the backend IP address.
        :param _builtins.int cpu_cores: Indicates the number of CPU cores.
        :param _builtins.float disk_size: Indicates the host disk size. The unit is GB.
        :param _builtins.str host_name: Indicates the host name.
        :param _builtins.float memory: Indicates the host memory.
        """
        pulumi.set(__self__, "back_ip", back_ip)
        pulumi.set(__self__, "cpu_cores", cpu_cores)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "memory", memory)

    @_builtins.property
    @pulumi.getter(name="backIp")
    def back_ip(self) -> _builtins.str:
        """
        Indicates the backend IP address.
        """
        return pulumi.get(self, "back_ip")

    @_builtins.property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> _builtins.int:
        """
        Indicates the number of CPU cores.
        """
        return pulumi.get(self, "cpu_cores")

    @_builtins.property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> _builtins.float:
        """
        Indicates the host disk size. The unit is GB.
        """
        return pulumi.get(self, "disk_size")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Indicates the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.float:
        """
        Indicates the host memory.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class GetLogicalClusterVolumesVolumeResult(dict):
    def __init__(__self__, *,
                 logical_cluster_name: _builtins.str,
                 percentage: _builtins.str,
                 total: _builtins.str,
                 usage: _builtins.str):
        """
        :param _builtins.str logical_cluster_name: The name of the logical cluster.
        :param _builtins.str percentage: The percentage of disk space used.
        :param _builtins.str total: The total capacity of the disk.
        :param _builtins.str usage: The used capacity of the disk.
        """
        pulumi.set(__self__, "logical_cluster_name", logical_cluster_name)
        pulumi.set(__self__, "percentage", percentage)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "usage", usage)

    @_builtins.property
    @pulumi.getter(name="logicalClusterName")
    def logical_cluster_name(self) -> _builtins.str:
        """
        The name of the logical cluster.
        """
        return pulumi.get(self, "logical_cluster_name")

    @_builtins.property
    @pulumi.getter
    def percentage(self) -> _builtins.str:
        """
        The percentage of disk space used.
        """
        return pulumi.get(self, "percentage")

    @_builtins.property
    @pulumi.getter
    def total(self) -> _builtins.str:
        """
        The total capacity of the disk.
        """
        return pulumi.get(self, "total")

    @_builtins.property
    @pulumi.getter
    def usage(self) -> _builtins.str:
        """
        The used capacity of the disk.
        """
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetLogicalClustersLogicalClusterResult(dict):
    def __init__(__self__, *,
                 cluster_rings: Sequence['outputs.GetLogicalClustersLogicalClusterClusterRingResult'],
                 delete_enable: _builtins.bool,
                 edit_enable: _builtins.bool,
                 first_logical_cluster: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str,
                 restart_enable: _builtins.bool,
                 status: _builtins.str):
        """
        :param Sequence['GetLogicalClustersLogicalClusterClusterRingArgs'] cluster_rings: The list of logical cluster rings.
        :param _builtins.bool delete_enable: Whether the logical cluster is allowed to be deleted.
        :param _builtins.bool edit_enable: Whether the logical cluster is allowed to be edited.
        :param _builtins.bool first_logical_cluster: Whether it is the first logical cluster.
        :param _builtins.str id: The ID of the logical cluster.
        :param _builtins.str name: The name of the logical cluster.
        :param _builtins.bool restart_enable: Whether the logical cluster is allowed to be restarted.
        :param _builtins.str status: The current status of the logical cluster.
               + **Failed**
               + **Normal**
               + **Unavailable**
               + **Redistribute**
               + **Redistribute_failed**
               + **Unbalanced**
               + **Stopped**
        """
        pulumi.set(__self__, "cluster_rings", cluster_rings)
        pulumi.set(__self__, "delete_enable", delete_enable)
        pulumi.set(__self__, "edit_enable", edit_enable)
        pulumi.set(__self__, "first_logical_cluster", first_logical_cluster)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "restart_enable", restart_enable)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="clusterRings")
    def cluster_rings(self) -> Sequence['outputs.GetLogicalClustersLogicalClusterClusterRingResult']:
        """
        The list of logical cluster rings.
        """
        return pulumi.get(self, "cluster_rings")

    @_builtins.property
    @pulumi.getter(name="deleteEnable")
    def delete_enable(self) -> _builtins.bool:
        """
        Whether the logical cluster is allowed to be deleted.
        """
        return pulumi.get(self, "delete_enable")

    @_builtins.property
    @pulumi.getter(name="editEnable")
    def edit_enable(self) -> _builtins.bool:
        """
        Whether the logical cluster is allowed to be edited.
        """
        return pulumi.get(self, "edit_enable")

    @_builtins.property
    @pulumi.getter(name="firstLogicalCluster")
    def first_logical_cluster(self) -> _builtins.bool:
        """
        Whether it is the first logical cluster.
        """
        return pulumi.get(self, "first_logical_cluster")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the logical cluster.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the logical cluster.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="restartEnable")
    def restart_enable(self) -> _builtins.bool:
        """
        Whether the logical cluster is allowed to be restarted.
        """
        return pulumi.get(self, "restart_enable")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current status of the logical cluster.
        + **Failed**
        + **Normal**
        + **Unavailable**
        + **Redistribute**
        + **Redistribute_failed**
        + **Unbalanced**
        + **Stopped**
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetLogicalClustersLogicalClusterClusterRingResult(dict):
    def __init__(__self__, *,
                 ring_hosts: Sequence['outputs.GetLogicalClustersLogicalClusterClusterRingRingHostResult']):
        """
        :param Sequence['GetLogicalClustersLogicalClusterClusterRingRingHostArgs'] ring_hosts: The list of the cluster hosts.
        """
        pulumi.set(__self__, "ring_hosts", ring_hosts)

    @_builtins.property
    @pulumi.getter(name="ringHosts")
    def ring_hosts(self) -> Sequence['outputs.GetLogicalClustersLogicalClusterClusterRingRingHostResult']:
        """
        The list of the cluster hosts.
        """
        return pulumi.get(self, "ring_hosts")


@pulumi.output_type
class GetLogicalClustersLogicalClusterClusterRingRingHostResult(dict):
    def __init__(__self__, *,
                 back_ip: _builtins.str,
                 cpu_cores: _builtins.int,
                 disk_size: _builtins.float,
                 host_name: _builtins.str,
                 memory: _builtins.float):
        """
        :param _builtins.str back_ip: The backend IP address.
        :param _builtins.int cpu_cores: The number of CPU cores.
        :param _builtins.float disk_size: The host disk size, in GB.
        :param _builtins.str host_name: The host name.
        :param _builtins.float memory: The host memory, in GB.
        """
        pulumi.set(__self__, "back_ip", back_ip)
        pulumi.set(__self__, "cpu_cores", cpu_cores)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "memory", memory)

    @_builtins.property
    @pulumi.getter(name="backIp")
    def back_ip(self) -> _builtins.str:
        """
        The backend IP address.
        """
        return pulumi.get(self, "back_ip")

    @_builtins.property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> _builtins.int:
        """
        The number of CPU cores.
        """
        return pulumi.get(self, "cpu_cores")

    @_builtins.property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> _builtins.float:
        """
        The host disk size, in GB.
        """
        return pulumi.get(self, "disk_size")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        The host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.float:
        """
        The host memory, in GB.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 limit: _builtins.int,
                 type: _builtins.str,
                 unit: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int limit: The number of available quotas.
        :param _builtins.str type: The type of the quota.
        :param _builtins.str unit: The unit of the quota.
        :param _builtins.int used: The number of quotas used.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The number of available quotas.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the quota.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit of the quota.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The number of quotas used.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetSnapshotPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 backup_level: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 next_fire_time: _builtins.str,
                 strategy: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str backup_level: The backup level of the snapshot.
        :param _builtins.str id: The ID of the snapshot policy.
        :param _builtins.str name: The name of the snapshot policy.
        :param _builtins.str next_fire_time: The start time for doing next snapshot, in RFC3339 format.
        :param _builtins.str strategy: The execution strategy of the snapshot.
        :param _builtins.str type: The type of the snapshot policy.
               + **full**
               + **increment**
        :param _builtins.str updated_at: The latest update time of the snapshot policy, in RFC3339 format.
        """
        pulumi.set(__self__, "backup_level", backup_level)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_fire_time", next_fire_time)
        pulumi.set(__self__, "strategy", strategy)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="backupLevel")
    def backup_level(self) -> _builtins.str:
        """
        The backup level of the snapshot.
        """
        return pulumi.get(self, "backup_level")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the snapshot policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the snapshot policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextFireTime")
    def next_fire_time(self) -> _builtins.str:
        """
        The start time for doing next snapshot, in RFC3339 format.
        """
        return pulumi.get(self, "next_fire_time")

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> _builtins.str:
        """
        The execution strategy of the snapshot.
        """
        return pulumi.get(self, "strategy")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the snapshot policy.
        + **full**
        + **increment**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the snapshot policy, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetSnapshotsSnapshotResult(dict):
    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 finished_at: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.float,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str cluster_id: The cluster ID corresponding of the snapshot.
        :param _builtins.str created_at: The creation time of the snapshot, in RFC3339 format.
        :param _builtins.str description: The description of the snapshot.
        :param _builtins.str finished_at: The completion time of the snapshot, in RFC3339 format.
        :param _builtins.str id: The ID of the snapshot.
        :param _builtins.str name: The name of the snapshot.
        :param _builtins.float size: The size of the snapshot, in GB.
        :param _builtins.str status: The current status of the snapshot.
               + **AVAILABLE**
               + **UNAVAILABLE**
        :param _builtins.str type: The type of the snapshot.
               + **MANUAL**
               + **AUTOMATED**
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "finished_at", finished_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        The cluster ID corresponding of the snapshot.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the snapshot, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the snapshot.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> _builtins.str:
        """
        The completion time of the snapshot, in RFC3339 format.
        """
        return pulumi.get(self, "finished_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the snapshot.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the snapshot.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.float:
        """
        The size of the snapshot, in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current status of the snapshot.
        + **AVAILABLE**
        + **UNAVAILABLE**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the snapshot.
        + **MANUAL**
        + **AUTOMATED**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetStatisticsStatisticResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 unit: _builtins.str,
                 value: _builtins.float):
        """
        :param _builtins.str name: The resource name.
               + **cluster.total**: The total number of DWS clusters.
               + **cluster.normal**: The number of available DWS clusters.
               + **instance.total**: The total number of nodes.
               + **instance.normal**: The number of available nodes.
               + **storage.total**: Total Capacity.
        :param _builtins.str unit: The unit of the resource.
        :param _builtins.float value: The value of the resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The resource name.
        + **cluster.total**: The total number of DWS clusters.
        + **cluster.normal**: The number of available DWS clusters.
        + **instance.total**: The total number of nodes.
        + **instance.normal**: The number of available nodes.
        + **storage.total**: Total Capacity.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit of the resource.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        The value of the resource.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWorkloadPlansPlanResult(dict):
    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 current_stage_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str cluster_id: Specifies the DWS cluster ID to which the workload plans belong.
        :param _builtins.str current_stage_name: The name of the current plan stage corresponding to the workload plan.
        :param _builtins.str id: The ID of the workload plan.
        :param _builtins.str name: The name of the workload plan.
        :param _builtins.str status: The status of the workload plan.
               + **enabled**: The workload plan has been started.
               + **disabled**: The workload plan has not been started.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "current_stage_name", current_stage_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        Specifies the DWS cluster ID to which the workload plans belong.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="currentStageName")
    def current_stage_name(self) -> _builtins.str:
        """
        The name of the current plan stage corresponding to the workload plan.
        """
        return pulumi.get(self, "current_stage_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the workload plan.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the workload plan.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the workload plan.
        + **enabled**: The workload plan has been started.
        + **disabled**: The workload plan has not been started.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetWorkloadQueueAssociatedUsersUserResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 occupy_resource_lists: Sequence['outputs.GetWorkloadQueueAssociatedUsersUserOccupyResourceListResult']):
        """
        :param _builtins.str name: The name of the user.
        :param Sequence['GetWorkloadQueueAssociatedUsersUserOccupyResourceListArgs'] occupy_resource_lists: The list of the resources used by the user to run jobs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "occupy_resource_lists", occupy_resource_lists)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the user.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="occupyResourceLists")
    def occupy_resource_lists(self) -> Sequence['outputs.GetWorkloadQueueAssociatedUsersUserOccupyResourceListResult']:
        """
        The list of the resources used by the user to run jobs.
        """
        return pulumi.get(self, "occupy_resource_lists")


@pulumi.output_type
class GetWorkloadQueueAssociatedUsersUserOccupyResourceListResult(dict):
    def __init__(__self__, *,
                 resource_name: _builtins.str,
                 resource_value: _builtins.int,
                 value_unit: _builtins.str):
        """
        :param _builtins.str resource_name: The resource name.
        :param _builtins.int resource_value: The resource value.
        :param _builtins.str value_unit: The resource attribute unit.
        """
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_value", resource_value)
        pulumi.set(__self__, "value_unit", value_unit)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> _builtins.int:
        """
        The resource value.
        """
        return pulumi.get(self, "resource_value")

    @_builtins.property
    @pulumi.getter(name="valueUnit")
    def value_unit(self) -> _builtins.str:
        """
        The resource attribute unit.
        """
        return pulumi.get(self, "value_unit")


@pulumi.output_type
class GetWorkloadQueuesQueueResult(dict):
    def __init__(__self__, *,
                 configurations: Sequence['outputs.GetWorkloadQueuesQueueConfigurationResult'],
                 logical_cluster_name: _builtins.str,
                 name: _builtins.str,
                 short_query_concurrency_num: _builtins.float,
                 short_query_optimize: _builtins.bool):
        """
        :param Sequence['GetWorkloadQueuesQueueConfigurationArgs'] configurations: The configuration information for workload queue.
               The configuration structure is documented below.
        :param _builtins.str logical_cluster_name: Specifies the name of the cluster. Required
               if the cluster is a logical cluster.
        :param _builtins.str name: Specifies the name of the workload queue.
        :param _builtins.float short_query_concurrency_num: The concurrency of short queries in the workload queue.
        :param _builtins.bool short_query_optimize: Short query acceleration switch.
               + **true**: Support short query acceleration.
               + **false**: Short query acceleration not supported.
        """
        pulumi.set(__self__, "configurations", configurations)
        pulumi.set(__self__, "logical_cluster_name", logical_cluster_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "short_query_concurrency_num", short_query_concurrency_num)
        pulumi.set(__self__, "short_query_optimize", short_query_optimize)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetWorkloadQueuesQueueConfigurationResult']:
        """
        The configuration information for workload queue.
        The configuration structure is documented below.
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter(name="logicalClusterName")
    def logical_cluster_name(self) -> _builtins.str:
        """
        Specifies the name of the cluster. Required
        if the cluster is a logical cluster.
        """
        return pulumi.get(self, "logical_cluster_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the workload queue.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="shortQueryConcurrencyNum")
    def short_query_concurrency_num(self) -> _builtins.float:
        """
        The concurrency of short queries in the workload queue.
        """
        return pulumi.get(self, "short_query_concurrency_num")

    @_builtins.property
    @pulumi.getter(name="shortQueryOptimize")
    def short_query_optimize(self) -> _builtins.bool:
        """
        Short query acceleration switch.
        + **true**: Support short query acceleration.
        + **false**: Short query acceleration not supported.
        """
        return pulumi.get(self, "short_query_optimize")


@pulumi.output_type
class GetWorkloadQueuesQueueConfigurationResult(dict):
    def __init__(__self__, *,
                 resource_name: _builtins.str,
                 resource_value: _builtins.float,
                 value_unit: _builtins.str):
        """
        :param _builtins.str resource_name: The resource name.
        :param _builtins.float resource_value: The resource attribute value.
        :param _builtins.str value_unit: The resource attribute unit.
        """
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_value", resource_value)
        pulumi.set(__self__, "value_unit", value_unit)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> _builtins.float:
        """
        The resource attribute value.
        """
        return pulumi.get(self, "resource_value")

    @_builtins.property
    @pulumi.getter(name="valueUnit")
    def value_unit(self) -> _builtins.str:
        """
        The resource attribute unit.
        """
        return pulumi.get(self, "value_unit")


