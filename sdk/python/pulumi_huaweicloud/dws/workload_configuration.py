# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['WorkloadConfigurationArgs', 'WorkloadConfiguration']

@pulumi.input_type
class WorkloadConfigurationArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 workload_switch: pulumi.Input[_builtins.str],
                 max_concurrency_num: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a WorkloadConfiguration resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workload_switch: Specifies the workload management switch.  
               The valid value are as follows:
               + **on**
               + **off**
               
               > If this parameter is set to **off**, all resource management functions will be unavailable.
        :param pulumi.Input[_builtins.str] max_concurrency_num: Specifies the maximum number of concurrent tasks on a single CN.  
               The valid value ranges from `-1` to `2,147,483,647`, `-1` and `0` means unlimited.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "workload_switch", workload_switch)
        if max_concurrency_num is not None:
            pulumi.set(__self__, "max_concurrency_num", max_concurrency_num)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DWS cluster ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="workloadSwitch")
    def workload_switch(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workload management switch.  
        The valid value are as follows:
        + **on**
        + **off**

        > If this parameter is set to **off**, all resource management functions will be unavailable.
        """
        return pulumi.get(self, "workload_switch")

    @workload_switch.setter
    def workload_switch(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workload_switch", value)

    @_builtins.property
    @pulumi.getter(name="maxConcurrencyNum")
    def max_concurrency_num(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the maximum number of concurrent tasks on a single CN.  
        The valid value ranges from `-1` to `2,147,483,647`, `-1` and `0` means unlimited.
        """
        return pulumi.get(self, "max_concurrency_num")

    @max_concurrency_num.setter
    def max_concurrency_num(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "max_concurrency_num", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _WorkloadConfigurationState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_concurrency_num: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_switch: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering WorkloadConfiguration resources.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] max_concurrency_num: Specifies the maximum number of concurrent tasks on a single CN.  
               The valid value ranges from `-1` to `2,147,483,647`, `-1` and `0` means unlimited.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workload_switch: Specifies the workload management switch.  
               The valid value are as follows:
               + **on**
               + **off**
               
               > If this parameter is set to **off**, all resource management functions will be unavailable.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if max_concurrency_num is not None:
            pulumi.set(__self__, "max_concurrency_num", max_concurrency_num)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if workload_switch is not None:
            pulumi.set(__self__, "workload_switch", workload_switch)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DWS cluster ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="maxConcurrencyNum")
    def max_concurrency_num(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the maximum number of concurrent tasks on a single CN.  
        The valid value ranges from `-1` to `2,147,483,647`, `-1` and `0` means unlimited.
        """
        return pulumi.get(self, "max_concurrency_num")

    @max_concurrency_num.setter
    def max_concurrency_num(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "max_concurrency_num", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="workloadSwitch")
    def workload_switch(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workload management switch.  
        The valid value are as follows:
        + **on**
        + **off**

        > If this parameter is set to **off**, all resource management functions will be unavailable.
        """
        return pulumi.get(self, "workload_switch")

    @workload_switch.setter
    def workload_switch(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workload_switch", value)


@pulumi.type_token("huaweicloud:Dws/workloadConfiguration:WorkloadConfiguration")
class WorkloadConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_concurrency_num: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_switch: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a workload configuration resource under specified DWS cluster within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        dws_cluster_id = config.require_object("dwsClusterId")
        test = huaweicloud.dws.WorkloadConfiguration("test",
            cluster_id=dws_cluster_id,
            workload_switch="on",
            max_concurrency_num="100")
        ```

        ## Import

        The resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/workloadConfiguration:WorkloadConfiguration test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] max_concurrency_num: Specifies the maximum number of concurrent tasks on a single CN.  
               The valid value ranges from `-1` to `2,147,483,647`, `-1` and `0` means unlimited.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workload_switch: Specifies the workload management switch.  
               The valid value are as follows:
               + **on**
               + **off**
               
               > If this parameter is set to **off**, all resource management functions will be unavailable.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkloadConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a workload configuration resource under specified DWS cluster within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        dws_cluster_id = config.require_object("dwsClusterId")
        test = huaweicloud.dws.WorkloadConfiguration("test",
            cluster_id=dws_cluster_id,
            workload_switch="on",
            max_concurrency_num="100")
        ```

        ## Import

        The resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dws/workloadConfiguration:WorkloadConfiguration test <id>
        ```

        :param str resource_name: The name of the resource.
        :param WorkloadConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkloadConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_concurrency_num: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workload_switch: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkloadConfigurationArgs.__new__(WorkloadConfigurationArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["max_concurrency_num"] = max_concurrency_num
            __props__.__dict__["region"] = region
            if workload_switch is None and not opts.urn:
                raise TypeError("Missing required property 'workload_switch'")
            __props__.__dict__["workload_switch"] = workload_switch
        super(WorkloadConfiguration, __self__).__init__(
            'huaweicloud:Dws/workloadConfiguration:WorkloadConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            max_concurrency_num: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            workload_switch: Optional[pulumi.Input[_builtins.str]] = None) -> 'WorkloadConfiguration':
        """
        Get an existing WorkloadConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the DWS cluster ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] max_concurrency_num: Specifies the maximum number of concurrent tasks on a single CN.  
               The valid value ranges from `-1` to `2,147,483,647`, `-1` and `0` means unlimited.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workload_switch: Specifies the workload management switch.  
               The valid value are as follows:
               + **on**
               + **off**
               
               > If this parameter is set to **off**, all resource management functions will be unavailable.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkloadConfigurationState.__new__(_WorkloadConfigurationState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["max_concurrency_num"] = max_concurrency_num
        __props__.__dict__["region"] = region
        __props__.__dict__["workload_switch"] = workload_switch
        return WorkloadConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DWS cluster ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="maxConcurrencyNum")
    def max_concurrency_num(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the maximum number of concurrent tasks on a single CN.  
        The valid value ranges from `-1` to `2,147,483,647`, `-1` and `0` means unlimited.
        """
        return pulumi.get(self, "max_concurrency_num")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workloadSwitch")
    def workload_switch(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workload management switch.  
        The valid value are as follows:
        + **on**
        + **off**

        > If this parameter is set to **off**, all resource management functions will be unavailable.
        """
        return pulumi.get(self, "workload_switch")

