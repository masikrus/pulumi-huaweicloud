# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AutoLaunchGroupArgs', 'AutoLaunchGroup']

@pulumi.input_type
class AutoLaunchGroupArgs:
    def __init__(__self__, *,
                 launch_template_id: pulumi.Input[_builtins.str],
                 launch_template_version: pulumi.Input[_builtins.str],
                 overrides: pulumi.Input[Sequence[pulumi.Input['AutoLaunchGroupOverrideArgs']]],
                 target_capacity: pulumi.Input[_builtins.int],
                 allocation_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_instances: Optional[pulumi.Input[_builtins.str]] = None,
                 excess_fulfilled_capacity_behavior: Optional[pulumi.Input[_builtins.str]] = None,
                 instances_behavior_with_expiration: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spot_price: Optional[pulumi.Input[_builtins.float]] = None,
                 stable_capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 supply_option: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 valid_since: Optional[pulumi.Input[_builtins.str]] = None,
                 valid_until: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AutoLaunchGroup resource.
        :param pulumi.Input[_builtins.str] launch_template_id: Specifies the ID of launch template for instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] launch_template_version: Specifies the version of launch template for instance.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['AutoLaunchGroupOverrideArgs']]] overrides: Specifies the instance details. Supporting mutiple `overrides` to create
               instances of different specification. Changing this creates a new resource.
               The overrides structure is documented below.
        :param pulumi.Input[_builtins.int] target_capacity: Specifies the target capacity of the auto launch group, the unit is the number of
               vCPU, and the value must be bigger than or equal to `stable_capacity`. The capacity of the spot instance euqals to
               full capacity minus `stable_capacity`.
        :param pulumi.Input[_builtins.str] allocation_strategy: Specifies the allocation strategy of the auto launch group.
               
               Valid values are:
               + **lowest_price**: Lowest price strategy, the sum of the prices of all instances launched by the auto launch group
               is the lowest.
               + **prioritized**: Priority strategy, create instances according to the priority set by the specifications.
               + **capacity_optimized**: Capacity optimization strategy. Instances launched by auto launch group are launched first
               according to large specifications.
               
               Default is **lowest_price**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] delete_instances: Specifies the interruption behavior of instances when deleting the auto launch
               group.
               
               Valid values are:
               + **terminate**: Depending on `delete_publicip` and `delete_volume` to determine whether to release the elastic public
               IP and disk.
               + **noTermination**: The elastic public IP and disk are both not released.
               
               Default is **terminate**.
        :param pulumi.Input[_builtins.str] excess_fulfilled_capacity_behavior: Specifies the interruption behavior of instances when target
               capacity is exceeded or reduced. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        :param pulumi.Input[_builtins.str] instances_behavior_with_expiration: Specifies the interruption behavior of running instances
               when requests expire. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the auto launch group. The valid length is limited
               between `1` to `64`, Only Chinese and English letters, digits, hyphens (-) and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the auto launch group.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.float] spot_price: Specifies the highest price a user is willing to pay per hour for a Spot
               instance. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] stable_capacity: Specifies the target capacity to on-demand instance, the unit is the number of
               vCPU, and the value must be less than or equal to `target_capacity`. There can be no on-demand instances in the auto
               launch group.
        :param pulumi.Input[_builtins.str] supply_option: Specifies the selection strategies in resource supply.
               
               Valid values are:
               + **singlation**: Select a specification to supply.
               + **multiple**: Combine multiple specifications to supply.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the request type.
               
               Valid values are:
               + **request**: One-time. The instance cluster is only delivered at startup and will not be retried after scheduling
               failure.
               + **maintain**: Continuous supply. Try to deliver the instance cluster at startup and monitor the capacity. If the
               target capacity is not reached, try to continue creating ECS ​​instances.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] valid_since: Specifies the request start time, together with `valid_since`, determines
               the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is starting now.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] valid_until: Specifies the request end time, together with `valid_since`, determines
               the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is never come to an
               end. Changing this creates a new resource.
               
               <a name="block--overrides"></a>
               The `overrides` block supports:
        """
        pulumi.set(__self__, "launch_template_id", launch_template_id)
        pulumi.set(__self__, "launch_template_version", launch_template_version)
        pulumi.set(__self__, "overrides", overrides)
        pulumi.set(__self__, "target_capacity", target_capacity)
        if allocation_strategy is not None:
            pulumi.set(__self__, "allocation_strategy", allocation_strategy)
        if delete_instances is not None:
            pulumi.set(__self__, "delete_instances", delete_instances)
        if excess_fulfilled_capacity_behavior is not None:
            pulumi.set(__self__, "excess_fulfilled_capacity_behavior", excess_fulfilled_capacity_behavior)
        if instances_behavior_with_expiration is not None:
            pulumi.set(__self__, "instances_behavior_with_expiration", instances_behavior_with_expiration)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if spot_price is not None:
            pulumi.set(__self__, "spot_price", spot_price)
        if stable_capacity is not None:
            pulumi.set(__self__, "stable_capacity", stable_capacity)
        if supply_option is not None:
            pulumi.set(__self__, "supply_option", supply_option)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if valid_since is not None:
            pulumi.set(__self__, "valid_since", valid_since)
        if valid_until is not None:
            pulumi.set(__self__, "valid_until", valid_until)

    @_builtins.property
    @pulumi.getter(name="launchTemplateId")
    def launch_template_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of launch template for instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "launch_template_id")

    @launch_template_id.setter
    def launch_template_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "launch_template_id", value)

    @_builtins.property
    @pulumi.getter(name="launchTemplateVersion")
    def launch_template_version(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the version of launch template for instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "launch_template_version")

    @launch_template_version.setter
    def launch_template_version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "launch_template_version", value)

    @_builtins.property
    @pulumi.getter
    def overrides(self) -> pulumi.Input[Sequence[pulumi.Input['AutoLaunchGroupOverrideArgs']]]:
        """
        Specifies the instance details. Supporting mutiple `overrides` to create
        instances of different specification. Changing this creates a new resource.
        The overrides structure is documented below.
        """
        return pulumi.get(self, "overrides")

    @overrides.setter
    def overrides(self, value: pulumi.Input[Sequence[pulumi.Input['AutoLaunchGroupOverrideArgs']]]):
        pulumi.set(self, "overrides", value)

    @_builtins.property
    @pulumi.getter(name="targetCapacity")
    def target_capacity(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the target capacity of the auto launch group, the unit is the number of
        vCPU, and the value must be bigger than or equal to `stable_capacity`. The capacity of the spot instance euqals to
        full capacity minus `stable_capacity`.
        """
        return pulumi.get(self, "target_capacity")

    @target_capacity.setter
    def target_capacity(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "target_capacity", value)

    @_builtins.property
    @pulumi.getter(name="allocationStrategy")
    def allocation_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the allocation strategy of the auto launch group.

        Valid values are:
        + **lowest_price**: Lowest price strategy, the sum of the prices of all instances launched by the auto launch group
        is the lowest.
        + **prioritized**: Priority strategy, create instances according to the priority set by the specifications.
        + **capacity_optimized**: Capacity optimization strategy. Instances launched by auto launch group are launched first
        according to large specifications.

        Default is **lowest_price**. Changing this creates a new resource.
        """
        return pulumi.get(self, "allocation_strategy")

    @allocation_strategy.setter
    def allocation_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allocation_strategy", value)

    @_builtins.property
    @pulumi.getter(name="deleteInstances")
    def delete_instances(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the interruption behavior of instances when deleting the auto launch
        group.

        Valid values are:
        + **terminate**: Depending on `delete_publicip` and `delete_volume` to determine whether to release the elastic public
        IP and disk.
        + **noTermination**: The elastic public IP and disk are both not released.

        Default is **terminate**.
        """
        return pulumi.get(self, "delete_instances")

    @delete_instances.setter
    def delete_instances(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_instances", value)

    @_builtins.property
    @pulumi.getter(name="excessFulfilledCapacityBehavior")
    def excess_fulfilled_capacity_behavior(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the interruption behavior of instances when target
        capacity is exceeded or reduced. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        """
        return pulumi.get(self, "excess_fulfilled_capacity_behavior")

    @excess_fulfilled_capacity_behavior.setter
    def excess_fulfilled_capacity_behavior(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "excess_fulfilled_capacity_behavior", value)

    @_builtins.property
    @pulumi.getter(name="instancesBehaviorWithExpiration")
    def instances_behavior_with_expiration(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the interruption behavior of running instances
        when requests expire. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        """
        return pulumi.get(self, "instances_behavior_with_expiration")

    @instances_behavior_with_expiration.setter
    def instances_behavior_with_expiration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instances_behavior_with_expiration", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the auto launch group. The valid length is limited
        between `1` to `64`, Only Chinese and English letters, digits, hyphens (-) and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the auto launch group.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the highest price a user is willing to pay per hour for a Spot
        instance. Changing this creates a new resource.
        """
        return pulumi.get(self, "spot_price")

    @spot_price.setter
    def spot_price(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "spot_price", value)

    @_builtins.property
    @pulumi.getter(name="stableCapacity")
    def stable_capacity(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the target capacity to on-demand instance, the unit is the number of
        vCPU, and the value must be less than or equal to `target_capacity`. There can be no on-demand instances in the auto
        launch group.
        """
        return pulumi.get(self, "stable_capacity")

    @stable_capacity.setter
    def stable_capacity(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "stable_capacity", value)

    @_builtins.property
    @pulumi.getter(name="supplyOption")
    def supply_option(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the selection strategies in resource supply.

        Valid values are:
        + **singlation**: Select a specification to supply.
        + **multiple**: Combine multiple specifications to supply.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "supply_option")

    @supply_option.setter
    def supply_option(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "supply_option", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request type.

        Valid values are:
        + **request**: One-time. The instance cluster is only delivered at startup and will not be retried after scheduling
        failure.
        + **maintain**: Continuous supply. Try to deliver the instance cluster at startup and monitor the capacity. If the
        target capacity is not reached, try to continue creating ECS ​​instances.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="validSince")
    def valid_since(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request start time, together with `valid_since`, determines
        the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is starting now.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "valid_since")

    @valid_since.setter
    def valid_since(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "valid_since", value)

    @_builtins.property
    @pulumi.getter(name="validUntil")
    def valid_until(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request end time, together with `valid_since`, determines
        the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is never come to an
        end. Changing this creates a new resource.

        <a name="block--overrides"></a>
        The `overrides` block supports:
        """
        return pulumi.get(self, "valid_until")

    @valid_until.setter
    def valid_until(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "valid_until", value)


@pulumi.input_type
class _AutoLaunchGroupState:
    def __init__(__self__, *,
                 allocation_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 current_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 current_stable_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 delete_instances: Optional[pulumi.Input[_builtins.str]] = None,
                 excess_fulfilled_capacity_behavior: Optional[pulumi.Input[_builtins.str]] = None,
                 instances_behavior_with_expiration: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 overrides: Optional[pulumi.Input[Sequence[pulumi.Input['AutoLaunchGroupOverrideArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spot_price: Optional[pulumi.Input[_builtins.float]] = None,
                 stable_capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 supply_option: Optional[pulumi.Input[_builtins.str]] = None,
                 target_capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 task_state: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 valid_since: Optional[pulumi.Input[_builtins.str]] = None,
                 valid_until: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AutoLaunchGroup resources.
        :param pulumi.Input[_builtins.str] allocation_strategy: Specifies the allocation strategy of the auto launch group.
               
               Valid values are:
               + **lowest_price**: Lowest price strategy, the sum of the prices of all instances launched by the auto launch group
               is the lowest.
               + **prioritized**: Priority strategy, create instances according to the priority set by the specifications.
               + **capacity_optimized**: Capacity optimization strategy. Instances launched by auto launch group are launched first
               according to large specifications.
               
               Default is **lowest_price**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] created_at: The create time of the auto launch group.
        :param pulumi.Input[_builtins.float] current_capacity: The total computing power that has been purchased successfully.
        :param pulumi.Input[_builtins.float] current_stable_capacity: The on-demand computing power has been successfully purchased.
        :param pulumi.Input[_builtins.str] delete_instances: Specifies the interruption behavior of instances when deleting the auto launch
               group.
               
               Valid values are:
               + **terminate**: Depending on `delete_publicip` and `delete_volume` to determine whether to release the elastic public
               IP and disk.
               + **noTermination**: The elastic public IP and disk are both not released.
               
               Default is **terminate**.
        :param pulumi.Input[_builtins.str] excess_fulfilled_capacity_behavior: Specifies the interruption behavior of instances when target
               capacity is exceeded or reduced. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        :param pulumi.Input[_builtins.str] instances_behavior_with_expiration: Specifies the interruption behavior of running instances
               when requests expire. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        :param pulumi.Input[_builtins.str] launch_template_id: Specifies the ID of launch template for instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] launch_template_version: Specifies the version of launch template for instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the auto launch group. The valid length is limited
               between `1` to `64`, Only Chinese and English letters, digits, hyphens (-) and underscores (_) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input['AutoLaunchGroupOverrideArgs']]] overrides: Specifies the instance details. Supporting mutiple `overrides` to create
               instances of different specification. Changing this creates a new resource.
               The overrides structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the auto launch group.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.float] spot_price: Specifies the highest price a user is willing to pay per hour for a Spot
               instance. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] stable_capacity: Specifies the target capacity to on-demand instance, the unit is the number of
               vCPU, and the value must be less than or equal to `target_capacity`. There can be no on-demand instances in the auto
               launch group.
        :param pulumi.Input[_builtins.str] status: The status of the auto launch group.
        :param pulumi.Input[_builtins.str] supply_option: Specifies the selection strategies in resource supply.
               
               Valid values are:
               + **singlation**: Select a specification to supply.
               + **multiple**: Combine multiple specifications to supply.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] target_capacity: Specifies the target capacity of the auto launch group, the unit is the number of
               vCPU, and the value must be bigger than or equal to `stable_capacity`. The capacity of the spot instance euqals to
               full capacity minus `stable_capacity`.
        :param pulumi.Input[_builtins.str] task_state: The status of the auto launch group task. It can be:
               + **HANDLING**: Launching.
               + **FULFILLED**: The auto launch group task is fully equipped.
               + **ERROR**: Error occurs in the auto launch group task.
        :param pulumi.Input[_builtins.str] type: Specifies the request type.
               
               Valid values are:
               + **request**: One-time. The instance cluster is only delivered at startup and will not be retried after scheduling
               failure.
               + **maintain**: Continuous supply. Try to deliver the instance cluster at startup and monitor the capacity. If the
               target capacity is not reached, try to continue creating ECS ​​instances.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] valid_since: Specifies the request start time, together with `valid_since`, determines
               the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is starting now.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] valid_until: Specifies the request end time, together with `valid_since`, determines
               the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is never come to an
               end. Changing this creates a new resource.
               
               <a name="block--overrides"></a>
               The `overrides` block supports:
        """
        if allocation_strategy is not None:
            pulumi.set(__self__, "allocation_strategy", allocation_strategy)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if current_stable_capacity is not None:
            pulumi.set(__self__, "current_stable_capacity", current_stable_capacity)
        if delete_instances is not None:
            pulumi.set(__self__, "delete_instances", delete_instances)
        if excess_fulfilled_capacity_behavior is not None:
            pulumi.set(__self__, "excess_fulfilled_capacity_behavior", excess_fulfilled_capacity_behavior)
        if instances_behavior_with_expiration is not None:
            pulumi.set(__self__, "instances_behavior_with_expiration", instances_behavior_with_expiration)
        if launch_template_id is not None:
            pulumi.set(__self__, "launch_template_id", launch_template_id)
        if launch_template_version is not None:
            pulumi.set(__self__, "launch_template_version", launch_template_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overrides is not None:
            pulumi.set(__self__, "overrides", overrides)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if spot_price is not None:
            pulumi.set(__self__, "spot_price", spot_price)
        if stable_capacity is not None:
            pulumi.set(__self__, "stable_capacity", stable_capacity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if supply_option is not None:
            pulumi.set(__self__, "supply_option", supply_option)
        if target_capacity is not None:
            pulumi.set(__self__, "target_capacity", target_capacity)
        if task_state is not None:
            pulumi.set(__self__, "task_state", task_state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if valid_since is not None:
            pulumi.set(__self__, "valid_since", valid_since)
        if valid_until is not None:
            pulumi.set(__self__, "valid_until", valid_until)

    @_builtins.property
    @pulumi.getter(name="allocationStrategy")
    def allocation_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the allocation strategy of the auto launch group.

        Valid values are:
        + **lowest_price**: Lowest price strategy, the sum of the prices of all instances launched by the auto launch group
        is the lowest.
        + **prioritized**: Priority strategy, create instances according to the priority set by the specifications.
        + **capacity_optimized**: Capacity optimization strategy. Instances launched by auto launch group are launched first
        according to large specifications.

        Default is **lowest_price**. Changing this creates a new resource.
        """
        return pulumi.get(self, "allocation_strategy")

    @allocation_strategy.setter
    def allocation_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allocation_strategy", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The create time of the auto launch group.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total computing power that has been purchased successfully.
        """
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "current_capacity", value)

    @_builtins.property
    @pulumi.getter(name="currentStableCapacity")
    def current_stable_capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The on-demand computing power has been successfully purchased.
        """
        return pulumi.get(self, "current_stable_capacity")

    @current_stable_capacity.setter
    def current_stable_capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "current_stable_capacity", value)

    @_builtins.property
    @pulumi.getter(name="deleteInstances")
    def delete_instances(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the interruption behavior of instances when deleting the auto launch
        group.

        Valid values are:
        + **terminate**: Depending on `delete_publicip` and `delete_volume` to determine whether to release the elastic public
        IP and disk.
        + **noTermination**: The elastic public IP and disk are both not released.

        Default is **terminate**.
        """
        return pulumi.get(self, "delete_instances")

    @delete_instances.setter
    def delete_instances(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_instances", value)

    @_builtins.property
    @pulumi.getter(name="excessFulfilledCapacityBehavior")
    def excess_fulfilled_capacity_behavior(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the interruption behavior of instances when target
        capacity is exceeded or reduced. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        """
        return pulumi.get(self, "excess_fulfilled_capacity_behavior")

    @excess_fulfilled_capacity_behavior.setter
    def excess_fulfilled_capacity_behavior(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "excess_fulfilled_capacity_behavior", value)

    @_builtins.property
    @pulumi.getter(name="instancesBehaviorWithExpiration")
    def instances_behavior_with_expiration(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the interruption behavior of running instances
        when requests expire. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        """
        return pulumi.get(self, "instances_behavior_with_expiration")

    @instances_behavior_with_expiration.setter
    def instances_behavior_with_expiration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instances_behavior_with_expiration", value)

    @_builtins.property
    @pulumi.getter(name="launchTemplateId")
    def launch_template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of launch template for instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "launch_template_id")

    @launch_template_id.setter
    def launch_template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_template_id", value)

    @_builtins.property
    @pulumi.getter(name="launchTemplateVersion")
    def launch_template_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of launch template for instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "launch_template_version")

    @launch_template_version.setter
    def launch_template_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_template_version", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the auto launch group. The valid length is limited
        between `1` to `64`, Only Chinese and English letters, digits, hyphens (-) and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutoLaunchGroupOverrideArgs']]]]:
        """
        Specifies the instance details. Supporting mutiple `overrides` to create
        instances of different specification. Changing this creates a new resource.
        The overrides structure is documented below.
        """
        return pulumi.get(self, "overrides")

    @overrides.setter
    def overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutoLaunchGroupOverrideArgs']]]]):
        pulumi.set(self, "overrides", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the auto launch group.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the highest price a user is willing to pay per hour for a Spot
        instance. Changing this creates a new resource.
        """
        return pulumi.get(self, "spot_price")

    @spot_price.setter
    def spot_price(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "spot_price", value)

    @_builtins.property
    @pulumi.getter(name="stableCapacity")
    def stable_capacity(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the target capacity to on-demand instance, the unit is the number of
        vCPU, and the value must be less than or equal to `target_capacity`. There can be no on-demand instances in the auto
        launch group.
        """
        return pulumi.get(self, "stable_capacity")

    @stable_capacity.setter
    def stable_capacity(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "stable_capacity", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the auto launch group.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="supplyOption")
    def supply_option(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the selection strategies in resource supply.

        Valid values are:
        + **singlation**: Select a specification to supply.
        + **multiple**: Combine multiple specifications to supply.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "supply_option")

    @supply_option.setter
    def supply_option(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "supply_option", value)

    @_builtins.property
    @pulumi.getter(name="targetCapacity")
    def target_capacity(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the target capacity of the auto launch group, the unit is the number of
        vCPU, and the value must be bigger than or equal to `stable_capacity`. The capacity of the spot instance euqals to
        full capacity minus `stable_capacity`.
        """
        return pulumi.get(self, "target_capacity")

    @target_capacity.setter
    def target_capacity(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "target_capacity", value)

    @_builtins.property
    @pulumi.getter(name="taskState")
    def task_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the auto launch group task. It can be:
        + **HANDLING**: Launching.
        + **FULFILLED**: The auto launch group task is fully equipped.
        + **ERROR**: Error occurs in the auto launch group task.
        """
        return pulumi.get(self, "task_state")

    @task_state.setter
    def task_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_state", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request type.

        Valid values are:
        + **request**: One-time. The instance cluster is only delivered at startup and will not be retried after scheduling
        failure.
        + **maintain**: Continuous supply. Try to deliver the instance cluster at startup and monitor the capacity. If the
        target capacity is not reached, try to continue creating ECS ​​instances.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="validSince")
    def valid_since(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request start time, together with `valid_since`, determines
        the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is starting now.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "valid_since")

    @valid_since.setter
    def valid_since(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "valid_since", value)

    @_builtins.property
    @pulumi.getter(name="validUntil")
    def valid_until(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request end time, together with `valid_since`, determines
        the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is never come to an
        end. Changing this creates a new resource.

        <a name="block--overrides"></a>
        The `overrides` block supports:
        """
        return pulumi.get(self, "valid_until")

    @valid_until.setter
    def valid_until(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "valid_until", value)


@pulumi.type_token("huaweicloud:Ecs/autoLaunchGroup:AutoLaunchGroup")
class AutoLaunchGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocation_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_instances: Optional[pulumi.Input[_builtins.str]] = None,
                 excess_fulfilled_capacity_behavior: Optional[pulumi.Input[_builtins.str]] = None,
                 instances_behavior_with_expiration: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 overrides: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AutoLaunchGroupOverrideArgs', 'AutoLaunchGroupOverrideArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spot_price: Optional[pulumi.Input[_builtins.float]] = None,
                 stable_capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 supply_option: Optional[pulumi.Input[_builtins.str]] = None,
                 target_capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 valid_since: Optional[pulumi.Input[_builtins.str]] = None,
                 valid_until: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an ECS auto launch group resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        auto_launch_group_name = config.require_object("autoLaunchGroupName")
        launch_template_id = config.require_object("launchTemplateId")
        launch_template_version = config.require_object("launchTemplateVersion")
        availability_zone = config.require_object("availabilityZone")
        flavor_id = config.require_object("flavorId")
        test = huaweicloud.ecs.AutoLaunchGroup("test",
            name=auto_launch_group_name,
            target_capacity=2,
            stable_capacity=2,
            launch_template_id=launch_template_id,
            launch_template_version=launch_template_version,
            overrides=[{
                "availability_zone": availability_zone,
                "flavor_id": flavor_id,
            }])
        ```

        ## Import

        The auto launch group can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Ecs/autoLaunchGroup:AutoLaunchGroup test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `task_state`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_compute_auto_launch_group" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              task_state,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] allocation_strategy: Specifies the allocation strategy of the auto launch group.
               
               Valid values are:
               + **lowest_price**: Lowest price strategy, the sum of the prices of all instances launched by the auto launch group
               is the lowest.
               + **prioritized**: Priority strategy, create instances according to the priority set by the specifications.
               + **capacity_optimized**: Capacity optimization strategy. Instances launched by auto launch group are launched first
               according to large specifications.
               
               Default is **lowest_price**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] delete_instances: Specifies the interruption behavior of instances when deleting the auto launch
               group.
               
               Valid values are:
               + **terminate**: Depending on `delete_publicip` and `delete_volume` to determine whether to release the elastic public
               IP and disk.
               + **noTermination**: The elastic public IP and disk are both not released.
               
               Default is **terminate**.
        :param pulumi.Input[_builtins.str] excess_fulfilled_capacity_behavior: Specifies the interruption behavior of instances when target
               capacity is exceeded or reduced. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        :param pulumi.Input[_builtins.str] instances_behavior_with_expiration: Specifies the interruption behavior of running instances
               when requests expire. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        :param pulumi.Input[_builtins.str] launch_template_id: Specifies the ID of launch template for instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] launch_template_version: Specifies the version of launch template for instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the auto launch group. The valid length is limited
               between `1` to `64`, Only Chinese and English letters, digits, hyphens (-) and underscores (_) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AutoLaunchGroupOverrideArgs', 'AutoLaunchGroupOverrideArgsDict']]]] overrides: Specifies the instance details. Supporting mutiple `overrides` to create
               instances of different specification. Changing this creates a new resource.
               The overrides structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the auto launch group.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.float] spot_price: Specifies the highest price a user is willing to pay per hour for a Spot
               instance. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] stable_capacity: Specifies the target capacity to on-demand instance, the unit is the number of
               vCPU, and the value must be less than or equal to `target_capacity`. There can be no on-demand instances in the auto
               launch group.
        :param pulumi.Input[_builtins.str] supply_option: Specifies the selection strategies in resource supply.
               
               Valid values are:
               + **singlation**: Select a specification to supply.
               + **multiple**: Combine multiple specifications to supply.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] target_capacity: Specifies the target capacity of the auto launch group, the unit is the number of
               vCPU, and the value must be bigger than or equal to `stable_capacity`. The capacity of the spot instance euqals to
               full capacity minus `stable_capacity`.
        :param pulumi.Input[_builtins.str] type: Specifies the request type.
               
               Valid values are:
               + **request**: One-time. The instance cluster is only delivered at startup and will not be retried after scheduling
               failure.
               + **maintain**: Continuous supply. Try to deliver the instance cluster at startup and monitor the capacity. If the
               target capacity is not reached, try to continue creating ECS ​​instances.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] valid_since: Specifies the request start time, together with `valid_since`, determines
               the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is starting now.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] valid_until: Specifies the request end time, together with `valid_since`, determines
               the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is never come to an
               end. Changing this creates a new resource.
               
               <a name="block--overrides"></a>
               The `overrides` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AutoLaunchGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an ECS auto launch group resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        auto_launch_group_name = config.require_object("autoLaunchGroupName")
        launch_template_id = config.require_object("launchTemplateId")
        launch_template_version = config.require_object("launchTemplateVersion")
        availability_zone = config.require_object("availabilityZone")
        flavor_id = config.require_object("flavorId")
        test = huaweicloud.ecs.AutoLaunchGroup("test",
            name=auto_launch_group_name,
            target_capacity=2,
            stable_capacity=2,
            launch_template_id=launch_template_id,
            launch_template_version=launch_template_version,
            overrides=[{
                "availability_zone": availability_zone,
                "flavor_id": flavor_id,
            }])
        ```

        ## Import

        The auto launch group can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Ecs/autoLaunchGroup:AutoLaunchGroup test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `task_state`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_compute_auto_launch_group" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              task_state,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param AutoLaunchGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutoLaunchGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocation_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_instances: Optional[pulumi.Input[_builtins.str]] = None,
                 excess_fulfilled_capacity_behavior: Optional[pulumi.Input[_builtins.str]] = None,
                 instances_behavior_with_expiration: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 overrides: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AutoLaunchGroupOverrideArgs', 'AutoLaunchGroupOverrideArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spot_price: Optional[pulumi.Input[_builtins.float]] = None,
                 stable_capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 supply_option: Optional[pulumi.Input[_builtins.str]] = None,
                 target_capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 valid_since: Optional[pulumi.Input[_builtins.str]] = None,
                 valid_until: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutoLaunchGroupArgs.__new__(AutoLaunchGroupArgs)

            __props__.__dict__["allocation_strategy"] = allocation_strategy
            __props__.__dict__["delete_instances"] = delete_instances
            __props__.__dict__["excess_fulfilled_capacity_behavior"] = excess_fulfilled_capacity_behavior
            __props__.__dict__["instances_behavior_with_expiration"] = instances_behavior_with_expiration
            if launch_template_id is None and not opts.urn:
                raise TypeError("Missing required property 'launch_template_id'")
            __props__.__dict__["launch_template_id"] = launch_template_id
            if launch_template_version is None and not opts.urn:
                raise TypeError("Missing required property 'launch_template_version'")
            __props__.__dict__["launch_template_version"] = launch_template_version
            __props__.__dict__["name"] = name
            if overrides is None and not opts.urn:
                raise TypeError("Missing required property 'overrides'")
            __props__.__dict__["overrides"] = overrides
            __props__.__dict__["region"] = region
            __props__.__dict__["spot_price"] = spot_price
            __props__.__dict__["stable_capacity"] = stable_capacity
            __props__.__dict__["supply_option"] = supply_option
            if target_capacity is None and not opts.urn:
                raise TypeError("Missing required property 'target_capacity'")
            __props__.__dict__["target_capacity"] = target_capacity
            __props__.__dict__["type"] = type
            __props__.__dict__["valid_since"] = valid_since
            __props__.__dict__["valid_until"] = valid_until
            __props__.__dict__["created_at"] = None
            __props__.__dict__["current_capacity"] = None
            __props__.__dict__["current_stable_capacity"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["task_state"] = None
        super(AutoLaunchGroup, __self__).__init__(
            'huaweicloud:Ecs/autoLaunchGroup:AutoLaunchGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allocation_strategy: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            current_capacity: Optional[pulumi.Input[_builtins.float]] = None,
            current_stable_capacity: Optional[pulumi.Input[_builtins.float]] = None,
            delete_instances: Optional[pulumi.Input[_builtins.str]] = None,
            excess_fulfilled_capacity_behavior: Optional[pulumi.Input[_builtins.str]] = None,
            instances_behavior_with_expiration: Optional[pulumi.Input[_builtins.str]] = None,
            launch_template_id: Optional[pulumi.Input[_builtins.str]] = None,
            launch_template_version: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            overrides: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AutoLaunchGroupOverrideArgs', 'AutoLaunchGroupOverrideArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            spot_price: Optional[pulumi.Input[_builtins.float]] = None,
            stable_capacity: Optional[pulumi.Input[_builtins.int]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            supply_option: Optional[pulumi.Input[_builtins.str]] = None,
            target_capacity: Optional[pulumi.Input[_builtins.int]] = None,
            task_state: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            valid_since: Optional[pulumi.Input[_builtins.str]] = None,
            valid_until: Optional[pulumi.Input[_builtins.str]] = None) -> 'AutoLaunchGroup':
        """
        Get an existing AutoLaunchGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] allocation_strategy: Specifies the allocation strategy of the auto launch group.
               
               Valid values are:
               + **lowest_price**: Lowest price strategy, the sum of the prices of all instances launched by the auto launch group
               is the lowest.
               + **prioritized**: Priority strategy, create instances according to the priority set by the specifications.
               + **capacity_optimized**: Capacity optimization strategy. Instances launched by auto launch group are launched first
               according to large specifications.
               
               Default is **lowest_price**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] created_at: The create time of the auto launch group.
        :param pulumi.Input[_builtins.float] current_capacity: The total computing power that has been purchased successfully.
        :param pulumi.Input[_builtins.float] current_stable_capacity: The on-demand computing power has been successfully purchased.
        :param pulumi.Input[_builtins.str] delete_instances: Specifies the interruption behavior of instances when deleting the auto launch
               group.
               
               Valid values are:
               + **terminate**: Depending on `delete_publicip` and `delete_volume` to determine whether to release the elastic public
               IP and disk.
               + **noTermination**: The elastic public IP and disk are both not released.
               
               Default is **terminate**.
        :param pulumi.Input[_builtins.str] excess_fulfilled_capacity_behavior: Specifies the interruption behavior of instances when target
               capacity is exceeded or reduced. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        :param pulumi.Input[_builtins.str] instances_behavior_with_expiration: Specifies the interruption behavior of running instances
               when requests expire. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        :param pulumi.Input[_builtins.str] launch_template_id: Specifies the ID of launch template for instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] launch_template_version: Specifies the version of launch template for instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the auto launch group. The valid length is limited
               between `1` to `64`, Only Chinese and English letters, digits, hyphens (-) and underscores (_) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AutoLaunchGroupOverrideArgs', 'AutoLaunchGroupOverrideArgsDict']]]] overrides: Specifies the instance details. Supporting mutiple `overrides` to create
               instances of different specification. Changing this creates a new resource.
               The overrides structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the auto launch group.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.float] spot_price: Specifies the highest price a user is willing to pay per hour for a Spot
               instance. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] stable_capacity: Specifies the target capacity to on-demand instance, the unit is the number of
               vCPU, and the value must be less than or equal to `target_capacity`. There can be no on-demand instances in the auto
               launch group.
        :param pulumi.Input[_builtins.str] status: The status of the auto launch group.
        :param pulumi.Input[_builtins.str] supply_option: Specifies the selection strategies in resource supply.
               
               Valid values are:
               + **singlation**: Select a specification to supply.
               + **multiple**: Combine multiple specifications to supply.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] target_capacity: Specifies the target capacity of the auto launch group, the unit is the number of
               vCPU, and the value must be bigger than or equal to `stable_capacity`. The capacity of the spot instance euqals to
               full capacity minus `stable_capacity`.
        :param pulumi.Input[_builtins.str] task_state: The status of the auto launch group task. It can be:
               + **HANDLING**: Launching.
               + **FULFILLED**: The auto launch group task is fully equipped.
               + **ERROR**: Error occurs in the auto launch group task.
        :param pulumi.Input[_builtins.str] type: Specifies the request type.
               
               Valid values are:
               + **request**: One-time. The instance cluster is only delivered at startup and will not be retried after scheduling
               failure.
               + **maintain**: Continuous supply. Try to deliver the instance cluster at startup and monitor the capacity. If the
               target capacity is not reached, try to continue creating ECS ​​instances.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] valid_since: Specifies the request start time, together with `valid_since`, determines
               the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is starting now.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] valid_until: Specifies the request end time, together with `valid_since`, determines
               the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is never come to an
               end. Changing this creates a new resource.
               
               <a name="block--overrides"></a>
               The `overrides` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AutoLaunchGroupState.__new__(_AutoLaunchGroupState)

        __props__.__dict__["allocation_strategy"] = allocation_strategy
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["current_capacity"] = current_capacity
        __props__.__dict__["current_stable_capacity"] = current_stable_capacity
        __props__.__dict__["delete_instances"] = delete_instances
        __props__.__dict__["excess_fulfilled_capacity_behavior"] = excess_fulfilled_capacity_behavior
        __props__.__dict__["instances_behavior_with_expiration"] = instances_behavior_with_expiration
        __props__.__dict__["launch_template_id"] = launch_template_id
        __props__.__dict__["launch_template_version"] = launch_template_version
        __props__.__dict__["name"] = name
        __props__.__dict__["overrides"] = overrides
        __props__.__dict__["region"] = region
        __props__.__dict__["spot_price"] = spot_price
        __props__.__dict__["stable_capacity"] = stable_capacity
        __props__.__dict__["status"] = status
        __props__.__dict__["supply_option"] = supply_option
        __props__.__dict__["target_capacity"] = target_capacity
        __props__.__dict__["task_state"] = task_state
        __props__.__dict__["type"] = type
        __props__.__dict__["valid_since"] = valid_since
        __props__.__dict__["valid_until"] = valid_until
        return AutoLaunchGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allocationStrategy")
    def allocation_strategy(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the allocation strategy of the auto launch group.

        Valid values are:
        + **lowest_price**: Lowest price strategy, the sum of the prices of all instances launched by the auto launch group
        is the lowest.
        + **prioritized**: Priority strategy, create instances according to the priority set by the specifications.
        + **capacity_optimized**: Capacity optimization strategy. Instances launched by auto launch group are launched first
        according to large specifications.

        Default is **lowest_price**. Changing this creates a new resource.
        """
        return pulumi.get(self, "allocation_strategy")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The create time of the auto launch group.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> pulumi.Output[_builtins.float]:
        """
        The total computing power that has been purchased successfully.
        """
        return pulumi.get(self, "current_capacity")

    @_builtins.property
    @pulumi.getter(name="currentStableCapacity")
    def current_stable_capacity(self) -> pulumi.Output[_builtins.float]:
        """
        The on-demand computing power has been successfully purchased.
        """
        return pulumi.get(self, "current_stable_capacity")

    @_builtins.property
    @pulumi.getter(name="deleteInstances")
    def delete_instances(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the interruption behavior of instances when deleting the auto launch
        group.

        Valid values are:
        + **terminate**: Depending on `delete_publicip` and `delete_volume` to determine whether to release the elastic public
        IP and disk.
        + **noTermination**: The elastic public IP and disk are both not released.

        Default is **terminate**.
        """
        return pulumi.get(self, "delete_instances")

    @_builtins.property
    @pulumi.getter(name="excessFulfilledCapacityBehavior")
    def excess_fulfilled_capacity_behavior(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the interruption behavior of instances when target
        capacity is exceeded or reduced. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        """
        return pulumi.get(self, "excess_fulfilled_capacity_behavior")

    @_builtins.property
    @pulumi.getter(name="instancesBehaviorWithExpiration")
    def instances_behavior_with_expiration(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the interruption behavior of running instances
        when requests expire. Valid values are **terminate** and **noTermination**. Default is **terminate**.
        """
        return pulumi.get(self, "instances_behavior_with_expiration")

    @_builtins.property
    @pulumi.getter(name="launchTemplateId")
    def launch_template_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of launch template for instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "launch_template_id")

    @_builtins.property
    @pulumi.getter(name="launchTemplateVersion")
    def launch_template_version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the version of launch template for instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "launch_template_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the auto launch group. The valid length is limited
        between `1` to `64`, Only Chinese and English letters, digits, hyphens (-) and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def overrides(self) -> pulumi.Output[Sequence['outputs.AutoLaunchGroupOverride']]:
        """
        Specifies the instance details. Supporting mutiple `overrides` to create
        instances of different specification. Changing this creates a new resource.
        The overrides structure is documented below.
        """
        return pulumi.get(self, "overrides")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the auto launch group.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the highest price a user is willing to pay per hour for a Spot
        instance. Changing this creates a new resource.
        """
        return pulumi.get(self, "spot_price")

    @_builtins.property
    @pulumi.getter(name="stableCapacity")
    def stable_capacity(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the target capacity to on-demand instance, the unit is the number of
        vCPU, and the value must be less than or equal to `target_capacity`. There can be no on-demand instances in the auto
        launch group.
        """
        return pulumi.get(self, "stable_capacity")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the auto launch group.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supplyOption")
    def supply_option(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the selection strategies in resource supply.

        Valid values are:
        + **singlation**: Select a specification to supply.
        + **multiple**: Combine multiple specifications to supply.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "supply_option")

    @_builtins.property
    @pulumi.getter(name="targetCapacity")
    def target_capacity(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the target capacity of the auto launch group, the unit is the number of
        vCPU, and the value must be bigger than or equal to `stable_capacity`. The capacity of the spot instance euqals to
        full capacity minus `stable_capacity`.
        """
        return pulumi.get(self, "target_capacity")

    @_builtins.property
    @pulumi.getter(name="taskState")
    def task_state(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the auto launch group task. It can be:
        + **HANDLING**: Launching.
        + **FULFILLED**: The auto launch group task is fully equipped.
        + **ERROR**: Error occurs in the auto launch group task.
        """
        return pulumi.get(self, "task_state")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the request type.

        Valid values are:
        + **request**: One-time. The instance cluster is only delivered at startup and will not be retried after scheduling
        failure.
        + **maintain**: Continuous supply. Try to deliver the instance cluster at startup and monitor the capacity. If the
        target capacity is not reached, try to continue creating ECS ​​instances.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="validSince")
    def valid_since(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the request start time, together with `valid_since`, determines
        the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is starting now.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "valid_since")

    @_builtins.property
    @pulumi.getter(name="validUntil")
    def valid_until(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the request end time, together with `valid_since`, determines
        the validity period. In the format of **yyyy-MM-dd'T'HH:mm:ssZ**, an ISO 8601 time format. Default is never come to an
        end. Changing this creates a new resource.

        <a name="block--overrides"></a>
        The `overrides` block supports:
        """
        return pulumi.get(self, "valid_until")

