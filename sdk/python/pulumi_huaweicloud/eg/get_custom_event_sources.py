# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCustomEventSourcesResult',
    'AwaitableGetCustomEventSourcesResult',
    'get_custom_event_sources',
    'get_custom_event_sources_output',
]

@pulumi.output_type
class GetCustomEventSourcesResult:
    """
    A collection of values returned by getCustomEventSources.
    """
    def __init__(__self__, channel_id=None, id=None, name=None, region=None, source_id=None, sources=None):
        if channel_id and not isinstance(channel_id, str):
            raise TypeError("Expected argument 'channel_id' to be a str")
        pulumi.set(__self__, "channel_id", channel_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if source_id and not isinstance(source_id, str):
            raise TypeError("Expected argument 'source_id' to be a str")
        pulumi.set(__self__, "source_id", source_id)
        if sources and not isinstance(sources, list):
            raise TypeError("Expected argument 'sources' to be a list")
        pulumi.set(__self__, "sources", sources)

    @_builtins.property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[_builtins.str]:
        """
        The ID of the custom event channel to which the custom event source belong.
        """
        return pulumi.get(self, "channel_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom event source.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_id")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetCustomEventSourcesSourceResult']:
        """
        The filtered custom event source.
        The object structure is documented below.
        """
        return pulumi.get(self, "sources")


class AwaitableGetCustomEventSourcesResult(GetCustomEventSourcesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCustomEventSourcesResult(
            channel_id=self.channel_id,
            id=self.id,
            name=self.name,
            region=self.region,
            source_id=self.source_id,
            sources=self.sources)


def get_custom_event_sources(channel_id: Optional[_builtins.str] = None,
                             name: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             source_id: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCustomEventSourcesResult:
    """
    Use this data source to filter EG custom event sources within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    source_name = config.require_object("sourceName")
    test = huaweicloud.eg.get_custom_event_sources(name=source_name)
    ```


    :param _builtins.str channel_id: Specifies the ID of the custom event channel to which the custom event sources
           belong.
    :param _builtins.str name: Specifies the event source name used to query specified custom event source.
    :param _builtins.str region: Specifies the region where the custom event sources are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str source_id: Specifies the event source ID used to query specified custom event source.
    """
    __args__ = dict()
    __args__['channelId'] = channel_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['sourceId'] = source_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:eg/getCustomEventSources:getCustomEventSources', __args__, opts=opts, typ=GetCustomEventSourcesResult).value

    return AwaitableGetCustomEventSourcesResult(
        channel_id=pulumi.get(__ret__, 'channel_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        source_id=pulumi.get(__ret__, 'source_id'),
        sources=pulumi.get(__ret__, 'sources'))
def get_custom_event_sources_output(channel_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    source_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCustomEventSourcesResult]:
    """
    Use this data source to filter EG custom event sources within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    source_name = config.require_object("sourceName")
    test = huaweicloud.eg.get_custom_event_sources(name=source_name)
    ```


    :param _builtins.str channel_id: Specifies the ID of the custom event channel to which the custom event sources
           belong.
    :param _builtins.str name: Specifies the event source name used to query specified custom event source.
    :param _builtins.str region: Specifies the region where the custom event sources are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str source_id: Specifies the event source ID used to query specified custom event source.
    """
    __args__ = dict()
    __args__['channelId'] = channel_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['sourceId'] = source_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:eg/getCustomEventSources:getCustomEventSources', __args__, opts=opts, typ=GetCustomEventSourcesResult)
    return __ret__.apply(lambda __response__: GetCustomEventSourcesResult(
        channel_id=pulumi.get(__response__, 'channel_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        source_id=pulumi.get(__response__, 'source_id'),
        sources=pulumi.get(__response__, 'sources')))
