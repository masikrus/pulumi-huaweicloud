# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EventSubscriptionArgs', 'EventSubscription']

@pulumi.input_type
class EventSubscriptionArgs:
    def __init__(__self__, *,
                 channel_id: pulumi.Input[_builtins.str],
                 sources: pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]],
                 targets: pulumi.Input[Sequence[pulumi.Input['EventSubscriptionTargetArgs']]],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EventSubscription resource.
        :param pulumi.Input[_builtins.str] channel_id: Specifies the channel ID to which the event subscription belongs.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]] sources: Specifies the list of the event sources.
               The sources structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['EventSubscriptionTargetArgs']]] targets: Specifies the list of the event targets.
               The targets structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the event subscription.
               
               <a name="subscription_sources"></a>
               The `sources` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the event target.
               The valid length is limited from `1` to `128`.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the event subscription is located.  
               If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        """
        pulumi.set(__self__, "channel_id", channel_id)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "targets", targets)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the channel ID to which the event subscription belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "channel_id", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]]:
        """
        Specifies the list of the event sources.
        The sources structure is documented below.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> pulumi.Input[Sequence[pulumi.Input['EventSubscriptionTargetArgs']]]:
        """
        Specifies the list of the event targets.
        The targets structure is documented below.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: pulumi.Input[Sequence[pulumi.Input['EventSubscriptionTargetArgs']]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the event subscription.

        <a name="subscription_sources"></a>
        The `sources` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the event target.
        The valid length is limited from `1` to `128`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the event subscription is located.  
        If omitted, the provider-level region will be used.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _EventSubscriptionState:
    def __init__(__self__, *,
                 channel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['EventSubscriptionTargetArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EventSubscription resources.
        :param pulumi.Input[_builtins.str] channel_id: Specifies the channel ID to which the event subscription belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The (UTC) creation time of the event target, in RFC3339 format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the event subscription.
               
               <a name="subscription_sources"></a>
               The `sources` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the event target.
               The valid length is limited from `1` to `128`.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the event subscription is located.  
               If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]] sources: Specifies the list of the event sources.
               The sources structure is documented below.
        :param pulumi.Input[_builtins.str] status: The status of the event subscription.
        :param pulumi.Input[Sequence[pulumi.Input['EventSubscriptionTargetArgs']]] targets: Specifies the list of the event targets.
               The targets structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: The (UTC) update time of the event target, in RFC3339 format.
        """
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the channel ID to which the event subscription belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "channel_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The (UTC) creation time of the event target, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the event subscription.

        <a name="subscription_sources"></a>
        The `sources` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the event target.
        The valid length is limited from `1` to `128`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the event subscription is located.  
        If omitted, the provider-level region will be used.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]]]:
        """
        Specifies the list of the event sources.
        The sources structure is documented below.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the event subscription.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventSubscriptionTargetArgs']]]]:
        """
        Specifies the list of the event targets.
        The targets structure is documented below.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventSubscriptionTargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The (UTC) update time of the event target, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:eg/eventSubscription:EventSubscription")
class EventSubscription(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EventSubscriptionSourceArgs', 'EventSubscriptionSourceArgsDict']]]]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EventSubscriptionTargetArgs', 'EventSubscriptionTargetArgsDict']]]]] = None,
                 __props__=None):
        """
        Using this resource to manage an EG event subscription within Huaweicloud.

        ## Example Usage

        ### Event subscription created based on official channel (OBS to FGS)

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        official_channel_id = config.require_object("officialChannelId")
        subscription_name = config.require_object("subscriptionName")
        custom_id_for_obs_source = config.require_object("customIdForObsSource")
        source_obs_bucket_name = config.require_object("sourceObsBucketName")
        custom_id_for_fgs_target = config.require_object("customIdForFgsTarget")
        target_function_urn = config.require_object("targetFunctionUrn")
        test = huaweicloud.eg.EventSubscription("test",
            channel_id=official_channel_id,
            name=subscription_name,
            sources=[{
                "id": custom_id_for_obs_source,
                "name": "HC.OBS.DWR",
                "provider_type": "OFFICIAL",
                "detail_name": "detail",
                "detail": json.dumps({
                    "bucket": source_obs_bucket_name,
                    "objectKeyEncode": True,
                }),
                "filter_rule": json.dumps({
                    "source": [{
                        "op": "StringIn",
                        "values": ["HC.OBS.DWR"],
                    }],
                    "subject": {
                        "and": [
                            {
                                "op": "StringStartsWith",
                                "values": ["test"],
                            },
                            {
                                "op": "StringEndsWith",
                                "values": ["jpg"],
                            },
                        ],
                    },
                    "type": [{
                        "op": "StringIn",
                        "values": [
                            "OBS:DWR:ObjectCreated:PUT",
                            "OBS:DWR:ObjectCreated:POST",
                            "OBS:DWR:ObjectCreated:COPY",
                            "OBS:DWR:ObjectCreated:CompleteMultipartUpload",
                            "OBS:DWR:ObjectRemoved:Delete",
                            "OBS:DWR:ObjectRemoved:DeleteMarkerCreated",
                        ],
                    }],
                    "data": {
                        "obs": {
                            "bucket": {
                                "name": [{
                                    "op": "StringIn",
                                    "values": [source_obs_bucket_name],
                                }],
                            },
                        },
                    },
                }),
            }],
            targets=[{
                "id": custom_id_for_fgs_target,
                "name": "HC.FunctionGraph",
                "provider_type": "OFFICIAL",
                "detail_name": "detail",
                "detail": json.dumps({
                    "urn": target_function_urn,
                    "invoke_type": "ASYNC",
                    "agency_name": "EG_TARGET_AGENCY",
                }),
                "transform": json.dumps({
                    "type": "VARIABLE",
                    "value": "{\\"name\\":\\"$.data.name\\"}",
                    "template": "My name is ${name}.",
                }),
            }])
        ```

        ### Event subscription created based on custom channel (custom source to EG and SMN)

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        subscription_name = config.require_object("subscriptionName")
        source_channel_id = config.require_object("sourceChannelId")
        target_channel_id = config.require_object("targetChannelId")
        custom_id_for_custom_source = config.require_object("customIdForCustomSource")
        custom_event_source_name = config.require_object("customEventSourceName")
        custom_id_for_eg_target = config.require_object("customIdForEgTarget")
        custom_id_for_smn_target = config.require_object("customIdForSmnTarget")
        project_id = config.require_object("projectId")
        region_name = config.require_object("regionName")
        smn_topic_urn = config.require_object("smnTopicUrn")
        test = huaweicloud.eg.EventSubscription("test",
            channel_id=source_channel_id,
            name=subscription_name,
            sources=[{
                "id": custom_id_for_custom_source,
                "provider_type": "CUSTOM",
                "name": custom_event_source_name,
                "filter_rule": json.dumps({
                    "source": [{
                        "op": "StringIn",
                        "values": [custom_event_source_name],
                    }],
                }),
            }],
            targets=[
                {
                    "id": custom_id_for_eg_target,
                    "provider_type": "OFFICIAL",
                    "name": "HC.EG",
                    "detail_name": "eg_detail",
                    "detail": json.dumps({
                        "agency_name": "EG_TARGET_AGENCY",
                        "cross_account": False,
                        "cross_region": False,
                        "target_channel_id": target_channel_id,
                        "target_project_id": project_id,
                        "target_region": region_name,
                    }),
                    "transform": json.dumps({
                        "type": "ORIGINAL",
                        "value": "",
                    }),
                },
                {
                    "id": custom_id_for_smn_target,
                    "provider_type": "OFFICIAL",
                    "name": "HC.SMN",
                    "detail_name": "smn_detail",
                    "detail": json.dumps({
                        "subject_transform": {
                            "type": "CONSTANT",
                            "value": "TEST_CONDTANT",
                        },
                        "urn": smn_topic_urn,
                        "agency_name": "EG_TARGET_AGENCY",
                    }),
                    "transform": json.dumps({
                        "type": "ORIGINAL",
                        "value": "",
                    }),
                },
            ])
        ```

        ## Import

        Subscriptions can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:eg/eventSubscription:EventSubscription test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] channel_id: Specifies the channel ID to which the event subscription belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the event subscription.
               
               <a name="subscription_sources"></a>
               The `sources` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the event target.
               The valid length is limited from `1` to `128`.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the event subscription is located.  
               If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EventSubscriptionSourceArgs', 'EventSubscriptionSourceArgsDict']]]] sources: Specifies the list of the event sources.
               The sources structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EventSubscriptionTargetArgs', 'EventSubscriptionTargetArgsDict']]]] targets: Specifies the list of the event targets.
               The targets structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventSubscriptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to manage an EG event subscription within Huaweicloud.

        ## Example Usage

        ### Event subscription created based on official channel (OBS to FGS)

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        official_channel_id = config.require_object("officialChannelId")
        subscription_name = config.require_object("subscriptionName")
        custom_id_for_obs_source = config.require_object("customIdForObsSource")
        source_obs_bucket_name = config.require_object("sourceObsBucketName")
        custom_id_for_fgs_target = config.require_object("customIdForFgsTarget")
        target_function_urn = config.require_object("targetFunctionUrn")
        test = huaweicloud.eg.EventSubscription("test",
            channel_id=official_channel_id,
            name=subscription_name,
            sources=[{
                "id": custom_id_for_obs_source,
                "name": "HC.OBS.DWR",
                "provider_type": "OFFICIAL",
                "detail_name": "detail",
                "detail": json.dumps({
                    "bucket": source_obs_bucket_name,
                    "objectKeyEncode": True,
                }),
                "filter_rule": json.dumps({
                    "source": [{
                        "op": "StringIn",
                        "values": ["HC.OBS.DWR"],
                    }],
                    "subject": {
                        "and": [
                            {
                                "op": "StringStartsWith",
                                "values": ["test"],
                            },
                            {
                                "op": "StringEndsWith",
                                "values": ["jpg"],
                            },
                        ],
                    },
                    "type": [{
                        "op": "StringIn",
                        "values": [
                            "OBS:DWR:ObjectCreated:PUT",
                            "OBS:DWR:ObjectCreated:POST",
                            "OBS:DWR:ObjectCreated:COPY",
                            "OBS:DWR:ObjectCreated:CompleteMultipartUpload",
                            "OBS:DWR:ObjectRemoved:Delete",
                            "OBS:DWR:ObjectRemoved:DeleteMarkerCreated",
                        ],
                    }],
                    "data": {
                        "obs": {
                            "bucket": {
                                "name": [{
                                    "op": "StringIn",
                                    "values": [source_obs_bucket_name],
                                }],
                            },
                        },
                    },
                }),
            }],
            targets=[{
                "id": custom_id_for_fgs_target,
                "name": "HC.FunctionGraph",
                "provider_type": "OFFICIAL",
                "detail_name": "detail",
                "detail": json.dumps({
                    "urn": target_function_urn,
                    "invoke_type": "ASYNC",
                    "agency_name": "EG_TARGET_AGENCY",
                }),
                "transform": json.dumps({
                    "type": "VARIABLE",
                    "value": "{\\"name\\":\\"$.data.name\\"}",
                    "template": "My name is ${name}.",
                }),
            }])
        ```

        ### Event subscription created based on custom channel (custom source to EG and SMN)

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        subscription_name = config.require_object("subscriptionName")
        source_channel_id = config.require_object("sourceChannelId")
        target_channel_id = config.require_object("targetChannelId")
        custom_id_for_custom_source = config.require_object("customIdForCustomSource")
        custom_event_source_name = config.require_object("customEventSourceName")
        custom_id_for_eg_target = config.require_object("customIdForEgTarget")
        custom_id_for_smn_target = config.require_object("customIdForSmnTarget")
        project_id = config.require_object("projectId")
        region_name = config.require_object("regionName")
        smn_topic_urn = config.require_object("smnTopicUrn")
        test = huaweicloud.eg.EventSubscription("test",
            channel_id=source_channel_id,
            name=subscription_name,
            sources=[{
                "id": custom_id_for_custom_source,
                "provider_type": "CUSTOM",
                "name": custom_event_source_name,
                "filter_rule": json.dumps({
                    "source": [{
                        "op": "StringIn",
                        "values": [custom_event_source_name],
                    }],
                }),
            }],
            targets=[
                {
                    "id": custom_id_for_eg_target,
                    "provider_type": "OFFICIAL",
                    "name": "HC.EG",
                    "detail_name": "eg_detail",
                    "detail": json.dumps({
                        "agency_name": "EG_TARGET_AGENCY",
                        "cross_account": False,
                        "cross_region": False,
                        "target_channel_id": target_channel_id,
                        "target_project_id": project_id,
                        "target_region": region_name,
                    }),
                    "transform": json.dumps({
                        "type": "ORIGINAL",
                        "value": "",
                    }),
                },
                {
                    "id": custom_id_for_smn_target,
                    "provider_type": "OFFICIAL",
                    "name": "HC.SMN",
                    "detail_name": "smn_detail",
                    "detail": json.dumps({
                        "subject_transform": {
                            "type": "CONSTANT",
                            "value": "TEST_CONDTANT",
                        },
                        "urn": smn_topic_urn,
                        "agency_name": "EG_TARGET_AGENCY",
                    }),
                    "transform": json.dumps({
                        "type": "ORIGINAL",
                        "value": "",
                    }),
                },
            ])
        ```

        ## Import

        Subscriptions can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:eg/eventSubscription:EventSubscription test <id>
        ```

        :param str resource_name: The name of the resource.
        :param EventSubscriptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventSubscriptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EventSubscriptionSourceArgs', 'EventSubscriptionSourceArgsDict']]]]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EventSubscriptionTargetArgs', 'EventSubscriptionTargetArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventSubscriptionArgs.__new__(EventSubscriptionArgs)

            if channel_id is None and not opts.urn:
                raise TypeError("Missing required property 'channel_id'")
            __props__.__dict__["channel_id"] = channel_id
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if sources is None and not opts.urn:
                raise TypeError("Missing required property 'sources'")
            __props__.__dict__["sources"] = sources
            if targets is None and not opts.urn:
                raise TypeError("Missing required property 'targets'")
            __props__.__dict__["targets"] = targets
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(EventSubscription, __self__).__init__(
            'huaweicloud:eg/eventSubscription:EventSubscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            channel_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EventSubscriptionSourceArgs', 'EventSubscriptionSourceArgsDict']]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EventSubscriptionTargetArgs', 'EventSubscriptionTargetArgsDict']]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'EventSubscription':
        """
        Get an existing EventSubscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] channel_id: Specifies the channel ID to which the event subscription belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The (UTC) creation time of the event target, in RFC3339 format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the event subscription.
               
               <a name="subscription_sources"></a>
               The `sources` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the event target.
               The valid length is limited from `1` to `128`.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the event subscription is located.  
               If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EventSubscriptionSourceArgs', 'EventSubscriptionSourceArgsDict']]]] sources: Specifies the list of the event sources.
               The sources structure is documented below.
        :param pulumi.Input[_builtins.str] status: The status of the event subscription.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EventSubscriptionTargetArgs', 'EventSubscriptionTargetArgsDict']]]] targets: Specifies the list of the event targets.
               The targets structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: The (UTC) update time of the event target, in RFC3339 format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventSubscriptionState.__new__(_EventSubscriptionState)

        __props__.__dict__["channel_id"] = channel_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["sources"] = sources
        __props__.__dict__["status"] = status
        __props__.__dict__["targets"] = targets
        __props__.__dict__["updated_at"] = updated_at
        return EventSubscription(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the channel ID to which the event subscription belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "channel_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The (UTC) creation time of the event target, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the event subscription.

        <a name="subscription_sources"></a>
        The `sources` block supports:
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the event target.
        The valid length is limited from `1` to `128`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the event subscription is located.  
        If omitted, the provider-level region will be used.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> pulumi.Output[Sequence['outputs.EventSubscriptionSource']]:
        """
        Specifies the list of the event sources.
        The sources structure is documented below.
        """
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the event subscription.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Sequence['outputs.EventSubscriptionTarget']]:
        """
        Specifies the list of the event targets.
        The targets structure is documented below.
        """
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The (UTC) update time of the event target, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

