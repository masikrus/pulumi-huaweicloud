# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EventBatchActionArgs', 'EventBatchAction']

@pulumi.input_type
class EventBatchActionArgs:
    def __init__(__self__, *,
                 channel_id: pulumi.Input[_builtins.str],
                 events: pulumi.Input[Sequence[pulumi.Input['EventBatchActionEventArgs']]],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EventBatchAction resource.
        :param pulumi.Input[_builtins.str] channel_id: Specifies the ID of the event channel.
        :param pulumi.Input[Sequence[pulumi.Input['EventBatchActionEventArgs']]] events: Specifies the list of events to be published.  
               The events structure is documented below.
               
               <a name="eg_events_attr"></a>
               The `events` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the event channel is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "channel_id", channel_id)
        pulumi.set(__self__, "events", events)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the event channel.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "channel_id", value)

    @_builtins.property
    @pulumi.getter
    def events(self) -> pulumi.Input[Sequence[pulumi.Input['EventBatchActionEventArgs']]]:
        """
        Specifies the list of events to be published.  
        The events structure is documented below.

        <a name="eg_events_attr"></a>
        The `events` block supports:
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: pulumi.Input[Sequence[pulumi.Input['EventBatchActionEventArgs']]]):
        pulumi.set(self, "events", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the event channel is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _EventBatchActionState:
    def __init__(__self__, *,
                 channel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['EventBatchActionEventArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EventBatchAction resources.
        :param pulumi.Input[_builtins.str] channel_id: Specifies the ID of the event channel.
        :param pulumi.Input[Sequence[pulumi.Input['EventBatchActionEventArgs']]] events: Specifies the list of events to be published.  
               The events structure is documented below.
               
               <a name="eg_events_attr"></a>
               The `events` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the event channel is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the event channel.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "channel_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventBatchActionEventArgs']]]]:
        """
        Specifies the list of events to be published.  
        The events structure is documented below.

        <a name="eg_events_attr"></a>
        The `events` block supports:
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventBatchActionEventArgs']]]]):
        pulumi.set(self, "events", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the event channel is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:eg/eventBatchAction:EventBatchAction")
class EventBatchAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EventBatchActionEventArgs', 'EventBatchActionEventArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to publish events to an event channel within HuaweiCloud.

        > This resource is only a one-time action resource for dispatch events to channel. Deleting this resource will not
           clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        event_channel_id = config.require_object("eventChannelId")
        events = config.require_object("events")
        test = huaweicloud.eg.EventBatchAction("test",
            events=[{
                "id": entry["value"]["id"],
                "source": entry["value"]["source"],
                "spec_version": entry["value"]["specVersion"],
                "type": entry["value"]["type"],
                "data_content_type": entry["value"]["dataContentType"],
                "data": entry["value"]["data"],
                "time": entry["value"]["time"],
                "subject": entry["value"]["subject"],
            } for entry in [{"key": k, "value": v} for k, v in events]],
            channel_id=event_channel_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] channel_id: Specifies the ID of the event channel.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EventBatchActionEventArgs', 'EventBatchActionEventArgsDict']]]] events: Specifies the list of events to be published.  
               The events structure is documented below.
               
               <a name="eg_events_attr"></a>
               The `events` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the event channel is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventBatchActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to publish events to an event channel within HuaweiCloud.

        > This resource is only a one-time action resource for dispatch events to channel. Deleting this resource will not
           clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        event_channel_id = config.require_object("eventChannelId")
        events = config.require_object("events")
        test = huaweicloud.eg.EventBatchAction("test",
            events=[{
                "id": entry["value"]["id"],
                "source": entry["value"]["source"],
                "spec_version": entry["value"]["specVersion"],
                "type": entry["value"]["type"],
                "data_content_type": entry["value"]["dataContentType"],
                "data": entry["value"]["data"],
                "time": entry["value"]["time"],
                "subject": entry["value"]["subject"],
            } for entry in [{"key": k, "value": v} for k, v in events]],
            channel_id=event_channel_id)
        ```

        :param str resource_name: The name of the resource.
        :param EventBatchActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventBatchActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EventBatchActionEventArgs', 'EventBatchActionEventArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventBatchActionArgs.__new__(EventBatchActionArgs)

            if channel_id is None and not opts.urn:
                raise TypeError("Missing required property 'channel_id'")
            __props__.__dict__["channel_id"] = channel_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            if events is None and not opts.urn:
                raise TypeError("Missing required property 'events'")
            __props__.__dict__["events"] = events
            __props__.__dict__["region"] = region
        super(EventBatchAction, __self__).__init__(
            'huaweicloud:eg/eventBatchAction:EventBatchAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            channel_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            events: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EventBatchActionEventArgs', 'EventBatchActionEventArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'EventBatchAction':
        """
        Get an existing EventBatchAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] channel_id: Specifies the ID of the event channel.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EventBatchActionEventArgs', 'EventBatchActionEventArgsDict']]]] events: Specifies the list of events to be published.  
               The events structure is documented below.
               
               <a name="eg_events_attr"></a>
               The `events` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the event channel is located.  
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventBatchActionState.__new__(_EventBatchActionState)

        __props__.__dict__["channel_id"] = channel_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["events"] = events
        __props__.__dict__["region"] = region
        return EventBatchAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the event channel.
        """
        return pulumi.get(self, "channel_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def events(self) -> pulumi.Output[Sequence['outputs.EventBatchActionEvent']]:
        """
        Specifies the list of events to be published.  
        The events structure is documented below.

        <a name="eg_events_attr"></a>
        The `events` block supports:
        """
        return pulumi.get(self, "events")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the event channel is located.  
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

