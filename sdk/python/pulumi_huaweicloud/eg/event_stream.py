# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EventStreamArgs', 'EventStream']

@pulumi.input_type
class EventStreamArgs:
    def __init__(__self__, *,
                 option: pulumi.Input['EventStreamOptionArgs'],
                 rule_config: pulumi.Input['EventStreamRuleConfigArgs'],
                 sink: pulumi.Input['EventStreamSinkArgs'],
                 source: pulumi.Input['EventStreamSourceArgs'],
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EventStream resource.
        :param pulumi.Input['EventStreamOptionArgs'] option: Specifies the runtime configuration of the event stream.
               The targets structure is documented below.
        :param pulumi.Input['EventStreamRuleConfigArgs'] rule_config: Specifies the rule configuration of the event stream.
               The rule_config structure is documented below.
        :param pulumi.Input['EventStreamSinkArgs'] sink: Specifies the target configuration of the event stream.
               The sink structure is documented below.
        :param pulumi.Input['EventStreamSourceArgs'] source: Specifies the source configuration of the event stream.
               The source structure is documented below.
        :param pulumi.Input[_builtins.str] action: Specifies the desired running status of the event stream.
               + **START**
               + **PAUSE**
               
               Defaults to **PAUSE**.
               
               > The security group used by Kafka or RocketMQ must open the port required by its service documentation display in
               the ingress direction so that the EG service can create resources for it. If not, event stream will fail to start.
               
               <a name="stream_source"></a>
               The `source` block supports:
        :param pulumi.Input[_builtins.str] description: Specifies the description of the event stream.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the event target type.  
               The valid values are as follows:
               + **HC.FunctionGraph**
               + **HC.Kafka**
        :param pulumi.Input[_builtins.str] region: Specifies the region where the event stream is located.  
               If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        """
        pulumi.set(__self__, "option", option)
        pulumi.set(__self__, "rule_config", rule_config)
        pulumi.set(__self__, "sink", sink)
        pulumi.set(__self__, "source", source)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def option(self) -> pulumi.Input['EventStreamOptionArgs']:
        """
        Specifies the runtime configuration of the event stream.
        The targets structure is documented below.
        """
        return pulumi.get(self, "option")

    @option.setter
    def option(self, value: pulumi.Input['EventStreamOptionArgs']):
        pulumi.set(self, "option", value)

    @_builtins.property
    @pulumi.getter(name="ruleConfig")
    def rule_config(self) -> pulumi.Input['EventStreamRuleConfigArgs']:
        """
        Specifies the rule configuration of the event stream.
        The rule_config structure is documented below.
        """
        return pulumi.get(self, "rule_config")

    @rule_config.setter
    def rule_config(self, value: pulumi.Input['EventStreamRuleConfigArgs']):
        pulumi.set(self, "rule_config", value)

    @_builtins.property
    @pulumi.getter
    def sink(self) -> pulumi.Input['EventStreamSinkArgs']:
        """
        Specifies the target configuration of the event stream.
        The sink structure is documented below.
        """
        return pulumi.get(self, "sink")

    @sink.setter
    def sink(self, value: pulumi.Input['EventStreamSinkArgs']):
        pulumi.set(self, "sink", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Input['EventStreamSourceArgs']:
        """
        Specifies the source configuration of the event stream.
        The source structure is documented below.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['EventStreamSourceArgs']):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the desired running status of the event stream.
        + **START**
        + **PAUSE**

        Defaults to **PAUSE**.

        > The security group used by Kafka or RocketMQ must open the port required by its service documentation display in
        the ingress direction so that the EG service can create resources for it. If not, event stream will fail to start.

        <a name="stream_source"></a>
        The `source` block supports:
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the event stream.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the event target type.  
        The valid values are as follows:
        + **HC.FunctionGraph**
        + **HC.Kafka**
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the event stream is located.  
        If omitted, the provider-level region will be used.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _EventStreamState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 option: Optional[pulumi.Input['EventStreamOptionArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_config: Optional[pulumi.Input['EventStreamRuleConfigArgs']] = None,
                 sink: Optional[pulumi.Input['EventStreamSinkArgs']] = None,
                 source: Optional[pulumi.Input['EventStreamSourceArgs']] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EventStream resources.
        :param pulumi.Input[_builtins.str] action: Specifies the desired running status of the event stream.
               + **START**
               + **PAUSE**
               
               Defaults to **PAUSE**.
               
               > The security group used by Kafka or RocketMQ must open the port required by its service documentation display in
               the ingress direction so that the EG service can create resources for it. If not, event stream will fail to start.
               
               <a name="stream_source"></a>
               The `source` block supports:
        :param pulumi.Input[_builtins.str] created_at: The (UTC) creation time of the event stream, in RFC3339 format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the event stream.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the event target type.  
               The valid values are as follows:
               + **HC.FunctionGraph**
               + **HC.Kafka**
        :param pulumi.Input['EventStreamOptionArgs'] option: Specifies the runtime configuration of the event stream.
               The targets structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the event stream is located.  
               If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        :param pulumi.Input['EventStreamRuleConfigArgs'] rule_config: Specifies the rule configuration of the event stream.
               The rule_config structure is documented below.
        :param pulumi.Input['EventStreamSinkArgs'] sink: Specifies the target configuration of the event stream.
               The sink structure is documented below.
        :param pulumi.Input['EventStreamSourceArgs'] source: Specifies the source configuration of the event stream.
               The source structure is documented below.
        :param pulumi.Input[_builtins.str] status: The status of the event stream.
        :param pulumi.Input[_builtins.str] updated_at: The (UTC) update time of the event stream, in RFC3339 format.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if option is not None:
            pulumi.set(__self__, "option", option)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rule_config is not None:
            pulumi.set(__self__, "rule_config", rule_config)
        if sink is not None:
            pulumi.set(__self__, "sink", sink)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the desired running status of the event stream.
        + **START**
        + **PAUSE**

        Defaults to **PAUSE**.

        > The security group used by Kafka or RocketMQ must open the port required by its service documentation display in
        the ingress direction so that the EG service can create resources for it. If not, event stream will fail to start.

        <a name="stream_source"></a>
        The `source` block supports:
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The (UTC) creation time of the event stream, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the event stream.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the event target type.  
        The valid values are as follows:
        + **HC.FunctionGraph**
        + **HC.Kafka**
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def option(self) -> Optional[pulumi.Input['EventStreamOptionArgs']]:
        """
        Specifies the runtime configuration of the event stream.
        The targets structure is documented below.
        """
        return pulumi.get(self, "option")

    @option.setter
    def option(self, value: Optional[pulumi.Input['EventStreamOptionArgs']]):
        pulumi.set(self, "option", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the event stream is located.  
        If omitted, the provider-level region will be used.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="ruleConfig")
    def rule_config(self) -> Optional[pulumi.Input['EventStreamRuleConfigArgs']]:
        """
        Specifies the rule configuration of the event stream.
        The rule_config structure is documented below.
        """
        return pulumi.get(self, "rule_config")

    @rule_config.setter
    def rule_config(self, value: Optional[pulumi.Input['EventStreamRuleConfigArgs']]):
        pulumi.set(self, "rule_config", value)

    @_builtins.property
    @pulumi.getter
    def sink(self) -> Optional[pulumi.Input['EventStreamSinkArgs']]:
        """
        Specifies the target configuration of the event stream.
        The sink structure is documented below.
        """
        return pulumi.get(self, "sink")

    @sink.setter
    def sink(self, value: Optional[pulumi.Input['EventStreamSinkArgs']]):
        pulumi.set(self, "sink", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['EventStreamSourceArgs']]:
        """
        Specifies the source configuration of the event stream.
        The source structure is documented below.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['EventStreamSourceArgs']]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the event stream.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The (UTC) update time of the event stream, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:eg/eventStream:EventStream")
class EventStream(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 option: Optional[pulumi.Input[Union['EventStreamOptionArgs', 'EventStreamOptionArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_config: Optional[pulumi.Input[Union['EventStreamRuleConfigArgs', 'EventStreamRuleConfigArgsDict']]] = None,
                 sink: Optional[pulumi.Input[Union['EventStreamSinkArgs', 'EventStreamSinkArgsDict']]] = None,
                 source: Optional[pulumi.Input[Union['EventStreamSourceArgs', 'EventStreamSourceArgsDict']]] = None,
                 __props__=None):
        """
        Using this resource to manage an EG event stream within Huaweicloud.

        ## Example Usage

        ### Create an event stream with event source type Kafka

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        stream_name = config.require_object("streamName")
        kafka_connect_address = config.require_object("kafkaConnectAddress")
        kafka_consumer_group_id = config.require_object("kafkaConsumerGroupId")
        kafka_instance_name = config.require_object("kafkaInstanceName")
        kafka_instance_id = config.require_object("kafkaInstanceId")
        kafka_topic_name = config.require_object("kafkaTopicName")
        eg_connection_id = config.require_object("egConnectionId")
        test = huaweicloud.eg.EventStream("test",
            name=stream_name,
            action="START",
            source={
                "name": "HC.Kafka",
                "kafka": json.dumps({
                    "addr": kafka_connect_address,
                    "group": kafka_consumer_group_id,
                    "instance_name": kafka_instance_name,
                    "instance_id": kafka_instance_id,
                    "topic": kafka_topic_name,
                    "seek_to": "latest",
                    "security_protocol": "PLAINTEXT",
                }),
            },
            sink={
                "name": "HC.Kafka",
                "kafka": json.dumps({
                    "connection_id": eg_connection_id,
                    "topic": kafka_topic_name,
                    "key_transform": {
                        "type": "ORIGINAL",
                    },
                }),
            },
            rule_config={
                "transform": {
                    "type": "ORIGINAL",
                },
            },
            option={
                "thread_num": 2,
                "batch_window": {
                    "count": 5,
                    "time": 3,
                    "interval": 2,
                },
            })
        ```

        ### Create an event stream with event source type RocketMQ

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        stream_name = config.require_object("streamName")
        rocketmq_instance_id = config.require_object("rocketmqInstanceId")
        rocketmq_consumer_group_name = config.require_object("rocketmqConsumerGroupName")
        rocketmq_topic_name = config.require_object("rocketmqTopicName")
        function_urn = config.require_object("functionUrn")
        agency_name = config.require_object("agencyName")
        test = huaweicloud.eg.EventStream("test",
            name=stream_name,
            action="START",
            source={
                "name": "HC.DMS_ROCKETMQ",
                "dms_rocketmq": json.dumps({
                    "instance_id": rocketmq_instance_id,
                    "group": rocketmq_consumer_group_name,
                    "topic": rocketmq_topic_name,
                    "tag": "lance",
                    "access_key": "custom_user_name",
                    "secret_key": "User!Password",
                    "ssl_enable": False,
                    "enable_acl": True,
                    "message_type": "NORMAL",
                    "consume_timeout": 30000,
                    "consumer_thread_nums": 20,
                    "consumer_batch_max_size": 2,
                }),
            },
            sink={
                "name": "HC.FunctionGraph",
                "functiongraph": json.dumps({
                    "urn": function_urn,
                    "agency": agency_name,
                    "invoke_type": "ASYNC",
                }),
            },
            rule_config={
                "transform": {
                    "type": "ORIGINAL",
                },
            },
            option={
                "thread_num": 2,
                "batch_window": {
                    "count": 5,
                    "time": 3,
                    "interval": 2,
                },
            })
        ```

        ## Import

        Streams can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:eg/eventStream:EventStream test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `source`, `sink`.

        It is generally recommended running `pulumi preview` after importing a stream.

        You can then decide if changes should be applied to the stream, or the resource definition should be updated to

        align with the stream. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_eg_event_stream" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              source, sink,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the desired running status of the event stream.
               + **START**
               + **PAUSE**
               
               Defaults to **PAUSE**.
               
               > The security group used by Kafka or RocketMQ must open the port required by its service documentation display in
               the ingress direction so that the EG service can create resources for it. If not, event stream will fail to start.
               
               <a name="stream_source"></a>
               The `source` block supports:
        :param pulumi.Input[_builtins.str] description: Specifies the description of the event stream.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the event target type.  
               The valid values are as follows:
               + **HC.FunctionGraph**
               + **HC.Kafka**
        :param pulumi.Input[Union['EventStreamOptionArgs', 'EventStreamOptionArgsDict']] option: Specifies the runtime configuration of the event stream.
               The targets structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the event stream is located.  
               If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        :param pulumi.Input[Union['EventStreamRuleConfigArgs', 'EventStreamRuleConfigArgsDict']] rule_config: Specifies the rule configuration of the event stream.
               The rule_config structure is documented below.
        :param pulumi.Input[Union['EventStreamSinkArgs', 'EventStreamSinkArgsDict']] sink: Specifies the target configuration of the event stream.
               The sink structure is documented below.
        :param pulumi.Input[Union['EventStreamSourceArgs', 'EventStreamSourceArgsDict']] source: Specifies the source configuration of the event stream.
               The source structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventStreamArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to manage an EG event stream within Huaweicloud.

        ## Example Usage

        ### Create an event stream with event source type Kafka

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        stream_name = config.require_object("streamName")
        kafka_connect_address = config.require_object("kafkaConnectAddress")
        kafka_consumer_group_id = config.require_object("kafkaConsumerGroupId")
        kafka_instance_name = config.require_object("kafkaInstanceName")
        kafka_instance_id = config.require_object("kafkaInstanceId")
        kafka_topic_name = config.require_object("kafkaTopicName")
        eg_connection_id = config.require_object("egConnectionId")
        test = huaweicloud.eg.EventStream("test",
            name=stream_name,
            action="START",
            source={
                "name": "HC.Kafka",
                "kafka": json.dumps({
                    "addr": kafka_connect_address,
                    "group": kafka_consumer_group_id,
                    "instance_name": kafka_instance_name,
                    "instance_id": kafka_instance_id,
                    "topic": kafka_topic_name,
                    "seek_to": "latest",
                    "security_protocol": "PLAINTEXT",
                }),
            },
            sink={
                "name": "HC.Kafka",
                "kafka": json.dumps({
                    "connection_id": eg_connection_id,
                    "topic": kafka_topic_name,
                    "key_transform": {
                        "type": "ORIGINAL",
                    },
                }),
            },
            rule_config={
                "transform": {
                    "type": "ORIGINAL",
                },
            },
            option={
                "thread_num": 2,
                "batch_window": {
                    "count": 5,
                    "time": 3,
                    "interval": 2,
                },
            })
        ```

        ### Create an event stream with event source type RocketMQ

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        stream_name = config.require_object("streamName")
        rocketmq_instance_id = config.require_object("rocketmqInstanceId")
        rocketmq_consumer_group_name = config.require_object("rocketmqConsumerGroupName")
        rocketmq_topic_name = config.require_object("rocketmqTopicName")
        function_urn = config.require_object("functionUrn")
        agency_name = config.require_object("agencyName")
        test = huaweicloud.eg.EventStream("test",
            name=stream_name,
            action="START",
            source={
                "name": "HC.DMS_ROCKETMQ",
                "dms_rocketmq": json.dumps({
                    "instance_id": rocketmq_instance_id,
                    "group": rocketmq_consumer_group_name,
                    "topic": rocketmq_topic_name,
                    "tag": "lance",
                    "access_key": "custom_user_name",
                    "secret_key": "User!Password",
                    "ssl_enable": False,
                    "enable_acl": True,
                    "message_type": "NORMAL",
                    "consume_timeout": 30000,
                    "consumer_thread_nums": 20,
                    "consumer_batch_max_size": 2,
                }),
            },
            sink={
                "name": "HC.FunctionGraph",
                "functiongraph": json.dumps({
                    "urn": function_urn,
                    "agency": agency_name,
                    "invoke_type": "ASYNC",
                }),
            },
            rule_config={
                "transform": {
                    "type": "ORIGINAL",
                },
            },
            option={
                "thread_num": 2,
                "batch_window": {
                    "count": 5,
                    "time": 3,
                    "interval": 2,
                },
            })
        ```

        ## Import

        Streams can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:eg/eventStream:EventStream test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `source`, `sink`.

        It is generally recommended running `pulumi preview` after importing a stream.

        You can then decide if changes should be applied to the stream, or the resource definition should be updated to

        align with the stream. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_eg_event_stream" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              source, sink,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param EventStreamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventStreamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 option: Optional[pulumi.Input[Union['EventStreamOptionArgs', 'EventStreamOptionArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_config: Optional[pulumi.Input[Union['EventStreamRuleConfigArgs', 'EventStreamRuleConfigArgsDict']]] = None,
                 sink: Optional[pulumi.Input[Union['EventStreamSinkArgs', 'EventStreamSinkArgsDict']]] = None,
                 source: Optional[pulumi.Input[Union['EventStreamSourceArgs', 'EventStreamSourceArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventStreamArgs.__new__(EventStreamArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if option is None and not opts.urn:
                raise TypeError("Missing required property 'option'")
            __props__.__dict__["option"] = option
            __props__.__dict__["region"] = region
            if rule_config is None and not opts.urn:
                raise TypeError("Missing required property 'rule_config'")
            __props__.__dict__["rule_config"] = rule_config
            if sink is None and not opts.urn:
                raise TypeError("Missing required property 'sink'")
            __props__.__dict__["sink"] = sink
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(EventStream, __self__).__init__(
            'huaweicloud:eg/eventStream:EventStream',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            option: Optional[pulumi.Input[Union['EventStreamOptionArgs', 'EventStreamOptionArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            rule_config: Optional[pulumi.Input[Union['EventStreamRuleConfigArgs', 'EventStreamRuleConfigArgsDict']]] = None,
            sink: Optional[pulumi.Input[Union['EventStreamSinkArgs', 'EventStreamSinkArgsDict']]] = None,
            source: Optional[pulumi.Input[Union['EventStreamSourceArgs', 'EventStreamSourceArgsDict']]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'EventStream':
        """
        Get an existing EventStream resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the desired running status of the event stream.
               + **START**
               + **PAUSE**
               
               Defaults to **PAUSE**.
               
               > The security group used by Kafka or RocketMQ must open the port required by its service documentation display in
               the ingress direction so that the EG service can create resources for it. If not, event stream will fail to start.
               
               <a name="stream_source"></a>
               The `source` block supports:
        :param pulumi.Input[_builtins.str] created_at: The (UTC) creation time of the event stream, in RFC3339 format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the event stream.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the event target type.  
               The valid values are as follows:
               + **HC.FunctionGraph**
               + **HC.Kafka**
        :param pulumi.Input[Union['EventStreamOptionArgs', 'EventStreamOptionArgsDict']] option: Specifies the runtime configuration of the event stream.
               The targets structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the event stream is located.  
               If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        :param pulumi.Input[Union['EventStreamRuleConfigArgs', 'EventStreamRuleConfigArgsDict']] rule_config: Specifies the rule configuration of the event stream.
               The rule_config structure is documented below.
        :param pulumi.Input[Union['EventStreamSinkArgs', 'EventStreamSinkArgsDict']] sink: Specifies the target configuration of the event stream.
               The sink structure is documented below.
        :param pulumi.Input[Union['EventStreamSourceArgs', 'EventStreamSourceArgsDict']] source: Specifies the source configuration of the event stream.
               The source structure is documented below.
        :param pulumi.Input[_builtins.str] status: The status of the event stream.
        :param pulumi.Input[_builtins.str] updated_at: The (UTC) update time of the event stream, in RFC3339 format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventStreamState.__new__(_EventStreamState)

        __props__.__dict__["action"] = action
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["option"] = option
        __props__.__dict__["region"] = region
        __props__.__dict__["rule_config"] = rule_config
        __props__.__dict__["sink"] = sink
        __props__.__dict__["source"] = source
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        return EventStream(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the desired running status of the event stream.
        + **START**
        + **PAUSE**

        Defaults to **PAUSE**.

        > The security group used by Kafka or RocketMQ must open the port required by its service documentation display in
        the ingress direction so that the EG service can create resources for it. If not, event stream will fail to start.

        <a name="stream_source"></a>
        The `source` block supports:
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The (UTC) creation time of the event stream, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the event stream.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the event target type.  
        The valid values are as follows:
        + **HC.FunctionGraph**
        + **HC.Kafka**
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def option(self) -> pulumi.Output['outputs.EventStreamOption']:
        """
        Specifies the runtime configuration of the event stream.
        The targets structure is documented below.
        """
        return pulumi.get(self, "option")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the event stream is located.  
        If omitted, the provider-level region will be used.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleConfig")
    def rule_config(self) -> pulumi.Output['outputs.EventStreamRuleConfig']:
        """
        Specifies the rule configuration of the event stream.
        The rule_config structure is documented below.
        """
        return pulumi.get(self, "rule_config")

    @_builtins.property
    @pulumi.getter
    def sink(self) -> pulumi.Output['outputs.EventStreamSink']:
        """
        Specifies the target configuration of the event stream.
        The sink structure is documented below.
        """
        return pulumi.get(self, "sink")

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Output['outputs.EventStreamSource']:
        """
        Specifies the source configuration of the event stream.
        The source structure is documented below.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the event stream.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The (UTC) update time of the event stream, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

