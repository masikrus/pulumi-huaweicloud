# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetConnectionsResult',
    'AwaitableGetConnectionsResult',
    'get_connections',
    'get_connections_output',
]

@pulumi.output_type
class GetConnectionsResult:
    """
    A collection of values returned by getConnections.
    """
    def __init__(__self__, connections=None, fuzzy_name=None, id=None, name=None, region=None, sort=None):
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        pulumi.set(__self__, "connections", connections)
        if fuzzy_name and not isinstance(fuzzy_name, str):
            raise TypeError("Expected argument 'fuzzy_name' to be a str")
        pulumi.set(__self__, "fuzzy_name", fuzzy_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)

    @_builtins.property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetConnectionsConnectionResult']:
        """
        All connections that match the filter parameters.  
        The connections structure is documented below.
        """
        return pulumi.get(self, "connections")

    @_builtins.property
    @pulumi.getter(name="fuzzyName")
    def fuzzy_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "fuzzy_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the flavor.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort")


class AwaitableGetConnectionsResult(GetConnectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionsResult(
            connections=self.connections,
            fuzzy_name=self.fuzzy_name,
            id=self.id,
            name=self.name,
            region=self.region,
            sort=self.sort)


def get_connections(fuzzy_name: Optional[_builtins.str] = None,
                    name: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    sort: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionsResult:
    """
    Use this data source to get the list of EG connections within HuaweiCloud.

    ## Example Usage

    ### Query all connections

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.eg.get_connections()
    ```

    ### Query connections by connection name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    connection_name = config.require_object("connectionName")
    test = huaweicloud.eg.get_connections(name=connection_name)
    ```


    :param _builtins.str fuzzy_name: Specifies the name of the connection to be queried for fuzzy matching.
    :param _builtins.str name: Specifies the exact name of the connection to be queried.
    :param _builtins.str region: Specifies the region where the connections are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str sort: Specifies the sorting method for query results.  
           The format is `field:order`, where `field` is the field name and `order` is `ASC` or `DESC`. e.g. `name:ASC`.
    """
    __args__ = dict()
    __args__['fuzzyName'] = fuzzy_name
    __args__['name'] = name
    __args__['region'] = region
    __args__['sort'] = sort
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:eg/getConnections:getConnections', __args__, opts=opts, typ=GetConnectionsResult).value

    return AwaitableGetConnectionsResult(
        connections=pulumi.get(__ret__, 'connections'),
        fuzzy_name=pulumi.get(__ret__, 'fuzzy_name'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        sort=pulumi.get(__ret__, 'sort'))
def get_connections_output(fuzzy_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           sort: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConnectionsResult]:
    """
    Use this data source to get the list of EG connections within HuaweiCloud.

    ## Example Usage

    ### Query all connections

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.eg.get_connections()
    ```

    ### Query connections by connection name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    connection_name = config.require_object("connectionName")
    test = huaweicloud.eg.get_connections(name=connection_name)
    ```


    :param _builtins.str fuzzy_name: Specifies the name of the connection to be queried for fuzzy matching.
    :param _builtins.str name: Specifies the exact name of the connection to be queried.
    :param _builtins.str region: Specifies the region where the connections are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str sort: Specifies the sorting method for query results.  
           The format is `field:order`, where `field` is the field name and `order` is `ASC` or `DESC`. e.g. `name:ASC`.
    """
    __args__ = dict()
    __args__['fuzzyName'] = fuzzy_name
    __args__['name'] = name
    __args__['region'] = region
    __args__['sort'] = sort
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:eg/getConnections:getConnections', __args__, opts=opts, typ=GetConnectionsResult)
    return __ret__.apply(lambda __response__: GetConnectionsResult(
        connections=pulumi.get(__response__, 'connections'),
        fuzzy_name=pulumi.get(__response__, 'fuzzy_name'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        sort=pulumi.get(__response__, 'sort')))
