# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CustomEventSourceArgs', 'CustomEventSource']

@pulumi.input_type
class CustomEventSourceArgs:
    def __init__(__self__, *,
                 channel_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 detail: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CustomEventSource resource.
        :param pulumi.Input[_builtins.str] channel_id: Specifies the ID of the custom event channel to which the custom event
               source belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the custom event source.
        :param pulumi.Input[_builtins.str] detail: Specifies the configuration detail of the event source, in JSON format.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the custom event source.  
               The valid length is limited from `1` to `128`, only lowercase letters, digits, hyphens (-), underscores (_) are
               allowed. The name must start with a lowercase letter or digit.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the custom event channel and custom event source
               are located. If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the custom event source.
               The valid values are as follows:
               + **APPLICATION**
               + **RABBITMQ**
               + **ROCKETMQ**
               
               Defaults to **APPLICATION**.
               Changing this will create a new resource.
               
               > Before creating a **RocketMQ** event source, you need to open ingress rule for TCP `8,100` and `10,100`-`10,103`
               ports for the security group.
        """
        pulumi.set(__self__, "channel_id", channel_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the custom event channel to which the custom event
        source belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "channel_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the custom event source.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def detail(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration detail of the event source, in JSON format.
        """
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "detail", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the custom event source.  
        The valid length is limited from `1` to `128`, only lowercase letters, digits, hyphens (-), underscores (_) are
        allowed. The name must start with a lowercase letter or digit.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the custom event channel and custom event source
        are located. If omitted, the provider-level region will be used.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the custom event source.
        The valid values are as follows:
        + **APPLICATION**
        + **RABBITMQ**
        + **ROCKETMQ**

        Defaults to **APPLICATION**.
        Changing this will create a new resource.

        > Before creating a **RocketMQ** event source, you need to open ingress rule for TCP `8,100` and `10,100`-`10,103`
        ports for the security group.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _CustomEventSourceState:
    def __init__(__self__, *,
                 channel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 detail: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CustomEventSource resources.
        :param pulumi.Input[_builtins.str] channel_id: Specifies the ID of the custom event channel to which the custom event
               source belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The (UTC) creation time of the custom event source, in RFC3339 format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the custom event source.
        :param pulumi.Input[_builtins.str] detail: Specifies the configuration detail of the event source, in JSON format.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the custom event source.  
               The valid length is limited from `1` to `128`, only lowercase letters, digits, hyphens (-), underscores (_) are
               allowed. The name must start with a lowercase letter or digit.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the custom event channel and custom event source
               are located. If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the custom event source.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the custom event source.
               The valid values are as follows:
               + **APPLICATION**
               + **RABBITMQ**
               + **ROCKETMQ**
               
               Defaults to **APPLICATION**.
               Changing this will create a new resource.
               
               > Before creating a **RocketMQ** event source, you need to open ingress rule for TCP `8,100` and `10,100`-`10,103`
               ports for the security group.
        :param pulumi.Input[_builtins.str] updated_at: The (UTC) update time of the custom event source, in RFC3339 format.
        """
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the custom event channel to which the custom event
        source belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "channel_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The (UTC) creation time of the custom event source, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the custom event source.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def detail(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration detail of the event source, in JSON format.
        """
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "detail", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the custom event source.  
        The valid length is limited from `1` to `128`, only lowercase letters, digits, hyphens (-), underscores (_) are
        allowed. The name must start with a lowercase letter or digit.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the custom event channel and custom event source
        are located. If omitted, the provider-level region will be used.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the custom event source.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the custom event source.
        The valid values are as follows:
        + **APPLICATION**
        + **RABBITMQ**
        + **ROCKETMQ**

        Defaults to **APPLICATION**.
        Changing this will create a new resource.

        > Before creating a **RocketMQ** event source, you need to open ingress rule for TCP `8,100` and `10,100`-`10,103`
        ports for the security group.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The (UTC) update time of the custom event source, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:eg/customEventSource:CustomEventSource")
class CustomEventSource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 detail: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to manage an EG custom event source within Huaweicloud.

        ## Example Usage

        ### Create a custom event source for the application type

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        channel_id = config.require_object("channelId")
        source_name = config.require_object("sourceName")
        test = huaweicloud.eg.CustomEventSource("test",
            channel_id=channel_id,
            type="APPLICATION",
            name=source_name,
            description="Created by script")
        ```

        ### Create a custom event source for the RabbitMQ type

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        channel_id = config.require_object("channelId")
        source_name = config.require_object("sourceName")
        rabbitmq_instance_id = config.require_object("rabbitmqInstanceId")
        rabbitmq_user_name = config.require_object("rabbitmqUserName")
        rabbitmq_user_password = config.require_object("rabbitmqUserPassword")
        rabbitmq_vhost_name = config.require_object("rabbitmqVhostName")
        rabbitmq_queue_name = config.require_object("rabbitmqQueueName")
        test = huaweicloud.eg.CustomEventSource("test",
            channel_id=channel_id,
            type="RABBITMQ",
            name=source_name,
            detail=json.dumps({
                "instance_id": rabbitmq_instance_id,
                "user_name": rabbitmq_user_name,
                "password": rabbitmq_user_password,
                "vhost_name": rabbitmq_vhost_name,
                "queue_name": rabbitmq_queue_name,
            }))
        ```

        ### Create a custom event source for the RocketMQ type

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        channel_id = config.require_object("channelId")
        source_name = config.require_object("sourceName")
        rocketmq_instance_id = config.require_object("rocketmqInstanceId")
        rocketmq_instance_name = config.require_object("rocketmqInstanceName")
        rocketmq_instance_namesrv_address = config.require_object("rocketmqInstanceNamesrvAddress")
        rocketmq_consumer_group_id = config.require_object("rocketmqConsumerGroupId")
        rocketmq_topic_id = config.require_object("rocketmqTopicId")
        test = huaweicloud.eg.CustomEventSource("test",
            channel_id=channel_id,
            type="ROCKETMQ",
            name=source_name,
            detail=json.dumps({
                "instance_id": rocketmq_instance_id,
                "name": rocketmq_instance_name,
                "namesrv_address": rocketmq_instance_namesrv_address,
                "group": rocketmq_consumer_group_id,
                "topic": rocketmq_topic_id,
                "enable_acl": False,
                "ssl_enable": False,
            }))
        ```

        ## Import

        Custom event sources can be imported by their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:eg/customEventSource:CustomEventSource test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] channel_id: Specifies the ID of the custom event channel to which the custom event
               source belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the custom event source.
        :param pulumi.Input[_builtins.str] detail: Specifies the configuration detail of the event source, in JSON format.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the custom event source.  
               The valid length is limited from `1` to `128`, only lowercase letters, digits, hyphens (-), underscores (_) are
               allowed. The name must start with a lowercase letter or digit.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the custom event channel and custom event source
               are located. If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the custom event source.
               The valid values are as follows:
               + **APPLICATION**
               + **RABBITMQ**
               + **ROCKETMQ**
               
               Defaults to **APPLICATION**.
               Changing this will create a new resource.
               
               > Before creating a **RocketMQ** event source, you need to open ingress rule for TCP `8,100` and `10,100`-`10,103`
               ports for the security group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomEventSourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to manage an EG custom event source within Huaweicloud.

        ## Example Usage

        ### Create a custom event source for the application type

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        channel_id = config.require_object("channelId")
        source_name = config.require_object("sourceName")
        test = huaweicloud.eg.CustomEventSource("test",
            channel_id=channel_id,
            type="APPLICATION",
            name=source_name,
            description="Created by script")
        ```

        ### Create a custom event source for the RabbitMQ type

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        channel_id = config.require_object("channelId")
        source_name = config.require_object("sourceName")
        rabbitmq_instance_id = config.require_object("rabbitmqInstanceId")
        rabbitmq_user_name = config.require_object("rabbitmqUserName")
        rabbitmq_user_password = config.require_object("rabbitmqUserPassword")
        rabbitmq_vhost_name = config.require_object("rabbitmqVhostName")
        rabbitmq_queue_name = config.require_object("rabbitmqQueueName")
        test = huaweicloud.eg.CustomEventSource("test",
            channel_id=channel_id,
            type="RABBITMQ",
            name=source_name,
            detail=json.dumps({
                "instance_id": rabbitmq_instance_id,
                "user_name": rabbitmq_user_name,
                "password": rabbitmq_user_password,
                "vhost_name": rabbitmq_vhost_name,
                "queue_name": rabbitmq_queue_name,
            }))
        ```

        ### Create a custom event source for the RocketMQ type

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        channel_id = config.require_object("channelId")
        source_name = config.require_object("sourceName")
        rocketmq_instance_id = config.require_object("rocketmqInstanceId")
        rocketmq_instance_name = config.require_object("rocketmqInstanceName")
        rocketmq_instance_namesrv_address = config.require_object("rocketmqInstanceNamesrvAddress")
        rocketmq_consumer_group_id = config.require_object("rocketmqConsumerGroupId")
        rocketmq_topic_id = config.require_object("rocketmqTopicId")
        test = huaweicloud.eg.CustomEventSource("test",
            channel_id=channel_id,
            type="ROCKETMQ",
            name=source_name,
            detail=json.dumps({
                "instance_id": rocketmq_instance_id,
                "name": rocketmq_instance_name,
                "namesrv_address": rocketmq_instance_namesrv_address,
                "group": rocketmq_consumer_group_id,
                "topic": rocketmq_topic_id,
                "enable_acl": False,
                "ssl_enable": False,
            }))
        ```

        ## Import

        Custom event sources can be imported by their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:eg/customEventSource:CustomEventSource test <id>
        ```

        :param str resource_name: The name of the resource.
        :param CustomEventSourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomEventSourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 detail: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomEventSourceArgs.__new__(CustomEventSourceArgs)

            if channel_id is None and not opts.urn:
                raise TypeError("Missing required property 'channel_id'")
            __props__.__dict__["channel_id"] = channel_id
            __props__.__dict__["description"] = description
            __props__.__dict__["detail"] = detail
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(CustomEventSource, __self__).__init__(
            'huaweicloud:eg/customEventSource:CustomEventSource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            channel_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            detail: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'CustomEventSource':
        """
        Get an existing CustomEventSource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] channel_id: Specifies the ID of the custom event channel to which the custom event
               source belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The (UTC) creation time of the custom event source, in RFC3339 format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the custom event source.
        :param pulumi.Input[_builtins.str] detail: Specifies the configuration detail of the event source, in JSON format.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the custom event source.  
               The valid length is limited from `1` to `128`, only lowercase letters, digits, hyphens (-), underscores (_) are
               allowed. The name must start with a lowercase letter or digit.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the custom event channel and custom event source
               are located. If omitted, the provider-level region will be used.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the custom event source.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the custom event source.
               The valid values are as follows:
               + **APPLICATION**
               + **RABBITMQ**
               + **ROCKETMQ**
               
               Defaults to **APPLICATION**.
               Changing this will create a new resource.
               
               > Before creating a **RocketMQ** event source, you need to open ingress rule for TCP `8,100` and `10,100`-`10,103`
               ports for the security group.
        :param pulumi.Input[_builtins.str] updated_at: The (UTC) update time of the custom event source, in RFC3339 format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomEventSourceState.__new__(_CustomEventSourceState)

        __props__.__dict__["channel_id"] = channel_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["detail"] = detail
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        return CustomEventSource(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the custom event channel to which the custom event
        source belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "channel_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The (UTC) creation time of the custom event source, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the custom event source.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def detail(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the configuration detail of the event source, in JSON format.
        """
        return pulumi.get(self, "detail")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the custom event source.  
        The valid length is limited from `1` to `128`, only lowercase letters, digits, hyphens (-), underscores (_) are
        allowed. The name must start with a lowercase letter or digit.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the custom event channel and custom event source
        are located. If omitted, the provider-level region will be used.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the custom event source.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the custom event source.
        The valid values are as follows:
        + **APPLICATION**
        + **RABBITMQ**
        + **ROCKETMQ**

        Defaults to **APPLICATION**.
        Changing this will create a new resource.

        > Before creating a **RocketMQ** event source, you need to open ingress rule for TCP `8,100` and `10,100`-`10,103`
        ports for the security group.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The (UTC) update time of the custom event source, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

