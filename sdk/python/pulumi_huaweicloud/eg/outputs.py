# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ConnectionKafkaDetail',
    'EventBatchActionEvent',
    'EventStreamOption',
    'EventStreamOptionBatchWindow',
    'EventStreamRuleConfig',
    'EventStreamRuleConfigTransform',
    'EventStreamSink',
    'EventStreamSource',
    'EventSubscriptionSource',
    'EventSubscriptionTarget',
    'GetConnectionsConnectionResult',
    'GetConnectionsConnectionErrorInfoResult',
    'GetConnectionsConnectionFlavorResult',
    'GetConnectionsConnectionKafkaDetailResult',
    'GetCustomEventChannelsChannelResult',
    'GetCustomEventSourcesSourceResult',
    'GetEventChannelsChannelResult',
    'GetEventSourcesSourceResult',
    'GetEventSourcesSourceEventTypeResult',
    'GetEventStreamsEventStreamResult',
    'GetEventStreamsEventStreamOptionResult',
    'GetEventStreamsEventStreamOptionBatchWindowResult',
    'GetEventStreamsEventStreamRuleConfigResult',
    'GetEventStreamsEventStreamRuleConfigTransformResult',
    'GetEventStreamsEventStreamSinkResult',
    'GetEventStreamsEventStreamSourceResult',
    'GetEventTargetCatalogsCatalogResult',
    'GetEventTargetCatalogsCatalogParameterResult',
    'GetQuotasQuotaResult',
]

@pulumi.output_type
class ConnectionKafkaDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectAddress":
            suggest = "connect_address"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionKafkaDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionKafkaDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionKafkaDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_address: _builtins.str,
                 instance_id: _builtins.str,
                 acks: Optional[_builtins.str] = None,
                 password: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str connect_address: Specifies the IP address of the kafka instance.
               
               Changing this parameter will create a new resource.
        :param _builtins.str instance_id: Specifies the ID of the kafka instance.
               
               Changing this parameter will create a new resource.
        :param _builtins.str acks: Specifies the number of confirmation signals the prouder needs to receive
               to consider the message sent successfully. The acks represents the availability of data backup.
               The value can be:
               + **0**: Indicates that the producer does not need to wait for any confirmation of received information,
               the backup will be immediately added to the socket buffer and considered to have been sent.
               There is no guarantee that the server has successfully received the data in this case,
               and the retry configuration will not take effect and the feedback offset will always be set to -1.
               
               + **1**: Indicates that at least waiting for the leader to successfully write the data to the local log,
               but not waiting for all followers to successfully write the data. If the follower fails to successfully
               backup the data and the leader cannot provide services at this time, the message will be lost.
               
               + **all**: Indicates that the leader needs to wait for all backups in the ISR to be successfully written to the log.
               As long as any backup survives, the data will not be lost.
               
               Defaults to **1**.
               
               Changing this parameter will create a new resource.
        :param _builtins.str password: Specifies the password of the kafka instance.
               
               Changing this parameter will create a new resource.
        :param _builtins.str user_name: Specifies the user name of the kafka instance.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "connect_address", connect_address)
        pulumi.set(__self__, "instance_id", instance_id)
        if acks is not None:
            pulumi.set(__self__, "acks", acks)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="connectAddress")
    def connect_address(self) -> _builtins.str:
        """
        Specifies the IP address of the kafka instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "connect_address")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the ID of the kafka instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def acks(self) -> Optional[_builtins.str]:
        """
        Specifies the number of confirmation signals the prouder needs to receive
        to consider the message sent successfully. The acks represents the availability of data backup.
        The value can be:
        + **0**: Indicates that the producer does not need to wait for any confirmation of received information,
        the backup will be immediately added to the socket buffer and considered to have been sent.
        There is no guarantee that the server has successfully received the data in this case,
        and the retry configuration will not take effect and the feedback offset will always be set to -1.

        + **1**: Indicates that at least waiting for the leader to successfully write the data to the local log,
        but not waiting for all followers to successfully write the data. If the follower fails to successfully
        backup the data and the leader cannot provide services at this time, the message will be lost.

        + **all**: Indicates that the leader needs to wait for all backups in the ISR to be successfully written to the log.
        As long as any backup survives, the data will not be lost.

        Defaults to **1**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "acks")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        """
        Specifies the password of the kafka instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Specifies the user name of the kafka instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class EventBatchActionEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "specVersion":
            suggest = "spec_version"
        elif key == "dataContentType":
            suggest = "data_content_type"
        elif key == "dataSchema":
            suggest = "data_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventBatchActionEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventBatchActionEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventBatchActionEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.str,
                 source: _builtins.str,
                 spec_version: _builtins.str,
                 type: _builtins.str,
                 data: Optional[_builtins.str] = None,
                 data_content_type: Optional[_builtins.str] = None,
                 data_schema: Optional[_builtins.str] = None,
                 subject: Optional[_builtins.str] = None,
                 time: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Specifies the ID of the event.
        :param _builtins.str source: Specifies the name of the event source.  
               For the detail, please following [reference documentation](https://tools.ietf.org/html/rfc3986#section-4.1)
        :param _builtins.str spec_version: Specifies the CloudEvents protocol version.  
               The spec version must follow the pattern `major.minor`
        :param _builtins.str type: Specifies the type of the event.
        :param _builtins.str data: Specifies the payload content of the event, in JSON format.  
               The content of data must follow the data schema description.
        :param _builtins.str data_content_type: Specifies the content type of the event data.  
               For the detail, please following [reference documentation](https://tools.ietf.org/html/rfc2046)
        :param _builtins.str data_schema: Specifies the URI of the event data schema.  
               For the detail, please following [reference documentation](https://tools.ietf.org/html/rfc3986#section-4.3)
        :param _builtins.str subject: Specifies the subject of the event.
        :param _builtins.str time: Specifies the time when the event occurred, in UTC format.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "spec_version", spec_version)
        pulumi.set(__self__, "type", type)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if data_content_type is not None:
            pulumi.set(__self__, "data_content_type", data_content_type)
        if data_schema is not None:
            pulumi.set(__self__, "data_schema", data_schema)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the event.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        Specifies the name of the event source.  
        For the detail, please following [reference documentation](https://tools.ietf.org/html/rfc3986#section-4.1)
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="specVersion")
    def spec_version(self) -> _builtins.str:
        """
        Specifies the CloudEvents protocol version.  
        The spec version must follow the pattern `major.minor`
        """
        return pulumi.get(self, "spec_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the event.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def data(self) -> Optional[_builtins.str]:
        """
        Specifies the payload content of the event, in JSON format.  
        The content of data must follow the data schema description.
        """
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter(name="dataContentType")
    def data_content_type(self) -> Optional[_builtins.str]:
        """
        Specifies the content type of the event data.  
        For the detail, please following [reference documentation](https://tools.ietf.org/html/rfc2046)
        """
        return pulumi.get(self, "data_content_type")

    @_builtins.property
    @pulumi.getter(name="dataSchema")
    def data_schema(self) -> Optional[_builtins.str]:
        """
        Specifies the URI of the event data schema.  
        For the detail, please following [reference documentation](https://tools.ietf.org/html/rfc3986#section-4.3)
        """
        return pulumi.get(self, "data_schema")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> Optional[_builtins.str]:
        """
        Specifies the subject of the event.
        """
        return pulumi.get(self, "subject")

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[_builtins.str]:
        """
        Specifies the time when the event occurred, in UTC format.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class EventStreamOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchWindow":
            suggest = "batch_window"
        elif key == "threadNum":
            suggest = "thread_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventStreamOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventStreamOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventStreamOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_window: 'outputs.EventStreamOptionBatchWindow',
                 thread_num: _builtins.int):
        """
        :param 'EventStreamOptionBatchWindowArgs' batch_window: Specifies the configuration of the batch push.
               The transform structure is documented below.
               
               <a name="stream_option_batch_window"></a>
               The `batch_window` block supports:
        :param _builtins.int thread_num: Specifies the number of concurrent threads.
        """
        pulumi.set(__self__, "batch_window", batch_window)
        pulumi.set(__self__, "thread_num", thread_num)

    @_builtins.property
    @pulumi.getter(name="batchWindow")
    def batch_window(self) -> 'outputs.EventStreamOptionBatchWindow':
        """
        Specifies the configuration of the batch push.
        The transform structure is documented below.

        <a name="stream_option_batch_window"></a>
        The `batch_window` block supports:
        """
        return pulumi.get(self, "batch_window")

    @_builtins.property
    @pulumi.getter(name="threadNum")
    def thread_num(self) -> _builtins.int:
        """
        Specifies the number of concurrent threads.
        """
        return pulumi.get(self, "thread_num")


@pulumi.output_type
class EventStreamOptionBatchWindow(dict):
    def __init__(__self__, *,
                 count: _builtins.int,
                 interval: Optional[_builtins.int] = None,
                 time: Optional[_builtins.int] = None):
        """
        :param _builtins.int count: Specifies the number of items pushed in batches.  
               The valid value is range from `1` to `10,000`.
        :param _builtins.int interval: Specifies the interval of the batch push.  
               The valid value is range from `1` to `15`.
        :param _builtins.int time: Specifies the number of retries.
        """
        pulumi.set(__self__, "count", count)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        Specifies the number of items pushed in batches.  
        The valid value is range from `1` to `10,000`.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[_builtins.int]:
        """
        Specifies the interval of the batch push.  
        The valid value is range from `1` to `15`.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[_builtins.int]:
        """
        Specifies the number of retries.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class EventStreamRuleConfig(dict):
    def __init__(__self__, *,
                 transform: 'outputs.EventStreamRuleConfigTransform',
                 filter: Optional[_builtins.str] = None):
        """
        :param 'EventStreamRuleConfigTransformArgs' transform: Specifies the configuration detail of the transform rule.  
               The transform structure is documented below.
        :param _builtins.str filter: Specifies the configuration detail of the filter rule, in JSON format.
               
               <a name="stream_rule_config_transform"></a>
               The `transform` block supports:
        """
        pulumi.set(__self__, "transform", transform)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @_builtins.property
    @pulumi.getter
    def transform(self) -> 'outputs.EventStreamRuleConfigTransform':
        """
        Specifies the configuration detail of the transform rule.  
        The transform structure is documented below.
        """
        return pulumi.get(self, "transform")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[_builtins.str]:
        """
        Specifies the configuration detail of the filter rule, in JSON format.

        <a name="stream_rule_config_transform"></a>
        The `transform` block supports:
        """
        return pulumi.get(self, "filter")


@pulumi.output_type
class EventStreamRuleConfigTransform(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 template: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Specifies the type of transform rule.  
               The valid values are as follows:
               + **ORIGINAL**
               + **CONSTANT**
               + **VARIABLE**
        :param _builtins.str template: Specifies the template definition of the rule content.  
               It's only valid for variable type rules and supports references to defined variables.
               The string length does not exceed `2,048` characters.
               
               <a name="stream_option"></a>
               The `option` block supports:
        :param _builtins.str value: Specifies the rule content definition.
               + When the constant type rule is used, the field is a constant content definition
               + when the variable type rule is used, it is a variable definition, and the content must be a JSON object string.
               - A maximum of `100` variables are supported, and nested structure definitions are not supported.
               - Variable names are composed of letters, numbers, dots, underscores, and dashes. They must start with a letter or
               number and cannot start with `HC.`, and the length should not exceed `64` characters.
               - variable value Expressions support constants or JsonPath expressions, and the string length does not exceed
               `1,024` characters.
        """
        pulumi.set(__self__, "type", type)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of transform rule.  
        The valid values are as follows:
        + **ORIGINAL**
        + **CONSTANT**
        + **VARIABLE**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def template(self) -> Optional[_builtins.str]:
        """
        Specifies the template definition of the rule content.  
        It's only valid for variable type rules and supports references to defined variables.
        The string length does not exceed `2,048` characters.

        <a name="stream_option"></a>
        The `option` block supports:
        """
        return pulumi.get(self, "template")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the rule content definition.
        + When the constant type rule is used, the field is a constant content definition
        + when the variable type rule is used, it is a variable definition, and the content must be a JSON object string.
        - A maximum of `100` variables are supported, and nested structure definitions are not supported.
        - Variable names are composed of letters, numbers, dots, underscores, and dashes. They must start with a letter or
        number and cannot start with `HC.`, and the length should not exceed `64` characters.
        - variable value Expressions support constants or JsonPath expressions, and the string length does not exceed
        `1,024` characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventStreamSink(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 functiongraph: Optional[_builtins.str] = None,
                 kafka: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the name of the event target type.  
               The valid values are as follows:
               + **HC.FunctionGraph**
               + **HC.Kafka**
        :param _builtins.str functiongraph: Specifies the event target configuration detail for FunctionGraph type, in JSON
               format.
        :param _builtins.str kafka: Specifies the event target configuration detail for DMS Kafka type, in JSON format.
               
               > Exactly one of `functiongraph` and `kafka` must be provided.
               
               <a name="stream_rule_config"></a>
               The `rule_config` block supports:
        """
        pulumi.set(__self__, "name", name)
        if functiongraph is not None:
            pulumi.set(__self__, "functiongraph", functiongraph)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the event target type.  
        The valid values are as follows:
        + **HC.FunctionGraph**
        + **HC.Kafka**
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def functiongraph(self) -> Optional[_builtins.str]:
        """
        Specifies the event target configuration detail for FunctionGraph type, in JSON
        format.
        """
        return pulumi.get(self, "functiongraph")

    @_builtins.property
    @pulumi.getter
    def kafka(self) -> Optional[_builtins.str]:
        """
        Specifies the event target configuration detail for DMS Kafka type, in JSON format.

        > Exactly one of `functiongraph` and `kafka` must be provided.

        <a name="stream_rule_config"></a>
        The `rule_config` block supports:
        """
        return pulumi.get(self, "kafka")


@pulumi.output_type
class EventStreamSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityRocketmq":
            suggest = "community_rocketmq"
        elif key == "dmsRocketmq":
            suggest = "dms_rocketmq"
        elif key == "mobileRocketmq":
            suggest = "mobile_rocketmq"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventStreamSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventStreamSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventStreamSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 community_rocketmq: Optional[_builtins.str] = None,
                 dms_rocketmq: Optional[_builtins.str] = None,
                 kafka: Optional[_builtins.str] = None,
                 mobile_rocketmq: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the name of the event target type.  
               The valid values are as follows:
               + **HC.FunctionGraph**
               + **HC.Kafka**
        :param _builtins.str community_rocketmq: Specifies the event source configuration detail for community RocketMQ type,
               in JSON format.
        :param _builtins.str dms_rocketmq: Specifies the event source configuration detail for DMS RocketMQ type, in JSON
               format.
               
               > Exactly one of `kafka`, `mobile_rocketmq`, `community_rocketmq` and `dms_rocketmq` must be provided.
               
               <a name="stream_sink"></a>
               The `targets` block supports:
        :param _builtins.str kafka: Specifies the event target configuration detail for DMS Kafka type, in JSON format.
               
               > Exactly one of `functiongraph` and `kafka` must be provided.
               
               <a name="stream_rule_config"></a>
               The `rule_config` block supports:
        :param _builtins.str mobile_rocketmq: Specifies the event source configuration detail for mobile RocketMQ type, in
               JSON format.
        """
        pulumi.set(__self__, "name", name)
        if community_rocketmq is not None:
            pulumi.set(__self__, "community_rocketmq", community_rocketmq)
        if dms_rocketmq is not None:
            pulumi.set(__self__, "dms_rocketmq", dms_rocketmq)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if mobile_rocketmq is not None:
            pulumi.set(__self__, "mobile_rocketmq", mobile_rocketmq)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the event target type.  
        The valid values are as follows:
        + **HC.FunctionGraph**
        + **HC.Kafka**
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="communityRocketmq")
    def community_rocketmq(self) -> Optional[_builtins.str]:
        """
        Specifies the event source configuration detail for community RocketMQ type,
        in JSON format.
        """
        return pulumi.get(self, "community_rocketmq")

    @_builtins.property
    @pulumi.getter(name="dmsRocketmq")
    def dms_rocketmq(self) -> Optional[_builtins.str]:
        """
        Specifies the event source configuration detail for DMS RocketMQ type, in JSON
        format.

        > Exactly one of `kafka`, `mobile_rocketmq`, `community_rocketmq` and `dms_rocketmq` must be provided.

        <a name="stream_sink"></a>
        The `targets` block supports:
        """
        return pulumi.get(self, "dms_rocketmq")

    @_builtins.property
    @pulumi.getter
    def kafka(self) -> Optional[_builtins.str]:
        """
        Specifies the event target configuration detail for DMS Kafka type, in JSON format.

        > Exactly one of `functiongraph` and `kafka` must be provided.

        <a name="stream_rule_config"></a>
        The `rule_config` block supports:
        """
        return pulumi.get(self, "kafka")

    @_builtins.property
    @pulumi.getter(name="mobileRocketmq")
    def mobile_rocketmq(self) -> Optional[_builtins.str]:
        """
        Specifies the event source configuration detail for mobile RocketMQ type, in
        JSON format.
        """
        return pulumi.get(self, "mobile_rocketmq")


@pulumi.output_type
class EventSubscriptionSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterRule":
            suggest = "filter_rule"
        elif key == "providerType":
            suggest = "provider_type"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "detailName":
            suggest = "detail_name"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventSubscriptionSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventSubscriptionSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventSubscriptionSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_rule: _builtins.str,
                 name: _builtins.str,
                 provider_type: _builtins.str,
                 created_at: Optional[_builtins.str] = None,
                 detail: Optional[_builtins.str] = None,
                 detail_name: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str filter_rule: Specifies the filter rule of the event source, in JSON format.
               The valid length is limited from `1` to `2,048`.
               
               > The JSON result (`detail` and `filter_rule`) returned by the EG service may be different from the definition of the
               resource created (especially the official event source). Changes can be handled by `lifecycle.ignore_changes` or
               manual synchronization.
               
               <a name="subscription_targets"></a>
               The `targets` block supports:
        :param _builtins.str name: Specifies the name of the event target.
               The valid length is limited from `1` to `128`.
        :param _builtins.str provider_type: Specifies the provider type of the event target.
               The valid values are as follows:
               + **CUSTOM**
               + **OFFICIAL**
        :param _builtins.str created_at: The (UTC) creation time of the event target, in RFC3339 format.
        :param _builtins.str detail: Specifies the configuration detail of the event target, in JSON format.
               The valid length is limited from `1` to `1,024`.
        :param _builtins.str detail_name: Specifies the name (key) of the target detail configuration.
               The valid values are as follows:
               + **detail**: Custom event targets and FunctionGraph event targets are used.
               + **smn_detail**: SMN event targets are used.
               + **kafka_detail**: DMS kafka event targets are used.
               + **eg_detail**: EG event targets are used.
        :param _builtins.str id: Specifies the custom ID of the event target, in UUID format.
        :param _builtins.str updated_at: The (UTC) update time of the event target, in RFC3339 format.
        """
        pulumi.set(__self__, "filter_rule", filter_rule)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "provider_type", provider_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if detail_name is not None:
            pulumi.set(__self__, "detail_name", detail_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="filterRule")
    def filter_rule(self) -> _builtins.str:
        """
        Specifies the filter rule of the event source, in JSON format.
        The valid length is limited from `1` to `2,048`.

        > The JSON result (`detail` and `filter_rule`) returned by the EG service may be different from the definition of the
        resource created (especially the official event source). Changes can be handled by `lifecycle.ignore_changes` or
        manual synchronization.

        <a name="subscription_targets"></a>
        The `targets` block supports:
        """
        return pulumi.get(self, "filter_rule")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the event target.
        The valid length is limited from `1` to `128`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> _builtins.str:
        """
        Specifies the provider type of the event target.
        The valid values are as follows:
        + **CUSTOM**
        + **OFFICIAL**
        """
        return pulumi.get(self, "provider_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The (UTC) creation time of the event target, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def detail(self) -> Optional[_builtins.str]:
        """
        Specifies the configuration detail of the event target, in JSON format.
        The valid length is limited from `1` to `1,024`.
        """
        return pulumi.get(self, "detail")

    @_builtins.property
    @pulumi.getter(name="detailName")
    def detail_name(self) -> Optional[_builtins.str]:
        """
        Specifies the name (key) of the target detail configuration.
        The valid values are as follows:
        + **detail**: Custom event targets and FunctionGraph event targets are used.
        + **smn_detail**: SMN event targets are used.
        + **kafka_detail**: DMS kafka event targets are used.
        + **eg_detail**: EG event targets are used.
        """
        return pulumi.get(self, "detail_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the custom ID of the event target, in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The (UTC) update time of the event target, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class EventSubscriptionTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detailName":
            suggest = "detail_name"
        elif key == "providerType":
            suggest = "provider_type"
        elif key == "connectionId":
            suggest = "connection_id"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "deadLetterQueue":
            suggest = "dead_letter_queue"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventSubscriptionTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventSubscriptionTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventSubscriptionTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 detail: _builtins.str,
                 detail_name: _builtins.str,
                 name: _builtins.str,
                 provider_type: _builtins.str,
                 transform: _builtins.str,
                 connection_id: Optional[_builtins.str] = None,
                 created_at: Optional[_builtins.str] = None,
                 dead_letter_queue: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str detail: Specifies the configuration detail of the event target, in JSON format.
               The valid length is limited from `1` to `1,024`.
        :param _builtins.str detail_name: Specifies the name (key) of the target detail configuration.
               The valid values are as follows:
               + **detail**: Custom event targets and FunctionGraph event targets are used.
               + **smn_detail**: SMN event targets are used.
               + **kafka_detail**: DMS kafka event targets are used.
               + **eg_detail**: EG event targets are used.
        :param _builtins.str name: Specifies the name of the event target.
               The valid length is limited from `1` to `128`.
        :param _builtins.str provider_type: Specifies the provider type of the event target.
               The valid values are as follows:
               + **CUSTOM**
               + **OFFICIAL**
        :param _builtins.str transform: Specifies the transform configuration of the event target, in JSON format.
        :param _builtins.str connection_id: Specifies the connection ID of the EG event target.
        :param _builtins.str created_at: The (UTC) creation time of the event target, in RFC3339 format.
        :param _builtins.str dead_letter_queue: Specifies the specified queue to which failure events sent, in JSON format.
               
               > The JSON result (`detail`, `transform`and `dead_letter_queue`) returned by the EG service may be different from the
               definition of the resource created (especially the official event target). Changes can be handled by
               `lifecycle.ignore_changes` or manual synchronization.
        :param _builtins.str id: Specifies the custom ID of the event target, in UUID format.
        :param _builtins.str updated_at: The (UTC) update time of the event target, in RFC3339 format.
        """
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "detail_name", detail_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "provider_type", provider_type)
        pulumi.set(__self__, "transform", transform)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dead_letter_queue is not None:
            pulumi.set(__self__, "dead_letter_queue", dead_letter_queue)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def detail(self) -> _builtins.str:
        """
        Specifies the configuration detail of the event target, in JSON format.
        The valid length is limited from `1` to `1,024`.
        """
        return pulumi.get(self, "detail")

    @_builtins.property
    @pulumi.getter(name="detailName")
    def detail_name(self) -> _builtins.str:
        """
        Specifies the name (key) of the target detail configuration.
        The valid values are as follows:
        + **detail**: Custom event targets and FunctionGraph event targets are used.
        + **smn_detail**: SMN event targets are used.
        + **kafka_detail**: DMS kafka event targets are used.
        + **eg_detail**: EG event targets are used.
        """
        return pulumi.get(self, "detail_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the event target.
        The valid length is limited from `1` to `128`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> _builtins.str:
        """
        Specifies the provider type of the event target.
        The valid values are as follows:
        + **CUSTOM**
        + **OFFICIAL**
        """
        return pulumi.get(self, "provider_type")

    @_builtins.property
    @pulumi.getter
    def transform(self) -> _builtins.str:
        """
        Specifies the transform configuration of the event target, in JSON format.
        """
        return pulumi.get(self, "transform")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[_builtins.str]:
        """
        Specifies the connection ID of the EG event target.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The (UTC) creation time of the event target, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deadLetterQueue")
    def dead_letter_queue(self) -> Optional[_builtins.str]:
        """
        Specifies the specified queue to which failure events sent, in JSON format.

        > The JSON result (`detail`, `transform`and `dead_letter_queue`) returned by the EG service may be different from the
        definition of the resource created (especially the official event target). Changes can be handled by
        `lifecycle.ignore_changes` or manual synchronization.
        """
        return pulumi.get(self, "dead_letter_queue")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the custom ID of the event target, in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The (UTC) update time of the event target, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 agency: _builtins.str,
                 created_time: _builtins.str,
                 description: _builtins.str,
                 error_infos: Sequence['outputs.GetConnectionsConnectionErrorInfoResult'],
                 flavors: Sequence['outputs.GetConnectionsConnectionFlavorResult'],
                 id: _builtins.str,
                 kafka_details: Sequence['outputs.GetConnectionsConnectionKafkaDetailResult'],
                 name: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 type: _builtins.str,
                 updated_time: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str agency: The user delegation name used by the private network connection.
        :param _builtins.str created_time: The creation time of the connection, in UTC format.
        :param _builtins.str description: The description of the connection.
        :param Sequence['GetConnectionsConnectionErrorInfoArgs'] error_infos: The error information of the connection.  
               The error_info structure is documented below.
        :param Sequence['GetConnectionsConnectionFlavorArgs'] flavors: The flavor information of the connection.
               The flavor structure is documented below.
        :param _builtins.str id: The ID of the connection.
        :param Sequence['GetConnectionsConnectionKafkaDetailArgs'] kafka_details: The Kafka detail information for the connection.  
               The kafka_detail structure is documented below.
        :param _builtins.str name: Specifies the exact name of the connection to be queried.
        :param _builtins.str status: The status of the connection.
        :param _builtins.str subnet_id: The ID of the subnet to which the connection belongs.
        :param _builtins.str type: The type of the connection.
               + **WEBHOOK**
               + **KAFKA**
        :param _builtins.str updated_time: The latest update time of the connection, in UTC format.
        :param _builtins.str vpc_id: The ID of the VPC to which the connection belongs.
        """
        pulumi.set(__self__, "agency", agency)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "error_infos", error_infos)
        pulumi.set(__self__, "flavors", flavors)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kafka_details", kafka_details)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_time", updated_time)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> _builtins.str:
        """
        The user delegation name used by the private network connection.
        """
        return pulumi.get(self, "agency")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        """
        The creation time of the connection, in UTC format.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the connection.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="errorInfos")
    def error_infos(self) -> Sequence['outputs.GetConnectionsConnectionErrorInfoResult']:
        """
        The error information of the connection.  
        The error_info structure is documented below.
        """
        return pulumi.get(self, "error_infos")

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetConnectionsConnectionFlavorResult']:
        """
        The flavor information of the connection.
        The flavor structure is documented below.
        """
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the connection.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kafkaDetails")
    def kafka_details(self) -> Sequence['outputs.GetConnectionsConnectionKafkaDetailResult']:
        """
        The Kafka detail information for the connection.  
        The kafka_detail structure is documented below.
        """
        return pulumi.get(self, "kafka_details")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the exact name of the connection to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the connection.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the subnet to which the connection belongs.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the connection.
        + **WEBHOOK**
        + **KAFKA**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> _builtins.str:
        """
        The latest update time of the connection, in UTC format.
        """
        return pulumi.get(self, "updated_time")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the VPC to which the connection belongs.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetConnectionsConnectionErrorInfoResult(dict):
    def __init__(__self__, *,
                 error_code: _builtins.str,
                 error_detail: _builtins.str,
                 error_msg: _builtins.str):
        """
        :param _builtins.str error_code: The error code.
        :param _builtins.str error_detail: The detailed error information.
        :param _builtins.str error_msg: The error message.
        """
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "error_detail", error_detail)
        pulumi.set(__self__, "error_msg", error_msg)

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> _builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorDetail")
    def error_detail(self) -> _builtins.str:
        """
        The detailed error information.
        """
        return pulumi.get(self, "error_detail")

    @_builtins.property
    @pulumi.getter(name="errorMsg")
    def error_msg(self) -> _builtins.str:
        """
        The error message.
        """
        return pulumi.get(self, "error_msg")


@pulumi.output_type
class GetConnectionsConnectionFlavorResult(dict):
    def __init__(__self__, *,
                 bandwidth_type: _builtins.str,
                 concurrency: _builtins.int,
                 concurrency_type: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str bandwidth_type: The bandwidth type of the flavor.
        :param _builtins.int concurrency: The concurrency value of the flavor.
        :param _builtins.str concurrency_type: The concurrency type of the flavor.
        :param _builtins.str name: Specifies the exact name of the connection to be queried.
        """
        pulumi.set(__self__, "bandwidth_type", bandwidth_type)
        pulumi.set(__self__, "concurrency", concurrency)
        pulumi.set(__self__, "concurrency_type", concurrency_type)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> _builtins.str:
        """
        The bandwidth type of the flavor.
        """
        return pulumi.get(self, "bandwidth_type")

    @_builtins.property
    @pulumi.getter
    def concurrency(self) -> _builtins.int:
        """
        The concurrency value of the flavor.
        """
        return pulumi.get(self, "concurrency")

    @_builtins.property
    @pulumi.getter(name="concurrencyType")
    def concurrency_type(self) -> _builtins.str:
        """
        The concurrency type of the flavor.
        """
        return pulumi.get(self, "concurrency_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the exact name of the connection to be queried.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetConnectionsConnectionKafkaDetailResult(dict):
    def __init__(__self__, *,
                 acks: _builtins.str,
                 connect_address: _builtins.str,
                 enable_sasl_ssl: _builtins.bool,
                 instance_id: _builtins.str,
                 security_protocol: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str acks: The number of confirmation signals the producer‌ needs to receive to consider the message sent successfully.
        :param _builtins.str connect_address: The connection address of the Kafka instance.
        :param _builtins.bool enable_sasl_ssl: Whether SASL_SSL is enabled for the Kafka instance.
        :param _builtins.str instance_id: The ID of the Kafka instance.
        :param _builtins.str security_protocol: The security protocol used for the connection.
        :param _builtins.str user_name: The username of the Kafka instance.
        """
        pulumi.set(__self__, "acks", acks)
        pulumi.set(__self__, "connect_address", connect_address)
        pulumi.set(__self__, "enable_sasl_ssl", enable_sasl_ssl)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "security_protocol", security_protocol)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def acks(self) -> _builtins.str:
        """
        The number of confirmation signals the producer‌ needs to receive to consider the message sent successfully.
        """
        return pulumi.get(self, "acks")

    @_builtins.property
    @pulumi.getter(name="connectAddress")
    def connect_address(self) -> _builtins.str:
        """
        The connection address of the Kafka instance.
        """
        return pulumi.get(self, "connect_address")

    @_builtins.property
    @pulumi.getter(name="enableSaslSsl")
    def enable_sasl_ssl(self) -> _builtins.bool:
        """
        Whether SASL_SSL is enabled for the Kafka instance.
        """
        return pulumi.get(self, "enable_sasl_ssl")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The ID of the Kafka instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> _builtins.str:
        """
        The security protocol used for the connection.
        """
        return pulumi.get(self, "security_protocol")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        The username of the Kafka instance.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetCustomEventChannelsChannelResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 cross_account_ids: Sequence[_builtins.str],
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 provider_type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the custom event channel.
        :param Sequence[_builtins.str] cross_account_ids: The list of domain IDs (other tenants) for the cross-account policy.
        :param _builtins.str description: The description of the custom event channel.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the custom event
               channels belong.
        :param _builtins.str id: The ID of the custom event channel.
        :param _builtins.str name: Specifies the channel name used to query specified custom event channel.
        :param _builtins.str provider_type: The type of the custom event channel.
        :param _builtins.str updated_at: The latest update time of the custom event channel.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "cross_account_ids", cross_account_ids)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "provider_type", provider_type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the custom event channel.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="crossAccountIds")
    def cross_account_ids(self) -> Sequence[_builtins.str]:
        """
        The list of domain IDs (other tenants) for the cross-account policy.
        """
        return pulumi.get(self, "cross_account_ids")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the custom event channel.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the custom event
        channels belong.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the custom event channel.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the channel name used to query specified custom event channel.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> _builtins.str:
        """
        The type of the custom event channel.
        """
        return pulumi.get(self, "provider_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the custom event channel.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetCustomEventSourcesSourceResult(dict):
    def __init__(__self__, *,
                 channel_id: _builtins.str,
                 channel_name: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str channel_id: Specifies the ID of the custom event channel to which the custom event sources
               belong.
        :param _builtins.str channel_name: The name of the custom event channel to which the custom event source belong.
        :param _builtins.str created_at: The creation time of the custom event source.
        :param _builtins.str description: The description of the custom event source.
        :param _builtins.str id: The ID of the custom event source.
        :param _builtins.str name: Specifies the event source name used to query specified custom event source.
        :param _builtins.str status: The status of the custom event source.
               + **CREATE_FAILED**
               + **RUNNING**
               + **ERROR**
        :param _builtins.str type: The type of the custom event source.
        :param _builtins.str updated_at: The update time of the custom event source.
        """
        pulumi.set(__self__, "channel_id", channel_id)
        pulumi.set(__self__, "channel_name", channel_name)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> _builtins.str:
        """
        Specifies the ID of the custom event channel to which the custom event sources
        belong.
        """
        return pulumi.get(self, "channel_id")

    @_builtins.property
    @pulumi.getter(name="channelName")
    def channel_name(self) -> _builtins.str:
        """
        The name of the custom event channel to which the custom event source belong.
        """
        return pulumi.get(self, "channel_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the custom event source.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the custom event source.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the custom event source.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the event source name used to query specified custom event source.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the custom event source.
        + **CREATE_FAILED**
        + **RUNNING**
        + **ERROR**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the custom event source.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the custom event source.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetEventChannelsChannelResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 cross_account_ids: Sequence[_builtins.str],
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 provider_type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the event channel.
        :param Sequence[_builtins.str] cross_account_ids: The list of domain IDs (other tenants) for the cross-account policy.
        :param _builtins.str description: The description of the event channel.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the event channels
               belong.
        :param _builtins.str id: The ID of the event channel.
        :param _builtins.str name: Specifies the channel name used to query specified event channel.
        :param _builtins.str provider_type: Specifies the type of the event channels to be queried.
               + **OFFICIAL**
               + **CUSTOM**
               + **PARTNER**
        :param _builtins.str updated_at: The latest update time of the event channel.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "cross_account_ids", cross_account_ids)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "provider_type", provider_type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the event channel.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="crossAccountIds")
    def cross_account_ids(self) -> Sequence[_builtins.str]:
        """
        The list of domain IDs (other tenants) for the cross-account policy.
        """
        return pulumi.get(self, "cross_account_ids")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the event channel.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the event channels
        belong.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the event channel.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the channel name used to query specified event channel.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> _builtins.str:
        """
        Specifies the type of the event channels to be queried.
        + **OFFICIAL**
        + **CUSTOM**
        + **PARTNER**
        """
        return pulumi.get(self, "provider_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the event channel.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetEventSourcesSourceResult(dict):
    def __init__(__self__, *,
                 channel_id: _builtins.str,
                 channel_name: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 detail: _builtins.str,
                 event_types: Sequence['outputs.GetEventSourcesSourceEventTypeResult'],
                 id: _builtins.str,
                 label: _builtins.str,
                 name: _builtins.str,
                 provider_type: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str channel_id: Specifies the ID of the event channel to which the event sources belong.
        :param _builtins.str channel_name: The name of the event channel to which the event source belong.
        :param _builtins.str created_at: The creation time of the event source.
        :param _builtins.str description: The description of the event type.
        :param _builtins.str detail: The message instance link information encapsulated in json format.
        :param Sequence['GetEventSourcesSourceEventTypeArgs'] event_types: The event types that official event source provided.
               The event_types structure is documented below.
        :param _builtins.str id: The ID of the event source.
        :param _builtins.str label: The display name of the official event source.
        :param _builtins.str name: Specifies the name of the event source to be queried.
        :param _builtins.str provider_type: Specifies the type of the event sources to be queried.  
               The valid values are as follows:
               + **OFFICIAL**
               + **CUSTOM**
               + **PARTNER**
        :param _builtins.str status: The status of the event source.
               + **CREATE_FAILED**
               + **RUNNING**
               + **ERROR**
        :param _builtins.str type: The type of the event source.
        :param _builtins.str updated_at: The update time of the event source.
        """
        pulumi.set(__self__, "channel_id", channel_id)
        pulumi.set(__self__, "channel_name", channel_name)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "event_types", event_types)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "provider_type", provider_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> _builtins.str:
        """
        Specifies the ID of the event channel to which the event sources belong.
        """
        return pulumi.get(self, "channel_id")

    @_builtins.property
    @pulumi.getter(name="channelName")
    def channel_name(self) -> _builtins.str:
        """
        The name of the event channel to which the event source belong.
        """
        return pulumi.get(self, "channel_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the event source.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the event type.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def detail(self) -> _builtins.str:
        """
        The message instance link information encapsulated in json format.
        """
        return pulumi.get(self, "detail")

    @_builtins.property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> Sequence['outputs.GetEventSourcesSourceEventTypeResult']:
        """
        The event types that official event source provided.
        The event_types structure is documented below.
        """
        return pulumi.get(self, "event_types")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the event source.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        """
        The display name of the official event source.
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the event source to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> _builtins.str:
        """
        Specifies the type of the event sources to be queried.  
        The valid values are as follows:
        + **OFFICIAL**
        + **CUSTOM**
        + **PARTNER**
        """
        return pulumi.get(self, "provider_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the event source.
        + **CREATE_FAILED**
        + **RUNNING**
        + **ERROR**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the event source.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the event source.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetEventSourcesSourceEventTypeResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str description: The description of the event type.
        :param _builtins.str name: Specifies the name of the event source to be queried.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the event type.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the event source to be queried.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetEventStreamsEventStreamResult(dict):
    def __init__(__self__, *,
                 created_time: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 options: Sequence['outputs.GetEventStreamsEventStreamOptionResult'],
                 rule_configs: Sequence['outputs.GetEventStreamsEventStreamRuleConfigResult'],
                 sinks: Sequence['outputs.GetEventStreamsEventStreamSinkResult'],
                 sources: Sequence['outputs.GetEventStreamsEventStreamSourceResult'],
                 status: _builtins.str,
                 updated_time: _builtins.str):
        """
        :param _builtins.str created_time: The creation time of the event stream, in RFC3339 format.
        :param _builtins.str description: The description of the event stream.
        :param _builtins.str id: The ID of the event stream.
        :param _builtins.str name: The name of the event sink type.
        :param Sequence['GetEventStreamsEventStreamOptionArgs'] options: The running configuration.  
               The option structure is documented below.
        :param Sequence['GetEventStreamsEventStreamRuleConfigArgs'] rule_configs: The configuration of event rules.  
               The rule_config structure is documented below.
        :param Sequence['GetEventStreamsEventStreamSinkArgs'] sinks: The event sink configuration.  
               The sink structure is documented below.
        :param Sequence['GetEventStreamsEventStreamSourceArgs'] sources: The event source configuration.  
               The source structure is documented below.
        :param _builtins.str status: The status of the event stream.
        :param _builtins.str updated_time: The latest update time of the event stream, in RFC3339 format.
        """
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "rule_configs", rule_configs)
        pulumi.set(__self__, "sinks", sinks)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        """
        The creation time of the event stream, in RFC3339 format.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the event stream.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the event stream.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the event sink type.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def options(self) -> Sequence['outputs.GetEventStreamsEventStreamOptionResult']:
        """
        The running configuration.  
        The option structure is documented below.
        """
        return pulumi.get(self, "options")

    @_builtins.property
    @pulumi.getter(name="ruleConfigs")
    def rule_configs(self) -> Sequence['outputs.GetEventStreamsEventStreamRuleConfigResult']:
        """
        The configuration of event rules.  
        The rule_config structure is documented below.
        """
        return pulumi.get(self, "rule_configs")

    @_builtins.property
    @pulumi.getter
    def sinks(self) -> Sequence['outputs.GetEventStreamsEventStreamSinkResult']:
        """
        The event sink configuration.  
        The sink structure is documented below.
        """
        return pulumi.get(self, "sinks")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetEventStreamsEventStreamSourceResult']:
        """
        The event source configuration.  
        The source structure is documented below.
        """
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the event stream.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> _builtins.str:
        """
        The latest update time of the event stream, in RFC3339 format.
        """
        return pulumi.get(self, "updated_time")


@pulumi.output_type
class GetEventStreamsEventStreamOptionResult(dict):
    def __init__(__self__, *,
                 batch_windows: Sequence['outputs.GetEventStreamsEventStreamOptionBatchWindowResult'],
                 thread_num: _builtins.int):
        """
        :param Sequence['GetEventStreamsEventStreamOptionBatchWindowArgs'] batch_windows: The batch push configuration.  
               The batch_window structure is documented below.
        :param _builtins.int thread_num: The number of concurrent threads.
        """
        pulumi.set(__self__, "batch_windows", batch_windows)
        pulumi.set(__self__, "thread_num", thread_num)

    @_builtins.property
    @pulumi.getter(name="batchWindows")
    def batch_windows(self) -> Sequence['outputs.GetEventStreamsEventStreamOptionBatchWindowResult']:
        """
        The batch push configuration.  
        The batch_window structure is documented below.
        """
        return pulumi.get(self, "batch_windows")

    @_builtins.property
    @pulumi.getter(name="threadNum")
    def thread_num(self) -> _builtins.int:
        """
        The number of concurrent threads.
        """
        return pulumi.get(self, "thread_num")


@pulumi.output_type
class GetEventStreamsEventStreamOptionBatchWindowResult(dict):
    def __init__(__self__, *,
                 count: _builtins.int,
                 interval: _builtins.int,
                 time: _builtins.int):
        """
        :param _builtins.int count: The number of batch push messages.
        :param _builtins.int interval: The batch push interval in seconds.
        :param _builtins.int time: The number of retries.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        The number of batch push messages.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        The batch push interval in seconds.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.int:
        """
        The number of retries.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetEventStreamsEventStreamRuleConfigResult(dict):
    def __init__(__self__, *,
                 filter: Mapping[str, _builtins.str],
                 transforms: Sequence['outputs.GetEventStreamsEventStreamRuleConfigTransformResult']):
        """
        :param Mapping[str, _builtins.str] filter: The filter rules.
        :param Sequence['GetEventStreamsEventStreamRuleConfigTransformArgs'] transforms: The transformation rules.  
               The transform structure is documented below.
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "transforms", transforms)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Mapping[str, _builtins.str]:
        """
        The filter rules.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def transforms(self) -> Sequence['outputs.GetEventStreamsEventStreamRuleConfigTransformResult']:
        """
        The transformation rules.  
        The transform structure is documented below.
        """
        return pulumi.get(self, "transforms")


@pulumi.output_type
class GetEventStreamsEventStreamRuleConfigTransformResult(dict):
    def __init__(__self__, *,
                 template: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str template: The template of transformation rule.
        :param _builtins.str type: The type of transformation rule.
        :param _builtins.str value: The value of transformation rule.
        """
        pulumi.set(__self__, "template", template)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def template(self) -> _builtins.str:
        """
        The template of transformation rule.
        """
        return pulumi.get(self, "template")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of transformation rule.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of transformation rule.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetEventStreamsEventStreamSinkResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 sink_fg: _builtins.str,
                 sink_kafka: _builtins.str,
                 sink_obs: _builtins.str):
        """
        :param _builtins.str name: The name of the event sink type.
        :param _builtins.str sink_fg: The configuration of function graph event sink, in JSON format.
        :param _builtins.str sink_kafka: The configuration of Kafka event sink, in JSON format.
        :param _builtins.str sink_obs: The configuration of OBS event sink, in JSON format.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sink_fg", sink_fg)
        pulumi.set(__self__, "sink_kafka", sink_kafka)
        pulumi.set(__self__, "sink_obs", sink_obs)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the event sink type.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sinkFg")
    def sink_fg(self) -> _builtins.str:
        """
        The configuration of function graph event sink, in JSON format.
        """
        return pulumi.get(self, "sink_fg")

    @_builtins.property
    @pulumi.getter(name="sinkKafka")
    def sink_kafka(self) -> _builtins.str:
        """
        The configuration of Kafka event sink, in JSON format.
        """
        return pulumi.get(self, "sink_kafka")

    @_builtins.property
    @pulumi.getter(name="sinkObs")
    def sink_obs(self) -> _builtins.str:
        """
        The configuration of OBS event sink, in JSON format.
        """
        return pulumi.get(self, "sink_obs")


@pulumi.output_type
class GetEventStreamsEventStreamSourceResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 source_community_rocketmq: _builtins.str,
                 source_dms_rocketmq: _builtins.str,
                 source_kafka: _builtins.str,
                 source_mobile_rocketmq: _builtins.str):
        """
        :param _builtins.str name: The name of the event sink type.
        :param _builtins.str source_community_rocketmq: The configuration of community RocketMQ event source, in JSON format.
        :param _builtins.str source_dms_rocketmq: The configuration of DMS RocketMQ event source, in JSON format.
        :param _builtins.str source_kafka: The configuration of Kafka event source, in JSON format.
        :param _builtins.str source_mobile_rocketmq: The configuration of mobile cloud RocketMQ event source, in JSON format.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_community_rocketmq", source_community_rocketmq)
        pulumi.set(__self__, "source_dms_rocketmq", source_dms_rocketmq)
        pulumi.set(__self__, "source_kafka", source_kafka)
        pulumi.set(__self__, "source_mobile_rocketmq", source_mobile_rocketmq)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the event sink type.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceCommunityRocketmq")
    def source_community_rocketmq(self) -> _builtins.str:
        """
        The configuration of community RocketMQ event source, in JSON format.
        """
        return pulumi.get(self, "source_community_rocketmq")

    @_builtins.property
    @pulumi.getter(name="sourceDmsRocketmq")
    def source_dms_rocketmq(self) -> _builtins.str:
        """
        The configuration of DMS RocketMQ event source, in JSON format.
        """
        return pulumi.get(self, "source_dms_rocketmq")

    @_builtins.property
    @pulumi.getter(name="sourceKafka")
    def source_kafka(self) -> _builtins.str:
        """
        The configuration of Kafka event source, in JSON format.
        """
        return pulumi.get(self, "source_kafka")

    @_builtins.property
    @pulumi.getter(name="sourceMobileRocketmq")
    def source_mobile_rocketmq(self) -> _builtins.str:
        """
        The configuration of mobile cloud RocketMQ event source, in JSON format.
        """
        return pulumi.get(self, "source_mobile_rocketmq")


@pulumi.output_type
class GetEventTargetCatalogsCatalogResult(dict):
    def __init__(__self__, *,
                 created_time: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 label: _builtins.str,
                 name: _builtins.str,
                 parameters: Sequence['outputs.GetEventTargetCatalogsCatalogParameterResult'],
                 provider_type: _builtins.str,
                 support_types: Sequence[_builtins.str],
                 updated_time: _builtins.str):
        """
        :param _builtins.str created_time: The creation time of the event target catalog, in UTC format.
        :param _builtins.str description: The description of the event target catalog.
        :param _builtins.str id: The ID of the event target catalog.
        :param _builtins.str label: The display name of the target parameter.
        :param _builtins.str name: The name of the target parameter.
        :param Sequence['GetEventTargetCatalogsCatalogParameterArgs'] parameters: The parameter list of the event target catalog.  
               The parameters structure is documented below.
        :param _builtins.str provider_type: The provider type of the event target catalog.
               + **OFFICIAL**
               + **CUSTOM**
        :param Sequence[_builtins.str] support_types: Specifies the support type list of event targets to be queried.  
               The valid values are as follows:
               + **SUBSCRIPTION**
               + **FLOW**
        :param _builtins.str updated_time: The latest update time of the event target catalog, in UTC format.
        """
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "provider_type", provider_type)
        pulumi.set(__self__, "support_types", support_types)
        pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        """
        The creation time of the event target catalog, in UTC format.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the event target catalog.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the event target catalog.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        """
        The display name of the target parameter.
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the target parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetEventTargetCatalogsCatalogParameterResult']:
        """
        The parameter list of the event target catalog.  
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> _builtins.str:
        """
        The provider type of the event target catalog.
        + **OFFICIAL**
        + **CUSTOM**
        """
        return pulumi.get(self, "provider_type")

    @_builtins.property
    @pulumi.getter(name="supportTypes")
    def support_types(self) -> Sequence[_builtins.str]:
        """
        Specifies the support type list of event targets to be queried.  
        The valid values are as follows:
        + **SUBSCRIPTION**
        + **FLOW**
        """
        return pulumi.get(self, "support_types")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> _builtins.str:
        """
        The latest update time of the event target catalog, in UTC format.
        """
        return pulumi.get(self, "updated_time")


@pulumi.output_type
class GetEventTargetCatalogsCatalogParameterResult(dict):
    def __init__(__self__, *,
                 label: _builtins.str,
                 metadata: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str label: The display name of the target parameter.
        :param _builtins.str metadata: The metadata of the target parameter, in JSON format.
        :param _builtins.str name: The name of the target parameter.
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        """
        The display name of the target parameter.
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> _builtins.str:
        """
        The metadata of the target parameter, in JSON format.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the target parameter.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 max: _builtins.int,
                 min: _builtins.int,
                 name: _builtins.str,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int max: The maximum quota.
        :param _builtins.int min: The minimum quota.
        :param _builtins.str name: The quota name.
        :param _builtins.int quota: The quota of current tenant.
        :param _builtins.str type: Specifies the quota of the resource type to be queried.
        :param _builtins.int used: The quota used by the current tenant.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def max(self) -> _builtins.int:
        """
        The maximum quota.
        """
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.int:
        """
        The minimum quota.
        """
        return pulumi.get(self, "min")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The quota name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        The quota of current tenant.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the quota of the resource type to be queried.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The quota used by the current tenant.
        """
        return pulumi.get(self, "used")


