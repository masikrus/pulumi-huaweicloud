# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConnectionArgs', 'Connection']

@pulumi.input_type
class ConnectionArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 kafka_detail: Optional[pulumi.Input['ConnectionKafkaDetailArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Connection resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the connection belongs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC to which the connection belongs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the connection.
        :param pulumi.Input['ConnectionKafkaDetailArgs'] kafka_detail: Specifies the configuration details of the kafka instance.
               This parameter is required when the `type` is set to **KAFKA**.
               
               Changing this parameter will create a new resource.
               The KafkaDetail structure is documented below.
               
               <a name="Connection_KafkaDetail"></a>
               The `KafkaDetail` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the connection.
               The value can contain no more than 128 characters, including letters, digits, underscores (_), hyphens (-),
               and periods (.), and must start with a character or letter.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the connection.
               The value can be **WEBHOOK** and **KAFKA**. Defaults to **WEBHOOK**.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if kafka_detail is not None:
            pulumi.set(__self__, "kafka_detail", kafka_detail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the subnet to which the connection belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the VPC to which the connection belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the connection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="kafkaDetail")
    def kafka_detail(self) -> Optional[pulumi.Input['ConnectionKafkaDetailArgs']]:
        """
        Specifies the configuration details of the kafka instance.
        This parameter is required when the `type` is set to **KAFKA**.

        Changing this parameter will create a new resource.
        The KafkaDetail structure is documented below.

        <a name="Connection_KafkaDetail"></a>
        The `KafkaDetail` block supports:
        """
        return pulumi.get(self, "kafka_detail")

    @kafka_detail.setter
    def kafka_detail(self, value: Optional[pulumi.Input['ConnectionKafkaDetailArgs']]):
        pulumi.set(self, "kafka_detail", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the connection.
        The value can contain no more than 128 characters, including letters, digits, underscores (_), hyphens (-),
        and periods (.), and must start with a character or letter.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the connection.
        The value can be **WEBHOOK** and **KAFKA**. Defaults to **WEBHOOK**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _ConnectionState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 kafka_detail: Optional[pulumi.Input['ConnectionKafkaDetailArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Connection resources.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the connection.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the connection.
        :param pulumi.Input['ConnectionKafkaDetailArgs'] kafka_detail: Specifies the configuration details of the kafka instance.
               This parameter is required when the `type` is set to **KAFKA**.
               
               Changing this parameter will create a new resource.
               The KafkaDetail structure is documented below.
               
               <a name="Connection_KafkaDetail"></a>
               The `KafkaDetail` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the connection.
               The value can contain no more than 128 characters, including letters, digits, underscores (_), hyphens (-),
               and periods (.), and must start with a character or letter.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the connection.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the connection belongs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the connection.
               The value can be **WEBHOOK** and **KAFKA**. Defaults to **WEBHOOK**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The last update time of the connection.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC to which the connection belongs.
               
               Changing this parameter will create a new resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if kafka_detail is not None:
            pulumi.set(__self__, "kafka_detail", kafka_detail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the connection.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the connection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="kafkaDetail")
    def kafka_detail(self) -> Optional[pulumi.Input['ConnectionKafkaDetailArgs']]:
        """
        Specifies the configuration details of the kafka instance.
        This parameter is required when the `type` is set to **KAFKA**.

        Changing this parameter will create a new resource.
        The KafkaDetail structure is documented below.

        <a name="Connection_KafkaDetail"></a>
        The `KafkaDetail` block supports:
        """
        return pulumi.get(self, "kafka_detail")

    @kafka_detail.setter
    def kafka_detail(self, value: Optional[pulumi.Input['ConnectionKafkaDetailArgs']]):
        pulumi.set(self, "kafka_detail", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the connection.
        The value can contain no more than 128 characters, including letters, digits, underscores (_), hyphens (-),
        and periods (.), and must start with a character or letter.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the connection.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the subnet to which the connection belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the connection.
        The value can be **WEBHOOK** and **KAFKA**. Defaults to **WEBHOOK**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The last update time of the connection.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the VPC to which the connection belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:eg/connection:Connection")
class Connection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 kafka_detail: Optional[pulumi.Input[Union['ConnectionKafkaDetailArgs', 'ConnectionKafkaDetailArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an EG connection resource within HuaweiCloud.

        ## Example Usage

        ### Connection with WEBHOOK

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        test = huaweicloud.eg.Connection("test",
            name="test",
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            description="created by terraform",
            type="WEBHOOK")
        ```

        ## Import

        The connection can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:eg/connection:Connection test 3ea117f5-1ea3-4c27-af7f-c12c737f2ca4
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the connection.
        :param pulumi.Input[Union['ConnectionKafkaDetailArgs', 'ConnectionKafkaDetailArgsDict']] kafka_detail: Specifies the configuration details of the kafka instance.
               This parameter is required when the `type` is set to **KAFKA**.
               
               Changing this parameter will create a new resource.
               The KafkaDetail structure is documented below.
               
               <a name="Connection_KafkaDetail"></a>
               The `KafkaDetail` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the connection.
               The value can contain no more than 128 characters, including letters, digits, underscores (_), hyphens (-),
               and periods (.), and must start with a character or letter.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the connection belongs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the connection.
               The value can be **WEBHOOK** and **KAFKA**. Defaults to **WEBHOOK**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC to which the connection belongs.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an EG connection resource within HuaweiCloud.

        ## Example Usage

        ### Connection with WEBHOOK

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        test = huaweicloud.eg.Connection("test",
            name="test",
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            description="created by terraform",
            type="WEBHOOK")
        ```

        ## Import

        The connection can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:eg/connection:Connection test 3ea117f5-1ea3-4c27-af7f-c12c737f2ca4
        ```

        :param str resource_name: The name of the resource.
        :param ConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 kafka_detail: Optional[pulumi.Input[Union['ConnectionKafkaDetailArgs', 'ConnectionKafkaDetailArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectionArgs.__new__(ConnectionArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["kafka_detail"] = kafka_detail
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["type"] = type
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(Connection, __self__).__init__(
            'huaweicloud:eg/connection:Connection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            kafka_detail: Optional[pulumi.Input[Union['ConnectionKafkaDetailArgs', 'ConnectionKafkaDetailArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Connection':
        """
        Get an existing Connection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the connection.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the connection.
        :param pulumi.Input[Union['ConnectionKafkaDetailArgs', 'ConnectionKafkaDetailArgsDict']] kafka_detail: Specifies the configuration details of the kafka instance.
               This parameter is required when the `type` is set to **KAFKA**.
               
               Changing this parameter will create a new resource.
               The KafkaDetail structure is documented below.
               
               <a name="Connection_KafkaDetail"></a>
               The `KafkaDetail` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the connection.
               The value can contain no more than 128 characters, including letters, digits, underscores (_), hyphens (-),
               and periods (.), and must start with a character or letter.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the connection.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the connection belongs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the connection.
               The value can be **WEBHOOK** and **KAFKA**. Defaults to **WEBHOOK**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The last update time of the connection.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of the VPC to which the connection belongs.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectionState.__new__(_ConnectionState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["kafka_detail"] = kafka_detail
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["vpc_id"] = vpc_id
        return Connection(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the connection.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the connection.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="kafkaDetail")
    def kafka_detail(self) -> pulumi.Output['outputs.ConnectionKafkaDetail']:
        """
        Specifies the configuration details of the kafka instance.
        This parameter is required when the `type` is set to **KAFKA**.

        Changing this parameter will create a new resource.
        The KafkaDetail structure is documented below.

        <a name="Connection_KafkaDetail"></a>
        The `KafkaDetail` block supports:
        """
        return pulumi.get(self, "kafka_detail")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the connection.
        The value can contain no more than 128 characters, including letters, digits, underscores (_), hyphens (-),
        and periods (.), and must start with a character or letter.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of the connection.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the subnet to which the connection belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the connection.
        The value can be **WEBHOOK** and **KAFKA**. Defaults to **WEBHOOK**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The last update time of the connection.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the VPC to which the connection belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

