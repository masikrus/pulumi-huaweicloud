# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEventTargetCatalogsResult',
    'AwaitableGetEventTargetCatalogsResult',
    'get_event_target_catalogs',
    'get_event_target_catalogs_output',
]

@pulumi.output_type
class GetEventTargetCatalogsResult:
    """
    A collection of values returned by getEventTargetCatalogs.
    """
    def __init__(__self__, catalogs=None, fuzzy_label=None, id=None, region=None, sort=None, support_types=None):
        if catalogs and not isinstance(catalogs, list):
            raise TypeError("Expected argument 'catalogs' to be a list")
        pulumi.set(__self__, "catalogs", catalogs)
        if fuzzy_label and not isinstance(fuzzy_label, str):
            raise TypeError("Expected argument 'fuzzy_label' to be a str")
        pulumi.set(__self__, "fuzzy_label", fuzzy_label)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)
        if support_types and not isinstance(support_types, list):
            raise TypeError("Expected argument 'support_types' to be a list")
        pulumi.set(__self__, "support_types", support_types)

    @_builtins.property
    @pulumi.getter
    def catalogs(self) -> Sequence['outputs.GetEventTargetCatalogsCatalogResult']:
        """
        All event target catalogs that match the filter parameters.  
        The catalogs structure is documented below.
        """
        return pulumi.get(self, "catalogs")

    @_builtins.property
    @pulumi.getter(name="fuzzyLabel")
    def fuzzy_label(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "fuzzy_label")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort")

    @_builtins.property
    @pulumi.getter(name="supportTypes")
    def support_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        The support type list of event target catalog.
        """
        return pulumi.get(self, "support_types")


class AwaitableGetEventTargetCatalogsResult(GetEventTargetCatalogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventTargetCatalogsResult(
            catalogs=self.catalogs,
            fuzzy_label=self.fuzzy_label,
            id=self.id,
            region=self.region,
            sort=self.sort,
            support_types=self.support_types)


def get_event_target_catalogs(fuzzy_label: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              sort: Optional[_builtins.str] = None,
                              support_types: Optional[Sequence[_builtins.str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventTargetCatalogsResult:
    """
    Use this data source to get list of EG event target catalogs within HuaweiCloud.

    ## Example Usage

    ### Query all event target catalogs

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.eg.get_event_target_catalogs()
    ```

    ### Query event target catalogs with support types

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.eg.get_event_target_catalogs(support_types=[
        "SUBSCRIPTION",
        "FLOW",
    ])
    ```


    :param _builtins.str fuzzy_label: Specifies the label of the event target catalog to be queried.  
           Fuzzy search is supported.
    :param _builtins.str region: Specifies the region where the event target catalogs are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str sort: Specifies the sort order for querying event target catalogs.  
           The format is `field:order`, where `field` is the field name and `order` is `ASC` or `DESC`.
           e.g. `created_time:ASC`. Only `created_time` and `updated_time` fields are supported.
    :param Sequence[_builtins.str] support_types: Specifies the support type list of event targets to be queried.  
           The valid values are as follows:
           + **SUBSCRIPTION**
           + **FLOW**
    """
    __args__ = dict()
    __args__['fuzzyLabel'] = fuzzy_label
    __args__['region'] = region
    __args__['sort'] = sort
    __args__['supportTypes'] = support_types
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:eg/getEventTargetCatalogs:getEventTargetCatalogs', __args__, opts=opts, typ=GetEventTargetCatalogsResult).value

    return AwaitableGetEventTargetCatalogsResult(
        catalogs=pulumi.get(__ret__, 'catalogs'),
        fuzzy_label=pulumi.get(__ret__, 'fuzzy_label'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        sort=pulumi.get(__ret__, 'sort'),
        support_types=pulumi.get(__ret__, 'support_types'))
def get_event_target_catalogs_output(fuzzy_label: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     sort: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     support_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEventTargetCatalogsResult]:
    """
    Use this data source to get list of EG event target catalogs within HuaweiCloud.

    ## Example Usage

    ### Query all event target catalogs

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.eg.get_event_target_catalogs()
    ```

    ### Query event target catalogs with support types

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.eg.get_event_target_catalogs(support_types=[
        "SUBSCRIPTION",
        "FLOW",
    ])
    ```


    :param _builtins.str fuzzy_label: Specifies the label of the event target catalog to be queried.  
           Fuzzy search is supported.
    :param _builtins.str region: Specifies the region where the event target catalogs are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str sort: Specifies the sort order for querying event target catalogs.  
           The format is `field:order`, where `field` is the field name and `order` is `ASC` or `DESC`.
           e.g. `created_time:ASC`. Only `created_time` and `updated_time` fields are supported.
    :param Sequence[_builtins.str] support_types: Specifies the support type list of event targets to be queried.  
           The valid values are as follows:
           + **SUBSCRIPTION**
           + **FLOW**
    """
    __args__ = dict()
    __args__['fuzzyLabel'] = fuzzy_label
    __args__['region'] = region
    __args__['sort'] = sort
    __args__['supportTypes'] = support_types
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:eg/getEventTargetCatalogs:getEventTargetCatalogs', __args__, opts=opts, typ=GetEventTargetCatalogsResult)
    return __ret__.apply(lambda __response__: GetEventTargetCatalogsResult(
        catalogs=pulumi.get(__response__, 'catalogs'),
        fuzzy_label=pulumi.get(__response__, 'fuzzy_label'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        sort=pulumi.get(__response__, 'sort'),
        support_types=pulumi.get(__response__, 'support_types')))
