# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CustomEventChannelArgs', 'CustomEventChannel']

@pulumi.input_type
class CustomEventChannelArgs:
    def __init__(__self__, *,
                 cross_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CustomEventChannel resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cross_account_ids: Specifies the list of domain IDs (other tenants) for the cross-account policy.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the custom event channel.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the custom
               event channel belongs.
               The enterprise project is not used by default. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the custom event channel.  
               The valid length is limited from `1` to `128`, only letters, digits, dots (.), hyphens (-) and underscores (_) are
               allowed. The name must start with a letter or digit, and cannot be **default**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the custom event channel is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        if cross_account_ids is not None:
            pulumi.set(__self__, "cross_account_ids", cross_account_ids)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="crossAccountIds")
    def cross_account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of domain IDs (other tenants) for the cross-account policy.
        """
        return pulumi.get(self, "cross_account_ids")

    @cross_account_ids.setter
    def cross_account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cross_account_ids", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the custom event channel.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project to which the custom
        event channel belongs.
        The enterprise project is not used by default. Changing this will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the custom event channel.  
        The valid length is limited from `1` to `128`, only letters, digits, dots (.), hyphens (-) and underscores (_) are
        allowed. The name must start with a letter or digit, and cannot be **default**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the custom event channel is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _CustomEventChannelState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 cross_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CustomEventChannel resources.
        :param pulumi.Input[_builtins.str] created_at: The (UTC) creation time of the custom channel, in RFC3339 format.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cross_account_ids: Specifies the list of domain IDs (other tenants) for the cross-account policy.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the custom event channel.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the custom
               event channel belongs.
               The enterprise project is not used by default. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the custom event channel.  
               The valid length is limited from `1` to `128`, only letters, digits, dots (.), hyphens (-) and underscores (_) are
               allowed. The name must start with a letter or digit, and cannot be **default**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the custom event channel is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The (UTC) update time of the custom channel, in RFC3339 format.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if cross_account_ids is not None:
            pulumi.set(__self__, "cross_account_ids", cross_account_ids)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The (UTC) creation time of the custom channel, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="crossAccountIds")
    def cross_account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of domain IDs (other tenants) for the cross-account policy.
        """
        return pulumi.get(self, "cross_account_ids")

    @cross_account_ids.setter
    def cross_account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cross_account_ids", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the custom event channel.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project to which the custom
        event channel belongs.
        The enterprise project is not used by default. Changing this will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the custom event channel.  
        The valid length is limited from `1` to `128`, only letters, digits, dots (.), hyphens (-) and underscores (_) are
        allowed. The name must start with a letter or digit, and cannot be **default**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the custom event channel is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The (UTC) update time of the custom channel, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:eg/customEventChannel:CustomEventChannel")
class CustomEventChannel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cross_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to manage an EG custom event channel within Huaweicloud.

        ## Example Usage

        ### Manage a basic channel without enterprise project configuation

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        channel_name = config.require_object("channelName")
        test = huaweicloud.eg.CustomEventChannel("test",
            name=channel_name,
            description="Created by script")
        ```

        ### Manage a basic channel under default enterprise project

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        channel_name = config.require_object("channelName")
        test = huaweicloud.eg.CustomEventChannel("test",
            name=channel_name,
            description="Created by script",
            enterprise_project_id="0")
        ```

        ### Enable cross-account configuation

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        channel_name = config.require_object("channelName")
        target_domain_ids = config.require_object("targetDomainIds")
        test = huaweicloud.eg.CustomEventChannel("test",
            name=channel_name,
            cross_account_ids=target_domain_ids)
        ```

        ## Import

        ### with enterprise project association

        bash

        ```sh
        $ pulumi import huaweicloud:eg/customEventChannel:CustomEventChannel test <id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cross_account_ids: Specifies the list of domain IDs (other tenants) for the cross-account policy.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the custom event channel.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the custom
               event channel belongs.
               The enterprise project is not used by default. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the custom event channel.  
               The valid length is limited from `1` to `128`, only letters, digits, dots (.), hyphens (-) and underscores (_) are
               allowed. The name must start with a letter or digit, and cannot be **default**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the custom event channel is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CustomEventChannelArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to manage an EG custom event channel within Huaweicloud.

        ## Example Usage

        ### Manage a basic channel without enterprise project configuation

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        channel_name = config.require_object("channelName")
        test = huaweicloud.eg.CustomEventChannel("test",
            name=channel_name,
            description="Created by script")
        ```

        ### Manage a basic channel under default enterprise project

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        channel_name = config.require_object("channelName")
        test = huaweicloud.eg.CustomEventChannel("test",
            name=channel_name,
            description="Created by script",
            enterprise_project_id="0")
        ```

        ### Enable cross-account configuation

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        channel_name = config.require_object("channelName")
        target_domain_ids = config.require_object("targetDomainIds")
        test = huaweicloud.eg.CustomEventChannel("test",
            name=channel_name,
            cross_account_ids=target_domain_ids)
        ```

        ## Import

        ### with enterprise project association

        bash

        ```sh
        $ pulumi import huaweicloud:eg/customEventChannel:CustomEventChannel test <id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param CustomEventChannelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomEventChannelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cross_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomEventChannelArgs.__new__(CustomEventChannelArgs)

            __props__.__dict__["cross_account_ids"] = cross_account_ids
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(CustomEventChannel, __self__).__init__(
            'huaweicloud:eg/customEventChannel:CustomEventChannel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            cross_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'CustomEventChannel':
        """
        Get an existing CustomEventChannel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The (UTC) creation time of the custom channel, in RFC3339 format.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cross_account_ids: Specifies the list of domain IDs (other tenants) for the cross-account policy.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the custom event channel.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the custom
               event channel belongs.
               The enterprise project is not used by default. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the custom event channel.  
               The valid length is limited from `1` to `128`, only letters, digits, dots (.), hyphens (-) and underscores (_) are
               allowed. The name must start with a letter or digit, and cannot be **default**.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the custom event channel is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The (UTC) update time of the custom channel, in RFC3339 format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomEventChannelState.__new__(_CustomEventChannelState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["cross_account_ids"] = cross_account_ids
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["updated_at"] = updated_at
        return CustomEventChannel(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The (UTC) creation time of the custom channel, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="crossAccountIds")
    def cross_account_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the list of domain IDs (other tenants) for the cross-account policy.
        """
        return pulumi.get(self, "cross_account_ids")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the custom event channel.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the enterprise project to which the custom
        event channel belongs.
        The enterprise project is not used by default. Changing this will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the custom event channel.  
        The valid length is limited from `1` to `128`, only letters, digits, dots (.), hyphens (-) and underscores (_) are
        allowed. The name must start with a letter or digit, and cannot be **default**.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the custom event channel is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The (UTC) update time of the custom channel, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

