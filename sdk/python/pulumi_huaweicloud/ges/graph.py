# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GraphArgs', 'Graph']

@pulumi.input_type
class GraphArgs:
    def __init__(__self__, *,
                 crypt_algorithm: pulumi.Input[_builtins.str],
                 enable_https: pulumi.Input[_builtins.bool],
                 graph_size_type_index: pulumi.Input[_builtins.str],
                 security_group_id: pulumi.Input[_builtins.str],
                 subnet_id: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 cpu_arch: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_full_text_index: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_hyg: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_multi_az: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_rbac: Optional[pulumi.Input[_builtins.bool]] = None,
                 encryption: Optional[pulumi.Input['GraphEncryptionArgs']] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_backup: Optional[pulumi.Input[_builtins.bool]] = None,
                 lts_operation_trace: Optional[pulumi.Input['GraphLtsOperationTraceArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 product_type: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input['GraphPublicIpArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replication: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vertex_id_type: Optional[pulumi.Input['GraphVertexIdTypeArgs']] = None):
        """
        The set of arguments for constructing a Graph resource.
        :param pulumi.Input[_builtins.str] crypt_algorithm: Graph instance cryptography algorithm.  
               Value options are as follows:
               + **generalCipher**: Chinese cryptographic algorithm.
               + **SMcompatible**: Commercial cryptography algorithm (compatible with international ones).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_https: Whether to enable the security mode. This mode may damage GES performance greatly.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] graph_size_type_index: Graph size type index.  
               Value options are as follows:
               + **0**: indicates 10 thousand edges.
               + **1**: indicates 1 million edges.
               + **2**: indicates 10 million edges.
               + **3**: indicates 100 million edges.
               + **4**: indicates 1 billion edges.
               + **5**: indicates 10 billion edges.
               + **6**: indicates the database edition.
               + **401**: indicates 1 billion enhanced edges.
        :param pulumi.Input[_builtins.str] security_group_id: The security group ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cpu_arch: Graph instance's CPU architecture type.  
               The value can be **x86_64** or **aarch64**. The default value is **x86_64**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_full_text_index: Whether to enable full-text index control for the created graph.
               The default value is false. If this parameter is set to true, full-text indexes are available
               for 1-billion-edge-pro graphs, and a Cloud Search Service (CSS) cluster will
               be created when you create a graph.
               
               > If you enable full-text indexes: If the CSS has been deployed, the system automatically creates a
               CSS cluster during the creation of the graph instance, which will take a long time.
               If the CSS is not deployed, the graph creation will fail.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_hyg: Whether to enable HyG for the graph.
               This parameter is available for database edition graphs only.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_multi_az: Whether the created graph supports the cross-AZ mode.
               The default value is false.
               If the value is true, the system will create the ECSs in the graph in two AZs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_rbac: Whether to enable granular permission control for the created graph.  
               The default value is false. If this parameter is set to true, no user has the permission to access the graph.
               To access the graph, you need to call the granular permission control API of the service plane
               to set the required permissions.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input['GraphEncryptionArgs'] encryption: The configuration of data encryption.
               
               Changing this parameter will create a new resource.
               
               The Encryption structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] keep_backup: Whether to retain the backups of a graph after it is deleted.
               
               <a name="GesGraph_PublicIp"></a>
               The `PublicIp` block supports:
        :param pulumi.Input['GraphLtsOperationTraceArgs'] lts_operation_trace: The configuration of audit logs.
               
               Changing this parameter will create a new resource.
               
               The LtsOperationTrace structure is documented below.
        :param pulumi.Input[_builtins.str] name: The graph name.  
               The name must start with a letter and contains 4 to 50 characters consisting of letters,
               digits, hyphens (-), and underscores (_). It cannot contain special characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] product_type: Graph product type.  
               Value options are as follows:
               + **InMemory**: memory edition.
               + **Persistence**: database edition.
               
               If **graph_size_type_index** is 6, the value must be **Persistence**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input['GraphPublicIpArgs'] public_ip: The information about public IP.  
               If the parameter is not specified, public connection is not used by default.
               
               Changing this parameter will create a new resource.
               
               The PublicIp structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] replication: Number of replicas.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The key/value pairs to associate with the graph.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input['GraphVertexIdTypeArgs'] vertex_id_type: The configuration of vertex ID.
               This parameter is mandatory only for database edition graphs.
               
               Changing this parameter will create a new resource.
               
               The vertexIdType structure is documented below.
        """
        pulumi.set(__self__, "crypt_algorithm", crypt_algorithm)
        pulumi.set(__self__, "enable_https", enable_https)
        pulumi.set(__self__, "graph_size_type_index", graph_size_type_index)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if cpu_arch is not None:
            pulumi.set(__self__, "cpu_arch", cpu_arch)
        if enable_full_text_index is not None:
            pulumi.set(__self__, "enable_full_text_index", enable_full_text_index)
        if enable_hyg is not None:
            pulumi.set(__self__, "enable_hyg", enable_hyg)
        if enable_multi_az is not None:
            pulumi.set(__self__, "enable_multi_az", enable_multi_az)
        if enable_rbac is not None:
            pulumi.set(__self__, "enable_rbac", enable_rbac)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if keep_backup is not None:
            pulumi.set(__self__, "keep_backup", keep_backup)
        if lts_operation_trace is not None:
            pulumi.set(__self__, "lts_operation_trace", lts_operation_trace)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if product_type is not None:
            pulumi.set(__self__, "product_type", product_type)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if replication is not None:
            pulumi.set(__self__, "replication", replication)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vertex_id_type is not None:
            pulumi.set(__self__, "vertex_id_type", vertex_id_type)

    @_builtins.property
    @pulumi.getter(name="cryptAlgorithm")
    def crypt_algorithm(self) -> pulumi.Input[_builtins.str]:
        """
        Graph instance cryptography algorithm.  
        Value options are as follows:
        + **generalCipher**: Chinese cryptographic algorithm.
        + **SMcompatible**: Commercial cryptography algorithm (compatible with international ones).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "crypt_algorithm")

    @crypt_algorithm.setter
    def crypt_algorithm(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "crypt_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="enableHttps")
    def enable_https(self) -> pulumi.Input[_builtins.bool]:
        """
        Whether to enable the security mode. This mode may damage GES performance greatly.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_https")

    @enable_https.setter
    def enable_https(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enable_https", value)

    @_builtins.property
    @pulumi.getter(name="graphSizeTypeIndex")
    def graph_size_type_index(self) -> pulumi.Input[_builtins.str]:
        """
        Graph size type index.  
        Value options are as follows:
        + **0**: indicates 10 thousand edges.
        + **1**: indicates 1 million edges.
        + **2**: indicates 10 million edges.
        + **3**: indicates 100 million edges.
        + **4**: indicates 1 billion edges.
        + **5**: indicates 10 billion edges.
        + **6**: indicates the database edition.
        + **401**: indicates 1 billion enhanced edges.
        """
        return pulumi.get(self, "graph_size_type_index")

    @graph_size_type_index.setter
    def graph_size_type_index(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "graph_size_type_index", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        The security group ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        The subnet ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        The VPC ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="cpuArch")
    def cpu_arch(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Graph instance's CPU architecture type.  
        The value can be **x86_64** or **aarch64**. The default value is **x86_64**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cpu_arch")

    @cpu_arch.setter
    def cpu_arch(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cpu_arch", value)

    @_builtins.property
    @pulumi.getter(name="enableFullTextIndex")
    def enable_full_text_index(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable full-text index control for the created graph.
        The default value is false. If this parameter is set to true, full-text indexes are available
        for 1-billion-edge-pro graphs, and a Cloud Search Service (CSS) cluster will
        be created when you create a graph.

        > If you enable full-text indexes: If the CSS has been deployed, the system automatically creates a
        CSS cluster during the creation of the graph instance, which will take a long time.
        If the CSS is not deployed, the graph creation will fail.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_full_text_index")

    @enable_full_text_index.setter
    def enable_full_text_index(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_full_text_index", value)

    @_builtins.property
    @pulumi.getter(name="enableHyg")
    def enable_hyg(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable HyG for the graph.
        This parameter is available for database edition graphs only.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_hyg")

    @enable_hyg.setter
    def enable_hyg(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_hyg", value)

    @_builtins.property
    @pulumi.getter(name="enableMultiAz")
    def enable_multi_az(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the created graph supports the cross-AZ mode.
        The default value is false.
        If the value is true, the system will create the ECSs in the graph in two AZs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_multi_az")

    @enable_multi_az.setter
    def enable_multi_az(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_multi_az", value)

    @_builtins.property
    @pulumi.getter(name="enableRbac")
    def enable_rbac(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable granular permission control for the created graph.  
        The default value is false. If this parameter is set to true, no user has the permission to access the graph.
        To access the graph, you need to call the granular permission control API of the service plane
        to set the required permissions.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_rbac")

    @enable_rbac.setter
    def enable_rbac(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_rbac", value)

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['GraphEncryptionArgs']]:
        """
        The configuration of data encryption.

        Changing this parameter will create a new resource.

        The Encryption structure is documented below.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['GraphEncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The enterprise project ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="keepBackup")
    def keep_backup(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to retain the backups of a graph after it is deleted.

        <a name="GesGraph_PublicIp"></a>
        The `PublicIp` block supports:
        """
        return pulumi.get(self, "keep_backup")

    @keep_backup.setter
    def keep_backup(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keep_backup", value)

    @_builtins.property
    @pulumi.getter(name="ltsOperationTrace")
    def lts_operation_trace(self) -> Optional[pulumi.Input['GraphLtsOperationTraceArgs']]:
        """
        The configuration of audit logs.

        Changing this parameter will create a new resource.

        The LtsOperationTrace structure is documented below.
        """
        return pulumi.get(self, "lts_operation_trace")

    @lts_operation_trace.setter
    def lts_operation_trace(self, value: Optional[pulumi.Input['GraphLtsOperationTraceArgs']]):
        pulumi.set(self, "lts_operation_trace", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The graph name.  
        The name must start with a letter and contains 4 to 50 characters consisting of letters,
        digits, hyphens (-), and underscores (_). It cannot contain special characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Graph product type.  
        Value options are as follows:
        + **InMemory**: memory edition.
        + **Persistence**: database edition.

        If **graph_size_type_index** is 6, the value must be **Persistence**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_type")

    @product_type.setter
    def product_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "product_type", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input['GraphPublicIpArgs']]:
        """
        The information about public IP.  
        If the parameter is not specified, public connection is not used by default.

        Changing this parameter will create a new resource.

        The PublicIp structure is documented below.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input['GraphPublicIpArgs']]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def replication(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of replicas.
        """
        return pulumi.get(self, "replication")

    @replication.setter
    def replication(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "replication", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The key/value pairs to associate with the graph.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="vertexIdType")
    def vertex_id_type(self) -> Optional[pulumi.Input['GraphVertexIdTypeArgs']]:
        """
        The configuration of vertex ID.
        This parameter is mandatory only for database edition graphs.

        Changing this parameter will create a new resource.

        The vertexIdType structure is documented below.
        """
        return pulumi.get(self, "vertex_id_type")

    @vertex_id_type.setter
    def vertex_id_type(self, value: Optional[pulumi.Input['GraphVertexIdTypeArgs']]):
        pulumi.set(self, "vertex_id_type", value)


@pulumi.input_type
class _GraphState:
    def __init__(__self__, *,
                 az_code: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu_arch: Optional[pulumi.Input[_builtins.str]] = None,
                 crypt_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_full_text_index: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_https: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_hyg: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_multi_az: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_rbac: Optional[pulumi.Input[_builtins.bool]] = None,
                 encryption: Optional[pulumi.Input['GraphEncryptionArgs']] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 graph_size_type_index: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_backup: Optional[pulumi.Input[_builtins.bool]] = None,
                 lts_operation_trace: Optional[pulumi.Input['GraphLtsOperationTraceArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 product_type: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input['GraphPublicIpArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replication: Optional[pulumi.Input[_builtins.int]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 traffic_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vertex_id_type: Optional[pulumi.Input['GraphVertexIdTypeArgs']] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Graph resources.
        :param pulumi.Input[_builtins.str] az_code: AZ code
        :param pulumi.Input[_builtins.str] cpu_arch: Graph instance's CPU architecture type.  
               The value can be **x86_64** or **aarch64**. The default value is **x86_64**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] crypt_algorithm: Graph instance cryptography algorithm.  
               Value options are as follows:
               + **generalCipher**: Chinese cryptographic algorithm.
               + **SMcompatible**: Commercial cryptography algorithm (compatible with international ones).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_full_text_index: Whether to enable full-text index control for the created graph.
               The default value is false. If this parameter is set to true, full-text indexes are available
               for 1-billion-edge-pro graphs, and a Cloud Search Service (CSS) cluster will
               be created when you create a graph.
               
               > If you enable full-text indexes: If the CSS has been deployed, the system automatically creates a
               CSS cluster during the creation of the graph instance, which will take a long time.
               If the CSS is not deployed, the graph creation will fail.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_https: Whether to enable the security mode. This mode may damage GES performance greatly.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_hyg: Whether to enable HyG for the graph.
               This parameter is available for database edition graphs only.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_multi_az: Whether the created graph supports the cross-AZ mode.
               The default value is false.
               If the value is true, the system will create the ECSs in the graph in two AZs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_rbac: Whether to enable granular permission control for the created graph.  
               The default value is false. If this parameter is set to true, no user has the permission to access the graph.
               To access the graph, you need to call the granular permission control API of the service plane
               to set the required permissions.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input['GraphEncryptionArgs'] encryption: The configuration of data encryption.
               
               Changing this parameter will create a new resource.
               
               The Encryption structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] graph_size_type_index: Graph size type index.  
               Value options are as follows:
               + **0**: indicates 10 thousand edges.
               + **1**: indicates 1 million edges.
               + **2**: indicates 10 million edges.
               + **3**: indicates 100 million edges.
               + **4**: indicates 1 billion edges.
               + **5**: indicates 10 billion edges.
               + **6**: indicates the database edition.
               + **401**: indicates 1 billion enhanced edges.
        :param pulumi.Input[_builtins.bool] keep_backup: Whether to retain the backups of a graph after it is deleted.
               
               <a name="GesGraph_PublicIp"></a>
               The `PublicIp` block supports:
        :param pulumi.Input['GraphLtsOperationTraceArgs'] lts_operation_trace: The configuration of audit logs.
               
               Changing this parameter will create a new resource.
               
               The LtsOperationTrace structure is documented below.
        :param pulumi.Input[_builtins.str] name: The graph name.  
               The name must start with a letter and contains 4 to 50 characters consisting of letters,
               digits, hyphens (-), and underscores (_). It cannot contain special characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] private_ip: Floating IP address of a graph instance.
        :param pulumi.Input[_builtins.str] product_type: Graph product type.  
               Value options are as follows:
               + **InMemory**: memory edition.
               + **Persistence**: database edition.
               
               If **graph_size_type_index** is 6, the value must be **Persistence**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input['GraphPublicIpArgs'] public_ip: The information about public IP.  
               If the parameter is not specified, public connection is not used by default.
               
               Changing this parameter will create a new resource.
               
               The PublicIp structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] replication: Number of replicas.
        :param pulumi.Input[_builtins.str] security_group_id: The security group ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Status of a graph.  
               The value can be one of the following:
               + **100**: Indicates that a graph is being prepared.
               + **200**: indicates that a graph is running.
               + **201**: indicates that a graph is upgrading.
               + **202**: indicates that a graph is being imported.
               + **203**: indicates that a graph is being rolled back.
               + **204**: indicates that a graph is being exported.
               + **205**: indicates that a graph is being cleared.
               + **206**: indicates that the system is preparing for resize.
               + **207**: indicates that the resize is in progress.
               + **208**: Indicates that the resize is being rolled back.
               + **210**: Preparing for expansion
               + **211**: Expanding
               + **300**: indicates that a graph is faulty.
               + **303**: indicates that a graph fails to be created.
               + **400**: indicates that a graph is deleted.
               + **800**: indicates that a graph is frozen.
               + **900**: indicates that a graph is stopped.
               + **901**: indicates that a graph is being stopped.
               + **920**: indicates that a graph is being started.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The key/value pairs to associate with the graph.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] traffic_ip_lists: Physical addresses of a graph instance for access from private networks.  
               To prevent service interruption caused by floating IP address switchover,
               poll the physical IP addresses to access the graph instance.
        :param pulumi.Input['GraphVertexIdTypeArgs'] vertex_id_type: The configuration of vertex ID.
               This parameter is mandatory only for database edition graphs.
               
               Changing this parameter will create a new resource.
               
               The vertexIdType structure is documented below.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID.
               
               Changing this parameter will create a new resource.
        """
        if az_code is not None:
            pulumi.set(__self__, "az_code", az_code)
        if cpu_arch is not None:
            pulumi.set(__self__, "cpu_arch", cpu_arch)
        if crypt_algorithm is not None:
            pulumi.set(__self__, "crypt_algorithm", crypt_algorithm)
        if enable_full_text_index is not None:
            pulumi.set(__self__, "enable_full_text_index", enable_full_text_index)
        if enable_https is not None:
            pulumi.set(__self__, "enable_https", enable_https)
        if enable_hyg is not None:
            pulumi.set(__self__, "enable_hyg", enable_hyg)
        if enable_multi_az is not None:
            pulumi.set(__self__, "enable_multi_az", enable_multi_az)
        if enable_rbac is not None:
            pulumi.set(__self__, "enable_rbac", enable_rbac)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if graph_size_type_index is not None:
            pulumi.set(__self__, "graph_size_type_index", graph_size_type_index)
        if keep_backup is not None:
            pulumi.set(__self__, "keep_backup", keep_backup)
        if lts_operation_trace is not None:
            pulumi.set(__self__, "lts_operation_trace", lts_operation_trace)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if product_type is not None:
            pulumi.set(__self__, "product_type", product_type)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if replication is not None:
            pulumi.set(__self__, "replication", replication)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if traffic_ip_lists is not None:
            pulumi.set(__self__, "traffic_ip_lists", traffic_ip_lists)
        if vertex_id_type is not None:
            pulumi.set(__self__, "vertex_id_type", vertex_id_type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="azCode")
    def az_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        AZ code
        """
        return pulumi.get(self, "az_code")

    @az_code.setter
    def az_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "az_code", value)

    @_builtins.property
    @pulumi.getter(name="cpuArch")
    def cpu_arch(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Graph instance's CPU architecture type.  
        The value can be **x86_64** or **aarch64**. The default value is **x86_64**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cpu_arch")

    @cpu_arch.setter
    def cpu_arch(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cpu_arch", value)

    @_builtins.property
    @pulumi.getter(name="cryptAlgorithm")
    def crypt_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Graph instance cryptography algorithm.  
        Value options are as follows:
        + **generalCipher**: Chinese cryptographic algorithm.
        + **SMcompatible**: Commercial cryptography algorithm (compatible with international ones).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "crypt_algorithm")

    @crypt_algorithm.setter
    def crypt_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crypt_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="enableFullTextIndex")
    def enable_full_text_index(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable full-text index control for the created graph.
        The default value is false. If this parameter is set to true, full-text indexes are available
        for 1-billion-edge-pro graphs, and a Cloud Search Service (CSS) cluster will
        be created when you create a graph.

        > If you enable full-text indexes: If the CSS has been deployed, the system automatically creates a
        CSS cluster during the creation of the graph instance, which will take a long time.
        If the CSS is not deployed, the graph creation will fail.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_full_text_index")

    @enable_full_text_index.setter
    def enable_full_text_index(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_full_text_index", value)

    @_builtins.property
    @pulumi.getter(name="enableHttps")
    def enable_https(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable the security mode. This mode may damage GES performance greatly.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_https")

    @enable_https.setter
    def enable_https(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_https", value)

    @_builtins.property
    @pulumi.getter(name="enableHyg")
    def enable_hyg(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable HyG for the graph.
        This parameter is available for database edition graphs only.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_hyg")

    @enable_hyg.setter
    def enable_hyg(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_hyg", value)

    @_builtins.property
    @pulumi.getter(name="enableMultiAz")
    def enable_multi_az(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the created graph supports the cross-AZ mode.
        The default value is false.
        If the value is true, the system will create the ECSs in the graph in two AZs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_multi_az")

    @enable_multi_az.setter
    def enable_multi_az(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_multi_az", value)

    @_builtins.property
    @pulumi.getter(name="enableRbac")
    def enable_rbac(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable granular permission control for the created graph.  
        The default value is false. If this parameter is set to true, no user has the permission to access the graph.
        To access the graph, you need to call the granular permission control API of the service plane
        to set the required permissions.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_rbac")

    @enable_rbac.setter
    def enable_rbac(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_rbac", value)

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['GraphEncryptionArgs']]:
        """
        The configuration of data encryption.

        Changing this parameter will create a new resource.

        The Encryption structure is documented below.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['GraphEncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The enterprise project ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="graphSizeTypeIndex")
    def graph_size_type_index(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Graph size type index.  
        Value options are as follows:
        + **0**: indicates 10 thousand edges.
        + **1**: indicates 1 million edges.
        + **2**: indicates 10 million edges.
        + **3**: indicates 100 million edges.
        + **4**: indicates 1 billion edges.
        + **5**: indicates 10 billion edges.
        + **6**: indicates the database edition.
        + **401**: indicates 1 billion enhanced edges.
        """
        return pulumi.get(self, "graph_size_type_index")

    @graph_size_type_index.setter
    def graph_size_type_index(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "graph_size_type_index", value)

    @_builtins.property
    @pulumi.getter(name="keepBackup")
    def keep_backup(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to retain the backups of a graph after it is deleted.

        <a name="GesGraph_PublicIp"></a>
        The `PublicIp` block supports:
        """
        return pulumi.get(self, "keep_backup")

    @keep_backup.setter
    def keep_backup(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keep_backup", value)

    @_builtins.property
    @pulumi.getter(name="ltsOperationTrace")
    def lts_operation_trace(self) -> Optional[pulumi.Input['GraphLtsOperationTraceArgs']]:
        """
        The configuration of audit logs.

        Changing this parameter will create a new resource.

        The LtsOperationTrace structure is documented below.
        """
        return pulumi.get(self, "lts_operation_trace")

    @lts_operation_trace.setter
    def lts_operation_trace(self, value: Optional[pulumi.Input['GraphLtsOperationTraceArgs']]):
        pulumi.set(self, "lts_operation_trace", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The graph name.  
        The name must start with a letter and contains 4 to 50 characters consisting of letters,
        digits, hyphens (-), and underscores (_). It cannot contain special characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Floating IP address of a graph instance.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Graph product type.  
        Value options are as follows:
        + **InMemory**: memory edition.
        + **Persistence**: database edition.

        If **graph_size_type_index** is 6, the value must be **Persistence**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_type")

    @product_type.setter
    def product_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "product_type", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input['GraphPublicIpArgs']]:
        """
        The information about public IP.  
        If the parameter is not specified, public connection is not used by default.

        Changing this parameter will create a new resource.

        The PublicIp structure is documented below.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input['GraphPublicIpArgs']]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def replication(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of replicas.
        """
        return pulumi.get(self, "replication")

    @replication.setter
    def replication(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "replication", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The security group ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of a graph.  
        The value can be one of the following:
        + **100**: Indicates that a graph is being prepared.
        + **200**: indicates that a graph is running.
        + **201**: indicates that a graph is upgrading.
        + **202**: indicates that a graph is being imported.
        + **203**: indicates that a graph is being rolled back.
        + **204**: indicates that a graph is being exported.
        + **205**: indicates that a graph is being cleared.
        + **206**: indicates that the system is preparing for resize.
        + **207**: indicates that the resize is in progress.
        + **208**: Indicates that the resize is being rolled back.
        + **210**: Preparing for expansion
        + **211**: Expanding
        + **300**: indicates that a graph is faulty.
        + **303**: indicates that a graph fails to be created.
        + **400**: indicates that a graph is deleted.
        + **800**: indicates that a graph is frozen.
        + **900**: indicates that a graph is stopped.
        + **901**: indicates that a graph is being stopped.
        + **920**: indicates that a graph is being started.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subnet ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The key/value pairs to associate with the graph.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="trafficIpLists")
    def traffic_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Physical addresses of a graph instance for access from private networks.  
        To prevent service interruption caused by floating IP address switchover,
        poll the physical IP addresses to access the graph instance.
        """
        return pulumi.get(self, "traffic_ip_lists")

    @traffic_ip_lists.setter
    def traffic_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "traffic_ip_lists", value)

    @_builtins.property
    @pulumi.getter(name="vertexIdType")
    def vertex_id_type(self) -> Optional[pulumi.Input['GraphVertexIdTypeArgs']]:
        """
        The configuration of vertex ID.
        This parameter is mandatory only for database edition graphs.

        Changing this parameter will create a new resource.

        The vertexIdType structure is documented below.
        """
        return pulumi.get(self, "vertex_id_type")

    @vertex_id_type.setter
    def vertex_id_type(self, value: Optional[pulumi.Input['GraphVertexIdTypeArgs']]):
        pulumi.set(self, "vertex_id_type", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:ges/graph:Graph")
class Graph(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_arch: Optional[pulumi.Input[_builtins.str]] = None,
                 crypt_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_full_text_index: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_https: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_hyg: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_multi_az: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_rbac: Optional[pulumi.Input[_builtins.bool]] = None,
                 encryption: Optional[pulumi.Input[Union['GraphEncryptionArgs', 'GraphEncryptionArgsDict']]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 graph_size_type_index: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_backup: Optional[pulumi.Input[_builtins.bool]] = None,
                 lts_operation_trace: Optional[pulumi.Input[Union['GraphLtsOperationTraceArgs', 'GraphLtsOperationTraceArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 product_type: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[Union['GraphPublicIpArgs', 'GraphPublicIpArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replication: Optional[pulumi.Input[_builtins.int]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vertex_id_type: Optional[pulumi.Input[Union['GraphVertexIdTypeArgs', 'GraphVertexIdTypeArgsDict']]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GES graph resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        secgroup_id = config.require_object("secgroupId")
        test = huaweicloud.ges.Graph("test",
            name="demo",
            graph_size_type_index="1",
            cpu_arch="x86_64",
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            security_group_id=secgroup_id,
            crypt_algorithm="generalCipher",
            enable_https=False,
            tags={
                "key": "val",
                "foo": "bar",
            })
        ```

        ## Import

        The ges graph can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ges/graph:Graph test a0be840b-b223-48da-8b34-b8fee1b2e0ca
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cpu_arch: Graph instance's CPU architecture type.  
               The value can be **x86_64** or **aarch64**. The default value is **x86_64**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] crypt_algorithm: Graph instance cryptography algorithm.  
               Value options are as follows:
               + **generalCipher**: Chinese cryptographic algorithm.
               + **SMcompatible**: Commercial cryptography algorithm (compatible with international ones).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_full_text_index: Whether to enable full-text index control for the created graph.
               The default value is false. If this parameter is set to true, full-text indexes are available
               for 1-billion-edge-pro graphs, and a Cloud Search Service (CSS) cluster will
               be created when you create a graph.
               
               > If you enable full-text indexes: If the CSS has been deployed, the system automatically creates a
               CSS cluster during the creation of the graph instance, which will take a long time.
               If the CSS is not deployed, the graph creation will fail.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_https: Whether to enable the security mode. This mode may damage GES performance greatly.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_hyg: Whether to enable HyG for the graph.
               This parameter is available for database edition graphs only.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_multi_az: Whether the created graph supports the cross-AZ mode.
               The default value is false.
               If the value is true, the system will create the ECSs in the graph in two AZs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_rbac: Whether to enable granular permission control for the created graph.  
               The default value is false. If this parameter is set to true, no user has the permission to access the graph.
               To access the graph, you need to call the granular permission control API of the service plane
               to set the required permissions.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['GraphEncryptionArgs', 'GraphEncryptionArgsDict']] encryption: The configuration of data encryption.
               
               Changing this parameter will create a new resource.
               
               The Encryption structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] graph_size_type_index: Graph size type index.  
               Value options are as follows:
               + **0**: indicates 10 thousand edges.
               + **1**: indicates 1 million edges.
               + **2**: indicates 10 million edges.
               + **3**: indicates 100 million edges.
               + **4**: indicates 1 billion edges.
               + **5**: indicates 10 billion edges.
               + **6**: indicates the database edition.
               + **401**: indicates 1 billion enhanced edges.
        :param pulumi.Input[_builtins.bool] keep_backup: Whether to retain the backups of a graph after it is deleted.
               
               <a name="GesGraph_PublicIp"></a>
               The `PublicIp` block supports:
        :param pulumi.Input[Union['GraphLtsOperationTraceArgs', 'GraphLtsOperationTraceArgsDict']] lts_operation_trace: The configuration of audit logs.
               
               Changing this parameter will create a new resource.
               
               The LtsOperationTrace structure is documented below.
        :param pulumi.Input[_builtins.str] name: The graph name.  
               The name must start with a letter and contains 4 to 50 characters consisting of letters,
               digits, hyphens (-), and underscores (_). It cannot contain special characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] product_type: Graph product type.  
               Value options are as follows:
               + **InMemory**: memory edition.
               + **Persistence**: database edition.
               
               If **graph_size_type_index** is 6, the value must be **Persistence**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['GraphPublicIpArgs', 'GraphPublicIpArgsDict']] public_ip: The information about public IP.  
               If the parameter is not specified, public connection is not used by default.
               
               Changing this parameter will create a new resource.
               
               The PublicIp structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] replication: Number of replicas.
        :param pulumi.Input[_builtins.str] security_group_id: The security group ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The key/value pairs to associate with the graph.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['GraphVertexIdTypeArgs', 'GraphVertexIdTypeArgsDict']] vertex_id_type: The configuration of vertex ID.
               This parameter is mandatory only for database edition graphs.
               
               Changing this parameter will create a new resource.
               
               The vertexIdType structure is documented below.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GraphArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GES graph resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        secgroup_id = config.require_object("secgroupId")
        test = huaweicloud.ges.Graph("test",
            name="demo",
            graph_size_type_index="1",
            cpu_arch="x86_64",
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            security_group_id=secgroup_id,
            crypt_algorithm="generalCipher",
            enable_https=False,
            tags={
                "key": "val",
                "foo": "bar",
            })
        ```

        ## Import

        The ges graph can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ges/graph:Graph test a0be840b-b223-48da-8b34-b8fee1b2e0ca
        ```

        :param str resource_name: The name of the resource.
        :param GraphArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GraphArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_arch: Optional[pulumi.Input[_builtins.str]] = None,
                 crypt_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_full_text_index: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_https: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_hyg: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_multi_az: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_rbac: Optional[pulumi.Input[_builtins.bool]] = None,
                 encryption: Optional[pulumi.Input[Union['GraphEncryptionArgs', 'GraphEncryptionArgsDict']]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 graph_size_type_index: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_backup: Optional[pulumi.Input[_builtins.bool]] = None,
                 lts_operation_trace: Optional[pulumi.Input[Union['GraphLtsOperationTraceArgs', 'GraphLtsOperationTraceArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 product_type: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[Union['GraphPublicIpArgs', 'GraphPublicIpArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replication: Optional[pulumi.Input[_builtins.int]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vertex_id_type: Optional[pulumi.Input[Union['GraphVertexIdTypeArgs', 'GraphVertexIdTypeArgsDict']]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GraphArgs.__new__(GraphArgs)

            __props__.__dict__["cpu_arch"] = cpu_arch
            if crypt_algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'crypt_algorithm'")
            __props__.__dict__["crypt_algorithm"] = crypt_algorithm
            __props__.__dict__["enable_full_text_index"] = enable_full_text_index
            if enable_https is None and not opts.urn:
                raise TypeError("Missing required property 'enable_https'")
            __props__.__dict__["enable_https"] = enable_https
            __props__.__dict__["enable_hyg"] = enable_hyg
            __props__.__dict__["enable_multi_az"] = enable_multi_az
            __props__.__dict__["enable_rbac"] = enable_rbac
            __props__.__dict__["encryption"] = encryption
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if graph_size_type_index is None and not opts.urn:
                raise TypeError("Missing required property 'graph_size_type_index'")
            __props__.__dict__["graph_size_type_index"] = graph_size_type_index
            __props__.__dict__["keep_backup"] = keep_backup
            __props__.__dict__["lts_operation_trace"] = lts_operation_trace
            __props__.__dict__["name"] = name
            __props__.__dict__["product_type"] = product_type
            __props__.__dict__["public_ip"] = public_ip
            __props__.__dict__["region"] = region
            __props__.__dict__["replication"] = replication
            if security_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'security_group_id'")
            __props__.__dict__["security_group_id"] = security_group_id
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["vertex_id_type"] = vertex_id_type
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["az_code"] = None
            __props__.__dict__["private_ip"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["traffic_ip_lists"] = None
        super(Graph, __self__).__init__(
            'huaweicloud:ges/graph:Graph',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            az_code: Optional[pulumi.Input[_builtins.str]] = None,
            cpu_arch: Optional[pulumi.Input[_builtins.str]] = None,
            crypt_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            enable_full_text_index: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_https: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_hyg: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_multi_az: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_rbac: Optional[pulumi.Input[_builtins.bool]] = None,
            encryption: Optional[pulumi.Input[Union['GraphEncryptionArgs', 'GraphEncryptionArgsDict']]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            graph_size_type_index: Optional[pulumi.Input[_builtins.str]] = None,
            keep_backup: Optional[pulumi.Input[_builtins.bool]] = None,
            lts_operation_trace: Optional[pulumi.Input[Union['GraphLtsOperationTraceArgs', 'GraphLtsOperationTraceArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            private_ip: Optional[pulumi.Input[_builtins.str]] = None,
            product_type: Optional[pulumi.Input[_builtins.str]] = None,
            public_ip: Optional[pulumi.Input[Union['GraphPublicIpArgs', 'GraphPublicIpArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            replication: Optional[pulumi.Input[_builtins.int]] = None,
            security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            traffic_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            vertex_id_type: Optional[pulumi.Input[Union['GraphVertexIdTypeArgs', 'GraphVertexIdTypeArgsDict']]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Graph':
        """
        Get an existing Graph resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] az_code: AZ code
        :param pulumi.Input[_builtins.str] cpu_arch: Graph instance's CPU architecture type.  
               The value can be **x86_64** or **aarch64**. The default value is **x86_64**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] crypt_algorithm: Graph instance cryptography algorithm.  
               Value options are as follows:
               + **generalCipher**: Chinese cryptographic algorithm.
               + **SMcompatible**: Commercial cryptography algorithm (compatible with international ones).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_full_text_index: Whether to enable full-text index control for the created graph.
               The default value is false. If this parameter is set to true, full-text indexes are available
               for 1-billion-edge-pro graphs, and a Cloud Search Service (CSS) cluster will
               be created when you create a graph.
               
               > If you enable full-text indexes: If the CSS has been deployed, the system automatically creates a
               CSS cluster during the creation of the graph instance, which will take a long time.
               If the CSS is not deployed, the graph creation will fail.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_https: Whether to enable the security mode. This mode may damage GES performance greatly.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_hyg: Whether to enable HyG for the graph.
               This parameter is available for database edition graphs only.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_multi_az: Whether the created graph supports the cross-AZ mode.
               The default value is false.
               If the value is true, the system will create the ECSs in the graph in two AZs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] enable_rbac: Whether to enable granular permission control for the created graph.  
               The default value is false. If this parameter is set to true, no user has the permission to access the graph.
               To access the graph, you need to call the granular permission control API of the service plane
               to set the required permissions.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['GraphEncryptionArgs', 'GraphEncryptionArgsDict']] encryption: The configuration of data encryption.
               
               Changing this parameter will create a new resource.
               
               The Encryption structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] graph_size_type_index: Graph size type index.  
               Value options are as follows:
               + **0**: indicates 10 thousand edges.
               + **1**: indicates 1 million edges.
               + **2**: indicates 10 million edges.
               + **3**: indicates 100 million edges.
               + **4**: indicates 1 billion edges.
               + **5**: indicates 10 billion edges.
               + **6**: indicates the database edition.
               + **401**: indicates 1 billion enhanced edges.
        :param pulumi.Input[_builtins.bool] keep_backup: Whether to retain the backups of a graph after it is deleted.
               
               <a name="GesGraph_PublicIp"></a>
               The `PublicIp` block supports:
        :param pulumi.Input[Union['GraphLtsOperationTraceArgs', 'GraphLtsOperationTraceArgsDict']] lts_operation_trace: The configuration of audit logs.
               
               Changing this parameter will create a new resource.
               
               The LtsOperationTrace structure is documented below.
        :param pulumi.Input[_builtins.str] name: The graph name.  
               The name must start with a letter and contains 4 to 50 characters consisting of letters,
               digits, hyphens (-), and underscores (_). It cannot contain special characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] private_ip: Floating IP address of a graph instance.
        :param pulumi.Input[_builtins.str] product_type: Graph product type.  
               Value options are as follows:
               + **InMemory**: memory edition.
               + **Persistence**: database edition.
               
               If **graph_size_type_index** is 6, the value must be **Persistence**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['GraphPublicIpArgs', 'GraphPublicIpArgsDict']] public_ip: The information about public IP.  
               If the parameter is not specified, public connection is not used by default.
               
               Changing this parameter will create a new resource.
               
               The PublicIp structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] replication: Number of replicas.
        :param pulumi.Input[_builtins.str] security_group_id: The security group ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Status of a graph.  
               The value can be one of the following:
               + **100**: Indicates that a graph is being prepared.
               + **200**: indicates that a graph is running.
               + **201**: indicates that a graph is upgrading.
               + **202**: indicates that a graph is being imported.
               + **203**: indicates that a graph is being rolled back.
               + **204**: indicates that a graph is being exported.
               + **205**: indicates that a graph is being cleared.
               + **206**: indicates that the system is preparing for resize.
               + **207**: indicates that the resize is in progress.
               + **208**: Indicates that the resize is being rolled back.
               + **210**: Preparing for expansion
               + **211**: Expanding
               + **300**: indicates that a graph is faulty.
               + **303**: indicates that a graph fails to be created.
               + **400**: indicates that a graph is deleted.
               + **800**: indicates that a graph is frozen.
               + **900**: indicates that a graph is stopped.
               + **901**: indicates that a graph is being stopped.
               + **920**: indicates that a graph is being started.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The key/value pairs to associate with the graph.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] traffic_ip_lists: Physical addresses of a graph instance for access from private networks.  
               To prevent service interruption caused by floating IP address switchover,
               poll the physical IP addresses to access the graph instance.
        :param pulumi.Input[Union['GraphVertexIdTypeArgs', 'GraphVertexIdTypeArgsDict']] vertex_id_type: The configuration of vertex ID.
               This parameter is mandatory only for database edition graphs.
               
               Changing this parameter will create a new resource.
               
               The vertexIdType structure is documented below.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GraphState.__new__(_GraphState)

        __props__.__dict__["az_code"] = az_code
        __props__.__dict__["cpu_arch"] = cpu_arch
        __props__.__dict__["crypt_algorithm"] = crypt_algorithm
        __props__.__dict__["enable_full_text_index"] = enable_full_text_index
        __props__.__dict__["enable_https"] = enable_https
        __props__.__dict__["enable_hyg"] = enable_hyg
        __props__.__dict__["enable_multi_az"] = enable_multi_az
        __props__.__dict__["enable_rbac"] = enable_rbac
        __props__.__dict__["encryption"] = encryption
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["graph_size_type_index"] = graph_size_type_index
        __props__.__dict__["keep_backup"] = keep_backup
        __props__.__dict__["lts_operation_trace"] = lts_operation_trace
        __props__.__dict__["name"] = name
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["product_type"] = product_type
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["region"] = region
        __props__.__dict__["replication"] = replication
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["traffic_ip_lists"] = traffic_ip_lists
        __props__.__dict__["vertex_id_type"] = vertex_id_type
        __props__.__dict__["vpc_id"] = vpc_id
        return Graph(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="azCode")
    def az_code(self) -> pulumi.Output[_builtins.str]:
        """
        AZ code
        """
        return pulumi.get(self, "az_code")

    @_builtins.property
    @pulumi.getter(name="cpuArch")
    def cpu_arch(self) -> pulumi.Output[_builtins.str]:
        """
        Graph instance's CPU architecture type.  
        The value can be **x86_64** or **aarch64**. The default value is **x86_64**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cpu_arch")

    @_builtins.property
    @pulumi.getter(name="cryptAlgorithm")
    def crypt_algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        Graph instance cryptography algorithm.  
        Value options are as follows:
        + **generalCipher**: Chinese cryptographic algorithm.
        + **SMcompatible**: Commercial cryptography algorithm (compatible with international ones).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "crypt_algorithm")

    @_builtins.property
    @pulumi.getter(name="enableFullTextIndex")
    def enable_full_text_index(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to enable full-text index control for the created graph.
        The default value is false. If this parameter is set to true, full-text indexes are available
        for 1-billion-edge-pro graphs, and a Cloud Search Service (CSS) cluster will
        be created when you create a graph.

        > If you enable full-text indexes: If the CSS has been deployed, the system automatically creates a
        CSS cluster during the creation of the graph instance, which will take a long time.
        If the CSS is not deployed, the graph creation will fail.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_full_text_index")

    @_builtins.property
    @pulumi.getter(name="enableHttps")
    def enable_https(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to enable the security mode. This mode may damage GES performance greatly.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_https")

    @_builtins.property
    @pulumi.getter(name="enableHyg")
    def enable_hyg(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to enable HyG for the graph.
        This parameter is available for database edition graphs only.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_hyg")

    @_builtins.property
    @pulumi.getter(name="enableMultiAz")
    def enable_multi_az(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the created graph supports the cross-AZ mode.
        The default value is false.
        If the value is true, the system will create the ECSs in the graph in two AZs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_multi_az")

    @_builtins.property
    @pulumi.getter(name="enableRbac")
    def enable_rbac(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to enable granular permission control for the created graph.  
        The default value is false. If this parameter is set to true, no user has the permission to access the graph.
        To access the graph, you need to call the granular permission control API of the service plane
        to set the required permissions.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_rbac")

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> pulumi.Output['outputs.GraphEncryption']:
        """
        The configuration of data encryption.

        Changing this parameter will create a new resource.

        The Encryption structure is documented below.
        """
        return pulumi.get(self, "encryption")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The enterprise project ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="graphSizeTypeIndex")
    def graph_size_type_index(self) -> pulumi.Output[_builtins.str]:
        """
        Graph size type index.  
        Value options are as follows:
        + **0**: indicates 10 thousand edges.
        + **1**: indicates 1 million edges.
        + **2**: indicates 10 million edges.
        + **3**: indicates 100 million edges.
        + **4**: indicates 1 billion edges.
        + **5**: indicates 10 billion edges.
        + **6**: indicates the database edition.
        + **401**: indicates 1 billion enhanced edges.
        """
        return pulumi.get(self, "graph_size_type_index")

    @_builtins.property
    @pulumi.getter(name="keepBackup")
    def keep_backup(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to retain the backups of a graph after it is deleted.

        <a name="GesGraph_PublicIp"></a>
        The `PublicIp` block supports:
        """
        return pulumi.get(self, "keep_backup")

    @_builtins.property
    @pulumi.getter(name="ltsOperationTrace")
    def lts_operation_trace(self) -> pulumi.Output['outputs.GraphLtsOperationTrace']:
        """
        The configuration of audit logs.

        Changing this parameter will create a new resource.

        The LtsOperationTrace structure is documented below.
        """
        return pulumi.get(self, "lts_operation_trace")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The graph name.  
        The name must start with a letter and contains 4 to 50 characters consisting of letters,
        digits, hyphens (-), and underscores (_). It cannot contain special characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Floating IP address of a graph instance.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> pulumi.Output[_builtins.str]:
        """
        Graph product type.  
        Value options are as follows:
        + **InMemory**: memory edition.
        + **Persistence**: database edition.

        If **graph_size_type_index** is 6, the value must be **Persistence**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_type")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output['outputs.GraphPublicIp']:
        """
        The information about public IP.  
        If the parameter is not specified, public connection is not used by default.

        Changing this parameter will create a new resource.

        The PublicIp structure is documented below.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def replication(self) -> pulumi.Output[_builtins.int]:
        """
        Number of replicas.
        """
        return pulumi.get(self, "replication")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The security group ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of a graph.  
        The value can be one of the following:
        + **100**: Indicates that a graph is being prepared.
        + **200**: indicates that a graph is running.
        + **201**: indicates that a graph is upgrading.
        + **202**: indicates that a graph is being imported.
        + **203**: indicates that a graph is being rolled back.
        + **204**: indicates that a graph is being exported.
        + **205**: indicates that a graph is being cleared.
        + **206**: indicates that the system is preparing for resize.
        + **207**: indicates that the resize is in progress.
        + **208**: Indicates that the resize is being rolled back.
        + **210**: Preparing for expansion
        + **211**: Expanding
        + **300**: indicates that a graph is faulty.
        + **303**: indicates that a graph fails to be created.
        + **400**: indicates that a graph is deleted.
        + **800**: indicates that a graph is frozen.
        + **900**: indicates that a graph is stopped.
        + **901**: indicates that a graph is being stopped.
        + **920**: indicates that a graph is being started.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        The subnet ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The key/value pairs to associate with the graph.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="trafficIpLists")
    def traffic_ip_lists(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Physical addresses of a graph instance for access from private networks.  
        To prevent service interruption caused by floating IP address switchover,
        poll the physical IP addresses to access the graph instance.
        """
        return pulumi.get(self, "traffic_ip_lists")

    @_builtins.property
    @pulumi.getter(name="vertexIdType")
    def vertex_id_type(self) -> pulumi.Output['outputs.GraphVertexIdType']:
        """
        The configuration of vertex ID.
        This parameter is mandatory only for database edition graphs.

        Changing this parameter will create a new resource.

        The vertexIdType structure is documented below.
        """
        return pulumi.get(self, "vertex_id_type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        The VPC ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

