# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['BackupArgs', 'Backup']

@pulumi.input_type
class BackupArgs:
    def __init__(__self__, *,
                 graph_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Backup resource.
        :param pulumi.Input[_builtins.str] graph_id: The ID of the graph that created the backup.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "graph_id", graph_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="graphId")
    def graph_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the graph that created the backup.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "graph_id")

    @graph_id.setter
    def graph_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "graph_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _BackupState:
    def __init__(__self__, *,
                 backup_method: Optional[pulumi.Input[_builtins.str]] = None,
                 duration: Optional[pulumi.Input[_builtins.int]] = None,
                 encrypted: Optional[pulumi.Input[_builtins.bool]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 graph_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Backup resources.
        :param pulumi.Input[_builtins.str] backup_method: Backup method. The value can be **auto** or **manual**.
        :param pulumi.Input[_builtins.int] duration: Backup duration (seconds).
        :param pulumi.Input[_builtins.bool] encrypted: Whether the data is encrypted.
        :param pulumi.Input[_builtins.str] end_time: End time of a backup job.
        :param pulumi.Input[_builtins.str] graph_id: The ID of the graph that created the backup.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The backup name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] size: Backup file size (MB).
        :param pulumi.Input[_builtins.str] start_time: Start time of a backup job.
        :param pulumi.Input[_builtins.str] status: Backup status.  
               The value can be one of the following:
               + **backing_up**: indicates that a graph is being backed up.
               + **success**: indicates that a graph is successfully backed up.
               + **failed**: indicates that a graph fails to be backed up.
        """
        if backup_method is not None:
            pulumi.set(__self__, "backup_method", backup_method)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if encrypted is not None:
            pulumi.set(__self__, "encrypted", encrypted)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if graph_id is not None:
            pulumi.set(__self__, "graph_id", graph_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="backupMethod")
    def backup_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Backup method. The value can be **auto** or **manual**.
        """
        return pulumi.get(self, "backup_method")

    @backup_method.setter
    def backup_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_method", value)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Backup duration (seconds).
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter
    def encrypted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the data is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @encrypted.setter
    def encrypted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "encrypted", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        End time of a backup job.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="graphId")
    def graph_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the graph that created the backup.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "graph_id")

    @graph_id.setter
    def graph_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "graph_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The backup name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Backup file size (MB).
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Start time of a backup job.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Backup status.  
        The value can be one of the following:
        + **backing_up**: indicates that a graph is being backed up.
        + **success**: indicates that a graph is successfully backed up.
        + **failed**: indicates that a graph fails to be backed up.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:ges/backup:Backup")
class Backup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 graph_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GES backup resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        graph_id = config.require_object("graphId")
        test = huaweicloud.ges.Backup("test", graph_id=graph_id)
        ```

        ## Import

        The GES backup can be imported using

        `graph_id`, `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ges/backup:Backup test <graph_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] graph_id: The ID of the graph that created the backup.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GES backup resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        graph_id = config.require_object("graphId")
        test = huaweicloud.ges.Backup("test", graph_id=graph_id)
        ```

        ## Import

        The GES backup can be imported using

        `graph_id`, `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ges/backup:Backup test <graph_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param BackupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 graph_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupArgs.__new__(BackupArgs)

            if graph_id is None and not opts.urn:
                raise TypeError("Missing required property 'graph_id'")
            __props__.__dict__["graph_id"] = graph_id
            __props__.__dict__["region"] = region
            __props__.__dict__["backup_method"] = None
            __props__.__dict__["duration"] = None
            __props__.__dict__["encrypted"] = None
            __props__.__dict__["end_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["start_time"] = None
            __props__.__dict__["status"] = None
        super(Backup, __self__).__init__(
            'huaweicloud:ges/backup:Backup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_method: Optional[pulumi.Input[_builtins.str]] = None,
            duration: Optional[pulumi.Input[_builtins.int]] = None,
            encrypted: Optional[pulumi.Input[_builtins.bool]] = None,
            end_time: Optional[pulumi.Input[_builtins.str]] = None,
            graph_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.int]] = None,
            start_time: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'Backup':
        """
        Get an existing Backup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_method: Backup method. The value can be **auto** or **manual**.
        :param pulumi.Input[_builtins.int] duration: Backup duration (seconds).
        :param pulumi.Input[_builtins.bool] encrypted: Whether the data is encrypted.
        :param pulumi.Input[_builtins.str] end_time: End time of a backup job.
        :param pulumi.Input[_builtins.str] graph_id: The ID of the graph that created the backup.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The backup name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] size: Backup file size (MB).
        :param pulumi.Input[_builtins.str] start_time: Start time of a backup job.
        :param pulumi.Input[_builtins.str] status: Backup status.  
               The value can be one of the following:
               + **backing_up**: indicates that a graph is being backed up.
               + **success**: indicates that a graph is successfully backed up.
               + **failed**: indicates that a graph fails to be backed up.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupState.__new__(_BackupState)

        __props__.__dict__["backup_method"] = backup_method
        __props__.__dict__["duration"] = duration
        __props__.__dict__["encrypted"] = encrypted
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["graph_id"] = graph_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["size"] = size
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["status"] = status
        return Backup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupMethod")
    def backup_method(self) -> pulumi.Output[_builtins.str]:
        """
        Backup method. The value can be **auto** or **manual**.
        """
        return pulumi.get(self, "backup_method")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> pulumi.Output[_builtins.int]:
        """
        Backup duration (seconds).
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter
    def encrypted(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the data is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[_builtins.str]:
        """
        End time of a backup job.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="graphId")
    def graph_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the graph that created the backup.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "graph_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The backup name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.int]:
        """
        Backup file size (MB).
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[_builtins.str]:
        """
        Start time of a backup job.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Backup status.  
        The value can be one of the following:
        + **backing_up**: indicates that a graph is being backed up.
        + **success**: indicates that a graph is successfully backed up.
        + **failed**: indicates that a graph fails to be backed up.
        """
        return pulumi.get(self, "status")

