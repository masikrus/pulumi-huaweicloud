# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GraphEncryption',
    'GraphLtsOperationTrace',
    'GraphPublicIp',
    'GraphVertexIdType',
    'MetadataEncryption',
    'MetadataGesMetadata',
    'MetadataGesMetadataLabel',
]

@pulumi.output_type
class GraphEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "masterKeyId":
            suggest = "master_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GraphEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GraphEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GraphEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: Optional[_builtins.bool] = None,
                 master_key_id: Optional[_builtins.str] = None):
        """
        :param _builtins.bool enable: Whether to enable data encryption. The value can be true or false.
               The default value is false.
        :param _builtins.str master_key_id: ID of the customer master key created by DEW in the project corresponding
               to the graph creation.
               
               <a name="GesGraph_LtsOperationTrace"></a>
               The `LtsOperationTrace` block supports:
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if master_key_id is not None:
            pulumi.set(__self__, "master_key_id", master_key_id)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Whether to enable data encryption. The value can be true or false.
        The default value is false.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="masterKeyId")
    def master_key_id(self) -> Optional[_builtins.str]:
        """
        ID of the customer master key created by DEW in the project corresponding
        to the graph creation.

        <a name="GesGraph_LtsOperationTrace"></a>
        The `LtsOperationTrace` block supports:
        """
        return pulumi.get(self, "master_key_id")


@pulumi.output_type
class GraphLtsOperationTrace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditLogGroupName":
            suggest = "audit_log_group_name"
        elif key == "enableAudit":
            suggest = "enable_audit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GraphLtsOperationTrace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GraphLtsOperationTrace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GraphLtsOperationTrace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_log_group_name: Optional[_builtins.str] = None,
                 enable_audit: Optional[_builtins.bool] = None):
        """
        :param _builtins.str audit_log_group_name: LTS log group name.  
               
               <a name="GesGraph_vertexIdType"></a>
               The `vertexIdType` block supports:
        :param _builtins.bool enable_audit: Whether to enable graph audit. The default value is false.
        """
        if audit_log_group_name is not None:
            pulumi.set(__self__, "audit_log_group_name", audit_log_group_name)
        if enable_audit is not None:
            pulumi.set(__self__, "enable_audit", enable_audit)

    @_builtins.property
    @pulumi.getter(name="auditLogGroupName")
    def audit_log_group_name(self) -> Optional[_builtins.str]:
        """
        LTS log group name.  

        <a name="GesGraph_vertexIdType"></a>
        The `vertexIdType` block supports:
        """
        return pulumi.get(self, "audit_log_group_name")

    @_builtins.property
    @pulumi.getter(name="enableAudit")
    def enable_audit(self) -> Optional[_builtins.bool]:
        """
        Whether to enable graph audit. The default value is false.
        """
        return pulumi.get(self, "enable_audit")


@pulumi.output_type
class GraphPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eipId":
            suggest = "eip_id"
        elif key == "publicBindType":
            suggest = "public_bind_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GraphPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GraphPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GraphPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 eip_id: Optional[_builtins.str] = None,
                 public_bind_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str eip_id: The EIP ID.  
               
               <a name="GesGraph_Encryption"></a>
               The `Encryption` block supports:
        :param _builtins.str public_bind_type: The bind type of public IP.  
               The valid value are **auto_assign**, and **bind_existing**.
        """
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if public_bind_type is not None:
            pulumi.set(__self__, "public_bind_type", public_bind_type)

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[_builtins.str]:
        """
        The EIP ID.  

        <a name="GesGraph_Encryption"></a>
        The `Encryption` block supports:
        """
        return pulumi.get(self, "eip_id")

    @_builtins.property
    @pulumi.getter(name="publicBindType")
    def public_bind_type(self) -> Optional[_builtins.str]:
        """
        The bind type of public IP.  
        The valid value are **auto_assign**, and **bind_existing**.
        """
        return pulumi.get(self, "public_bind_type")


@pulumi.output_type
class GraphVertexIdType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idLength":
            suggest = "id_length"
        elif key == "idType":
            suggest = "id_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GraphVertexIdType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GraphVertexIdType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GraphVertexIdType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id_length: Optional[_builtins.int] = None,
                 id_type: Optional[_builtins.str] = None):
        """
        :param _builtins.int id_length: The length of ID.  
               This parameter is mandatory if **id_type** is **fixedLengthString**. The value ranges from 1 to 128.
        :param _builtins.str id_type: Vertex ID type.  
               Value options are as follows:
               + **fixedLengthString**: Vertex IDs are used for internal storage and compute.
               Specify the length limit. If the IDs are too long, the query performance can be reduced.
               Specify the length limit based on your dataset vertex IDs.
               + **hash**: Vertex IDs are converted into hash code for storage and compute.
               There is no limit on the ID length. However, there is an extremely low probability, approximately 10^(-43),
               that the vertex IDs will conflict. If you cannot determine the maximum length of a vertex ID,
               set this parameter to Hash.
        """
        if id_length is not None:
            pulumi.set(__self__, "id_length", id_length)
        if id_type is not None:
            pulumi.set(__self__, "id_type", id_type)

    @_builtins.property
    @pulumi.getter(name="idLength")
    def id_length(self) -> Optional[_builtins.int]:
        """
        The length of ID.  
        This parameter is mandatory if **id_type** is **fixedLengthString**. The value ranges from 1 to 128.
        """
        return pulumi.get(self, "id_length")

    @_builtins.property
    @pulumi.getter(name="idType")
    def id_type(self) -> Optional[_builtins.str]:
        """
        Vertex ID type.  
        Value options are as follows:
        + **fixedLengthString**: Vertex IDs are used for internal storage and compute.
        Specify the length limit. If the IDs are too long, the query performance can be reduced.
        Specify the length limit based on your dataset vertex IDs.
        + **hash**: Vertex IDs are converted into hash code for storage and compute.
        There is no limit on the ID length. However, there is an extremely low probability, approximately 10^(-43),
        that the vertex IDs will conflict. If you cannot determine the maximum length of a vertex ID,
        set this parameter to Hash.
        """
        return pulumi.get(self, "id_type")


@pulumi.output_type
class MetadataEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "masterKeyId":
            suggest = "master_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetadataEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetadataEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetadataEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: Optional[_builtins.bool] = None,
                 master_key_id: Optional[_builtins.str] = None):
        """
        :param _builtins.bool enable: Whether to enable data encryption The value can be true or false.
               The default value is false.
        :param _builtins.str master_key_id: ID of the customer master key created by DEW in the project where
               the graph is created.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if master_key_id is not None:
            pulumi.set(__self__, "master_key_id", master_key_id)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Whether to enable data encryption The value can be true or false.
        The default value is false.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="masterKeyId")
    def master_key_id(self) -> Optional[_builtins.str]:
        """
        ID of the customer master key created by DEW in the project where
        the graph is created.
        """
        return pulumi.get(self, "master_key_id")


@pulumi.output_type
class MetadataGesMetadata(dict):
    def __init__(__self__, *,
                 labels: Optional[Sequence['outputs.MetadataGesMetadataLabel']] = None):
        """
        :param Sequence['MetadataGesMetadataLabelArgs'] labels: Label list.  
               For details, see [data formats](https://support.huaweicloud.com/intl/en-us/usermanual-ges/ges_01_0153.html).
               The Labels structure is documented below.
               
               <a name="GesMetadata_MetadataLabels"></a>
               The `MetadataLabels` block supports:
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Sequence['outputs.MetadataGesMetadataLabel']]:
        """
        Label list.  
        For details, see [data formats](https://support.huaweicloud.com/intl/en-us/usermanual-ges/ges_01_0153.html).
        The Labels structure is documented below.

        <a name="GesMetadata_MetadataLabels"></a>
        The `MetadataLabels` block supports:
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class MetadataGesMetadataLabel(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 properties: Optional[Sequence[Mapping[str, _builtins.str]]] = None):
        """
        :param _builtins.str name: Name of a label.
        :param Sequence[Mapping[str, _builtins.str]] properties: The list of label properties. A property refers to the data format of a single
               property and contains some fields.
               For details, see [data formats](https://support.huaweicloud.com/intl/en-us/usermanual-ges/ges_01_0153.html).
               
               <a name="GesMetadata_Encryption"></a>
               The `Encryption` block supports:
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of a label.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[Sequence[Mapping[str, _builtins.str]]]:
        """
        The list of label properties. A property refers to the data format of a single
        property and contains some fields.
        For details, see [data formats](https://support.huaweicloud.com/intl/en-us/usermanual-ges/ges_01_0153.html).

        <a name="GesMetadata_Encryption"></a>
        The `Encryption` block supports:
        """
        return pulumi.get(self, "properties")


