# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MetadataArgs', 'Metadata']

@pulumi.input_type
class MetadataArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[_builtins.str],
                 ges_metadata: pulumi.Input['MetadataGesMetadataArgs'],
                 metadata_path: pulumi.Input[_builtins.str],
                 encryption: Optional[pulumi.Input['MetadataEncryptionArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Metadata resource.
        :param pulumi.Input[_builtins.str] description: Metadata description.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input['MetadataGesMetadataArgs'] ges_metadata: Object for storing metadata message information.
               The Metadata structure is documented below.
        :param pulumi.Input[_builtins.str] metadata_path: OBS Path for storing the metadata.
        :param pulumi.Input['MetadataEncryptionArgs'] encryption: The configuration of data encryption.
               The graph instance is not encrypted by default.
               The Encryption structure is documented below.
               
               <a name="GesMetadata_Metadata"></a>
               The `Metadata` block supports:
        :param pulumi.Input[_builtins.str] name: Name of a label.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ges_metadata", ges_metadata)
        pulumi.set(__self__, "metadata_path", metadata_path)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        Metadata description.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="gesMetadata")
    def ges_metadata(self) -> pulumi.Input['MetadataGesMetadataArgs']:
        """
        Object for storing metadata message information.
        The Metadata structure is documented below.
        """
        return pulumi.get(self, "ges_metadata")

    @ges_metadata.setter
    def ges_metadata(self, value: pulumi.Input['MetadataGesMetadataArgs']):
        pulumi.set(self, "ges_metadata", value)

    @_builtins.property
    @pulumi.getter(name="metadataPath")
    def metadata_path(self) -> pulumi.Input[_builtins.str]:
        """
        OBS Path for storing the metadata.
        """
        return pulumi.get(self, "metadata_path")

    @metadata_path.setter
    def metadata_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "metadata_path", value)

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['MetadataEncryptionArgs']]:
        """
        The configuration of data encryption.
        The graph instance is not encrypted by default.
        The Encryption structure is documented below.

        <a name="GesMetadata_Metadata"></a>
        The `Metadata` block supports:
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['MetadataEncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of a label.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _MetadataState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption: Optional[pulumi.Input['MetadataEncryptionArgs']] = None,
                 ges_metadata: Optional[pulumi.Input['MetadataGesMetadataArgs']] = None,
                 metadata_path: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Metadata resources.
        :param pulumi.Input[_builtins.str] description: Metadata description.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input['MetadataEncryptionArgs'] encryption: The configuration of data encryption.
               The graph instance is not encrypted by default.
               The Encryption structure is documented below.
               
               <a name="GesMetadata_Metadata"></a>
               The `Metadata` block supports:
        :param pulumi.Input['MetadataGesMetadataArgs'] ges_metadata: Object for storing metadata message information.
               The Metadata structure is documented below.
        :param pulumi.Input[_builtins.str] metadata_path: OBS Path for storing the metadata.
        :param pulumi.Input[_builtins.str] name: Name of a label.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Status of a metadata. **200** is available.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if ges_metadata is not None:
            pulumi.set(__self__, "ges_metadata", ges_metadata)
        if metadata_path is not None:
            pulumi.set(__self__, "metadata_path", metadata_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Metadata description.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['MetadataEncryptionArgs']]:
        """
        The configuration of data encryption.
        The graph instance is not encrypted by default.
        The Encryption structure is documented below.

        <a name="GesMetadata_Metadata"></a>
        The `Metadata` block supports:
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['MetadataEncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @_builtins.property
    @pulumi.getter(name="gesMetadata")
    def ges_metadata(self) -> Optional[pulumi.Input['MetadataGesMetadataArgs']]:
        """
        Object for storing metadata message information.
        The Metadata structure is documented below.
        """
        return pulumi.get(self, "ges_metadata")

    @ges_metadata.setter
    def ges_metadata(self, value: Optional[pulumi.Input['MetadataGesMetadataArgs']]):
        pulumi.set(self, "ges_metadata", value)

    @_builtins.property
    @pulumi.getter(name="metadataPath")
    def metadata_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        OBS Path for storing the metadata.
        """
        return pulumi.get(self, "metadata_path")

    @metadata_path.setter
    def metadata_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metadata_path", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of a label.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of a metadata. **200** is available.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:ges/metadata:Metadata")
class Metadata(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption: Optional[pulumi.Input[Union['MetadataEncryptionArgs', 'MetadataEncryptionArgsDict']]] = None,
                 ges_metadata: Optional[pulumi.Input[Union['MetadataGesMetadataArgs', 'MetadataGesMetadataArgsDict']]] = None,
                 metadata_path: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GES metadata resource within HuaweiCloud.

        > Only 50 metadata resources can be created.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        obs_path = config.require_object("obsPath")
        test = huaweicloud.ges.Metadata("test",
            name="demo",
            description="This is a demo",
            metadata_path=obs_path,
            ges_metadata={
                "labels": [{
                    "name": "user",
                    "properties": [
                        {
                            "dataType": "char",
                            "name": "sex",
                            "cardinality": "single",
                        },
                        {
                            "dataType": "enum",
                            "name": "country",
                            "cardinality": "single",
                            "typeNameCount": "3",
                            "typeName1": "US",
                            "typeName2": "EN",
                            "typeName3": "CN",
                        },
                        {
                            "dataType": "char array",
                            "name": "firstName",
                            "cardinality": "single",
                            "maxDataSize": "20",
                        },
                        {
                            "dataType": "string",
                            "name": "lastName",
                            "cardinality": "single",
                        },
                        {
                            "dataType": "long",
                            "name": "children",
                            "cardinality": "set",
                        },
                        {
                            "dataType": "long",
                            "name": "friends",
                            "cardinality": "list",
                        },
                        {
                            "dataType": "enum",
                            "name": "cards",
                            "cardinality": "list",
                            "typeNameCount": "3",
                            "typeName1": "card_1",
                            "typeName2": "card_2",
                            "typeName3": "card_3",
                        },
                    ],
                }],
            })
        ```

        ## Import

        The ges metadata can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ges/metadata:Metadata test 55b32ad9-1aba-407d-86cf-85f4f765d37a
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Metadata description.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['MetadataEncryptionArgs', 'MetadataEncryptionArgsDict']] encryption: The configuration of data encryption.
               The graph instance is not encrypted by default.
               The Encryption structure is documented below.
               
               <a name="GesMetadata_Metadata"></a>
               The `Metadata` block supports:
        :param pulumi.Input[Union['MetadataGesMetadataArgs', 'MetadataGesMetadataArgsDict']] ges_metadata: Object for storing metadata message information.
               The Metadata structure is documented below.
        :param pulumi.Input[_builtins.str] metadata_path: OBS Path for storing the metadata.
        :param pulumi.Input[_builtins.str] name: Name of a label.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MetadataArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GES metadata resource within HuaweiCloud.

        > Only 50 metadata resources can be created.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        obs_path = config.require_object("obsPath")
        test = huaweicloud.ges.Metadata("test",
            name="demo",
            description="This is a demo",
            metadata_path=obs_path,
            ges_metadata={
                "labels": [{
                    "name": "user",
                    "properties": [
                        {
                            "dataType": "char",
                            "name": "sex",
                            "cardinality": "single",
                        },
                        {
                            "dataType": "enum",
                            "name": "country",
                            "cardinality": "single",
                            "typeNameCount": "3",
                            "typeName1": "US",
                            "typeName2": "EN",
                            "typeName3": "CN",
                        },
                        {
                            "dataType": "char array",
                            "name": "firstName",
                            "cardinality": "single",
                            "maxDataSize": "20",
                        },
                        {
                            "dataType": "string",
                            "name": "lastName",
                            "cardinality": "single",
                        },
                        {
                            "dataType": "long",
                            "name": "children",
                            "cardinality": "set",
                        },
                        {
                            "dataType": "long",
                            "name": "friends",
                            "cardinality": "list",
                        },
                        {
                            "dataType": "enum",
                            "name": "cards",
                            "cardinality": "list",
                            "typeNameCount": "3",
                            "typeName1": "card_1",
                            "typeName2": "card_2",
                            "typeName3": "card_3",
                        },
                    ],
                }],
            })
        ```

        ## Import

        The ges metadata can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ges/metadata:Metadata test 55b32ad9-1aba-407d-86cf-85f4f765d37a
        ```

        :param str resource_name: The name of the resource.
        :param MetadataArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MetadataArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption: Optional[pulumi.Input[Union['MetadataEncryptionArgs', 'MetadataEncryptionArgsDict']]] = None,
                 ges_metadata: Optional[pulumi.Input[Union['MetadataGesMetadataArgs', 'MetadataGesMetadataArgsDict']]] = None,
                 metadata_path: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MetadataArgs.__new__(MetadataArgs)

            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["encryption"] = encryption
            if ges_metadata is None and not opts.urn:
                raise TypeError("Missing required property 'ges_metadata'")
            __props__.__dict__["ges_metadata"] = ges_metadata
            if metadata_path is None and not opts.urn:
                raise TypeError("Missing required property 'metadata_path'")
            __props__.__dict__["metadata_path"] = metadata_path
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["status"] = None
        super(Metadata, __self__).__init__(
            'huaweicloud:ges/metadata:Metadata',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            encryption: Optional[pulumi.Input[Union['MetadataEncryptionArgs', 'MetadataEncryptionArgsDict']]] = None,
            ges_metadata: Optional[pulumi.Input[Union['MetadataGesMetadataArgs', 'MetadataGesMetadataArgsDict']]] = None,
            metadata_path: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'Metadata':
        """
        Get an existing Metadata resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Metadata description.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['MetadataEncryptionArgs', 'MetadataEncryptionArgsDict']] encryption: The configuration of data encryption.
               The graph instance is not encrypted by default.
               The Encryption structure is documented below.
               
               <a name="GesMetadata_Metadata"></a>
               The `Metadata` block supports:
        :param pulumi.Input[Union['MetadataGesMetadataArgs', 'MetadataGesMetadataArgsDict']] ges_metadata: Object for storing metadata message information.
               The Metadata structure is documented below.
        :param pulumi.Input[_builtins.str] metadata_path: OBS Path for storing the metadata.
        :param pulumi.Input[_builtins.str] name: Name of a label.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Status of a metadata. **200** is available.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MetadataState.__new__(_MetadataState)

        __props__.__dict__["description"] = description
        __props__.__dict__["encryption"] = encryption
        __props__.__dict__["ges_metadata"] = ges_metadata
        __props__.__dict__["metadata_path"] = metadata_path
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        return Metadata(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Metadata description.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> pulumi.Output['outputs.MetadataEncryption']:
        """
        The configuration of data encryption.
        The graph instance is not encrypted by default.
        The Encryption structure is documented below.

        <a name="GesMetadata_Metadata"></a>
        The `Metadata` block supports:
        """
        return pulumi.get(self, "encryption")

    @_builtins.property
    @pulumi.getter(name="gesMetadata")
    def ges_metadata(self) -> pulumi.Output['outputs.MetadataGesMetadata']:
        """
        Object for storing metadata message information.
        The Metadata structure is documented below.
        """
        return pulumi.get(self, "ges_metadata")

    @_builtins.property
    @pulumi.getter(name="metadataPath")
    def metadata_path(self) -> pulumi.Output[_builtins.str]:
        """
        OBS Path for storing the metadata.
        """
        return pulumi.get(self, "metadata_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of a label.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of a metadata. **200** is available.
        """
        return pulumi.get(self, "status")

