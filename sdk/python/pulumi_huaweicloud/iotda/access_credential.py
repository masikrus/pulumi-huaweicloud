# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AccessCredentialArgs', 'AccessCredential']

@pulumi.input_type
class AccessCredentialArgs:
    def __init__(__self__, *,
                 force_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AccessCredential resource.
        :param pulumi.Input[_builtins.bool] force_disconnect: Specifies whether to disconnect AMQP or MQTT connection when
               creating access credential.
               The valid values are as follows:
               + **false** (Default value).
               + **true**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the access credential resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the access credential.
               The valid values are as follows:
               + **AMQP** (Default value).
               + **MQTT**
               
               Changing this parameter will create a new resource.
        """
        if force_disconnect is not None:
            pulumi.set(__self__, "force_disconnect", force_disconnect)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="forceDisconnect")
    def force_disconnect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to disconnect AMQP or MQTT connection when
        creating access credential.
        The valid values are as follows:
        + **false** (Default value).
        + **true**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "force_disconnect")

    @force_disconnect.setter
    def force_disconnect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_disconnect", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the access credential resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the access credential.
        The valid values are as follows:
        + **AMQP** (Default value).
        + **MQTT**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _AccessCredentialState:
    def __init__(__self__, *,
                 access_code: Optional[pulumi.Input[_builtins.str]] = None,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 force_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AccessCredential resources.
        :param pulumi.Input[_builtins.str] access_code: The access credential.
        :param pulumi.Input[_builtins.str] access_key: The access name.
        :param pulumi.Input[_builtins.bool] force_disconnect: Specifies whether to disconnect AMQP or MQTT connection when
               creating access credential.
               The valid values are as follows:
               + **false** (Default value).
               + **true**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the access credential resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the access credential.
               The valid values are as follows:
               + **AMQP** (Default value).
               + **MQTT**
               
               Changing this parameter will create a new resource.
        """
        if access_code is not None:
            pulumi.set(__self__, "access_code", access_code)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if force_disconnect is not None:
            pulumi.set(__self__, "force_disconnect", force_disconnect)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="accessCode")
    def access_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The access credential.
        """
        return pulumi.get(self, "access_code")

    @access_code.setter
    def access_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_code", value)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The access name.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="forceDisconnect")
    def force_disconnect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to disconnect AMQP or MQTT connection when
        creating access credential.
        The valid values are as follows:
        + **false** (Default value).
        + **true**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "force_disconnect")

    @force_disconnect.setter
    def force_disconnect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_disconnect", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the access credential resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the access credential.
        The valid values are as follows:
        + **AMQP** (Default value).
        + **MQTT**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:IoTDA/accessCredential:AccessCredential")
class AccessCredential(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 force_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an access credential resource within HuaweiCloud.

        > 1.This resource is only a one-time action resource for doing API action. Deleting this resource will not clear
          the corresponding request record, but will only remove the resource information from the tfstate file.
          <br>2. The client will only retain one record. If the resource is redeployed, it will only reset the access
          credential, rendering the previous credential invalid.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
          endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.iotda.AccessCredential("test",
            type="AMQP",
            force_disconnect=False)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] force_disconnect: Specifies whether to disconnect AMQP or MQTT connection when
               creating access credential.
               The valid values are as follows:
               + **false** (Default value).
               + **true**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the access credential resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the access credential.
               The valid values are as follows:
               + **AMQP** (Default value).
               + **MQTT**
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AccessCredentialArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an access credential resource within HuaweiCloud.

        > 1.This resource is only a one-time action resource for doing API action. Deleting this resource will not clear
          the corresponding request record, but will only remove the resource information from the tfstate file.
          <br>2. The client will only retain one record. If the resource is redeployed, it will only reset the access
          credential, rendering the previous credential invalid.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
          endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.iotda.AccessCredential("test",
            type="AMQP",
            force_disconnect=False)
        ```

        :param str resource_name: The name of the resource.
        :param AccessCredentialArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccessCredentialArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 force_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccessCredentialArgs.__new__(AccessCredentialArgs)

            __props__.__dict__["force_disconnect"] = force_disconnect
            __props__.__dict__["region"] = region
            __props__.__dict__["type"] = type
            __props__.__dict__["access_code"] = None
            __props__.__dict__["access_key"] = None
        super(AccessCredential, __self__).__init__(
            'huaweicloud:IoTDA/accessCredential:AccessCredential',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_code: Optional[pulumi.Input[_builtins.str]] = None,
            access_key: Optional[pulumi.Input[_builtins.str]] = None,
            force_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'AccessCredential':
        """
        Get an existing AccessCredential resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_code: The access credential.
        :param pulumi.Input[_builtins.str] access_key: The access name.
        :param pulumi.Input[_builtins.bool] force_disconnect: Specifies whether to disconnect AMQP or MQTT connection when
               creating access credential.
               The valid values are as follows:
               + **false** (Default value).
               + **true**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the access credential resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the access credential.
               The valid values are as follows:
               + **AMQP** (Default value).
               + **MQTT**
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccessCredentialState.__new__(_AccessCredentialState)

        __props__.__dict__["access_code"] = access_code
        __props__.__dict__["access_key"] = access_key
        __props__.__dict__["force_disconnect"] = force_disconnect
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        return AccessCredential(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessCode")
    def access_code(self) -> pulumi.Output[_builtins.str]:
        """
        The access credential.
        """
        return pulumi.get(self, "access_code")

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Output[_builtins.str]:
        """
        The access name.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="forceDisconnect")
    def force_disconnect(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to disconnect AMQP or MQTT connection when
        creating access credential.
        The valid values are as follows:
        + **false** (Default value).
        + **true**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "force_disconnect")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region in which to create the access credential resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of the access credential.
        The valid values are as follows:
        + **AMQP** (Default value).
        + **MQTT**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

