# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetProductsResult',
    'AwaitableGetProductsResult',
    'get_products',
    'get_products_output',
]

@pulumi.output_type
class GetProductsResult:
    """
    A collection of values returned by getProducts.
    """
    def __init__(__self__, device_type=None, id=None, product_id=None, product_name=None, products=None, region=None, space_id=None, space_name=None):
        if device_type and not isinstance(device_type, str):
            raise TypeError("Expected argument 'device_type' to be a str")
        pulumi.set(__self__, "device_type", device_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if product_id and not isinstance(product_id, str):
            raise TypeError("Expected argument 'product_id' to be a str")
        pulumi.set(__self__, "product_id", product_id)
        if product_name and not isinstance(product_name, str):
            raise TypeError("Expected argument 'product_name' to be a str")
        pulumi.set(__self__, "product_name", product_name)
        if products and not isinstance(products, list):
            raise TypeError("Expected argument 'products' to be a list")
        pulumi.set(__self__, "products", products)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if space_name and not isinstance(space_name, str):
            raise TypeError("Expected argument 'space_name' to be a str")
        pulumi.set(__self__, "space_name", space_name)

    @_builtins.property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[_builtins.str]:
        """
        The device type of the product.
        """
        return pulumi.get(self, "device_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "product_name")

    @_builtins.property
    @pulumi.getter
    def products(self) -> Sequence['outputs.GetProductsProductResult']:
        """
        All products that match the filter parameters.
        The products structure is documented below.
        """
        return pulumi.get(self, "products")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[_builtins.str]:
        """
        The space ID to which the product belongs.
        """
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter(name="spaceName")
    def space_name(self) -> Optional[_builtins.str]:
        """
        The space name to which the product belongs.
        """
        return pulumi.get(self, "space_name")


class AwaitableGetProductsResult(GetProductsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProductsResult(
            device_type=self.device_type,
            id=self.id,
            product_id=self.product_id,
            product_name=self.product_name,
            products=self.products,
            region=self.region,
            space_id=self.space_id,
            space_name=self.space_name)


def get_products(device_type: Optional[_builtins.str] = None,
                 product_id: Optional[_builtins.str] = None,
                 product_name: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 space_id: Optional[_builtins.str] = None,
                 space_name: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProductsResult:
    """
    Use this data source to get the list of IoTDA products within HuaweiCloud.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    product_id = config.require_object("productId")
    test = huaweicloud.IoTDA.get_products(product_id=product_id)
    ```


    :param _builtins.str device_type: Specifies the device type of the products to be queried.
    :param _builtins.str product_id: Specifies the ID of the product to be queried.
    :param _builtins.str product_name: Specifies the name of the product to be queried.
    :param _builtins.str region: Specifies the region in which to query the products.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the space ID of the products to be queried.
           If omitted, query all products under the current instance.
    :param _builtins.str space_name: Specifies the space name of the products to be queried.
    """
    __args__ = dict()
    __args__['deviceType'] = device_type
    __args__['productId'] = product_id
    __args__['productName'] = product_name
    __args__['region'] = region
    __args__['spaceId'] = space_id
    __args__['spaceName'] = space_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getProducts:getProducts', __args__, opts=opts, typ=GetProductsResult).value

    return AwaitableGetProductsResult(
        device_type=pulumi.get(__ret__, 'device_type'),
        id=pulumi.get(__ret__, 'id'),
        product_id=pulumi.get(__ret__, 'product_id'),
        product_name=pulumi.get(__ret__, 'product_name'),
        products=pulumi.get(__ret__, 'products'),
        region=pulumi.get(__ret__, 'region'),
        space_id=pulumi.get(__ret__, 'space_id'),
        space_name=pulumi.get(__ret__, 'space_name'))
def get_products_output(device_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        product_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        product_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        space_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        space_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProductsResult]:
    """
    Use this data source to get the list of IoTDA products within HuaweiCloud.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    product_id = config.require_object("productId")
    test = huaweicloud.IoTDA.get_products(product_id=product_id)
    ```


    :param _builtins.str device_type: Specifies the device type of the products to be queried.
    :param _builtins.str product_id: Specifies the ID of the product to be queried.
    :param _builtins.str product_name: Specifies the name of the product to be queried.
    :param _builtins.str region: Specifies the region in which to query the products.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the space ID of the products to be queried.
           If omitted, query all products under the current instance.
    :param _builtins.str space_name: Specifies the space name of the products to be queried.
    """
    __args__ = dict()
    __args__['deviceType'] = device_type
    __args__['productId'] = product_id
    __args__['productName'] = product_name
    __args__['region'] = region
    __args__['spaceId'] = space_id
    __args__['spaceName'] = space_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getProducts:getProducts', __args__, opts=opts, typ=GetProductsResult)
    return __ret__.apply(lambda __response__: GetProductsResult(
        device_type=pulumi.get(__response__, 'device_type'),
        id=pulumi.get(__response__, 'id'),
        product_id=pulumi.get(__response__, 'product_id'),
        product_name=pulumi.get(__response__, 'product_name'),
        products=pulumi.get(__response__, 'products'),
        region=pulumi.get(__response__, 'region'),
        space_id=pulumi.get(__response__, 'space_id'),
        space_name=pulumi.get(__response__, 'space_name')))
