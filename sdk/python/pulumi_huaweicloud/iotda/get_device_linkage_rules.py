# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDeviceLinkageRulesResult',
    'AwaitableGetDeviceLinkageRulesResult',
    'get_device_linkage_rules',
    'get_device_linkage_rules_output',
]

@pulumi.output_type
class GetDeviceLinkageRulesResult:
    """
    A collection of values returned by getDeviceLinkageRules.
    """
    def __init__(__self__, id=None, name=None, region=None, rule_id=None, rules=None, space_id=None, status=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the alarm.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The region to which the SMN service belongs.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetDeviceLinkageRulesRuleResult']:
        """
        All rules that match the filter parameters.
        The rules structure is documented below.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[_builtins.str]:
        """
        The ID of the resource space to which the device linkage rule belongs.
        """
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The current status of the device linkage rule.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the alarm. The valid values are as follows:
        + **fault**: Report alarms.
        + **recovery**: Restore alarms.
        """
        return pulumi.get(self, "type")


class AwaitableGetDeviceLinkageRulesResult(GetDeviceLinkageRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeviceLinkageRulesResult(
            id=self.id,
            name=self.name,
            region=self.region,
            rule_id=self.rule_id,
            rules=self.rules,
            space_id=self.space_id,
            status=self.status,
            type=self.type)


def get_device_linkage_rules(name: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             rule_id: Optional[_builtins.str] = None,
                             space_id: Optional[_builtins.str] = None,
                             status: Optional[_builtins.str] = None,
                             type: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeviceLinkageRulesResult:
    """
    Use this data source to get the list of IoTDA device linkage rules.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    rule_id = config.require_object("ruleId")
    test = huaweicloud.IoTDA.get_device_linkage_rules(rule_id=rule_id)
    ```


    :param _builtins.str name: Specifies the name of the device linkage rule.
    :param _builtins.str region: Specifies the region in which to query the device linkage rules.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the device linkage rule.
    :param _builtins.str space_id: Specifies the ID of the resource space to which the device linkage rules belong.
    :param _builtins.str status: Specifies the current status of the device linkage rule.
           The valid values are as follows:
           + **active**: The device linkage rule is active.
           + **inactive**: The device linkage rule is not enabled.
    :param _builtins.str type: Specifies the type of the device linkage rules.
           The valid values are as follows:
           + **DEVICE_LINKAGE**: Cloud based linkage rule.
           + **DEVICE_SIDE**: Device side rule.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['spaceId'] = space_id
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getDeviceLinkageRules:getDeviceLinkageRules', __args__, opts=opts, typ=GetDeviceLinkageRulesResult).value

    return AwaitableGetDeviceLinkageRulesResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        rules=pulumi.get(__ret__, 'rules'),
        space_id=pulumi.get(__ret__, 'space_id'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_device_linkage_rules_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    rule_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    space_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDeviceLinkageRulesResult]:
    """
    Use this data source to get the list of IoTDA device linkage rules.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    rule_id = config.require_object("ruleId")
    test = huaweicloud.IoTDA.get_device_linkage_rules(rule_id=rule_id)
    ```


    :param _builtins.str name: Specifies the name of the device linkage rule.
    :param _builtins.str region: Specifies the region in which to query the device linkage rules.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the device linkage rule.
    :param _builtins.str space_id: Specifies the ID of the resource space to which the device linkage rules belong.
    :param _builtins.str status: Specifies the current status of the device linkage rule.
           The valid values are as follows:
           + **active**: The device linkage rule is active.
           + **inactive**: The device linkage rule is not enabled.
    :param _builtins.str type: Specifies the type of the device linkage rules.
           The valid values are as follows:
           + **DEVICE_LINKAGE**: Cloud based linkage rule.
           + **DEVICE_SIDE**: Device side rule.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['spaceId'] = space_id
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getDeviceLinkageRules:getDeviceLinkageRules', __args__, opts=opts, typ=GetDeviceLinkageRulesResult)
    return __ret__.apply(lambda __response__: GetDeviceLinkageRulesResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        rules=pulumi.get(__response__, 'rules'),
        space_id=pulumi.get(__response__, 'space_id'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
