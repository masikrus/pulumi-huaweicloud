# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSpacesResult',
    'AwaitableGetSpacesResult',
    'get_spaces',
    'get_spaces_output',
]

@pulumi.output_type
class GetSpacesResult:
    """
    A collection of values returned by getSpaces.
    """
    def __init__(__self__, id=None, is_default=None, region=None, space_id=None, space_name=None, spaces=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_default and not isinstance(is_default, str):
            raise TypeError("Expected argument 'is_default' to be a str")
        pulumi.set(__self__, "is_default", is_default)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if space_name and not isinstance(space_name, str):
            raise TypeError("Expected argument 'space_name' to be a str")
        pulumi.set(__self__, "space_name", space_name)
        if spaces and not isinstance(spaces, list):
            raise TypeError("Expected argument 'spaces' to be a list")
        pulumi.set(__self__, "spaces", spaces)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[_builtins.str]:
        """
        Is it the default space.
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter(name="spaceName")
    def space_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "space_name")

    @_builtins.property
    @pulumi.getter
    def spaces(self) -> Sequence['outputs.GetSpacesSpaceResult']:
        """
        All spaces that match the filter parameters.
        The spaces structure is documented below.
        """
        return pulumi.get(self, "spaces")


class AwaitableGetSpacesResult(GetSpacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSpacesResult(
            id=self.id,
            is_default=self.is_default,
            region=self.region,
            space_id=self.space_id,
            space_name=self.space_name,
            spaces=self.spaces)


def get_spaces(is_default: Optional[_builtins.str] = None,
               region: Optional[_builtins.str] = None,
               space_id: Optional[_builtins.str] = None,
               space_name: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSpacesResult:
    """
    Use this data source to get the list of IoTDA spaces within HuaweiCloud.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    space_id = config.require_object("spaceId")
    test = huaweicloud.IoTDA.get_spaces(space_id=space_id)
    ```


    :param _builtins.str is_default: Specifies whether to query the default space.
           The valid values are as follows:
           + **true**: Query the default space.
           + **false**: Query all non default spaces.
           If omitted, query all spaces under the current instance.
    :param _builtins.str region: Specifies the region in which to query the spaces.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the ID of the space to be queried.
    :param _builtins.str space_name: Specifies the name of the space to be queried.
    """
    __args__ = dict()
    __args__['isDefault'] = is_default
    __args__['region'] = region
    __args__['spaceId'] = space_id
    __args__['spaceName'] = space_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getSpaces:getSpaces', __args__, opts=opts, typ=GetSpacesResult).value

    return AwaitableGetSpacesResult(
        id=pulumi.get(__ret__, 'id'),
        is_default=pulumi.get(__ret__, 'is_default'),
        region=pulumi.get(__ret__, 'region'),
        space_id=pulumi.get(__ret__, 'space_id'),
        space_name=pulumi.get(__ret__, 'space_name'),
        spaces=pulumi.get(__ret__, 'spaces'))
def get_spaces_output(is_default: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      space_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      space_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSpacesResult]:
    """
    Use this data source to get the list of IoTDA spaces within HuaweiCloud.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    space_id = config.require_object("spaceId")
    test = huaweicloud.IoTDA.get_spaces(space_id=space_id)
    ```


    :param _builtins.str is_default: Specifies whether to query the default space.
           The valid values are as follows:
           + **true**: Query the default space.
           + **false**: Query all non default spaces.
           If omitted, query all spaces under the current instance.
    :param _builtins.str region: Specifies the region in which to query the spaces.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the ID of the space to be queried.
    :param _builtins.str space_name: Specifies the name of the space to be queried.
    """
    __args__ = dict()
    __args__['isDefault'] = is_default
    __args__['region'] = region
    __args__['spaceId'] = space_id
    __args__['spaceName'] = space_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getSpaces:getSpaces', __args__, opts=opts, typ=GetSpacesResult)
    return __ret__.apply(lambda __response__: GetSpacesResult(
        id=pulumi.get(__response__, 'id'),
        is_default=pulumi.get(__response__, 'is_default'),
        region=pulumi.get(__response__, 'region'),
        space_id=pulumi.get(__response__, 'space_id'),
        space_name=pulumi.get(__response__, 'space_name'),
        spaces=pulumi.get(__response__, 'spaces')))
