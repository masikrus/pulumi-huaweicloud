# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDeviceGroupsResult',
    'AwaitableGetDeviceGroupsResult',
    'get_device_groups',
    'get_device_groups_output',
]

@pulumi.output_type
class GetDeviceGroupsResult:
    """
    A collection of values returned by getDeviceGroups.
    """
    def __init__(__self__, group_id=None, groups=None, id=None, name=None, parent_group_id=None, region=None, space_id=None, type=None):
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent_group_id and not isinstance(parent_group_id, str):
            raise TypeError("Expected argument 'parent_group_id' to be a str")
        pulumi.set(__self__, "parent_group_id", parent_group_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetDeviceGroupsGroupResult']:
        """
        The list of the device groups.
        The groups structure is documented below.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the device group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentGroupId")
    def parent_group_id(self) -> Optional[_builtins.str]:
        """
        The ID of the parent device group to which the device group belongs.
        """
        return pulumi.get(self, "parent_group_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the device group.
        """
        return pulumi.get(self, "type")


class AwaitableGetDeviceGroupsResult(GetDeviceGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeviceGroupsResult(
            group_id=self.group_id,
            groups=self.groups,
            id=self.id,
            name=self.name,
            parent_group_id=self.parent_group_id,
            region=self.region,
            space_id=self.space_id,
            type=self.type)


def get_device_groups(group_id: Optional[_builtins.str] = None,
                      name: Optional[_builtins.str] = None,
                      parent_group_id: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      space_id: Optional[_builtins.str] = None,
                      type: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeviceGroupsResult:
    """
    Use this data source to get the list of the IoTDA device groups.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
      the IoTDA service endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    device_group_id = config.require_object("deviceGroupId")
    test = huaweicloud.IoTDA.get_device_groups(group_id=device_group_id)
    ```


    :param _builtins.str group_id: Specifies the ID of the device group.
    :param _builtins.str name: Specifies the name of the device group.
    :param _builtins.str parent_group_id: Specifies the ID of the parent device group to which the device group belongs.
    :param _builtins.str region: Specifies the region in which to query the device groups.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the ID of the resource space to which the device groups belong.
    :param _builtins.str type: Specifies the type of the device groups.
           The valid values are as follows:
           + **STATIC**: The device group is a static group.
           + **DYNAMIC**: The device group is a dynamical group.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['name'] = name
    __args__['parentGroupId'] = parent_group_id
    __args__['region'] = region
    __args__['spaceId'] = space_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getDeviceGroups:getDeviceGroups', __args__, opts=opts, typ=GetDeviceGroupsResult).value

    return AwaitableGetDeviceGroupsResult(
        group_id=pulumi.get(__ret__, 'group_id'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        parent_group_id=pulumi.get(__ret__, 'parent_group_id'),
        region=pulumi.get(__ret__, 'region'),
        space_id=pulumi.get(__ret__, 'space_id'),
        type=pulumi.get(__ret__, 'type'))
def get_device_groups_output(group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             parent_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             space_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDeviceGroupsResult]:
    """
    Use this data source to get the list of the IoTDA device groups.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
      the IoTDA service endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    device_group_id = config.require_object("deviceGroupId")
    test = huaweicloud.IoTDA.get_device_groups(group_id=device_group_id)
    ```


    :param _builtins.str group_id: Specifies the ID of the device group.
    :param _builtins.str name: Specifies the name of the device group.
    :param _builtins.str parent_group_id: Specifies the ID of the parent device group to which the device group belongs.
    :param _builtins.str region: Specifies the region in which to query the device groups.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the ID of the resource space to which the device groups belong.
    :param _builtins.str type: Specifies the type of the device groups.
           The valid values are as follows:
           + **STATIC**: The device group is a static group.
           + **DYNAMIC**: The device group is a dynamical group.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['name'] = name
    __args__['parentGroupId'] = parent_group_id
    __args__['region'] = region
    __args__['spaceId'] = space_id
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getDeviceGroups:getDeviceGroups', __args__, opts=opts, typ=GetDeviceGroupsResult)
    return __ret__.apply(lambda __response__: GetDeviceGroupsResult(
        group_id=pulumi.get(__response__, 'group_id'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        parent_group_id=pulumi.get(__response__, 'parent_group_id'),
        region=pulumi.get(__response__, 'region'),
        space_id=pulumi.get(__response__, 'space_id'),
        type=pulumi.get(__response__, 'type')))
