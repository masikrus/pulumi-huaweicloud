# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDeviceProxiesResult',
    'AwaitableGetDeviceProxiesResult',
    'get_device_proxies',
    'get_device_proxies_output',
]

@pulumi.output_type
class GetDeviceProxiesResult:
    """
    A collection of values returned by getDeviceProxies.
    """
    def __init__(__self__, id=None, name=None, proxies=None, region=None, space_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if proxies and not isinstance(proxies, list):
            raise TypeError("Expected argument 'proxies' to be a list")
        pulumi.set(__self__, "proxies", proxies)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The device proxy name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def proxies(self) -> Sequence['outputs.GetDeviceProxiesProxyResult']:
        """
        All device proxies that match the filter parameters.
        The proxies structure is documented below.
        """
        return pulumi.get(self, "proxies")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[_builtins.str]:
        """
        The space ID to which the device proxy belongs.
        """
        return pulumi.get(self, "space_id")


class AwaitableGetDeviceProxiesResult(GetDeviceProxiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeviceProxiesResult(
            id=self.id,
            name=self.name,
            proxies=self.proxies,
            region=self.region,
            space_id=self.space_id)


def get_device_proxies(name: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       space_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeviceProxiesResult:
    """
    Use this data source to get the list of IoTDA device proxies within HuaweiCloud.

    > Currently, device proxy resources are only supported on IoTDA **standard** or **enterprise** edition instance.
      When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
      the IoTDA service endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    test = huaweicloud.IoTDA.get_device_proxies(name=name)
    ```


    :param _builtins.str name: Specifies the name of the device proxy.
    :param _builtins.str region: Specifies the region in which to query the device proxies.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the space ID to which the device proxies belong.
           If omitted, query all device proxies under the current instance.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['spaceId'] = space_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getDeviceProxies:getDeviceProxies', __args__, opts=opts, typ=GetDeviceProxiesResult).value

    return AwaitableGetDeviceProxiesResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        proxies=pulumi.get(__ret__, 'proxies'),
        region=pulumi.get(__ret__, 'region'),
        space_id=pulumi.get(__ret__, 'space_id'))
def get_device_proxies_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              space_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDeviceProxiesResult]:
    """
    Use this data source to get the list of IoTDA device proxies within HuaweiCloud.

    > Currently, device proxy resources are only supported on IoTDA **standard** or **enterprise** edition instance.
      When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
      the IoTDA service endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    test = huaweicloud.IoTDA.get_device_proxies(name=name)
    ```


    :param _builtins.str name: Specifies the name of the device proxy.
    :param _builtins.str region: Specifies the region in which to query the device proxies.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the space ID to which the device proxies belong.
           If omitted, query all device proxies under the current instance.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['spaceId'] = space_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getDeviceProxies:getDeviceProxies', __args__, opts=opts, typ=GetDeviceProxiesResult)
    return __ret__.apply(lambda __response__: GetDeviceProxiesResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        proxies=pulumi.get(__response__, 'proxies'),
        region=pulumi.get(__response__, 'region'),
        space_id=pulumi.get(__response__, 'space_id')))
