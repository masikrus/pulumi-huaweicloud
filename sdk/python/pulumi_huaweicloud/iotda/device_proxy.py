# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeviceProxyArgs', 'DeviceProxy']

@pulumi.input_type
class DeviceProxyArgs:
    def __init__(__self__, *,
                 devices: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 effective_time_range: pulumi.Input['DeviceProxyEffectiveTimeRangeArgs'],
                 space_id: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DeviceProxy resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] devices: Specifies the list of proxy device IDs. The number of IDs in the list is limited from
               `2` to `10`. All devices in the list share gateway permissions, which means that any sub device under any gateway in
               the list can go online through any gateway in the group and report data.
        :param pulumi.Input['DeviceProxyEffectiveTimeRangeArgs'] effective_time_range: Specifies the validity period of the device proxy rule.
               The effective_time_range structure is documented below.
               
               <a name="IoTDA_effective_time_range"></a>
               The `effective_time_range` block supports:
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the device proxy belongs.
        :param pulumi.Input[_builtins.str] name: Specifies the device proxy name. The valid length is limited from `1` to `64`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "effective_time_range", effective_time_range)
        pulumi.set(__self__, "space_id", space_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def devices(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the list of proxy device IDs. The number of IDs in the list is limited from
        `2` to `10`. All devices in the list share gateway permissions, which means that any sub device under any gateway in
        the list can go online through any gateway in the group and report data.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "devices", value)

    @_builtins.property
    @pulumi.getter(name="effectiveTimeRange")
    def effective_time_range(self) -> pulumi.Input['DeviceProxyEffectiveTimeRangeArgs']:
        """
        Specifies the validity period of the device proxy rule.
        The effective_time_range structure is documented below.

        <a name="IoTDA_effective_time_range"></a>
        The `effective_time_range` block supports:
        """
        return pulumi.get(self, "effective_time_range")

    @effective_time_range.setter
    def effective_time_range(self, value: pulumi.Input['DeviceProxyEffectiveTimeRangeArgs']):
        pulumi.set(self, "effective_time_range", value)

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource space ID to which the device proxy belongs.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "space_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the device proxy name. The valid length is limited from `1` to `64`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DeviceProxyState:
    def __init__(__self__, *,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 effective_time_range: Optional[pulumi.Input['DeviceProxyEffectiveTimeRangeArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeviceProxy resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] devices: Specifies the list of proxy device IDs. The number of IDs in the list is limited from
               `2` to `10`. All devices in the list share gateway permissions, which means that any sub device under any gateway in
               the list can go online through any gateway in the group and report data.
        :param pulumi.Input['DeviceProxyEffectiveTimeRangeArgs'] effective_time_range: Specifies the validity period of the device proxy rule.
               The effective_time_range structure is documented below.
               
               <a name="IoTDA_effective_time_range"></a>
               The `effective_time_range` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the device proxy name. The valid length is limited from `1` to `64`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the device proxy belongs.
        """
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if effective_time_range is not None:
            pulumi.set(__self__, "effective_time_range", effective_time_range)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)

    @_builtins.property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of proxy device IDs. The number of IDs in the list is limited from
        `2` to `10`. All devices in the list share gateway permissions, which means that any sub device under any gateway in
        the list can go online through any gateway in the group and report data.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "devices", value)

    @_builtins.property
    @pulumi.getter(name="effectiveTimeRange")
    def effective_time_range(self) -> Optional[pulumi.Input['DeviceProxyEffectiveTimeRangeArgs']]:
        """
        Specifies the validity period of the device proxy rule.
        The effective_time_range structure is documented below.

        <a name="IoTDA_effective_time_range"></a>
        The `effective_time_range` block supports:
        """
        return pulumi.get(self, "effective_time_range")

    @effective_time_range.setter
    def effective_time_range(self, value: Optional[pulumi.Input['DeviceProxyEffectiveTimeRangeArgs']]):
        pulumi.set(self, "effective_time_range", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the device proxy name. The valid length is limited from `1` to `64`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource space ID to which the device proxy belongs.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_id", value)


@pulumi.type_token("huaweicloud:IoTDA/deviceProxy:DeviceProxy")
class DeviceProxy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 effective_time_range: Optional[pulumi.Input[Union['DeviceProxyEffectiveTimeRangeArgs', 'DeviceProxyEffectiveTimeRangeArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an IoTDA device proxy resource within HuaweiCloud.

        > Currently, device proxy resources are only supported on IoTDA **standard** or **enterprise** edition instance.
          When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
          the IoTDA service endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        space_id = config.require_object("spaceId")
        name = config.require_object("name")
        devices = config.require_object("devices")
        start_time = config.require_object("startTime")
        end_time = config.require_object("endTime")
        test = huaweicloud.iotda.DeviceProxy("test",
            space_id=space_id,
            name=name,
            devices=devices,
            effective_time_range={
                "start_time": start_time,
                "end_time": end_time,
            })
        ```

        ## Import

        The device proxy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/deviceProxy:DeviceProxy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] devices: Specifies the list of proxy device IDs. The number of IDs in the list is limited from
               `2` to `10`. All devices in the list share gateway permissions, which means that any sub device under any gateway in
               the list can go online through any gateway in the group and report data.
        :param pulumi.Input[Union['DeviceProxyEffectiveTimeRangeArgs', 'DeviceProxyEffectiveTimeRangeArgsDict']] effective_time_range: Specifies the validity period of the device proxy rule.
               The effective_time_range structure is documented below.
               
               <a name="IoTDA_effective_time_range"></a>
               The `effective_time_range` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the device proxy name. The valid length is limited from `1` to `64`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the device proxy belongs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceProxyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IoTDA device proxy resource within HuaweiCloud.

        > Currently, device proxy resources are only supported on IoTDA **standard** or **enterprise** edition instance.
          When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
          the IoTDA service endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        space_id = config.require_object("spaceId")
        name = config.require_object("name")
        devices = config.require_object("devices")
        start_time = config.require_object("startTime")
        end_time = config.require_object("endTime")
        test = huaweicloud.iotda.DeviceProxy("test",
            space_id=space_id,
            name=name,
            devices=devices,
            effective_time_range={
                "start_time": start_time,
                "end_time": end_time,
            })
        ```

        ## Import

        The device proxy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/deviceProxy:DeviceProxy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param DeviceProxyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceProxyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 effective_time_range: Optional[pulumi.Input[Union['DeviceProxyEffectiveTimeRangeArgs', 'DeviceProxyEffectiveTimeRangeArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceProxyArgs.__new__(DeviceProxyArgs)

            if devices is None and not opts.urn:
                raise TypeError("Missing required property 'devices'")
            __props__.__dict__["devices"] = devices
            if effective_time_range is None and not opts.urn:
                raise TypeError("Missing required property 'effective_time_range'")
            __props__.__dict__["effective_time_range"] = effective_time_range
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if space_id is None and not opts.urn:
                raise TypeError("Missing required property 'space_id'")
            __props__.__dict__["space_id"] = space_id
        super(DeviceProxy, __self__).__init__(
            'huaweicloud:IoTDA/deviceProxy:DeviceProxy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            devices: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            effective_time_range: Optional[pulumi.Input[Union['DeviceProxyEffectiveTimeRangeArgs', 'DeviceProxyEffectiveTimeRangeArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            space_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DeviceProxy':
        """
        Get an existing DeviceProxy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] devices: Specifies the list of proxy device IDs. The number of IDs in the list is limited from
               `2` to `10`. All devices in the list share gateway permissions, which means that any sub device under any gateway in
               the list can go online through any gateway in the group and report data.
        :param pulumi.Input[Union['DeviceProxyEffectiveTimeRangeArgs', 'DeviceProxyEffectiveTimeRangeArgsDict']] effective_time_range: Specifies the validity period of the device proxy rule.
               The effective_time_range structure is documented below.
               
               <a name="IoTDA_effective_time_range"></a>
               The `effective_time_range` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the device proxy name. The valid length is limited from `1` to `64`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the device proxy belongs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceProxyState.__new__(_DeviceProxyState)

        __props__.__dict__["devices"] = devices
        __props__.__dict__["effective_time_range"] = effective_time_range
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["space_id"] = space_id
        return DeviceProxy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def devices(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of proxy device IDs. The number of IDs in the list is limited from
        `2` to `10`. All devices in the list share gateway permissions, which means that any sub device under any gateway in
        the list can go online through any gateway in the group and report data.
        """
        return pulumi.get(self, "devices")

    @_builtins.property
    @pulumi.getter(name="effectiveTimeRange")
    def effective_time_range(self) -> pulumi.Output['outputs.DeviceProxyEffectiveTimeRange']:
        """
        Specifies the validity period of the device proxy rule.
        The effective_time_range structure is documented below.

        <a name="IoTDA_effective_time_range"></a>
        The `effective_time_range` block supports:
        """
        return pulumi.get(self, "effective_time_range")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the device proxy name. The valid length is limited from `1` to `64`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the resource space ID to which the device proxy belongs.
        """
        return pulumi.get(self, "space_id")

