# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DataBacklogPolicyArgs', 'DataBacklogPolicy']

@pulumi.input_type
class DataBacklogPolicyArgs:
    def __init__(__self__, *,
                 backlog_size: Optional[pulumi.Input[_builtins.str]] = None,
                 backlog_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataBacklogPolicy resource.
        :param pulumi.Input[_builtins.str] backlog_size: Specifies the size of data backlog in bytes. The range of valid values is integers
               from `0` to `1,073,741,823`, defaults to `1,073,741,823` (`1` GB).
               + When `backlog_size` is set to `0`, it means there is no backlog.
        :param pulumi.Input[_builtins.str] backlog_time: Specifies the data backlog time in seconds. The range of valid values is integers
               from `0` to `86,399`, defaults to `86,399` (`1` day).
               + When `backlog_time` is set to `0`, it means there is no backlog.
               
               > If both `backlog_size` and `backlog_time` dimensions are configured, the dimension that reaches the threshold first
               shall prevail.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the data backlog policy. The length must not exceed
               `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the data backlog policy. The length must not exceed `256`, and
               only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if backlog_size is not None:
            pulumi.set(__self__, "backlog_size", backlog_size)
        if backlog_time is not None:
            pulumi.set(__self__, "backlog_time", backlog_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="backlogSize")
    def backlog_size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the size of data backlog in bytes. The range of valid values is integers
        from `0` to `1,073,741,823`, defaults to `1,073,741,823` (`1` GB).
        + When `backlog_size` is set to `0`, it means there is no backlog.
        """
        return pulumi.get(self, "backlog_size")

    @backlog_size.setter
    def backlog_size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backlog_size", value)

    @_builtins.property
    @pulumi.getter(name="backlogTime")
    def backlog_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data backlog time in seconds. The range of valid values is integers
        from `0` to `86,399`, defaults to `86,399` (`1` day).
        + When `backlog_time` is set to `0`, it means there is no backlog.

        > If both `backlog_size` and `backlog_time` dimensions are configured, the dimension that reaches the threshold first
        shall prevail.
        """
        return pulumi.get(self, "backlog_time")

    @backlog_time.setter
    def backlog_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backlog_time", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the data backlog policy. The length must not exceed
        `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the data backlog policy. The length must not exceed `256`, and
        only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DataBacklogPolicyState:
    def __init__(__self__, *,
                 backlog_size: Optional[pulumi.Input[_builtins.str]] = None,
                 backlog_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataBacklogPolicy resources.
        :param pulumi.Input[_builtins.str] backlog_size: Specifies the size of data backlog in bytes. The range of valid values is integers
               from `0` to `1,073,741,823`, defaults to `1,073,741,823` (`1` GB).
               + When `backlog_size` is set to `0`, it means there is no backlog.
        :param pulumi.Input[_builtins.str] backlog_time: Specifies the data backlog time in seconds. The range of valid values is integers
               from `0` to `86,399`, defaults to `86,399` (`1` day).
               + When `backlog_time` is set to `0`, it means there is no backlog.
               
               > If both `backlog_size` and `backlog_time` dimensions are configured, the dimension that reaches the threshold first
               shall prevail.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the data backlog policy. The length must not exceed
               `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the data backlog policy. The length must not exceed `256`, and
               only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if backlog_size is not None:
            pulumi.set(__self__, "backlog_size", backlog_size)
        if backlog_time is not None:
            pulumi.set(__self__, "backlog_time", backlog_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="backlogSize")
    def backlog_size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the size of data backlog in bytes. The range of valid values is integers
        from `0` to `1,073,741,823`, defaults to `1,073,741,823` (`1` GB).
        + When `backlog_size` is set to `0`, it means there is no backlog.
        """
        return pulumi.get(self, "backlog_size")

    @backlog_size.setter
    def backlog_size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backlog_size", value)

    @_builtins.property
    @pulumi.getter(name="backlogTime")
    def backlog_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data backlog time in seconds. The range of valid values is integers
        from `0` to `86,399`, defaults to `86,399` (`1` day).
        + When `backlog_time` is set to `0`, it means there is no backlog.

        > If both `backlog_size` and `backlog_time` dimensions are configured, the dimension that reaches the threshold first
        shall prevail.
        """
        return pulumi.get(self, "backlog_time")

    @backlog_time.setter
    def backlog_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backlog_time", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the data backlog policy. The length must not exceed
        `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the data backlog policy. The length must not exceed `256`, and
        only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:IoTDA/dataBacklogPolicy:DataBacklogPolicy")
class DataBacklogPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backlog_size: Optional[pulumi.Input[_builtins.str]] = None,
                 backlog_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an IoTDA data backlog policy resource within HuaweiCloud.

        > 1. A single tenant can create up to one data backlog policy under a single IoTDA instance.
        >      <br/>2. Before creating a data backlog policy, it is necessary to ensure that there is a data forwarding rule under
        >      the current IoTDA instance.
        >      <br/>3. After the successful creation of the data backlog policy, it will take effect for all data forwarding rules,
        >      covering the default backlog size (`1` GB) and default backlog time (`1` day) of all forwarding rules.
        >      <br/>4. When the maximum backlog (cache) size or backlog (cache) time is exceeded, the earliest unprocessed flow data
        >      will be discarded until the backlog (cache) size and time limits are met. Please consider carefully before using a
        >      data backlog policy and configuring a reasonable backlog size and time.

        > Currently, data backlog policy resources are only supported on IoTDA **standard** or **enterprise** edition
          instance. When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
          the IoTDA service endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        test = huaweicloud.iotda.DataBacklogPolicy("test", name=name)
        ```

        ## Import

        The data backlog policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/dataBacklogPolicy:DataBacklogPolicy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backlog_size: Specifies the size of data backlog in bytes. The range of valid values is integers
               from `0` to `1,073,741,823`, defaults to `1,073,741,823` (`1` GB).
               + When `backlog_size` is set to `0`, it means there is no backlog.
        :param pulumi.Input[_builtins.str] backlog_time: Specifies the data backlog time in seconds. The range of valid values is integers
               from `0` to `86,399`, defaults to `86,399` (`1` day).
               + When `backlog_time` is set to `0`, it means there is no backlog.
               
               > If both `backlog_size` and `backlog_time` dimensions are configured, the dimension that reaches the threshold first
               shall prevail.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the data backlog policy. The length must not exceed
               `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the data backlog policy. The length must not exceed `256`, and
               only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DataBacklogPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IoTDA data backlog policy resource within HuaweiCloud.

        > 1. A single tenant can create up to one data backlog policy under a single IoTDA instance.
        >      <br/>2. Before creating a data backlog policy, it is necessary to ensure that there is a data forwarding rule under
        >      the current IoTDA instance.
        >      <br/>3. After the successful creation of the data backlog policy, it will take effect for all data forwarding rules,
        >      covering the default backlog size (`1` GB) and default backlog time (`1` day) of all forwarding rules.
        >      <br/>4. When the maximum backlog (cache) size or backlog (cache) time is exceeded, the earliest unprocessed flow data
        >      will be discarded until the backlog (cache) size and time limits are met. Please consider carefully before using a
        >      data backlog policy and configuring a reasonable backlog size and time.

        > Currently, data backlog policy resources are only supported on IoTDA **standard** or **enterprise** edition
          instance. When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
          the IoTDA service endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        test = huaweicloud.iotda.DataBacklogPolicy("test", name=name)
        ```

        ## Import

        The data backlog policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/dataBacklogPolicy:DataBacklogPolicy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param DataBacklogPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataBacklogPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backlog_size: Optional[pulumi.Input[_builtins.str]] = None,
                 backlog_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataBacklogPolicyArgs.__new__(DataBacklogPolicyArgs)

            __props__.__dict__["backlog_size"] = backlog_size
            __props__.__dict__["backlog_time"] = backlog_time
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
        super(DataBacklogPolicy, __self__).__init__(
            'huaweicloud:IoTDA/dataBacklogPolicy:DataBacklogPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backlog_size: Optional[pulumi.Input[_builtins.str]] = None,
            backlog_time: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataBacklogPolicy':
        """
        Get an existing DataBacklogPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backlog_size: Specifies the size of data backlog in bytes. The range of valid values is integers
               from `0` to `1,073,741,823`, defaults to `1,073,741,823` (`1` GB).
               + When `backlog_size` is set to `0`, it means there is no backlog.
        :param pulumi.Input[_builtins.str] backlog_time: Specifies the data backlog time in seconds. The range of valid values is integers
               from `0` to `86,399`, defaults to `86,399` (`1` day).
               + When `backlog_time` is set to `0`, it means there is no backlog.
               
               > If both `backlog_size` and `backlog_time` dimensions are configured, the dimension that reaches the threshold first
               shall prevail.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the data backlog policy. The length must not exceed
               `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the data backlog policy. The length must not exceed `256`, and
               only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataBacklogPolicyState.__new__(_DataBacklogPolicyState)

        __props__.__dict__["backlog_size"] = backlog_size
        __props__.__dict__["backlog_time"] = backlog_time
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        return DataBacklogPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backlogSize")
    def backlog_size(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the size of data backlog in bytes. The range of valid values is integers
        from `0` to `1,073,741,823`, defaults to `1,073,741,823` (`1` GB).
        + When `backlog_size` is set to `0`, it means there is no backlog.
        """
        return pulumi.get(self, "backlog_size")

    @_builtins.property
    @pulumi.getter(name="backlogTime")
    def backlog_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the data backlog time in seconds. The range of valid values is integers
        from `0` to `86,399`, defaults to `86,399` (`1` day).
        + When `backlog_time` is set to `0`, it means there is no backlog.

        > If both `backlog_size` and `backlog_time` dimensions are configured, the dimension that reaches the threshold first
        shall prevail.
        """
        return pulumi.get(self, "backlog_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of the data backlog policy. The length must not exceed
        `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the data backlog policy. The length must not exceed `256`, and
        only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

