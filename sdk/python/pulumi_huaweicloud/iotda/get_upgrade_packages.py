# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetUpgradePackagesResult',
    'AwaitableGetUpgradePackagesResult',
    'get_upgrade_packages',
    'get_upgrade_packages_output',
]

@pulumi.output_type
class GetUpgradePackagesResult:
    """
    A collection of values returned by getUpgradePackages.
    """
    def __init__(__self__, id=None, packages=None, product_id=None, region=None, space_id=None, type=None, version=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if packages and not isinstance(packages, list):
            raise TypeError("Expected argument 'packages' to be a list")
        pulumi.set(__self__, "packages", packages)
        if product_id and not isinstance(product_id, str):
            raise TypeError("Expected argument 'product_id' to be a str")
        pulumi.set(__self__, "product_id", product_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def packages(self) -> Sequence['outputs.GetUpgradePackagesPackageResult']:
        """
        The list of the upgrade packages.
        """
        return pulumi.get(self, "packages")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[_builtins.str]:
        """
        The product ID associated with the upgrade package.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[_builtins.str]:
        """
        The resource space ID to which the upgrade package belongs.
        """
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the upgrade package.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        The version number of the upgrade package.
        """
        return pulumi.get(self, "version")


class AwaitableGetUpgradePackagesResult(GetUpgradePackagesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUpgradePackagesResult(
            id=self.id,
            packages=self.packages,
            product_id=self.product_id,
            region=self.region,
            space_id=self.space_id,
            type=self.type,
            version=self.version)


def get_upgrade_packages(product_id: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         space_id: Optional[_builtins.str] = None,
                         type: Optional[_builtins.str] = None,
                         version: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUpgradePackagesResult:
    """
    Use this data source to get a list of the upgrade packages.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    type = config.require_object("type")
    test = huaweicloud.IoTDA.get_upgrade_packages(type=type)
    ```


    :param _builtins.str product_id: Specifies the product ID associated with the upgrade package.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the resource space ID to which the upgrade packages belong.
    :param _builtins.str type: Specifies the type of the upgrade package.
           The valid values are as follows:
           + **softwarePackage**
           + **firmwarePackage**
    :param _builtins.str version: Specifies the version number of the upgrade package.
    """
    __args__ = dict()
    __args__['productId'] = product_id
    __args__['region'] = region
    __args__['spaceId'] = space_id
    __args__['type'] = type
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getUpgradePackages:getUpgradePackages', __args__, opts=opts, typ=GetUpgradePackagesResult).value

    return AwaitableGetUpgradePackagesResult(
        id=pulumi.get(__ret__, 'id'),
        packages=pulumi.get(__ret__, 'packages'),
        product_id=pulumi.get(__ret__, 'product_id'),
        region=pulumi.get(__ret__, 'region'),
        space_id=pulumi.get(__ret__, 'space_id'),
        type=pulumi.get(__ret__, 'type'),
        version=pulumi.get(__ret__, 'version'))
def get_upgrade_packages_output(product_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                space_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                type: Optional[pulumi.Input[_builtins.str]] = None,
                                version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUpgradePackagesResult]:
    """
    Use this data source to get a list of the upgrade packages.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    type = config.require_object("type")
    test = huaweicloud.IoTDA.get_upgrade_packages(type=type)
    ```


    :param _builtins.str product_id: Specifies the product ID associated with the upgrade package.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the resource space ID to which the upgrade packages belong.
    :param _builtins.str type: Specifies the type of the upgrade package.
           The valid values are as follows:
           + **softwarePackage**
           + **firmwarePackage**
    :param _builtins.str version: Specifies the version number of the upgrade package.
    """
    __args__ = dict()
    __args__['productId'] = product_id
    __args__['region'] = region
    __args__['spaceId'] = space_id
    __args__['type'] = type
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getUpgradePackages:getUpgradePackages', __args__, opts=opts, typ=GetUpgradePackagesResult)
    return __ret__.apply(lambda __response__: GetUpgradePackagesResult(
        id=pulumi.get(__response__, 'id'),
        packages=pulumi.get(__response__, 'packages'),
        product_id=pulumi.get(__response__, 'product_id'),
        region=pulumi.get(__response__, 'region'),
        space_id=pulumi.get(__response__, 'space_id'),
        type=pulumi.get(__response__, 'type'),
        version=pulumi.get(__response__, 'version')))
