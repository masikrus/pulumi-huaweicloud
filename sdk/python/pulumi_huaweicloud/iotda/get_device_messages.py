# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDeviceMessagesResult',
    'AwaitableGetDeviceMessagesResult',
    'get_device_messages',
    'get_device_messages_output',
]

@pulumi.output_type
class GetDeviceMessagesResult:
    """
    A collection of values returned by getDeviceMessages.
    """
    def __init__(__self__, device_id=None, id=None, messages=None, region=None):
        if device_id and not isinstance(device_id, str):
            raise TypeError("Expected argument 'device_id' to be a str")
        pulumi.set(__self__, "device_id", device_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if messages and not isinstance(messages, list):
            raise TypeError("Expected argument 'messages' to be a list")
        pulumi.set(__self__, "messages", messages)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> _builtins.str:
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def messages(self) -> Sequence['outputs.GetDeviceMessagesMessageResult']:
        """
        All device messages that match the filter parameters.
        The messages structure is documented below.
        """
        return pulumi.get(self, "messages")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetDeviceMessagesResult(GetDeviceMessagesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeviceMessagesResult(
            device_id=self.device_id,
            id=self.id,
            messages=self.messages,
            region=self.region)


def get_device_messages(device_id: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeviceMessagesResult:
    """
    Use this data source to get the list of IoTDA device messages within HuaweiCloud.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
      the IoTDA service endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    device_id = config.require_object("deviceId")
    test = huaweicloud.IoTDA.get_device_messages(device_id=device_id)
    ```


    :param _builtins.str device_id: Specifies the device ID.
    :param _builtins.str region: Specifies the region in which to query the device messages.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['deviceId'] = device_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getDeviceMessages:getDeviceMessages', __args__, opts=opts, typ=GetDeviceMessagesResult).value

    return AwaitableGetDeviceMessagesResult(
        device_id=pulumi.get(__ret__, 'device_id'),
        id=pulumi.get(__ret__, 'id'),
        messages=pulumi.get(__ret__, 'messages'),
        region=pulumi.get(__ret__, 'region'))
def get_device_messages_output(device_id: Optional[pulumi.Input[_builtins.str]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDeviceMessagesResult]:
    """
    Use this data source to get the list of IoTDA device messages within HuaweiCloud.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
      the IoTDA service endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    device_id = config.require_object("deviceId")
    test = huaweicloud.IoTDA.get_device_messages(device_id=device_id)
    ```


    :param _builtins.str device_id: Specifies the device ID.
    :param _builtins.str region: Specifies the region in which to query the device messages.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['deviceId'] = device_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getDeviceMessages:getDeviceMessages', __args__, opts=opts, typ=GetDeviceMessagesResult)
    return __ret__.apply(lambda __response__: GetDeviceMessagesResult(
        device_id=pulumi.get(__response__, 'device_id'),
        id=pulumi.get(__response__, 'id'),
        messages=pulumi.get(__response__, 'messages'),
        region=pulumi.get(__response__, 'region')))
