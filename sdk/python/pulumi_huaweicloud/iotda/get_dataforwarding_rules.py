# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataforwardingRulesResult',
    'AwaitableGetDataforwardingRulesResult',
    'get_dataforwarding_rules',
    'get_dataforwarding_rules_output',
]

@pulumi.output_type
class GetDataforwardingRulesResult:
    """
    A collection of values returned by getDataforwardingRules.
    """
    def __init__(__self__, app_type=None, enabled=None, id=None, name=None, region=None, resource=None, rule_id=None, rules=None, space_id=None, trigger=None):
        if app_type and not isinstance(app_type, str):
            raise TypeError("Expected argument 'app_type' to be a str")
        pulumi.set(__self__, "app_type", app_type)
        if enabled and not isinstance(enabled, str):
            raise TypeError("Expected argument 'enabled' to be a str")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource and not isinstance(resource, str):
            raise TypeError("Expected argument 'resource' to be a str")
        pulumi.set(__self__, "resource", resource)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if trigger and not isinstance(trigger, str):
            raise TypeError("Expected argument 'trigger' to be a str")
        pulumi.set(__self__, "trigger", trigger)

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> Optional[_builtins.str]:
        """
        The validity scope of the dataforwarding rule.
        """
        return pulumi.get(self, "app_type")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.str]:
        """
        Whether to enable the dataforwarding rule.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the dataforwarding rule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[_builtins.str]:
        """
        The data source of the dataforwarding rule.
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetDataforwardingRulesRuleResult']:
        """
        All rules that match the filter parameters.
        The rules structure is documented below.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[_builtins.str]:
        """
        The ID of the resource space to which the dataforwarding rule belongs.
        """
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter
    def trigger(self) -> Optional[_builtins.str]:
        """
        The triggering event of the data source corresponding to the dataforwarding rule.
        """
        return pulumi.get(self, "trigger")


class AwaitableGetDataforwardingRulesResult(GetDataforwardingRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataforwardingRulesResult(
            app_type=self.app_type,
            enabled=self.enabled,
            id=self.id,
            name=self.name,
            region=self.region,
            resource=self.resource,
            rule_id=self.rule_id,
            rules=self.rules,
            space_id=self.space_id,
            trigger=self.trigger)


def get_dataforwarding_rules(app_type: Optional[_builtins.str] = None,
                             enabled: Optional[_builtins.str] = None,
                             name: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             resource: Optional[_builtins.str] = None,
                             rule_id: Optional[_builtins.str] = None,
                             space_id: Optional[_builtins.str] = None,
                             trigger: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataforwardingRulesResult:
    """
    Use this data source to get the list of IoTDA dataforwarding rules.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    rule_name = config.require_object("ruleName")
    test = huaweicloud.IoTDA.get_dataforwarding_rules(name=rule_name)
    ```


    :param _builtins.str app_type: Specifies the validity scope of the dataforwarding rule.
           The valid values are as follows:
           + **GLOBAL**: The validity scope is tenant level.
           + **APP**: The validity scope is resource space level.
           
           > If the `app_type` value is **APP**, this parameter can be used together with the `space_id` to query
           the dataforwarding rules in the corresponding resource space, if not associated with the `space_id`,
           will be query the dataforwarding rules in the default resource space.
    :param _builtins.str enabled: Specifies whether to enable the dataforwarding rule.
           The value can be **true** or **false**.
    :param _builtins.str name: Specifies the name of the dataforwarding rule.
    :param _builtins.str region: Specifies the region in which to query the dataforwarding rules.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource: Specifies the data source of the dataforwarding rule.
           This parameter must be used together with `trigger`. The valid values are as follows:
           + **device**
           + **device.property**
           + **device.message**
           + **device.message.status**
           + **device.status**
           + **batchtask**
           + **product**
           + **device.command.status**
    :param _builtins.str rule_id: Specifies the ID of the dataforwarding rule.
    :param _builtins.str space_id: Specifies the ID of the resource space to which the dataforwarding rule belongs.
           
           > If use this parameter to query, the parameter `app_type` must be set to **APP**.
    :param _builtins.str trigger: Specifies the triggering event of the data source corresponding to
           the dataforwarding rule. This parameter must be used together with `resource`. The valid values are as follows:
           + **device:create**: Device added.
           + **device:delete**: Device deleted.
           + **device:update**: Device updated.
           + **device.status:update**: Device status changed.
           + **device.property:report**: Device property reported.
           + **device.message:report**: Device message reported.
           + **device.message.status:update**: Device message status changed.
           + **batchtask:update**: Batch task status changed.
           + **product:create**: Product added.
           + **product:delete**: Product deleted.
           + **product:update**: Product updated.
           + **device.command.status:update**: Device asynchronous command status updated.
    """
    __args__ = dict()
    __args__['appType'] = app_type
    __args__['enabled'] = enabled
    __args__['name'] = name
    __args__['region'] = region
    __args__['resource'] = resource
    __args__['ruleId'] = rule_id
    __args__['spaceId'] = space_id
    __args__['trigger'] = trigger
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getDataforwardingRules:getDataforwardingRules', __args__, opts=opts, typ=GetDataforwardingRulesResult).value

    return AwaitableGetDataforwardingRulesResult(
        app_type=pulumi.get(__ret__, 'app_type'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        resource=pulumi.get(__ret__, 'resource'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        rules=pulumi.get(__ret__, 'rules'),
        space_id=pulumi.get(__ret__, 'space_id'),
        trigger=pulumi.get(__ret__, 'trigger'))
def get_dataforwarding_rules_output(app_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    enabled: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    resource: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    rule_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    space_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    trigger: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataforwardingRulesResult]:
    """
    Use this data source to get the list of IoTDA dataforwarding rules.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    rule_name = config.require_object("ruleName")
    test = huaweicloud.IoTDA.get_dataforwarding_rules(name=rule_name)
    ```


    :param _builtins.str app_type: Specifies the validity scope of the dataforwarding rule.
           The valid values are as follows:
           + **GLOBAL**: The validity scope is tenant level.
           + **APP**: The validity scope is resource space level.
           
           > If the `app_type` value is **APP**, this parameter can be used together with the `space_id` to query
           the dataforwarding rules in the corresponding resource space, if not associated with the `space_id`,
           will be query the dataforwarding rules in the default resource space.
    :param _builtins.str enabled: Specifies whether to enable the dataforwarding rule.
           The value can be **true** or **false**.
    :param _builtins.str name: Specifies the name of the dataforwarding rule.
    :param _builtins.str region: Specifies the region in which to query the dataforwarding rules.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource: Specifies the data source of the dataforwarding rule.
           This parameter must be used together with `trigger`. The valid values are as follows:
           + **device**
           + **device.property**
           + **device.message**
           + **device.message.status**
           + **device.status**
           + **batchtask**
           + **product**
           + **device.command.status**
    :param _builtins.str rule_id: Specifies the ID of the dataforwarding rule.
    :param _builtins.str space_id: Specifies the ID of the resource space to which the dataforwarding rule belongs.
           
           > If use this parameter to query, the parameter `app_type` must be set to **APP**.
    :param _builtins.str trigger: Specifies the triggering event of the data source corresponding to
           the dataforwarding rule. This parameter must be used together with `resource`. The valid values are as follows:
           + **device:create**: Device added.
           + **device:delete**: Device deleted.
           + **device:update**: Device updated.
           + **device.status:update**: Device status changed.
           + **device.property:report**: Device property reported.
           + **device.message:report**: Device message reported.
           + **device.message.status:update**: Device message status changed.
           + **batchtask:update**: Batch task status changed.
           + **product:create**: Product added.
           + **product:delete**: Product deleted.
           + **product:update**: Product updated.
           + **device.command.status:update**: Device asynchronous command status updated.
    """
    __args__ = dict()
    __args__['appType'] = app_type
    __args__['enabled'] = enabled
    __args__['name'] = name
    __args__['region'] = region
    __args__['resource'] = resource
    __args__['ruleId'] = rule_id
    __args__['spaceId'] = space_id
    __args__['trigger'] = trigger
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getDataforwardingRules:getDataforwardingRules', __args__, opts=opts, typ=GetDataforwardingRulesResult)
    return __ret__.apply(lambda __response__: GetDataforwardingRulesResult(
        app_type=pulumi.get(__response__, 'app_type'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        resource=pulumi.get(__response__, 'resource'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        rules=pulumi.get(__response__, 'rules'),
        space_id=pulumi.get(__response__, 'space_id'),
        trigger=pulumi.get(__response__, 'trigger')))
