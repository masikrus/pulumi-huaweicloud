# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAmqpsResult',
    'AwaitableGetAmqpsResult',
    'get_amqps',
    'get_amqps_output',
]

@pulumi.output_type
class GetAmqpsResult:
    """
    A collection of values returned by getAmqps.
    """
    def __init__(__self__, id=None, name=None, queue_id=None, queues=None, region=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if queue_id and not isinstance(queue_id, str):
            raise TypeError("Expected argument 'queue_id' to be a str")
        pulumi.set(__self__, "queue_id", queue_id)
        if queues and not isinstance(queues, list):
            raise TypeError("Expected argument 'queues' to be a list")
        pulumi.set(__self__, "queues", queues)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the AMQP queue.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "queue_id")

    @_builtins.property
    @pulumi.getter
    def queues(self) -> Sequence['outputs.GetAmqpsQueueResult']:
        """
        The list of the AMQP queues.
        The queues structure is documented below.
        """
        return pulumi.get(self, "queues")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetAmqpsResult(GetAmqpsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAmqpsResult(
            id=self.id,
            name=self.name,
            queue_id=self.queue_id,
            queues=self.queues,
            region=self.region)


def get_amqps(name: Optional[_builtins.str] = None,
              queue_id: Optional[_builtins.str] = None,
              region: Optional[_builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAmqpsResult:
    """
    Use this data source to get the list of the IoTDA AMQP queues within HuaweiCloud.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
      the IoTDA service endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    queue_name = config.require_object("queueName")
    test = huaweicloud.IoTDA.get_amqps(name=queue_name)
    ```


    :param _builtins.str name: Specifies the name of the AMQP queue.
    :param _builtins.str queue_id: Specifies the ID of the AMQP queue.
    :param _builtins.str region: Specifies the region in which to query the AMQP queues.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['queueId'] = queue_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getAmqps:getAmqps', __args__, opts=opts, typ=GetAmqpsResult).value

    return AwaitableGetAmqpsResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        queue_id=pulumi.get(__ret__, 'queue_id'),
        queues=pulumi.get(__ret__, 'queues'),
        region=pulumi.get(__ret__, 'region'))
def get_amqps_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     queue_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAmqpsResult]:
    """
    Use this data source to get the list of the IoTDA AMQP queues within HuaweiCloud.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
      the IoTDA service endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    queue_name = config.require_object("queueName")
    test = huaweicloud.IoTDA.get_amqps(name=queue_name)
    ```


    :param _builtins.str name: Specifies the name of the AMQP queue.
    :param _builtins.str queue_id: Specifies the ID of the AMQP queue.
    :param _builtins.str region: Specifies the region in which to query the AMQP queues.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['queueId'] = queue_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getAmqps:getAmqps', __args__, opts=opts, typ=GetAmqpsResult)
    return __ret__.apply(lambda __response__: GetAmqpsResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        queue_id=pulumi.get(__response__, 'queue_id'),
        queues=pulumi.get(__response__, 'queues'),
        region=pulumi.get(__response__, 'region')))
