# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UpgradePackageArgs', 'UpgradePackage']

@pulumi.input_type
class UpgradePackageArgs:
    def __init__(__self__, *,
                 file_locations: pulumi.Input[Sequence[pulumi.Input['UpgradePackageFileLocationArgs']]],
                 product_id: pulumi.Input[_builtins.str],
                 space_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 custom_info: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 support_source_versions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a UpgradePackage resource.
        :param pulumi.Input[Sequence[pulumi.Input['UpgradePackageFileLocationArgs']]] file_locations: Specifies the location of the upgrade package.
               Changing this parameter will create a new resource.
               The file_location structure is documented below.
        :param pulumi.Input[_builtins.str] product_id: Specifies the product ID associated with the upgrade package. The length
               does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-) are allowed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the upgrade package belongs.
               The length does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-)
               are allowed. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the upgrade package type.
               Changing this parameter will create a new resource.
               The valid value are as follows:
               + `softwarePackage`: Software package.
               + `firmwarePackage`: Firmware package.
        :param pulumi.Input[_builtins.str] version: Specifies the version number of the upgrade package. The length does not
               exceed `256`, and only combinations of letters, numbers, underscores (_), connectors (-), and English dots (.)
               are allowed. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] custom_info: Specifies the custom information to be pushed to the device.
               After creating the upgrade package and completing the upgrade task, when the IoT platform issues an upgrade
               notification to the device, it will send the customized information to the device. The length does not exceed `4096`.
               Changing this parameter will create a new resource.
               
               <a name="iotda_upgrade_package_file_location"></a>
               The `file_location` block supports:
        :param pulumi.Input[_builtins.str] description: Specifies the description of the upgrade package. The length does not
               exceed `1024`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where OBS is located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] support_source_versions: Specifies a list of device source version numbers supported for
               upgrading this version pack. This is a list of string. The device source version number only allows combinations of
               letters, numbers, underscores (_), connectors (-), and English dots (.).
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "file_locations", file_locations)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if custom_info is not None:
            pulumi.set(__self__, "custom_info", custom_info)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if support_source_versions is not None:
            pulumi.set(__self__, "support_source_versions", support_source_versions)

    @_builtins.property
    @pulumi.getter(name="fileLocations")
    def file_locations(self) -> pulumi.Input[Sequence[pulumi.Input['UpgradePackageFileLocationArgs']]]:
        """
        Specifies the location of the upgrade package.
        Changing this parameter will create a new resource.
        The file_location structure is documented below.
        """
        return pulumi.get(self, "file_locations")

    @file_locations.setter
    def file_locations(self, value: pulumi.Input[Sequence[pulumi.Input['UpgradePackageFileLocationArgs']]]):
        pulumi.set(self, "file_locations", value)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the product ID associated with the upgrade package. The length
        does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-) are allowed.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_id", value)

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource space ID to which the upgrade package belongs.
        The length does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-)
        are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "space_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the upgrade package type.
        Changing this parameter will create a new resource.
        The valid value are as follows:
        + `softwarePackage`: Software package.
        + `firmwarePackage`: Firmware package.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the version number of the upgrade package. The length does not
        exceed `256`, and only combinations of letters, numbers, underscores (_), connectors (-), and English dots (.)
        are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="customInfo")
    def custom_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom information to be pushed to the device.
        After creating the upgrade package and completing the upgrade task, when the IoT platform issues an upgrade
        notification to the device, it will send the customized information to the device. The length does not exceed `4096`.
        Changing this parameter will create a new resource.

        <a name="iotda_upgrade_package_file_location"></a>
        The `file_location` block supports:
        """
        return pulumi.get(self, "custom_info")

    @custom_info.setter
    def custom_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "custom_info", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the upgrade package. The length does not
        exceed `1024`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where OBS is located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="supportSourceVersions")
    def support_source_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies a list of device source version numbers supported for
        upgrading this version pack. This is a list of string. The device source version number only allows combinations of
        letters, numbers, underscores (_), connectors (-), and English dots (.).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "support_source_versions")

    @support_source_versions.setter
    def support_source_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "support_source_versions", value)


@pulumi.input_type
class _UpgradePackageState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_info: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 file_locations: Optional[pulumi.Input[Sequence[pulumi.Input['UpgradePackageFileLocationArgs']]]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 support_source_versions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering UpgradePackage resources.
        :param pulumi.Input[_builtins.str] created_at: The time for uploading the upgrade package to the IoT platform.
               The format is **yyyyMMdd'T'HHmmss'Z**. e.g. **20190528T153000Z**.
        :param pulumi.Input[_builtins.str] custom_info: Specifies the custom information to be pushed to the device.
               After creating the upgrade package and completing the upgrade task, when the IoT platform issues an upgrade
               notification to the device, it will send the customized information to the device. The length does not exceed `4096`.
               Changing this parameter will create a new resource.
               
               <a name="iotda_upgrade_package_file_location"></a>
               The `file_location` block supports:
        :param pulumi.Input[_builtins.str] description: Specifies the description of the upgrade package. The length does not
               exceed `1024`. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['UpgradePackageFileLocationArgs']]] file_locations: Specifies the location of the upgrade package.
               Changing this parameter will create a new resource.
               The file_location structure is documented below.
        :param pulumi.Input[_builtins.str] product_id: Specifies the product ID associated with the upgrade package. The length
               does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-) are allowed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where OBS is located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the upgrade package belongs.
               The length does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-)
               are allowed. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] support_source_versions: Specifies a list of device source version numbers supported for
               upgrading this version pack. This is a list of string. The device source version number only allows combinations of
               letters, numbers, underscores (_), connectors (-), and English dots (.).
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the upgrade package type.
               Changing this parameter will create a new resource.
               The valid value are as follows:
               + `softwarePackage`: Software package.
               + `firmwarePackage`: Firmware package.
        :param pulumi.Input[_builtins.str] version: Specifies the version number of the upgrade package. The length does not
               exceed `256`, and only combinations of letters, numbers, underscores (_), connectors (-), and English dots (.)
               are allowed. Changing this parameter will create a new resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if custom_info is not None:
            pulumi.set(__self__, "custom_info", custom_info)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if file_locations is not None:
            pulumi.set(__self__, "file_locations", file_locations)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if support_source_versions is not None:
            pulumi.set(__self__, "support_source_versions", support_source_versions)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time for uploading the upgrade package to the IoT platform.
        The format is **yyyyMMdd'T'HHmmss'Z**. e.g. **20190528T153000Z**.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="customInfo")
    def custom_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom information to be pushed to the device.
        After creating the upgrade package and completing the upgrade task, when the IoT platform issues an upgrade
        notification to the device, it will send the customized information to the device. The length does not exceed `4096`.
        Changing this parameter will create a new resource.

        <a name="iotda_upgrade_package_file_location"></a>
        The `file_location` block supports:
        """
        return pulumi.get(self, "custom_info")

    @custom_info.setter
    def custom_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "custom_info", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the upgrade package. The length does not
        exceed `1024`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="fileLocations")
    def file_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UpgradePackageFileLocationArgs']]]]:
        """
        Specifies the location of the upgrade package.
        Changing this parameter will create a new resource.
        The file_location structure is documented below.
        """
        return pulumi.get(self, "file_locations")

    @file_locations.setter
    def file_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UpgradePackageFileLocationArgs']]]]):
        pulumi.set(self, "file_locations", value)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the product ID associated with the upgrade package. The length
        does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-) are allowed.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "product_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where OBS is located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource space ID to which the upgrade package belongs.
        The length does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-)
        are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_id", value)

    @_builtins.property
    @pulumi.getter(name="supportSourceVersions")
    def support_source_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies a list of device source version numbers supported for
        upgrading this version pack. This is a list of string. The device source version number only allows combinations of
        letters, numbers, underscores (_), connectors (-), and English dots (.).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "support_source_versions")

    @support_source_versions.setter
    def support_source_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "support_source_versions", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the upgrade package type.
        Changing this parameter will create a new resource.
        The valid value are as follows:
        + `softwarePackage`: Software package.
        + `firmwarePackage`: Firmware package.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version number of the upgrade package. The length does not
        exceed `256`, and only combinations of letters, numbers, underscores (_), connectors (-), and English dots (.)
        are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("huaweicloud:IoTDA/upgradePackage:UpgradePackage")
class UpgradePackage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_info: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 file_locations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UpgradePackageFileLocationArgs', 'UpgradePackageFileLocationArgsDict']]]]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 support_source_versions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an IoTDA OTA upgrade package within HuaweiCloud.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
        endpoint in `provider` block.
        You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
        to view the HTTPS application access address. An example of the access address might be
        **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
        `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Import

        The OTA upgrade package can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/upgradePackage:UpgradePackage test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] custom_info: Specifies the custom information to be pushed to the device.
               After creating the upgrade package and completing the upgrade task, when the IoT platform issues an upgrade
               notification to the device, it will send the customized information to the device. The length does not exceed `4096`.
               Changing this parameter will create a new resource.
               
               <a name="iotda_upgrade_package_file_location"></a>
               The `file_location` block supports:
        :param pulumi.Input[_builtins.str] description: Specifies the description of the upgrade package. The length does not
               exceed `1024`. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['UpgradePackageFileLocationArgs', 'UpgradePackageFileLocationArgsDict']]]] file_locations: Specifies the location of the upgrade package.
               Changing this parameter will create a new resource.
               The file_location structure is documented below.
        :param pulumi.Input[_builtins.str] product_id: Specifies the product ID associated with the upgrade package. The length
               does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-) are allowed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where OBS is located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the upgrade package belongs.
               The length does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-)
               are allowed. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] support_source_versions: Specifies a list of device source version numbers supported for
               upgrading this version pack. This is a list of string. The device source version number only allows combinations of
               letters, numbers, underscores (_), connectors (-), and English dots (.).
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the upgrade package type.
               Changing this parameter will create a new resource.
               The valid value are as follows:
               + `softwarePackage`: Software package.
               + `firmwarePackage`: Firmware package.
        :param pulumi.Input[_builtins.str] version: Specifies the version number of the upgrade package. The length does not
               exceed `256`, and only combinations of letters, numbers, underscores (_), connectors (-), and English dots (.)
               are allowed. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UpgradePackageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IoTDA OTA upgrade package within HuaweiCloud.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
        endpoint in `provider` block.
        You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
        to view the HTTPS application access address. An example of the access address might be
        **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
        `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Import

        The OTA upgrade package can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/upgradePackage:UpgradePackage test <id>
        ```

        :param str resource_name: The name of the resource.
        :param UpgradePackageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UpgradePackageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_info: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 file_locations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UpgradePackageFileLocationArgs', 'UpgradePackageFileLocationArgsDict']]]]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 support_source_versions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UpgradePackageArgs.__new__(UpgradePackageArgs)

            __props__.__dict__["custom_info"] = custom_info
            __props__.__dict__["description"] = description
            if file_locations is None and not opts.urn:
                raise TypeError("Missing required property 'file_locations'")
            __props__.__dict__["file_locations"] = file_locations
            if product_id is None and not opts.urn:
                raise TypeError("Missing required property 'product_id'")
            __props__.__dict__["product_id"] = product_id
            __props__.__dict__["region"] = region
            if space_id is None and not opts.urn:
                raise TypeError("Missing required property 'space_id'")
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["support_source_versions"] = support_source_versions
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["created_at"] = None
        super(UpgradePackage, __self__).__init__(
            'huaweicloud:IoTDA/upgradePackage:UpgradePackage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            custom_info: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            file_locations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UpgradePackageFileLocationArgs', 'UpgradePackageFileLocationArgsDict']]]]] = None,
            product_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            space_id: Optional[pulumi.Input[_builtins.str]] = None,
            support_source_versions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'UpgradePackage':
        """
        Get an existing UpgradePackage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The time for uploading the upgrade package to the IoT platform.
               The format is **yyyyMMdd'T'HHmmss'Z**. e.g. **20190528T153000Z**.
        :param pulumi.Input[_builtins.str] custom_info: Specifies the custom information to be pushed to the device.
               After creating the upgrade package and completing the upgrade task, when the IoT platform issues an upgrade
               notification to the device, it will send the customized information to the device. The length does not exceed `4096`.
               Changing this parameter will create a new resource.
               
               <a name="iotda_upgrade_package_file_location"></a>
               The `file_location` block supports:
        :param pulumi.Input[_builtins.str] description: Specifies the description of the upgrade package. The length does not
               exceed `1024`. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['UpgradePackageFileLocationArgs', 'UpgradePackageFileLocationArgsDict']]]] file_locations: Specifies the location of the upgrade package.
               Changing this parameter will create a new resource.
               The file_location structure is documented below.
        :param pulumi.Input[_builtins.str] product_id: Specifies the product ID associated with the upgrade package. The length
               does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-) are allowed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where OBS is located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the upgrade package belongs.
               The length does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-)
               are allowed. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] support_source_versions: Specifies a list of device source version numbers supported for
               upgrading this version pack. This is a list of string. The device source version number only allows combinations of
               letters, numbers, underscores (_), connectors (-), and English dots (.).
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the upgrade package type.
               Changing this parameter will create a new resource.
               The valid value are as follows:
               + `softwarePackage`: Software package.
               + `firmwarePackage`: Firmware package.
        :param pulumi.Input[_builtins.str] version: Specifies the version number of the upgrade package. The length does not
               exceed `256`, and only combinations of letters, numbers, underscores (_), connectors (-), and English dots (.)
               are allowed. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UpgradePackageState.__new__(_UpgradePackageState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["custom_info"] = custom_info
        __props__.__dict__["description"] = description
        __props__.__dict__["file_locations"] = file_locations
        __props__.__dict__["product_id"] = product_id
        __props__.__dict__["region"] = region
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["support_source_versions"] = support_source_versions
        __props__.__dict__["type"] = type
        __props__.__dict__["version"] = version
        return UpgradePackage(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time for uploading the upgrade package to the IoT platform.
        The format is **yyyyMMdd'T'HHmmss'Z**. e.g. **20190528T153000Z**.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="customInfo")
    def custom_info(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the custom information to be pushed to the device.
        After creating the upgrade package and completing the upgrade task, when the IoT platform issues an upgrade
        notification to the device, it will send the customized information to the device. The length does not exceed `4096`.
        Changing this parameter will create a new resource.

        <a name="iotda_upgrade_package_file_location"></a>
        The `file_location` block supports:
        """
        return pulumi.get(self, "custom_info")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the upgrade package. The length does not
        exceed `1024`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="fileLocations")
    def file_locations(self) -> pulumi.Output[Sequence['outputs.UpgradePackageFileLocation']]:
        """
        Specifies the location of the upgrade package.
        Changing this parameter will create a new resource.
        The file_location structure is documented below.
        """
        return pulumi.get(self, "file_locations")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the product ID associated with the upgrade package. The length
        does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-) are allowed.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where OBS is located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the resource space ID to which the upgrade package belongs.
        The length does not exceed `36`, and only combinations of letters, numbers, underscores (_), and connectors (-)
        are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter(name="supportSourceVersions")
    def support_source_versions(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies a list of device source version numbers supported for
        upgrading this version pack. This is a list of string. The device source version number only allows combinations of
        letters, numbers, underscores (_), connectors (-), and English dots (.).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "support_source_versions")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the upgrade package type.
        Changing this parameter will create a new resource.
        The valid value are as follows:
        + `softwarePackage`: Software package.
        + `firmwarePackage`: Firmware package.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the version number of the upgrade package. The length does not
        exceed `256`, and only combinations of letters, numbers, underscores (_), connectors (-), and English dots (.)
        are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version")

