# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DeviceAsyncCommandArgs', 'DeviceAsyncCommand']

@pulumi.input_type
class DeviceAsyncCommandArgs:
    def __init__(__self__, *,
                 device_id: pulumi.Input[_builtins.str],
                 send_strategy: pulumi.Input[_builtins.str],
                 expire_time: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 paras: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DeviceAsyncCommand resource.
        :param pulumi.Input[_builtins.str] device_id: Specifies the ID of the device to which the command is delivered.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] send_strategy: Specifies the delivery policy.
               The valid values are as follows:
               + **immediately**: The command is delivered immediately.
               + **delay**: The command is cached and delivered after the device reports data or goes online.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] expire_time: Specifies the duration of caching commands on the IoT platform.
               This parameter is valid only when `send_strategy` is set to **delay**. The unit is second.
               If `expire_time` is set to **0** or not specified, the command is cached for `24` hours (`86,400` seconds) by default,
               and the maximum cache duration is `2` days.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the command name, which is defined in the product model
               associated with the device.
               This parameter is mandatory if the device requires codecs to parse commands.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] paras: Specifies the command executed by the device.
               If `service_id` is specified, each key is the parameter in commands in the product model.
               If `service_id` is left empty, the key can be customized.
               The maximum size of the request object is `256` KB.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] service_id: Specifies the ID of the device service to which the device command belongs,
               which is defined in the product model associated with the device.
               This parameter is mandatory if the device requires codecs to parse commands.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "send_strategy", send_strategy)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if paras is not None:
            pulumi.set(__self__, "paras", paras)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the device to which the command is delivered.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter(name="sendStrategy")
    def send_strategy(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the delivery policy.
        The valid values are as follows:
        + **immediately**: The command is delivered immediately.
        + **delay**: The command is cached and delivered after the device reports data or goes online.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "send_strategy")

    @send_strategy.setter
    def send_strategy(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "send_strategy", value)

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the duration of caching commands on the IoT platform.
        This parameter is valid only when `send_strategy` is set to **delay**. The unit is second.
        If `expire_time` is set to **0** or not specified, the command is cached for `24` hours (`86,400` seconds) by default,
        and the maximum cache duration is `2` days.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "expire_time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the command name, which is defined in the product model
        associated with the device.
        This parameter is mandatory if the device requires codecs to parse commands.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def paras(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the command executed by the device.
        If `service_id` is specified, each key is the parameter in commands in the product model.
        If `service_id` is left empty, the key can be customized.
        The maximum size of the request object is `256` KB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "paras")

    @paras.setter
    def paras(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "paras", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the device service to which the device command belongs,
        which is defined in the product model associated with the device.
        This parameter is mandatory if the device requires codecs to parse commands.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_id", value)


@pulumi.input_type
class _DeviceAsyncCommandState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 delivered_time: Optional[pulumi.Input[_builtins.str]] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 paras: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 response_time: Optional[pulumi.Input[_builtins.str]] = None,
                 result: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 send_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 sent_time: Optional[pulumi.Input[_builtins.str]] = None,
                 service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeviceAsyncCommand resources.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the device command.
               The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.str] delivered_time: The time of the device received the command.
               The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.str] device_id: Specifies the ID of the device to which the command is delivered.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] expire_time: Specifies the duration of caching commands on the IoT platform.
               This parameter is valid only when `send_strategy` is set to **delay**. The unit is second.
               If `expire_time` is set to **0** or not specified, the command is cached for `24` hours (`86,400` seconds) by default,
               and the maximum cache duration is `2` days.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the command name, which is defined in the product model
               associated with the device.
               This parameter is mandatory if the device requires codecs to parse commands.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] paras: Specifies the command executed by the device.
               If `service_id` is specified, each key is the parameter in commands in the product model.
               If `service_id` is left empty, the key can be customized.
               The maximum size of the request object is `256` KB.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] response_time: The time of the device responded to the command.
               The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] result: The command execution result.
        :param pulumi.Input[_builtins.str] send_strategy: Specifies the delivery policy.
               The valid values are as follows:
               + **immediately**: The command is delivered immediately.
               + **delay**: The command is cached and delivered after the device reports data or goes online.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] sent_time: The time of the platform sent the command.
               The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.str] service_id: Specifies the ID of the device service to which the device command belongs,
               which is defined in the product model associated with the device.
               This parameter is mandatory if the device requires codecs to parse commands.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the command.
               The valid values are as follows:
               + **PENDING**: The command is not delivered and is cached on the platform.
               + **EXPIRED**: The command has expired, the cache time exceeds the value of `expire_time`.
               + **SENT**: The command is being delivered.
               + **DELIVERED**: The command has been delivered.
               + **SUCCESSFUL**: The command has been executed.
               + **FAILED**: The command fails to be executed.
               + **TIMEOUT**: After the command is delivered, no response is received from the device or the response times out.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if delivered_time is not None:
            pulumi.set(__self__, "delivered_time", delivered_time)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if paras is not None:
            pulumi.set(__self__, "paras", paras)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if response_time is not None:
            pulumi.set(__self__, "response_time", response_time)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if send_strategy is not None:
            pulumi.set(__self__, "send_strategy", send_strategy)
        if sent_time is not None:
            pulumi.set(__self__, "sent_time", sent_time)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the device command.
        The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="deliveredTime")
    def delivered_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time of the device received the command.
        The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "delivered_time")

    @delivered_time.setter
    def delivered_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delivered_time", value)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the device to which the command is delivered.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the duration of caching commands on the IoT platform.
        This parameter is valid only when `send_strategy` is set to **delay**. The unit is second.
        If `expire_time` is set to **0** or not specified, the command is cached for `24` hours (`86,400` seconds) by default,
        and the maximum cache duration is `2` days.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "expire_time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the command name, which is defined in the product model
        associated with the device.
        This parameter is mandatory if the device requires codecs to parse commands.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def paras(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the command executed by the device.
        If `service_id` is specified, each key is the parameter in commands in the product model.
        If `service_id` is left empty, the key can be customized.
        The maximum size of the request object is `256` KB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "paras")

    @paras.setter
    def paras(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "paras", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="responseTime")
    def response_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time of the device responded to the command.
        The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "response_time")

    @response_time.setter
    def response_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "response_time", value)

    @_builtins.property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The command execution result.
        """
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "result", value)

    @_builtins.property
    @pulumi.getter(name="sendStrategy")
    def send_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the delivery policy.
        The valid values are as follows:
        + **immediately**: The command is delivered immediately.
        + **delay**: The command is cached and delivered after the device reports data or goes online.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "send_strategy")

    @send_strategy.setter
    def send_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_strategy", value)

    @_builtins.property
    @pulumi.getter(name="sentTime")
    def sent_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time of the platform sent the command.
        The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "sent_time")

    @sent_time.setter
    def sent_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sent_time", value)

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the device service to which the device command belongs,
        which is defined in the product model associated with the device.
        This parameter is mandatory if the device requires codecs to parse commands.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the command.
        The valid values are as follows:
        + **PENDING**: The command is not delivered and is cached on the platform.
        + **EXPIRED**: The command has expired, the cache time exceeds the value of `expire_time`.
        + **SENT**: The command is being delivered.
        + **DELIVERED**: The command has been delivered.
        + **SUCCESSFUL**: The command has been executed.
        + **FAILED**: The command fails to be executed.
        + **TIMEOUT**: After the command is delivered, no response is received from the device or the response times out.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:IoTDA/deviceAsyncCommand:DeviceAsyncCommand")
class DeviceAsyncCommand(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 paras: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 send_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a device asynchronous command delivery resource within HuaweiCloud.

        > 1.This resource is only a one-time action resource for doing API action. Deleting this resource will not clear
          the corresponding request record, but will only remove the resource information from the tfstate file.
          <br>2.Currently, this resource is only supported deliver commands asynchronously to NB-IoT devices.
          <br>3.After the resource is created, please pay attention to the command executed result through `status`,
          you can execute the **pulumi preview** command at regular intervals to monitor `status` changes.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
          endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        device_id = config.require_object("deviceId")
        send_strategy = config.require_object("sendStrategy")
        test = huaweicloud.iotda.DeviceAsyncCommand("test",
            device_id=device_id,
            send_strategy=send_strategy)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] device_id: Specifies the ID of the device to which the command is delivered.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] expire_time: Specifies the duration of caching commands on the IoT platform.
               This parameter is valid only when `send_strategy` is set to **delay**. The unit is second.
               If `expire_time` is set to **0** or not specified, the command is cached for `24` hours (`86,400` seconds) by default,
               and the maximum cache duration is `2` days.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the command name, which is defined in the product model
               associated with the device.
               This parameter is mandatory if the device requires codecs to parse commands.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] paras: Specifies the command executed by the device.
               If `service_id` is specified, each key is the parameter in commands in the product model.
               If `service_id` is left empty, the key can be customized.
               The maximum size of the request object is `256` KB.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] send_strategy: Specifies the delivery policy.
               The valid values are as follows:
               + **immediately**: The command is delivered immediately.
               + **delay**: The command is cached and delivered after the device reports data or goes online.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] service_id: Specifies the ID of the device service to which the device command belongs,
               which is defined in the product model associated with the device.
               This parameter is mandatory if the device requires codecs to parse commands.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceAsyncCommandArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a device asynchronous command delivery resource within HuaweiCloud.

        > 1.This resource is only a one-time action resource for doing API action. Deleting this resource will not clear
          the corresponding request record, but will only remove the resource information from the tfstate file.
          <br>2.Currently, this resource is only supported deliver commands asynchronously to NB-IoT devices.
          <br>3.After the resource is created, please pay attention to the command executed result through `status`,
          you can execute the **pulumi preview** command at regular intervals to monitor `status` changes.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
          endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        device_id = config.require_object("deviceId")
        send_strategy = config.require_object("sendStrategy")
        test = huaweicloud.iotda.DeviceAsyncCommand("test",
            device_id=device_id,
            send_strategy=send_strategy)
        ```

        :param str resource_name: The name of the resource.
        :param DeviceAsyncCommandArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceAsyncCommandArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 paras: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 send_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceAsyncCommandArgs.__new__(DeviceAsyncCommandArgs)

            if device_id is None and not opts.urn:
                raise TypeError("Missing required property 'device_id'")
            __props__.__dict__["device_id"] = device_id
            __props__.__dict__["expire_time"] = expire_time
            __props__.__dict__["name"] = name
            __props__.__dict__["paras"] = paras
            __props__.__dict__["region"] = region
            if send_strategy is None and not opts.urn:
                raise TypeError("Missing required property 'send_strategy'")
            __props__.__dict__["send_strategy"] = send_strategy
            __props__.__dict__["service_id"] = service_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["delivered_time"] = None
            __props__.__dict__["response_time"] = None
            __props__.__dict__["result"] = None
            __props__.__dict__["sent_time"] = None
            __props__.__dict__["status"] = None
        super(DeviceAsyncCommand, __self__).__init__(
            'huaweicloud:IoTDA/deviceAsyncCommand:DeviceAsyncCommand',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            delivered_time: Optional[pulumi.Input[_builtins.str]] = None,
            device_id: Optional[pulumi.Input[_builtins.str]] = None,
            expire_time: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            paras: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            response_time: Optional[pulumi.Input[_builtins.str]] = None,
            result: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            send_strategy: Optional[pulumi.Input[_builtins.str]] = None,
            sent_time: Optional[pulumi.Input[_builtins.str]] = None,
            service_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'DeviceAsyncCommand':
        """
        Get an existing DeviceAsyncCommand resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the device command.
               The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.str] delivered_time: The time of the device received the command.
               The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.str] device_id: Specifies the ID of the device to which the command is delivered.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] expire_time: Specifies the duration of caching commands on the IoT platform.
               This parameter is valid only when `send_strategy` is set to **delay**. The unit is second.
               If `expire_time` is set to **0** or not specified, the command is cached for `24` hours (`86,400` seconds) by default,
               and the maximum cache duration is `2` days.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the command name, which is defined in the product model
               associated with the device.
               This parameter is mandatory if the device requires codecs to parse commands.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] paras: Specifies the command executed by the device.
               If `service_id` is specified, each key is the parameter in commands in the product model.
               If `service_id` is left empty, the key can be customized.
               The maximum size of the request object is `256` KB.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] response_time: The time of the device responded to the command.
               The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] result: The command execution result.
        :param pulumi.Input[_builtins.str] send_strategy: Specifies the delivery policy.
               The valid values are as follows:
               + **immediately**: The command is delivered immediately.
               + **delay**: The command is cached and delivered after the device reports data or goes online.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] sent_time: The time of the platform sent the command.
               The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.str] service_id: Specifies the ID of the device service to which the device command belongs,
               which is defined in the product model associated with the device.
               This parameter is mandatory if the device requires codecs to parse commands.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the command.
               The valid values are as follows:
               + **PENDING**: The command is not delivered and is cached on the platform.
               + **EXPIRED**: The command has expired, the cache time exceeds the value of `expire_time`.
               + **SENT**: The command is being delivered.
               + **DELIVERED**: The command has been delivered.
               + **SUCCESSFUL**: The command has been executed.
               + **FAILED**: The command fails to be executed.
               + **TIMEOUT**: After the command is delivered, no response is received from the device or the response times out.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceAsyncCommandState.__new__(_DeviceAsyncCommandState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["delivered_time"] = delivered_time
        __props__.__dict__["device_id"] = device_id
        __props__.__dict__["expire_time"] = expire_time
        __props__.__dict__["name"] = name
        __props__.__dict__["paras"] = paras
        __props__.__dict__["region"] = region
        __props__.__dict__["response_time"] = response_time
        __props__.__dict__["result"] = result
        __props__.__dict__["send_strategy"] = send_strategy
        __props__.__dict__["sent_time"] = sent_time
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["status"] = status
        return DeviceAsyncCommand(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the device command.
        The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deliveredTime")
    def delivered_time(self) -> pulumi.Output[_builtins.str]:
        """
        The time of the device received the command.
        The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "delivered_time")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the device to which the command is delivered.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the duration of caching commands on the IoT platform.
        This parameter is valid only when `send_strategy` is set to **delay**. The unit is second.
        If `expire_time` is set to **0** or not specified, the command is cached for `24` hours (`86,400` seconds) by default,
        and the maximum cache duration is `2` days.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the command name, which is defined in the product model
        associated with the device.
        This parameter is mandatory if the device requires codecs to parse commands.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def paras(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Specifies the command executed by the device.
        If `service_id` is specified, each key is the parameter in commands in the product model.
        If `service_id` is left empty, the key can be customized.
        The maximum size of the request object is `256` KB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "paras")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="responseTime")
    def response_time(self) -> pulumi.Output[_builtins.str]:
        """
        The time of the device responded to the command.
        The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "response_time")

    @_builtins.property
    @pulumi.getter
    def result(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The command execution result.
        """
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter(name="sendStrategy")
    def send_strategy(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the delivery policy.
        The valid values are as follows:
        + **immediately**: The command is delivered immediately.
        + **delay**: The command is cached and delivered after the device reports data or goes online.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "send_strategy")

    @_builtins.property
    @pulumi.getter(name="sentTime")
    def sent_time(self) -> pulumi.Output[_builtins.str]:
        """
        The time of the platform sent the command.
        The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "sent_time")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the device service to which the device command belongs,
        which is defined in the product model associated with the device.
        This parameter is mandatory if the device requires codecs to parse commands.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the command.
        The valid values are as follows:
        + **PENDING**: The command is not delivered and is cached on the platform.
        + **EXPIRED**: The command has expired, the cache time exceeds the value of `expire_time`.
        + **SENT**: The command is being delivered.
        + **DELIVERED**: The command has been delivered.
        + **SUCCESSFUL**: The command has been executed.
        + **FAILED**: The command fails to be executed.
        + **TIMEOUT**: After the command is delivered, no response is received from the device or the response times out.
        """
        return pulumi.get(self, "status")

