# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DeviceGroupArgs', 'DeviceGroup']

@pulumi.input_type
class DeviceGroupArgs:
    def __init__(__self__, *,
                 space_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dynamic_group_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DeviceGroup resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the device group belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of device group.
               The description contains a maximum of `64` characters. Only letters, Chinese characters, digits, hyphens (-),
               underscores (_) and the following special characters are allowed: `?'#().,&%@!`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] device_ids: Specifies the list of device IDs bound to the group.
        :param pulumi.Input[_builtins.str] dynamic_group_rule: Specifies the dynamic device group rule, just fill in the content
               of the **where** clause, the remaining clauses do not need to be filled in.
               e.g. **device_name = 'xxx' or device_name = 'xxx'**.
               More grammar rules, please see [API docs](https://support.huaweicloud.com/intl/en-us/api-iothub/SearchDevices.html).
        :param pulumi.Input[_builtins.str] name: Specifies the name of device group. The name contains a maximum of `64` characters.
               Only letters, digits, hyphens (-) and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] parent_group_id: Specifies the parent group id.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the IoTDA device group resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the device group type.
               The valid values are as follows:
               + **STATIC**: Static device group.
               + **DYNAMIC**: Dynamic device group.
               
               Defaults to **STATIC**.
               
               > When the `type` parameter is set to **DYNAMIC**:
               <br/>1. The `dynamic_group_rule` parameter is required.
               <br/>2. The `parent_group_id` parameter cannot be set, because dynamic group do not support parent-child nesting.
               <br/>3. The `device_ids` does not need to be set and cannot be updated, only as an attribute. Because devices in
               dynamic group can only be managed automatically based on dynamic group rule.
               <br/>4. Only the standard and enterprise versions of IoTDA instances support dynamic device groups.
        """
        pulumi.set(__self__, "space_id", space_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_ids is not None:
            pulumi.set(__self__, "device_ids", device_ids)
        if dynamic_group_rule is not None:
            pulumi.set(__self__, "dynamic_group_rule", dynamic_group_rule)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_group_id is not None:
            pulumi.set(__self__, "parent_group_id", parent_group_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource space ID to which the device group belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "space_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of device group.
        The description contains a maximum of `64` characters. Only letters, Chinese characters, digits, hyphens (-),
        underscores (_) and the following special characters are allowed: `?'#().,&%@!`.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceIds")
    def device_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of device IDs bound to the group.
        """
        return pulumi.get(self, "device_ids")

    @device_ids.setter
    def device_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "device_ids", value)

    @_builtins.property
    @pulumi.getter(name="dynamicGroupRule")
    def dynamic_group_rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dynamic device group rule, just fill in the content
        of the **where** clause, the remaining clauses do not need to be filled in.
        e.g. **device_name = 'xxx' or device_name = 'xxx'**.
        More grammar rules, please see [API docs](https://support.huaweicloud.com/intl/en-us/api-iothub/SearchDevices.html).
        """
        return pulumi.get(self, "dynamic_group_rule")

    @dynamic_group_rule.setter
    def dynamic_group_rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dynamic_group_rule", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of device group. The name contains a maximum of `64` characters.
        Only letters, digits, hyphens (-) and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentGroupId")
    def parent_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent group id.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "parent_group_id")

    @parent_group_id.setter
    def parent_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_group_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the IoTDA device group resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the device group type.
        The valid values are as follows:
        + **STATIC**: Static device group.
        + **DYNAMIC**: Dynamic device group.

        Defaults to **STATIC**.

        > When the `type` parameter is set to **DYNAMIC**:
        <br/>1. The `dynamic_group_rule` parameter is required.
        <br/>2. The `parent_group_id` parameter cannot be set, because dynamic group do not support parent-child nesting.
        <br/>3. The `device_ids` does not need to be set and cannot be updated, only as an attribute. Because devices in
        dynamic group can only be managed automatically based on dynamic group rule.
        <br/>4. Only the standard and enterprise versions of IoTDA instances support dynamic device groups.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _DeviceGroupState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dynamic_group_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeviceGroup resources.
        :param pulumi.Input[_builtins.str] description: Specifies the description of device group.
               The description contains a maximum of `64` characters. Only letters, Chinese characters, digits, hyphens (-),
               underscores (_) and the following special characters are allowed: `?'#().,&%@!`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] device_ids: Specifies the list of device IDs bound to the group.
        :param pulumi.Input[_builtins.str] dynamic_group_rule: Specifies the dynamic device group rule, just fill in the content
               of the **where** clause, the remaining clauses do not need to be filled in.
               e.g. **device_name = 'xxx' or device_name = 'xxx'**.
               More grammar rules, please see [API docs](https://support.huaweicloud.com/intl/en-us/api-iothub/SearchDevices.html).
        :param pulumi.Input[_builtins.str] name: Specifies the name of device group. The name contains a maximum of `64` characters.
               Only letters, digits, hyphens (-) and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] parent_group_id: Specifies the parent group id.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the IoTDA device group resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the device group belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the device group type.
               The valid values are as follows:
               + **STATIC**: Static device group.
               + **DYNAMIC**: Dynamic device group.
               
               Defaults to **STATIC**.
               
               > When the `type` parameter is set to **DYNAMIC**:
               <br/>1. The `dynamic_group_rule` parameter is required.
               <br/>2. The `parent_group_id` parameter cannot be set, because dynamic group do not support parent-child nesting.
               <br/>3. The `device_ids` does not need to be set and cannot be updated, only as an attribute. Because devices in
               dynamic group can only be managed automatically based on dynamic group rule.
               <br/>4. Only the standard and enterprise versions of IoTDA instances support dynamic device groups.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_ids is not None:
            pulumi.set(__self__, "device_ids", device_ids)
        if dynamic_group_rule is not None:
            pulumi.set(__self__, "dynamic_group_rule", dynamic_group_rule)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_group_id is not None:
            pulumi.set(__self__, "parent_group_id", parent_group_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of device group.
        The description contains a maximum of `64` characters. Only letters, Chinese characters, digits, hyphens (-),
        underscores (_) and the following special characters are allowed: `?'#().,&%@!`.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceIds")
    def device_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of device IDs bound to the group.
        """
        return pulumi.get(self, "device_ids")

    @device_ids.setter
    def device_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "device_ids", value)

    @_builtins.property
    @pulumi.getter(name="dynamicGroupRule")
    def dynamic_group_rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dynamic device group rule, just fill in the content
        of the **where** clause, the remaining clauses do not need to be filled in.
        e.g. **device_name = 'xxx' or device_name = 'xxx'**.
        More grammar rules, please see [API docs](https://support.huaweicloud.com/intl/en-us/api-iothub/SearchDevices.html).
        """
        return pulumi.get(self, "dynamic_group_rule")

    @dynamic_group_rule.setter
    def dynamic_group_rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dynamic_group_rule", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of device group. The name contains a maximum of `64` characters.
        Only letters, digits, hyphens (-) and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentGroupId")
    def parent_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent group id.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "parent_group_id")

    @parent_group_id.setter
    def parent_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_group_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the IoTDA device group resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource space ID to which the device group belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the device group type.
        The valid values are as follows:
        + **STATIC**: Static device group.
        + **DYNAMIC**: Dynamic device group.

        Defaults to **STATIC**.

        > When the `type` parameter is set to **DYNAMIC**:
        <br/>1. The `dynamic_group_rule` parameter is required.
        <br/>2. The `parent_group_id` parameter cannot be set, because dynamic group do not support parent-child nesting.
        <br/>3. The `device_ids` does not need to be set and cannot be updated, only as an attribute. Because devices in
        dynamic group can only be managed automatically based on dynamic group rule.
        <br/>4. Only the standard and enterprise versions of IoTDA instances support dynamic device groups.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:IoTDA/deviceGroup:DeviceGroup")
class DeviceGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dynamic_group_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an IoTDA device group resource within HuaweiCloud.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
          endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        space_id = config.require_object("spaceId")
        device_id = config.require_object("deviceId")
        test = huaweicloud.iotda.DeviceGroup("test",
            name=name,
            space_id=space_id,
            device_ids=[device_id])
        ```

        ## Import

        The device group can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/deviceGroup:DeviceGroup test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `space_id`. It is generally

        recommended running `pulumi preview` after importing the resource. You can then decide if changes should be applied to

        the resource, or the resource definition should be updated to align with the group. Also, you can ignore changes as

        below.

        hcl

        resource "huaweicloud_iotda_device_group" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              space_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of device group.
               The description contains a maximum of `64` characters. Only letters, Chinese characters, digits, hyphens (-),
               underscores (_) and the following special characters are allowed: `?'#().,&%@!`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] device_ids: Specifies the list of device IDs bound to the group.
        :param pulumi.Input[_builtins.str] dynamic_group_rule: Specifies the dynamic device group rule, just fill in the content
               of the **where** clause, the remaining clauses do not need to be filled in.
               e.g. **device_name = 'xxx' or device_name = 'xxx'**.
               More grammar rules, please see [API docs](https://support.huaweicloud.com/intl/en-us/api-iothub/SearchDevices.html).
        :param pulumi.Input[_builtins.str] name: Specifies the name of device group. The name contains a maximum of `64` characters.
               Only letters, digits, hyphens (-) and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] parent_group_id: Specifies the parent group id.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the IoTDA device group resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the device group belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the device group type.
               The valid values are as follows:
               + **STATIC**: Static device group.
               + **DYNAMIC**: Dynamic device group.
               
               Defaults to **STATIC**.
               
               > When the `type` parameter is set to **DYNAMIC**:
               <br/>1. The `dynamic_group_rule` parameter is required.
               <br/>2. The `parent_group_id` parameter cannot be set, because dynamic group do not support parent-child nesting.
               <br/>3. The `device_ids` does not need to be set and cannot be updated, only as an attribute. Because devices in
               dynamic group can only be managed automatically based on dynamic group rule.
               <br/>4. Only the standard and enterprise versions of IoTDA instances support dynamic device groups.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IoTDA device group resource within HuaweiCloud.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
          endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        space_id = config.require_object("spaceId")
        device_id = config.require_object("deviceId")
        test = huaweicloud.iotda.DeviceGroup("test",
            name=name,
            space_id=space_id,
            device_ids=[device_id])
        ```

        ## Import

        The device group can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/deviceGroup:DeviceGroup test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `space_id`. It is generally

        recommended running `pulumi preview` after importing the resource. You can then decide if changes should be applied to

        the resource, or the resource definition should be updated to align with the group. Also, you can ignore changes as

        below.

        hcl

        resource "huaweicloud_iotda_device_group" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              space_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DeviceGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dynamic_group_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceGroupArgs.__new__(DeviceGroupArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["device_ids"] = device_ids
            __props__.__dict__["dynamic_group_rule"] = dynamic_group_rule
            __props__.__dict__["name"] = name
            __props__.__dict__["parent_group_id"] = parent_group_id
            __props__.__dict__["region"] = region
            if space_id is None and not opts.urn:
                raise TypeError("Missing required property 'space_id'")
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["type"] = type
        super(DeviceGroup, __self__).__init__(
            'huaweicloud:IoTDA/deviceGroup:DeviceGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            dynamic_group_rule: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parent_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            space_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'DeviceGroup':
        """
        Get an existing DeviceGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of device group.
               The description contains a maximum of `64` characters. Only letters, Chinese characters, digits, hyphens (-),
               underscores (_) and the following special characters are allowed: `?'#().,&%@!`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] device_ids: Specifies the list of device IDs bound to the group.
        :param pulumi.Input[_builtins.str] dynamic_group_rule: Specifies the dynamic device group rule, just fill in the content
               of the **where** clause, the remaining clauses do not need to be filled in.
               e.g. **device_name = 'xxx' or device_name = 'xxx'**.
               More grammar rules, please see [API docs](https://support.huaweicloud.com/intl/en-us/api-iothub/SearchDevices.html).
        :param pulumi.Input[_builtins.str] name: Specifies the name of device group. The name contains a maximum of `64` characters.
               Only letters, digits, hyphens (-) and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] parent_group_id: Specifies the parent group id.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the IoTDA device group resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the device group belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the device group type.
               The valid values are as follows:
               + **STATIC**: Static device group.
               + **DYNAMIC**: Dynamic device group.
               
               Defaults to **STATIC**.
               
               > When the `type` parameter is set to **DYNAMIC**:
               <br/>1. The `dynamic_group_rule` parameter is required.
               <br/>2. The `parent_group_id` parameter cannot be set, because dynamic group do not support parent-child nesting.
               <br/>3. The `device_ids` does not need to be set and cannot be updated, only as an attribute. Because devices in
               dynamic group can only be managed automatically based on dynamic group rule.
               <br/>4. Only the standard and enterprise versions of IoTDA instances support dynamic device groups.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceGroupState.__new__(_DeviceGroupState)

        __props__.__dict__["description"] = description
        __props__.__dict__["device_ids"] = device_ids
        __props__.__dict__["dynamic_group_rule"] = dynamic_group_rule
        __props__.__dict__["name"] = name
        __props__.__dict__["parent_group_id"] = parent_group_id
        __props__.__dict__["region"] = region
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["type"] = type
        return DeviceGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of device group.
        The description contains a maximum of `64` characters. Only letters, Chinese characters, digits, hyphens (-),
        underscores (_) and the following special characters are allowed: `?'#().,&%@!`.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceIds")
    def device_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of device IDs bound to the group.
        """
        return pulumi.get(self, "device_ids")

    @_builtins.property
    @pulumi.getter(name="dynamicGroupRule")
    def dynamic_group_rule(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the dynamic device group rule, just fill in the content
        of the **where** clause, the remaining clauses do not need to be filled in.
        e.g. **device_name = 'xxx' or device_name = 'xxx'**.
        More grammar rules, please see [API docs](https://support.huaweicloud.com/intl/en-us/api-iothub/SearchDevices.html).
        """
        return pulumi.get(self, "dynamic_group_rule")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of device group. The name contains a maximum of `64` characters.
        Only letters, digits, hyphens (-) and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentGroupId")
    def parent_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the parent group id.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "parent_group_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the IoTDA device group resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the resource space ID to which the device group belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the device group type.
        The valid values are as follows:
        + **STATIC**: Static device group.
        + **DYNAMIC**: Dynamic device group.

        Defaults to **STATIC**.

        > When the `type` parameter is set to **DYNAMIC**:
        <br/>1. The `dynamic_group_rule` parameter is required.
        <br/>2. The `parent_group_id` parameter cannot be set, because dynamic group do not support parent-child nesting.
        <br/>3. The `device_ids` does not need to be set and cannot be updated, only as an attribute. Because devices in
        dynamic group can only be managed automatically based on dynamic group rule.
        <br/>4. Only the standard and enterprise versions of IoTDA instances support dynamic device groups.
        """
        return pulumi.get(self, "type")

