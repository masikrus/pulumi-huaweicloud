# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataFlowControlPoliciesResult',
    'AwaitableGetDataFlowControlPoliciesResult',
    'get_data_flow_control_policies',
    'get_data_flow_control_policies_output',
]

@pulumi.output_type
class GetDataFlowControlPoliciesResult:
    """
    A collection of values returned by getDataFlowControlPolicies.
    """
    def __init__(__self__, id=None, policies=None, policy_name=None, region=None, scope=None, scope_value=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if policy_name and not isinstance(policy_name, str):
            raise TypeError("Expected argument 'policy_name' to be a str")
        pulumi.set(__self__, "policy_name", policy_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)
        if scope_value and not isinstance(scope_value, str):
            raise TypeError("Expected argument 'scope_value' to be a str")
        pulumi.set(__self__, "scope_value", scope_value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetDataFlowControlPoliciesPolicyResult']:
        """
        All data flow control policies that match the filter parameters.
        The policies structure is documented below.
        """
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[_builtins.str]:
        """
        The scope of the data flow control policy.
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="scopeValue")
    def scope_value(self) -> Optional[_builtins.str]:
        """
        The scope add value of the data flow control policy.
        """
        return pulumi.get(self, "scope_value")


class AwaitableGetDataFlowControlPoliciesResult(GetDataFlowControlPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataFlowControlPoliciesResult(
            id=self.id,
            policies=self.policies,
            policy_name=self.policy_name,
            region=self.region,
            scope=self.scope,
            scope_value=self.scope_value)


def get_data_flow_control_policies(policy_name: Optional[_builtins.str] = None,
                                   region: Optional[_builtins.str] = None,
                                   scope: Optional[_builtins.str] = None,
                                   scope_value: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataFlowControlPoliciesResult:
    """
    Use this data source to get the list of IoTDA data flow control policies within HuaweiCloud.

    > Currently, data flow control policy resources are only supported on IoTDA **standard** or **enterprise** edition
      instance. When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
      the IoTDA service endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_name = config.require_object("policyName")
    test = huaweicloud.IoTDA.get_data_flow_control_policies(policy_name=policy_name)
    ```


    :param _builtins.str policy_name: Specifies the name of the data flow control policy. This field will undergo a fuzzy
           matching query.
    :param _builtins.str region: Specifies the region in which to query the data flow control policies.
           If omitted, the provider-level region will be used.
    :param _builtins.str scope: Specifies the scope of the data flow control policies.  
           The valid values are as follows:
           + **USER**: Tenant level flow control strategy.
           + **CHANNEL**: Forwarding channel level flow control strategy.
           + **RULE**: Forwarding rule level flow control strategy.
           + **ACTION**: Forwarding action level flow control strategy.
           
           If omitted, query all scope data flow control policies.
    :param _builtins.str scope_value: Specifies the scope add value of the data flow control policies.
           + If omitted or the `scope` is set to **USER**, this field does not need to be set, representing the query of tenant
           level flow control policies.
           + If the `scope` is set to **CHANNEL**, the valid values are **HTTP_FORWARDING**, **DIS_FORWARDING**,
           **OBS_FORWARDING**, **AMQP_FORWARDING**, and **DMS_KAFKA_FORWARDING**. If omitted, query all forwarding channel
           level flow control policies.
           + If the `scope` is set to **RULE**, the value of this field is the corresponding rule ID. If omitted, query all
           forwarding rule level flow control policies.
           + If the `scope` is set to **ACTION**, the value of this field is the corresponding rule action ID. If omitted, query
           all forwarding action level flow control policies.
           
           > The `scope_value` must be used together with `scope` and is invalid when used alone.
    """
    __args__ = dict()
    __args__['policyName'] = policy_name
    __args__['region'] = region
    __args__['scope'] = scope
    __args__['scopeValue'] = scope_value
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getDataFlowControlPolicies:getDataFlowControlPolicies', __args__, opts=opts, typ=GetDataFlowControlPoliciesResult).value

    return AwaitableGetDataFlowControlPoliciesResult(
        id=pulumi.get(__ret__, 'id'),
        policies=pulumi.get(__ret__, 'policies'),
        policy_name=pulumi.get(__ret__, 'policy_name'),
        region=pulumi.get(__ret__, 'region'),
        scope=pulumi.get(__ret__, 'scope'),
        scope_value=pulumi.get(__ret__, 'scope_value'))
def get_data_flow_control_policies_output(policy_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          scope: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          scope_value: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataFlowControlPoliciesResult]:
    """
    Use this data source to get the list of IoTDA data flow control policies within HuaweiCloud.

    > Currently, data flow control policy resources are only supported on IoTDA **standard** or **enterprise** edition
      instance. When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
      the IoTDA service endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_name = config.require_object("policyName")
    test = huaweicloud.IoTDA.get_data_flow_control_policies(policy_name=policy_name)
    ```


    :param _builtins.str policy_name: Specifies the name of the data flow control policy. This field will undergo a fuzzy
           matching query.
    :param _builtins.str region: Specifies the region in which to query the data flow control policies.
           If omitted, the provider-level region will be used.
    :param _builtins.str scope: Specifies the scope of the data flow control policies.  
           The valid values are as follows:
           + **USER**: Tenant level flow control strategy.
           + **CHANNEL**: Forwarding channel level flow control strategy.
           + **RULE**: Forwarding rule level flow control strategy.
           + **ACTION**: Forwarding action level flow control strategy.
           
           If omitted, query all scope data flow control policies.
    :param _builtins.str scope_value: Specifies the scope add value of the data flow control policies.
           + If omitted or the `scope` is set to **USER**, this field does not need to be set, representing the query of tenant
           level flow control policies.
           + If the `scope` is set to **CHANNEL**, the valid values are **HTTP_FORWARDING**, **DIS_FORWARDING**,
           **OBS_FORWARDING**, **AMQP_FORWARDING**, and **DMS_KAFKA_FORWARDING**. If omitted, query all forwarding channel
           level flow control policies.
           + If the `scope` is set to **RULE**, the value of this field is the corresponding rule ID. If omitted, query all
           forwarding rule level flow control policies.
           + If the `scope` is set to **ACTION**, the value of this field is the corresponding rule action ID. If omitted, query
           all forwarding action level flow control policies.
           
           > The `scope_value` must be used together with `scope` and is invalid when used alone.
    """
    __args__ = dict()
    __args__['policyName'] = policy_name
    __args__['region'] = region
    __args__['scope'] = scope
    __args__['scopeValue'] = scope_value
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getDataFlowControlPolicies:getDataFlowControlPolicies', __args__, opts=opts, typ=GetDataFlowControlPoliciesResult)
    return __ret__.apply(lambda __response__: GetDataFlowControlPoliciesResult(
        id=pulumi.get(__response__, 'id'),
        policies=pulumi.get(__response__, 'policies'),
        policy_name=pulumi.get(__response__, 'policy_name'),
        region=pulumi.get(__response__, 'region'),
        scope=pulumi.get(__response__, 'scope'),
        scope_value=pulumi.get(__response__, 'scope_value')))
