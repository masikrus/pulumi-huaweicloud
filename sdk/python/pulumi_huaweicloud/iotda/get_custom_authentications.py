# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCustomAuthenticationsResult',
    'AwaitableGetCustomAuthenticationsResult',
    'get_custom_authentications',
    'get_custom_authentications_output',
]

@pulumi.output_type
class GetCustomAuthenticationsResult:
    """
    A collection of values returned by getCustomAuthentications.
    """
    def __init__(__self__, authorizer_name=None, authorizers=None, id=None, region=None):
        if authorizer_name and not isinstance(authorizer_name, str):
            raise TypeError("Expected argument 'authorizer_name' to be a str")
        pulumi.set(__self__, "authorizer_name", authorizer_name)
        if authorizers and not isinstance(authorizers, list):
            raise TypeError("Expected argument 'authorizers' to be a list")
        pulumi.set(__self__, "authorizers", authorizers)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="authorizerName")
    def authorizer_name(self) -> Optional[_builtins.str]:
        """
        The name of the custom authentication.
        """
        return pulumi.get(self, "authorizer_name")

    @_builtins.property
    @pulumi.getter
    def authorizers(self) -> Sequence['outputs.GetCustomAuthenticationsAuthorizerResult']:
        """
        The list of the custom authentications.
        The authorizers structure is documented below.
        """
        return pulumi.get(self, "authorizers")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetCustomAuthenticationsResult(GetCustomAuthenticationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCustomAuthenticationsResult(
            authorizer_name=self.authorizer_name,
            authorizers=self.authorizers,
            id=self.id,
            region=self.region)


def get_custom_authentications(authorizer_name: Optional[_builtins.str] = None,
                               region: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCustomAuthenticationsResult:
    """
    Use this data source to get the list of IoTDA custom authentications.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.IoTDA.get_custom_authentications()
    ```


    :param _builtins.str authorizer_name: Specifies the name of the custom authentication.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['authorizerName'] = authorizer_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getCustomAuthentications:getCustomAuthentications', __args__, opts=opts, typ=GetCustomAuthenticationsResult).value

    return AwaitableGetCustomAuthenticationsResult(
        authorizer_name=pulumi.get(__ret__, 'authorizer_name'),
        authorizers=pulumi.get(__ret__, 'authorizers'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_custom_authentications_output(authorizer_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCustomAuthenticationsResult]:
    """
    Use this data source to get the list of IoTDA custom authentications.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.IoTDA.get_custom_authentications()
    ```


    :param _builtins.str authorizer_name: Specifies the name of the custom authentication.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['authorizerName'] = authorizer_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getCustomAuthentications:getCustomAuthentications', __args__, opts=opts, typ=GetCustomAuthenticationsResult)
    return __ret__.apply(lambda __response__: GetCustomAuthenticationsResult(
        authorizer_name=pulumi.get(__response__, 'authorizer_name'),
        authorizers=pulumi.get(__response__, 'authorizers'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
