# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CustomAuthenticationArgs', 'CustomAuthentication']

@pulumi.input_type
class CustomAuthenticationArgs:
    def __init__(__self__, *,
                 authorizer_name: pulumi.Input[_builtins.str],
                 func_urn: pulumi.Input[_builtins.str],
                 cache_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_authorizer: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 signing_public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_token: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CustomAuthentication resource.
        :param pulumi.Input[_builtins.str] authorizer_name: Specifies the name of the custom authentication.
               The name contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
               are allowed. The name must be unique.
        :param pulumi.Input[_builtins.str] func_urn: Specifies the URN of the function associated with the custom authentication.
        :param pulumi.Input[_builtins.bool] cache_enable: Specifies whether to enable the cache function. Defaults to **false**.
               If this parameter is set to **true** and the device input parameters (username, client ID, password, certificate
               information, and function URN) remain unchanged, the cache result is directly used when the cache result exists.
               Yor are advised to set this parameter to **false** during debugging, set this parameter to **true** during production
               to avoid frequent function invoking.
        :param pulumi.Input[_builtins.bool] default_authorizer: Specifies whether the custom authentication is the default
               authentication mode. Defaults to **false**.
               If this parameter is set to **true**, the current authentication policy is used fo authentication on all devices that
               support SNI unless otherwise specified.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the custom authentication resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] signing_enable: Specifies whether to enable signature authentication. Defaults to **true**.
               You are advised to enable this function. If this function is enabled, authentication information that does not
               meet signature requirements will be rejected to reduce invalid function calls.
        :param pulumi.Input[_builtins.str] signing_public_key: Specifies the public key for signature authentication.
               Used to check whether the signature information carried by the device is correct.
               
               > 1. The parameters `signing_token` and `signing_public_key` are mandatory when `signing_enable` is set to **true**.
               <br/>2. The parameter `signing_public_key` must be RSA encryption public key.
        :param pulumi.Input[_builtins.str] signing_token: Specifies the private key for signature authentication.
               The key contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
               are allowed.
        :param pulumi.Input[_builtins.str] status: Specifies whether to enable the custom authentication mode. Defaults to **INACTIVE**.
               The valid values are as follows:
               + **ACTIVE**: The authentication is enabled.
               + **INACTIVE**: The authentication is disabled.
        """
        pulumi.set(__self__, "authorizer_name", authorizer_name)
        pulumi.set(__self__, "func_urn", func_urn)
        if cache_enable is not None:
            pulumi.set(__self__, "cache_enable", cache_enable)
        if default_authorizer is not None:
            pulumi.set(__self__, "default_authorizer", default_authorizer)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if signing_enable is not None:
            pulumi.set(__self__, "signing_enable", signing_enable)
        if signing_public_key is not None:
            pulumi.set(__self__, "signing_public_key", signing_public_key)
        if signing_token is not None:
            pulumi.set(__self__, "signing_token", signing_token)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="authorizerName")
    def authorizer_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the custom authentication.
        The name contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
        are allowed. The name must be unique.
        """
        return pulumi.get(self, "authorizer_name")

    @authorizer_name.setter
    def authorizer_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "authorizer_name", value)

    @_builtins.property
    @pulumi.getter(name="funcUrn")
    def func_urn(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the URN of the function associated with the custom authentication.
        """
        return pulumi.get(self, "func_urn")

    @func_urn.setter
    def func_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "func_urn", value)

    @_builtins.property
    @pulumi.getter(name="cacheEnable")
    def cache_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the cache function. Defaults to **false**.
        If this parameter is set to **true** and the device input parameters (username, client ID, password, certificate
        information, and function URN) remain unchanged, the cache result is directly used when the cache result exists.
        Yor are advised to set this parameter to **false** during debugging, set this parameter to **true** during production
        to avoid frequent function invoking.
        """
        return pulumi.get(self, "cache_enable")

    @cache_enable.setter
    def cache_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cache_enable", value)

    @_builtins.property
    @pulumi.getter(name="defaultAuthorizer")
    def default_authorizer(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the custom authentication is the default
        authentication mode. Defaults to **false**.
        If this parameter is set to **true**, the current authentication policy is used fo authentication on all devices that
        support SNI unless otherwise specified.
        """
        return pulumi.get(self, "default_authorizer")

    @default_authorizer.setter
    def default_authorizer(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_authorizer", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the custom authentication resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="signingEnable")
    def signing_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable signature authentication. Defaults to **true**.
        You are advised to enable this function. If this function is enabled, authentication information that does not
        meet signature requirements will be rejected to reduce invalid function calls.
        """
        return pulumi.get(self, "signing_enable")

    @signing_enable.setter
    def signing_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "signing_enable", value)

    @_builtins.property
    @pulumi.getter(name="signingPublicKey")
    def signing_public_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the public key for signature authentication.
        Used to check whether the signature information carried by the device is correct.

        > 1. The parameters `signing_token` and `signing_public_key` are mandatory when `signing_enable` is set to **true**.
        <br/>2. The parameter `signing_public_key` must be RSA encryption public key.
        """
        return pulumi.get(self, "signing_public_key")

    @signing_public_key.setter
    def signing_public_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signing_public_key", value)

    @_builtins.property
    @pulumi.getter(name="signingToken")
    def signing_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private key for signature authentication.
        The key contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
        are allowed.
        """
        return pulumi.get(self, "signing_token")

    @signing_token.setter
    def signing_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signing_token", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to enable the custom authentication mode. Defaults to **INACTIVE**.
        The valid values are as follows:
        + **ACTIVE**: The authentication is enabled.
        + **INACTIVE**: The authentication is disabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _CustomAuthenticationState:
    def __init__(__self__, *,
                 authorizer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cache_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 default_authorizer: Optional[pulumi.Input[_builtins.bool]] = None,
                 func_name: Optional[pulumi.Input[_builtins.str]] = None,
                 func_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 signing_public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_token: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 update_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CustomAuthentication resources.
        :param pulumi.Input[_builtins.str] authorizer_name: Specifies the name of the custom authentication.
               The name contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
               are allowed. The name must be unique.
        :param pulumi.Input[_builtins.bool] cache_enable: Specifies whether to enable the cache function. Defaults to **false**.
               If this parameter is set to **true** and the device input parameters (username, client ID, password, certificate
               information, and function URN) remain unchanged, the cache result is directly used when the cache result exists.
               Yor are advised to set this parameter to **false** during debugging, set this parameter to **true** during production
               to avoid frequent function invoking.
        :param pulumi.Input[_builtins.str] create_time: The creation time of the custom authentication.
               The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.bool] default_authorizer: Specifies whether the custom authentication is the default
               authentication mode. Defaults to **false**.
               If this parameter is set to **true**, the current authentication policy is used fo authentication on all devices that
               support SNI unless otherwise specified.
        :param pulumi.Input[_builtins.str] func_name: The name of the function associated with the custom authentication.
        :param pulumi.Input[_builtins.str] func_urn: Specifies the URN of the function associated with the custom authentication.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the custom authentication resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] signing_enable: Specifies whether to enable signature authentication. Defaults to **true**.
               You are advised to enable this function. If this function is enabled, authentication information that does not
               meet signature requirements will be rejected to reduce invalid function calls.
        :param pulumi.Input[_builtins.str] signing_public_key: Specifies the public key for signature authentication.
               Used to check whether the signature information carried by the device is correct.
               
               > 1. The parameters `signing_token` and `signing_public_key` are mandatory when `signing_enable` is set to **true**.
               <br/>2. The parameter `signing_public_key` must be RSA encryption public key.
        :param pulumi.Input[_builtins.str] signing_token: Specifies the private key for signature authentication.
               The key contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
               are allowed.
        :param pulumi.Input[_builtins.str] status: Specifies whether to enable the custom authentication mode. Defaults to **INACTIVE**.
               The valid values are as follows:
               + **ACTIVE**: The authentication is enabled.
               + **INACTIVE**: The authentication is disabled.
        :param pulumi.Input[_builtins.str] update_time: The latest update time of the custom authentication.
               The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        """
        if authorizer_name is not None:
            pulumi.set(__self__, "authorizer_name", authorizer_name)
        if cache_enable is not None:
            pulumi.set(__self__, "cache_enable", cache_enable)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if default_authorizer is not None:
            pulumi.set(__self__, "default_authorizer", default_authorizer)
        if func_name is not None:
            pulumi.set(__self__, "func_name", func_name)
        if func_urn is not None:
            pulumi.set(__self__, "func_urn", func_urn)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if signing_enable is not None:
            pulumi.set(__self__, "signing_enable", signing_enable)
        if signing_public_key is not None:
            pulumi.set(__self__, "signing_public_key", signing_public_key)
        if signing_token is not None:
            pulumi.set(__self__, "signing_token", signing_token)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="authorizerName")
    def authorizer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the custom authentication.
        The name contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
        are allowed. The name must be unique.
        """
        return pulumi.get(self, "authorizer_name")

    @authorizer_name.setter
    def authorizer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorizer_name", value)

    @_builtins.property
    @pulumi.getter(name="cacheEnable")
    def cache_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the cache function. Defaults to **false**.
        If this parameter is set to **true** and the device input parameters (username, client ID, password, certificate
        information, and function URN) remain unchanged, the cache result is directly used when the cache result exists.
        Yor are advised to set this parameter to **false** during debugging, set this parameter to **true** during production
        to avoid frequent function invoking.
        """
        return pulumi.get(self, "cache_enable")

    @cache_enable.setter
    def cache_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cache_enable", value)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the custom authentication.
        The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter(name="defaultAuthorizer")
    def default_authorizer(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the custom authentication is the default
        authentication mode. Defaults to **false**.
        If this parameter is set to **true**, the current authentication policy is used fo authentication on all devices that
        support SNI unless otherwise specified.
        """
        return pulumi.get(self, "default_authorizer")

    @default_authorizer.setter
    def default_authorizer(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_authorizer", value)

    @_builtins.property
    @pulumi.getter(name="funcName")
    def func_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the function associated with the custom authentication.
        """
        return pulumi.get(self, "func_name")

    @func_name.setter
    def func_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "func_name", value)

    @_builtins.property
    @pulumi.getter(name="funcUrn")
    def func_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the URN of the function associated with the custom authentication.
        """
        return pulumi.get(self, "func_urn")

    @func_urn.setter
    def func_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "func_urn", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the custom authentication resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="signingEnable")
    def signing_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable signature authentication. Defaults to **true**.
        You are advised to enable this function. If this function is enabled, authentication information that does not
        meet signature requirements will be rejected to reduce invalid function calls.
        """
        return pulumi.get(self, "signing_enable")

    @signing_enable.setter
    def signing_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "signing_enable", value)

    @_builtins.property
    @pulumi.getter(name="signingPublicKey")
    def signing_public_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the public key for signature authentication.
        Used to check whether the signature information carried by the device is correct.

        > 1. The parameters `signing_token` and `signing_public_key` are mandatory when `signing_enable` is set to **true**.
        <br/>2. The parameter `signing_public_key` must be RSA encryption public key.
        """
        return pulumi.get(self, "signing_public_key")

    @signing_public_key.setter
    def signing_public_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signing_public_key", value)

    @_builtins.property
    @pulumi.getter(name="signingToken")
    def signing_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private key for signature authentication.
        The key contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
        are allowed.
        """
        return pulumi.get(self, "signing_token")

    @signing_token.setter
    def signing_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signing_token", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to enable the custom authentication mode. Defaults to **INACTIVE**.
        The valid values are as follows:
        + **ACTIVE**: The authentication is enabled.
        + **INACTIVE**: The authentication is disabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the custom authentication.
        The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_time", value)


@pulumi.type_token("huaweicloud:IoTDA/customAuthentication:CustomAuthentication")
class CustomAuthentication(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorizer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cache_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_authorizer: Optional[pulumi.Input[_builtins.bool]] = None,
                 func_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 signing_public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_token: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an IoTDA custom authentication resource within HuaweiCloud.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
          endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        func_urn = config.require_object("funcUrn")
        signing_token = config.require_object("signingToken")
        signing_public_key = config.require_object("signingPublicKey")
        test = huaweicloud.iotda.CustomAuthentication("test",
            authorizer_name=name,
            func_urn=func_urn,
            signing_token=signing_token,
            signing_public_key=signing_public_key)
        ```

        ## Import

        The custom authentication can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/customAuthentication:CustomAuthentication test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] authorizer_name: Specifies the name of the custom authentication.
               The name contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
               are allowed. The name must be unique.
        :param pulumi.Input[_builtins.bool] cache_enable: Specifies whether to enable the cache function. Defaults to **false**.
               If this parameter is set to **true** and the device input parameters (username, client ID, password, certificate
               information, and function URN) remain unchanged, the cache result is directly used when the cache result exists.
               Yor are advised to set this parameter to **false** during debugging, set this parameter to **true** during production
               to avoid frequent function invoking.
        :param pulumi.Input[_builtins.bool] default_authorizer: Specifies whether the custom authentication is the default
               authentication mode. Defaults to **false**.
               If this parameter is set to **true**, the current authentication policy is used fo authentication on all devices that
               support SNI unless otherwise specified.
        :param pulumi.Input[_builtins.str] func_urn: Specifies the URN of the function associated with the custom authentication.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the custom authentication resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] signing_enable: Specifies whether to enable signature authentication. Defaults to **true**.
               You are advised to enable this function. If this function is enabled, authentication information that does not
               meet signature requirements will be rejected to reduce invalid function calls.
        :param pulumi.Input[_builtins.str] signing_public_key: Specifies the public key for signature authentication.
               Used to check whether the signature information carried by the device is correct.
               
               > 1. The parameters `signing_token` and `signing_public_key` are mandatory when `signing_enable` is set to **true**.
               <br/>2. The parameter `signing_public_key` must be RSA encryption public key.
        :param pulumi.Input[_builtins.str] signing_token: Specifies the private key for signature authentication.
               The key contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
               are allowed.
        :param pulumi.Input[_builtins.str] status: Specifies whether to enable the custom authentication mode. Defaults to **INACTIVE**.
               The valid values are as follows:
               + **ACTIVE**: The authentication is enabled.
               + **INACTIVE**: The authentication is disabled.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomAuthenticationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IoTDA custom authentication resource within HuaweiCloud.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
          endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        func_urn = config.require_object("funcUrn")
        signing_token = config.require_object("signingToken")
        signing_public_key = config.require_object("signingPublicKey")
        test = huaweicloud.iotda.CustomAuthentication("test",
            authorizer_name=name,
            func_urn=func_urn,
            signing_token=signing_token,
            signing_public_key=signing_public_key)
        ```

        ## Import

        The custom authentication can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/customAuthentication:CustomAuthentication test <id>
        ```

        :param str resource_name: The name of the resource.
        :param CustomAuthenticationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomAuthenticationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorizer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cache_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_authorizer: Optional[pulumi.Input[_builtins.bool]] = None,
                 func_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 signing_public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_token: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomAuthenticationArgs.__new__(CustomAuthenticationArgs)

            if authorizer_name is None and not opts.urn:
                raise TypeError("Missing required property 'authorizer_name'")
            __props__.__dict__["authorizer_name"] = authorizer_name
            __props__.__dict__["cache_enable"] = cache_enable
            __props__.__dict__["default_authorizer"] = default_authorizer
            if func_urn is None and not opts.urn:
                raise TypeError("Missing required property 'func_urn'")
            __props__.__dict__["func_urn"] = func_urn
            __props__.__dict__["region"] = region
            __props__.__dict__["signing_enable"] = signing_enable
            __props__.__dict__["signing_public_key"] = signing_public_key
            __props__.__dict__["signing_token"] = None if signing_token is None else pulumi.Output.secret(signing_token)
            __props__.__dict__["status"] = status
            __props__.__dict__["create_time"] = None
            __props__.__dict__["func_name"] = None
            __props__.__dict__["update_time"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["signingToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(CustomAuthentication, __self__).__init__(
            'huaweicloud:IoTDA/customAuthentication:CustomAuthentication',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authorizer_name: Optional[pulumi.Input[_builtins.str]] = None,
            cache_enable: Optional[pulumi.Input[_builtins.bool]] = None,
            create_time: Optional[pulumi.Input[_builtins.str]] = None,
            default_authorizer: Optional[pulumi.Input[_builtins.bool]] = None,
            func_name: Optional[pulumi.Input[_builtins.str]] = None,
            func_urn: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            signing_enable: Optional[pulumi.Input[_builtins.bool]] = None,
            signing_public_key: Optional[pulumi.Input[_builtins.str]] = None,
            signing_token: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            update_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'CustomAuthentication':
        """
        Get an existing CustomAuthentication resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] authorizer_name: Specifies the name of the custom authentication.
               The name contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
               are allowed. The name must be unique.
        :param pulumi.Input[_builtins.bool] cache_enable: Specifies whether to enable the cache function. Defaults to **false**.
               If this parameter is set to **true** and the device input parameters (username, client ID, password, certificate
               information, and function URN) remain unchanged, the cache result is directly used when the cache result exists.
               Yor are advised to set this parameter to **false** during debugging, set this parameter to **true** during production
               to avoid frequent function invoking.
        :param pulumi.Input[_builtins.str] create_time: The creation time of the custom authentication.
               The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.bool] default_authorizer: Specifies whether the custom authentication is the default
               authentication mode. Defaults to **false**.
               If this parameter is set to **true**, the current authentication policy is used fo authentication on all devices that
               support SNI unless otherwise specified.
        :param pulumi.Input[_builtins.str] func_name: The name of the function associated with the custom authentication.
        :param pulumi.Input[_builtins.str] func_urn: Specifies the URN of the function associated with the custom authentication.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the custom authentication resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] signing_enable: Specifies whether to enable signature authentication. Defaults to **true**.
               You are advised to enable this function. If this function is enabled, authentication information that does not
               meet signature requirements will be rejected to reduce invalid function calls.
        :param pulumi.Input[_builtins.str] signing_public_key: Specifies the public key for signature authentication.
               Used to check whether the signature information carried by the device is correct.
               
               > 1. The parameters `signing_token` and `signing_public_key` are mandatory when `signing_enable` is set to **true**.
               <br/>2. The parameter `signing_public_key` must be RSA encryption public key.
        :param pulumi.Input[_builtins.str] signing_token: Specifies the private key for signature authentication.
               The key contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
               are allowed.
        :param pulumi.Input[_builtins.str] status: Specifies whether to enable the custom authentication mode. Defaults to **INACTIVE**.
               The valid values are as follows:
               + **ACTIVE**: The authentication is enabled.
               + **INACTIVE**: The authentication is disabled.
        :param pulumi.Input[_builtins.str] update_time: The latest update time of the custom authentication.
               The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomAuthenticationState.__new__(_CustomAuthenticationState)

        __props__.__dict__["authorizer_name"] = authorizer_name
        __props__.__dict__["cache_enable"] = cache_enable
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["default_authorizer"] = default_authorizer
        __props__.__dict__["func_name"] = func_name
        __props__.__dict__["func_urn"] = func_urn
        __props__.__dict__["region"] = region
        __props__.__dict__["signing_enable"] = signing_enable
        __props__.__dict__["signing_public_key"] = signing_public_key
        __props__.__dict__["signing_token"] = signing_token
        __props__.__dict__["status"] = status
        __props__.__dict__["update_time"] = update_time
        return CustomAuthentication(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authorizerName")
    def authorizer_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the custom authentication.
        The name contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
        are allowed. The name must be unique.
        """
        return pulumi.get(self, "authorizer_name")

    @_builtins.property
    @pulumi.getter(name="cacheEnable")
    def cache_enable(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable the cache function. Defaults to **false**.
        If this parameter is set to **true** and the device input parameters (username, client ID, password, certificate
        information, and function URN) remain unchanged, the cache result is directly used when the cache result exists.
        Yor are advised to set this parameter to **false** during debugging, set this parameter to **true** during production
        to avoid frequent function invoking.
        """
        return pulumi.get(self, "cache_enable")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the custom authentication.
        The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="defaultAuthorizer")
    def default_authorizer(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the custom authentication is the default
        authentication mode. Defaults to **false**.
        If this parameter is set to **true**, the current authentication policy is used fo authentication on all devices that
        support SNI unless otherwise specified.
        """
        return pulumi.get(self, "default_authorizer")

    @_builtins.property
    @pulumi.getter(name="funcName")
    def func_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the function associated with the custom authentication.
        """
        return pulumi.get(self, "func_name")

    @_builtins.property
    @pulumi.getter(name="funcUrn")
    def func_urn(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the URN of the function associated with the custom authentication.
        """
        return pulumi.get(self, "func_urn")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the custom authentication resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="signingEnable")
    def signing_enable(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable signature authentication. Defaults to **true**.
        You are advised to enable this function. If this function is enabled, authentication information that does not
        meet signature requirements will be rejected to reduce invalid function calls.
        """
        return pulumi.get(self, "signing_enable")

    @_builtins.property
    @pulumi.getter(name="signingPublicKey")
    def signing_public_key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the public key for signature authentication.
        Used to check whether the signature information carried by the device is correct.

        > 1. The parameters `signing_token` and `signing_public_key` are mandatory when `signing_enable` is set to **true**.
        <br/>2. The parameter `signing_public_key` must be RSA encryption public key.
        """
        return pulumi.get(self, "signing_public_key")

    @_builtins.property
    @pulumi.getter(name="signingToken")
    def signing_token(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the private key for signature authentication.
        The key contains a maximum of `128` characters, and only letters, digits, underscores (_), and hyphens (-)
        are allowed.
        """
        return pulumi.get(self, "signing_token")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether to enable the custom authentication mode. Defaults to **INACTIVE**.
        The valid values are as follows:
        + **ACTIVE**: The authentication is enabled.
        + **INACTIVE**: The authentication is disabled.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the custom authentication.
        The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "update_time")

