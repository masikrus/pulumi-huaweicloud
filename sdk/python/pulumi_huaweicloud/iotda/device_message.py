# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeviceMessageArgs', 'DeviceMessage']

@pulumi.input_type
class DeviceMessageArgs:
    def __init__(__self__, *,
                 device_id: pulumi.Input[_builtins.str],
                 message: pulumi.Input[_builtins.str],
                 encoding: Optional[pulumi.Input[_builtins.str]] = None,
                 message_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 payload_format: Optional[pulumi.Input[_builtins.str]] = None,
                 properties: Optional[pulumi.Input['DeviceMessagePropertiesArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_full_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DeviceMessage resource.
        :param pulumi.Input[_builtins.str] device_id: Specifies the ID of the device to which the message is delivered.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] message: Specifies message content, supporting string and json formats.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] encoding: Specifies the encoding format for message content.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **none**
               + **base64**
               
               Defaults to **none**.
        :param pulumi.Input[_builtins.str] message_id: Specifies the message ID, it is recommended to use UUID, which is unique
               within the same device. The length should not exceed `128`, and only combinations of letters, numbers,
               underscores (_), and hyphens (-) are allowed. Changing this parameter will create a new resource.
               + If the message ID filled in is not unique within the device, an error will be returned.
               + If left blank, the system will generate a random ID.
        :param pulumi.Input[_builtins.str] name: Specifies the message name. The length should not exceed `128`, and only
               Chinese, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] payload_format: Specifies the payload format. This parameter is valid only `encoding`
               is set to **none**. Changing this parameter will create a new resource.
               The valid values are as follows:
               + **standard**: Standard format for platform encapsulation.
               + **raw**: Directly distribute the message content as a payload.
               
               Defaults to **standard**.
        :param pulumi.Input['DeviceMessagePropertiesArgs'] properties: Specifies the attribute parameters of the message downstream to the device.
               Changing this parameter will create a new resource.
               The properties structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic: Specifies the custom topic suffix for message downstream to the device.
               Only topics configured on the tenant product interface can be filled in, otherwise the verification will not pass.
               If the topic is specified, the message will be directed to the device through that topic. If not specified, the
               message will be directed to the device through the system's default topic.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic_full_name: Specifies the complete topic name for the message to be sent to the
               device. When it is necessary to issue a custom topic to the device, this parameter can be used to specify the complete
               topic name. The IoT platform does not verify whether the topic is defined on the platform and directly transmits it to
               the device. The device needs to subscribe to the topic in advance.
               Changing this parameter will create a new resource.
               
               > Only one of parameters `topic` and `topic_full_name` can be set.
        :param pulumi.Input[_builtins.str] ttl: Specifies the aging time of the message in the platform cache, in minutes.
               Changing this parameter will create a new resource.
               + The valid value must be a multiple of `5`.
               + When specified as `0`, it means that the message is not cached, and the default maximum caching time is `1,440`.
               
               Defaults to `1,440`.
               
               <a name="iotda_properties"></a>
               The `properties` block supports:
        """
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "message", message)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if message_id is not None:
            pulumi.set(__self__, "message_id", message_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if payload_format is not None:
            pulumi.set(__self__, "payload_format", payload_format)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if topic_full_name is not None:
            pulumi.set(__self__, "topic_full_name", topic_full_name)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the device to which the message is delivered.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies message content, supporting string and json formats.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the encoding format for message content.
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **none**
        + **base64**

        Defaults to **none**.
        """
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encoding", value)

    @_builtins.property
    @pulumi.getter(name="messageId")
    def message_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message ID, it is recommended to use UUID, which is unique
        within the same device. The length should not exceed `128`, and only combinations of letters, numbers,
        underscores (_), and hyphens (-) are allowed. Changing this parameter will create a new resource.
        + If the message ID filled in is not unique within the device, an error will be returned.
        + If left blank, the system will generate a random ID.
        """
        return pulumi.get(self, "message_id")

    @message_id.setter
    def message_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message name. The length should not exceed `128`, and only
        Chinese, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="payloadFormat")
    def payload_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the payload format. This parameter is valid only `encoding`
        is set to **none**. Changing this parameter will create a new resource.
        The valid values are as follows:
        + **standard**: Standard format for platform encapsulation.
        + **raw**: Directly distribute the message content as a payload.

        Defaults to **standard**.
        """
        return pulumi.get(self, "payload_format")

    @payload_format.setter
    def payload_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "payload_format", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['DeviceMessagePropertiesArgs']]:
        """
        Specifies the attribute parameters of the message downstream to the device.
        Changing this parameter will create a new resource.
        The properties structure is documented below.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['DeviceMessagePropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom topic suffix for message downstream to the device.
        Only topics configured on the tenant product interface can be filled in, otherwise the verification will not pass.
        If the topic is specified, the message will be directed to the device through that topic. If not specified, the
        message will be directed to the device through the system's default topic.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic", value)

    @_builtins.property
    @pulumi.getter(name="topicFullName")
    def topic_full_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the complete topic name for the message to be sent to the
        device. When it is necessary to issue a custom topic to the device, this parameter can be used to specify the complete
        topic name. The IoT platform does not verify whether the topic is defined on the platform and directly transmits it to
        the device. The device needs to subscribe to the topic in advance.
        Changing this parameter will create a new resource.

        > Only one of parameters `topic` and `topic_full_name` can be set.
        """
        return pulumi.get(self, "topic_full_name")

    @topic_full_name.setter
    def topic_full_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic_full_name", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the aging time of the message in the platform cache, in minutes.
        Changing this parameter will create a new resource.
        + The valid value must be a multiple of `5`.
        + When specified as `0`, it means that the message is not cached, and the default maximum caching time is `1,440`.

        Defaults to `1,440`.

        <a name="iotda_properties"></a>
        The `properties` block supports:
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class _DeviceMessageState:
    def __init__(__self__, *,
                 created_time: Optional[pulumi.Input[_builtins.str]] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 encoding: Optional[pulumi.Input[_builtins.str]] = None,
                 error_infos: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceMessageErrorInfoArgs']]]] = None,
                 finished_time: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 message_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 payload_format: Optional[pulumi.Input[_builtins.str]] = None,
                 properties: Optional[pulumi.Input['DeviceMessagePropertiesArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_full_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeviceMessage resources.
        :param pulumi.Input[_builtins.str] created_time: The creation time of the device message.
               The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.str] device_id: Specifies the ID of the device to which the message is delivered.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] encoding: Specifies the encoding format for message content.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **none**
               + **base64**
               
               Defaults to **none**.
        :param pulumi.Input[Sequence[pulumi.Input['DeviceMessageErrorInfoArgs']]] error_infos: The message delivery failure details.
               The error_info structure is documented below.
        :param pulumi.Input[_builtins.str] finished_time: The end time of the device message. Contains the time for the message to transition to the
               **DELIVERED* and **TIMEOUT** status. The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.str] message: Specifies message content, supporting string and json formats.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] message_id: Specifies the message ID, it is recommended to use UUID, which is unique
               within the same device. The length should not exceed `128`, and only combinations of letters, numbers,
               underscores (_), and hyphens (-) are allowed. Changing this parameter will create a new resource.
               + If the message ID filled in is not unique within the device, an error will be returned.
               + If left blank, the system will generate a random ID.
        :param pulumi.Input[_builtins.str] name: Specifies the message name. The length should not exceed `128`, and only
               Chinese, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] payload_format: Specifies the payload format. This parameter is valid only `encoding`
               is set to **none**. Changing this parameter will create a new resource.
               The valid values are as follows:
               + **standard**: Standard format for platform encapsulation.
               + **raw**: Directly distribute the message content as a payload.
               
               Defaults to **standard**.
        :param pulumi.Input['DeviceMessagePropertiesArgs'] properties: Specifies the attribute parameters of the message downstream to the device.
               Changing this parameter will create a new resource.
               The properties structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the message.  
               The valid values are as follows:
               + **PENDING**: The device is not online, the message is cached and will be issued after the device is online.
               + **DELIVERED**: The message sent successfully.
               + **FAILED**: The message sending failed.
               + **TIMEOUT**: The message has not been sent to the device within the default time of the platform (`1` day).
        :param pulumi.Input[_builtins.str] topic: Specifies the custom topic suffix for message downstream to the device.
               Only topics configured on the tenant product interface can be filled in, otherwise the verification will not pass.
               If the topic is specified, the message will be directed to the device through that topic. If not specified, the
               message will be directed to the device through the system's default topic.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic_full_name: Specifies the complete topic name for the message to be sent to the
               device. When it is necessary to issue a custom topic to the device, this parameter can be used to specify the complete
               topic name. The IoT platform does not verify whether the topic is defined on the platform and directly transmits it to
               the device. The device needs to subscribe to the topic in advance.
               Changing this parameter will create a new resource.
               
               > Only one of parameters `topic` and `topic_full_name` can be set.
        :param pulumi.Input[_builtins.str] ttl: Specifies the aging time of the message in the platform cache, in minutes.
               Changing this parameter will create a new resource.
               + The valid value must be a multiple of `5`.
               + When specified as `0`, it means that the message is not cached, and the default maximum caching time is `1,440`.
               
               Defaults to `1,440`.
               
               <a name="iotda_properties"></a>
               The `properties` block supports:
        """
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if error_infos is not None:
            pulumi.set(__self__, "error_infos", error_infos)
        if finished_time is not None:
            pulumi.set(__self__, "finished_time", finished_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if message_id is not None:
            pulumi.set(__self__, "message_id", message_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if payload_format is not None:
            pulumi.set(__self__, "payload_format", payload_format)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if topic_full_name is not None:
            pulumi.set(__self__, "topic_full_name", topic_full_name)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the device message.
        The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_time", value)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the device to which the message is delivered.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the encoding format for message content.
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **none**
        + **base64**

        Defaults to **none**.
        """
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encoding", value)

    @_builtins.property
    @pulumi.getter(name="errorInfos")
    def error_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceMessageErrorInfoArgs']]]]:
        """
        The message delivery failure details.
        The error_info structure is documented below.
        """
        return pulumi.get(self, "error_infos")

    @error_infos.setter
    def error_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceMessageErrorInfoArgs']]]]):
        pulumi.set(self, "error_infos", value)

    @_builtins.property
    @pulumi.getter(name="finishedTime")
    def finished_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The end time of the device message. Contains the time for the message to transition to the
        **DELIVERED* and **TIMEOUT** status. The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "finished_time")

    @finished_time.setter
    def finished_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "finished_time", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies message content, supporting string and json formats.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter(name="messageId")
    def message_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message ID, it is recommended to use UUID, which is unique
        within the same device. The length should not exceed `128`, and only combinations of letters, numbers,
        underscores (_), and hyphens (-) are allowed. Changing this parameter will create a new resource.
        + If the message ID filled in is not unique within the device, an error will be returned.
        + If left blank, the system will generate a random ID.
        """
        return pulumi.get(self, "message_id")

    @message_id.setter
    def message_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the message name. The length should not exceed `128`, and only
        Chinese, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="payloadFormat")
    def payload_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the payload format. This parameter is valid only `encoding`
        is set to **none**. Changing this parameter will create a new resource.
        The valid values are as follows:
        + **standard**: Standard format for platform encapsulation.
        + **raw**: Directly distribute the message content as a payload.

        Defaults to **standard**.
        """
        return pulumi.get(self, "payload_format")

    @payload_format.setter
    def payload_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "payload_format", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['DeviceMessagePropertiesArgs']]:
        """
        Specifies the attribute parameters of the message downstream to the device.
        Changing this parameter will create a new resource.
        The properties structure is documented below.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['DeviceMessagePropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the message.  
        The valid values are as follows:
        + **PENDING**: The device is not online, the message is cached and will be issued after the device is online.
        + **DELIVERED**: The message sent successfully.
        + **FAILED**: The message sending failed.
        + **TIMEOUT**: The message has not been sent to the device within the default time of the platform (`1` day).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom topic suffix for message downstream to the device.
        Only topics configured on the tenant product interface can be filled in, otherwise the verification will not pass.
        If the topic is specified, the message will be directed to the device through that topic. If not specified, the
        message will be directed to the device through the system's default topic.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic", value)

    @_builtins.property
    @pulumi.getter(name="topicFullName")
    def topic_full_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the complete topic name for the message to be sent to the
        device. When it is necessary to issue a custom topic to the device, this parameter can be used to specify the complete
        topic name. The IoT platform does not verify whether the topic is defined on the platform and directly transmits it to
        the device. The device needs to subscribe to the topic in advance.
        Changing this parameter will create a new resource.

        > Only one of parameters `topic` and `topic_full_name` can be set.
        """
        return pulumi.get(self, "topic_full_name")

    @topic_full_name.setter
    def topic_full_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic_full_name", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the aging time of the message in the platform cache, in minutes.
        Changing this parameter will create a new resource.
        + The valid value must be a multiple of `5`.
        + When specified as `0`, it means that the message is not cached, and the default maximum caching time is `1,440`.

        Defaults to `1,440`.

        <a name="iotda_properties"></a>
        The `properties` block supports:
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ttl", value)


@pulumi.type_token("huaweicloud:IoTDA/deviceMessage:DeviceMessage")
class DeviceMessage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 encoding: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 message_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 payload_format: Optional[pulumi.Input[_builtins.str]] = None,
                 properties: Optional[pulumi.Input[Union['DeviceMessagePropertiesArgs', 'DeviceMessagePropertiesArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_full_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a device message delivery resource within HuaweiCloud.

        > 1.This resource is only a one-time action resource for doing API action. Deleting this resource will not clear
          the corresponding request record, but will only remove the resource information from the tfstate file.
          <br>2.Currently, this resource is only supported deliver message to MQTT devices.
          <br>3.After the resource is created, please pay attention to the message delivery result through `status` attribute,
          you can execute the **pulumi preview** command at regular intervals to monitor `status` attribute changes.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
          endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        device_id = config.require_object("deviceId")
        message = config.require_object("message")
        test = huaweicloud.iotda.DeviceMessage("test",
            device_id=device_id,
            message=message)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] device_id: Specifies the ID of the device to which the message is delivered.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] encoding: Specifies the encoding format for message content.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **none**
               + **base64**
               
               Defaults to **none**.
        :param pulumi.Input[_builtins.str] message: Specifies message content, supporting string and json formats.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] message_id: Specifies the message ID, it is recommended to use UUID, which is unique
               within the same device. The length should not exceed `128`, and only combinations of letters, numbers,
               underscores (_), and hyphens (-) are allowed. Changing this parameter will create a new resource.
               + If the message ID filled in is not unique within the device, an error will be returned.
               + If left blank, the system will generate a random ID.
        :param pulumi.Input[_builtins.str] name: Specifies the message name. The length should not exceed `128`, and only
               Chinese, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] payload_format: Specifies the payload format. This parameter is valid only `encoding`
               is set to **none**. Changing this parameter will create a new resource.
               The valid values are as follows:
               + **standard**: Standard format for platform encapsulation.
               + **raw**: Directly distribute the message content as a payload.
               
               Defaults to **standard**.
        :param pulumi.Input[Union['DeviceMessagePropertiesArgs', 'DeviceMessagePropertiesArgsDict']] properties: Specifies the attribute parameters of the message downstream to the device.
               Changing this parameter will create a new resource.
               The properties structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic: Specifies the custom topic suffix for message downstream to the device.
               Only topics configured on the tenant product interface can be filled in, otherwise the verification will not pass.
               If the topic is specified, the message will be directed to the device through that topic. If not specified, the
               message will be directed to the device through the system's default topic.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic_full_name: Specifies the complete topic name for the message to be sent to the
               device. When it is necessary to issue a custom topic to the device, this parameter can be used to specify the complete
               topic name. The IoT platform does not verify whether the topic is defined on the platform and directly transmits it to
               the device. The device needs to subscribe to the topic in advance.
               Changing this parameter will create a new resource.
               
               > Only one of parameters `topic` and `topic_full_name` can be set.
        :param pulumi.Input[_builtins.str] ttl: Specifies the aging time of the message in the platform cache, in minutes.
               Changing this parameter will create a new resource.
               + The valid value must be a multiple of `5`.
               + When specified as `0`, it means that the message is not cached, and the default maximum caching time is `1,440`.
               
               Defaults to `1,440`.
               
               <a name="iotda_properties"></a>
               The `properties` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceMessageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a device message delivery resource within HuaweiCloud.

        > 1.This resource is only a one-time action resource for doing API action. Deleting this resource will not clear
          the corresponding request record, but will only remove the resource information from the tfstate file.
          <br>2.Currently, this resource is only supported deliver message to MQTT devices.
          <br>3.After the resource is created, please pay attention to the message delivery result through `status` attribute,
          you can execute the **pulumi preview** command at regular intervals to monitor `status` attribute changes.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
          endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        device_id = config.require_object("deviceId")
        message = config.require_object("message")
        test = huaweicloud.iotda.DeviceMessage("test",
            device_id=device_id,
            message=message)
        ```

        :param str resource_name: The name of the resource.
        :param DeviceMessageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceMessageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 encoding: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 message_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 payload_format: Optional[pulumi.Input[_builtins.str]] = None,
                 properties: Optional[pulumi.Input[Union['DeviceMessagePropertiesArgs', 'DeviceMessagePropertiesArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_full_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceMessageArgs.__new__(DeviceMessageArgs)

            if device_id is None and not opts.urn:
                raise TypeError("Missing required property 'device_id'")
            __props__.__dict__["device_id"] = device_id
            __props__.__dict__["encoding"] = encoding
            if message is None and not opts.urn:
                raise TypeError("Missing required property 'message'")
            __props__.__dict__["message"] = message
            __props__.__dict__["message_id"] = message_id
            __props__.__dict__["name"] = name
            __props__.__dict__["payload_format"] = payload_format
            __props__.__dict__["properties"] = properties
            __props__.__dict__["region"] = region
            __props__.__dict__["topic"] = topic
            __props__.__dict__["topic_full_name"] = topic_full_name
            __props__.__dict__["ttl"] = ttl
            __props__.__dict__["created_time"] = None
            __props__.__dict__["error_infos"] = None
            __props__.__dict__["finished_time"] = None
            __props__.__dict__["status"] = None
        super(DeviceMessage, __self__).__init__(
            'huaweicloud:IoTDA/deviceMessage:DeviceMessage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_time: Optional[pulumi.Input[_builtins.str]] = None,
            device_id: Optional[pulumi.Input[_builtins.str]] = None,
            encoding: Optional[pulumi.Input[_builtins.str]] = None,
            error_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceMessageErrorInfoArgs', 'DeviceMessageErrorInfoArgsDict']]]]] = None,
            finished_time: Optional[pulumi.Input[_builtins.str]] = None,
            message: Optional[pulumi.Input[_builtins.str]] = None,
            message_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            payload_format: Optional[pulumi.Input[_builtins.str]] = None,
            properties: Optional[pulumi.Input[Union['DeviceMessagePropertiesArgs', 'DeviceMessagePropertiesArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            topic: Optional[pulumi.Input[_builtins.str]] = None,
            topic_full_name: Optional[pulumi.Input[_builtins.str]] = None,
            ttl: Optional[pulumi.Input[_builtins.str]] = None) -> 'DeviceMessage':
        """
        Get an existing DeviceMessage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_time: The creation time of the device message.
               The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.str] device_id: Specifies the ID of the device to which the message is delivered.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] encoding: Specifies the encoding format for message content.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **none**
               + **base64**
               
               Defaults to **none**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeviceMessageErrorInfoArgs', 'DeviceMessageErrorInfoArgsDict']]]] error_infos: The message delivery failure details.
               The error_info structure is documented below.
        :param pulumi.Input[_builtins.str] finished_time: The end time of the device message. Contains the time for the message to transition to the
               **DELIVERED* and **TIMEOUT** status. The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.str] message: Specifies message content, supporting string and json formats.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] message_id: Specifies the message ID, it is recommended to use UUID, which is unique
               within the same device. The length should not exceed `128`, and only combinations of letters, numbers,
               underscores (_), and hyphens (-) are allowed. Changing this parameter will create a new resource.
               + If the message ID filled in is not unique within the device, an error will be returned.
               + If left blank, the system will generate a random ID.
        :param pulumi.Input[_builtins.str] name: Specifies the message name. The length should not exceed `128`, and only
               Chinese, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] payload_format: Specifies the payload format. This parameter is valid only `encoding`
               is set to **none**. Changing this parameter will create a new resource.
               The valid values are as follows:
               + **standard**: Standard format for platform encapsulation.
               + **raw**: Directly distribute the message content as a payload.
               
               Defaults to **standard**.
        :param pulumi.Input[Union['DeviceMessagePropertiesArgs', 'DeviceMessagePropertiesArgsDict']] properties: Specifies the attribute parameters of the message downstream to the device.
               Changing this parameter will create a new resource.
               The properties structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the message.  
               The valid values are as follows:
               + **PENDING**: The device is not online, the message is cached and will be issued after the device is online.
               + **DELIVERED**: The message sent successfully.
               + **FAILED**: The message sending failed.
               + **TIMEOUT**: The message has not been sent to the device within the default time of the platform (`1` day).
        :param pulumi.Input[_builtins.str] topic: Specifies the custom topic suffix for message downstream to the device.
               Only topics configured on the tenant product interface can be filled in, otherwise the verification will not pass.
               If the topic is specified, the message will be directed to the device through that topic. If not specified, the
               message will be directed to the device through the system's default topic.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] topic_full_name: Specifies the complete topic name for the message to be sent to the
               device. When it is necessary to issue a custom topic to the device, this parameter can be used to specify the complete
               topic name. The IoT platform does not verify whether the topic is defined on the platform and directly transmits it to
               the device. The device needs to subscribe to the topic in advance.
               Changing this parameter will create a new resource.
               
               > Only one of parameters `topic` and `topic_full_name` can be set.
        :param pulumi.Input[_builtins.str] ttl: Specifies the aging time of the message in the platform cache, in minutes.
               Changing this parameter will create a new resource.
               + The valid value must be a multiple of `5`.
               + When specified as `0`, it means that the message is not cached, and the default maximum caching time is `1,440`.
               
               Defaults to `1,440`.
               
               <a name="iotda_properties"></a>
               The `properties` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceMessageState.__new__(_DeviceMessageState)

        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["device_id"] = device_id
        __props__.__dict__["encoding"] = encoding
        __props__.__dict__["error_infos"] = error_infos
        __props__.__dict__["finished_time"] = finished_time
        __props__.__dict__["message"] = message
        __props__.__dict__["message_id"] = message_id
        __props__.__dict__["name"] = name
        __props__.__dict__["payload_format"] = payload_format
        __props__.__dict__["properties"] = properties
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["topic"] = topic
        __props__.__dict__["topic_full_name"] = topic_full_name
        __props__.__dict__["ttl"] = ttl
        return DeviceMessage(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the device message.
        The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the device to which the message is delivered.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter
    def encoding(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the encoding format for message content.
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **none**
        + **base64**

        Defaults to **none**.
        """
        return pulumi.get(self, "encoding")

    @_builtins.property
    @pulumi.getter(name="errorInfos")
    def error_infos(self) -> pulumi.Output[Sequence['outputs.DeviceMessageErrorInfo']]:
        """
        The message delivery failure details.
        The error_info structure is documented below.
        """
        return pulumi.get(self, "error_infos")

    @_builtins.property
    @pulumi.getter(name="finishedTime")
    def finished_time(self) -> pulumi.Output[_builtins.str]:
        """
        The end time of the device message. Contains the time for the message to transition to the
        **DELIVERED* and **TIMEOUT** status. The format is **yyyyMMdd'T'HHmmss'Z'**, e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "finished_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies message content, supporting string and json formats.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="messageId")
    def message_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the message ID, it is recommended to use UUID, which is unique
        within the same device. The length should not exceed `128`, and only combinations of letters, numbers,
        underscores (_), and hyphens (-) are allowed. Changing this parameter will create a new resource.
        + If the message ID filled in is not unique within the device, an error will be returned.
        + If left blank, the system will generate a random ID.
        """
        return pulumi.get(self, "message_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the message name. The length should not exceed `128`, and only
        Chinese, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="payloadFormat")
    def payload_format(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the payload format. This parameter is valid only `encoding`
        is set to **none**. Changing this parameter will create a new resource.
        The valid values are as follows:
        + **standard**: Standard format for platform encapsulation.
        + **raw**: Directly distribute the message content as a payload.

        Defaults to **standard**.
        """
        return pulumi.get(self, "payload_format")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> pulumi.Output['outputs.DeviceMessageProperties']:
        """
        Specifies the attribute parameters of the message downstream to the device.
        Changing this parameter will create a new resource.
        The properties structure is documented below.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the message.  
        The valid values are as follows:
        + **PENDING**: The device is not online, the message is cached and will be issued after the device is online.
        + **DELIVERED**: The message sent successfully.
        + **FAILED**: The message sending failed.
        + **TIMEOUT**: The message has not been sent to the device within the default time of the platform (`1` day).
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def topic(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the custom topic suffix for message downstream to the device.
        Only topics configured on the tenant product interface can be filled in, otherwise the verification will not pass.
        If the topic is specified, the message will be directed to the device through that topic. If not specified, the
        message will be directed to the device through the system's default topic.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "topic")

    @_builtins.property
    @pulumi.getter(name="topicFullName")
    def topic_full_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the complete topic name for the message to be sent to the
        device. When it is necessary to issue a custom topic to the device, this parameter can be used to specify the complete
        topic name. The IoT platform does not verify whether the topic is defined on the platform and directly transmits it to
        the device. The device needs to subscribe to the topic in advance.
        Changing this parameter will create a new resource.

        > Only one of parameters `topic` and `topic_full_name` can be set.
        """
        return pulumi.get(self, "topic_full_name")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the aging time of the message in the platform cache, in minutes.
        Changing this parameter will create a new resource.
        + The valid value must be a multiple of `5`.
        + When specified as `0`, it means that the message is not cached, and the default maximum caching time is `1,440`.

        Defaults to `1,440`.

        <a name="iotda_properties"></a>
        The `properties` block supports:
        """
        return pulumi.get(self, "ttl")

