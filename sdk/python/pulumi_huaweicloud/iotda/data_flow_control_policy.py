# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DataFlowControlPolicyArgs', 'DataFlowControlPolicy']

@pulumi.input_type
class DataFlowControlPolicyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 limit: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 scope_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataFlowControlPolicy resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the data flow control policy. The length must not
               exceed `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        :param pulumi.Input[_builtins.int] limit: Specifies the size of the data forwarding flow control, in tps. Integers with valid values
               ranging from `1` to `1,000`. Defaults to `1,000`.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the data flow control policy. The length must not exceed `256`, and
               only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] scope: Specifies the scope of the data flow control policy. Changing this parameter
               will create a new resource.
               The valid values are as follows:
               + **USER**: Tenant level flow control strategy.
               + **CHANNEL**: Forwarding channel level flow control strategy.
               + **RULE**: Forwarding rule level flow control strategy.
               + **ACTION**: Forwarding action level flow control strategy.
               
               If omitted, defaults to **USER**.
        :param pulumi.Input[_builtins.str] scope_value: Specifies the scope add value of the data flow control policy. Changing
               this parameter will create a new resource.
               + If the `scope` is set to **USER**, this field does not need to be set.
               + If the `scope` is set to **CHANNEL**, the valid values are **HTTP_FORWARDING**, **DIS_FORWARDING**,
               **OBS_FORWARDING**, **AMQP_FORWARDING**, and **DMS_KAFKA_FORWARDING**.
               + If the `scope` is set to **RULE**, the value of this field is the corresponding data forwarding rule ID.
               + If the `scope` is set to **ACTION**, the value of this field is the corresponding data forwarding rule action ID.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if scope_value is not None:
            pulumi.set(__self__, "scope_value", scope_value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the data flow control policy. The length must not
        exceed `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the size of the data forwarding flow control, in tps. Integers with valid values
        ranging from `1` to `1,000`. Defaults to `1,000`.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "limit", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the data flow control policy. The length must not exceed `256`, and
        only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scope of the data flow control policy. Changing this parameter
        will create a new resource.
        The valid values are as follows:
        + **USER**: Tenant level flow control strategy.
        + **CHANNEL**: Forwarding channel level flow control strategy.
        + **RULE**: Forwarding rule level flow control strategy.
        + **ACTION**: Forwarding action level flow control strategy.

        If omitted, defaults to **USER**.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="scopeValue")
    def scope_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scope add value of the data flow control policy. Changing
        this parameter will create a new resource.
        + If the `scope` is set to **USER**, this field does not need to be set.
        + If the `scope` is set to **CHANNEL**, the valid values are **HTTP_FORWARDING**, **DIS_FORWARDING**,
        **OBS_FORWARDING**, **AMQP_FORWARDING**, and **DMS_KAFKA_FORWARDING**.
        + If the `scope` is set to **RULE**, the value of this field is the corresponding data forwarding rule ID.
        + If the `scope` is set to **ACTION**, the value of this field is the corresponding data forwarding rule action ID.
        """
        return pulumi.get(self, "scope_value")

    @scope_value.setter
    def scope_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope_value", value)


@pulumi.input_type
class _DataFlowControlPolicyState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 limit: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 scope_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataFlowControlPolicy resources.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the data flow control policy. The length must not
               exceed `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        :param pulumi.Input[_builtins.int] limit: Specifies the size of the data forwarding flow control, in tps. Integers with valid values
               ranging from `1` to `1,000`. Defaults to `1,000`.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the data flow control policy. The length must not exceed `256`, and
               only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] scope: Specifies the scope of the data flow control policy. Changing this parameter
               will create a new resource.
               The valid values are as follows:
               + **USER**: Tenant level flow control strategy.
               + **CHANNEL**: Forwarding channel level flow control strategy.
               + **RULE**: Forwarding rule level flow control strategy.
               + **ACTION**: Forwarding action level flow control strategy.
               
               If omitted, defaults to **USER**.
        :param pulumi.Input[_builtins.str] scope_value: Specifies the scope add value of the data flow control policy. Changing
               this parameter will create a new resource.
               + If the `scope` is set to **USER**, this field does not need to be set.
               + If the `scope` is set to **CHANNEL**, the valid values are **HTTP_FORWARDING**, **DIS_FORWARDING**,
               **OBS_FORWARDING**, **AMQP_FORWARDING**, and **DMS_KAFKA_FORWARDING**.
               + If the `scope` is set to **RULE**, the value of this field is the corresponding data forwarding rule ID.
               + If the `scope` is set to **ACTION**, the value of this field is the corresponding data forwarding rule action ID.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if scope_value is not None:
            pulumi.set(__self__, "scope_value", scope_value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the data flow control policy. The length must not
        exceed `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the size of the data forwarding flow control, in tps. Integers with valid values
        ranging from `1` to `1,000`. Defaults to `1,000`.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "limit", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the data flow control policy. The length must not exceed `256`, and
        only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scope of the data flow control policy. Changing this parameter
        will create a new resource.
        The valid values are as follows:
        + **USER**: Tenant level flow control strategy.
        + **CHANNEL**: Forwarding channel level flow control strategy.
        + **RULE**: Forwarding rule level flow control strategy.
        + **ACTION**: Forwarding action level flow control strategy.

        If omitted, defaults to **USER**.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="scopeValue")
    def scope_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scope add value of the data flow control policy. Changing
        this parameter will create a new resource.
        + If the `scope` is set to **USER**, this field does not need to be set.
        + If the `scope` is set to **CHANNEL**, the valid values are **HTTP_FORWARDING**, **DIS_FORWARDING**,
        **OBS_FORWARDING**, **AMQP_FORWARDING**, and **DMS_KAFKA_FORWARDING**.
        + If the `scope` is set to **RULE**, the value of this field is the corresponding data forwarding rule ID.
        + If the `scope` is set to **ACTION**, the value of this field is the corresponding data forwarding rule action ID.
        """
        return pulumi.get(self, "scope_value")

    @scope_value.setter
    def scope_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope_value", value)


@pulumi.type_token("huaweicloud:IoTDA/dataFlowControlPolicy:DataFlowControlPolicy")
class DataFlowControlPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 limit: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 scope_value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an IoTDA data flow control policy resource within HuaweiCloud.

        > Currently, data flow control policy resources are only supported on IoTDA **standard** or **enterprise** edition
          instance. When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
          the IoTDA service endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        scope = config.require_object("scope")
        test = huaweicloud.iotda.DataFlowControlPolicy("test",
            name=name,
            scope=scope)
        ```

        ## Import

        The data flow control policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/dataFlowControlPolicy:DataFlowControlPolicy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the data flow control policy. The length must not
               exceed `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        :param pulumi.Input[_builtins.int] limit: Specifies the size of the data forwarding flow control, in tps. Integers with valid values
               ranging from `1` to `1,000`. Defaults to `1,000`.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the data flow control policy. The length must not exceed `256`, and
               only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] scope: Specifies the scope of the data flow control policy. Changing this parameter
               will create a new resource.
               The valid values are as follows:
               + **USER**: Tenant level flow control strategy.
               + **CHANNEL**: Forwarding channel level flow control strategy.
               + **RULE**: Forwarding rule level flow control strategy.
               + **ACTION**: Forwarding action level flow control strategy.
               
               If omitted, defaults to **USER**.
        :param pulumi.Input[_builtins.str] scope_value: Specifies the scope add value of the data flow control policy. Changing
               this parameter will create a new resource.
               + If the `scope` is set to **USER**, this field does not need to be set.
               + If the `scope` is set to **CHANNEL**, the valid values are **HTTP_FORWARDING**, **DIS_FORWARDING**,
               **OBS_FORWARDING**, **AMQP_FORWARDING**, and **DMS_KAFKA_FORWARDING**.
               + If the `scope` is set to **RULE**, the value of this field is the corresponding data forwarding rule ID.
               + If the `scope` is set to **ACTION**, the value of this field is the corresponding data forwarding rule action ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DataFlowControlPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IoTDA data flow control policy resource within HuaweiCloud.

        > Currently, data flow control policy resources are only supported on IoTDA **standard** or **enterprise** edition
          instance. When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
          the IoTDA service endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        scope = config.require_object("scope")
        test = huaweicloud.iotda.DataFlowControlPolicy("test",
            name=name,
            scope=scope)
        ```

        ## Import

        The data flow control policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/dataFlowControlPolicy:DataFlowControlPolicy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param DataFlowControlPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataFlowControlPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 limit: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 scope_value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataFlowControlPolicyArgs.__new__(DataFlowControlPolicyArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["limit"] = limit
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["scope"] = scope
            __props__.__dict__["scope_value"] = scope_value
        super(DataFlowControlPolicy, __self__).__init__(
            'huaweicloud:IoTDA/dataFlowControlPolicy:DataFlowControlPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            limit: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            scope: Optional[pulumi.Input[_builtins.str]] = None,
            scope_value: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataFlowControlPolicy':
        """
        Get an existing DataFlowControlPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the data flow control policy. The length must not
               exceed `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        :param pulumi.Input[_builtins.int] limit: Specifies the size of the data forwarding flow control, in tps. Integers with valid values
               ranging from `1` to `1,000`. Defaults to `1,000`.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the data flow control policy. The length must not exceed `256`, and
               only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] scope: Specifies the scope of the data flow control policy. Changing this parameter
               will create a new resource.
               The valid values are as follows:
               + **USER**: Tenant level flow control strategy.
               + **CHANNEL**: Forwarding channel level flow control strategy.
               + **RULE**: Forwarding rule level flow control strategy.
               + **ACTION**: Forwarding action level flow control strategy.
               
               If omitted, defaults to **USER**.
        :param pulumi.Input[_builtins.str] scope_value: Specifies the scope add value of the data flow control policy. Changing
               this parameter will create a new resource.
               + If the `scope` is set to **USER**, this field does not need to be set.
               + If the `scope` is set to **CHANNEL**, the valid values are **HTTP_FORWARDING**, **DIS_FORWARDING**,
               **OBS_FORWARDING**, **AMQP_FORWARDING**, and **DMS_KAFKA_FORWARDING**.
               + If the `scope` is set to **RULE**, the value of this field is the corresponding data forwarding rule ID.
               + If the `scope` is set to **ACTION**, the value of this field is the corresponding data forwarding rule action ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataFlowControlPolicyState.__new__(_DataFlowControlPolicyState)

        __props__.__dict__["description"] = description
        __props__.__dict__["limit"] = limit
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["scope"] = scope
        __props__.__dict__["scope_value"] = scope_value
        return DataFlowControlPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of the data flow control policy. The length must not
        exceed `256`, and only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the size of the data forwarding flow control, in tps. Integers with valid values
        ranging from `1` to `1,000`. Defaults to `1,000`.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the data flow control policy. The length must not exceed `256`, and
        only Chinese characters, letters, numbers, and the following characters are allowed: `_?'#().,&%@!-**`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the scope of the data flow control policy. Changing this parameter
        will create a new resource.
        The valid values are as follows:
        + **USER**: Tenant level flow control strategy.
        + **CHANNEL**: Forwarding channel level flow control strategy.
        + **RULE**: Forwarding rule level flow control strategy.
        + **ACTION**: Forwarding action level flow control strategy.

        If omitted, defaults to **USER**.
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="scopeValue")
    def scope_value(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the scope add value of the data flow control policy. Changing
        this parameter will create a new resource.
        + If the `scope` is set to **USER**, this field does not need to be set.
        + If the `scope` is set to **CHANNEL**, the valid values are **HTTP_FORWARDING**, **DIS_FORWARDING**,
        **OBS_FORWARDING**, **AMQP_FORWARDING**, and **DMS_KAFKA_FORWARDING**.
        + If the `scope` is set to **RULE**, the value of this field is the corresponding data forwarding rule ID.
        + If the `scope` is set to **ACTION**, the value of this field is the corresponding data forwarding rule action ID.
        """
        return pulumi.get(self, "scope_value")

