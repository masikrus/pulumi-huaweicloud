# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataBacklogPoliciesResult',
    'AwaitableGetDataBacklogPoliciesResult',
    'get_data_backlog_policies',
    'get_data_backlog_policies_output',
]

@pulumi.output_type
class GetDataBacklogPoliciesResult:
    """
    A collection of values returned by getDataBacklogPolicies.
    """
    def __init__(__self__, id=None, policies=None, policy_name=None, region=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if policy_name and not isinstance(policy_name, str):
            raise TypeError("Expected argument 'policy_name' to be a str")
        pulumi.set(__self__, "policy_name", policy_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetDataBacklogPoliciesPolicyResult']:
        """
        All data backlog policies that match the filter parameters.
        The policies structure is documented below.
        """
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetDataBacklogPoliciesResult(GetDataBacklogPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataBacklogPoliciesResult(
            id=self.id,
            policies=self.policies,
            policy_name=self.policy_name,
            region=self.region)


def get_data_backlog_policies(policy_name: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataBacklogPoliciesResult:
    """
    Use this data source to get the list of IoTDA data backlog policies within HuaweiCloud.

    > Currently, data backlog policy resources are only supported on IoTDA **standard** or **enterprise** edition
      instance. When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
      the IoTDA service endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_name = config.require_object("policyName")
    test = huaweicloud.IoTDA.get_data_backlog_policies(policy_name=policy_name)
    ```


    :param _builtins.str policy_name: Specifies the name of the data backlog policy.
    :param _builtins.str region: Specifies the region in which to query the data backlog policies.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['policyName'] = policy_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getDataBacklogPolicies:getDataBacklogPolicies', __args__, opts=opts, typ=GetDataBacklogPoliciesResult).value

    return AwaitableGetDataBacklogPoliciesResult(
        id=pulumi.get(__ret__, 'id'),
        policies=pulumi.get(__ret__, 'policies'),
        policy_name=pulumi.get(__ret__, 'policy_name'),
        region=pulumi.get(__ret__, 'region'))
def get_data_backlog_policies_output(policy_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataBacklogPoliciesResult]:
    """
    Use this data source to get the list of IoTDA data backlog policies within HuaweiCloud.

    > Currently, data backlog policy resources are only supported on IoTDA **standard** or **enterprise** edition
      instance. When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
      the IoTDA service endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_name = config.require_object("policyName")
    test = huaweicloud.IoTDA.get_data_backlog_policies(policy_name=policy_name)
    ```


    :param _builtins.str policy_name: Specifies the name of the data backlog policy.
    :param _builtins.str region: Specifies the region in which to query the data backlog policies.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['policyName'] = policy_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getDataBacklogPolicies:getDataBacklogPolicies', __args__, opts=opts, typ=GetDataBacklogPoliciesResult)
    return __ret__.apply(lambda __response__: GetDataBacklogPoliciesResult(
        id=pulumi.get(__response__, 'id'),
        policies=pulumi.get(__response__, 'policies'),
        policy_name=pulumi.get(__response__, 'policy_name'),
        region=pulumi.get(__response__, 'region')))
