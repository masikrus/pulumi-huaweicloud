# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DevicePolicyArgs', 'DevicePolicy']

@pulumi.input_type
class DevicePolicyArgs:
    def __init__(__self__, *,
                 policy_name: pulumi.Input[_builtins.str],
                 statements: pulumi.Input[Sequence[pulumi.Input['DevicePolicyStatementArgs']]],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DevicePolicy resource.
        :param pulumi.Input[_builtins.str] policy_name: Specifies the device policy name. The length should not exceed `128`, and only
               combinations of letters, numbers, underscores (_), and hyphens (-) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input['DevicePolicyStatementArgs']]] statements: Specifies the policy document.  
               The statement structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the device policy belongs.
               If omitted, the created policy will belong to the default resource space.
               
               <a name="device_policy_statement"></a>
               The `statement` block supports:
        """
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "statements", statements)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the device policy name. The length should not exceed `128`, and only
        combinations of letters, numbers, underscores (_), and hyphens (-) are allowed.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_name", value)

    @_builtins.property
    @pulumi.getter
    def statements(self) -> pulumi.Input[Sequence[pulumi.Input['DevicePolicyStatementArgs']]]:
        """
        Specifies the policy document.  
        The statement structure is documented below.
        """
        return pulumi.get(self, "statements")

    @statements.setter
    def statements(self, value: pulumi.Input[Sequence[pulumi.Input['DevicePolicyStatementArgs']]]):
        pulumi.set(self, "statements", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource space ID to which the device policy belongs.
        If omitted, the created policy will belong to the default resource space.

        <a name="device_policy_statement"></a>
        The `statement` block supports:
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_id", value)


@pulumi.input_type
class _DevicePolicyState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 statements: Optional[pulumi.Input[Sequence[pulumi.Input['DevicePolicyStatementArgs']]]] = None,
                 update_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DevicePolicy resources.
        :param pulumi.Input[_builtins.str] create_time: The creation time of the device policy.
               The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.str] policy_name: Specifies the device policy name. The length should not exceed `128`, and only
               combinations of letters, numbers, underscores (_), and hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the device policy belongs.
               If omitted, the created policy will belong to the default resource space.
               
               <a name="device_policy_statement"></a>
               The `statement` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['DevicePolicyStatementArgs']]] statements: Specifies the policy document.  
               The statement structure is documented below.
        :param pulumi.Input[_builtins.str] update_time: The latest update time of the device policy.
               The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if statements is not None:
            pulumi.set(__self__, "statements", statements)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the device policy.
        The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the device policy name. The length should not exceed `128`, and only
        combinations of letters, numbers, underscores (_), and hyphens (-) are allowed.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource space ID to which the device policy belongs.
        If omitted, the created policy will belong to the default resource space.

        <a name="device_policy_statement"></a>
        The `statement` block supports:
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_id", value)

    @_builtins.property
    @pulumi.getter
    def statements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DevicePolicyStatementArgs']]]]:
        """
        Specifies the policy document.  
        The statement structure is documented below.
        """
        return pulumi.get(self, "statements")

    @statements.setter
    def statements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DevicePolicyStatementArgs']]]]):
        pulumi.set(self, "statements", value)

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the device policy.
        The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_time", value)


@pulumi.type_token("huaweicloud:IoTDA/devicePolicy:DevicePolicy")
class DevicePolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 statements: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DevicePolicyStatementArgs', 'DevicePolicyStatementArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages an IoTDA device policy resource within HuaweiCloud.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
          the IoTDA service endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_name = config.require_object("policyName")
        effect = config.require_object("effect")
        action = config.require_object("action")
        resource = config.require_object("resource")
        test = huaweicloud.iotda.DevicePolicy("test",
            policy_name=policy_name,
            statements=[{
                "effect": effect,
                "actions": [action],
                "resources": [resource],
            }])
        ```

        ## Import

        The device policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/devicePolicy:DevicePolicy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] policy_name: Specifies the device policy name. The length should not exceed `128`, and only
               combinations of letters, numbers, underscores (_), and hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the device policy belongs.
               If omitted, the created policy will belong to the default resource space.
               
               <a name="device_policy_statement"></a>
               The `statement` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['DevicePolicyStatementArgs', 'DevicePolicyStatementArgsDict']]]] statements: Specifies the policy document.  
               The statement structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DevicePolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IoTDA device policy resource within HuaweiCloud.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify
          the IoTDA service endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          *9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com*, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_name = config.require_object("policyName")
        effect = config.require_object("effect")
        action = config.require_object("action")
        resource = config.require_object("resource")
        test = huaweicloud.iotda.DevicePolicy("test",
            policy_name=policy_name,
            statements=[{
                "effect": effect,
                "actions": [action],
                "resources": [resource],
            }])
        ```

        ## Import

        The device policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/devicePolicy:DevicePolicy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param DevicePolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DevicePolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 statements: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DevicePolicyStatementArgs', 'DevicePolicyStatementArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DevicePolicyArgs.__new__(DevicePolicyArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'policy_name'")
            __props__.__dict__["policy_name"] = policy_name
            __props__.__dict__["region"] = region
            __props__.__dict__["space_id"] = space_id
            if statements is None and not opts.urn:
                raise TypeError("Missing required property 'statements'")
            __props__.__dict__["statements"] = statements
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        super(DevicePolicy, __self__).__init__(
            'huaweicloud:IoTDA/devicePolicy:DevicePolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            policy_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            space_id: Optional[pulumi.Input[_builtins.str]] = None,
            statements: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DevicePolicyStatementArgs', 'DevicePolicyStatementArgsDict']]]]] = None,
            update_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'DevicePolicy':
        """
        Get an existing DevicePolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] create_time: The creation time of the device policy.
               The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        :param pulumi.Input[_builtins.str] policy_name: Specifies the device policy name. The length should not exceed `128`, and only
               combinations of letters, numbers, underscores (_), and hyphens (-) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the device policy belongs.
               If omitted, the created policy will belong to the default resource space.
               
               <a name="device_policy_statement"></a>
               The `statement` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['DevicePolicyStatementArgs', 'DevicePolicyStatementArgsDict']]]] statements: Specifies the policy document.  
               The statement structure is documented below.
        :param pulumi.Input[_builtins.str] update_time: The latest update time of the device policy.
               The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DevicePolicyState.__new__(_DevicePolicyState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["policy_name"] = policy_name
        __props__.__dict__["region"] = region
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["statements"] = statements
        __props__.__dict__["update_time"] = update_time
        return DevicePolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the device policy.
        The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the device policy name. The length should not exceed `128`, and only
        combinations of letters, numbers, underscores (_), and hyphens (-) are allowed.
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the resource space ID to which the device policy belongs.
        If omitted, the created policy will belong to the default resource space.

        <a name="device_policy_statement"></a>
        The `statement` block supports:
        """
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter
    def statements(self) -> pulumi.Output[Sequence['outputs.DevicePolicyStatement']]:
        """
        Specifies the policy document.  
        The statement structure is documented below.
        """
        return pulumi.get(self, "statements")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the device policy.
        The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
        """
        return pulumi.get(self, "update_time")

