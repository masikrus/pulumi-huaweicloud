# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BatchtaskArgs', 'Batchtask']

@pulumi.input_type
class BatchtaskArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 targets_file: Optional[pulumi.Input[_builtins.str]] = None,
                 targets_filters: Optional[pulumi.Input[Sequence[pulumi.Input['BatchtaskTargetsFilterArgs']]]] = None):
        """
        The set of arguments for constructing a Batchtask resource.
        :param pulumi.Input[_builtins.str] type: Specifies the batch task type.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **createDevices**: Batch create devices task.
               + **updateDevices**: Batch update devices task.
               + **deleteDevices**: Batch deletion of devices task.
               + **freezeDevices**: Batch freeze devices task.
               + **unfreezeDevices**: Batch unfreeze devices task.
        :param pulumi.Input[_builtins.str] name: Specifies the batch task name. The length does not exceed `128`, and only
               combinations of Chinese characters, letters, numbers, and underscores (_) are allowed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the IoTDA batch task resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the batch task belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] targets: Specifies an array of target device IDs for executing the batch task, which can
               include up to `30,000` device IDs. This parameter is supported when the `type` is **deleteDevices**,
               **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] targets_file: Specifies the batch task file path to be used for creating batch task.
               Currently, only the **xlsx/xls** file format is supported, and the maximum number of lines in the file is `30000`.
               This parameter is supported when the `type` is **createDevices**, **updateDevices**, **deleteDevices**,
               **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
               Please following [reference](https://support.huaweicloud.com/intl/en-us/usermanual-iothub/iot_01_0032.html),
               download the template file and fill it out.
               
               > Exactly one of `targets`, `targets_filter`, or `targets_file` should be specified.
               
               <a name="IoTDA_targets_filter"></a>
               The `targets_filter` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['BatchtaskTargetsFilterArgs']]] targets_filters: Specifies the batch task target filtering parameters.
               Using this parameter, batch tasks will filter out devices that meet the criteria as targets.
               This parameter is supported when the `type` is **deleteDevices**, **freezeDevices**, or **unfreezeDevices**.
               Changing this parameter will create a new resource.
               The targets_filter structure is documented below.
        """
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if targets_file is not None:
            pulumi.set(__self__, "targets_file", targets_file)
        if targets_filters is not None:
            pulumi.set(__self__, "targets_filters", targets_filters)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the batch task type.
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **createDevices**: Batch create devices task.
        + **updateDevices**: Batch update devices task.
        + **deleteDevices**: Batch deletion of devices task.
        + **freezeDevices**: Batch freeze devices task.
        + **unfreezeDevices**: Batch unfreeze devices task.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the batch task name. The length does not exceed `128`, and only
        combinations of Chinese characters, letters, numbers, and underscores (_) are allowed.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the IoTDA batch task resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource space ID to which the batch task belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_id", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies an array of target device IDs for executing the batch task, which can
        include up to `30,000` device IDs. This parameter is supported when the `type` is **deleteDevices**,
        **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter(name="targetsFile")
    def targets_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the batch task file path to be used for creating batch task.
        Currently, only the **xlsx/xls** file format is supported, and the maximum number of lines in the file is `30000`.
        This parameter is supported when the `type` is **createDevices**, **updateDevices**, **deleteDevices**,
        **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
        Please following [reference](https://support.huaweicloud.com/intl/en-us/usermanual-iothub/iot_01_0032.html),
        download the template file and fill it out.

        > Exactly one of `targets`, `targets_filter`, or `targets_file` should be specified.

        <a name="IoTDA_targets_filter"></a>
        The `targets_filter` block supports:
        """
        return pulumi.get(self, "targets_file")

    @targets_file.setter
    def targets_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "targets_file", value)

    @_builtins.property
    @pulumi.getter(name="targetsFilters")
    def targets_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BatchtaskTargetsFilterArgs']]]]:
        """
        Specifies the batch task target filtering parameters.
        Using this parameter, batch tasks will filter out devices that meet the criteria as targets.
        This parameter is supported when the `type` is **deleteDevices**, **freezeDevices**, or **unfreezeDevices**.
        Changing this parameter will create a new resource.
        The targets_filter structure is documented below.
        """
        return pulumi.get(self, "targets_filters")

    @targets_filters.setter
    def targets_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BatchtaskTargetsFilterArgs']]]]):
        pulumi.set(self, "targets_filters", value)


@pulumi.input_type
class _BatchtaskState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_desc: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 targets_file: Optional[pulumi.Input[_builtins.str]] = None,
                 targets_filters: Optional[pulumi.Input[Sequence[pulumi.Input['BatchtaskTargetsFilterArgs']]]] = None,
                 task_details: Optional[pulumi.Input[Sequence[pulumi.Input['BatchtaskTaskDetailArgs']]]] = None,
                 task_progresses: Optional[pulumi.Input[Sequence[pulumi.Input['BatchtaskTaskProgressArgs']]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Batchtask resources.
        :param pulumi.Input[_builtins.str] created_at: The time of batch task creation. The format is **yyyyMMdd'T'HHmmss'Z**. e.g. **20190528T153000Z**.
        :param pulumi.Input[_builtins.str] name: Specifies the batch task name. The length does not exceed `128`, and only
               combinations of Chinese characters, letters, numbers, and underscores (_) are allowed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the IoTDA batch task resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the batch task belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The execution status of subtask. The value can be **Success** or **Fail**.
        :param pulumi.Input[_builtins.str] status_desc: The batch task status description, indicating the error message of the main task failure.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] targets: Specifies an array of target device IDs for executing the batch task, which can
               include up to `30,000` device IDs. This parameter is supported when the `type` is **deleteDevices**,
               **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] targets_file: Specifies the batch task file path to be used for creating batch task.
               Currently, only the **xlsx/xls** file format is supported, and the maximum number of lines in the file is `30000`.
               This parameter is supported when the `type` is **createDevices**, **updateDevices**, **deleteDevices**,
               **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
               Please following [reference](https://support.huaweicloud.com/intl/en-us/usermanual-iothub/iot_01_0032.html),
               download the template file and fill it out.
               
               > Exactly one of `targets`, `targets_filter`, or `targets_file` should be specified.
               
               <a name="IoTDA_targets_filter"></a>
               The `targets_filter` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['BatchtaskTargetsFilterArgs']]] targets_filters: Specifies the batch task target filtering parameters.
               Using this parameter, batch tasks will filter out devices that meet the criteria as targets.
               This parameter is supported when the `type` is **deleteDevices**, **freezeDevices**, or **unfreezeDevices**.
               Changing this parameter will create a new resource.
               The targets_filter structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BatchtaskTaskDetailArgs']]] task_details: List of subTask details.
               The task_details structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BatchtaskTaskProgressArgs']]] task_progresses: Subtask execution statistics results.
               The task_progress structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the batch task type.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **createDevices**: Batch create devices task.
               + **updateDevices**: Batch update devices task.
               + **deleteDevices**: Batch deletion of devices task.
               + **freezeDevices**: Batch freeze devices task.
               + **unfreezeDevices**: Batch unfreeze devices task.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_desc is not None:
            pulumi.set(__self__, "status_desc", status_desc)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if targets_file is not None:
            pulumi.set(__self__, "targets_file", targets_file)
        if targets_filters is not None:
            pulumi.set(__self__, "targets_filters", targets_filters)
        if task_details is not None:
            pulumi.set(__self__, "task_details", task_details)
        if task_progresses is not None:
            pulumi.set(__self__, "task_progresses", task_progresses)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time of batch task creation. The format is **yyyyMMdd'T'HHmmss'Z**. e.g. **20190528T153000Z**.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the batch task name. The length does not exceed `128`, and only
        combinations of Chinese characters, letters, numbers, and underscores (_) are allowed.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the IoTDA batch task resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource space ID to which the batch task belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The execution status of subtask. The value can be **Success** or **Fail**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The batch task status description, indicating the error message of the main task failure.
        """
        return pulumi.get(self, "status_desc")

    @status_desc.setter
    def status_desc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status_desc", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies an array of target device IDs for executing the batch task, which can
        include up to `30,000` device IDs. This parameter is supported when the `type` is **deleteDevices**,
        **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter(name="targetsFile")
    def targets_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the batch task file path to be used for creating batch task.
        Currently, only the **xlsx/xls** file format is supported, and the maximum number of lines in the file is `30000`.
        This parameter is supported when the `type` is **createDevices**, **updateDevices**, **deleteDevices**,
        **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
        Please following [reference](https://support.huaweicloud.com/intl/en-us/usermanual-iothub/iot_01_0032.html),
        download the template file and fill it out.

        > Exactly one of `targets`, `targets_filter`, or `targets_file` should be specified.

        <a name="IoTDA_targets_filter"></a>
        The `targets_filter` block supports:
        """
        return pulumi.get(self, "targets_file")

    @targets_file.setter
    def targets_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "targets_file", value)

    @_builtins.property
    @pulumi.getter(name="targetsFilters")
    def targets_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BatchtaskTargetsFilterArgs']]]]:
        """
        Specifies the batch task target filtering parameters.
        Using this parameter, batch tasks will filter out devices that meet the criteria as targets.
        This parameter is supported when the `type` is **deleteDevices**, **freezeDevices**, or **unfreezeDevices**.
        Changing this parameter will create a new resource.
        The targets_filter structure is documented below.
        """
        return pulumi.get(self, "targets_filters")

    @targets_filters.setter
    def targets_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BatchtaskTargetsFilterArgs']]]]):
        pulumi.set(self, "targets_filters", value)

    @_builtins.property
    @pulumi.getter(name="taskDetails")
    def task_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BatchtaskTaskDetailArgs']]]]:
        """
        List of subTask details.
        The task_details structure is documented below.
        """
        return pulumi.get(self, "task_details")

    @task_details.setter
    def task_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BatchtaskTaskDetailArgs']]]]):
        pulumi.set(self, "task_details", value)

    @_builtins.property
    @pulumi.getter(name="taskProgresses")
    def task_progresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BatchtaskTaskProgressArgs']]]]:
        """
        Subtask execution statistics results.
        The task_progress structure is documented below.
        """
        return pulumi.get(self, "task_progresses")

    @task_progresses.setter
    def task_progresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BatchtaskTaskProgressArgs']]]]):
        pulumi.set(self, "task_progresses", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the batch task type.
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **createDevices**: Batch create devices task.
        + **updateDevices**: Batch update devices task.
        + **deleteDevices**: Batch deletion of devices task.
        + **freezeDevices**: Batch freeze devices task.
        + **unfreezeDevices**: Batch unfreeze devices task.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:IoTDA/batchtask:Batchtask")
class Batchtask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 targets_file: Optional[pulumi.Input[_builtins.str]] = None,
                 targets_filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BatchtaskTargetsFilterArgs', 'BatchtaskTargetsFilterArgsDict']]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an IoTDA batch task resource within HuaweiCloud.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
          endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        task_name = config.require_object("taskName")
        task_type = config.require_object("taskType")
        targets_file = config.require_object("targetsFile")
        test = huaweicloud.iotda.Batchtask("test",
            name=task_name,
            type=task_type,
            targets_file=targets_file)
        ```

        ## Import

        The batch task can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/batchtask:Batchtask test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `space_id`, `targets`, `targets_filter`,

         `targets_file`. It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_iotda_batchtask" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              space_id, targets, targets_filter, targets_file,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Specifies the batch task name. The length does not exceed `128`, and only
               combinations of Chinese characters, letters, numbers, and underscores (_) are allowed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the IoTDA batch task resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the batch task belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] targets: Specifies an array of target device IDs for executing the batch task, which can
               include up to `30,000` device IDs. This parameter is supported when the `type` is **deleteDevices**,
               **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] targets_file: Specifies the batch task file path to be used for creating batch task.
               Currently, only the **xlsx/xls** file format is supported, and the maximum number of lines in the file is `30000`.
               This parameter is supported when the `type` is **createDevices**, **updateDevices**, **deleteDevices**,
               **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
               Please following [reference](https://support.huaweicloud.com/intl/en-us/usermanual-iothub/iot_01_0032.html),
               download the template file and fill it out.
               
               > Exactly one of `targets`, `targets_filter`, or `targets_file` should be specified.
               
               <a name="IoTDA_targets_filter"></a>
               The `targets_filter` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['BatchtaskTargetsFilterArgs', 'BatchtaskTargetsFilterArgsDict']]]] targets_filters: Specifies the batch task target filtering parameters.
               Using this parameter, batch tasks will filter out devices that meet the criteria as targets.
               This parameter is supported when the `type` is **deleteDevices**, **freezeDevices**, or **unfreezeDevices**.
               Changing this parameter will create a new resource.
               The targets_filter structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the batch task type.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **createDevices**: Batch create devices task.
               + **updateDevices**: Batch update devices task.
               + **deleteDevices**: Batch deletion of devices task.
               + **freezeDevices**: Batch freeze devices task.
               + **unfreezeDevices**: Batch unfreeze devices task.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BatchtaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IoTDA batch task resource within HuaweiCloud.

        > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
          endpoint in `provider` block.
          You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
          to view the HTTPS application access address. An example of the access address might be
          **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
          `provider` block as follows:

        ```python
        import pulumi
        ```

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        task_name = config.require_object("taskName")
        task_type = config.require_object("taskType")
        targets_file = config.require_object("targetsFile")
        test = huaweicloud.iotda.Batchtask("test",
            name=task_name,
            type=task_type,
            targets_file=targets_file)
        ```

        ## Import

        The batch task can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:IoTDA/batchtask:Batchtask test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `space_id`, `targets`, `targets_filter`,

         `targets_file`. It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_iotda_batchtask" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              space_id, targets, targets_filter, targets_file,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param BatchtaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BatchtaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 targets_file: Optional[pulumi.Input[_builtins.str]] = None,
                 targets_filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BatchtaskTargetsFilterArgs', 'BatchtaskTargetsFilterArgsDict']]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BatchtaskArgs.__new__(BatchtaskArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["targets"] = targets
            __props__.__dict__["targets_file"] = targets_file
            __props__.__dict__["targets_filters"] = targets_filters
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_desc"] = None
            __props__.__dict__["task_details"] = None
            __props__.__dict__["task_progresses"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["taskDetails"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Batchtask, __self__).__init__(
            'huaweicloud:IoTDA/batchtask:Batchtask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            space_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_desc: Optional[pulumi.Input[_builtins.str]] = None,
            targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            targets_file: Optional[pulumi.Input[_builtins.str]] = None,
            targets_filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BatchtaskTargetsFilterArgs', 'BatchtaskTargetsFilterArgsDict']]]]] = None,
            task_details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BatchtaskTaskDetailArgs', 'BatchtaskTaskDetailArgsDict']]]]] = None,
            task_progresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BatchtaskTaskProgressArgs', 'BatchtaskTaskProgressArgsDict']]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'Batchtask':
        """
        Get an existing Batchtask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The time of batch task creation. The format is **yyyyMMdd'T'HHmmss'Z**. e.g. **20190528T153000Z**.
        :param pulumi.Input[_builtins.str] name: Specifies the batch task name. The length does not exceed `128`, and only
               combinations of Chinese characters, letters, numbers, and underscores (_) are allowed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the IoTDA batch task resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] space_id: Specifies the resource space ID to which the batch task belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The execution status of subtask. The value can be **Success** or **Fail**.
        :param pulumi.Input[_builtins.str] status_desc: The batch task status description, indicating the error message of the main task failure.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] targets: Specifies an array of target device IDs for executing the batch task, which can
               include up to `30,000` device IDs. This parameter is supported when the `type` is **deleteDevices**,
               **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] targets_file: Specifies the batch task file path to be used for creating batch task.
               Currently, only the **xlsx/xls** file format is supported, and the maximum number of lines in the file is `30000`.
               This parameter is supported when the `type` is **createDevices**, **updateDevices**, **deleteDevices**,
               **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
               Please following [reference](https://support.huaweicloud.com/intl/en-us/usermanual-iothub/iot_01_0032.html),
               download the template file and fill it out.
               
               > Exactly one of `targets`, `targets_filter`, or `targets_file` should be specified.
               
               <a name="IoTDA_targets_filter"></a>
               The `targets_filter` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['BatchtaskTargetsFilterArgs', 'BatchtaskTargetsFilterArgsDict']]]] targets_filters: Specifies the batch task target filtering parameters.
               Using this parameter, batch tasks will filter out devices that meet the criteria as targets.
               This parameter is supported when the `type` is **deleteDevices**, **freezeDevices**, or **unfreezeDevices**.
               Changing this parameter will create a new resource.
               The targets_filter structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BatchtaskTaskDetailArgs', 'BatchtaskTaskDetailArgsDict']]]] task_details: List of subTask details.
               The task_details structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BatchtaskTaskProgressArgs', 'BatchtaskTaskProgressArgsDict']]]] task_progresses: Subtask execution statistics results.
               The task_progress structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the batch task type.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **createDevices**: Batch create devices task.
               + **updateDevices**: Batch update devices task.
               + **deleteDevices**: Batch deletion of devices task.
               + **freezeDevices**: Batch freeze devices task.
               + **unfreezeDevices**: Batch unfreeze devices task.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BatchtaskState.__new__(_BatchtaskState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["status"] = status
        __props__.__dict__["status_desc"] = status_desc
        __props__.__dict__["targets"] = targets
        __props__.__dict__["targets_file"] = targets_file
        __props__.__dict__["targets_filters"] = targets_filters
        __props__.__dict__["task_details"] = task_details
        __props__.__dict__["task_progresses"] = task_progresses
        __props__.__dict__["type"] = type
        return Batchtask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time of batch task creation. The format is **yyyyMMdd'T'HHmmss'Z**. e.g. **20190528T153000Z**.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the batch task name. The length does not exceed `128`, and only
        combinations of Chinese characters, letters, numbers, and underscores (_) are allowed.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the IoTDA batch task resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the resource space ID to which the batch task belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The execution status of subtask. The value can be **Success** or **Fail**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> pulumi.Output[_builtins.str]:
        """
        The batch task status description, indicating the error message of the main task failure.
        """
        return pulumi.get(self, "status_desc")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies an array of target device IDs for executing the batch task, which can
        include up to `30,000` device IDs. This parameter is supported when the `type` is **deleteDevices**,
        **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter(name="targetsFile")
    def targets_file(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the batch task file path to be used for creating batch task.
        Currently, only the **xlsx/xls** file format is supported, and the maximum number of lines in the file is `30000`.
        This parameter is supported when the `type` is **createDevices**, **updateDevices**, **deleteDevices**,
        **freezeDevices**, or **unfreezeDevices**. Changing this parameter will create a new resource.
        Please following [reference](https://support.huaweicloud.com/intl/en-us/usermanual-iothub/iot_01_0032.html),
        download the template file and fill it out.

        > Exactly one of `targets`, `targets_filter`, or `targets_file` should be specified.

        <a name="IoTDA_targets_filter"></a>
        The `targets_filter` block supports:
        """
        return pulumi.get(self, "targets_file")

    @_builtins.property
    @pulumi.getter(name="targetsFilters")
    def targets_filters(self) -> pulumi.Output[Optional[Sequence['outputs.BatchtaskTargetsFilter']]]:
        """
        Specifies the batch task target filtering parameters.
        Using this parameter, batch tasks will filter out devices that meet the criteria as targets.
        This parameter is supported when the `type` is **deleteDevices**, **freezeDevices**, or **unfreezeDevices**.
        Changing this parameter will create a new resource.
        The targets_filter structure is documented below.
        """
        return pulumi.get(self, "targets_filters")

    @_builtins.property
    @pulumi.getter(name="taskDetails")
    def task_details(self) -> pulumi.Output[Sequence['outputs.BatchtaskTaskDetail']]:
        """
        List of subTask details.
        The task_details structure is documented below.
        """
        return pulumi.get(self, "task_details")

    @_builtins.property
    @pulumi.getter(name="taskProgresses")
    def task_progresses(self) -> pulumi.Output[Sequence['outputs.BatchtaskTaskProgress']]:
        """
        Subtask execution statistics results.
        The task_progress structure is documented below.
        """
        return pulumi.get(self, "task_progresses")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the batch task type.
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **createDevices**: Batch create devices task.
        + **updateDevices**: Batch update devices task.
        + **deleteDevices**: Batch deletion of devices task.
        + **freezeDevices**: Batch freeze devices task.
        + **unfreezeDevices**: Batch unfreeze devices task.
        """
        return pulumi.get(self, "type")

