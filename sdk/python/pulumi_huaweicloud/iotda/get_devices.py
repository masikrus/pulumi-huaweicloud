# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDevicesResult',
    'AwaitableGetDevicesResult',
    'get_devices',
    'get_devices_output',
]

@pulumi.output_type
class GetDevicesResult:
    """
    A collection of values returned by getDevices.
    """
    def __init__(__self__, device_id=None, devices=None, end_time=None, gateway_id=None, id=None, is_cascade=None, name=None, node_id=None, product_id=None, region=None, space_id=None, start_time=None):
        if device_id and not isinstance(device_id, str):
            raise TypeError("Expected argument 'device_id' to be a str")
        pulumi.set(__self__, "device_id", device_id)
        if devices and not isinstance(devices, list):
            raise TypeError("Expected argument 'devices' to be a list")
        pulumi.set(__self__, "devices", devices)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_cascade and not isinstance(is_cascade, bool):
            raise TypeError("Expected argument 'is_cascade' to be a bool")
        pulumi.set(__self__, "is_cascade", is_cascade)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_id and not isinstance(node_id, str):
            raise TypeError("Expected argument 'node_id' to be a str")
        pulumi.set(__self__, "node_id", node_id)
        if product_id and not isinstance(product_id, str):
            raise TypeError("Expected argument 'product_id' to be a str")
        pulumi.set(__self__, "product_id", product_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.GetDevicesDeviceResult']:
        """
        All devices that match the filter parameters.
        The devices structure is documented below.
        """
        return pulumi.get(self, "devices")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[_builtins.str]:
        """
        The ID of the parent device to which the device belongs
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCascade")
    def is_cascade(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_cascade")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The device name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[_builtins.str]:
        """
        The node ID of the device.
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[_builtins.str]:
        """
        The product ID to which the device belongs.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[_builtins.str]:
        """
        The space ID to which the device belongs.
        """
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "start_time")


class AwaitableGetDevicesResult(GetDevicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDevicesResult(
            device_id=self.device_id,
            devices=self.devices,
            end_time=self.end_time,
            gateway_id=self.gateway_id,
            id=self.id,
            is_cascade=self.is_cascade,
            name=self.name,
            node_id=self.node_id,
            product_id=self.product_id,
            region=self.region,
            space_id=self.space_id,
            start_time=self.start_time)


def get_devices(device_id: Optional[_builtins.str] = None,
                end_time: Optional[_builtins.str] = None,
                gateway_id: Optional[_builtins.str] = None,
                is_cascade: Optional[_builtins.bool] = None,
                name: Optional[_builtins.str] = None,
                node_id: Optional[_builtins.str] = None,
                product_id: Optional[_builtins.str] = None,
                region: Optional[_builtins.str] = None,
                space_id: Optional[_builtins.str] = None,
                start_time: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDevicesResult:
    """
    Use this data source to get the list of IoTDA devices within HuaweiCloud.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    device_id = config.require_object("deviceId")
    test = huaweicloud.IoTDA.get_devices(device_id=device_id)
    ```


    :param _builtins.str device_id: Specifies the ID of the device to be queried.
    :param _builtins.str end_time: Specifies the end time to be queried. The query result is for devices created before
           this time (excluding devices created at this time). The format is **yyyyMMdd'T'HHmmss'Z**. e.g. **20190528T153000Z**.
    :param _builtins.str gateway_id: Specifies the gateway ID of the devices to be queried;
           The `gateway_id` is the ID of the parent device to which the devices belong.
    :param _builtins.bool is_cascade: Specifies whether to cascade queries, this parameter only takes effect when
           carrying `gateway_id` simultaneously. The default value is **false**.
           The valid values are as follows:
           + **true**: Represents querying all levels of sub devices under a device with a device ID equal to gateway ID.
           + **false**: Represents the first level child devices under the device with the query device ID equal to gateway ID.
    :param _builtins.str name: Specifies the name of the device to be queried.
    :param _builtins.str node_id: Specifies the node ID of the device to be queried.
    :param _builtins.str product_id: Specifies the ID of the product to be queried.
           If omitted, query the devices in all products under the current instance.
    :param _builtins.str region: Specifies the region in which to query the devices.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the space ID of the devices to be queried.
           If omitted, query the devices in all spaces under the current instance.
    :param _builtins.str start_time: Specifies the start time to be queried. The query result shows devices created after
           this time (including devices created at this time). The format is **yyyyMMdd'T'HHmmss'Z**. e.g. **20190528T153000Z**.
    """
    __args__ = dict()
    __args__['deviceId'] = device_id
    __args__['endTime'] = end_time
    __args__['gatewayId'] = gateway_id
    __args__['isCascade'] = is_cascade
    __args__['name'] = name
    __args__['nodeId'] = node_id
    __args__['productId'] = product_id
    __args__['region'] = region
    __args__['spaceId'] = space_id
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getDevices:getDevices', __args__, opts=opts, typ=GetDevicesResult).value

    return AwaitableGetDevicesResult(
        device_id=pulumi.get(__ret__, 'device_id'),
        devices=pulumi.get(__ret__, 'devices'),
        end_time=pulumi.get(__ret__, 'end_time'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        id=pulumi.get(__ret__, 'id'),
        is_cascade=pulumi.get(__ret__, 'is_cascade'),
        name=pulumi.get(__ret__, 'name'),
        node_id=pulumi.get(__ret__, 'node_id'),
        product_id=pulumi.get(__ret__, 'product_id'),
        region=pulumi.get(__ret__, 'region'),
        space_id=pulumi.get(__ret__, 'space_id'),
        start_time=pulumi.get(__ret__, 'start_time'))
def get_devices_output(device_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       gateway_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       is_cascade: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       node_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       product_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       space_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDevicesResult]:
    """
    Use this data source to get the list of IoTDA devices within HuaweiCloud.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    device_id = config.require_object("deviceId")
    test = huaweicloud.IoTDA.get_devices(device_id=device_id)
    ```


    :param _builtins.str device_id: Specifies the ID of the device to be queried.
    :param _builtins.str end_time: Specifies the end time to be queried. The query result is for devices created before
           this time (excluding devices created at this time). The format is **yyyyMMdd'T'HHmmss'Z**. e.g. **20190528T153000Z**.
    :param _builtins.str gateway_id: Specifies the gateway ID of the devices to be queried;
           The `gateway_id` is the ID of the parent device to which the devices belong.
    :param _builtins.bool is_cascade: Specifies whether to cascade queries, this parameter only takes effect when
           carrying `gateway_id` simultaneously. The default value is **false**.
           The valid values are as follows:
           + **true**: Represents querying all levels of sub devices under a device with a device ID equal to gateway ID.
           + **false**: Represents the first level child devices under the device with the query device ID equal to gateway ID.
    :param _builtins.str name: Specifies the name of the device to be queried.
    :param _builtins.str node_id: Specifies the node ID of the device to be queried.
    :param _builtins.str product_id: Specifies the ID of the product to be queried.
           If omitted, query the devices in all products under the current instance.
    :param _builtins.str region: Specifies the region in which to query the devices.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the space ID of the devices to be queried.
           If omitted, query the devices in all spaces under the current instance.
    :param _builtins.str start_time: Specifies the start time to be queried. The query result shows devices created after
           this time (including devices created at this time). The format is **yyyyMMdd'T'HHmmss'Z**. e.g. **20190528T153000Z**.
    """
    __args__ = dict()
    __args__['deviceId'] = device_id
    __args__['endTime'] = end_time
    __args__['gatewayId'] = gateway_id
    __args__['isCascade'] = is_cascade
    __args__['name'] = name
    __args__['nodeId'] = node_id
    __args__['productId'] = product_id
    __args__['region'] = region
    __args__['spaceId'] = space_id
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getDevices:getDevices', __args__, opts=opts, typ=GetDevicesResult)
    return __ret__.apply(lambda __response__: GetDevicesResult(
        device_id=pulumi.get(__response__, 'device_id'),
        devices=pulumi.get(__response__, 'devices'),
        end_time=pulumi.get(__response__, 'end_time'),
        gateway_id=pulumi.get(__response__, 'gateway_id'),
        id=pulumi.get(__response__, 'id'),
        is_cascade=pulumi.get(__response__, 'is_cascade'),
        name=pulumi.get(__response__, 'name'),
        node_id=pulumi.get(__response__, 'node_id'),
        product_id=pulumi.get(__response__, 'product_id'),
        region=pulumi.get(__response__, 'region'),
        space_id=pulumi.get(__response__, 'space_id'),
        start_time=pulumi.get(__response__, 'start_time')))
