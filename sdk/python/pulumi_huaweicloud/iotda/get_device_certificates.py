# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDeviceCertificatesResult',
    'AwaitableGetDeviceCertificatesResult',
    'get_device_certificates',
    'get_device_certificates_output',
]

@pulumi.output_type
class GetDeviceCertificatesResult:
    """
    A collection of values returned by getDeviceCertificates.
    """
    def __init__(__self__, certificate_id=None, certificates=None, cn=None, id=None, region=None, space_id=None, status=None):
        if certificate_id and not isinstance(certificate_id, str):
            raise TypeError("Expected argument 'certificate_id' to be a str")
        pulumi.set(__self__, "certificate_id", certificate_id)
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        pulumi.set(__self__, "certificates", certificates)
        if cn and not isinstance(cn, str):
            raise TypeError("Expected argument 'cn' to be a str")
        pulumi.set(__self__, "cn", cn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "certificate_id")

    @_builtins.property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.GetDeviceCertificatesCertificateResult']:
        """
        All certificates that match the filter parameters.
        The certificates structure is documented below.
        """
        return pulumi.get(self, "certificates")

    @_builtins.property
    @pulumi.getter
    def cn(self) -> Optional[_builtins.str]:
        """
        The certificate CN name.
        """
        return pulumi.get(self, "cn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The certificate verification status.
        """
        return pulumi.get(self, "status")


class AwaitableGetDeviceCertificatesResult(GetDeviceCertificatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeviceCertificatesResult(
            certificate_id=self.certificate_id,
            certificates=self.certificates,
            cn=self.cn,
            id=self.id,
            region=self.region,
            space_id=self.space_id,
            status=self.status)


def get_device_certificates(certificate_id: Optional[_builtins.str] = None,
                            cn: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            space_id: Optional[_builtins.str] = None,
                            status: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeviceCertificatesResult:
    """
    Use this data source to get the list of IoTDA device CA certificates within HuaweiCloud.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    certificate_id = config.require_object("certificateId")
    test = huaweicloud.IoTDA.get_device_certificates(certificate_id=certificate_id)
    ```


    :param _builtins.str certificate_id: Specifies the ID of the certificate to be queried.
    :param _builtins.str cn: Specifies the CN name of the certificates to be queried.
    :param _builtins.str region: Specifies the region in which to query the certificates.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the space ID of the certificates to be queried.
           If omitted, query the certificates for all spaces under the current instance.
    :param _builtins.str status: Specifies the verification status of the certificates to be queried.  
           The value can be **Verified** or **Unverified**.
    """
    __args__ = dict()
    __args__['certificateId'] = certificate_id
    __args__['cn'] = cn
    __args__['region'] = region
    __args__['spaceId'] = space_id
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:IoTDA/getDeviceCertificates:getDeviceCertificates', __args__, opts=opts, typ=GetDeviceCertificatesResult).value

    return AwaitableGetDeviceCertificatesResult(
        certificate_id=pulumi.get(__ret__, 'certificate_id'),
        certificates=pulumi.get(__ret__, 'certificates'),
        cn=pulumi.get(__ret__, 'cn'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        space_id=pulumi.get(__ret__, 'space_id'),
        status=pulumi.get(__ret__, 'status'))
def get_device_certificates_output(certificate_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   cn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   space_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDeviceCertificatesResult]:
    """
    Use this data source to get the list of IoTDA device CA certificates within HuaweiCloud.

    > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
      endpoint in `provider` block.
      You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
      to view the HTTPS application access address. An example of the access address might be
      **9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
      `provider` block as follows:

    ```python
    import pulumi
    ```

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    certificate_id = config.require_object("certificateId")
    test = huaweicloud.IoTDA.get_device_certificates(certificate_id=certificate_id)
    ```


    :param _builtins.str certificate_id: Specifies the ID of the certificate to be queried.
    :param _builtins.str cn: Specifies the CN name of the certificates to be queried.
    :param _builtins.str region: Specifies the region in which to query the certificates.
           If omitted, the provider-level region will be used.
    :param _builtins.str space_id: Specifies the space ID of the certificates to be queried.
           If omitted, query the certificates for all spaces under the current instance.
    :param _builtins.str status: Specifies the verification status of the certificates to be queried.  
           The value can be **Verified** or **Unverified**.
    """
    __args__ = dict()
    __args__['certificateId'] = certificate_id
    __args__['cn'] = cn
    __args__['region'] = region
    __args__['spaceId'] = space_id
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:IoTDA/getDeviceCertificates:getDeviceCertificates', __args__, opts=opts, typ=GetDeviceCertificatesResult)
    return __ret__.apply(lambda __response__: GetDeviceCertificatesResult(
        certificate_id=pulumi.get(__response__, 'certificate_id'),
        certificates=pulumi.get(__response__, 'certificates'),
        cn=pulumi.get(__response__, 'cn'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        space_id=pulumi.get(__response__, 'space_id'),
        status=pulumi.get(__response__, 'status')))
