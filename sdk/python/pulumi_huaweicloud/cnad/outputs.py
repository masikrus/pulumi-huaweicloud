# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AdvancedPolicyAssociateProtectedObject',
    'AdvancedProtectedObjectProtectedObject',
    'GetAdvancedAvailableObjectsProtectedObjectResult',
    'GetAdvancedBlockListBlockingListResult',
    'GetAdvancedInstancesInstanceResult',
    'GetAdvancedProtectedObjectsProtectedObjectResult',
]

@pulumi.output_type
class AdvancedPolicyAssociateProtectedObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockThreshold":
            suggest = "block_threshold"
        elif key == "cleanThreshold":
            suggest = "clean_threshold"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "instanceVersion":
            suggest = "instance_version"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdvancedPolicyAssociateProtectedObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdvancedPolicyAssociateProtectedObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdvancedPolicyAssociateProtectedObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_threshold: Optional[_builtins.str] = None,
                 clean_threshold: Optional[_builtins.int] = None,
                 id: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 instance_name: Optional[_builtins.str] = None,
                 instance_version: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 policy_name: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 status: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str block_threshold: Indicates the block threshold of the protected object.
        :param _builtins.int clean_threshold: Indicates the clean threshold of the protected object.
        :param _builtins.str id: Indicates the ID of the protected object.
        :param _builtins.str instance_id: Specifies the instance ID. You can find it through data source
               `cnad_get_advanced_instances`.
               
               Changing this parameter will create a new resource.
        :param _builtins.str instance_name: Indicates the instance name of the protected object.
        :param _builtins.str instance_version: Indicates the instance version of the protected object.
               + **cnad_pro**: Professional Edition.
               + **cnad_ip**: Standard Edition.
               + **cnad_ep**: Platinum Edition.
               + **cnad_full_high**: Unlimited Protection Advanced Edition.
               + **cnad_vic**: On demand Version.
               + **cnad_intl_ep**: International Station Platinum Edition.
        :param _builtins.str ip_address: Indicates the IP of the protected object.
        :param _builtins.str name: Indicates the name of the protected object.
        :param _builtins.str policy_name: Indicates the policy name of the protected object.
        :param _builtins.str region: Indicates the region to which the protected object belongs.
        :param _builtins.int status: Indicates the status of the protected object.
               + **0**: Normal.
               + **1**: Cleaning in progress.
               + **2**: In a black hole.
        :param _builtins.str type: Indicates the type of the protected object.
        """
        if block_threshold is not None:
            pulumi.set(__self__, "block_threshold", block_threshold)
        if clean_threshold is not None:
            pulumi.set(__self__, "clean_threshold", clean_threshold)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_version is not None:
            pulumi.set(__self__, "instance_version", instance_version)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="blockThreshold")
    def block_threshold(self) -> Optional[_builtins.str]:
        """
        Indicates the block threshold of the protected object.
        """
        return pulumi.get(self, "block_threshold")

    @_builtins.property
    @pulumi.getter(name="cleanThreshold")
    def clean_threshold(self) -> Optional[_builtins.int]:
        """
        Indicates the clean threshold of the protected object.
        """
        return pulumi.get(self, "clean_threshold")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the protected object.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        Specifies the instance ID. You can find it through data source
        `cnad_get_advanced_instances`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[_builtins.str]:
        """
        Indicates the instance name of the protected object.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceVersion")
    def instance_version(self) -> Optional[_builtins.str]:
        """
        Indicates the instance version of the protected object.
        + **cnad_pro**: Professional Edition.
        + **cnad_ip**: Standard Edition.
        + **cnad_ep**: Platinum Edition.
        + **cnad_full_high**: Unlimited Protection Advanced Edition.
        + **cnad_vic**: On demand Version.
        + **cnad_intl_ep**: International Station Platinum Edition.
        """
        return pulumi.get(self, "instance_version")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        Indicates the IP of the protected object.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the protected object.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        """
        Indicates the policy name of the protected object.
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Indicates the region to which the protected object belongs.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        Indicates the status of the protected object.
        + **0**: Normal.
        + **1**: Cleaning in progress.
        + **2**: In a black hole.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the type of the protected object.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AdvancedProtectedObjectProtectedObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "blockThreshold":
            suggest = "block_threshold"
        elif key == "cleanThreshold":
            suggest = "clean_threshold"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "instanceVersion":
            suggest = "instance_version"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdvancedProtectedObjectProtectedObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdvancedProtectedObjectProtectedObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdvancedProtectedObjectProtectedObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.str,
                 ip_address: _builtins.str,
                 type: _builtins.str,
                 block_threshold: Optional[_builtins.str] = None,
                 clean_threshold: Optional[_builtins.int] = None,
                 instance_id: Optional[_builtins.str] = None,
                 instance_name: Optional[_builtins.str] = None,
                 instance_version: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 policy_name: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 status: Optional[_builtins.int] = None):
        """
        :param _builtins.str id: Specifies the ID of the protected object. The field must be the ID of the Elastic IP,
               which in the same region with the CNAD advanced instance. You can find it through data source
               `cnad_get_advanced_available_objects`.
        :param _builtins.str ip_address: Specifies the IP of the protected object. The field must be the IP of the Elastic
               IP, which in the same region with the CNAD advanced instance. You can find it through data source
               `cnad_get_advanced_available_objects`. This field and `id` must belong to the same protected object.
        :param _builtins.str type: Specifies the type of the protected object. Valid values are **VPN**, **NAT**, **VIP**,
               **CCI**, **EIP**, **ELB**, **REROUTING_IP**, **SubEni** and **NetInterFace**. You can find it through data source
               `cnad_get_advanced_available_objects`. This field and `id` must belong to the same protected object.
        :param _builtins.str block_threshold: The blocking threshold of the protected object.
        :param _builtins.int clean_threshold: The cleaning threshold of the protected object.
        :param _builtins.str instance_id: Specifies the CNAD advanced instance ID in which to bind protected
               objects. You can find it through data source `cnad_get_advanced_instances`.
               
               Changing this parameter will create a new resource.
        :param _builtins.str instance_name: The instance name which the protected object belongs to.
        :param _builtins.str instance_version: The instance version which the protected object belongs to.
               + **cnad_pro**: Professional Edition.
               + **cnad_ip**: Standard Edition.
               + **cnad_ep**: Platinum Edition.
               + **cnad_full_high**: Unlimited Protection Advanced Edition.
               + **cnad_vic**: On demand Version.
               + **cnad_intl_ep**: International Station Platinum Edition.
        :param _builtins.str name: The name of the protected object.
        :param _builtins.str policy_name: The policy name which the protected object binding.
        :param _builtins.str region: The region to which the protected object belongs.
        :param _builtins.int status: The status of the protected object.
               + **0**: Normal.
               + **1**: Cleaning in progress.
               + **2**: In a black hole.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "type", type)
        if block_threshold is not None:
            pulumi.set(__self__, "block_threshold", block_threshold)
        if clean_threshold is not None:
            pulumi.set(__self__, "clean_threshold", clean_threshold)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_version is not None:
            pulumi.set(__self__, "instance_version", instance_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the protected object. The field must be the ID of the Elastic IP,
        which in the same region with the CNAD advanced instance. You can find it through data source
        `cnad_get_advanced_available_objects`.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Specifies the IP of the protected object. The field must be the IP of the Elastic
        IP, which in the same region with the CNAD advanced instance. You can find it through data source
        `cnad_get_advanced_available_objects`. This field and `id` must belong to the same protected object.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the protected object. Valid values are **VPN**, **NAT**, **VIP**,
        **CCI**, **EIP**, **ELB**, **REROUTING_IP**, **SubEni** and **NetInterFace**. You can find it through data source
        `cnad_get_advanced_available_objects`. This field and `id` must belong to the same protected object.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="blockThreshold")
    def block_threshold(self) -> Optional[_builtins.str]:
        """
        The blocking threshold of the protected object.
        """
        return pulumi.get(self, "block_threshold")

    @_builtins.property
    @pulumi.getter(name="cleanThreshold")
    def clean_threshold(self) -> Optional[_builtins.int]:
        """
        The cleaning threshold of the protected object.
        """
        return pulumi.get(self, "clean_threshold")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        Specifies the CNAD advanced instance ID in which to bind protected
        objects. You can find it through data source `cnad_get_advanced_instances`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[_builtins.str]:
        """
        The instance name which the protected object belongs to.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceVersion")
    def instance_version(self) -> Optional[_builtins.str]:
        """
        The instance version which the protected object belongs to.
        + **cnad_pro**: Professional Edition.
        + **cnad_ip**: Standard Edition.
        + **cnad_ep**: Platinum Edition.
        + **cnad_full_high**: Unlimited Protection Advanced Edition.
        + **cnad_vic**: On demand Version.
        + **cnad_intl_ep**: International Station Platinum Edition.
        """
        return pulumi.get(self, "instance_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the protected object.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        """
        The policy name which the protected object binding.
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        The region to which the protected object belongs.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        The status of the protected object.
        + **0**: Normal.
        + **1**: Cleaning in progress.
        + **2**: In a black hole.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAdvancedAvailableObjectsProtectedObjectResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 ip_address: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Indicates the ID of the protected object.
        :param _builtins.str ip_address: Specifies the CNAD advanced protected object IP which you want to query.
               The IP must be the Elastic IP, which in the same region with the CNAD advanced instance.
        :param _builtins.str type: Specifies the type of the protected object. This field means the type of resource which
               bound to Elastic IP. Valid values are: **VPN**, **NAT**, **VIP**,**CCI**, **EIP**, **ELB**, **REROUTING_IP**,
               **SubEni** and **NetInterFace**.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the protected object.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Specifies the CNAD advanced protected object IP which you want to query.
        The IP must be the Elastic IP, which in the same region with the CNAD advanced instance.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the protected object. This field means the type of resource which
        bound to Elastic IP. Valid values are: **VPN**, **NAT**, **VIP**,**CCI**, **EIP**, **ELB**, **REROUTING_IP**,
        **SubEni** and **NetInterFace**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAdvancedBlockListBlockingListResult(dict):
    def __init__(__self__, *,
                 blocking_time: _builtins.int,
                 estimated_unblocking_time: _builtins.int,
                 ip: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.int blocking_time: The timestamp when the IP was blocked.
        :param _builtins.int estimated_unblocking_time: The estimated timestamp when the IP will be unblocked.
        :param _builtins.str ip: The blocked IP address.
        :param _builtins.str status: The status of the blocked IP. Possible values are:
               + **unblocking**: The IP is being unblocked.
               + **success**: The IP has been successfully unblocked.
               + **failed**: The unblocking operation failed.
        """
        pulumi.set(__self__, "blocking_time", blocking_time)
        pulumi.set(__self__, "estimated_unblocking_time", estimated_unblocking_time)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="blockingTime")
    def blocking_time(self) -> _builtins.int:
        """
        The timestamp when the IP was blocked.
        """
        return pulumi.get(self, "blocking_time")

    @_builtins.property
    @pulumi.getter(name="estimatedUnblockingTime")
    def estimated_unblocking_time(self) -> _builtins.int:
        """
        The estimated timestamp when the IP will be unblocked.
        """
        return pulumi.get(self, "estimated_unblocking_time")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        The blocked IP address.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the blocked IP. Possible values are:
        + **unblocking**: The IP is being unblocked.
        + **success**: The IP has been successfully unblocked.
        + **failed**: The unblocking operation failed.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAdvancedInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 instance_type: _builtins.str,
                 ip_num: _builtins.int,
                 ip_num_now: _builtins.int,
                 protection_num: _builtins.int,
                 protection_num_now: _builtins.int,
                 protection_type: _builtins.int,
                 region: _builtins.str):
        """
        :param _builtins.str created_at: Indicates the created time.
        :param _builtins.str instance_id: Specifies the instance id.
        :param _builtins.str instance_name: Specifies the instance name.
        :param _builtins.str instance_type: Specifies the instance type. Valid values are:
               + **cnad_pro**: Professional Edition.
               + **cnad_ip**: Standard Edition.
               + **cnad_ep**: Platinum Edition.
               + **cnad_full_high**: Unlimited Protection Advanced Edition.
               + **cnad_vic**: On demand Version.
               + **cnad_intl_ep**: International Station Platinum Edition.
        :param _builtins.int ip_num: Indicates the ip num of the instance.
        :param _builtins.int ip_num_now: Indicates the current ip num of the instance.
        :param _builtins.int protection_num: Indicates the protection num of the instance, value `9,999` means unlimited times.
        :param _builtins.int protection_num_now: Indicates the current protection num of the instance.
        :param _builtins.int protection_type: Indicates the protection type of the instance.
        :param _builtins.str region: Specifies the region in which to query the data source.
               + For Unlimited Protection Advanced Edition, support regions are: **cn-north-2**, **cn-north-4**, **cn-east-3**
               and **cn-south-1**.
               + For Unlimited Protection Basic Edition, support regions are: **cn-north-4**, **cn-east-3**, **cn-south-1**
               and **cn-southwest-2**.
               + For Cloud Native Anti-DDoS Standard, support regions are: **cn-north-4**, **cn-east-3** and **cn-south-1**.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "ip_num", ip_num)
        pulumi.set(__self__, "ip_num_now", ip_num_now)
        pulumi.set(__self__, "protection_num", protection_num)
        pulumi.set(__self__, "protection_num_now", protection_num_now)
        pulumi.set(__self__, "protection_type", protection_type)
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the created time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the instance id.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Specifies the instance name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        """
        Specifies the instance type. Valid values are:
        + **cnad_pro**: Professional Edition.
        + **cnad_ip**: Standard Edition.
        + **cnad_ep**: Platinum Edition.
        + **cnad_full_high**: Unlimited Protection Advanced Edition.
        + **cnad_vic**: On demand Version.
        + **cnad_intl_ep**: International Station Platinum Edition.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="ipNum")
    def ip_num(self) -> _builtins.int:
        """
        Indicates the ip num of the instance.
        """
        return pulumi.get(self, "ip_num")

    @_builtins.property
    @pulumi.getter(name="ipNumNow")
    def ip_num_now(self) -> _builtins.int:
        """
        Indicates the current ip num of the instance.
        """
        return pulumi.get(self, "ip_num_now")

    @_builtins.property
    @pulumi.getter(name="protectionNum")
    def protection_num(self) -> _builtins.int:
        """
        Indicates the protection num of the instance, value `9,999` means unlimited times.
        """
        return pulumi.get(self, "protection_num")

    @_builtins.property
    @pulumi.getter(name="protectionNumNow")
    def protection_num_now(self) -> _builtins.int:
        """
        Indicates the current protection num of the instance.
        """
        return pulumi.get(self, "protection_num_now")

    @_builtins.property
    @pulumi.getter(name="protectionType")
    def protection_type(self) -> _builtins.int:
        """
        Indicates the protection type of the instance.
        """
        return pulumi.get(self, "protection_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Specifies the region in which to query the data source.
        + For Unlimited Protection Advanced Edition, support regions are: **cn-north-2**, **cn-north-4**, **cn-east-3**
        and **cn-south-1**.
        + For Unlimited Protection Basic Edition, support regions are: **cn-north-4**, **cn-east-3**, **cn-south-1**
        and **cn-southwest-2**.
        + For Cloud Native Anti-DDoS Standard, support regions are: **cn-north-4**, **cn-east-3** and **cn-south-1**.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetAdvancedProtectedObjectsProtectedObjectResult(dict):
    def __init__(__self__, *,
                 block_threshold: _builtins.str,
                 clean_threshold: _builtins.int,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 instance_version: _builtins.str,
                 ip_address: _builtins.str,
                 name: _builtins.str,
                 policy_name: _builtins.str,
                 region: _builtins.str,
                 status: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str block_threshold: Indicates the block threshold of the protected object.
        :param _builtins.int clean_threshold: Indicates the clean threshold of the protected object.
        :param _builtins.str id: Indicates the ID of the protected object.
        :param _builtins.str instance_id: Specifies the CNAD advanced instance ID. You can find it through data source
               `cnad_get_advanced_instances`.
        :param _builtins.str instance_name: Indicates the instance name of the protected object.
        :param _builtins.str instance_version: Indicates the instance version of the protected object.
        :param _builtins.str ip_address: Specifies the CNAD advanced protected object IP which you want to query.
               The IP must be the Elastic IP.
        :param _builtins.str name: Indicates the name of the protected object.
        :param _builtins.str policy_name: Indicates the policy name of the protected object.
        :param _builtins.str region: Indicates the region to which the protected object belongs.
        :param _builtins.int status: Indicates the status of the protected object.
        :param _builtins.str type: Specifies the type of the protected object. This field means the type of resource which
               bound to Elastic IP. Valid values are: **VPN**, **NAT**, **VIP**,**CCI**, **EIP**, **ELB**, **REROUTING_IP**,
               **SubEni** and **NetInterFace**.
        """
        pulumi.set(__self__, "block_threshold", block_threshold)
        pulumi.set(__self__, "clean_threshold", clean_threshold)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_version", instance_version)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="blockThreshold")
    def block_threshold(self) -> _builtins.str:
        """
        Indicates the block threshold of the protected object.
        """
        return pulumi.get(self, "block_threshold")

    @_builtins.property
    @pulumi.getter(name="cleanThreshold")
    def clean_threshold(self) -> _builtins.int:
        """
        Indicates the clean threshold of the protected object.
        """
        return pulumi.get(self, "clean_threshold")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the protected object.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the CNAD advanced instance ID. You can find it through data source
        `cnad_get_advanced_instances`.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the instance name of the protected object.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceVersion")
    def instance_version(self) -> _builtins.str:
        """
        Indicates the instance version of the protected object.
        """
        return pulumi.get(self, "instance_version")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Specifies the CNAD advanced protected object IP which you want to query.
        The IP must be the Elastic IP.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of the protected object.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        Indicates the policy name of the protected object.
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Indicates the region to which the protected object belongs.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        Indicates the status of the protected object.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the protected object. This field means the type of resource which
        bound to Elastic IP. Valid values are: **VPN**, **NAT**, **VIP**,**CCI**, **EIP**, **ELB**, **REROUTING_IP**,
        **SubEni** and **NetInterFace**.
        """
        return pulumi.get(self, "type")


