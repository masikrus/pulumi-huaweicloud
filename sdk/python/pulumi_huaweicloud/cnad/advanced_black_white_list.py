# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AdvancedBlackWhiteListArgs', 'AdvancedBlackWhiteList']

@pulumi.input_type
class AdvancedBlackWhiteListArgs:
    def __init__(__self__, *,
                 policy_id: pulumi.Input[_builtins.str],
                 black_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 white_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a AdvancedBlackWhiteList resource.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the CNAD advanced policy ID in which to add black and white IP
               list.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] black_ip_lists: Specifies the black IP list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] white_ip_lists: Specifies the white IP list.
               
               > For `black_ip_list` and `white_ip_list`, the value could be IPv4/IPv6 address or CIDR.
               The IP address or IP address range must be unique. For each IP address and IP address range, the minimum length is 7,
               the maximum length is 128.
               The total number of `black_ip_list` and `white_ip_list` cannot exceed the maximum allowed, the default maximum is 200.
               At least one of `black_ip_list` or `white_ip_list` must be configured.
        """
        pulumi.set(__self__, "policy_id", policy_id)
        if black_ip_lists is not None:
            pulumi.set(__self__, "black_ip_lists", black_ip_lists)
        if white_ip_lists is not None:
            pulumi.set(__self__, "white_ip_lists", white_ip_lists)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CNAD advanced policy ID in which to add black and white IP
        list.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter(name="blackIpLists")
    def black_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the black IP list.
        """
        return pulumi.get(self, "black_ip_lists")

    @black_ip_lists.setter
    def black_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "black_ip_lists", value)

    @_builtins.property
    @pulumi.getter(name="whiteIpLists")
    def white_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the white IP list.

        > For `black_ip_list` and `white_ip_list`, the value could be IPv4/IPv6 address or CIDR.
        The IP address or IP address range must be unique. For each IP address and IP address range, the minimum length is 7,
        the maximum length is 128.
        The total number of `black_ip_list` and `white_ip_list` cannot exceed the maximum allowed, the default maximum is 200.
        At least one of `black_ip_list` or `white_ip_list` must be configured.
        """
        return pulumi.get(self, "white_ip_lists")

    @white_ip_lists.setter
    def white_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "white_ip_lists", value)


@pulumi.input_type
class _AdvancedBlackWhiteListState:
    def __init__(__self__, *,
                 black_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 white_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering AdvancedBlackWhiteList resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] black_ip_lists: Specifies the black IP list.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the CNAD advanced policy ID in which to add black and white IP
               list.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] white_ip_lists: Specifies the white IP list.
               
               > For `black_ip_list` and `white_ip_list`, the value could be IPv4/IPv6 address or CIDR.
               The IP address or IP address range must be unique. For each IP address and IP address range, the minimum length is 7,
               the maximum length is 128.
               The total number of `black_ip_list` and `white_ip_list` cannot exceed the maximum allowed, the default maximum is 200.
               At least one of `black_ip_list` or `white_ip_list` must be configured.
        """
        if black_ip_lists is not None:
            pulumi.set(__self__, "black_ip_lists", black_ip_lists)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if white_ip_lists is not None:
            pulumi.set(__self__, "white_ip_lists", white_ip_lists)

    @_builtins.property
    @pulumi.getter(name="blackIpLists")
    def black_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the black IP list.
        """
        return pulumi.get(self, "black_ip_lists")

    @black_ip_lists.setter
    def black_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "black_ip_lists", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CNAD advanced policy ID in which to add black and white IP
        list.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter(name="whiteIpLists")
    def white_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the white IP list.

        > For `black_ip_list` and `white_ip_list`, the value could be IPv4/IPv6 address or CIDR.
        The IP address or IP address range must be unique. For each IP address and IP address range, the minimum length is 7,
        the maximum length is 128.
        The total number of `black_ip_list` and `white_ip_list` cannot exceed the maximum allowed, the default maximum is 200.
        At least one of `black_ip_list` or `white_ip_list` must be configured.
        """
        return pulumi.get(self, "white_ip_lists")

    @white_ip_lists.setter
    def white_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "white_ip_lists", value)


@pulumi.type_token("huaweicloud:cnad/advancedBlackWhiteList:AdvancedBlackWhiteList")
class AdvancedBlackWhiteList(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 black_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 white_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a CNAD advanced policy black and white IP list resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        black_ip_list = config.require_object("blackIpList")
        white_ip_list = config.require_object("whiteIpList")
        test = huaweicloud.cnad.AdvancedBlackWhiteList("test",
            policy_id=policy_id,
            black_ip_lists=black_ip_list,
            white_ip_lists=white_ip_list)
        ```

        ## Import

        The CNAD advanced policy black and white IP list can be imported using the `policy_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cnad/advancedBlackWhiteList:AdvancedBlackWhiteList test <policy_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] black_ip_lists: Specifies the black IP list.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the CNAD advanced policy ID in which to add black and white IP
               list.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] white_ip_lists: Specifies the white IP list.
               
               > For `black_ip_list` and `white_ip_list`, the value could be IPv4/IPv6 address or CIDR.
               The IP address or IP address range must be unique. For each IP address and IP address range, the minimum length is 7,
               the maximum length is 128.
               The total number of `black_ip_list` and `white_ip_list` cannot exceed the maximum allowed, the default maximum is 200.
               At least one of `black_ip_list` or `white_ip_list` must be configured.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AdvancedBlackWhiteListArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CNAD advanced policy black and white IP list resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        black_ip_list = config.require_object("blackIpList")
        white_ip_list = config.require_object("whiteIpList")
        test = huaweicloud.cnad.AdvancedBlackWhiteList("test",
            policy_id=policy_id,
            black_ip_lists=black_ip_list,
            white_ip_lists=white_ip_list)
        ```

        ## Import

        The CNAD advanced policy black and white IP list can be imported using the `policy_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cnad/advancedBlackWhiteList:AdvancedBlackWhiteList test <policy_id>
        ```

        :param str resource_name: The name of the resource.
        :param AdvancedBlackWhiteListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AdvancedBlackWhiteListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 black_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 white_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AdvancedBlackWhiteListArgs.__new__(AdvancedBlackWhiteListArgs)

            __props__.__dict__["black_ip_lists"] = black_ip_lists
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            __props__.__dict__["white_ip_lists"] = white_ip_lists
        super(AdvancedBlackWhiteList, __self__).__init__(
            'huaweicloud:cnad/advancedBlackWhiteList:AdvancedBlackWhiteList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            black_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            white_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'AdvancedBlackWhiteList':
        """
        Get an existing AdvancedBlackWhiteList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] black_ip_lists: Specifies the black IP list.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the CNAD advanced policy ID in which to add black and white IP
               list.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] white_ip_lists: Specifies the white IP list.
               
               > For `black_ip_list` and `white_ip_list`, the value could be IPv4/IPv6 address or CIDR.
               The IP address or IP address range must be unique. For each IP address and IP address range, the minimum length is 7,
               the maximum length is 128.
               The total number of `black_ip_list` and `white_ip_list` cannot exceed the maximum allowed, the default maximum is 200.
               At least one of `black_ip_list` or `white_ip_list` must be configured.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AdvancedBlackWhiteListState.__new__(_AdvancedBlackWhiteListState)

        __props__.__dict__["black_ip_lists"] = black_ip_lists
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["white_ip_lists"] = white_ip_lists
        return AdvancedBlackWhiteList(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="blackIpLists")
    def black_ip_lists(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the black IP list.
        """
        return pulumi.get(self, "black_ip_lists")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CNAD advanced policy ID in which to add black and white IP
        list.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="whiteIpLists")
    def white_ip_lists(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the white IP list.

        > For `black_ip_list` and `white_ip_list`, the value could be IPv4/IPv6 address or CIDR.
        The IP address or IP address range must be unique. For each IP address and IP address range, the minimum length is 7,
        the maximum length is 128.
        The total number of `black_ip_list` and `white_ip_list` cannot exceed the maximum allowed, the default maximum is 200.
        At least one of `black_ip_list` or `white_ip_list` must be configured.
        """
        return pulumi.get(self, "white_ip_lists")

