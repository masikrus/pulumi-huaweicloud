# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AdvancedPolicyArgs', 'AdvancedPolicy']

@pulumi.input_type
class AdvancedPolicyArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 udp: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AdvancedPolicy resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the CNAD advanced instance ID.
               You can find it through data source `cnad_get_advanced_instances`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the policy name, the maximum length is 255 characters.
        :param pulumi.Input[_builtins.int] threshold: Specifies the cleaning threshold, the value ranges from 100 Mbps to 1000 Mbps.
        :param pulumi.Input[_builtins.str] udp: Specifies whether to block the UDP protocol. Valid values are **block** and **unblock**.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CNAD advanced instance ID.
        You can find it through data source `cnad_get_advanced_instances`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy name, the maximum length is 255 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the cleaning threshold, the value ranges from 100 Mbps to 1000 Mbps.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "threshold", value)

    @_builtins.property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to block the UDP protocol. Valid values are **block** and **unblock**.
        """
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "udp", value)


@pulumi.input_type
class _AdvancedPolicyState:
    def __init__(__self__, *,
                 block_locations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 block_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 connection_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 connection_protection_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 fingerprint_count: Optional[pulumi.Input[_builtins.int]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port_block_count: Optional[pulumi.Input[_builtins.int]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 udp: Optional[pulumi.Input[_builtins.str]] = None,
                 watermark_count: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering AdvancedPolicy resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] block_locations: The location block list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] block_protocols: The protocol block list.
        :param pulumi.Input[_builtins.bool] connection_protection: Whether enable connection protection.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] connection_protection_lists: The connection protection list.
        :param pulumi.Input[_builtins.int] fingerprint_count: The fingerprint count.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the CNAD advanced instance ID.
               You can find it through data source `cnad_get_advanced_instances`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the policy name, the maximum length is 255 characters.
        :param pulumi.Input[_builtins.int] port_block_count: The number of port blockages.
        :param pulumi.Input[_builtins.int] threshold: Specifies the cleaning threshold, the value ranges from 100 Mbps to 1000 Mbps.
        :param pulumi.Input[_builtins.str] udp: Specifies whether to block the UDP protocol. Valid values are **block** and **unblock**.
        :param pulumi.Input[_builtins.int] watermark_count: The number of watermarks.
        """
        if block_locations is not None:
            pulumi.set(__self__, "block_locations", block_locations)
        if block_protocols is not None:
            pulumi.set(__self__, "block_protocols", block_protocols)
        if connection_protection is not None:
            pulumi.set(__self__, "connection_protection", connection_protection)
        if connection_protection_lists is not None:
            pulumi.set(__self__, "connection_protection_lists", connection_protection_lists)
        if fingerprint_count is not None:
            pulumi.set(__self__, "fingerprint_count", fingerprint_count)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port_block_count is not None:
            pulumi.set(__self__, "port_block_count", port_block_count)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)
        if watermark_count is not None:
            pulumi.set(__self__, "watermark_count", watermark_count)

    @_builtins.property
    @pulumi.getter(name="blockLocations")
    def block_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The location block list.
        """
        return pulumi.get(self, "block_locations")

    @block_locations.setter
    def block_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "block_locations", value)

    @_builtins.property
    @pulumi.getter(name="blockProtocols")
    def block_protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The protocol block list.
        """
        return pulumi.get(self, "block_protocols")

    @block_protocols.setter
    def block_protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "block_protocols", value)

    @_builtins.property
    @pulumi.getter(name="connectionProtection")
    def connection_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether enable connection protection.
        """
        return pulumi.get(self, "connection_protection")

    @connection_protection.setter
    def connection_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "connection_protection", value)

    @_builtins.property
    @pulumi.getter(name="connectionProtectionLists")
    def connection_protection_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The connection protection list.
        """
        return pulumi.get(self, "connection_protection_lists")

    @connection_protection_lists.setter
    def connection_protection_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "connection_protection_lists", value)

    @_builtins.property
    @pulumi.getter(name="fingerprintCount")
    def fingerprint_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The fingerprint count.
        """
        return pulumi.get(self, "fingerprint_count")

    @fingerprint_count.setter
    def fingerprint_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "fingerprint_count", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CNAD advanced instance ID.
        You can find it through data source `cnad_get_advanced_instances`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy name, the maximum length is 255 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="portBlockCount")
    def port_block_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of port blockages.
        """
        return pulumi.get(self, "port_block_count")

    @port_block_count.setter
    def port_block_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port_block_count", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the cleaning threshold, the value ranges from 100 Mbps to 1000 Mbps.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "threshold", value)

    @_builtins.property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to block the UDP protocol. Valid values are **block** and **unblock**.
        """
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "udp", value)

    @_builtins.property
    @pulumi.getter(name="watermarkCount")
    def watermark_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of watermarks.
        """
        return pulumi.get(self, "watermark_count")

    @watermark_count.setter
    def watermark_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "watermark_count", value)


@pulumi.type_token("huaweicloud:cnad/advancedPolicy:AdvancedPolicy")
class AdvancedPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 udp: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CNAD advanced policy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.cnad.get_advanced_instances()
        test_advanced_policy = huaweicloud.cnad.AdvancedPolicy("test",
            instance_id=test_huaweicloud_cnad_advanced_instances["instances"][0]["instanceId"],
            name="test-policy",
            threshold=100,
            udp="block")
        ```

        ## Import

        The CNAD advanced policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cnad/advancedPolicy:AdvancedPolicy test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `udp`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_cnad_advanced_policy" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              udp,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the CNAD advanced instance ID.
               You can find it through data source `cnad_get_advanced_instances`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the policy name, the maximum length is 255 characters.
        :param pulumi.Input[_builtins.int] threshold: Specifies the cleaning threshold, the value ranges from 100 Mbps to 1000 Mbps.
        :param pulumi.Input[_builtins.str] udp: Specifies whether to block the UDP protocol. Valid values are **block** and **unblock**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AdvancedPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CNAD advanced policy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.cnad.get_advanced_instances()
        test_advanced_policy = huaweicloud.cnad.AdvancedPolicy("test",
            instance_id=test_huaweicloud_cnad_advanced_instances["instances"][0]["instanceId"],
            name="test-policy",
            threshold=100,
            udp="block")
        ```

        ## Import

        The CNAD advanced policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cnad/advancedPolicy:AdvancedPolicy test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `udp`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_cnad_advanced_policy" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              udp,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param AdvancedPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AdvancedPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 udp: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AdvancedPolicyArgs.__new__(AdvancedPolicyArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["threshold"] = threshold
            __props__.__dict__["udp"] = udp
            __props__.__dict__["block_locations"] = None
            __props__.__dict__["block_protocols"] = None
            __props__.__dict__["connection_protection"] = None
            __props__.__dict__["connection_protection_lists"] = None
            __props__.__dict__["fingerprint_count"] = None
            __props__.__dict__["port_block_count"] = None
            __props__.__dict__["watermark_count"] = None
        super(AdvancedPolicy, __self__).__init__(
            'huaweicloud:cnad/advancedPolicy:AdvancedPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            block_locations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            block_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            connection_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            connection_protection_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            fingerprint_count: Optional[pulumi.Input[_builtins.int]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            port_block_count: Optional[pulumi.Input[_builtins.int]] = None,
            threshold: Optional[pulumi.Input[_builtins.int]] = None,
            udp: Optional[pulumi.Input[_builtins.str]] = None,
            watermark_count: Optional[pulumi.Input[_builtins.int]] = None) -> 'AdvancedPolicy':
        """
        Get an existing AdvancedPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] block_locations: The location block list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] block_protocols: The protocol block list.
        :param pulumi.Input[_builtins.bool] connection_protection: Whether enable connection protection.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] connection_protection_lists: The connection protection list.
        :param pulumi.Input[_builtins.int] fingerprint_count: The fingerprint count.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the CNAD advanced instance ID.
               You can find it through data source `cnad_get_advanced_instances`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the policy name, the maximum length is 255 characters.
        :param pulumi.Input[_builtins.int] port_block_count: The number of port blockages.
        :param pulumi.Input[_builtins.int] threshold: Specifies the cleaning threshold, the value ranges from 100 Mbps to 1000 Mbps.
        :param pulumi.Input[_builtins.str] udp: Specifies whether to block the UDP protocol. Valid values are **block** and **unblock**.
        :param pulumi.Input[_builtins.int] watermark_count: The number of watermarks.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AdvancedPolicyState.__new__(_AdvancedPolicyState)

        __props__.__dict__["block_locations"] = block_locations
        __props__.__dict__["block_protocols"] = block_protocols
        __props__.__dict__["connection_protection"] = connection_protection
        __props__.__dict__["connection_protection_lists"] = connection_protection_lists
        __props__.__dict__["fingerprint_count"] = fingerprint_count
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["port_block_count"] = port_block_count
        __props__.__dict__["threshold"] = threshold
        __props__.__dict__["udp"] = udp
        __props__.__dict__["watermark_count"] = watermark_count
        return AdvancedPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="blockLocations")
    def block_locations(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The location block list.
        """
        return pulumi.get(self, "block_locations")

    @_builtins.property
    @pulumi.getter(name="blockProtocols")
    def block_protocols(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The protocol block list.
        """
        return pulumi.get(self, "block_protocols")

    @_builtins.property
    @pulumi.getter(name="connectionProtection")
    def connection_protection(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether enable connection protection.
        """
        return pulumi.get(self, "connection_protection")

    @_builtins.property
    @pulumi.getter(name="connectionProtectionLists")
    def connection_protection_lists(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The connection protection list.
        """
        return pulumi.get(self, "connection_protection_lists")

    @_builtins.property
    @pulumi.getter(name="fingerprintCount")
    def fingerprint_count(self) -> pulumi.Output[_builtins.int]:
        """
        The fingerprint count.
        """
        return pulumi.get(self, "fingerprint_count")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CNAD advanced instance ID.
        You can find it through data source `cnad_get_advanced_instances`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the policy name, the maximum length is 255 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="portBlockCount")
    def port_block_count(self) -> pulumi.Output[_builtins.int]:
        """
        The number of port blockages.
        """
        return pulumi.get(self, "port_block_count")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the cleaning threshold, the value ranges from 100 Mbps to 1000 Mbps.
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter
    def udp(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether to block the UDP protocol. Valid values are **block** and **unblock**.
        """
        return pulumi.get(self, "udp")

    @_builtins.property
    @pulumi.getter(name="watermarkCount")
    def watermark_count(self) -> pulumi.Output[_builtins.int]:
        """
        The number of watermarks.
        """
        return pulumi.get(self, "watermark_count")

