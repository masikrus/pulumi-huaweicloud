# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAdvancedBlockListResult',
    'AwaitableGetAdvancedBlockListResult',
    'get_advanced_block_list',
    'get_advanced_block_list_output',
]

@pulumi.output_type
class GetAdvancedBlockListResult:
    """
    A collection of values returned by getAdvancedBlockList.
    """
    def __init__(__self__, blocking_lists=None, id=None):
        if blocking_lists and not isinstance(blocking_lists, list):
            raise TypeError("Expected argument 'blocking_lists' to be a list")
        pulumi.set(__self__, "blocking_lists", blocking_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="blockingLists")
    def blocking_lists(self) -> Sequence['outputs.GetAdvancedBlockListBlockingListResult']:
        """
        The list of blocked IPs.
        """
        return pulumi.get(self, "blocking_lists")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetAdvancedBlockListResult(GetAdvancedBlockListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAdvancedBlockListResult(
            blocking_lists=self.blocking_lists,
            id=self.id)


def get_advanced_block_list(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAdvancedBlockListResult:
    """
    Use this data source to get the list of blocked IPs in CNAD Advanced.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.cnad.get_advanced_block_list()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:cnad/getAdvancedBlockList:getAdvancedBlockList', __args__, opts=opts, typ=GetAdvancedBlockListResult).value

    return AwaitableGetAdvancedBlockListResult(
        blocking_lists=pulumi.get(__ret__, 'blocking_lists'),
        id=pulumi.get(__ret__, 'id'))
def get_advanced_block_list_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAdvancedBlockListResult]:
    """
    Use this data source to get the list of blocked IPs in CNAD Advanced.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.cnad.get_advanced_block_list()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:cnad/getAdvancedBlockList:getAdvancedBlockList', __args__, opts=opts, typ=GetAdvancedBlockListResult)
    return __ret__.apply(lambda __response__: GetAdvancedBlockListResult(
        blocking_lists=pulumi.get(__response__, 'blocking_lists'),
        id=pulumi.get(__response__, 'id')))
