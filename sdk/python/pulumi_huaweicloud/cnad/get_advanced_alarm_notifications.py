# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetAdvancedAlarmNotificationsResult',
    'AwaitableGetAdvancedAlarmNotificationsResult',
    'get_advanced_alarm_notifications',
    'get_advanced_alarm_notifications_output',
]

@pulumi.output_type
class GetAdvancedAlarmNotificationsResult:
    """
    A collection of values returned by getAdvancedAlarmNotifications.
    """
    def __init__(__self__, id=None, is_close_attack_source_flag=None, topic_urn=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_close_attack_source_flag and not isinstance(is_close_attack_source_flag, bool):
            raise TypeError("Expected argument 'is_close_attack_source_flag' to be a bool")
        pulumi.set(__self__, "is_close_attack_source_flag", is_close_attack_source_flag)
        if topic_urn and not isinstance(topic_urn, str):
            raise TypeError("Expected argument 'topic_urn' to be a str")
        pulumi.set(__self__, "topic_urn", topic_urn)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCloseAttackSourceFlag")
    def is_close_attack_source_flag(self) -> _builtins.bool:
        """
        Whether to enable the alarm content to shield the attack source information.
        """
        return pulumi.get(self, "is_close_attack_source_flag")

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> _builtins.str:
        """
        The topic urn of SMN. Empty value means no alarm notifications is configured.
        """
        return pulumi.get(self, "topic_urn")


class AwaitableGetAdvancedAlarmNotificationsResult(GetAdvancedAlarmNotificationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAdvancedAlarmNotificationsResult(
            id=self.id,
            is_close_attack_source_flag=self.is_close_attack_source_flag,
            topic_urn=self.topic_urn)


def get_advanced_alarm_notifications(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAdvancedAlarmNotificationsResult:
    """
    Use this data source to get the list of CNAD advanced alarm notifications.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.cnad.get_advanced_alarm_notifications()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:cnad/getAdvancedAlarmNotifications:getAdvancedAlarmNotifications', __args__, opts=opts, typ=GetAdvancedAlarmNotificationsResult).value

    return AwaitableGetAdvancedAlarmNotificationsResult(
        id=pulumi.get(__ret__, 'id'),
        is_close_attack_source_flag=pulumi.get(__ret__, 'is_close_attack_source_flag'),
        topic_urn=pulumi.get(__ret__, 'topic_urn'))
def get_advanced_alarm_notifications_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAdvancedAlarmNotificationsResult]:
    """
    Use this data source to get the list of CNAD advanced alarm notifications.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.cnad.get_advanced_alarm_notifications()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:cnad/getAdvancedAlarmNotifications:getAdvancedAlarmNotifications', __args__, opts=opts, typ=GetAdvancedAlarmNotificationsResult)
    return __ret__.apply(lambda __response__: GetAdvancedAlarmNotificationsResult(
        id=pulumi.get(__response__, 'id'),
        is_close_attack_source_flag=pulumi.get(__response__, 'is_close_attack_source_flag'),
        topic_urn=pulumi.get(__response__, 'topic_urn')))
