# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AdvancedProtectedIpTagArgs', 'AdvancedProtectedIpTag']

@pulumi.input_type
class AdvancedProtectedIpTagArgs:
    def __init__(__self__, *,
                 protected_ip_id: pulumi.Input[_builtins.str],
                 tag: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AdvancedProtectedIpTag resource.
        :param pulumi.Input[_builtins.str] protected_ip_id: Specifies the ID of the protected IP.
        :param pulumi.Input[_builtins.str] tag: Specifies the tag to be set on the protected IP.
        """
        pulumi.set(__self__, "protected_ip_id", protected_ip_id)
        pulumi.set(__self__, "tag", tag)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)

    @_builtins.property
    @pulumi.getter(name="protectedIpId")
    def protected_ip_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the protected IP.
        """
        return pulumi.get(self, "protected_ip_id")

    @protected_ip_id.setter
    def protected_ip_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protected_ip_id", value)

    @_builtins.property
    @pulumi.getter
    def tag(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the tag to be set on the protected IP.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tag", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)


@pulumi.input_type
class _AdvancedProtectedIpTagState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 protected_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tag: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AdvancedProtectedIpTag resources.
        :param pulumi.Input[_builtins.str] protected_ip_id: Specifies the ID of the protected IP.
        :param pulumi.Input[_builtins.str] tag: Specifies the tag to be set on the protected IP.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if protected_ip_id is not None:
            pulumi.set(__self__, "protected_ip_id", protected_ip_id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="protectedIpId")
    def protected_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the protected IP.
        """
        return pulumi.get(self, "protected_ip_id")

    @protected_ip_id.setter
    def protected_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protected_ip_id", value)

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the tag to be set on the protected IP.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag", value)


@pulumi.type_token("huaweicloud:cnad/advancedProtectedIpTag:AdvancedProtectedIpTag")
class AdvancedProtectedIpTag(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 protected_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tag: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CNAD advanced protected IP tag resource within HuaweiCloud.

        > This resource is a one-time action resource for setting tag on protected IP. Deleting this resource will not
        remove the tag from the protected IP, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        protected_ip_id = config.require_object("protectedIpId")
        ip_tag = config.require_object("ipTag")
        test = huaweicloud.cnad.AdvancedProtectedIpTag("test",
            protected_ip_id=protected_ip_id,
            tag=ip_tag)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] protected_ip_id: Specifies the ID of the protected IP.
        :param pulumi.Input[_builtins.str] tag: Specifies the tag to be set on the protected IP.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AdvancedProtectedIpTagArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CNAD advanced protected IP tag resource within HuaweiCloud.

        > This resource is a one-time action resource for setting tag on protected IP. Deleting this resource will not
        remove the tag from the protected IP, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        protected_ip_id = config.require_object("protectedIpId")
        ip_tag = config.require_object("ipTag")
        test = huaweicloud.cnad.AdvancedProtectedIpTag("test",
            protected_ip_id=protected_ip_id,
            tag=ip_tag)
        ```

        :param str resource_name: The name of the resource.
        :param AdvancedProtectedIpTagArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AdvancedProtectedIpTagArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 protected_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tag: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AdvancedProtectedIpTagArgs.__new__(AdvancedProtectedIpTagArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if protected_ip_id is None and not opts.urn:
                raise TypeError("Missing required property 'protected_ip_id'")
            __props__.__dict__["protected_ip_id"] = protected_ip_id
            if tag is None and not opts.urn:
                raise TypeError("Missing required property 'tag'")
            __props__.__dict__["tag"] = tag
        super(AdvancedProtectedIpTag, __self__).__init__(
            'huaweicloud:cnad/advancedProtectedIpTag:AdvancedProtectedIpTag',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            protected_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
            tag: Optional[pulumi.Input[_builtins.str]] = None) -> 'AdvancedProtectedIpTag':
        """
        Get an existing AdvancedProtectedIpTag resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] protected_ip_id: Specifies the ID of the protected IP.
        :param pulumi.Input[_builtins.str] tag: Specifies the tag to be set on the protected IP.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AdvancedProtectedIpTagState.__new__(_AdvancedProtectedIpTagState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["protected_ip_id"] = protected_ip_id
        __props__.__dict__["tag"] = tag
        return AdvancedProtectedIpTag(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="protectedIpId")
    def protected_ip_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the protected IP.
        """
        return pulumi.get(self, "protected_ip_id")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the tag to be set on the protected IP.
        """
        return pulumi.get(self, "tag")

