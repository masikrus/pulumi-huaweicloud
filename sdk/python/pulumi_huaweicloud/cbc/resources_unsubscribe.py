# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ResourcesUnsubscribeArgs', 'ResourcesUnsubscribe']

@pulumi.input_type
class ResourcesUnsubscribeArgs:
    def __init__(__self__, *,
                 resource_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ResourcesUnsubscribe resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_ids: Specifies the IDs of the resource to be unsubscribed.
               Supports up to `10` resource IDs.
        """
        pulumi.set(__self__, "resource_ids", resource_ids)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the IDs of the resource to be unsubscribed.
        Supports up to `10` resource IDs.
        """
        return pulumi.get(self, "resource_ids")

    @resource_ids.setter
    def resource_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "resource_ids", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)


@pulumi.input_type
class _ResourcesUnsubscribeState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering ResourcesUnsubscribe resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_ids: Specifies the IDs of the resource to be unsubscribed.
               Supports up to `10` resource IDs.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the IDs of the resource to be unsubscribed.
        Supports up to `10` resource IDs.
        """
        return pulumi.get(self, "resource_ids")

    @resource_ids.setter
    def resource_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resource_ids", value)


@pulumi.type_token("huaweicloud:cbc/resourcesUnsubscribe:ResourcesUnsubscribe")
class ResourcesUnsubscribe(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Use this resource to unsubscribe resources within HuaweiCloud.

        > This resource is only a one-time action resource for unsubscribing the specified resources. Deleting this resource
           will not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_ids = config.require_object("resourceIds")
        test = huaweicloud.cbc.ResourcesUnsubscribe("test", resource_ids=resource_ids)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_ids: Specifies the IDs of the resource to be unsubscribed.
               Supports up to `10` resource IDs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourcesUnsubscribeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to unsubscribe resources within HuaweiCloud.

        > This resource is only a one-time action resource for unsubscribing the specified resources. Deleting this resource
           will not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_ids = config.require_object("resourceIds")
        test = huaweicloud.cbc.ResourcesUnsubscribe("test", resource_ids=resource_ids)
        ```

        :param str resource_name: The name of the resource.
        :param ResourcesUnsubscribeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourcesUnsubscribeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourcesUnsubscribeArgs.__new__(ResourcesUnsubscribeArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if resource_ids is None and not opts.urn:
                raise TypeError("Missing required property 'resource_ids'")
            __props__.__dict__["resource_ids"] = resource_ids
        super(ResourcesUnsubscribe, __self__).__init__(
            'huaweicloud:cbc/resourcesUnsubscribe:ResourcesUnsubscribe',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'ResourcesUnsubscribe':
        """
        Get an existing ResourcesUnsubscribe resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_ids: Specifies the IDs of the resource to be unsubscribed.
               Supports up to `10` resource IDs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourcesUnsubscribeState.__new__(_ResourcesUnsubscribeState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["resource_ids"] = resource_ids
        return ResourcesUnsubscribe(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the IDs of the resource to be unsubscribed.
        Supports up to `10` resource IDs.
        """
        return pulumi.get(self, "resource_ids")

