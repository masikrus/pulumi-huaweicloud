# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetClusterUpgradeInfoResult',
    'AwaitableGetClusterUpgradeInfoResult',
    'get_cluster_upgrade_info',
    'get_cluster_upgrade_info_output',
]

@pulumi.output_type
class GetClusterUpgradeInfoResult:
    """
    A collection of values returned by getClusterUpgradeInfo.
    """
    def __init__(__self__, cluster_id=None, id=None, metadatas=None, region=None, specs=None, statuses=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if specs and not isinstance(specs, list):
            raise TypeError("Expected argument 'specs' to be a list")
        pulumi.set(__self__, "specs", specs)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetClusterUpgradeInfoMetadataResult']:
        """
        Basic information, as an element type of collection class,
        contains a set of properties defined by different names.
        """
        return pulumi.get(self, "metadatas")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetClusterUpgradeInfoSpecResult']:
        """
        Upgrade configuration related information.
        """
        return pulumi.get(self, "specs")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetClusterUpgradeInfoStatusResult']:
        """
        Upgrade status information.
        """
        return pulumi.get(self, "statuses")


class AwaitableGetClusterUpgradeInfoResult(GetClusterUpgradeInfoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterUpgradeInfoResult(
            cluster_id=self.cluster_id,
            id=self.id,
            metadatas=self.metadatas,
            region=self.region,
            specs=self.specs,
            statuses=self.statuses)


def get_cluster_upgrade_info(cluster_id: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterUpgradeInfoResult:
    """
    Use this data source to get the CCE cluster upgrade info.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Cce.get_cluster_upgrade_info(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the cluster ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cce/getClusterUpgradeInfo:getClusterUpgradeInfo', __args__, opts=opts, typ=GetClusterUpgradeInfoResult).value

    return AwaitableGetClusterUpgradeInfoResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        metadatas=pulumi.get(__ret__, 'metadatas'),
        region=pulumi.get(__ret__, 'region'),
        specs=pulumi.get(__ret__, 'specs'),
        statuses=pulumi.get(__ret__, 'statuses'))
def get_cluster_upgrade_info_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClusterUpgradeInfoResult]:
    """
    Use this data source to get the CCE cluster upgrade info.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Cce.get_cluster_upgrade_info(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the cluster ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cce/getClusterUpgradeInfo:getClusterUpgradeInfo', __args__, opts=opts, typ=GetClusterUpgradeInfoResult)
    return __ret__.apply(lambda __response__: GetClusterUpgradeInfoResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        metadatas=pulumi.get(__response__, 'metadatas'),
        region=pulumi.get(__response__, 'region'),
        specs=pulumi.get(__response__, 'specs'),
        statuses=pulumi.get(__response__, 'statuses')))
