# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PartitionArgs', 'Partition']

@pulumi.input_type
class PartitionArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_border_group: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Partition resource.
        :param pulumi.Input[_builtins.str] category: Specifies the category of the partition. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] container_subnet_ids: Specifies the container subnet IDs in the partition.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the partition. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] partition_subnet_id: Specifies the subnet ID of the partition. Changing this parameter
               will create a new resource.
        :param pulumi.Input[_builtins.str] public_border_group: Specifies the group of the partition. Changing this parameter will
               create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCE add-on resource.
               If omitted, the provider-level region will be used. Changing this creates a new CCE add-on resource.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if container_subnet_ids is not None:
            pulumi.set(__self__, "container_subnet_ids", container_subnet_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partition_subnet_id is not None:
            pulumi.set(__self__, "partition_subnet_id", partition_subnet_id)
        if public_border_group is not None:
            pulumi.set(__self__, "public_border_group", public_border_group)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the category of the partition. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster ID. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="containerSubnetIds")
    def container_subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the container subnet IDs in the partition.
        """
        return pulumi.get(self, "container_subnet_ids")

    @container_subnet_ids.setter
    def container_subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "container_subnet_ids", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the partition. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="partitionSubnetId")
    def partition_subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subnet ID of the partition. Changing this parameter
        will create a new resource.
        """
        return pulumi.get(self, "partition_subnet_id")

    @partition_subnet_id.setter
    def partition_subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "partition_subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the group of the partition. Changing this parameter will
        create a new resource.
        """
        return pulumi.get(self, "public_border_group")

    @public_border_group.setter
    def public_border_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_border_group", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the CCE add-on resource.
        If omitted, the provider-level region will be used. Changing this creates a new CCE add-on resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _PartitionState:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_border_group: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Partition resources.
        :param pulumi.Input[_builtins.str] category: Specifies the category of the partition. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] container_subnet_ids: Specifies the container subnet IDs in the partition.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the partition. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] partition_subnet_id: Specifies the subnet ID of the partition. Changing this parameter
               will create a new resource.
        :param pulumi.Input[_builtins.str] public_border_group: Specifies the group of the partition. Changing this parameter will
               create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCE add-on resource.
               If omitted, the provider-level region will be used. Changing this creates a new CCE add-on resource.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if container_subnet_ids is not None:
            pulumi.set(__self__, "container_subnet_ids", container_subnet_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partition_subnet_id is not None:
            pulumi.set(__self__, "partition_subnet_id", partition_subnet_id)
        if public_border_group is not None:
            pulumi.set(__self__, "public_border_group", public_border_group)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the category of the partition. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster ID. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="containerSubnetIds")
    def container_subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the container subnet IDs in the partition.
        """
        return pulumi.get(self, "container_subnet_ids")

    @container_subnet_ids.setter
    def container_subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "container_subnet_ids", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the partition. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="partitionSubnetId")
    def partition_subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subnet ID of the partition. Changing this parameter
        will create a new resource.
        """
        return pulumi.get(self, "partition_subnet_id")

    @partition_subnet_id.setter
    def partition_subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "partition_subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the group of the partition. Changing this parameter will
        create a new resource.
        """
        return pulumi.get(self, "public_border_group")

    @public_border_group.setter
    def public_border_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_border_group", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the CCE add-on resource.
        If omitted, the provider-level region will be used. Changing this creates a new CCE add-on resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Cce/partition:Partition")
class Partition(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_border_group: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CCE partition resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.cce.Partition("test",
            cluster_id=cluster_id,
            category="IES",
            name="test_name")
        ```

        ## Import

        The CCE partition can be imported using the `cluster_id` and `name` separated by a slash, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Cce/partition:Partition atest <cluster_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] category: Specifies the category of the partition. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] container_subnet_ids: Specifies the container subnet IDs in the partition.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the partition. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] partition_subnet_id: Specifies the subnet ID of the partition. Changing this parameter
               will create a new resource.
        :param pulumi.Input[_builtins.str] public_border_group: Specifies the group of the partition. Changing this parameter will
               create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCE add-on resource.
               If omitted, the provider-level region will be used. Changing this creates a new CCE add-on resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PartitionArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CCE partition resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.cce.Partition("test",
            cluster_id=cluster_id,
            category="IES",
            name="test_name")
        ```

        ## Import

        The CCE partition can be imported using the `cluster_id` and `name` separated by a slash, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Cce/partition:Partition atest <cluster_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param PartitionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PartitionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_border_group: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PartitionArgs.__new__(PartitionArgs)

            __props__.__dict__["category"] = category
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["container_subnet_ids"] = container_subnet_ids
            __props__.__dict__["name"] = name
            __props__.__dict__["partition_subnet_id"] = partition_subnet_id
            __props__.__dict__["public_border_group"] = public_border_group
            __props__.__dict__["region"] = region
        super(Partition, __self__).__init__(
            'huaweicloud:Cce/partition:Partition',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            category: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            container_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            partition_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            public_border_group: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'Partition':
        """
        Get an existing Partition resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] category: Specifies the category of the partition. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] container_subnet_ids: Specifies the container subnet IDs in the partition.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the partition. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] partition_subnet_id: Specifies the subnet ID of the partition. Changing this parameter
               will create a new resource.
        :param pulumi.Input[_builtins.str] public_border_group: Specifies the group of the partition. Changing this parameter will
               create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCE add-on resource.
               If omitted, the provider-level region will be used. Changing this creates a new CCE add-on resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PartitionState.__new__(_PartitionState)

        __props__.__dict__["category"] = category
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["container_subnet_ids"] = container_subnet_ids
        __props__.__dict__["name"] = name
        __props__.__dict__["partition_subnet_id"] = partition_subnet_id
        __props__.__dict__["public_border_group"] = public_border_group
        __props__.__dict__["region"] = region
        return Partition(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def category(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the category of the partition. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the cluster ID. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="containerSubnetIds")
    def container_subnet_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the container subnet IDs in the partition.
        """
        return pulumi.get(self, "container_subnet_ids")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the partition. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="partitionSubnetId")
    def partition_subnet_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the subnet ID of the partition. Changing this parameter
        will create a new resource.
        """
        return pulumi.get(self, "partition_subnet_id")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the group of the partition. Changing this parameter will
        create a new resource.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the CCE add-on resource.
        If omitted, the provider-level region will be used. Changing this creates a new CCE add-on resource.
        """
        return pulumi.get(self, "region")

