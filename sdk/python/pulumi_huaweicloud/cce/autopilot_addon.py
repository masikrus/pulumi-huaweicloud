# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AutopilotAddonArgs', 'AutopilotAddon']

@pulumi.input_type
class AutopilotAddonArgs:
    def __init__(__self__, *,
                 addon_template_name: pulumi.Input[_builtins.str],
                 cluster_id: pulumi.Input[_builtins.str],
                 values: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]],
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AutopilotAddon resource.
        :param pulumi.Input[_builtins.str] addon_template_name: Specifies the name of the add-on template to be installed,
               for example, **coredns**.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] values: Specifies the add-on template installation parameters, varying depending on the add-on.
               The values of this map should be json strings.
        :param pulumi.Input[_builtins.str] alias: Specifies the add-on alias.
        :param pulumi.Input[_builtins.str] name: Specifies the add-on name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCE autopilot add-on resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new add-on resource.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the add-on.
        """
        pulumi.set(__self__, "addon_template_name", addon_template_name)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "values", values)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="addonTemplateName")
    def addon_template_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the add-on template to be installed,
        for example, **coredns**.
        """
        return pulumi.get(self, "addon_template_name")

    @addon_template_name.setter
    def addon_template_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "addon_template_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]:
        """
        Specifies the add-on template installation parameters, varying depending on the add-on.
        The values of this map should be json strings.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the add-on alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the add-on name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the CCE autopilot add-on resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new add-on resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the add-on.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _AutopilotAddonState:
    def __init__(__self__, *,
                 addon_template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AutopilotAddon resources.
        :param pulumi.Input[_builtins.str] addon_template_name: Specifies the name of the add-on template to be installed,
               for example, **coredns**.
        :param pulumi.Input[_builtins.str] alias: Specifies the add-on alias.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[_builtins.str] created_at: The time when the add-on was created.
        :param pulumi.Input[_builtins.str] name: Specifies the add-on name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCE autopilot add-on resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new add-on resource.
        :param pulumi.Input[_builtins.str] status: The status of the add-on.
        :param pulumi.Input[_builtins.str] updated_at: The time when the add-on was updated.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] values: Specifies the add-on template installation parameters, varying depending on the add-on.
               The values of this map should be json strings.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the add-on.
        """
        if addon_template_name is not None:
            pulumi.set(__self__, "addon_template_name", addon_template_name)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="addonTemplateName")
    def addon_template_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the add-on template to be installed,
        for example, **coredns**.
        """
        return pulumi.get(self, "addon_template_name")

    @addon_template_name.setter
    def addon_template_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "addon_template_name", value)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the add-on alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the add-on was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the add-on name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the CCE autopilot add-on resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new add-on resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the add-on.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the add-on was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the add-on template installation parameters, varying depending on the add-on.
        The values of this map should be json strings.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the add-on.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("huaweicloud:Cce/autopilotAddon:AutopilotAddon")
class AutopilotAddon(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addon_template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CCE Autopilot add-on resource within huaweicloud.

        ## Example Usage

        ### Basic Usage

        variable "cluster_id" {}
        variable "basic_json_string" {}
        variable "flavor_json_string" {}
        variable "custom_json_string" {}

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.cce.AutopilotAddon("test",
            cluster_id=cluster_id,
            version="1.4.3",
            addon_template_name="log-agent",
            values={
                "basic": json.dumps(basic_json_string),
                "flavor": json.dumps(flavor_json_string),
                "custom": json.dumps(custom_json_string),
            })
        ```

        ## Import

        The autopilot add-on can be imported using the add-on ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cce/autopilotAddon:AutopilotAddon  huaweicloud_cce_autopilot_addon.myaddon <addon_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `values`. It is generally

        recommended running `pulumi preview` after importing a add-on. You can then decide if changes should be applied to

        the add-on, or the resource definition should be updated to align with the add-on. Also you can ignore changes as

        below.

        hcl

        resource "huaweicloud_cce_autopilot_addon" "myaddon" {

            ...

          lifecycle {

            ignore_changes = [
            
              values
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] addon_template_name: Specifies the name of the add-on template to be installed,
               for example, **coredns**.
        :param pulumi.Input[_builtins.str] alias: Specifies the add-on alias.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[_builtins.str] name: Specifies the add-on name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCE autopilot add-on resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new add-on resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] values: Specifies the add-on template installation parameters, varying depending on the add-on.
               The values of this map should be json strings.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the add-on.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AutopilotAddonArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CCE Autopilot add-on resource within huaweicloud.

        ## Example Usage

        ### Basic Usage

        variable "cluster_id" {}
        variable "basic_json_string" {}
        variable "flavor_json_string" {}
        variable "custom_json_string" {}

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.cce.AutopilotAddon("test",
            cluster_id=cluster_id,
            version="1.4.3",
            addon_template_name="log-agent",
            values={
                "basic": json.dumps(basic_json_string),
                "flavor": json.dumps(flavor_json_string),
                "custom": json.dumps(custom_json_string),
            })
        ```

        ## Import

        The autopilot add-on can be imported using the add-on ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cce/autopilotAddon:AutopilotAddon  huaweicloud_cce_autopilot_addon.myaddon <addon_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `values`. It is generally

        recommended running `pulumi preview` after importing a add-on. You can then decide if changes should be applied to

        the add-on, or the resource definition should be updated to align with the add-on. Also you can ignore changes as

        below.

        hcl

        resource "huaweicloud_cce_autopilot_addon" "myaddon" {

            ...

          lifecycle {

            ignore_changes = [
            
              values
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param AutopilotAddonArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutopilotAddonArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addon_template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutopilotAddonArgs.__new__(AutopilotAddonArgs)

            if addon_template_name is None and not opts.urn:
                raise TypeError("Missing required property 'addon_template_name'")
            __props__.__dict__["addon_template_name"] = addon_template_name
            __props__.__dict__["alias"] = alias
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if values is None and not opts.urn:
                raise TypeError("Missing required property 'values'")
            __props__.__dict__["values"] = values
            __props__.__dict__["version"] = version
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(AutopilotAddon, __self__).__init__(
            'huaweicloud:Cce/autopilotAddon:AutopilotAddon',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addon_template_name: Optional[pulumi.Input[_builtins.str]] = None,
            alias: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'AutopilotAddon':
        """
        Get an existing AutopilotAddon resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] addon_template_name: Specifies the name of the add-on template to be installed,
               for example, **coredns**.
        :param pulumi.Input[_builtins.str] alias: Specifies the add-on alias.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[_builtins.str] created_at: The time when the add-on was created.
        :param pulumi.Input[_builtins.str] name: Specifies the add-on name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCE autopilot add-on resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new add-on resource.
        :param pulumi.Input[_builtins.str] status: The status of the add-on.
        :param pulumi.Input[_builtins.str] updated_at: The time when the add-on was updated.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] values: Specifies the add-on template installation parameters, varying depending on the add-on.
               The values of this map should be json strings.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the add-on.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AutopilotAddonState.__new__(_AutopilotAddonState)

        __props__.__dict__["addon_template_name"] = addon_template_name
        __props__.__dict__["alias"] = alias
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["values"] = values
        __props__.__dict__["version"] = version
        return AutopilotAddon(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="addonTemplateName")
    def addon_template_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the add-on template to be installed,
        for example, **coredns**.
        """
        return pulumi.get(self, "addon_template_name")

    @_builtins.property
    @pulumi.getter
    def alias(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the add-on alias.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the add-on was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the add-on name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the CCE autopilot add-on resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new add-on resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the add-on.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the add-on was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the add-on template installation parameters, varying depending on the add-on.
        The values of this map should be json strings.
        """
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the version of the add-on.
        """
        return pulumi.get(self, "version")

