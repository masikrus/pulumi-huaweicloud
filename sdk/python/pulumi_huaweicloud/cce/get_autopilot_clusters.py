# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAutopilotClustersResult',
    'AwaitableGetAutopilotClustersResult',
    'get_autopilot_clusters',
    'get_autopilot_clusters_output',
]

@pulumi.output_type
class GetAutopilotClustersResult:
    """
    A collection of values returned by getAutopilotClusters.
    """
    def __init__(__self__, clusters=None, detail=None, id=None, region=None, status=None, type=None, version=None):
        if clusters and not isinstance(clusters, list):
            raise TypeError("Expected argument 'clusters' to be a list")
        pulumi.set(__self__, "clusters", clusters)
        if detail and not isinstance(detail, str):
            raise TypeError("Expected argument 'detail' to be a str")
        pulumi.set(__self__, "detail", detail)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Sequence['outputs.GetAutopilotClustersClusterResult']:
        """
        The list of the clusters.
        """
        return pulumi.get(self, "clusters")

    @_builtins.property
    @pulumi.getter
    def detail(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "detail")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the cluster.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the endpoint.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        The version of the cluster.
        """
        return pulumi.get(self, "version")


class AwaitableGetAutopilotClustersResult(GetAutopilotClustersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutopilotClustersResult(
            clusters=self.clusters,
            detail=self.detail,
            id=self.id,
            region=self.region,
            status=self.status,
            type=self.type,
            version=self.version)


def get_autopilot_clusters(detail: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           status: Optional[_builtins.str] = None,
                           type: Optional[_builtins.str] = None,
                           version: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutopilotClustersResult:
    """
    Use this data source to get  the list of CCE Autopilot clusters within huaweicloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cce.get_autopilot_clusters()
    ```


    :param _builtins.str detail: Specifies whether to get the details of the cluster.
           The value can be **true** and **false**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the cluster.
           The value can be: **Available**, **Unavailable**, **Creating**, **Deleting**, **Upgrading**,
           **RollingBack**, **RollbackFailed** and **Error**.
    :param _builtins.str type: Specifies the master node architecture.
           The value can be: **VirtualMachine**.
    :param _builtins.str version: Specifies the version of the cluster.
    """
    __args__ = dict()
    __args__['detail'] = detail
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cce/getAutopilotClusters:getAutopilotClusters', __args__, opts=opts, typ=GetAutopilotClustersResult).value

    return AwaitableGetAutopilotClustersResult(
        clusters=pulumi.get(__ret__, 'clusters'),
        detail=pulumi.get(__ret__, 'detail'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        version=pulumi.get(__ret__, 'version'))
def get_autopilot_clusters_output(detail: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAutopilotClustersResult]:
    """
    Use this data source to get  the list of CCE Autopilot clusters within huaweicloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cce.get_autopilot_clusters()
    ```


    :param _builtins.str detail: Specifies whether to get the details of the cluster.
           The value can be **true** and **false**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the cluster.
           The value can be: **Available**, **Unavailable**, **Creating**, **Deleting**, **Upgrading**,
           **RollingBack**, **RollbackFailed** and **Error**.
    :param _builtins.str type: Specifies the master node architecture.
           The value can be: **VirtualMachine**.
    :param _builtins.str version: Specifies the version of the cluster.
    """
    __args__ = dict()
    __args__['detail'] = detail
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cce/getAutopilotClusters:getAutopilotClusters', __args__, opts=opts, typ=GetAutopilotClustersResult)
    return __ret__.apply(lambda __response__: GetAutopilotClustersResult(
        clusters=pulumi.get(__response__, 'clusters'),
        detail=pulumi.get(__response__, 'detail'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        version=pulumi.get(__response__, 'version')))
