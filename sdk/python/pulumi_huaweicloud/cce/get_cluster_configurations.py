# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetClusterConfigurationsResult',
    'AwaitableGetClusterConfigurationsResult',
    'get_cluster_configurations',
    'get_cluster_configurations_output',
]

@pulumi.output_type
class GetClusterConfigurationsResult:
    """
    A collection of values returned by getClusterConfigurations.
    """
    def __init__(__self__, cluster_id=None, configurations=None, id=None, region=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if configurations and not isinstance(configurations, dict):
            raise TypeError("Expected argument 'configurations' to be a dict")
        pulumi.set(__self__, "configurations", configurations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Mapping[str, _builtins.str]:
        """
        The map of configurations.
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetClusterConfigurationsResult(GetClusterConfigurationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterConfigurationsResult(
            cluster_id=self.cluster_id,
            configurations=self.configurations,
            id=self.id,
            region=self.region)


def get_cluster_configurations(cluster_id: Optional[_builtins.str] = None,
                               region: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterConfigurationsResult:
    """
    Use this data source to get the configurations of a CCE cluster within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Cce.get_cluster_configurations(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the cluster ID in which to query the configurations.
    :param _builtins.str region: Specifies the region in which to obtain the CCE cluster configurations. If omitted, the
           provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cce/getClusterConfigurations:getClusterConfigurations', __args__, opts=opts, typ=GetClusterConfigurationsResult).value

    return AwaitableGetClusterConfigurationsResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        configurations=pulumi.get(__ret__, 'configurations'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_cluster_configurations_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClusterConfigurationsResult]:
    """
    Use this data source to get the configurations of a CCE cluster within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Cce.get_cluster_configurations(cluster_id=cluster_id)
    ```


    :param _builtins.str cluster_id: Specifies the cluster ID in which to query the configurations.
    :param _builtins.str region: Specifies the region in which to obtain the CCE cluster configurations. If omitted, the
           provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cce/getClusterConfigurations:getClusterConfigurations', __args__, opts=opts, typ=GetClusterConfigurationsResult)
    return __ret__.apply(lambda __response__: GetClusterConfigurationsResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        configurations=pulumi.get(__response__, 'configurations'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
