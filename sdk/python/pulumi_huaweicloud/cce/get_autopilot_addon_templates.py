# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAutopilotAddonTemplatesResult',
    'AwaitableGetAutopilotAddonTemplatesResult',
    'get_autopilot_addon_templates',
    'get_autopilot_addon_templates_output',
]

@pulumi.output_type
class GetAutopilotAddonTemplatesResult:
    """
    A collection of values returned by getAutopilotAddonTemplates.
    """
    def __init__(__self__, addon_template_name=None, id=None, region=None, templates=None):
        if addon_template_name and not isinstance(addon_template_name, str):
            raise TypeError("Expected argument 'addon_template_name' to be a str")
        pulumi.set(__self__, "addon_template_name", addon_template_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if templates and not isinstance(templates, list):
            raise TypeError("Expected argument 'templates' to be a list")
        pulumi.set(__self__, "templates", templates)

    @_builtins.property
    @pulumi.getter(name="addonTemplateName")
    def addon_template_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "addon_template_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetAutopilotAddonTemplatesTemplateResult']:
        """
        The list of add-on templates.
        """
        return pulumi.get(self, "templates")


class AwaitableGetAutopilotAddonTemplatesResult(GetAutopilotAddonTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutopilotAddonTemplatesResult(
            addon_template_name=self.addon_template_name,
            id=self.id,
            region=self.region,
            templates=self.templates)


def get_autopilot_addon_templates(addon_template_name: Optional[_builtins.str] = None,
                                  region: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutopilotAddonTemplatesResult:
    """
    Use this data source to get the list of CCE Autopilot add-on templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cce.get_autopilot_addon_templates(addon_template_name="log-agent")
    ```


    :param _builtins.str addon_template_name: Specifies the name of the add-on.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['addonTemplateName'] = addon_template_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cce/getAutopilotAddonTemplates:getAutopilotAddonTemplates', __args__, opts=opts, typ=GetAutopilotAddonTemplatesResult).value

    return AwaitableGetAutopilotAddonTemplatesResult(
        addon_template_name=pulumi.get(__ret__, 'addon_template_name'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        templates=pulumi.get(__ret__, 'templates'))
def get_autopilot_addon_templates_output(addon_template_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAutopilotAddonTemplatesResult]:
    """
    Use this data source to get the list of CCE Autopilot add-on templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cce.get_autopilot_addon_templates(addon_template_name="log-agent")
    ```


    :param _builtins.str addon_template_name: Specifies the name of the add-on.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['addonTemplateName'] = addon_template_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cce/getAutopilotAddonTemplates:getAutopilotAddonTemplates', __args__, opts=opts, typ=GetAutopilotAddonTemplatesResult)
    return __ret__.apply(lambda __response__: GetAutopilotAddonTemplatesResult(
        addon_template_name=pulumi.get(__response__, 'addon_template_name'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        templates=pulumi.get(__response__, 'templates')))
