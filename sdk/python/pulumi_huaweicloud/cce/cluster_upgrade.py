# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterUpgradeArgs', 'ClusterUpgrade']

@pulumi.input_type
class ClusterUpgradeArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 strategy: pulumi.Input['ClusterUpgradeStrategyArgs'],
                 target_version: pulumi.Input[_builtins.str],
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterUpgradeAddonArgs']]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_snapshot: Optional[pulumi.Input[_builtins.bool]] = None,
                 node_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 nodepool_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ClusterUpgrade resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input['ClusterUpgradeStrategyArgs'] strategy: Specifies the upgrade strategy.
               The strategy structure is documented below.
        :param pulumi.Input[_builtins.str] target_version: Specifies the target version.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterUpgradeAddonArgs']]] addons: Specifies the add-on configuration list
               The addons structure is documented below.
        :param pulumi.Input[_builtins.bool] is_snapshot: Specifies whether the cluster is snapshotted.
               
               <a name="addons"></a>
               The `addons` block supports:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] node_order: Specifies the upgrade sequence of nodes in the node pools.
               The key is the node pool ID, **DefaultPool** indicates the default pool.
               The value is a json string which indicates the priority of nodes in this pool. Please check the example.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]] nodepool_order: Specifies the upgrade sequence of node pools, in key-value pairs.
               The key is the node pool ID, **DefaultPool** indicates the default pool.
               The value is the priority of the node pool. **0** indicating the lowest priority.
               A larger value indicates a higher priority.
        :param pulumi.Input[_builtins.str] region: The region in which to create the CCE cluster upgrade resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "strategy", strategy)
        pulumi.set(__self__, "target_version", target_version)
        if addons is not None:
            pulumi.set(__self__, "addons", addons)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if is_snapshot is not None:
            pulumi.set(__self__, "is_snapshot", is_snapshot)
        if node_order is not None:
            pulumi.set(__self__, "node_order", node_order)
        if nodepool_order is not None:
            pulumi.set(__self__, "nodepool_order", nodepool_order)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> pulumi.Input['ClusterUpgradeStrategyArgs']:
        """
        Specifies the upgrade strategy.
        The strategy structure is documented below.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: pulumi.Input['ClusterUpgradeStrategyArgs']):
        pulumi.set(self, "strategy", value)

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the target version.
        """
        return pulumi.get(self, "target_version")

    @target_version.setter
    def target_version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_version", value)

    @_builtins.property
    @pulumi.getter
    def addons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterUpgradeAddonArgs']]]]:
        """
        Specifies the add-on configuration list
        The addons structure is documented below.
        """
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterUpgradeAddonArgs']]]]):
        pulumi.set(self, "addons", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="isSnapshot")
    def is_snapshot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the cluster is snapshotted.

        <a name="addons"></a>
        The `addons` block supports:
        """
        return pulumi.get(self, "is_snapshot")

    @is_snapshot.setter
    def is_snapshot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_snapshot", value)

    @_builtins.property
    @pulumi.getter(name="nodeOrder")
    def node_order(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the upgrade sequence of nodes in the node pools.
        The key is the node pool ID, **DefaultPool** indicates the default pool.
        The value is a json string which indicates the priority of nodes in this pool. Please check the example.
        """
        return pulumi.get(self, "node_order")

    @node_order.setter
    def node_order(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_order", value)

    @_builtins.property
    @pulumi.getter(name="nodepoolOrder")
    def nodepool_order(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]]:
        """
        Specifies the upgrade sequence of node pools, in key-value pairs.
        The key is the node pool ID, **DefaultPool** indicates the default pool.
        The value is the priority of the node pool. **0** indicating the lowest priority.
        A larger value indicates a higher priority.
        """
        return pulumi.get(self, "nodepool_order")

    @nodepool_order.setter
    def nodepool_order(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "nodepool_order", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the CCE cluster upgrade resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ClusterUpgradeState:
    def __init__(__self__, *,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterUpgradeAddonArgs']]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_snapshot: Optional[pulumi.Input[_builtins.bool]] = None,
                 node_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 nodepool_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy: Optional[pulumi.Input['ClusterUpgradeStrategyArgs']] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ClusterUpgrade resources.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterUpgradeAddonArgs']]] addons: Specifies the add-on configuration list
               The addons structure is documented below.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[_builtins.bool] is_snapshot: Specifies whether the cluster is snapshotted.
               
               <a name="addons"></a>
               The `addons` block supports:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] node_order: Specifies the upgrade sequence of nodes in the node pools.
               The key is the node pool ID, **DefaultPool** indicates the default pool.
               The value is a json string which indicates the priority of nodes in this pool. Please check the example.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]] nodepool_order: Specifies the upgrade sequence of node pools, in key-value pairs.
               The key is the node pool ID, **DefaultPool** indicates the default pool.
               The value is the priority of the node pool. **0** indicating the lowest priority.
               A larger value indicates a higher priority.
        :param pulumi.Input[_builtins.str] region: The region in which to create the CCE cluster upgrade resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input['ClusterUpgradeStrategyArgs'] strategy: Specifies the upgrade strategy.
               The strategy structure is documented below.
        :param pulumi.Input[_builtins.str] target_version: Specifies the target version.
        """
        if addons is not None:
            pulumi.set(__self__, "addons", addons)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if is_snapshot is not None:
            pulumi.set(__self__, "is_snapshot", is_snapshot)
        if node_order is not None:
            pulumi.set(__self__, "node_order", node_order)
        if nodepool_order is not None:
            pulumi.set(__self__, "nodepool_order", nodepool_order)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if target_version is not None:
            pulumi.set(__self__, "target_version", target_version)

    @_builtins.property
    @pulumi.getter
    def addons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterUpgradeAddonArgs']]]]:
        """
        Specifies the add-on configuration list
        The addons structure is documented below.
        """
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterUpgradeAddonArgs']]]]):
        pulumi.set(self, "addons", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="isSnapshot")
    def is_snapshot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the cluster is snapshotted.

        <a name="addons"></a>
        The `addons` block supports:
        """
        return pulumi.get(self, "is_snapshot")

    @is_snapshot.setter
    def is_snapshot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_snapshot", value)

    @_builtins.property
    @pulumi.getter(name="nodeOrder")
    def node_order(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the upgrade sequence of nodes in the node pools.
        The key is the node pool ID, **DefaultPool** indicates the default pool.
        The value is a json string which indicates the priority of nodes in this pool. Please check the example.
        """
        return pulumi.get(self, "node_order")

    @node_order.setter
    def node_order(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_order", value)

    @_builtins.property
    @pulumi.getter(name="nodepoolOrder")
    def nodepool_order(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]]:
        """
        Specifies the upgrade sequence of node pools, in key-value pairs.
        The key is the node pool ID, **DefaultPool** indicates the default pool.
        The value is the priority of the node pool. **0** indicating the lowest priority.
        A larger value indicates a higher priority.
        """
        return pulumi.get(self, "nodepool_order")

    @nodepool_order.setter
    def nodepool_order(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "nodepool_order", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the CCE cluster upgrade resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ClusterUpgradeStrategyArgs']]:
        """
        Specifies the upgrade strategy.
        The strategy structure is documented below.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ClusterUpgradeStrategyArgs']]):
        pulumi.set(self, "strategy", value)

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target version.
        """
        return pulumi.get(self, "target_version")

    @target_version.setter
    def target_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_version", value)


@pulumi.type_token("huaweicloud:Cce/clusterUpgrade:ClusterUpgrade")
class ClusterUpgrade(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ClusterUpgradeAddonArgs', 'ClusterUpgradeAddonArgsDict']]]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_snapshot: Optional[pulumi.Input[_builtins.bool]] = None,
                 node_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 nodepool_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy: Optional[pulumi.Input[Union['ClusterUpgradeStrategyArgs', 'ClusterUpgradeStrategyArgsDict']]] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to upgrade a CCE cluster within HuaweiCloud.

        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ClusterUpgradeAddonArgs', 'ClusterUpgradeAddonArgsDict']]]] addons: Specifies the add-on configuration list
               The addons structure is documented below.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[_builtins.bool] is_snapshot: Specifies whether the cluster is snapshotted.
               
               <a name="addons"></a>
               The `addons` block supports:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] node_order: Specifies the upgrade sequence of nodes in the node pools.
               The key is the node pool ID, **DefaultPool** indicates the default pool.
               The value is a json string which indicates the priority of nodes in this pool. Please check the example.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]] nodepool_order: Specifies the upgrade sequence of node pools, in key-value pairs.
               The key is the node pool ID, **DefaultPool** indicates the default pool.
               The value is the priority of the node pool. **0** indicating the lowest priority.
               A larger value indicates a higher priority.
        :param pulumi.Input[_builtins.str] region: The region in which to create the CCE cluster upgrade resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['ClusterUpgradeStrategyArgs', 'ClusterUpgradeStrategyArgsDict']] strategy: Specifies the upgrade strategy.
               The strategy structure is documented below.
        :param pulumi.Input[_builtins.str] target_version: Specifies the target version.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterUpgradeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to upgrade a CCE cluster within HuaweiCloud.

        ## Example Usage

        :param str resource_name: The name of the resource.
        :param ClusterUpgradeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterUpgradeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ClusterUpgradeAddonArgs', 'ClusterUpgradeAddonArgsDict']]]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_snapshot: Optional[pulumi.Input[_builtins.bool]] = None,
                 node_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 nodepool_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy: Optional[pulumi.Input[Union['ClusterUpgradeStrategyArgs', 'ClusterUpgradeStrategyArgsDict']]] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterUpgradeArgs.__new__(ClusterUpgradeArgs)

            __props__.__dict__["addons"] = addons
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["is_snapshot"] = is_snapshot
            __props__.__dict__["node_order"] = node_order
            __props__.__dict__["nodepool_order"] = nodepool_order
            __props__.__dict__["region"] = region
            if strategy is None and not opts.urn:
                raise TypeError("Missing required property 'strategy'")
            __props__.__dict__["strategy"] = strategy
            if target_version is None and not opts.urn:
                raise TypeError("Missing required property 'target_version'")
            __props__.__dict__["target_version"] = target_version
        super(ClusterUpgrade, __self__).__init__(
            'huaweicloud:Cce/clusterUpgrade:ClusterUpgrade',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ClusterUpgradeAddonArgs', 'ClusterUpgradeAddonArgsDict']]]]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            is_snapshot: Optional[pulumi.Input[_builtins.bool]] = None,
            node_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            nodepool_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            strategy: Optional[pulumi.Input[Union['ClusterUpgradeStrategyArgs', 'ClusterUpgradeStrategyArgsDict']]] = None,
            target_version: Optional[pulumi.Input[_builtins.str]] = None) -> 'ClusterUpgrade':
        """
        Get an existing ClusterUpgrade resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ClusterUpgradeAddonArgs', 'ClusterUpgradeAddonArgsDict']]]] addons: Specifies the add-on configuration list
               The addons structure is documented below.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[_builtins.bool] is_snapshot: Specifies whether the cluster is snapshotted.
               
               <a name="addons"></a>
               The `addons` block supports:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] node_order: Specifies the upgrade sequence of nodes in the node pools.
               The key is the node pool ID, **DefaultPool** indicates the default pool.
               The value is a json string which indicates the priority of nodes in this pool. Please check the example.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]] nodepool_order: Specifies the upgrade sequence of node pools, in key-value pairs.
               The key is the node pool ID, **DefaultPool** indicates the default pool.
               The value is the priority of the node pool. **0** indicating the lowest priority.
               A larger value indicates a higher priority.
        :param pulumi.Input[_builtins.str] region: The region in which to create the CCE cluster upgrade resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['ClusterUpgradeStrategyArgs', 'ClusterUpgradeStrategyArgsDict']] strategy: Specifies the upgrade strategy.
               The strategy structure is documented below.
        :param pulumi.Input[_builtins.str] target_version: Specifies the target version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterUpgradeState.__new__(_ClusterUpgradeState)

        __props__.__dict__["addons"] = addons
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["is_snapshot"] = is_snapshot
        __props__.__dict__["node_order"] = node_order
        __props__.__dict__["nodepool_order"] = nodepool_order
        __props__.__dict__["region"] = region
        __props__.__dict__["strategy"] = strategy
        __props__.__dict__["target_version"] = target_version
        return ClusterUpgrade(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def addons(self) -> pulumi.Output[Optional[Sequence['outputs.ClusterUpgradeAddon']]]:
        """
        Specifies the add-on configuration list
        The addons structure is documented below.
        """
        return pulumi.get(self, "addons")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="isSnapshot")
    def is_snapshot(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the cluster is snapshotted.

        <a name="addons"></a>
        The `addons` block supports:
        """
        return pulumi.get(self, "is_snapshot")

    @_builtins.property
    @pulumi.getter(name="nodeOrder")
    def node_order(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Specifies the upgrade sequence of nodes in the node pools.
        The key is the node pool ID, **DefaultPool** indicates the default pool.
        The value is a json string which indicates the priority of nodes in this pool. Please check the example.
        """
        return pulumi.get(self, "node_order")

    @_builtins.property
    @pulumi.getter(name="nodepoolOrder")
    def nodepool_order(self) -> pulumi.Output[Optional[Mapping[str, _builtins.int]]]:
        """
        Specifies the upgrade sequence of node pools, in key-value pairs.
        The key is the node pool ID, **DefaultPool** indicates the default pool.
        The value is the priority of the node pool. **0** indicating the lowest priority.
        A larger value indicates a higher priority.
        """
        return pulumi.get(self, "nodepool_order")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the CCE cluster upgrade resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> pulumi.Output['outputs.ClusterUpgradeStrategy']:
        """
        Specifies the upgrade strategy.
        The strategy structure is documented below.
        """
        return pulumi.get(self, "strategy")

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the target version.
        """
        return pulumi.get(self, "target_version")

