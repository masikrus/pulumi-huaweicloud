# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetChartsResult',
    'AwaitableGetChartsResult',
    'get_charts',
    'get_charts_output',
]

@pulumi.output_type
class GetChartsResult:
    """
    A collection of values returned by getCharts.
    """
    def __init__(__self__, charts=None, id=None, region=None):
        if charts and not isinstance(charts, list):
            raise TypeError("Expected argument 'charts' to be a list")
        pulumi.set(__self__, "charts", charts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def charts(self) -> Sequence['outputs.GetChartsChartResult']:
        """
        The list of charts.
        The charts structure is documented below.
        """
        return pulumi.get(self, "charts")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetChartsResult(GetChartsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetChartsResult(
            charts=self.charts,
            id=self.id,
            region=self.region)


def get_charts(region: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetChartsResult:
    """
    Use this data source to get the list of CCE charts within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cce.get_charts()
    ```


    :param _builtins.str region: Specifies the region in which to obtain the CCE charts. If omitted, the
           provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cce/getCharts:getCharts', __args__, opts=opts, typ=GetChartsResult).value

    return AwaitableGetChartsResult(
        charts=pulumi.get(__ret__, 'charts'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_charts_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetChartsResult]:
    """
    Use this data source to get the list of CCE charts within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cce.get_charts()
    ```


    :param _builtins.str region: Specifies the region in which to obtain the CCE charts. If omitted, the
           provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cce/getCharts:getCharts', __args__, opts=opts, typ=GetChartsResult)
    return __ret__.apply(lambda __response__: GetChartsResult(
        charts=pulumi.get(__response__, 'charts'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
