# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AutopilotClusterArgs', 'AutopilotCluster']

@pulumi.input_type
class AutopilotClusterArgs:
    def __init__(__self__, *,
                 container_network: pulumi.Input['AutopilotClusterContainerNetworkArgs'],
                 flavor: pulumi.Input[_builtins.str],
                 host_network: pulumi.Input['AutopilotClusterHostNetworkArgs'],
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 authentication: Optional[pulumi.Input['AutopilotClusterAuthenticationArgs']] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['AutopilotClusterConfigurationsOverrideArgs']]]] = None,
                 custom_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 delete_efs: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_eni: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_net: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_obs: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_sfs30: Optional[pulumi.Input[_builtins.str]] = None,
                 deletion_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_autopilot: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_swr_image_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 eni_network: Optional[pulumi.Input['AutopilotClusterEniNetworkArgs']] = None,
                 extend_param: Optional[pulumi.Input['AutopilotClusterExtendParamArgs']] = None,
                 ipv6_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 kube_proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 lts_reclaim_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_network: Optional[pulumi.Input['AutopilotClusterServiceNetworkArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AutopilotCluster resource.
        :param pulumi.Input['AutopilotClusterContainerNetworkArgs'] container_network: Specifies the container network of the cluster.
               The container_network structure is documented below.
        :param pulumi.Input[_builtins.str] flavor: Specifies the cluster flavor. Only **cce.autopilot.cluster** is supported.
        :param pulumi.Input['AutopilotClusterHostNetworkArgs'] host_network: Specifies the host network of the cluster.
               The host_network structure is documented below.
        :param pulumi.Input[_builtins.str] alias: Specifies the alias of the cluster. Enter 4 to 128 characters starting
               with a lowercase letter and not ending with a hyphen (-). Only lowercase letters, digits, and hyphens (-) are allowed.
               If not specified, the alias is the same as the cluster name.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the cluster annotations in the format of key-value pairs.
        :param pulumi.Input['AutopilotClusterAuthenticationArgs'] authentication: Specifies the configurations of the cluster authentication mode.
               The authentication structure is documented below.
        :param pulumi.Input[_builtins.str] category: Specifies the cluster type. Only **Turbo** is supported.
        :param pulumi.Input[Sequence[pulumi.Input['AutopilotClusterConfigurationsOverrideArgs']]] configurations_overrides: Specifies the this parameter to override
               the default component configurations in the cluster.
               The configurations_override structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] custom_sans: Specifies the custom SAN field in the API server certificate of the cluster.
        :param pulumi.Input[_builtins.str] delete_efs: Specifies whether to delete the SFS Turbo volume.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped. This is the default option.
        :param pulumi.Input[_builtins.str] delete_eni: Specifies whether to delete the ENI port.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               This is the default option.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped.
        :param pulumi.Input[_builtins.str] delete_net: Specifies whether to delete the cluster service or ingress resources,
               such as a load balancer. The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               This is the default option.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped.
        :param pulumi.Input[_builtins.str] delete_obs: Specifies whether to delete the OBS volume.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped. This is the default option.
        :param pulumi.Input[_builtins.str] delete_sfs30: Specifies whether to delete the SFS 3.0 volume.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped. This is the default option.
        :param pulumi.Input[_builtins.bool] deletion_protection: Specifies whether to enable deletion protection for the cluster.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the cluster.
        :param pulumi.Input[_builtins.str] eip_id: Specifies the EIP ID of the cluster.
        :param pulumi.Input[_builtins.bool] enable_autopilot: Specifies whether the cluster is an Autopilot cluster,
               defaults to **true**.
        :param pulumi.Input[_builtins.bool] enable_snat: Specifies whether SNAT is configured for the cluster.
               After this function is enabled, the cluster can access the Internet through a NAT gateway.
               By default, the existing NAT gateway in the selected VPC is used. Otherwise,
               the system automatically creates a NAT gateway of the default specifications,
               binds an EIP to the NAT gateway, and configures SNAT rules.
        :param pulumi.Input[_builtins.bool] enable_swr_image_access: Specifies whether the cluster is interconnected with SWR.
               To ensure that your cluster nodes can pull images from SWR, the existing SWR and OBS endpoints in the selected
               VPC are used by default. If not, new SWR and OBS endpoints will be automatically created.
        :param pulumi.Input['AutopilotClusterEniNetworkArgs'] eni_network: Specifies the ENI network of the cluster.
               The eni_network structure is documented below.
        :param pulumi.Input['AutopilotClusterExtendParamArgs'] extend_param: Specifies the extend param of the cluster.
               The extend_param structure is documented below.
        :param pulumi.Input[_builtins.bool] ipv6_enable: Specifies whether the cluster uses the IPv6 mode.
        :param pulumi.Input[_builtins.str] kube_proxy_mode: Specifies the kube proxy mode of the cluster.
               The value can be: **iptables**.
        :param pulumi.Input[_builtins.str] lts_reclaim_policy: Specifies whether to delete the LTS resource, such as a log group or
               a log stream. The value can be:
               + **Delete_Log_Group**: The system starts to delete a log group. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **Delete_Master_Log_Stream**: The system starts to delete a master log stream. If the deletion fails,
               no deletion retry is performed, and subsequent processes will proceed. This is the default option.
               
               + **Retain**: The deletion is skipped.
               
               <a name="autopilot_cluster_host_networks"></a>
               The `host_network` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the component configuration item name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCE autopilot cluster resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
        :param pulumi.Input['AutopilotClusterServiceNetworkArgs'] service_network: Specifies the service network of the cluster.
               The service_network structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the cluster tags in the format of key-value pairs.
        :param pulumi.Input[_builtins.str] type: Specifies the master node architecture. The value can be:
               + **VirtualMachine**: Indicates the master node is an x86 server.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the cluster.
               If not specified, a cluster of the latest version will be created.
        """
        pulumi.set(__self__, "container_network", container_network)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "host_network", host_network)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if configurations_overrides is not None:
            pulumi.set(__self__, "configurations_overrides", configurations_overrides)
        if custom_sans is not None:
            pulumi.set(__self__, "custom_sans", custom_sans)
        if delete_efs is not None:
            pulumi.set(__self__, "delete_efs", delete_efs)
        if delete_eni is not None:
            pulumi.set(__self__, "delete_eni", delete_eni)
        if delete_net is not None:
            pulumi.set(__self__, "delete_net", delete_net)
        if delete_obs is not None:
            pulumi.set(__self__, "delete_obs", delete_obs)
        if delete_sfs30 is not None:
            pulumi.set(__self__, "delete_sfs30", delete_sfs30)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if enable_autopilot is not None:
            pulumi.set(__self__, "enable_autopilot", enable_autopilot)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enable_snat is not None:
            pulumi.set(__self__, "enable_snat", enable_snat)
        if enable_swr_image_access is not None:
            pulumi.set(__self__, "enable_swr_image_access", enable_swr_image_access)
        if eni_network is not None:
            pulumi.set(__self__, "eni_network", eni_network)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if ipv6_enable is not None:
            pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        if kube_proxy_mode is not None:
            pulumi.set(__self__, "kube_proxy_mode", kube_proxy_mode)
        if lts_reclaim_policy is not None:
            pulumi.set(__self__, "lts_reclaim_policy", lts_reclaim_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="containerNetwork")
    def container_network(self) -> pulumi.Input['AutopilotClusterContainerNetworkArgs']:
        """
        Specifies the container network of the cluster.
        The container_network structure is documented below.
        """
        return pulumi.get(self, "container_network")

    @container_network.setter
    def container_network(self, value: pulumi.Input['AutopilotClusterContainerNetworkArgs']):
        pulumi.set(self, "container_network", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cluster flavor. Only **cce.autopilot.cluster** is supported.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> pulumi.Input['AutopilotClusterHostNetworkArgs']:
        """
        Specifies the host network of the cluster.
        The host_network structure is documented below.
        """
        return pulumi.get(self, "host_network")

    @host_network.setter
    def host_network(self, value: pulumi.Input['AutopilotClusterHostNetworkArgs']):
        pulumi.set(self, "host_network", value)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alias of the cluster. Enter 4 to 128 characters starting
        with a lowercase letter and not ending with a hyphen (-). Only lowercase letters, digits, and hyphens (-) are allowed.
        If not specified, the alias is the same as the cluster name.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the cluster annotations in the format of key-value pairs.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['AutopilotClusterAuthenticationArgs']]:
        """
        Specifies the configurations of the cluster authentication mode.
        The authentication structure is documented below.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['AutopilotClusterAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster type. Only **Turbo** is supported.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter(name="configurationsOverrides")
    def configurations_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutopilotClusterConfigurationsOverrideArgs']]]]:
        """
        Specifies the this parameter to override
        the default component configurations in the cluster.
        The configurations_override structure is documented below.
        """
        return pulumi.get(self, "configurations_overrides")

    @configurations_overrides.setter
    def configurations_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutopilotClusterConfigurationsOverrideArgs']]]]):
        pulumi.set(self, "configurations_overrides", value)

    @_builtins.property
    @pulumi.getter(name="customSans")
    def custom_sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the custom SAN field in the API server certificate of the cluster.
        """
        return pulumi.get(self, "custom_sans")

    @custom_sans.setter
    def custom_sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_sans", value)

    @_builtins.property
    @pulumi.getter(name="deleteEfs")
    def delete_efs(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to delete the SFS Turbo volume.
        The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped. This is the default option.
        """
        return pulumi.get(self, "delete_efs")

    @delete_efs.setter
    def delete_efs(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_efs", value)

    @_builtins.property
    @pulumi.getter(name="deleteEni")
    def delete_eni(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to delete the ENI port.
        The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
        This is the default option.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped.
        """
        return pulumi.get(self, "delete_eni")

    @delete_eni.setter
    def delete_eni(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_eni", value)

    @_builtins.property
    @pulumi.getter(name="deleteNet")
    def delete_net(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to delete the cluster service or ingress resources,
        such as a load balancer. The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
        This is the default option.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped.
        """
        return pulumi.get(self, "delete_net")

    @delete_net.setter
    def delete_net(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_net", value)

    @_builtins.property
    @pulumi.getter(name="deleteObs")
    def delete_obs(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to delete the OBS volume.
        The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped. This is the default option.
        """
        return pulumi.get(self, "delete_obs")

    @delete_obs.setter
    def delete_obs(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_obs", value)

    @_builtins.property
    @pulumi.getter(name="deleteSfs30")
    def delete_sfs30(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to delete the SFS 3.0 volume.
        The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped. This is the default option.
        """
        return pulumi.get(self, "delete_sfs30")

    @delete_sfs30.setter
    def delete_sfs30(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_sfs30", value)

    @_builtins.property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable deletion protection for the cluster.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deletion_protection", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the cluster.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the EIP ID of the cluster.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eip_id", value)

    @_builtins.property
    @pulumi.getter(name="enableAutopilot")
    def enable_autopilot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the cluster is an Autopilot cluster,
        defaults to **true**.
        """
        return pulumi.get(self, "enable_autopilot")

    @enable_autopilot.setter
    def enable_autopilot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_autopilot", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enableSnat")
    def enable_snat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether SNAT is configured for the cluster.
        After this function is enabled, the cluster can access the Internet through a NAT gateway.
        By default, the existing NAT gateway in the selected VPC is used. Otherwise,
        the system automatically creates a NAT gateway of the default specifications,
        binds an EIP to the NAT gateway, and configures SNAT rules.
        """
        return pulumi.get(self, "enable_snat")

    @enable_snat.setter
    def enable_snat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_snat", value)

    @_builtins.property
    @pulumi.getter(name="enableSwrImageAccess")
    def enable_swr_image_access(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the cluster is interconnected with SWR.
        To ensure that your cluster nodes can pull images from SWR, the existing SWR and OBS endpoints in the selected
        VPC are used by default. If not, new SWR and OBS endpoints will be automatically created.
        """
        return pulumi.get(self, "enable_swr_image_access")

    @enable_swr_image_access.setter
    def enable_swr_image_access(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_swr_image_access", value)

    @_builtins.property
    @pulumi.getter(name="eniNetwork")
    def eni_network(self) -> Optional[pulumi.Input['AutopilotClusterEniNetworkArgs']]:
        """
        Specifies the ENI network of the cluster.
        The eni_network structure is documented below.
        """
        return pulumi.get(self, "eni_network")

    @eni_network.setter
    def eni_network(self, value: Optional[pulumi.Input['AutopilotClusterEniNetworkArgs']]):
        pulumi.set(self, "eni_network", value)

    @_builtins.property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[pulumi.Input['AutopilotClusterExtendParamArgs']]:
        """
        Specifies the extend param of the cluster.
        The extend_param structure is documented below.
        """
        return pulumi.get(self, "extend_param")

    @extend_param.setter
    def extend_param(self, value: Optional[pulumi.Input['AutopilotClusterExtendParamArgs']]):
        pulumi.set(self, "extend_param", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the cluster uses the IPv6 mode.
        """
        return pulumi.get(self, "ipv6_enable")

    @ipv6_enable.setter
    def ipv6_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_enable", value)

    @_builtins.property
    @pulumi.getter(name="kubeProxyMode")
    def kube_proxy_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the kube proxy mode of the cluster.
        The value can be: **iptables**.
        """
        return pulumi.get(self, "kube_proxy_mode")

    @kube_proxy_mode.setter
    def kube_proxy_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kube_proxy_mode", value)

    @_builtins.property
    @pulumi.getter(name="ltsReclaimPolicy")
    def lts_reclaim_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to delete the LTS resource, such as a log group or
        a log stream. The value can be:
        + **Delete_Log_Group**: The system starts to delete a log group. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **Delete_Master_Log_Stream**: The system starts to delete a master log stream. If the deletion fails,
        no deletion retry is performed, and subsequent processes will proceed. This is the default option.

        + **Retain**: The deletion is skipped.

        <a name="autopilot_cluster_host_networks"></a>
        The `host_network` block supports:
        """
        return pulumi.get(self, "lts_reclaim_policy")

    @lts_reclaim_policy.setter
    def lts_reclaim_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lts_reclaim_policy", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the component configuration item name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the CCE autopilot cluster resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input['AutopilotClusterServiceNetworkArgs']]:
        """
        Specifies the service network of the cluster.
        The service_network structure is documented below.
        """
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input['AutopilotClusterServiceNetworkArgs']]):
        pulumi.set(self, "service_network", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the cluster tags in the format of key-value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the master node architecture. The value can be:
        + **VirtualMachine**: Indicates the master node is an x86 server.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the cluster.
        If not specified, a cluster of the latest version will be created.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _AutopilotClusterState:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 authentication: Optional[pulumi.Input['AutopilotClusterAuthenticationArgs']] = None,
                 az: Optional[pulumi.Input[_builtins.str]] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['AutopilotClusterConfigurationsOverrideArgs']]]] = None,
                 container_network: Optional[pulumi.Input['AutopilotClusterContainerNetworkArgs']] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 delete_efs: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_eni: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_net: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_obs: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_sfs30: Optional[pulumi.Input[_builtins.str]] = None,
                 deletion_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_autopilot: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_swr_image_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 eni_network: Optional[pulumi.Input['AutopilotClusterEniNetworkArgs']] = None,
                 extend_param: Optional[pulumi.Input['AutopilotClusterExtendParamArgs']] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 host_network: Optional[pulumi.Input['AutopilotClusterHostNetworkArgs']] = None,
                 ipv6_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 kube_proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 lts_reclaim_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 platform_version: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_network: Optional[pulumi.Input['AutopilotClusterServiceNetworkArgs']] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['AutopilotClusterStatusArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AutopilotCluster resources.
        :param pulumi.Input[_builtins.str] alias: Specifies the alias of the cluster. Enter 4 to 128 characters starting
               with a lowercase letter and not ending with a hyphen (-). Only lowercase letters, digits, and hyphens (-) are allowed.
               If not specified, the alias is the same as the cluster name.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the cluster annotations in the format of key-value pairs.
        :param pulumi.Input['AutopilotClusterAuthenticationArgs'] authentication: Specifies the configurations of the cluster authentication mode.
               The authentication structure is documented below.
        :param pulumi.Input[_builtins.str] az: The AZ of the cluster.
        :param pulumi.Input[_builtins.str] category: Specifies the cluster type. Only **Turbo** is supported.
        :param pulumi.Input[Sequence[pulumi.Input['AutopilotClusterConfigurationsOverrideArgs']]] configurations_overrides: Specifies the this parameter to override
               the default component configurations in the cluster.
               The configurations_override structure is documented below.
        :param pulumi.Input['AutopilotClusterContainerNetworkArgs'] container_network: Specifies the container network of the cluster.
               The container_network structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The time when the cluster was created.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] custom_sans: Specifies the custom SAN field in the API server certificate of the cluster.
        :param pulumi.Input[_builtins.str] delete_efs: Specifies whether to delete the SFS Turbo volume.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped. This is the default option.
        :param pulumi.Input[_builtins.str] delete_eni: Specifies whether to delete the ENI port.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               This is the default option.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped.
        :param pulumi.Input[_builtins.str] delete_net: Specifies whether to delete the cluster service or ingress resources,
               such as a load balancer. The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               This is the default option.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped.
        :param pulumi.Input[_builtins.str] delete_obs: Specifies whether to delete the OBS volume.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped. This is the default option.
        :param pulumi.Input[_builtins.str] delete_sfs30: Specifies whether to delete the SFS 3.0 volume.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped. This is the default option.
        :param pulumi.Input[_builtins.bool] deletion_protection: Specifies whether to enable deletion protection for the cluster.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the cluster.
        :param pulumi.Input[_builtins.str] eip_id: Specifies the EIP ID of the cluster.
        :param pulumi.Input[_builtins.bool] enable_autopilot: Specifies whether the cluster is an Autopilot cluster,
               defaults to **true**.
        :param pulumi.Input[_builtins.bool] enable_snat: Specifies whether SNAT is configured for the cluster.
               After this function is enabled, the cluster can access the Internet through a NAT gateway.
               By default, the existing NAT gateway in the selected VPC is used. Otherwise,
               the system automatically creates a NAT gateway of the default specifications,
               binds an EIP to the NAT gateway, and configures SNAT rules.
        :param pulumi.Input[_builtins.bool] enable_swr_image_access: Specifies whether the cluster is interconnected with SWR.
               To ensure that your cluster nodes can pull images from SWR, the existing SWR and OBS endpoints in the selected
               VPC are used by default. If not, new SWR and OBS endpoints will be automatically created.
        :param pulumi.Input['AutopilotClusterEniNetworkArgs'] eni_network: Specifies the ENI network of the cluster.
               The eni_network structure is documented below.
        :param pulumi.Input['AutopilotClusterExtendParamArgs'] extend_param: Specifies the extend param of the cluster.
               The extend_param structure is documented below.
        :param pulumi.Input[_builtins.str] flavor: Specifies the cluster flavor. Only **cce.autopilot.cluster** is supported.
        :param pulumi.Input['AutopilotClusterHostNetworkArgs'] host_network: Specifies the host network of the cluster.
               The host_network structure is documented below.
        :param pulumi.Input[_builtins.bool] ipv6_enable: Specifies whether the cluster uses the IPv6 mode.
        :param pulumi.Input[_builtins.str] kube_proxy_mode: Specifies the kube proxy mode of the cluster.
               The value can be: **iptables**.
        :param pulumi.Input[_builtins.str] lts_reclaim_policy: Specifies whether to delete the LTS resource, such as a log group or
               a log stream. The value can be:
               + **Delete_Log_Group**: The system starts to delete a log group. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **Delete_Master_Log_Stream**: The system starts to delete a master log stream. If the deletion fails,
               no deletion retry is performed, and subsequent processes will proceed. This is the default option.
               
               + **Retain**: The deletion is skipped.
               
               <a name="autopilot_cluster_host_networks"></a>
               The `host_network` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the component configuration item name.
        :param pulumi.Input[_builtins.str] platform_version: The cluster platform version.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCE autopilot cluster resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
        :param pulumi.Input['AutopilotClusterServiceNetworkArgs'] service_network: Specifies the service network of the cluster.
               The service_network structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutopilotClusterStatusArgs']]] statuses: The status of the cluster.
               The status structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the cluster tags in the format of key-value pairs.
        :param pulumi.Input[_builtins.str] type: Specifies the master node architecture. The value can be:
               + **VirtualMachine**: Indicates the master node is an x86 server.
        :param pulumi.Input[_builtins.str] updated_at: The time when the cluster was updated.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the cluster.
               If not specified, a cluster of the latest version will be created.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if az is not None:
            pulumi.set(__self__, "az", az)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if configurations_overrides is not None:
            pulumi.set(__self__, "configurations_overrides", configurations_overrides)
        if container_network is not None:
            pulumi.set(__self__, "container_network", container_network)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if custom_sans is not None:
            pulumi.set(__self__, "custom_sans", custom_sans)
        if delete_efs is not None:
            pulumi.set(__self__, "delete_efs", delete_efs)
        if delete_eni is not None:
            pulumi.set(__self__, "delete_eni", delete_eni)
        if delete_net is not None:
            pulumi.set(__self__, "delete_net", delete_net)
        if delete_obs is not None:
            pulumi.set(__self__, "delete_obs", delete_obs)
        if delete_sfs30 is not None:
            pulumi.set(__self__, "delete_sfs30", delete_sfs30)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if enable_autopilot is not None:
            pulumi.set(__self__, "enable_autopilot", enable_autopilot)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enable_snat is not None:
            pulumi.set(__self__, "enable_snat", enable_snat)
        if enable_swr_image_access is not None:
            pulumi.set(__self__, "enable_swr_image_access", enable_swr_image_access)
        if eni_network is not None:
            pulumi.set(__self__, "eni_network", eni_network)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if ipv6_enable is not None:
            pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        if kube_proxy_mode is not None:
            pulumi.set(__self__, "kube_proxy_mode", kube_proxy_mode)
        if lts_reclaim_policy is not None:
            pulumi.set(__self__, "lts_reclaim_policy", lts_reclaim_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if platform_version is not None:
            pulumi.set(__self__, "platform_version", platform_version)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alias of the cluster. Enter 4 to 128 characters starting
        with a lowercase letter and not ending with a hyphen (-). Only lowercase letters, digits, and hyphens (-) are allowed.
        If not specified, the alias is the same as the cluster name.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the cluster annotations in the format of key-value pairs.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['AutopilotClusterAuthenticationArgs']]:
        """
        Specifies the configurations of the cluster authentication mode.
        The authentication structure is documented below.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['AutopilotClusterAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @_builtins.property
    @pulumi.getter
    def az(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The AZ of the cluster.
        """
        return pulumi.get(self, "az")

    @az.setter
    def az(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "az", value)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster type. Only **Turbo** is supported.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter(name="configurationsOverrides")
    def configurations_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutopilotClusterConfigurationsOverrideArgs']]]]:
        """
        Specifies the this parameter to override
        the default component configurations in the cluster.
        The configurations_override structure is documented below.
        """
        return pulumi.get(self, "configurations_overrides")

    @configurations_overrides.setter
    def configurations_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutopilotClusterConfigurationsOverrideArgs']]]]):
        pulumi.set(self, "configurations_overrides", value)

    @_builtins.property
    @pulumi.getter(name="containerNetwork")
    def container_network(self) -> Optional[pulumi.Input['AutopilotClusterContainerNetworkArgs']]:
        """
        Specifies the container network of the cluster.
        The container_network structure is documented below.
        """
        return pulumi.get(self, "container_network")

    @container_network.setter
    def container_network(self, value: Optional[pulumi.Input['AutopilotClusterContainerNetworkArgs']]):
        pulumi.set(self, "container_network", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the cluster was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="customSans")
    def custom_sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the custom SAN field in the API server certificate of the cluster.
        """
        return pulumi.get(self, "custom_sans")

    @custom_sans.setter
    def custom_sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_sans", value)

    @_builtins.property
    @pulumi.getter(name="deleteEfs")
    def delete_efs(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to delete the SFS Turbo volume.
        The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped. This is the default option.
        """
        return pulumi.get(self, "delete_efs")

    @delete_efs.setter
    def delete_efs(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_efs", value)

    @_builtins.property
    @pulumi.getter(name="deleteEni")
    def delete_eni(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to delete the ENI port.
        The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
        This is the default option.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped.
        """
        return pulumi.get(self, "delete_eni")

    @delete_eni.setter
    def delete_eni(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_eni", value)

    @_builtins.property
    @pulumi.getter(name="deleteNet")
    def delete_net(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to delete the cluster service or ingress resources,
        such as a load balancer. The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
        This is the default option.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped.
        """
        return pulumi.get(self, "delete_net")

    @delete_net.setter
    def delete_net(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_net", value)

    @_builtins.property
    @pulumi.getter(name="deleteObs")
    def delete_obs(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to delete the OBS volume.
        The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped. This is the default option.
        """
        return pulumi.get(self, "delete_obs")

    @delete_obs.setter
    def delete_obs(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_obs", value)

    @_builtins.property
    @pulumi.getter(name="deleteSfs30")
    def delete_sfs30(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to delete the SFS 3.0 volume.
        The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped. This is the default option.
        """
        return pulumi.get(self, "delete_sfs30")

    @delete_sfs30.setter
    def delete_sfs30(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_sfs30", value)

    @_builtins.property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable deletion protection for the cluster.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deletion_protection", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the cluster.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the EIP ID of the cluster.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eip_id", value)

    @_builtins.property
    @pulumi.getter(name="enableAutopilot")
    def enable_autopilot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the cluster is an Autopilot cluster,
        defaults to **true**.
        """
        return pulumi.get(self, "enable_autopilot")

    @enable_autopilot.setter
    def enable_autopilot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_autopilot", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enableSnat")
    def enable_snat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether SNAT is configured for the cluster.
        After this function is enabled, the cluster can access the Internet through a NAT gateway.
        By default, the existing NAT gateway in the selected VPC is used. Otherwise,
        the system automatically creates a NAT gateway of the default specifications,
        binds an EIP to the NAT gateway, and configures SNAT rules.
        """
        return pulumi.get(self, "enable_snat")

    @enable_snat.setter
    def enable_snat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_snat", value)

    @_builtins.property
    @pulumi.getter(name="enableSwrImageAccess")
    def enable_swr_image_access(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the cluster is interconnected with SWR.
        To ensure that your cluster nodes can pull images from SWR, the existing SWR and OBS endpoints in the selected
        VPC are used by default. If not, new SWR and OBS endpoints will be automatically created.
        """
        return pulumi.get(self, "enable_swr_image_access")

    @enable_swr_image_access.setter
    def enable_swr_image_access(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_swr_image_access", value)

    @_builtins.property
    @pulumi.getter(name="eniNetwork")
    def eni_network(self) -> Optional[pulumi.Input['AutopilotClusterEniNetworkArgs']]:
        """
        Specifies the ENI network of the cluster.
        The eni_network structure is documented below.
        """
        return pulumi.get(self, "eni_network")

    @eni_network.setter
    def eni_network(self, value: Optional[pulumi.Input['AutopilotClusterEniNetworkArgs']]):
        pulumi.set(self, "eni_network", value)

    @_builtins.property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[pulumi.Input['AutopilotClusterExtendParamArgs']]:
        """
        Specifies the extend param of the cluster.
        The extend_param structure is documented below.
        """
        return pulumi.get(self, "extend_param")

    @extend_param.setter
    def extend_param(self, value: Optional[pulumi.Input['AutopilotClusterExtendParamArgs']]):
        pulumi.set(self, "extend_param", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster flavor. Only **cce.autopilot.cluster** is supported.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[pulumi.Input['AutopilotClusterHostNetworkArgs']]:
        """
        Specifies the host network of the cluster.
        The host_network structure is documented below.
        """
        return pulumi.get(self, "host_network")

    @host_network.setter
    def host_network(self, value: Optional[pulumi.Input['AutopilotClusterHostNetworkArgs']]):
        pulumi.set(self, "host_network", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the cluster uses the IPv6 mode.
        """
        return pulumi.get(self, "ipv6_enable")

    @ipv6_enable.setter
    def ipv6_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_enable", value)

    @_builtins.property
    @pulumi.getter(name="kubeProxyMode")
    def kube_proxy_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the kube proxy mode of the cluster.
        The value can be: **iptables**.
        """
        return pulumi.get(self, "kube_proxy_mode")

    @kube_proxy_mode.setter
    def kube_proxy_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kube_proxy_mode", value)

    @_builtins.property
    @pulumi.getter(name="ltsReclaimPolicy")
    def lts_reclaim_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to delete the LTS resource, such as a log group or
        a log stream. The value can be:
        + **Delete_Log_Group**: The system starts to delete a log group. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **Delete_Master_Log_Stream**: The system starts to delete a master log stream. If the deletion fails,
        no deletion retry is performed, and subsequent processes will proceed. This is the default option.

        + **Retain**: The deletion is skipped.

        <a name="autopilot_cluster_host_networks"></a>
        The `host_network` block supports:
        """
        return pulumi.get(self, "lts_reclaim_policy")

    @lts_reclaim_policy.setter
    def lts_reclaim_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lts_reclaim_policy", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the component configuration item name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster platform version.
        """
        return pulumi.get(self, "platform_version")

    @platform_version.setter
    def platform_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "platform_version", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the CCE autopilot cluster resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input['AutopilotClusterServiceNetworkArgs']]:
        """
        Specifies the service network of the cluster.
        The service_network structure is documented below.
        """
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input['AutopilotClusterServiceNetworkArgs']]):
        pulumi.set(self, "service_network", value)

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutopilotClusterStatusArgs']]]]:
        """
        The status of the cluster.
        The status structure is documented below.
        """
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutopilotClusterStatusArgs']]]]):
        pulumi.set(self, "statuses", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the cluster tags in the format of key-value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the master node architecture. The value can be:
        + **VirtualMachine**: Indicates the master node is an x86 server.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the cluster was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the cluster.
        If not specified, a cluster of the latest version will be created.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("huaweicloud:Cce/autopilotCluster:AutopilotCluster")
class AutopilotCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 authentication: Optional[pulumi.Input[Union['AutopilotClusterAuthenticationArgs', 'AutopilotClusterAuthenticationArgsDict']]] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations_overrides: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AutopilotClusterConfigurationsOverrideArgs', 'AutopilotClusterConfigurationsOverrideArgsDict']]]]] = None,
                 container_network: Optional[pulumi.Input[Union['AutopilotClusterContainerNetworkArgs', 'AutopilotClusterContainerNetworkArgsDict']]] = None,
                 custom_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 delete_efs: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_eni: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_net: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_obs: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_sfs30: Optional[pulumi.Input[_builtins.str]] = None,
                 deletion_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_autopilot: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_swr_image_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 eni_network: Optional[pulumi.Input[Union['AutopilotClusterEniNetworkArgs', 'AutopilotClusterEniNetworkArgsDict']]] = None,
                 extend_param: Optional[pulumi.Input[Union['AutopilotClusterExtendParamArgs', 'AutopilotClusterExtendParamArgsDict']]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 host_network: Optional[pulumi.Input[Union['AutopilotClusterHostNetworkArgs', 'AutopilotClusterHostNetworkArgsDict']]] = None,
                 ipv6_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 kube_proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 lts_reclaim_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_network: Optional[pulumi.Input[Union['AutopilotClusterServiceNetworkArgs', 'AutopilotClusterServiceNetworkArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CCE Autopilot cluster resource within huaweicloud.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        myvpc = huaweicloud.vpc.Vpc("myvpc",
            name="vpc",
            cidr="192.168.0.0/16")
        mysubnet = huaweicloud.vpc.Subnet("mysubnet",
            name="subnet",
            cidr="192.168.0.0/16",
            gateway_ip="192.168.0.1",
            vpc_id=myvpc.id)
        mycluster = huaweicloud.cce.AutopilotCluster("mycluster",
            name="cluster",
            flavor="cce.autopilot.cluster",
            description="created by terraform",
            host_network={
                "vpc": myvpc.id,
                "subnet": mysubnet.id,
            },
            container_network={
                "mode": "eni",
            },
            eni_network={
                "subnets": [{
                    "subnet_id": mysubnet.ipv4_subnet_id,
                }],
            },
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ## Import

        The autopilot cluster can be imported using the cluster ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cce/autopilotCluster:AutopilotCluster  huaweicloud_cce_autopilot_cluster.mycluster <cluster_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include:

        `enable_snat`, `enable_swr_image_access`, `eip_id`, `delete_efs`, `delete_eni`, `delete_net`, `delete_obs`, `delete_sfs30`

        and `lts_reclaim_policy`. It is generally recommended running `pulumi preview` after importing a cluster.

        You can then decide if changes should be applied to the cluster, or the resource definition should be updated to align

        with the cluster. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_cce_autopilot_cluster" "mycluster" {

            ...

          lifecycle {

            ignore_changes = [
            
              enable_snat, delete_efs, delete_obs,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alias: Specifies the alias of the cluster. Enter 4 to 128 characters starting
               with a lowercase letter and not ending with a hyphen (-). Only lowercase letters, digits, and hyphens (-) are allowed.
               If not specified, the alias is the same as the cluster name.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the cluster annotations in the format of key-value pairs.
        :param pulumi.Input[Union['AutopilotClusterAuthenticationArgs', 'AutopilotClusterAuthenticationArgsDict']] authentication: Specifies the configurations of the cluster authentication mode.
               The authentication structure is documented below.
        :param pulumi.Input[_builtins.str] category: Specifies the cluster type. Only **Turbo** is supported.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AutopilotClusterConfigurationsOverrideArgs', 'AutopilotClusterConfigurationsOverrideArgsDict']]]] configurations_overrides: Specifies the this parameter to override
               the default component configurations in the cluster.
               The configurations_override structure is documented below.
        :param pulumi.Input[Union['AutopilotClusterContainerNetworkArgs', 'AutopilotClusterContainerNetworkArgsDict']] container_network: Specifies the container network of the cluster.
               The container_network structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] custom_sans: Specifies the custom SAN field in the API server certificate of the cluster.
        :param pulumi.Input[_builtins.str] delete_efs: Specifies whether to delete the SFS Turbo volume.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped. This is the default option.
        :param pulumi.Input[_builtins.str] delete_eni: Specifies whether to delete the ENI port.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               This is the default option.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped.
        :param pulumi.Input[_builtins.str] delete_net: Specifies whether to delete the cluster service or ingress resources,
               such as a load balancer. The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               This is the default option.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped.
        :param pulumi.Input[_builtins.str] delete_obs: Specifies whether to delete the OBS volume.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped. This is the default option.
        :param pulumi.Input[_builtins.str] delete_sfs30: Specifies whether to delete the SFS 3.0 volume.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped. This is the default option.
        :param pulumi.Input[_builtins.bool] deletion_protection: Specifies whether to enable deletion protection for the cluster.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the cluster.
        :param pulumi.Input[_builtins.str] eip_id: Specifies the EIP ID of the cluster.
        :param pulumi.Input[_builtins.bool] enable_autopilot: Specifies whether the cluster is an Autopilot cluster,
               defaults to **true**.
        :param pulumi.Input[_builtins.bool] enable_snat: Specifies whether SNAT is configured for the cluster.
               After this function is enabled, the cluster can access the Internet through a NAT gateway.
               By default, the existing NAT gateway in the selected VPC is used. Otherwise,
               the system automatically creates a NAT gateway of the default specifications,
               binds an EIP to the NAT gateway, and configures SNAT rules.
        :param pulumi.Input[_builtins.bool] enable_swr_image_access: Specifies whether the cluster is interconnected with SWR.
               To ensure that your cluster nodes can pull images from SWR, the existing SWR and OBS endpoints in the selected
               VPC are used by default. If not, new SWR and OBS endpoints will be automatically created.
        :param pulumi.Input[Union['AutopilotClusterEniNetworkArgs', 'AutopilotClusterEniNetworkArgsDict']] eni_network: Specifies the ENI network of the cluster.
               The eni_network structure is documented below.
        :param pulumi.Input[Union['AutopilotClusterExtendParamArgs', 'AutopilotClusterExtendParamArgsDict']] extend_param: Specifies the extend param of the cluster.
               The extend_param structure is documented below.
        :param pulumi.Input[_builtins.str] flavor: Specifies the cluster flavor. Only **cce.autopilot.cluster** is supported.
        :param pulumi.Input[Union['AutopilotClusterHostNetworkArgs', 'AutopilotClusterHostNetworkArgsDict']] host_network: Specifies the host network of the cluster.
               The host_network structure is documented below.
        :param pulumi.Input[_builtins.bool] ipv6_enable: Specifies whether the cluster uses the IPv6 mode.
        :param pulumi.Input[_builtins.str] kube_proxy_mode: Specifies the kube proxy mode of the cluster.
               The value can be: **iptables**.
        :param pulumi.Input[_builtins.str] lts_reclaim_policy: Specifies whether to delete the LTS resource, such as a log group or
               a log stream. The value can be:
               + **Delete_Log_Group**: The system starts to delete a log group. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **Delete_Master_Log_Stream**: The system starts to delete a master log stream. If the deletion fails,
               no deletion retry is performed, and subsequent processes will proceed. This is the default option.
               
               + **Retain**: The deletion is skipped.
               
               <a name="autopilot_cluster_host_networks"></a>
               The `host_network` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the component configuration item name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCE autopilot cluster resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
        :param pulumi.Input[Union['AutopilotClusterServiceNetworkArgs', 'AutopilotClusterServiceNetworkArgsDict']] service_network: Specifies the service network of the cluster.
               The service_network structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the cluster tags in the format of key-value pairs.
        :param pulumi.Input[_builtins.str] type: Specifies the master node architecture. The value can be:
               + **VirtualMachine**: Indicates the master node is an x86 server.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the cluster.
               If not specified, a cluster of the latest version will be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AutopilotClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CCE Autopilot cluster resource within huaweicloud.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        myvpc = huaweicloud.vpc.Vpc("myvpc",
            name="vpc",
            cidr="192.168.0.0/16")
        mysubnet = huaweicloud.vpc.Subnet("mysubnet",
            name="subnet",
            cidr="192.168.0.0/16",
            gateway_ip="192.168.0.1",
            vpc_id=myvpc.id)
        mycluster = huaweicloud.cce.AutopilotCluster("mycluster",
            name="cluster",
            flavor="cce.autopilot.cluster",
            description="created by terraform",
            host_network={
                "vpc": myvpc.id,
                "subnet": mysubnet.id,
            },
            container_network={
                "mode": "eni",
            },
            eni_network={
                "subnets": [{
                    "subnet_id": mysubnet.ipv4_subnet_id,
                }],
            },
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ## Import

        The autopilot cluster can be imported using the cluster ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cce/autopilotCluster:AutopilotCluster  huaweicloud_cce_autopilot_cluster.mycluster <cluster_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include:

        `enable_snat`, `enable_swr_image_access`, `eip_id`, `delete_efs`, `delete_eni`, `delete_net`, `delete_obs`, `delete_sfs30`

        and `lts_reclaim_policy`. It is generally recommended running `pulumi preview` after importing a cluster.

        You can then decide if changes should be applied to the cluster, or the resource definition should be updated to align

        with the cluster. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_cce_autopilot_cluster" "mycluster" {

            ...

          lifecycle {

            ignore_changes = [
            
              enable_snat, delete_efs, delete_obs,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param AutopilotClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutopilotClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 authentication: Optional[pulumi.Input[Union['AutopilotClusterAuthenticationArgs', 'AutopilotClusterAuthenticationArgsDict']]] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations_overrides: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AutopilotClusterConfigurationsOverrideArgs', 'AutopilotClusterConfigurationsOverrideArgsDict']]]]] = None,
                 container_network: Optional[pulumi.Input[Union['AutopilotClusterContainerNetworkArgs', 'AutopilotClusterContainerNetworkArgsDict']]] = None,
                 custom_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 delete_efs: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_eni: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_net: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_obs: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_sfs30: Optional[pulumi.Input[_builtins.str]] = None,
                 deletion_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_autopilot: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_swr_image_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 eni_network: Optional[pulumi.Input[Union['AutopilotClusterEniNetworkArgs', 'AutopilotClusterEniNetworkArgsDict']]] = None,
                 extend_param: Optional[pulumi.Input[Union['AutopilotClusterExtendParamArgs', 'AutopilotClusterExtendParamArgsDict']]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 host_network: Optional[pulumi.Input[Union['AutopilotClusterHostNetworkArgs', 'AutopilotClusterHostNetworkArgsDict']]] = None,
                 ipv6_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 kube_proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 lts_reclaim_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_network: Optional[pulumi.Input[Union['AutopilotClusterServiceNetworkArgs', 'AutopilotClusterServiceNetworkArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutopilotClusterArgs.__new__(AutopilotClusterArgs)

            __props__.__dict__["alias"] = alias
            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["category"] = category
            __props__.__dict__["configurations_overrides"] = configurations_overrides
            if container_network is None and not opts.urn:
                raise TypeError("Missing required property 'container_network'")
            __props__.__dict__["container_network"] = container_network
            __props__.__dict__["custom_sans"] = custom_sans
            __props__.__dict__["delete_efs"] = delete_efs
            __props__.__dict__["delete_eni"] = delete_eni
            __props__.__dict__["delete_net"] = delete_net
            __props__.__dict__["delete_obs"] = delete_obs
            __props__.__dict__["delete_sfs30"] = delete_sfs30
            __props__.__dict__["deletion_protection"] = deletion_protection
            __props__.__dict__["description"] = description
            __props__.__dict__["eip_id"] = eip_id
            __props__.__dict__["enable_autopilot"] = enable_autopilot
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enable_snat"] = enable_snat
            __props__.__dict__["enable_swr_image_access"] = enable_swr_image_access
            __props__.__dict__["eni_network"] = eni_network
            __props__.__dict__["extend_param"] = extend_param
            if flavor is None and not opts.urn:
                raise TypeError("Missing required property 'flavor'")
            __props__.__dict__["flavor"] = flavor
            if host_network is None and not opts.urn:
                raise TypeError("Missing required property 'host_network'")
            __props__.__dict__["host_network"] = host_network
            __props__.__dict__["ipv6_enable"] = ipv6_enable
            __props__.__dict__["kube_proxy_mode"] = kube_proxy_mode
            __props__.__dict__["lts_reclaim_policy"] = lts_reclaim_policy
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["service_network"] = service_network
            __props__.__dict__["tags"] = tags
            __props__.__dict__["type"] = type
            __props__.__dict__["version"] = version
            __props__.__dict__["az"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["platform_version"] = None
            __props__.__dict__["statuses"] = None
            __props__.__dict__["updated_at"] = None
        super(AutopilotCluster, __self__).__init__(
            'huaweicloud:Cce/autopilotCluster:AutopilotCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias: Optional[pulumi.Input[_builtins.str]] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            authentication: Optional[pulumi.Input[Union['AutopilotClusterAuthenticationArgs', 'AutopilotClusterAuthenticationArgsDict']]] = None,
            az: Optional[pulumi.Input[_builtins.str]] = None,
            category: Optional[pulumi.Input[_builtins.str]] = None,
            configurations_overrides: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AutopilotClusterConfigurationsOverrideArgs', 'AutopilotClusterConfigurationsOverrideArgsDict']]]]] = None,
            container_network: Optional[pulumi.Input[Union['AutopilotClusterContainerNetworkArgs', 'AutopilotClusterContainerNetworkArgsDict']]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            custom_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            delete_efs: Optional[pulumi.Input[_builtins.str]] = None,
            delete_eni: Optional[pulumi.Input[_builtins.str]] = None,
            delete_net: Optional[pulumi.Input[_builtins.str]] = None,
            delete_obs: Optional[pulumi.Input[_builtins.str]] = None,
            delete_sfs30: Optional[pulumi.Input[_builtins.str]] = None,
            deletion_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            eip_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_autopilot: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_swr_image_access: Optional[pulumi.Input[_builtins.bool]] = None,
            eni_network: Optional[pulumi.Input[Union['AutopilotClusterEniNetworkArgs', 'AutopilotClusterEniNetworkArgsDict']]] = None,
            extend_param: Optional[pulumi.Input[Union['AutopilotClusterExtendParamArgs', 'AutopilotClusterExtendParamArgsDict']]] = None,
            flavor: Optional[pulumi.Input[_builtins.str]] = None,
            host_network: Optional[pulumi.Input[Union['AutopilotClusterHostNetworkArgs', 'AutopilotClusterHostNetworkArgsDict']]] = None,
            ipv6_enable: Optional[pulumi.Input[_builtins.bool]] = None,
            kube_proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
            lts_reclaim_policy: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            platform_version: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            service_network: Optional[pulumi.Input[Union['AutopilotClusterServiceNetworkArgs', 'AutopilotClusterServiceNetworkArgsDict']]] = None,
            statuses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AutopilotClusterStatusArgs', 'AutopilotClusterStatusArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'AutopilotCluster':
        """
        Get an existing AutopilotCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alias: Specifies the alias of the cluster. Enter 4 to 128 characters starting
               with a lowercase letter and not ending with a hyphen (-). Only lowercase letters, digits, and hyphens (-) are allowed.
               If not specified, the alias is the same as the cluster name.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the cluster annotations in the format of key-value pairs.
        :param pulumi.Input[Union['AutopilotClusterAuthenticationArgs', 'AutopilotClusterAuthenticationArgsDict']] authentication: Specifies the configurations of the cluster authentication mode.
               The authentication structure is documented below.
        :param pulumi.Input[_builtins.str] az: The AZ of the cluster.
        :param pulumi.Input[_builtins.str] category: Specifies the cluster type. Only **Turbo** is supported.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AutopilotClusterConfigurationsOverrideArgs', 'AutopilotClusterConfigurationsOverrideArgsDict']]]] configurations_overrides: Specifies the this parameter to override
               the default component configurations in the cluster.
               The configurations_override structure is documented below.
        :param pulumi.Input[Union['AutopilotClusterContainerNetworkArgs', 'AutopilotClusterContainerNetworkArgsDict']] container_network: Specifies the container network of the cluster.
               The container_network structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The time when the cluster was created.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] custom_sans: Specifies the custom SAN field in the API server certificate of the cluster.
        :param pulumi.Input[_builtins.str] delete_efs: Specifies whether to delete the SFS Turbo volume.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped. This is the default option.
        :param pulumi.Input[_builtins.str] delete_eni: Specifies whether to delete the ENI port.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               This is the default option.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped.
        :param pulumi.Input[_builtins.str] delete_net: Specifies whether to delete the cluster service or ingress resources,
               such as a load balancer. The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               This is the default option.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped.
        :param pulumi.Input[_builtins.str] delete_obs: Specifies whether to delete the OBS volume.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped. This is the default option.
        :param pulumi.Input[_builtins.str] delete_sfs30: Specifies whether to delete the SFS 3.0 volume.
               The value can be:
               + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
               
               + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **false** or **skip**: The deletion is skipped. This is the default option.
        :param pulumi.Input[_builtins.bool] deletion_protection: Specifies whether to enable deletion protection for the cluster.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the cluster.
        :param pulumi.Input[_builtins.str] eip_id: Specifies the EIP ID of the cluster.
        :param pulumi.Input[_builtins.bool] enable_autopilot: Specifies whether the cluster is an Autopilot cluster,
               defaults to **true**.
        :param pulumi.Input[_builtins.bool] enable_snat: Specifies whether SNAT is configured for the cluster.
               After this function is enabled, the cluster can access the Internet through a NAT gateway.
               By default, the existing NAT gateway in the selected VPC is used. Otherwise,
               the system automatically creates a NAT gateway of the default specifications,
               binds an EIP to the NAT gateway, and configures SNAT rules.
        :param pulumi.Input[_builtins.bool] enable_swr_image_access: Specifies whether the cluster is interconnected with SWR.
               To ensure that your cluster nodes can pull images from SWR, the existing SWR and OBS endpoints in the selected
               VPC are used by default. If not, new SWR and OBS endpoints will be automatically created.
        :param pulumi.Input[Union['AutopilotClusterEniNetworkArgs', 'AutopilotClusterEniNetworkArgsDict']] eni_network: Specifies the ENI network of the cluster.
               The eni_network structure is documented below.
        :param pulumi.Input[Union['AutopilotClusterExtendParamArgs', 'AutopilotClusterExtendParamArgsDict']] extend_param: Specifies the extend param of the cluster.
               The extend_param structure is documented below.
        :param pulumi.Input[_builtins.str] flavor: Specifies the cluster flavor. Only **cce.autopilot.cluster** is supported.
        :param pulumi.Input[Union['AutopilotClusterHostNetworkArgs', 'AutopilotClusterHostNetworkArgsDict']] host_network: Specifies the host network of the cluster.
               The host_network structure is documented below.
        :param pulumi.Input[_builtins.bool] ipv6_enable: Specifies whether the cluster uses the IPv6 mode.
        :param pulumi.Input[_builtins.str] kube_proxy_mode: Specifies the kube proxy mode of the cluster.
               The value can be: **iptables**.
        :param pulumi.Input[_builtins.str] lts_reclaim_policy: Specifies whether to delete the LTS resource, such as a log group or
               a log stream. The value can be:
               + **Delete_Log_Group**: The system starts to delete a log group. If the deletion fails, no deletion retry is performed,
               and subsequent processes will proceed.
               
               + **Delete_Master_Log_Stream**: The system starts to delete a master log stream. If the deletion fails,
               no deletion retry is performed, and subsequent processes will proceed. This is the default option.
               
               + **Retain**: The deletion is skipped.
               
               <a name="autopilot_cluster_host_networks"></a>
               The `host_network` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the component configuration item name.
        :param pulumi.Input[_builtins.str] platform_version: The cluster platform version.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCE autopilot cluster resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
        :param pulumi.Input[Union['AutopilotClusterServiceNetworkArgs', 'AutopilotClusterServiceNetworkArgsDict']] service_network: Specifies the service network of the cluster.
               The service_network structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AutopilotClusterStatusArgs', 'AutopilotClusterStatusArgsDict']]]] statuses: The status of the cluster.
               The status structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the cluster tags in the format of key-value pairs.
        :param pulumi.Input[_builtins.str] type: Specifies the master node architecture. The value can be:
               + **VirtualMachine**: Indicates the master node is an x86 server.
        :param pulumi.Input[_builtins.str] updated_at: The time when the cluster was updated.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the cluster.
               If not specified, a cluster of the latest version will be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AutopilotClusterState.__new__(_AutopilotClusterState)

        __props__.__dict__["alias"] = alias
        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["az"] = az
        __props__.__dict__["category"] = category
        __props__.__dict__["configurations_overrides"] = configurations_overrides
        __props__.__dict__["container_network"] = container_network
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["custom_sans"] = custom_sans
        __props__.__dict__["delete_efs"] = delete_efs
        __props__.__dict__["delete_eni"] = delete_eni
        __props__.__dict__["delete_net"] = delete_net
        __props__.__dict__["delete_obs"] = delete_obs
        __props__.__dict__["delete_sfs30"] = delete_sfs30
        __props__.__dict__["deletion_protection"] = deletion_protection
        __props__.__dict__["description"] = description
        __props__.__dict__["eip_id"] = eip_id
        __props__.__dict__["enable_autopilot"] = enable_autopilot
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enable_snat"] = enable_snat
        __props__.__dict__["enable_swr_image_access"] = enable_swr_image_access
        __props__.__dict__["eni_network"] = eni_network
        __props__.__dict__["extend_param"] = extend_param
        __props__.__dict__["flavor"] = flavor
        __props__.__dict__["host_network"] = host_network
        __props__.__dict__["ipv6_enable"] = ipv6_enable
        __props__.__dict__["kube_proxy_mode"] = kube_proxy_mode
        __props__.__dict__["lts_reclaim_policy"] = lts_reclaim_policy
        __props__.__dict__["name"] = name
        __props__.__dict__["platform_version"] = platform_version
        __props__.__dict__["region"] = region
        __props__.__dict__["service_network"] = service_network
        __props__.__dict__["statuses"] = statuses
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["version"] = version
        return AutopilotCluster(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alias of the cluster. Enter 4 to 128 characters starting
        with a lowercase letter and not ending with a hyphen (-). Only lowercase letters, digits, and hyphens (-) are allowed.
        If not specified, the alias is the same as the cluster name.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the cluster annotations in the format of key-value pairs.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter
    def authentication(self) -> pulumi.Output['outputs.AutopilotClusterAuthentication']:
        """
        Specifies the configurations of the cluster authentication mode.
        The authentication structure is documented below.
        """
        return pulumi.get(self, "authentication")

    @_builtins.property
    @pulumi.getter
    def az(self) -> pulumi.Output[_builtins.str]:
        """
        The AZ of the cluster.
        """
        return pulumi.get(self, "az")

    @_builtins.property
    @pulumi.getter
    def category(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster type. Only **Turbo** is supported.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="configurationsOverrides")
    def configurations_overrides(self) -> pulumi.Output[Sequence['outputs.AutopilotClusterConfigurationsOverride']]:
        """
        Specifies the this parameter to override
        the default component configurations in the cluster.
        The configurations_override structure is documented below.
        """
        return pulumi.get(self, "configurations_overrides")

    @_builtins.property
    @pulumi.getter(name="containerNetwork")
    def container_network(self) -> pulumi.Output['outputs.AutopilotClusterContainerNetwork']:
        """
        Specifies the container network of the cluster.
        The container_network structure is documented below.
        """
        return pulumi.get(self, "container_network")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the cluster was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="customSans")
    def custom_sans(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the custom SAN field in the API server certificate of the cluster.
        """
        return pulumi.get(self, "custom_sans")

    @_builtins.property
    @pulumi.getter(name="deleteEfs")
    def delete_efs(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether to delete the SFS Turbo volume.
        The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped. This is the default option.
        """
        return pulumi.get(self, "delete_efs")

    @_builtins.property
    @pulumi.getter(name="deleteEni")
    def delete_eni(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether to delete the ENI port.
        The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
        This is the default option.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped.
        """
        return pulumi.get(self, "delete_eni")

    @_builtins.property
    @pulumi.getter(name="deleteNet")
    def delete_net(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether to delete the cluster service or ingress resources,
        such as a load balancer. The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.
        This is the default option.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped.
        """
        return pulumi.get(self, "delete_net")

    @_builtins.property
    @pulumi.getter(name="deleteObs")
    def delete_obs(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether to delete the OBS volume.
        The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped. This is the default option.
        """
        return pulumi.get(self, "delete_obs")

    @_builtins.property
    @pulumi.getter(name="deleteSfs30")
    def delete_sfs30(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether to delete the SFS 3.0 volume.
        The value can be:
        + **true** or **block**: The system starts to delete the object. If the deletion fails, subsequent processes are blocked.

        + **try**: The system starts to delete the object. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **false** or **skip**: The deletion is skipped. This is the default option.
        """
        return pulumi.get(self, "delete_sfs30")

    @_builtins.property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable deletion protection for the cluster.
        """
        return pulumi.get(self, "deletion_protection")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the cluster.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the EIP ID of the cluster.
        """
        return pulumi.get(self, "eip_id")

    @_builtins.property
    @pulumi.getter(name="enableAutopilot")
    def enable_autopilot(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the cluster is an Autopilot cluster,
        defaults to **true**.
        """
        return pulumi.get(self, "enable_autopilot")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enableSnat")
    def enable_snat(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether SNAT is configured for the cluster.
        After this function is enabled, the cluster can access the Internet through a NAT gateway.
        By default, the existing NAT gateway in the selected VPC is used. Otherwise,
        the system automatically creates a NAT gateway of the default specifications,
        binds an EIP to the NAT gateway, and configures SNAT rules.
        """
        return pulumi.get(self, "enable_snat")

    @_builtins.property
    @pulumi.getter(name="enableSwrImageAccess")
    def enable_swr_image_access(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the cluster is interconnected with SWR.
        To ensure that your cluster nodes can pull images from SWR, the existing SWR and OBS endpoints in the selected
        VPC are used by default. If not, new SWR and OBS endpoints will be automatically created.
        """
        return pulumi.get(self, "enable_swr_image_access")

    @_builtins.property
    @pulumi.getter(name="eniNetwork")
    def eni_network(self) -> pulumi.Output['outputs.AutopilotClusterEniNetwork']:
        """
        Specifies the ENI network of the cluster.
        The eni_network structure is documented below.
        """
        return pulumi.get(self, "eni_network")

    @_builtins.property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> pulumi.Output['outputs.AutopilotClusterExtendParam']:
        """
        Specifies the extend param of the cluster.
        The extend_param structure is documented below.
        """
        return pulumi.get(self, "extend_param")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster flavor. Only **cce.autopilot.cluster** is supported.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> pulumi.Output['outputs.AutopilotClusterHostNetwork']:
        """
        Specifies the host network of the cluster.
        The host_network structure is documented below.
        """
        return pulumi.get(self, "host_network")

    @_builtins.property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the cluster uses the IPv6 mode.
        """
        return pulumi.get(self, "ipv6_enable")

    @_builtins.property
    @pulumi.getter(name="kubeProxyMode")
    def kube_proxy_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the kube proxy mode of the cluster.
        The value can be: **iptables**.
        """
        return pulumi.get(self, "kube_proxy_mode")

    @_builtins.property
    @pulumi.getter(name="ltsReclaimPolicy")
    def lts_reclaim_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether to delete the LTS resource, such as a log group or
        a log stream. The value can be:
        + **Delete_Log_Group**: The system starts to delete a log group. If the deletion fails, no deletion retry is performed,
        and subsequent processes will proceed.

        + **Delete_Master_Log_Stream**: The system starts to delete a master log stream. If the deletion fails,
        no deletion retry is performed, and subsequent processes will proceed. This is the default option.

        + **Retain**: The deletion is skipped.

        <a name="autopilot_cluster_host_networks"></a>
        The `host_network` block supports:
        """
        return pulumi.get(self, "lts_reclaim_policy")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the component configuration item name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> pulumi.Output[_builtins.str]:
        """
        The cluster platform version.
        """
        return pulumi.get(self, "platform_version")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the CCE autopilot cluster resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> pulumi.Output['outputs.AutopilotClusterServiceNetwork']:
        """
        Specifies the service network of the cluster.
        The service_network structure is documented below.
        """
        return pulumi.get(self, "service_network")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> pulumi.Output[Sequence['outputs.AutopilotClusterStatus']]:
        """
        The status of the cluster.
        The status structure is documented below.
        """
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the cluster tags in the format of key-value pairs.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the master node architecture. The value can be:
        + **VirtualMachine**: Indicates the master node is an x86 server.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the cluster was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the version of the cluster.
        If not specified, a cluster of the latest version will be created.
        """
        return pulumi.get(self, "version")

