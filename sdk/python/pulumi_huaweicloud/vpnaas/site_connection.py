# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SiteConnectionArgs', 'SiteConnection']

@pulumi.input_type
class SiteConnectionArgs:
    def __init__(__self__, *,
                 ikepolicy_id: pulumi.Input[_builtins.str],
                 ipsecpolicy_id: pulumi.Input[_builtins.str],
                 peer_address: pulumi.Input[_builtins.str],
                 peer_id: pulumi.Input[_builtins.str],
                 psk: pulumi.Input[_builtins.str],
                 vpnservice_id: pulumi.Input[_builtins.str],
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dpds: Optional[pulumi.Input[Sequence[pulumi.Input['SiteConnectionDpdArgs']]]] = None,
                 initiator: Optional[pulumi.Input[_builtins.str]] = None,
                 local_ep_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 peer_ep_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a SiteConnection resource.
        """
        pulumi.set(__self__, "ikepolicy_id", ikepolicy_id)
        pulumi.set(__self__, "ipsecpolicy_id", ipsecpolicy_id)
        pulumi.set(__self__, "peer_address", peer_address)
        pulumi.set(__self__, "peer_id", peer_id)
        pulumi.set(__self__, "psk", psk)
        pulumi.set(__self__, "vpnservice_id", vpnservice_id)
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dpds is not None:
            pulumi.set(__self__, "dpds", dpds)
        if initiator is not None:
            pulumi.set(__self__, "initiator", initiator)
        if local_ep_group_id is not None:
            pulumi.set(__self__, "local_ep_group_id", local_ep_group_id)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer_cidrs is not None:
            pulumi.set(__self__, "peer_cidrs", peer_cidrs)
        if peer_ep_group_id is not None:
            pulumi.set(__self__, "peer_ep_group_id", peer_ep_group_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @_builtins.property
    @pulumi.getter(name="ikepolicyId")
    def ikepolicy_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "ikepolicy_id")

    @ikepolicy_id.setter
    def ikepolicy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ikepolicy_id", value)

    @_builtins.property
    @pulumi.getter(name="ipsecpolicyId")
    def ipsecpolicy_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "ipsecpolicy_id")

    @ipsecpolicy_id.setter
    def ipsecpolicy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ipsecpolicy_id", value)

    @_builtins.property
    @pulumi.getter(name="peerAddress")
    def peer_address(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "peer_address")

    @peer_address.setter
    def peer_address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "peer_address", value)

    @_builtins.property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "peer_id")

    @peer_id.setter
    def peer_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "peer_id", value)

    @_builtins.property
    @pulumi.getter
    def psk(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "psk")

    @psk.setter
    def psk(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "psk", value)

    @_builtins.property
    @pulumi.getter(name="vpnserviceId")
    def vpnservice_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "vpnservice_id")

    @vpnservice_id.setter
    def vpnservice_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpnservice_id", value)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "admin_state_up", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def dpds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SiteConnectionDpdArgs']]]]:
        return pulumi.get(self, "dpds")

    @dpds.setter
    def dpds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SiteConnectionDpdArgs']]]]):
        pulumi.set(self, "dpds", value)

    @_builtins.property
    @pulumi.getter
    def initiator(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "initiator")

    @initiator.setter
    def initiator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "initiator", value)

    @_builtins.property
    @pulumi.getter(name="localEpGroupId")
    def local_ep_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "local_ep_group_id")

    @local_ep_group_id.setter
    def local_ep_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_ep_group_id", value)

    @_builtins.property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "local_id")

    @local_id.setter
    def local_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_id", value)

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mtu", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="peerCidrs")
    def peer_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "peer_cidrs")

    @peer_cidrs.setter
    def peer_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "peer_cidrs", value)

    @_builtins.property
    @pulumi.getter(name="peerEpGroupId")
    def peer_ep_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "peer_ep_group_id")

    @peer_ep_group_id.setter
    def peer_ep_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_ep_group_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.input_type
class _SiteConnectionState:
    def __init__(__self__, *,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dpds: Optional[pulumi.Input[Sequence[pulumi.Input['SiteConnectionDpdArgs']]]] = None,
                 ikepolicy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 initiator: Optional[pulumi.Input[_builtins.str]] = None,
                 ipsecpolicy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_ep_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_address: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 peer_ep_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 psk: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpnservice_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SiteConnection resources.
        """
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dpds is not None:
            pulumi.set(__self__, "dpds", dpds)
        if ikepolicy_id is not None:
            pulumi.set(__self__, "ikepolicy_id", ikepolicy_id)
        if initiator is not None:
            pulumi.set(__self__, "initiator", initiator)
        if ipsecpolicy_id is not None:
            pulumi.set(__self__, "ipsecpolicy_id", ipsecpolicy_id)
        if local_ep_group_id is not None:
            pulumi.set(__self__, "local_ep_group_id", local_ep_group_id)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer_address is not None:
            pulumi.set(__self__, "peer_address", peer_address)
        if peer_cidrs is not None:
            pulumi.set(__self__, "peer_cidrs", peer_cidrs)
        if peer_ep_group_id is not None:
            pulumi.set(__self__, "peer_ep_group_id", peer_ep_group_id)
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if psk is not None:
            pulumi.set(__self__, "psk", psk)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)
        if vpnservice_id is not None:
            pulumi.set(__self__, "vpnservice_id", vpnservice_id)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "admin_state_up", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def dpds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SiteConnectionDpdArgs']]]]:
        return pulumi.get(self, "dpds")

    @dpds.setter
    def dpds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SiteConnectionDpdArgs']]]]):
        pulumi.set(self, "dpds", value)

    @_builtins.property
    @pulumi.getter(name="ikepolicyId")
    def ikepolicy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ikepolicy_id")

    @ikepolicy_id.setter
    def ikepolicy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ikepolicy_id", value)

    @_builtins.property
    @pulumi.getter
    def initiator(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "initiator")

    @initiator.setter
    def initiator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "initiator", value)

    @_builtins.property
    @pulumi.getter(name="ipsecpolicyId")
    def ipsecpolicy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipsecpolicy_id")

    @ipsecpolicy_id.setter
    def ipsecpolicy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipsecpolicy_id", value)

    @_builtins.property
    @pulumi.getter(name="localEpGroupId")
    def local_ep_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "local_ep_group_id")

    @local_ep_group_id.setter
    def local_ep_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_ep_group_id", value)

    @_builtins.property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "local_id")

    @local_id.setter
    def local_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_id", value)

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mtu", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="peerAddress")
    def peer_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "peer_address")

    @peer_address.setter
    def peer_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_address", value)

    @_builtins.property
    @pulumi.getter(name="peerCidrs")
    def peer_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "peer_cidrs")

    @peer_cidrs.setter
    def peer_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "peer_cidrs", value)

    @_builtins.property
    @pulumi.getter(name="peerEpGroupId")
    def peer_ep_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "peer_ep_group_id")

    @peer_ep_group_id.setter
    def peer_ep_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_ep_group_id", value)

    @_builtins.property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "peer_id")

    @peer_id.setter
    def peer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_id", value)

    @_builtins.property
    @pulumi.getter
    def psk(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "psk")

    @psk.setter
    def psk(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "psk", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)

    @_builtins.property
    @pulumi.getter(name="vpnserviceId")
    def vpnservice_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vpnservice_id")

    @vpnservice_id.setter
    def vpnservice_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpnservice_id", value)


@pulumi.type_token("huaweicloud:vpnaas/siteConnection:SiteConnection")
class SiteConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dpds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SiteConnectionDpdArgs', 'SiteConnectionDpdArgsDict']]]]] = None,
                 ikepolicy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 initiator: Optional[pulumi.Input[_builtins.str]] = None,
                 ipsecpolicy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_ep_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_address: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 peer_ep_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 psk: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpnservice_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SiteConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SiteConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SiteConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SiteConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SiteConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dpds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SiteConnectionDpdArgs', 'SiteConnectionDpdArgsDict']]]]] = None,
                 ikepolicy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 initiator: Optional[pulumi.Input[_builtins.str]] = None,
                 ipsecpolicy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_ep_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_address: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 peer_ep_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 psk: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpnservice_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SiteConnectionArgs.__new__(SiteConnectionArgs)

            __props__.__dict__["admin_state_up"] = admin_state_up
            __props__.__dict__["description"] = description
            __props__.__dict__["dpds"] = dpds
            if ikepolicy_id is None and not opts.urn:
                raise TypeError("Missing required property 'ikepolicy_id'")
            __props__.__dict__["ikepolicy_id"] = ikepolicy_id
            __props__.__dict__["initiator"] = initiator
            if ipsecpolicy_id is None and not opts.urn:
                raise TypeError("Missing required property 'ipsecpolicy_id'")
            __props__.__dict__["ipsecpolicy_id"] = ipsecpolicy_id
            __props__.__dict__["local_ep_group_id"] = local_ep_group_id
            __props__.__dict__["local_id"] = local_id
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["name"] = name
            if peer_address is None and not opts.urn:
                raise TypeError("Missing required property 'peer_address'")
            __props__.__dict__["peer_address"] = peer_address
            __props__.__dict__["peer_cidrs"] = peer_cidrs
            __props__.__dict__["peer_ep_group_id"] = peer_ep_group_id
            if peer_id is None and not opts.urn:
                raise TypeError("Missing required property 'peer_id'")
            __props__.__dict__["peer_id"] = peer_id
            if psk is None and not opts.urn:
                raise TypeError("Missing required property 'psk'")
            __props__.__dict__["psk"] = psk
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["value_specs"] = value_specs
            if vpnservice_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpnservice_id'")
            __props__.__dict__["vpnservice_id"] = vpnservice_id
        super(SiteConnection, __self__).__init__(
            'huaweicloud:vpnaas/siteConnection:SiteConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dpds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SiteConnectionDpdArgs', 'SiteConnectionDpdArgsDict']]]]] = None,
            ikepolicy_id: Optional[pulumi.Input[_builtins.str]] = None,
            initiator: Optional[pulumi.Input[_builtins.str]] = None,
            ipsecpolicy_id: Optional[pulumi.Input[_builtins.str]] = None,
            local_ep_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            local_id: Optional[pulumi.Input[_builtins.str]] = None,
            mtu: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            peer_address: Optional[pulumi.Input[_builtins.str]] = None,
            peer_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            peer_ep_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            peer_id: Optional[pulumi.Input[_builtins.str]] = None,
            psk: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            vpnservice_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SiteConnection':
        """
        Get an existing SiteConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SiteConnectionState.__new__(_SiteConnectionState)

        __props__.__dict__["admin_state_up"] = admin_state_up
        __props__.__dict__["description"] = description
        __props__.__dict__["dpds"] = dpds
        __props__.__dict__["ikepolicy_id"] = ikepolicy_id
        __props__.__dict__["initiator"] = initiator
        __props__.__dict__["ipsecpolicy_id"] = ipsecpolicy_id
        __props__.__dict__["local_ep_group_id"] = local_ep_group_id
        __props__.__dict__["local_id"] = local_id
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["name"] = name
        __props__.__dict__["peer_address"] = peer_address
        __props__.__dict__["peer_cidrs"] = peer_cidrs
        __props__.__dict__["peer_ep_group_id"] = peer_ep_group_id
        __props__.__dict__["peer_id"] = peer_id
        __props__.__dict__["psk"] = psk
        __props__.__dict__["region"] = region
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["value_specs"] = value_specs
        __props__.__dict__["vpnservice_id"] = vpnservice_id
        return SiteConnection(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "admin_state_up")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def dpds(self) -> pulumi.Output[Sequence['outputs.SiteConnectionDpd']]:
        return pulumi.get(self, "dpds")

    @_builtins.property
    @pulumi.getter(name="ikepolicyId")
    def ikepolicy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ikepolicy_id")

    @_builtins.property
    @pulumi.getter
    def initiator(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "initiator")

    @_builtins.property
    @pulumi.getter(name="ipsecpolicyId")
    def ipsecpolicy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ipsecpolicy_id")

    @_builtins.property
    @pulumi.getter(name="localEpGroupId")
    def local_ep_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "local_ep_group_id")

    @_builtins.property
    @pulumi.getter(name="localId")
    def local_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "local_id")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="peerAddress")
    def peer_address(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "peer_address")

    @_builtins.property
    @pulumi.getter(name="peerCidrs")
    def peer_cidrs(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "peer_cidrs")

    @_builtins.property
    @pulumi.getter(name="peerEpGroupId")
    def peer_ep_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "peer_ep_group_id")

    @_builtins.property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "peer_id")

    @_builtins.property
    @pulumi.getter
    def psk(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "psk")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "value_specs")

    @_builtins.property
    @pulumi.getter(name="vpnserviceId")
    def vpnservice_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "vpnservice_id")

