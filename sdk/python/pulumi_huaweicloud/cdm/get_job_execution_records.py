# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetJobExecutionRecordsResult',
    'AwaitableGetJobExecutionRecordsResult',
    'get_job_execution_records',
    'get_job_execution_records_output',
]

@pulumi.output_type
class GetJobExecutionRecordsResult:
    """
    A collection of values returned by getJobExecutionRecords.
    """
    def __init__(__self__, cluster_id=None, id=None, job_name=None, records=None, region=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_name and not isinstance(job_name, str):
            raise TypeError("Expected argument 'job_name' to be a str")
        pulumi.set(__self__, "job_name", job_name)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> _builtins.str:
        return pulumi.get(self, "job_name")

    @_builtins.property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetJobExecutionRecordsRecordResult']:
        """
        Indicates the records.
        The records structure is documented below.
        """
        return pulumi.get(self, "records")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetJobExecutionRecordsResult(GetJobExecutionRecordsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetJobExecutionRecordsResult(
            cluster_id=self.cluster_id,
            id=self.id,
            job_name=self.job_name,
            records=self.records,
            region=self.region)


def get_job_execution_records(cluster_id: Optional[_builtins.str] = None,
                              job_name: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetJobExecutionRecordsResult:
    """
    Use this data source to a list of CDM job execution records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    job_name = config.require_object("jobName")
    test = huaweicloud.Cdm.get_job_execution_records(cluster_id=cluster_id,
        job_name=job_name)
    ```


    :param _builtins.str cluster_id: Specifies the cluster ID.
    :param _builtins.str job_name: Specifies the job name.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['jobName'] = job_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cdm/getJobExecutionRecords:getJobExecutionRecords', __args__, opts=opts, typ=GetJobExecutionRecordsResult).value

    return AwaitableGetJobExecutionRecordsResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        job_name=pulumi.get(__ret__, 'job_name'),
        records=pulumi.get(__ret__, 'records'),
        region=pulumi.get(__ret__, 'region'))
def get_job_execution_records_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     job_name: Optional[pulumi.Input[_builtins.str]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetJobExecutionRecordsResult]:
    """
    Use this data source to a list of CDM job execution records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    job_name = config.require_object("jobName")
    test = huaweicloud.Cdm.get_job_execution_records(cluster_id=cluster_id,
        job_name=job_name)
    ```


    :param _builtins.str cluster_id: Specifies the cluster ID.
    :param _builtins.str job_name: Specifies the job name.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['jobName'] = job_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cdm/getJobExecutionRecords:getJobExecutionRecords', __args__, opts=opts, typ=GetJobExecutionRecordsResult)
    return __ret__.apply(lambda __response__: GetJobExecutionRecordsResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        job_name=pulumi.get(__response__, 'job_name'),
        records=pulumi.get(__response__, 'records'),
        region=pulumi.get(__response__, 'region')))
