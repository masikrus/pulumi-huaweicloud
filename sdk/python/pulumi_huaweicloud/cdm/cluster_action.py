# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterActionArgs', 'ClusterAction']

@pulumi.input_type
class ClusterActionArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 restart: Optional[pulumi.Input['ClusterActionRestartArgs']] = None):
        """
        The set of arguments for constructing a ClusterAction resource.
        :param pulumi.Input[_builtins.str] cluster_id: ID of CDM cluster.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Action type.  
               Value options are as follows:
               + **start**: start the cluster.
               + **restart**: restart the service process or VMs of cluster.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input['ClusterActionRestartArgs'] restart: The configuration of the restart action.  
               This field is required when the type is **restart**.
               
               Changing this parameter will create a new resource.
               The restart structure is documented below.
               
               <a name="CdmClusterAction_Restart"></a>
               The `restart` block supports:
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "type", type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if restart is not None:
            pulumi.set(__self__, "restart", restart)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of CDM cluster.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Action type.  
        Value options are as follows:
        + **start**: start the cluster.
        + **restart**: restart the service process or VMs of cluster.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def restart(self) -> Optional[pulumi.Input['ClusterActionRestartArgs']]:
        """
        The configuration of the restart action.  
        This field is required when the type is **restart**.

        Changing this parameter will create a new resource.
        The restart structure is documented below.

        <a name="CdmClusterAction_Restart"></a>
        The `restart` block supports:
        """
        return pulumi.get(self, "restart")

    @restart.setter
    def restart(self, value: Optional[pulumi.Input['ClusterActionRestartArgs']]):
        pulumi.set(self, "restart", value)


@pulumi.input_type
class _ClusterActionState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 restart: Optional[pulumi.Input['ClusterActionRestartArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ClusterAction resources.
        :param pulumi.Input[_builtins.str] cluster_id: ID of CDM cluster.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input['ClusterActionRestartArgs'] restart: The configuration of the restart action.  
               This field is required when the type is **restart**.
               
               Changing this parameter will create a new resource.
               The restart structure is documented below.
               
               <a name="CdmClusterAction_Restart"></a>
               The `restart` block supports:
        :param pulumi.Input[_builtins.str] type: Action type.  
               Value options are as follows:
               + **start**: start the cluster.
               + **restart**: restart the service process or VMs of cluster.
               
               Changing this parameter will create a new resource.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if restart is not None:
            pulumi.set(__self__, "restart", restart)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of CDM cluster.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def restart(self) -> Optional[pulumi.Input['ClusterActionRestartArgs']]:
        """
        The configuration of the restart action.  
        This field is required when the type is **restart**.

        Changing this parameter will create a new resource.
        The restart structure is documented below.

        <a name="CdmClusterAction_Restart"></a>
        The `restart` block supports:
        """
        return pulumi.get(self, "restart")

    @restart.setter
    def restart(self, value: Optional[pulumi.Input['ClusterActionRestartArgs']]):
        pulumi.set(self, "restart", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Action type.  
        Value options are as follows:
        + **start**: start the cluster.
        + **restart**: restart the service process or VMs of cluster.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:Cdm/clusterAction:ClusterAction")
class ClusterAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 restart: Optional[pulumi.Input[Union['ClusterActionRestartArgs', 'ClusterActionRestartArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CDM cluster action resource within HuaweiCloud.

        ## Example Usage

        ### Restart service process immediately

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cdm_cluster_id = config.require_object("cdmClusterId")
        restart = huaweicloud.cdm.ClusterAction("restart",
            cluster_id=cdm_cluster_id,
            type="restart",
            restart={
                "level": "SERVICE",
                "mode": "IMMEDIATELY",
            })
        ```

        ### Restart vm

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cdm_cluster_id = config.require_object("cdmClusterId")
        restart = huaweicloud.cdm.ClusterAction("restart",
            cluster_id=cdm_cluster_id,
            type="restart",
            restart={
                "level": "VM",
                "mode": "FORCIBLY",
                "delay_time": 0,
            })
        ```

        ### Start a cluster

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cdm_cluster_id = config.require_object("cdmClusterId")
        start = huaweicloud.cdm.ClusterAction("start",
            cluster_id=cdm_cluster_id,
            type="start")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: ID of CDM cluster.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['ClusterActionRestartArgs', 'ClusterActionRestartArgsDict']] restart: The configuration of the restart action.  
               This field is required when the type is **restart**.
               
               Changing this parameter will create a new resource.
               The restart structure is documented below.
               
               <a name="CdmClusterAction_Restart"></a>
               The `restart` block supports:
        :param pulumi.Input[_builtins.str] type: Action type.  
               Value options are as follows:
               + **start**: start the cluster.
               + **restart**: restart the service process or VMs of cluster.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CDM cluster action resource within HuaweiCloud.

        ## Example Usage

        ### Restart service process immediately

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cdm_cluster_id = config.require_object("cdmClusterId")
        restart = huaweicloud.cdm.ClusterAction("restart",
            cluster_id=cdm_cluster_id,
            type="restart",
            restart={
                "level": "SERVICE",
                "mode": "IMMEDIATELY",
            })
        ```

        ### Restart vm

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cdm_cluster_id = config.require_object("cdmClusterId")
        restart = huaweicloud.cdm.ClusterAction("restart",
            cluster_id=cdm_cluster_id,
            type="restart",
            restart={
                "level": "VM",
                "mode": "FORCIBLY",
                "delay_time": 0,
            })
        ```

        ### Start a cluster

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cdm_cluster_id = config.require_object("cdmClusterId")
        start = huaweicloud.cdm.ClusterAction("start",
            cluster_id=cdm_cluster_id,
            type="start")
        ```

        :param str resource_name: The name of the resource.
        :param ClusterActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 restart: Optional[pulumi.Input[Union['ClusterActionRestartArgs', 'ClusterActionRestartArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterActionArgs.__new__(ClusterActionArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["region"] = region
            __props__.__dict__["restart"] = restart
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(ClusterAction, __self__).__init__(
            'huaweicloud:Cdm/clusterAction:ClusterAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            restart: Optional[pulumi.Input[Union['ClusterActionRestartArgs', 'ClusterActionRestartArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'ClusterAction':
        """
        Get an existing ClusterAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: ID of CDM cluster.  
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['ClusterActionRestartArgs', 'ClusterActionRestartArgsDict']] restart: The configuration of the restart action.  
               This field is required when the type is **restart**.
               
               Changing this parameter will create a new resource.
               The restart structure is documented below.
               
               <a name="CdmClusterAction_Restart"></a>
               The `restart` block supports:
        :param pulumi.Input[_builtins.str] type: Action type.  
               Value options are as follows:
               + **start**: start the cluster.
               + **restart**: restart the service process or VMs of cluster.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterActionState.__new__(_ClusterActionState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["region"] = region
        __props__.__dict__["restart"] = restart
        __props__.__dict__["type"] = type
        return ClusterAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of CDM cluster.  

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def restart(self) -> pulumi.Output[Optional['outputs.ClusterActionRestart']]:
        """
        The configuration of the restart action.  
        This field is required when the type is **restart**.

        Changing this parameter will create a new resource.
        The restart structure is documented below.

        <a name="CdmClusterAction_Restart"></a>
        The `restart` block supports:
        """
        return pulumi.get(self, "restart")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Action type.  
        Value options are as follows:
        + **start**: start the cluster.
        + **restart**: restart the service process or VMs of cluster.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

