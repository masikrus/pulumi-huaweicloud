# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetProtectionGroupsResult',
    'AwaitableGetProtectionGroupsResult',
    'get_protection_groups',
    'get_protection_groups_output',
]

@pulumi.output_type
class GetProtectionGroupsResult:
    """
    A collection of values returned by getProtectionGroups.
    """
    def __init__(__self__, availability_zone=None, id=None, name=None, query_type=None, region=None, server_groups=None, status=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if query_type and not isinstance(query_type, str):
            raise TypeError("Expected argument 'query_type' to be a str")
        pulumi.set(__self__, "query_type", query_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_groups and not isinstance(server_groups, list):
            raise TypeError("Expected argument 'server_groups' to be a list")
        pulumi.set(__self__, "server_groups", server_groups)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of a protection group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="queryType")
    def query_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "query_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverGroups")
    def server_groups(self) -> Sequence['outputs.GetProtectionGroupsServerGroupResult']:
        """
        The information about protection groups.
        """
        return pulumi.get(self, "server_groups")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of a protection group.
        For details, see [Protection Group Status](https://support.huaweicloud.com/intl/en-us/api-sdrs/en-us_topic_0126152930.html)
        """
        return pulumi.get(self, "status")


class AwaitableGetProtectionGroupsResult(GetProtectionGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProtectionGroupsResult(
            availability_zone=self.availability_zone,
            id=self.id,
            name=self.name,
            query_type=self.query_type,
            region=self.region,
            server_groups=self.server_groups,
            status=self.status)


def get_protection_groups(availability_zone: Optional[_builtins.str] = None,
                          name: Optional[_builtins.str] = None,
                          query_type: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          status: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProtectionGroupsResult:
    """
    Use this data source to query SDRS protection groups within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.sdrs.get_protection_groups()
    ```


    :param _builtins.str availability_zone: Specifies the current production site AZ of a protection group.
    :param _builtins.str name: Specifies the name of a protection group. Fuzzy search is supported.
    :param _builtins.str query_type: Specifies the query type. Valid values are:
           + **status_abnormal**: Indicates to query protection groups in the abnormal status.
           + **stop_protected**: Indicates to query protection groups for which the protection is disabled.
           + **period_no_dr_drill**: Indicates to query the protection groups for which the no DR drills have been performed in a
           specified duration. The default duration is `3` months.
           
           This parameter is invalid when the value is set to **general** or left empty.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the protection group status.
           For details, see [Protection group status](https://support.huaweicloud.com/intl/en-us/api-sdrs/en-us_topic_0126152930.html).
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['name'] = name
    __args__['queryType'] = query_type
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:sdrs/getProtectionGroups:getProtectionGroups', __args__, opts=opts, typ=GetProtectionGroupsResult).value

    return AwaitableGetProtectionGroupsResult(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        query_type=pulumi.get(__ret__, 'query_type'),
        region=pulumi.get(__ret__, 'region'),
        server_groups=pulumi.get(__ret__, 'server_groups'),
        status=pulumi.get(__ret__, 'status'))
def get_protection_groups_output(availability_zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 query_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProtectionGroupsResult]:
    """
    Use this data source to query SDRS protection groups within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.sdrs.get_protection_groups()
    ```


    :param _builtins.str availability_zone: Specifies the current production site AZ of a protection group.
    :param _builtins.str name: Specifies the name of a protection group. Fuzzy search is supported.
    :param _builtins.str query_type: Specifies the query type. Valid values are:
           + **status_abnormal**: Indicates to query protection groups in the abnormal status.
           + **stop_protected**: Indicates to query protection groups for which the protection is disabled.
           + **period_no_dr_drill**: Indicates to query the protection groups for which the no DR drills have been performed in a
           specified duration. The default duration is `3` months.
           
           This parameter is invalid when the value is set to **general** or left empty.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the protection group status.
           For details, see [Protection group status](https://support.huaweicloud.com/intl/en-us/api-sdrs/en-us_topic_0126152930.html).
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['name'] = name
    __args__['queryType'] = query_type
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:sdrs/getProtectionGroups:getProtectionGroups', __args__, opts=opts, typ=GetProtectionGroupsResult)
    return __ret__.apply(lambda __response__: GetProtectionGroupsResult(
        availability_zone=pulumi.get(__response__, 'availability_zone'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        query_type=pulumi.get(__response__, 'query_type'),
        region=pulumi.get(__response__, 'region'),
        server_groups=pulumi.get(__response__, 'server_groups'),
        status=pulumi.get(__response__, 'status')))
