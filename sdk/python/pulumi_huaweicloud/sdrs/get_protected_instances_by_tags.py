# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetProtectedInstancesByTagsResult',
    'AwaitableGetProtectedInstancesByTagsResult',
    'get_protected_instances_by_tags',
    'get_protected_instances_by_tags_output',
]

@pulumi.output_type
class GetProtectedInstancesByTagsResult:
    """
    A collection of values returned by getProtectedInstancesByTags.
    """
    def __init__(__self__, action=None, id=None, matches=None, not_tags=None, not_tags_anies=None, region=None, resources=None, tags=None, tags_anies=None, total_count=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if matches and not isinstance(matches, list):
            raise TypeError("Expected argument 'matches' to be a list")
        pulumi.set(__self__, "matches", matches)
        if not_tags and not isinstance(not_tags, list):
            raise TypeError("Expected argument 'not_tags' to be a list")
        pulumi.set(__self__, "not_tags", not_tags)
        if not_tags_anies and not isinstance(not_tags_anies, list):
            raise TypeError("Expected argument 'not_tags_anies' to be a list")
        pulumi.set(__self__, "not_tags_anies", not_tags_anies)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tags_anies and not isinstance(tags_anies, list):
            raise TypeError("Expected argument 'tags_anies' to be a list")
        pulumi.set(__self__, "tags_anies", tags_anies)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetProtectedInstancesByTagsMatchResult']]:
        return pulumi.get(self, "matches")

    @_builtins.property
    @pulumi.getter(name="notTags")
    def not_tags(self) -> Optional[Sequence['outputs.GetProtectedInstancesByTagsNotTagResult']]:
        return pulumi.get(self, "not_tags")

    @_builtins.property
    @pulumi.getter(name="notTagsAnies")
    def not_tags_anies(self) -> Optional[Sequence['outputs.GetProtectedInstancesByTagsNotTagsAnyResult']]:
        return pulumi.get(self, "not_tags_anies")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetProtectedInstancesByTagsResourceResult']:
        """
        The information about protected instances that match the search criteria.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetProtectedInstancesByTagsTagResult']]:
        """
        The tags of the protected instance.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAnies")
    def tags_anies(self) -> Optional[Sequence['outputs.GetProtectedInstancesByTagsTagsAnyResult']]:
        return pulumi.get(self, "tags_anies")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.int:
        """
        The total number of protected instances that match the search criteria.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetProtectedInstancesByTagsResult(GetProtectedInstancesByTagsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProtectedInstancesByTagsResult(
            action=self.action,
            id=self.id,
            matches=self.matches,
            not_tags=self.not_tags,
            not_tags_anies=self.not_tags_anies,
            region=self.region,
            resources=self.resources,
            tags=self.tags,
            tags_anies=self.tags_anies,
            total_count=self.total_count)


def get_protected_instances_by_tags(action: Optional[_builtins.str] = None,
                                    matches: Optional[Sequence[Union['GetProtectedInstancesByTagsMatchArgs', 'GetProtectedInstancesByTagsMatchArgsDict']]] = None,
                                    not_tags: Optional[Sequence[Union['GetProtectedInstancesByTagsNotTagArgs', 'GetProtectedInstancesByTagsNotTagArgsDict']]] = None,
                                    not_tags_anies: Optional[Sequence[Union['GetProtectedInstancesByTagsNotTagsAnyArgs', 'GetProtectedInstancesByTagsNotTagsAnyArgsDict']]] = None,
                                    region: Optional[_builtins.str] = None,
                                    tags: Optional[Sequence[Union['GetProtectedInstancesByTagsTagArgs', 'GetProtectedInstancesByTagsTagArgsDict']]] = None,
                                    tags_anies: Optional[Sequence[Union['GetProtectedInstancesByTagsTagsAnyArgs', 'GetProtectedInstancesByTagsTagsAnyArgsDict']]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProtectedInstancesByTagsResult:
    """
    Use this data source to query SDRS protected instances by tags within HuaweiCloud.

    ## Example Usage

    ### Query SDRS protected instances list

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.sdrs.get_protected_instances_by_tags(action="filter",
        tags=[{
            "key": "foo",
            "values": ["bar"],
        }])
    ```

    ### Query SDRS protected instances count

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.sdrs.get_protected_instances_by_tags(action="count")
    ```


    :param _builtins.str action: Specifies the operation to be performed. Valid values are:
           + **filter**: Returns all protected instances that match the search criteria.
           Only attribute `resources` will be returned in this case.
           + **count**: Returns the total number of protected instances that match the search criteria.
           Only attribute `total_count` will be returned in this case.
    :param Sequence[Union['GetProtectedInstancesByTagsMatchArgs', 'GetProtectedInstancesByTagsMatchArgsDict']] matches: Specifies the search field.
           The matches structure is documented below.
           
           > The tag key is the field to be matched, for example, **resource_name**. The tag value indicates the value to be matched.
           The key is a fixed dictionary value and cannot contain duplicate keys or unsupported keys.
           Determine whether fuzzy match is required based on the keys. For example, if key is **resource_name**,
           fuzzy search (case insensitive) is used by default. If value is an empty string, exact match is used.
           Currently, only **resource_name** for key is supported. Other key values will be available later.
           
           <a name="tags_params_struct"></a>
           The `tags`, `tags_any`, `not_tags`, `not_tags_any` block supports:
    :param Sequence[Union['GetProtectedInstancesByTagsNotTagArgs', 'GetProtectedInstancesByTagsNotTagArgsDict']] not_tags: Specifies the tags to query resource list which do not contain all the specified tags.
           The not_tags structure is documented below.
           
           > Each resource to be queried contains a maximum of `10` keys. Each tag key can have a maximum of `10` tag values.
           The tag value corresponding to each tag key can be an empty array but the structure cannot be missing.
           Each tag key must be unique, and each tag value in a tag must be unique. The response returns resources containing
           no tags in this list. Keys in this list are in an AND relationship while values in each key-value structure are
           in an OR relationship. If no tag filtering condition is specified, full data is returned.
    :param Sequence[Union['GetProtectedInstancesByTagsNotTagsAnyArgs', 'GetProtectedInstancesByTagsNotTagsAnyArgsDict']] not_tags_anies: Specifies the tags to query resource list which do not contain any of the specified tags.
           The not_tags_any structure is documented below.
           
           > Each resource to be queried contains a maximum of `10` keys. Each tag key can have a maximum of `10` tag values.
           The tag value corresponding to each tag key can be an empty array but the structure cannot be missing.
           Each tag key must be unique, and each tag value in a tag must be unique. The response returns resources containing
           no tags in this list. Keys in this list are in an OR relationship and values in each key-value structure are also in
           an OR relationship. If no tag filtering condition is specified, full data is returned.
    :param _builtins.str region: Specifies the region in which to query the datasource.
           If omitted, the provider-level region will be used.
    :param Sequence[Union['GetProtectedInstancesByTagsTagArgs', 'GetProtectedInstancesByTagsTagArgsDict']] tags: Specifies the tags to query resource list which contain all the specified tags.
           The tags structure is documented below.
           
           > Each resource to be queried contains a maximum of `10` keys. Each tag key can have a maximum of `10` tag values.
           The tag value corresponding to each tag key can be an empty array but the structure cannot be missing.
           Each tag key must be unique, and each tag value in a tag must be unique. The response returns resources containing
           all tags in this list.
           Keys in this list are in an AND relationship while values in each key-value structure are in an OR relationship.
           If no tag filtering condition is specified, full data is returned.
    :param Sequence[Union['GetProtectedInstancesByTagsTagsAnyArgs', 'GetProtectedInstancesByTagsTagsAnyArgsDict']] tags_anies: Specifies the tags to query resource list which contain any of the specified tags.
           The tags_any structure is documented below.
           
           > Each resource to be queried contains a maximum of `10` keys. Each tag key can have a maximum of `10` tag values.
           The tag value corresponding to each tag key can be an empty array but the structure cannot be missing.
           Each tag key must be unique, and each tag value in a tag must be unique. The response returns resources containing
           the tags in this list. Keys in this list are in an OR relationship and values in each key-value structure are also
           in an OR relationship. If no tag filtering condition is specified, full data is returned.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['matches'] = matches
    __args__['notTags'] = not_tags
    __args__['notTagsAnies'] = not_tags_anies
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['tagsAnies'] = tags_anies
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:sdrs/getProtectedInstancesByTags:getProtectedInstancesByTags', __args__, opts=opts, typ=GetProtectedInstancesByTagsResult).value

    return AwaitableGetProtectedInstancesByTagsResult(
        action=pulumi.get(__ret__, 'action'),
        id=pulumi.get(__ret__, 'id'),
        matches=pulumi.get(__ret__, 'matches'),
        not_tags=pulumi.get(__ret__, 'not_tags'),
        not_tags_anies=pulumi.get(__ret__, 'not_tags_anies'),
        region=pulumi.get(__ret__, 'region'),
        resources=pulumi.get(__ret__, 'resources'),
        tags=pulumi.get(__ret__, 'tags'),
        tags_anies=pulumi.get(__ret__, 'tags_anies'),
        total_count=pulumi.get(__ret__, 'total_count'))
def get_protected_instances_by_tags_output(action: Optional[pulumi.Input[_builtins.str]] = None,
                                           matches: Optional[pulumi.Input[Optional[Sequence[Union['GetProtectedInstancesByTagsMatchArgs', 'GetProtectedInstancesByTagsMatchArgsDict']]]]] = None,
                                           not_tags: Optional[pulumi.Input[Optional[Sequence[Union['GetProtectedInstancesByTagsNotTagArgs', 'GetProtectedInstancesByTagsNotTagArgsDict']]]]] = None,
                                           not_tags_anies: Optional[pulumi.Input[Optional[Sequence[Union['GetProtectedInstancesByTagsNotTagsAnyArgs', 'GetProtectedInstancesByTagsNotTagsAnyArgsDict']]]]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           tags: Optional[pulumi.Input[Optional[Sequence[Union['GetProtectedInstancesByTagsTagArgs', 'GetProtectedInstancesByTagsTagArgsDict']]]]] = None,
                                           tags_anies: Optional[pulumi.Input[Optional[Sequence[Union['GetProtectedInstancesByTagsTagsAnyArgs', 'GetProtectedInstancesByTagsTagsAnyArgsDict']]]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProtectedInstancesByTagsResult]:
    """
    Use this data source to query SDRS protected instances by tags within HuaweiCloud.

    ## Example Usage

    ### Query SDRS protected instances list

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.sdrs.get_protected_instances_by_tags(action="filter",
        tags=[{
            "key": "foo",
            "values": ["bar"],
        }])
    ```

    ### Query SDRS protected instances count

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.sdrs.get_protected_instances_by_tags(action="count")
    ```


    :param _builtins.str action: Specifies the operation to be performed. Valid values are:
           + **filter**: Returns all protected instances that match the search criteria.
           Only attribute `resources` will be returned in this case.
           + **count**: Returns the total number of protected instances that match the search criteria.
           Only attribute `total_count` will be returned in this case.
    :param Sequence[Union['GetProtectedInstancesByTagsMatchArgs', 'GetProtectedInstancesByTagsMatchArgsDict']] matches: Specifies the search field.
           The matches structure is documented below.
           
           > The tag key is the field to be matched, for example, **resource_name**. The tag value indicates the value to be matched.
           The key is a fixed dictionary value and cannot contain duplicate keys or unsupported keys.
           Determine whether fuzzy match is required based on the keys. For example, if key is **resource_name**,
           fuzzy search (case insensitive) is used by default. If value is an empty string, exact match is used.
           Currently, only **resource_name** for key is supported. Other key values will be available later.
           
           <a name="tags_params_struct"></a>
           The `tags`, `tags_any`, `not_tags`, `not_tags_any` block supports:
    :param Sequence[Union['GetProtectedInstancesByTagsNotTagArgs', 'GetProtectedInstancesByTagsNotTagArgsDict']] not_tags: Specifies the tags to query resource list which do not contain all the specified tags.
           The not_tags structure is documented below.
           
           > Each resource to be queried contains a maximum of `10` keys. Each tag key can have a maximum of `10` tag values.
           The tag value corresponding to each tag key can be an empty array but the structure cannot be missing.
           Each tag key must be unique, and each tag value in a tag must be unique. The response returns resources containing
           no tags in this list. Keys in this list are in an AND relationship while values in each key-value structure are
           in an OR relationship. If no tag filtering condition is specified, full data is returned.
    :param Sequence[Union['GetProtectedInstancesByTagsNotTagsAnyArgs', 'GetProtectedInstancesByTagsNotTagsAnyArgsDict']] not_tags_anies: Specifies the tags to query resource list which do not contain any of the specified tags.
           The not_tags_any structure is documented below.
           
           > Each resource to be queried contains a maximum of `10` keys. Each tag key can have a maximum of `10` tag values.
           The tag value corresponding to each tag key can be an empty array but the structure cannot be missing.
           Each tag key must be unique, and each tag value in a tag must be unique. The response returns resources containing
           no tags in this list. Keys in this list are in an OR relationship and values in each key-value structure are also in
           an OR relationship. If no tag filtering condition is specified, full data is returned.
    :param _builtins.str region: Specifies the region in which to query the datasource.
           If omitted, the provider-level region will be used.
    :param Sequence[Union['GetProtectedInstancesByTagsTagArgs', 'GetProtectedInstancesByTagsTagArgsDict']] tags: Specifies the tags to query resource list which contain all the specified tags.
           The tags structure is documented below.
           
           > Each resource to be queried contains a maximum of `10` keys. Each tag key can have a maximum of `10` tag values.
           The tag value corresponding to each tag key can be an empty array but the structure cannot be missing.
           Each tag key must be unique, and each tag value in a tag must be unique. The response returns resources containing
           all tags in this list.
           Keys in this list are in an AND relationship while values in each key-value structure are in an OR relationship.
           If no tag filtering condition is specified, full data is returned.
    :param Sequence[Union['GetProtectedInstancesByTagsTagsAnyArgs', 'GetProtectedInstancesByTagsTagsAnyArgsDict']] tags_anies: Specifies the tags to query resource list which contain any of the specified tags.
           The tags_any structure is documented below.
           
           > Each resource to be queried contains a maximum of `10` keys. Each tag key can have a maximum of `10` tag values.
           The tag value corresponding to each tag key can be an empty array but the structure cannot be missing.
           Each tag key must be unique, and each tag value in a tag must be unique. The response returns resources containing
           the tags in this list. Keys in this list are in an OR relationship and values in each key-value structure are also
           in an OR relationship. If no tag filtering condition is specified, full data is returned.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['matches'] = matches
    __args__['notTags'] = not_tags
    __args__['notTagsAnies'] = not_tags_anies
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['tagsAnies'] = tags_anies
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:sdrs/getProtectedInstancesByTags:getProtectedInstancesByTags', __args__, opts=opts, typ=GetProtectedInstancesByTagsResult)
    return __ret__.apply(lambda __response__: GetProtectedInstancesByTagsResult(
        action=pulumi.get(__response__, 'action'),
        id=pulumi.get(__response__, 'id'),
        matches=pulumi.get(__response__, 'matches'),
        not_tags=pulumi.get(__response__, 'not_tags'),
        not_tags_anies=pulumi.get(__response__, 'not_tags_anies'),
        region=pulumi.get(__response__, 'region'),
        resources=pulumi.get(__response__, 'resources'),
        tags=pulumi.get(__response__, 'tags'),
        tags_anies=pulumi.get(__response__, 'tags_anies'),
        total_count=pulumi.get(__response__, 'total_count')))
