# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDrillsResult',
    'AwaitableGetDrillsResult',
    'get_drills',
    'get_drills_output',
]

@pulumi.output_type
class GetDrillsResult:
    """
    A collection of values returned by getDrills.
    """
    def __init__(__self__, disaster_recovery_drills=None, drill_vpc_id=None, id=None, name=None, region=None, server_group_id=None, status=None):
        if disaster_recovery_drills and not isinstance(disaster_recovery_drills, list):
            raise TypeError("Expected argument 'disaster_recovery_drills' to be a list")
        pulumi.set(__self__, "disaster_recovery_drills", disaster_recovery_drills)
        if drill_vpc_id and not isinstance(drill_vpc_id, str):
            raise TypeError("Expected argument 'drill_vpc_id' to be a str")
        pulumi.set(__self__, "drill_vpc_id", drill_vpc_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_group_id and not isinstance(server_group_id, str):
            raise TypeError("Expected argument 'server_group_id' to be a str")
        pulumi.set(__self__, "server_group_id", server_group_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="disasterRecoveryDrills")
    def disaster_recovery_drills(self) -> Sequence['outputs.GetDrillsDisasterRecoveryDrillResult']:
        """
        The DR drills.
        """
        return pulumi.get(self, "disaster_recovery_drills")

    @_builtins.property
    @pulumi.getter(name="drillVpcId")
    def drill_vpc_id(self) -> Optional[_builtins.str]:
        """
        The ID of the VPC used for a DR drill.
        """
        return pulumi.get(self, "drill_vpc_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Tthe DR drill name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> Optional[_builtins.str]:
        """
        The ID of a protection group.
        """
        return pulumi.get(self, "server_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The DR drill status.
        """
        return pulumi.get(self, "status")


class AwaitableGetDrillsResult(GetDrillsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDrillsResult(
            disaster_recovery_drills=self.disaster_recovery_drills,
            drill_vpc_id=self.drill_vpc_id,
            id=self.id,
            name=self.name,
            region=self.region,
            server_group_id=self.server_group_id,
            status=self.status)


def get_drills(drill_vpc_id: Optional[_builtins.str] = None,
               name: Optional[_builtins.str] = None,
               region: Optional[_builtins.str] = None,
               server_group_id: Optional[_builtins.str] = None,
               status: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDrillsResult:
    """
    Use this data source to query SDRS disaster recovery drills within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.sdrs.get_drills()
    ```


    :param _builtins.str drill_vpc_id: Specifies the ID of the VPC used for a DR drill.
    :param _builtins.str name: Specifies the DR drill name. Fuzzy search is supported.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_group_id: Specifies the ID of a protection group.
           The value of this parameter can query from datasource `sdrs_get_protection_groups`.
    :param _builtins.str status: Specifies the DR drill status.
           For details, see [DR Drill Status](https://support.huaweicloud.com/intl/en-us/api-sdrs/en-us_topic_0126152933.html).
    """
    __args__ = dict()
    __args__['drillVpcId'] = drill_vpc_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['serverGroupId'] = server_group_id
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:sdrs/getDrills:getDrills', __args__, opts=opts, typ=GetDrillsResult).value

    return AwaitableGetDrillsResult(
        disaster_recovery_drills=pulumi.get(__ret__, 'disaster_recovery_drills'),
        drill_vpc_id=pulumi.get(__ret__, 'drill_vpc_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        server_group_id=pulumi.get(__ret__, 'server_group_id'),
        status=pulumi.get(__ret__, 'status'))
def get_drills_output(drill_vpc_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      server_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDrillsResult]:
    """
    Use this data source to query SDRS disaster recovery drills within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.sdrs.get_drills()
    ```


    :param _builtins.str drill_vpc_id: Specifies the ID of the VPC used for a DR drill.
    :param _builtins.str name: Specifies the DR drill name. Fuzzy search is supported.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_group_id: Specifies the ID of a protection group.
           The value of this parameter can query from datasource `sdrs_get_protection_groups`.
    :param _builtins.str status: Specifies the DR drill status.
           For details, see [DR Drill Status](https://support.huaweicloud.com/intl/en-us/api-sdrs/en-us_topic_0126152933.html).
    """
    __args__ = dict()
    __args__['drillVpcId'] = drill_vpc_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['serverGroupId'] = server_group_id
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:sdrs/getDrills:getDrills', __args__, opts=opts, typ=GetDrillsResult)
    return __ret__.apply(lambda __response__: GetDrillsResult(
        disaster_recovery_drills=pulumi.get(__response__, 'disaster_recovery_drills'),
        drill_vpc_id=pulumi.get(__response__, 'drill_vpc_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        server_group_id=pulumi.get(__response__, 'server_group_id'),
        status=pulumi.get(__response__, 'status')))
