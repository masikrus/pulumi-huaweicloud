# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetProtectedInstancesResult',
    'AwaitableGetProtectedInstancesResult',
    'get_protected_instances',
    'get_protected_instances_output',
]

@pulumi.output_type
class GetProtectedInstancesResult:
    """
    A collection of values returned by getProtectedInstances.
    """
    def __init__(__self__, availability_zone=None, id=None, name=None, protected_instance_ids=None, protected_instances=None, query_type=None, region=None, server_group_id=None, server_group_ids=None, status=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if protected_instance_ids and not isinstance(protected_instance_ids, str):
            raise TypeError("Expected argument 'protected_instance_ids' to be a str")
        pulumi.set(__self__, "protected_instance_ids", protected_instance_ids)
        if protected_instances and not isinstance(protected_instances, list):
            raise TypeError("Expected argument 'protected_instances' to be a list")
        pulumi.set(__self__, "protected_instances", protected_instances)
        if query_type and not isinstance(query_type, str):
            raise TypeError("Expected argument 'query_type' to be a str")
        pulumi.set(__self__, "query_type", query_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_group_id and not isinstance(server_group_id, str):
            raise TypeError("Expected argument 'server_group_id' to be a str")
        pulumi.set(__self__, "server_group_id", server_group_id)
        if server_group_ids and not isinstance(server_group_ids, str):
            raise TypeError("Expected argument 'server_group_ids' to be a str")
        pulumi.set(__self__, "server_group_ids", server_group_ids)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of a protected instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="protectedInstanceIds")
    def protected_instance_ids(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "protected_instance_ids")

    @_builtins.property
    @pulumi.getter(name="protectedInstances")
    def protected_instances(self) -> Sequence['outputs.GetProtectedInstancesProtectedInstanceResult']:
        """
        The information about protected instances.
        """
        return pulumi.get(self, "protected_instances")

    @_builtins.property
    @pulumi.getter(name="queryType")
    def query_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "query_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> Optional[_builtins.str]:
        """
        The ID of a protection group.
        """
        return pulumi.get(self, "server_group_id")

    @_builtins.property
    @pulumi.getter(name="serverGroupIds")
    def server_group_ids(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "server_group_ids")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of a protected instance.
        """
        return pulumi.get(self, "status")


class AwaitableGetProtectedInstancesResult(GetProtectedInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProtectedInstancesResult(
            availability_zone=self.availability_zone,
            id=self.id,
            name=self.name,
            protected_instance_ids=self.protected_instance_ids,
            protected_instances=self.protected_instances,
            query_type=self.query_type,
            region=self.region,
            server_group_id=self.server_group_id,
            server_group_ids=self.server_group_ids,
            status=self.status)


def get_protected_instances(availability_zone: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            protected_instance_ids: Optional[_builtins.str] = None,
                            query_type: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            server_group_id: Optional[_builtins.str] = None,
                            server_group_ids: Optional[_builtins.str] = None,
                            status: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProtectedInstancesResult:
    """
    Use this data source to query SDRS protected instances within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.sdrs.get_protected_instances()
    ```


    :param _builtins.str availability_zone: Specifies the current production site AZ of the protection group containing
           the protected instance. The value of this parameter can query from datasource `sdrs_get_domain`.
    :param _builtins.str name: Specifies the name of a protected instance. Fuzzy search is supported.
    :param _builtins.str protected_instance_ids: Specifies the protected instance ID list. The value is in the following
           format: **[protected_instance_id1,protected_instance_id2,...,protected_instance_idx]**. Convert it using URL encoding.
           + All the protected instances with valid `protected_instance_id` in `protected_instance_ids` are returned.
           + The protected instances of a maximum of `30` `protected_instance_id` values can be queried.
           + If parameter `server_group_id` or `server_group_ids` is specified in the request, `protected_instance_ids` will be ignored.
    :param _builtins.str query_type: Specifies the query type. Valid values are **status_abnormal** and **general**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_group_id: Specifies the ID of the protection group, in which all protected instances are queried.
           The value of this parameter can query from datasource `sdrs_get_protection_groups`.
    :param _builtins.str server_group_ids: Specifies the protection group ID list. The value is in the following format:
           **[server_group_id1,server_group_id2,...,server_group_idx]**. Convert it using URL encoding.
           + All the protected instances with valid `server_group_id` in `server_group_ids` are returned.
           + The protected instances of a maximum of `30` `server_group_id` values can be queried.
           + If parameters `server_group_id` and `server_group_ids` are both specified in the request, `server_group_id` will be ignored.
    :param _builtins.str status: Specifies the status.
           For details, see [Protected Instance Status](https://support.huaweicloud.com/intl/en-us/api-sdrs/en-us_topic_0126152931.html).
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['name'] = name
    __args__['protectedInstanceIds'] = protected_instance_ids
    __args__['queryType'] = query_type
    __args__['region'] = region
    __args__['serverGroupId'] = server_group_id
    __args__['serverGroupIds'] = server_group_ids
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:sdrs/getProtectedInstances:getProtectedInstances', __args__, opts=opts, typ=GetProtectedInstancesResult).value

    return AwaitableGetProtectedInstancesResult(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        protected_instance_ids=pulumi.get(__ret__, 'protected_instance_ids'),
        protected_instances=pulumi.get(__ret__, 'protected_instances'),
        query_type=pulumi.get(__ret__, 'query_type'),
        region=pulumi.get(__ret__, 'region'),
        server_group_id=pulumi.get(__ret__, 'server_group_id'),
        server_group_ids=pulumi.get(__ret__, 'server_group_ids'),
        status=pulumi.get(__ret__, 'status'))
def get_protected_instances_output(availability_zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   protected_instance_ids: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   query_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   server_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   server_group_ids: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProtectedInstancesResult]:
    """
    Use this data source to query SDRS protected instances within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.sdrs.get_protected_instances()
    ```


    :param _builtins.str availability_zone: Specifies the current production site AZ of the protection group containing
           the protected instance. The value of this parameter can query from datasource `sdrs_get_domain`.
    :param _builtins.str name: Specifies the name of a protected instance. Fuzzy search is supported.
    :param _builtins.str protected_instance_ids: Specifies the protected instance ID list. The value is in the following
           format: **[protected_instance_id1,protected_instance_id2,...,protected_instance_idx]**. Convert it using URL encoding.
           + All the protected instances with valid `protected_instance_id` in `protected_instance_ids` are returned.
           + The protected instances of a maximum of `30` `protected_instance_id` values can be queried.
           + If parameter `server_group_id` or `server_group_ids` is specified in the request, `protected_instance_ids` will be ignored.
    :param _builtins.str query_type: Specifies the query type. Valid values are **status_abnormal** and **general**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_group_id: Specifies the ID of the protection group, in which all protected instances are queried.
           The value of this parameter can query from datasource `sdrs_get_protection_groups`.
    :param _builtins.str server_group_ids: Specifies the protection group ID list. The value is in the following format:
           **[server_group_id1,server_group_id2,...,server_group_idx]**. Convert it using URL encoding.
           + All the protected instances with valid `server_group_id` in `server_group_ids` are returned.
           + The protected instances of a maximum of `30` `server_group_id` values can be queried.
           + If parameters `server_group_id` and `server_group_ids` are both specified in the request, `server_group_id` will be ignored.
    :param _builtins.str status: Specifies the status.
           For details, see [Protected Instance Status](https://support.huaweicloud.com/intl/en-us/api-sdrs/en-us_topic_0126152931.html).
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['name'] = name
    __args__['protectedInstanceIds'] = protected_instance_ids
    __args__['queryType'] = query_type
    __args__['region'] = region
    __args__['serverGroupId'] = server_group_id
    __args__['serverGroupIds'] = server_group_ids
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:sdrs/getProtectedInstances:getProtectedInstances', __args__, opts=opts, typ=GetProtectedInstancesResult)
    return __ret__.apply(lambda __response__: GetProtectedInstancesResult(
        availability_zone=pulumi.get(__response__, 'availability_zone'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        protected_instance_ids=pulumi.get(__response__, 'protected_instance_ids'),
        protected_instances=pulumi.get(__response__, 'protected_instances'),
        query_type=pulumi.get(__response__, 'query_type'),
        region=pulumi.get(__response__, 'region'),
        server_group_id=pulumi.get(__response__, 'server_group_id'),
        server_group_ids=pulumi.get(__response__, 'server_group_ids'),
        status=pulumi.get(__response__, 'status')))
