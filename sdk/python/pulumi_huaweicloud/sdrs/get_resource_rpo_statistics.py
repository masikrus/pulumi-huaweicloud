# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourceRpoStatisticsResult',
    'AwaitableGetResourceRpoStatisticsResult',
    'get_resource_rpo_statistics',
    'get_resource_rpo_statistics_output',
]

@pulumi.output_type
class GetResourceRpoStatisticsResult:
    """
    A collection of values returned by getResourceRpoStatistics.
    """
    def __init__(__self__, end_time=None, id=None, region=None, resource_rpo_statistics=None, resource_type=None, start_time=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_rpo_statistics and not isinstance(resource_rpo_statistics, list):
            raise TypeError("Expected argument 'resource_rpo_statistics' to be a list")
        pulumi.set(__self__, "resource_rpo_statistics", resource_rpo_statistics)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceRpoStatistics")
    def resource_rpo_statistics(self) -> Sequence['outputs.GetResourceRpoStatisticsResourceRpoStatisticResult']:
        """
        The list of RPO exceedance trend records for resources.
        """
        return pulumi.get(self, "resource_rpo_statistics")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        The type of resource with RPO exceedance.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "start_time")


class AwaitableGetResourceRpoStatisticsResult(GetResourceRpoStatisticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceRpoStatisticsResult(
            end_time=self.end_time,
            id=self.id,
            region=self.region,
            resource_rpo_statistics=self.resource_rpo_statistics,
            resource_type=self.resource_type,
            start_time=self.start_time)


def get_resource_rpo_statistics(end_time: Optional[_builtins.str] = None,
                                region: Optional[_builtins.str] = None,
                                resource_type: Optional[_builtins.str] = None,
                                start_time: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceRpoStatisticsResult:
    """
    Use this data source to query SDRS resource RPO statistics within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.sdrs.get_resource_rpo_statistics()
    ```


    :param _builtins.str end_time: Specifies the end time using to filter the RPO statistics.
           Format: "yyyy-MM-dd HH:mm:ss.SSS", example: **2019-04-01 12:00:00.000**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_type: Specifies the resource type. Valid value is **replication**, which indicates
           querying RPO exceedance trend records for replication pairs.
    :param _builtins.str start_time: Specifies the start time using to filter the RPO statistics.
           Format: "yyyy-MM-dd HH:mm:ss.SSS", example: **2019-04-01 12:00:00.000**.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['region'] = region
    __args__['resourceType'] = resource_type
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:sdrs/getResourceRpoStatistics:getResourceRpoStatistics', __args__, opts=opts, typ=GetResourceRpoStatisticsResult).value

    return AwaitableGetResourceRpoStatisticsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        resource_rpo_statistics=pulumi.get(__ret__, 'resource_rpo_statistics'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        start_time=pulumi.get(__ret__, 'start_time'))
def get_resource_rpo_statistics_output(end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceRpoStatisticsResult]:
    """
    Use this data source to query SDRS resource RPO statistics within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.sdrs.get_resource_rpo_statistics()
    ```


    :param _builtins.str end_time: Specifies the end time using to filter the RPO statistics.
           Format: "yyyy-MM-dd HH:mm:ss.SSS", example: **2019-04-01 12:00:00.000**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_type: Specifies the resource type. Valid value is **replication**, which indicates
           querying RPO exceedance trend records for replication pairs.
    :param _builtins.str start_time: Specifies the start time using to filter the RPO statistics.
           Format: "yyyy-MM-dd HH:mm:ss.SSS", example: **2019-04-01 12:00:00.000**.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['region'] = region
    __args__['resourceType'] = resource_type
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:sdrs/getResourceRpoStatistics:getResourceRpoStatistics', __args__, opts=opts, typ=GetResourceRpoStatisticsResult)
    return __ret__.apply(lambda __response__: GetResourceRpoStatisticsResult(
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        resource_rpo_statistics=pulumi.get(__response__, 'resource_rpo_statistics'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        start_time=pulumi.get(__response__, 'start_time')))
