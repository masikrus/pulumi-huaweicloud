# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ResizeReplicationArgs', 'ResizeReplication']

@pulumi.input_type
class ResizeReplicationArgs:
    def __init__(__self__, *,
                 new_size: pulumi.Input[_builtins.int],
                 replication_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ResizeReplication resource.
        :param pulumi.Input[_builtins.int] new_size: Specifies the new size of the replication pair's disk in GB.
               Must be greater than the current size.
        :param pulumi.Input[_builtins.str] replication_id: Specifies the ID of the replication pair to resize.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "new_size", new_size)
        pulumi.set(__self__, "replication_id", replication_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="newSize")
    def new_size(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the new size of the replication pair's disk in GB.
        Must be greater than the current size.
        """
        return pulumi.get(self, "new_size")

    @new_size.setter
    def new_size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "new_size", value)

    @_builtins.property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the replication pair to resize.
        """
        return pulumi.get(self, "replication_id")

    @replication_id.setter
    def replication_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "replication_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ResizeReplicationState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 new_size: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replication_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ResizeReplication resources.
        :param pulumi.Input[_builtins.int] new_size: Specifies the new size of the replication pair's disk in GB.
               Must be greater than the current size.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] replication_id: Specifies the ID of the replication pair to resize.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if new_size is not None:
            pulumi.set(__self__, "new_size", new_size)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="newSize")
    def new_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the new size of the replication pair's disk in GB.
        Must be greater than the current size.
        """
        return pulumi.get(self, "new_size")

    @new_size.setter
    def new_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "new_size", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the replication pair to resize.
        """
        return pulumi.get(self, "replication_id")

    @replication_id.setter
    def replication_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "replication_id", value)


@pulumi.type_token("huaweicloud:sdrs/resizeReplication:ResizeReplication")
class ResizeReplication(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 new_size: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replication_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to resize a replication pair's disk in SDRS within HuaweiCloud.

        > This is a one-time action resource to resize a replication pair's disk. Deleting this resource will
        not change the current configuration, but will only remove the resource information from the tfstate file.

        > Before using this resource, please note the following restrictions:
        <br/>1. The status of the replication pair must be **available** or **protected** or **error-extending**.
        <br/>2. The status of the cloud disks must be **available** or **in-use**.
        <br/>3. If the cloud disks are pay-per-use, they can be resized directly.
        <br/>4. If the cloud disks are prepaid, they cannot be resized directly. You need to delete the replication pair first,
        resize the cloud disks, and then create a new replication pair.
        <br/>5. Running this resource may cause unexpected change to the `size` field of the `Evs.Volume`.
        Please using `lifecycle` to control the `size` field of the `Evs.Volume`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        replication_id = config.require_object("replicationId")
        new_size = config.require_object("newSize")
        test = huaweicloud.sdrs.ResizeReplication("test",
            replication_id=replication_id,
            new_size=new_size)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] new_size: Specifies the new size of the replication pair's disk in GB.
               Must be greater than the current size.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] replication_id: Specifies the ID of the replication pair to resize.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResizeReplicationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to resize a replication pair's disk in SDRS within HuaweiCloud.

        > This is a one-time action resource to resize a replication pair's disk. Deleting this resource will
        not change the current configuration, but will only remove the resource information from the tfstate file.

        > Before using this resource, please note the following restrictions:
        <br/>1. The status of the replication pair must be **available** or **protected** or **error-extending**.
        <br/>2. The status of the cloud disks must be **available** or **in-use**.
        <br/>3. If the cloud disks are pay-per-use, they can be resized directly.
        <br/>4. If the cloud disks are prepaid, they cannot be resized directly. You need to delete the replication pair first,
        resize the cloud disks, and then create a new replication pair.
        <br/>5. Running this resource may cause unexpected change to the `size` field of the `Evs.Volume`.
        Please using `lifecycle` to control the `size` field of the `Evs.Volume`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        replication_id = config.require_object("replicationId")
        new_size = config.require_object("newSize")
        test = huaweicloud.sdrs.ResizeReplication("test",
            replication_id=replication_id,
            new_size=new_size)
        ```

        :param str resource_name: The name of the resource.
        :param ResizeReplicationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResizeReplicationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 new_size: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replication_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResizeReplicationArgs.__new__(ResizeReplicationArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if new_size is None and not opts.urn:
                raise TypeError("Missing required property 'new_size'")
            __props__.__dict__["new_size"] = new_size
            __props__.__dict__["region"] = region
            if replication_id is None and not opts.urn:
                raise TypeError("Missing required property 'replication_id'")
            __props__.__dict__["replication_id"] = replication_id
        super(ResizeReplication, __self__).__init__(
            'huaweicloud:sdrs/resizeReplication:ResizeReplication',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            new_size: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            replication_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ResizeReplication':
        """
        Get an existing ResizeReplication resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] new_size: Specifies the new size of the replication pair's disk in GB.
               Must be greater than the current size.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] replication_id: Specifies the ID of the replication pair to resize.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResizeReplicationState.__new__(_ResizeReplicationState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["new_size"] = new_size
        __props__.__dict__["region"] = region
        __props__.__dict__["replication_id"] = replication_id
        return ResizeReplication(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="newSize")
    def new_size(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the new size of the replication pair's disk in GB.
        Must be greater than the current size.
        """
        return pulumi.get(self, "new_size")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the replication pair to resize.
        """
        return pulumi.get(self, "replication_id")

