# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProtectedInstanceAddNicArgs', 'ProtectedInstanceAddNic']

@pulumi.input_type
class ProtectedInstanceAddNicArgs:
    def __init__(__self__, *,
                 protected_instance_id: pulumi.Input[_builtins.str],
                 subnet_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectedInstanceAddNicSecurityGroupArgs']]]] = None):
        """
        The set of arguments for constructing a ProtectedInstanceAddNic resource.
        :param pulumi.Input[_builtins.str] protected_instance_id: Specifies the ID of the protected instance to add the NIC to.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the NIC will be attached.
               It is network ID of the subnet, which is the same as the `neutron_network_id` value.
        :param pulumi.Input[_builtins.str] ip_address: Specifies the IP address to assign to the NIC.
               If not specified, an available IP will be automatically assigned.
               
               <a name="security_groups_struct"></a>
               The `security_groups` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to execute the request.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ProtectedInstanceAddNicSecurityGroupArgs']]] security_groups: Specifies the security groups to associate with the NIC.
               Defaults to the system default security group.
               The security_groups structure is documented below.
        """
        pulumi.set(__self__, "protected_instance_id", protected_instance_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)

    @_builtins.property
    @pulumi.getter(name="protectedInstanceId")
    def protected_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the protected instance to add the NIC to.
        """
        return pulumi.get(self, "protected_instance_id")

    @protected_instance_id.setter
    def protected_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protected_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the subnet to which the NIC will be attached.
        It is network ID of the subnet, which is the same as the `neutron_network_id` value.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP address to assign to the NIC.
        If not specified, an available IP will be automatically assigned.

        <a name="security_groups_struct"></a>
        The `security_groups` block supports:
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to execute the request.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProtectedInstanceAddNicSecurityGroupArgs']]]]:
        """
        Specifies the security groups to associate with the NIC.
        Defaults to the system default security group.
        The security_groups structure is documented below.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectedInstanceAddNicSecurityGroupArgs']]]]):
        pulumi.set(self, "security_groups", value)


@pulumi.input_type
class _ProtectedInstanceAddNicState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 protected_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectedInstanceAddNicSecurityGroupArgs']]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ProtectedInstanceAddNic resources.
        :param pulumi.Input[_builtins.str] ip_address: Specifies the IP address to assign to the NIC.
               If not specified, an available IP will be automatically assigned.
               
               <a name="security_groups_struct"></a>
               The `security_groups` block supports:
        :param pulumi.Input[_builtins.str] protected_instance_id: Specifies the ID of the protected instance to add the NIC to.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to execute the request.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ProtectedInstanceAddNicSecurityGroupArgs']]] security_groups: Specifies the security groups to associate with the NIC.
               Defaults to the system default security group.
               The security_groups structure is documented below.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the NIC will be attached.
               It is network ID of the subnet, which is the same as the `neutron_network_id` value.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if protected_instance_id is not None:
            pulumi.set(__self__, "protected_instance_id", protected_instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP address to assign to the NIC.
        If not specified, an available IP will be automatically assigned.

        <a name="security_groups_struct"></a>
        The `security_groups` block supports:
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="protectedInstanceId")
    def protected_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the protected instance to add the NIC to.
        """
        return pulumi.get(self, "protected_instance_id")

    @protected_instance_id.setter
    def protected_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protected_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to execute the request.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProtectedInstanceAddNicSecurityGroupArgs']]]]:
        """
        Specifies the security groups to associate with the NIC.
        Defaults to the system default security group.
        The security_groups structure is documented below.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectedInstanceAddNicSecurityGroupArgs']]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the subnet to which the NIC will be attached.
        It is network ID of the subnet, which is the same as the `neutron_network_id` value.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.type_token("huaweicloud:sdrs/protectedInstanceAddNic:ProtectedInstanceAddNic")
class ProtectedInstanceAddNic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 protected_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProtectedInstanceAddNicSecurityGroupArgs', 'ProtectedInstanceAddNicSecurityGroupArgsDict']]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to add a network interface card (NIC) to a protected instance in SDRS within HuaweiCloud.

        > This is a one-time action resource to add a NIC to a protected instance. Deleting this resource will
        not change the current NIC configuration, but will only remove the resource information from the tfstate file.

        > Using this resource may cause unexpected changes to the ECS security group used to protect the instance.
        Before using this resource, use `lifecycle` to ignore unexpected changes to the `security_group_ids` field in
        resource `Ecs.Instance`. The following restrictions apply before using this resource:
        <br/>1. Status of the protection group must be **available** or **protected**.
        <br/>2. Status of the protected instance must be **available** or **protected**.
        <br/>3. The subnet of the NIC to be added must belong to the same VPC of the protected group and protected instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        protected_instance_id = config.require_object("protectedInstanceId")
        subnet_id = config.require_object("subnetId")
        ip_address = config.require_object("ipAddress")
        security_groups = config.require_object("securityGroups")
        test = huaweicloud.sdrs.ProtectedInstanceAddNic("test",
            protected_instance_id=protected_instance_id,
            subnet_id=subnet_id,
            ip_address=ip_address,
            security_groups=security_groups)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] ip_address: Specifies the IP address to assign to the NIC.
               If not specified, an available IP will be automatically assigned.
               
               <a name="security_groups_struct"></a>
               The `security_groups` block supports:
        :param pulumi.Input[_builtins.str] protected_instance_id: Specifies the ID of the protected instance to add the NIC to.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to execute the request.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProtectedInstanceAddNicSecurityGroupArgs', 'ProtectedInstanceAddNicSecurityGroupArgsDict']]]] security_groups: Specifies the security groups to associate with the NIC.
               Defaults to the system default security group.
               The security_groups structure is documented below.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the NIC will be attached.
               It is network ID of the subnet, which is the same as the `neutron_network_id` value.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProtectedInstanceAddNicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to add a network interface card (NIC) to a protected instance in SDRS within HuaweiCloud.

        > This is a one-time action resource to add a NIC to a protected instance. Deleting this resource will
        not change the current NIC configuration, but will only remove the resource information from the tfstate file.

        > Using this resource may cause unexpected changes to the ECS security group used to protect the instance.
        Before using this resource, use `lifecycle` to ignore unexpected changes to the `security_group_ids` field in
        resource `Ecs.Instance`. The following restrictions apply before using this resource:
        <br/>1. Status of the protection group must be **available** or **protected**.
        <br/>2. Status of the protected instance must be **available** or **protected**.
        <br/>3. The subnet of the NIC to be added must belong to the same VPC of the protected group and protected instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        protected_instance_id = config.require_object("protectedInstanceId")
        subnet_id = config.require_object("subnetId")
        ip_address = config.require_object("ipAddress")
        security_groups = config.require_object("securityGroups")
        test = huaweicloud.sdrs.ProtectedInstanceAddNic("test",
            protected_instance_id=protected_instance_id,
            subnet_id=subnet_id,
            ip_address=ip_address,
            security_groups=security_groups)
        ```

        :param str resource_name: The name of the resource.
        :param ProtectedInstanceAddNicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProtectedInstanceAddNicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 protected_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProtectedInstanceAddNicSecurityGroupArgs', 'ProtectedInstanceAddNicSecurityGroupArgsDict']]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProtectedInstanceAddNicArgs.__new__(ProtectedInstanceAddNicArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["ip_address"] = ip_address
            if protected_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'protected_instance_id'")
            __props__.__dict__["protected_instance_id"] = protected_instance_id
            __props__.__dict__["region"] = region
            __props__.__dict__["security_groups"] = security_groups
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
        super(ProtectedInstanceAddNic, __self__).__init__(
            'huaweicloud:sdrs/protectedInstanceAddNic:ProtectedInstanceAddNic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            protected_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProtectedInstanceAddNicSecurityGroupArgs', 'ProtectedInstanceAddNicSecurityGroupArgsDict']]]]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ProtectedInstanceAddNic':
        """
        Get an existing ProtectedInstanceAddNic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] ip_address: Specifies the IP address to assign to the NIC.
               If not specified, an available IP will be automatically assigned.
               
               <a name="security_groups_struct"></a>
               The `security_groups` block supports:
        :param pulumi.Input[_builtins.str] protected_instance_id: Specifies the ID of the protected instance to add the NIC to.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to execute the request.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProtectedInstanceAddNicSecurityGroupArgs', 'ProtectedInstanceAddNicSecurityGroupArgsDict']]]] security_groups: Specifies the security groups to associate with the NIC.
               Defaults to the system default security group.
               The security_groups structure is documented below.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the NIC will be attached.
               It is network ID of the subnet, which is the same as the `neutron_network_id` value.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProtectedInstanceAddNicState.__new__(_ProtectedInstanceAddNicState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["protected_instance_id"] = protected_instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["subnet_id"] = subnet_id
        return ProtectedInstanceAddNic(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the IP address to assign to the NIC.
        If not specified, an available IP will be automatically assigned.

        <a name="security_groups_struct"></a>
        The `security_groups` block supports:
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="protectedInstanceId")
    def protected_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the protected instance to add the NIC to.
        """
        return pulumi.get(self, "protected_instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to execute the request.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ProtectedInstanceAddNicSecurityGroup']]]:
        """
        Specifies the security groups to associate with the NIC.
        Defaults to the system default security group.
        The security_groups structure is documented below.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the subnet to which the NIC will be attached.
        It is network ID of the subnet, which is the same as the `neutron_network_id` value.
        """
        return pulumi.get(self, "subnet_id")

