# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ReplicationAttachArgs', 'ReplicationAttach']

@pulumi.input_type
class ReplicationAttachArgs:
    def __init__(__self__, *,
                 device: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 replication_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ReplicationAttach resource.
        :param pulumi.Input[_builtins.str] device: Specifies the disk device name of a replication pair. There are several
               restrictions on this field as follows：
               
               + The new disk device name cannot be the same as an existing one.
               
               + Set the parameter value to /dev/sda for the system disks of protected instances created using Xen servers and to
               /dev/sdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks, set the
               device names of the two data disks to /dev/sdb and /dev/sdc, respectively. If you set a device name starting with
               /dev/vd, the system uses /dev/sd by default.
               
               + Set the parameter value to /dev/vda for the system disks of protected instances created using KVM servers and
               to /dev/vdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks,
               set the device names of the two data disks to /dev/vdb and /dev/vdc, respectively. If you set a device name starting
               with /dev/sd, the system uses /dev/vd by default.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a protected instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] replication_id: Specifies the ID of a replication pair.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "replication_id", replication_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def device(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the disk device name of a replication pair. There are several
        restrictions on this field as follows：

        + The new disk device name cannot be the same as an existing one.

        + Set the parameter value to /dev/sda for the system disks of protected instances created using Xen servers and to
        /dev/sdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks, set the
        device names of the two data disks to /dev/sdb and /dev/sdc, respectively. If you set a device name starting with
        /dev/vd, the system uses /dev/sd by default.

        + Set the parameter value to /dev/vda for the system disks of protected instances created using KVM servers and
        to /dev/vdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks,
        set the device names of the two data disks to /dev/vdb and /dev/vdc, respectively. If you set a device name starting
        with /dev/sd, the system uses /dev/vd by default.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "device", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a protected instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a replication pair.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "replication_id")

    @replication_id.setter
    def replication_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "replication_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ReplicationAttachState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replication_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ReplicationAttach resources.
        :param pulumi.Input[_builtins.str] device: Specifies the disk device name of a replication pair. There are several
               restrictions on this field as follows：
               
               + The new disk device name cannot be the same as an existing one.
               
               + Set the parameter value to /dev/sda for the system disks of protected instances created using Xen servers and to
               /dev/sdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks, set the
               device names of the two data disks to /dev/sdb and /dev/sdc, respectively. If you set a device name starting with
               /dev/vd, the system uses /dev/sd by default.
               
               + Set the parameter value to /dev/vda for the system disks of protected instances created using KVM servers and
               to /dev/vdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks,
               set the device names of the two data disks to /dev/vdb and /dev/vdc, respectively. If you set a device name starting
               with /dev/sd, the system uses /dev/vd by default.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a protected instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] replication_id: Specifies the ID of a replication pair.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the SDRS protected instance.
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the disk device name of a replication pair. There are several
        restrictions on this field as follows：

        + The new disk device name cannot be the same as an existing one.

        + Set the parameter value to /dev/sda for the system disks of protected instances created using Xen servers and to
        /dev/sdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks, set the
        device names of the two data disks to /dev/sdb and /dev/sdc, respectively. If you set a device name starting with
        /dev/vd, the system uses /dev/sd by default.

        + Set the parameter value to /dev/vda for the system disks of protected instances created using KVM servers and
        to /dev/vdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks,
        set the device names of the two data disks to /dev/vdb and /dev/vdc, respectively. If you set a device name starting
        with /dev/sd, the system uses /dev/vd by default.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a protected instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a replication pair.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "replication_id")

    @replication_id.setter
    def replication_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "replication_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the SDRS protected instance.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:sdrs/replicationAttach:ReplicationAttach")
class ReplicationAttach(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replication_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an SDRS replication attach resource within HuaweiCloud.

        > Please make sure the status of the protection group must be available or protected, the status of the
        protected instance must be available or protected and the status of the replication pair must be available or protected.
        The non-shared replication pair has not been attached to any protected instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        protected_instance_id = config.require_object("protectedInstanceId")
        replication_id = config.require_object("replicationId")
        device = config.require_object("device")
        test = huaweicloud.sdrs.ReplicationAttach("test",
            instance_id=protected_instance_id,
            replication_id=replication_id,
            device=device)
        ```

        ## Import

        The SDRS replication attach can be imported using the `protected_instance_id` and `replication_id`, separated

        by a slash , e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:sdrs/replicationAttach:ReplicationAttach test <protected_instance_id>/<replication_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] device: Specifies the disk device name of a replication pair. There are several
               restrictions on this field as follows：
               
               + The new disk device name cannot be the same as an existing one.
               
               + Set the parameter value to /dev/sda for the system disks of protected instances created using Xen servers and to
               /dev/sdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks, set the
               device names of the two data disks to /dev/sdb and /dev/sdc, respectively. If you set a device name starting with
               /dev/vd, the system uses /dev/sd by default.
               
               + Set the parameter value to /dev/vda for the system disks of protected instances created using KVM servers and
               to /dev/vdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks,
               set the device names of the two data disks to /dev/vdb and /dev/vdc, respectively. If you set a device name starting
               with /dev/sd, the system uses /dev/vd by default.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a protected instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] replication_id: Specifies the ID of a replication pair.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReplicationAttachArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an SDRS replication attach resource within HuaweiCloud.

        > Please make sure the status of the protection group must be available or protected, the status of the
        protected instance must be available or protected and the status of the replication pair must be available or protected.
        The non-shared replication pair has not been attached to any protected instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        protected_instance_id = config.require_object("protectedInstanceId")
        replication_id = config.require_object("replicationId")
        device = config.require_object("device")
        test = huaweicloud.sdrs.ReplicationAttach("test",
            instance_id=protected_instance_id,
            replication_id=replication_id,
            device=device)
        ```

        ## Import

        The SDRS replication attach can be imported using the `protected_instance_id` and `replication_id`, separated

        by a slash , e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:sdrs/replicationAttach:ReplicationAttach test <protected_instance_id>/<replication_id>
        ```

        :param str resource_name: The name of the resource.
        :param ReplicationAttachArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReplicationAttachArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replication_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReplicationAttachArgs.__new__(ReplicationAttachArgs)

            if device is None and not opts.urn:
                raise TypeError("Missing required property 'device'")
            __props__.__dict__["device"] = device
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            if replication_id is None and not opts.urn:
                raise TypeError("Missing required property 'replication_id'")
            __props__.__dict__["replication_id"] = replication_id
            __props__.__dict__["status"] = None
        super(ReplicationAttach, __self__).__init__(
            'huaweicloud:sdrs/replicationAttach:ReplicationAttach',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            replication_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'ReplicationAttach':
        """
        Get an existing ReplicationAttach resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] device: Specifies the disk device name of a replication pair. There are several
               restrictions on this field as follows：
               
               + The new disk device name cannot be the same as an existing one.
               
               + Set the parameter value to /dev/sda for the system disks of protected instances created using Xen servers and to
               /dev/sdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks, set the
               device names of the two data disks to /dev/sdb and /dev/sdc, respectively. If you set a device name starting with
               /dev/vd, the system uses /dev/sd by default.
               
               + Set the parameter value to /dev/vda for the system disks of protected instances created using KVM servers and
               to /dev/vdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks,
               set the device names of the two data disks to /dev/vdb and /dev/vdc, respectively. If you set a device name starting
               with /dev/sd, the system uses /dev/vd by default.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a protected instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] replication_id: Specifies the ID of a replication pair.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the SDRS protected instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReplicationAttachState.__new__(_ReplicationAttachState)

        __props__.__dict__["device"] = device
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["replication_id"] = replication_id
        __props__.__dict__["status"] = status
        return ReplicationAttach(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def device(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the disk device name of a replication pair. There are several
        restrictions on this field as follows：

        + The new disk device name cannot be the same as an existing one.

        + Set the parameter value to /dev/sda for the system disks of protected instances created using Xen servers and to
        /dev/sdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks, set the
        device names of the two data disks to /dev/sdb and /dev/sdc, respectively. If you set a device name starting with
        /dev/vd, the system uses /dev/sd by default.

        + Set the parameter value to /dev/vda for the system disks of protected instances created using KVM servers and
        to /dev/vdx for data disks, where x is a letter in alphabetical order. For example, if there are two data disks,
        set the device names of the two data disks to /dev/vdb and /dev/vdc, respectively. If you set a device name starting
        with /dev/sd, the system uses /dev/vd by default.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a protected instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a replication pair.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "replication_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the SDRS protected instance.
        """
        return pulumi.get(self, "status")

