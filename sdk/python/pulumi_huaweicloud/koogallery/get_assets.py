# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAssetsResult',
    'AwaitableGetAssetsResult',
    'get_assets',
    'get_assets_output',
]

@pulumi.output_type
class GetAssetsResult:
    """
    A collection of values returned by getAssets.
    """
    def __init__(__self__, asset_id=None, asset_version=None, assets=None, deployed_type=None, id=None, region=None):
        if asset_id and not isinstance(asset_id, str):
            raise TypeError("Expected argument 'asset_id' to be a str")
        pulumi.set(__self__, "asset_id", asset_id)
        if asset_version and not isinstance(asset_version, str):
            raise TypeError("Expected argument 'asset_version' to be a str")
        pulumi.set(__self__, "asset_version", asset_version)
        if assets and not isinstance(assets, list):
            raise TypeError("Expected argument 'assets' to be a list")
        pulumi.set(__self__, "assets", assets)
        if deployed_type and not isinstance(deployed_type, str):
            raise TypeError("Expected argument 'deployed_type' to be a str")
        pulumi.set(__self__, "deployed_type", deployed_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="assetId")
    def asset_id(self) -> _builtins.str:
        """
        The ID of the asset.
        """
        return pulumi.get(self, "asset_id")

    @_builtins.property
    @pulumi.getter(name="assetVersion")
    def asset_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "asset_version")

    @_builtins.property
    @pulumi.getter
    def assets(self) -> Sequence['outputs.GetAssetsAssetResult']:
        """
        Indicates the assets information.
        The assets structure is documented below.
        """
        return pulumi.get(self, "assets")

    @_builtins.property
    @pulumi.getter(name="deployedType")
    def deployed_type(self) -> _builtins.str:
        """
        The deployed type of the asset.
        """
        return pulumi.get(self, "deployed_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The region of the asset.
        """
        return pulumi.get(self, "region")


class AwaitableGetAssetsResult(GetAssetsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAssetsResult(
            asset_id=self.asset_id,
            asset_version=self.asset_version,
            assets=self.assets,
            deployed_type=self.deployed_type,
            id=self.id,
            region=self.region)


def get_assets(asset_id: Optional[_builtins.str] = None,
               asset_version: Optional[_builtins.str] = None,
               deployed_type: Optional[_builtins.str] = None,
               region: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAssetsResult:
    """
    Use this data source to get available HuaweiCloud KooGallery assets.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    asset_id = config.require_object("assetId")
    flavor = huaweicloud.koogallery.get_assets(asset_id=asset_id,
        deployed_type="software_package",
        asset_version="V1.0")
    ```


    :param _builtins.str asset_id: Specifies the asset id to filter the assets.
    :param _builtins.str asset_version: Specifies the asset version to filter the assets.
    :param _builtins.str deployed_type: Specifies the deployed type. Value: software_package, image.
    :param _builtins.str region: Specifies the region to filter the assets.
    """
    __args__ = dict()
    __args__['assetId'] = asset_id
    __args__['assetVersion'] = asset_version
    __args__['deployedType'] = deployed_type
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:koogallery/getAssets:getAssets', __args__, opts=opts, typ=GetAssetsResult).value

    return AwaitableGetAssetsResult(
        asset_id=pulumi.get(__ret__, 'asset_id'),
        asset_version=pulumi.get(__ret__, 'asset_version'),
        assets=pulumi.get(__ret__, 'assets'),
        deployed_type=pulumi.get(__ret__, 'deployed_type'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_assets_output(asset_id: Optional[pulumi.Input[_builtins.str]] = None,
                      asset_version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      deployed_type: Optional[pulumi.Input[_builtins.str]] = None,
                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAssetsResult]:
    """
    Use this data source to get available HuaweiCloud KooGallery assets.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    asset_id = config.require_object("assetId")
    flavor = huaweicloud.koogallery.get_assets(asset_id=asset_id,
        deployed_type="software_package",
        asset_version="V1.0")
    ```


    :param _builtins.str asset_id: Specifies the asset id to filter the assets.
    :param _builtins.str asset_version: Specifies the asset version to filter the assets.
    :param _builtins.str deployed_type: Specifies the deployed type. Value: software_package, image.
    :param _builtins.str region: Specifies the region to filter the assets.
    """
    __args__ = dict()
    __args__['assetId'] = asset_id
    __args__['assetVersion'] = asset_version
    __args__['deployedType'] = deployed_type
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:koogallery/getAssets:getAssets', __args__, opts=opts, typ=GetAssetsResult)
    return __ret__.apply(lambda __response__: GetAssetsResult(
        asset_id=pulumi.get(__response__, 'asset_id'),
        asset_version=pulumi.get(__response__, 'asset_version'),
        assets=pulumi.get(__response__, 'assets'),
        deployed_type=pulumi.get(__response__, 'deployed_type'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
