# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBandwidthsV3Result',
    'AwaitableGetBandwidthsV3Result',
    'get_bandwidths_v3',
    'get_bandwidths_v3_output',
]

@pulumi.output_type
class GetBandwidthsV3Result:
    """
    A collection of values returned by getBandwidthsV3.
    """
    def __init__(__self__, admin_state=None, bandwidth_type=None, billing_info=None, charge_mode=None, eip_bandwidths=None, enable_bandwidth_rules=None, fields=None, id=None, ingress_size=None, name=None, name_like=None, public_border_group=None, region=None, rule_quota=None, size=None, tags=None, type=None):
        if admin_state and not isinstance(admin_state, str):
            raise TypeError("Expected argument 'admin_state' to be a str")
        pulumi.set(__self__, "admin_state", admin_state)
        if bandwidth_type and not isinstance(bandwidth_type, str):
            raise TypeError("Expected argument 'bandwidth_type' to be a str")
        pulumi.set(__self__, "bandwidth_type", bandwidth_type)
        if billing_info and not isinstance(billing_info, str):
            raise TypeError("Expected argument 'billing_info' to be a str")
        pulumi.set(__self__, "billing_info", billing_info)
        if charge_mode and not isinstance(charge_mode, str):
            raise TypeError("Expected argument 'charge_mode' to be a str")
        pulumi.set(__self__, "charge_mode", charge_mode)
        if eip_bandwidths and not isinstance(eip_bandwidths, list):
            raise TypeError("Expected argument 'eip_bandwidths' to be a list")
        pulumi.set(__self__, "eip_bandwidths", eip_bandwidths)
        if enable_bandwidth_rules and not isinstance(enable_bandwidth_rules, str):
            raise TypeError("Expected argument 'enable_bandwidth_rules' to be a str")
        pulumi.set(__self__, "enable_bandwidth_rules", enable_bandwidth_rules)
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ingress_size and not isinstance(ingress_size, str):
            raise TypeError("Expected argument 'ingress_size' to be a str")
        pulumi.set(__self__, "ingress_size", ingress_size)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_like and not isinstance(name_like, str):
            raise TypeError("Expected argument 'name_like' to be a str")
        pulumi.set(__self__, "name_like", name_like)
        if public_border_group and not isinstance(public_border_group, str):
            raise TypeError("Expected argument 'public_border_group' to be a str")
        pulumi.set(__self__, "public_border_group", public_border_group)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_quota and not isinstance(rule_quota, int):
            raise TypeError("Expected argument 'rule_quota' to be a int")
        pulumi.set(__self__, "rule_quota", rule_quota)
        if size and not isinstance(size, str):
            raise TypeError("Expected argument 'size' to be a str")
        pulumi.set(__self__, "size", size)
        if tags and not isinstance(tags, str):
            raise TypeError("Expected argument 'tags' to be a str")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[_builtins.str]:
        """
        Indicates the bandwidth status.
        """
        return pulumi.get(self, "admin_state")

    @_builtins.property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> Optional[_builtins.str]:
        """
        Indicates the bandwidth type.
        """
        return pulumi.get(self, "bandwidth_type")

    @_builtins.property
    @pulumi.getter(name="billingInfo")
    def billing_info(self) -> Optional[_builtins.str]:
        """
        Indicates the Bill information.
        """
        return pulumi.get(self, "billing_info")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="eipBandwidths")
    def eip_bandwidths(self) -> Sequence['outputs.GetBandwidthsV3EipBandwidthResult']:
        """
        Indicates the list of bandwidths.
        """
        return pulumi.get(self, "eip_bandwidths")

    @_builtins.property
    @pulumi.getter(name="enableBandwidthRules")
    def enable_bandwidth_rules(self) -> Optional[_builtins.str]:
        """
        Indicates whether bandwidth groups are enabled.
        """
        return pulumi.get(self, "enable_bandwidth_rules")

    @_builtins.property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "fields")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ingressSize")
    def ingress_size(self) -> Optional[_builtins.str]:
        """
        Indicates the network access size, in Mbit/s.
        """
        return pulumi.get(self, "ingress_size")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the bandwidth rule name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameLike")
    def name_like(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name_like")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> Optional[_builtins.str]:
        """
        Indicates the bandwidth AZ attribute, which indicates the center and edge.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleQuota")
    def rule_quota(self) -> Optional[_builtins.int]:
        """
        Indicates the rule value.
        """
        return pulumi.get(self, "rule_quota")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.str]:
        """
        Indicates the bandwidth size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[_builtins.str]:
        """
        Indicates the EIP tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the bandwidth type.
        """
        return pulumi.get(self, "type")


class AwaitableGetBandwidthsV3Result(GetBandwidthsV3Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBandwidthsV3Result(
            admin_state=self.admin_state,
            bandwidth_type=self.bandwidth_type,
            billing_info=self.billing_info,
            charge_mode=self.charge_mode,
            eip_bandwidths=self.eip_bandwidths,
            enable_bandwidth_rules=self.enable_bandwidth_rules,
            fields=self.fields,
            id=self.id,
            ingress_size=self.ingress_size,
            name=self.name,
            name_like=self.name_like,
            public_border_group=self.public_border_group,
            region=self.region,
            rule_quota=self.rule_quota,
            size=self.size,
            tags=self.tags,
            type=self.type)


def get_bandwidths_v3(admin_state: Optional[_builtins.str] = None,
                      bandwidth_type: Optional[_builtins.str] = None,
                      billing_info: Optional[_builtins.str] = None,
                      charge_mode: Optional[_builtins.str] = None,
                      enable_bandwidth_rules: Optional[_builtins.str] = None,
                      fields: Optional[Sequence[_builtins.str]] = None,
                      ingress_size: Optional[_builtins.str] = None,
                      name: Optional[_builtins.str] = None,
                      name_like: Optional[_builtins.str] = None,
                      public_border_group: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      rule_quota: Optional[_builtins.int] = None,
                      size: Optional[_builtins.str] = None,
                      tags: Optional[_builtins.str] = None,
                      type: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBandwidthsV3Result:
    """
    Use this data source to get the list of EIP bandwidths.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Vpc.get_bandwidths_v3()
    ```


    :param _builtins.str admin_state: Specifies the status of the bandwidth.
    :param _builtins.str bandwidth_type: Specifies the type of the bandwidth.
           Value options:
           + **share**: Shared Bandwidth
           + **bgp**: Dynamic BGP
           + **telcom**: China Unicom
           + **sbgp**: Static BGP
    :param _builtins.str billing_info: Specifies the charging information of the bandwidth.
    :param _builtins.str charge_mode: Specifies the charging of the bandwidth.
           Value options: **bandwidth**, **traffic** and **95peak_plus**.
    :param _builtins.str enable_bandwidth_rules: Specifies whether bandwidth groups are enabled.
           Value options: **true**, **false**.
    :param Sequence[_builtins.str] fields: Specifies the display fields of the bandwidth.
           Value options: **id**, **name**, **tenant_id**, **size**, **ratio_95peak_plus**, **ingress_size**, **bandwidth_type**,
           **admin_state**, **billing_info**, **charge_mode**, **type**, **publicip_info**, **enable_bandwidth_rules**,
           **rule_quota**, **bandwidth_rules**, **public_border_group**, **created_at**, **updated_at**, **lock_infos**.
    :param _builtins.str ingress_size: Specifies the cloud access size.
    :param _builtins.str name: Specifies the name of the bandwidth.
    :param _builtins.str name_like: Specifies the fuzzy query name.
    :param _builtins.str public_border_group: Specifies the border group of the bandwidth.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.int rule_quota: Specifies the rule value of the bandwidth.
    :param _builtins.str size: Specifies the size of the bandwidth.
    :param _builtins.str tags: Specifies the tag of the bandwidth.
    :param _builtins.str type: Specifies the type of the bandwidth.
           Value options:
           + **WHOLE**: shared bandwidth
           + **PER**: exclusive bandwidth
    """
    __args__ = dict()
    __args__['adminState'] = admin_state
    __args__['bandwidthType'] = bandwidth_type
    __args__['billingInfo'] = billing_info
    __args__['chargeMode'] = charge_mode
    __args__['enableBandwidthRules'] = enable_bandwidth_rules
    __args__['fields'] = fields
    __args__['ingressSize'] = ingress_size
    __args__['name'] = name
    __args__['nameLike'] = name_like
    __args__['publicBorderGroup'] = public_border_group
    __args__['region'] = region
    __args__['ruleQuota'] = rule_quota
    __args__['size'] = size
    __args__['tags'] = tags
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getBandwidthsV3:getBandwidthsV3', __args__, opts=opts, typ=GetBandwidthsV3Result).value

    return AwaitableGetBandwidthsV3Result(
        admin_state=pulumi.get(__ret__, 'admin_state'),
        bandwidth_type=pulumi.get(__ret__, 'bandwidth_type'),
        billing_info=pulumi.get(__ret__, 'billing_info'),
        charge_mode=pulumi.get(__ret__, 'charge_mode'),
        eip_bandwidths=pulumi.get(__ret__, 'eip_bandwidths'),
        enable_bandwidth_rules=pulumi.get(__ret__, 'enable_bandwidth_rules'),
        fields=pulumi.get(__ret__, 'fields'),
        id=pulumi.get(__ret__, 'id'),
        ingress_size=pulumi.get(__ret__, 'ingress_size'),
        name=pulumi.get(__ret__, 'name'),
        name_like=pulumi.get(__ret__, 'name_like'),
        public_border_group=pulumi.get(__ret__, 'public_border_group'),
        region=pulumi.get(__ret__, 'region'),
        rule_quota=pulumi.get(__ret__, 'rule_quota'),
        size=pulumi.get(__ret__, 'size'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_bandwidths_v3_output(admin_state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             bandwidth_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             billing_info: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             charge_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             enable_bandwidth_rules: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             fields: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                             ingress_size: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             name_like: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             public_border_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             rule_quota: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                             size: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             tags: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBandwidthsV3Result]:
    """
    Use this data source to get the list of EIP bandwidths.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Vpc.get_bandwidths_v3()
    ```


    :param _builtins.str admin_state: Specifies the status of the bandwidth.
    :param _builtins.str bandwidth_type: Specifies the type of the bandwidth.
           Value options:
           + **share**: Shared Bandwidth
           + **bgp**: Dynamic BGP
           + **telcom**: China Unicom
           + **sbgp**: Static BGP
    :param _builtins.str billing_info: Specifies the charging information of the bandwidth.
    :param _builtins.str charge_mode: Specifies the charging of the bandwidth.
           Value options: **bandwidth**, **traffic** and **95peak_plus**.
    :param _builtins.str enable_bandwidth_rules: Specifies whether bandwidth groups are enabled.
           Value options: **true**, **false**.
    :param Sequence[_builtins.str] fields: Specifies the display fields of the bandwidth.
           Value options: **id**, **name**, **tenant_id**, **size**, **ratio_95peak_plus**, **ingress_size**, **bandwidth_type**,
           **admin_state**, **billing_info**, **charge_mode**, **type**, **publicip_info**, **enable_bandwidth_rules**,
           **rule_quota**, **bandwidth_rules**, **public_border_group**, **created_at**, **updated_at**, **lock_infos**.
    :param _builtins.str ingress_size: Specifies the cloud access size.
    :param _builtins.str name: Specifies the name of the bandwidth.
    :param _builtins.str name_like: Specifies the fuzzy query name.
    :param _builtins.str public_border_group: Specifies the border group of the bandwidth.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.int rule_quota: Specifies the rule value of the bandwidth.
    :param _builtins.str size: Specifies the size of the bandwidth.
    :param _builtins.str tags: Specifies the tag of the bandwidth.
    :param _builtins.str type: Specifies the type of the bandwidth.
           Value options:
           + **WHOLE**: shared bandwidth
           + **PER**: exclusive bandwidth
    """
    __args__ = dict()
    __args__['adminState'] = admin_state
    __args__['bandwidthType'] = bandwidth_type
    __args__['billingInfo'] = billing_info
    __args__['chargeMode'] = charge_mode
    __args__['enableBandwidthRules'] = enable_bandwidth_rules
    __args__['fields'] = fields
    __args__['ingressSize'] = ingress_size
    __args__['name'] = name
    __args__['nameLike'] = name_like
    __args__['publicBorderGroup'] = public_border_group
    __args__['region'] = region
    __args__['ruleQuota'] = rule_quota
    __args__['size'] = size
    __args__['tags'] = tags
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpc/getBandwidthsV3:getBandwidthsV3', __args__, opts=opts, typ=GetBandwidthsV3Result)
    return __ret__.apply(lambda __response__: GetBandwidthsV3Result(
        admin_state=pulumi.get(__response__, 'admin_state'),
        bandwidth_type=pulumi.get(__response__, 'bandwidth_type'),
        billing_info=pulumi.get(__response__, 'billing_info'),
        charge_mode=pulumi.get(__response__, 'charge_mode'),
        eip_bandwidths=pulumi.get(__response__, 'eip_bandwidths'),
        enable_bandwidth_rules=pulumi.get(__response__, 'enable_bandwidth_rules'),
        fields=pulumi.get(__response__, 'fields'),
        id=pulumi.get(__response__, 'id'),
        ingress_size=pulumi.get(__response__, 'ingress_size'),
        name=pulumi.get(__response__, 'name'),
        name_like=pulumi.get(__response__, 'name_like'),
        public_border_group=pulumi.get(__response__, 'public_border_group'),
        region=pulumi.get(__response__, 'region'),
        rule_quota=pulumi.get(__response__, 'rule_quota'),
        size=pulumi.get(__response__, 'size'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
