# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBandwidthLimitsResult',
    'AwaitableGetBandwidthLimitsResult',
    'get_bandwidth_limits',
    'get_bandwidth_limits_output',
]

@pulumi.output_type
class GetBandwidthLimitsResult:
    """
    A collection of values returned by getBandwidthLimits.
    """
    def __init__(__self__, charge_mode=None, eip_bandwidth_limits=None, id=None, region=None):
        if charge_mode and not isinstance(charge_mode, str):
            raise TypeError("Expected argument 'charge_mode' to be a str")
        pulumi.set(__self__, "charge_mode", charge_mode)
        if eip_bandwidth_limits and not isinstance(eip_bandwidth_limits, list):
            raise TypeError("Expected argument 'eip_bandwidth_limits' to be a list")
        pulumi.set(__self__, "eip_bandwidth_limits", eip_bandwidth_limits)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        Indicates the bandwidth charging mode.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="eipBandwidthLimits")
    def eip_bandwidth_limits(self) -> Sequence['outputs.GetBandwidthLimitsEipBandwidthLimitResult']:
        """
        Indicates the bandwidth limit list.
        """
        return pulumi.get(self, "eip_bandwidth_limits")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetBandwidthLimitsResult(GetBandwidthLimitsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBandwidthLimitsResult(
            charge_mode=self.charge_mode,
            eip_bandwidth_limits=self.eip_bandwidth_limits,
            id=self.id,
            region=self.region)


def get_bandwidth_limits(charge_mode: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBandwidthLimitsResult:
    """
    Use this data source to get a list of bandwidth limits.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Vpc.get_bandwidth_limits()
    ```


    :param _builtins.str charge_mode: Specifies the bandwidth charge mode.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['chargeMode'] = charge_mode
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getBandwidthLimits:getBandwidthLimits', __args__, opts=opts, typ=GetBandwidthLimitsResult).value

    return AwaitableGetBandwidthLimitsResult(
        charge_mode=pulumi.get(__ret__, 'charge_mode'),
        eip_bandwidth_limits=pulumi.get(__ret__, 'eip_bandwidth_limits'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_bandwidth_limits_output(charge_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBandwidthLimitsResult]:
    """
    Use this data source to get a list of bandwidth limits.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Vpc.get_bandwidth_limits()
    ```


    :param _builtins.str charge_mode: Specifies the bandwidth charge mode.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['chargeMode'] = charge_mode
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpc/getBandwidthLimits:getBandwidthLimits', __args__, opts=opts, typ=GetBandwidthLimitsResult)
    return __ret__.apply(lambda __response__: GetBandwidthLimitsResult(
        charge_mode=pulumi.get(__response__, 'charge_mode'),
        eip_bandwidth_limits=pulumi.get(__response__, 'eip_bandwidth_limits'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
