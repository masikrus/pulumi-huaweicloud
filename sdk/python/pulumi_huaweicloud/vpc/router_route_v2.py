# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['RouterRouteV2Args', 'RouterRouteV2']

@pulumi.input_type
class RouterRouteV2Args:
    def __init__(__self__, *,
                 destination_cidr: pulumi.Input[_builtins.str],
                 next_hop: pulumi.Input[_builtins.str],
                 router_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RouterRouteV2 resource.
        :param pulumi.Input[_builtins.str] destination_cidr: CIDR block to match on the packet’s destination IP. Changing this
               creates a new routing entry.
        :param pulumi.Input[_builtins.str] next_hop: IP address of the next hop gateway. Changing this creates a new routing
               entry.
        :param pulumi.Input[_builtins.str] router_id: ID of the router this routing entry belongs to. Changing this creates a new
               routing entry.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 networking client. A networking client is
               needed to configure a routing entry on a router. If omitted, the
               `region` argument of the provider is used. Changing this creates a new routing entry.
        """
        pulumi.set(__self__, "destination_cidr", destination_cidr)
        pulumi.set(__self__, "next_hop", next_hop)
        pulumi.set(__self__, "router_id", router_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> pulumi.Input[_builtins.str]:
        """
        CIDR block to match on the packet’s destination IP. Changing this
        creates a new routing entry.
        """
        return pulumi.get(self, "destination_cidr")

    @destination_cidr.setter
    def destination_cidr(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_cidr", value)

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> pulumi.Input[_builtins.str]:
        """
        IP address of the next hop gateway. Changing this creates a new routing
        entry.
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "next_hop", value)

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of the router this routing entry belongs to. Changing this creates a new
        routing entry.
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "router_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the V2 networking client. A networking client is
        needed to configure a routing entry on a router. If omitted, the
        `region` argument of the provider is used. Changing this creates a new routing entry.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _RouterRouteV2State:
    def __init__(__self__, *,
                 destination_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RouterRouteV2 resources.
        :param pulumi.Input[_builtins.str] destination_cidr: CIDR block to match on the packet’s destination IP. Changing this
               creates a new routing entry.
        :param pulumi.Input[_builtins.str] next_hop: IP address of the next hop gateway. Changing this creates a new routing
               entry.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 networking client. A networking client is
               needed to configure a routing entry on a router. If omitted, the
               `region` argument of the provider is used. Changing this creates a new routing entry.
        :param pulumi.Input[_builtins.str] router_id: ID of the router this routing entry belongs to. Changing this creates a new
               routing entry.
        """
        if destination_cidr is not None:
            pulumi.set(__self__, "destination_cidr", destination_cidr)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)

    @_builtins.property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIDR block to match on the packet’s destination IP. Changing this
        creates a new routing entry.
        """
        return pulumi.get(self, "destination_cidr")

    @destination_cidr.setter
    def destination_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_cidr", value)

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP address of the next hop gateway. Changing this creates a new routing
        entry.
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the V2 networking client. A networking client is
        needed to configure a routing entry on a router. If omitted, the
        `region` argument of the provider is used. Changing this creates a new routing entry.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the router this routing entry belongs to. Changing this creates a new
        routing entry.
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_id", value)


@pulumi.type_token("huaweicloud:Vpc/routerRouteV2:RouterRouteV2")
class RouterRouteV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Creates a routing entry on a HuaweiCloud V2 router.

        !> **WARNING:** It has been deprecated, use `Vpc.Route` instead.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        router1 = huaweicloud.vpc.RouterV2("router_1",
            name="router_1",
            admin_state_up=True)
        network1 = huaweicloud.vpc.NetworkV2("network_1",
            name="network_1",
            admin_state_up="true")
        subnet1 = huaweicloud.vpc.SubnetV2("subnet_1",
            network_id=network1.id,
            cidr="192.168.199.0/24",
            ip_version=4)
        int1 = huaweicloud.vpc.RouterInterfaceV2("int_1",
            router_id=router1.id,
            subnet_id=subnet1.id)
        router_route1 = huaweicloud.vpc.RouterRouteV2("router_route_1",
            router_id=router1.id,
            destination_cidr="10.0.1.0/24",
            next_hop="192.168.199.254",
            opts = pulumi.ResourceOptions(depends_on=[int1]))
        ```

        ## Notes

        The `next_hop` IP address must be directly reachable from the router at the ``Vpc.RouterRouteV2``
        resource creation time. You can ensure that by explicitly specifying a dependency on
        the ``Vpc.RouterInterfaceV2``
        resource that connects the next hop to the router, as in the example above.

        ## Import

        Routing entries can be imported using a combined ID using the following

        format: ``<router_id>-route-<destination_cidr>-<next_hop>``

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/routerRouteV2:RouterRouteV2 router_route_1 686fe248-386c-4f70-9f6c-281607dad079-route-10.0.1.0/24-192.168.199.25
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] destination_cidr: CIDR block to match on the packet’s destination IP. Changing this
               creates a new routing entry.
        :param pulumi.Input[_builtins.str] next_hop: IP address of the next hop gateway. Changing this creates a new routing
               entry.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 networking client. A networking client is
               needed to configure a routing entry on a router. If omitted, the
               `region` argument of the provider is used. Changing this creates a new routing entry.
        :param pulumi.Input[_builtins.str] router_id: ID of the router this routing entry belongs to. Changing this creates a new
               routing entry.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouterRouteV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a routing entry on a HuaweiCloud V2 router.

        !> **WARNING:** It has been deprecated, use `Vpc.Route` instead.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        router1 = huaweicloud.vpc.RouterV2("router_1",
            name="router_1",
            admin_state_up=True)
        network1 = huaweicloud.vpc.NetworkV2("network_1",
            name="network_1",
            admin_state_up="true")
        subnet1 = huaweicloud.vpc.SubnetV2("subnet_1",
            network_id=network1.id,
            cidr="192.168.199.0/24",
            ip_version=4)
        int1 = huaweicloud.vpc.RouterInterfaceV2("int_1",
            router_id=router1.id,
            subnet_id=subnet1.id)
        router_route1 = huaweicloud.vpc.RouterRouteV2("router_route_1",
            router_id=router1.id,
            destination_cidr="10.0.1.0/24",
            next_hop="192.168.199.254",
            opts = pulumi.ResourceOptions(depends_on=[int1]))
        ```

        ## Notes

        The `next_hop` IP address must be directly reachable from the router at the ``Vpc.RouterRouteV2``
        resource creation time. You can ensure that by explicitly specifying a dependency on
        the ``Vpc.RouterInterfaceV2``
        resource that connects the next hop to the router, as in the example above.

        ## Import

        Routing entries can be imported using a combined ID using the following

        format: ``<router_id>-route-<destination_cidr>-<next_hop>``

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/routerRouteV2:RouterRouteV2 router_route_1 686fe248-386c-4f70-9f6c-281607dad079-route-10.0.1.0/24-192.168.199.25
        ```

        :param str resource_name: The name of the resource.
        :param RouterRouteV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouterRouteV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouterRouteV2Args.__new__(RouterRouteV2Args)

            if destination_cidr is None and not opts.urn:
                raise TypeError("Missing required property 'destination_cidr'")
            __props__.__dict__["destination_cidr"] = destination_cidr
            if next_hop is None and not opts.urn:
                raise TypeError("Missing required property 'next_hop'")
            __props__.__dict__["next_hop"] = next_hop
            __props__.__dict__["region"] = region
            if router_id is None and not opts.urn:
                raise TypeError("Missing required property 'router_id'")
            __props__.__dict__["router_id"] = router_id
        super(RouterRouteV2, __self__).__init__(
            'huaweicloud:Vpc/routerRouteV2:RouterRouteV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            destination_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            next_hop: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            router_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'RouterRouteV2':
        """
        Get an existing RouterRouteV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] destination_cidr: CIDR block to match on the packet’s destination IP. Changing this
               creates a new routing entry.
        :param pulumi.Input[_builtins.str] next_hop: IP address of the next hop gateway. Changing this creates a new routing
               entry.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 networking client. A networking client is
               needed to configure a routing entry on a router. If omitted, the
               `region` argument of the provider is used. Changing this creates a new routing entry.
        :param pulumi.Input[_builtins.str] router_id: ID of the router this routing entry belongs to. Changing this creates a new
               routing entry.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouterRouteV2State.__new__(_RouterRouteV2State)

        __props__.__dict__["destination_cidr"] = destination_cidr
        __props__.__dict__["next_hop"] = next_hop
        __props__.__dict__["region"] = region
        __props__.__dict__["router_id"] = router_id
        return RouterRouteV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> pulumi.Output[_builtins.str]:
        """
        CIDR block to match on the packet’s destination IP. Changing this
        creates a new routing entry.
        """
        return pulumi.get(self, "destination_cidr")

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> pulumi.Output[_builtins.str]:
        """
        IP address of the next hop gateway. Changing this creates a new routing
        entry.
        """
        return pulumi.get(self, "next_hop")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the V2 networking client. A networking client is
        needed to configure a routing entry on a router. If omitted, the
        `region` argument of the provider is used. Changing this creates a new routing entry.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the router this routing entry belongs to. Changing this creates a new
        routing entry.
        """
        return pulumi.get(self, "router_id")

