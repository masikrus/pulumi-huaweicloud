# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkV2Args', 'NetworkV2']

@pulumi.input_type
class NetworkV2Args:
    def __init__(__self__, *,
                 admin_state_up: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 segments: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkV2SegmentArgs']]]] = None,
                 shared: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a NetworkV2 resource.
        :param pulumi.Input[_builtins.str] admin_state_up: The administrative state of the network. Acceptable values are "true" and "
               false". Changing this value updates the state of the existing network.
        :param pulumi.Input[_builtins.str] name: The name of the network. Changing this updates the name of the existing network.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Networking client. A Networking client is
               needed to create a Neutron network. If omitted, the
               `region` argument of the provider is used. Changing this creates a new network.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkV2SegmentArgs']]] segments: An array of one or more provider segment objects.
        :param pulumi.Input[_builtins.str] shared: Specifies whether the network resource can be accessed by any tenant or not. Changing
               this updates the sharing capabilities of the existing network.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if segments is not None:
            pulumi.set(__self__, "segments", segments)
        if shared is not None:
            pulumi.set(__self__, "shared", shared)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The administrative state of the network. Acceptable values are "true" and "
        false". Changing this value updates the state of the existing network.
        """
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_state_up", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the network. Changing this updates the name of the existing network.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the V2 Networking client. A Networking client is
        needed to create a Neutron network. If omitted, the
        `region` argument of the provider is used. Changing this creates a new network.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def segments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkV2SegmentArgs']]]]:
        """
        An array of one or more provider segment objects.
        """
        return pulumi.get(self, "segments")

    @segments.setter
    def segments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkV2SegmentArgs']]]]):
        pulumi.set(self, "segments", value)

    @_builtins.property
    @pulumi.getter
    def shared(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the network resource can be accessed by any tenant or not. Changing
        this updates the sharing capabilities of the existing network.
        """
        return pulumi.get(self, "shared")

    @shared.setter
    def shared(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shared", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.input_type
class _NetworkV2State:
    def __init__(__self__, *,
                 admin_state_up: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 segments: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkV2SegmentArgs']]]] = None,
                 shared: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering NetworkV2 resources.
        :param pulumi.Input[_builtins.str] admin_state_up: The administrative state of the network. Acceptable values are "true" and "
               false". Changing this value updates the state of the existing network.
        :param pulumi.Input[_builtins.str] name: The name of the network. Changing this updates the name of the existing network.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Networking client. A Networking client is
               needed to create a Neutron network. If omitted, the
               `region` argument of the provider is used. Changing this creates a new network.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkV2SegmentArgs']]] segments: An array of one or more provider segment objects.
        :param pulumi.Input[_builtins.str] shared: Specifies whether the network resource can be accessed by any tenant or not. Changing
               this updates the sharing capabilities of the existing network.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if segments is not None:
            pulumi.set(__self__, "segments", segments)
        if shared is not None:
            pulumi.set(__self__, "shared", shared)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The administrative state of the network. Acceptable values are "true" and "
        false". Changing this value updates the state of the existing network.
        """
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_state_up", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the network. Changing this updates the name of the existing network.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the V2 Networking client. A Networking client is
        needed to create a Neutron network. If omitted, the
        `region` argument of the provider is used. Changing this creates a new network.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def segments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkV2SegmentArgs']]]]:
        """
        An array of one or more provider segment objects.
        """
        return pulumi.get(self, "segments")

    @segments.setter
    def segments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkV2SegmentArgs']]]]):
        pulumi.set(self, "segments", value)

    @_builtins.property
    @pulumi.getter
    def shared(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the network resource can be accessed by any tenant or not. Changing
        this updates the sharing capabilities of the existing network.
        """
        return pulumi.get(self, "shared")

    @shared.setter
    def shared(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shared", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.type_token("huaweicloud:Vpc/networkV2:NetworkV2")
class NetworkV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 segments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkV2SegmentArgs', 'NetworkV2SegmentArgsDict']]]]] = None,
                 shared: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a V2 Neutron network resource within HuaweiCloud.

        !> **WARNING:** It has been deprecated, use `Vpc.Subnet` instead.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        network1 = huaweicloud.vpc.NetworkV2("network_1",
            name="network_1",
            admin_state_up="true")
        subnet1 = huaweicloud.vpc.SubnetV2("subnet_1",
            name="subnet_1",
            network_id=network1.id,
            cidr="192.168.199.0/24",
            ip_version=4)
        secgroup1 = huaweicloud.vpc.Secgroup("secgroup_1",
            name="secgroup_1",
            description="a security group")
        secgroup_rule1 = huaweicloud.vpc.SecgroupRule("secgroup_rule_1",
            direction="ingress",
            ethertype="IPv4",
            port_range_max=22,
            port_range_min=22,
            protocol="tcp",
            remote_ip_prefix="0.0.0.0/0",
            security_group_id=secgroup1.id)
        port1 = huaweicloud.vpc.PortV2("port_1",
            name="port_1",
            network_id=network1.id,
            admin_state_up=True,
            security_group_ids=[secgroup1.id],
            fixed_ips=[{
                "subnet_id": subnet1.id,
                "ip_address": "192.168.199.10",
            }])
        instance1 = huaweicloud.ecs.InstanceV2("instance_1",
            name="instance_1",
            security_groups=[secgroup1.name],
            networks=[{
                "port": port1.id,
            }])
        ```

        ## Import

        Networks can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/networkV2:NetworkV2 network_1 d90ce693-5ccf-4136-a0ed-152ce412b6b9
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] admin_state_up: The administrative state of the network. Acceptable values are "true" and "
               false". Changing this value updates the state of the existing network.
        :param pulumi.Input[_builtins.str] name: The name of the network. Changing this updates the name of the existing network.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Networking client. A Networking client is
               needed to create a Neutron network. If omitted, the
               `region` argument of the provider is used. Changing this creates a new network.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkV2SegmentArgs', 'NetworkV2SegmentArgsDict']]]] segments: An array of one or more provider segment objects.
        :param pulumi.Input[_builtins.str] shared: Specifies whether the network resource can be accessed by any tenant or not. Changing
               this updates the sharing capabilities of the existing network.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NetworkV2Args] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a V2 Neutron network resource within HuaweiCloud.

        !> **WARNING:** It has been deprecated, use `Vpc.Subnet` instead.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        network1 = huaweicloud.vpc.NetworkV2("network_1",
            name="network_1",
            admin_state_up="true")
        subnet1 = huaweicloud.vpc.SubnetV2("subnet_1",
            name="subnet_1",
            network_id=network1.id,
            cidr="192.168.199.0/24",
            ip_version=4)
        secgroup1 = huaweicloud.vpc.Secgroup("secgroup_1",
            name="secgroup_1",
            description="a security group")
        secgroup_rule1 = huaweicloud.vpc.SecgroupRule("secgroup_rule_1",
            direction="ingress",
            ethertype="IPv4",
            port_range_max=22,
            port_range_min=22,
            protocol="tcp",
            remote_ip_prefix="0.0.0.0/0",
            security_group_id=secgroup1.id)
        port1 = huaweicloud.vpc.PortV2("port_1",
            name="port_1",
            network_id=network1.id,
            admin_state_up=True,
            security_group_ids=[secgroup1.id],
            fixed_ips=[{
                "subnet_id": subnet1.id,
                "ip_address": "192.168.199.10",
            }])
        instance1 = huaweicloud.ecs.InstanceV2("instance_1",
            name="instance_1",
            security_groups=[secgroup1.name],
            networks=[{
                "port": port1.id,
            }])
        ```

        ## Import

        Networks can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/networkV2:NetworkV2 network_1 d90ce693-5ccf-4136-a0ed-152ce412b6b9
        ```

        :param str resource_name: The name of the resource.
        :param NetworkV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 segments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkV2SegmentArgs', 'NetworkV2SegmentArgsDict']]]]] = None,
                 shared: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkV2Args.__new__(NetworkV2Args)

            __props__.__dict__["admin_state_up"] = admin_state_up
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["segments"] = segments
            __props__.__dict__["shared"] = shared
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["value_specs"] = value_specs
        super(NetworkV2, __self__).__init__(
            'huaweicloud:Vpc/networkV2:NetworkV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_state_up: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            segments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkV2SegmentArgs', 'NetworkV2SegmentArgsDict']]]]] = None,
            shared: Optional[pulumi.Input[_builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'NetworkV2':
        """
        Get an existing NetworkV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] admin_state_up: The administrative state of the network. Acceptable values are "true" and "
               false". Changing this value updates the state of the existing network.
        :param pulumi.Input[_builtins.str] name: The name of the network. Changing this updates the name of the existing network.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Networking client. A Networking client is
               needed to create a Neutron network. If omitted, the
               `region` argument of the provider is used. Changing this creates a new network.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkV2SegmentArgs', 'NetworkV2SegmentArgsDict']]]] segments: An array of one or more provider segment objects.
        :param pulumi.Input[_builtins.str] shared: Specifies whether the network resource can be accessed by any tenant or not. Changing
               this updates the sharing capabilities of the existing network.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkV2State.__new__(_NetworkV2State)

        __props__.__dict__["admin_state_up"] = admin_state_up
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["segments"] = segments
        __props__.__dict__["shared"] = shared
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["value_specs"] = value_specs
        return NetworkV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> pulumi.Output[_builtins.str]:
        """
        The administrative state of the network. Acceptable values are "true" and "
        false". Changing this value updates the state of the existing network.
        """
        return pulumi.get(self, "admin_state_up")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the network. Changing this updates the name of the existing network.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the V2 Networking client. A Networking client is
        needed to create a Neutron network. If omitted, the
        `region` argument of the provider is used. Changing this creates a new network.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def segments(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkV2Segment']]]:
        """
        An array of one or more provider segment objects.
        """
        return pulumi.get(self, "segments")

    @_builtins.property
    @pulumi.getter
    def shared(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether the network resource can be accessed by any tenant or not. Changing
        this updates the sharing capabilities of the existing network.
        """
        return pulumi.get(self, "shared")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

