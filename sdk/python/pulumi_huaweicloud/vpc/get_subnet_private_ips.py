# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSubnetPrivateIpsResult',
    'AwaitableGetSubnetPrivateIpsResult',
    'get_subnet_private_ips',
    'get_subnet_private_ips_output',
]

@pulumi.output_type
class GetSubnetPrivateIpsResult:
    """
    A collection of values returned by getSubnetPrivateIps.
    """
    def __init__(__self__, id=None, private_ips=None, region=None, subnet_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if private_ips and not isinstance(private_ips, list):
            raise TypeError("Expected argument 'private_ips' to be a list")
        pulumi.set(__self__, "private_ips", private_ips)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence['outputs.GetSubnetPrivateIpsPrivateIpResult']:
        """
        The list of private IP addresses.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the subnet from which IP addresses are assigned.
        """
        return pulumi.get(self, "subnet_id")


class AwaitableGetSubnetPrivateIpsResult(GetSubnetPrivateIpsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubnetPrivateIpsResult(
            id=self.id,
            private_ips=self.private_ips,
            region=self.region,
            subnet_id=self.subnet_id)


def get_subnet_private_ips(region: Optional[_builtins.str] = None,
                           subnet_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubnetPrivateIpsResult:
    """
    Use this data source to get a list of private IPs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    subnet_id = config.require_object("subnetId")
    test = huaweicloud.Vpc.get_subnet_private_ips(subnet_id=subnet_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str subnet_id: Specifies the ID of the subnet that the private IP address belongs to.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['subnetId'] = subnet_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getSubnetPrivateIps:getSubnetPrivateIps', __args__, opts=opts, typ=GetSubnetPrivateIpsResult).value

    return AwaitableGetSubnetPrivateIpsResult(
        id=pulumi.get(__ret__, 'id'),
        private_ips=pulumi.get(__ret__, 'private_ips'),
        region=pulumi.get(__ret__, 'region'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'))
def get_subnet_private_ips_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSubnetPrivateIpsResult]:
    """
    Use this data source to get a list of private IPs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    subnet_id = config.require_object("subnetId")
    test = huaweicloud.Vpc.get_subnet_private_ips(subnet_id=subnet_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str subnet_id: Specifies the ID of the subnet that the private IP address belongs to.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['subnetId'] = subnet_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpc/getSubnetPrivateIps:getSubnetPrivateIps', __args__, opts=opts, typ=GetSubnetPrivateIpsResult)
    return __ret__.apply(lambda __response__: GetSubnetPrivateIpsResult(
        id=pulumi.get(__response__, 'id'),
        private_ips=pulumi.get(__response__, 'private_ips'),
        region=pulumi.get(__response__, 'region'),
        subnet_id=pulumi.get(__response__, 'subnet_id')))
