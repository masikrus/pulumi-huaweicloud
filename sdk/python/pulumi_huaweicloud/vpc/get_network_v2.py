# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetNetworkV2Result',
    'AwaitableGetNetworkV2Result',
    'get_network_v2',
    'get_network_v2_output',
]

@pulumi.output_type
class GetNetworkV2Result:
    """
    A collection of values returned by getNetworkV2.
    """
    def __init__(__self__, admin_state_up=None, id=None, matching_subnet_cidr=None, name=None, network_id=None, region=None, shared=None, status=None, tenant_id=None):
        if admin_state_up and not isinstance(admin_state_up, str):
            raise TypeError("Expected argument 'admin_state_up' to be a str")
        pulumi.set(__self__, "admin_state_up", admin_state_up)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if matching_subnet_cidr and not isinstance(matching_subnet_cidr, str):
            raise TypeError("Expected argument 'matching_subnet_cidr' to be a str")
        pulumi.set(__self__, "matching_subnet_cidr", matching_subnet_cidr)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if shared and not isinstance(shared, str):
            raise TypeError("Expected argument 'shared' to be a str")
        pulumi.set(__self__, "shared", shared)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> _builtins.str:
        """
        The administrative state of the network.
        """
        return pulumi.get(self, "admin_state_up")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="matchingSubnetCidr")
    def matching_subnet_cidr(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "matching_subnet_cidr")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def shared(self) -> _builtins.str:
        """
        Specifies whether the network resource can be accessed by any tenant or not.
        """
        return pulumi.get(self, "shared")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tenant_id")


class AwaitableGetNetworkV2Result(GetNetworkV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkV2Result(
            admin_state_up=self.admin_state_up,
            id=self.id,
            matching_subnet_cidr=self.matching_subnet_cidr,
            name=self.name,
            network_id=self.network_id,
            region=self.region,
            shared=self.shared,
            status=self.status,
            tenant_id=self.tenant_id)


def get_network_v2(matching_subnet_cidr: Optional[_builtins.str] = None,
                   name: Optional[_builtins.str] = None,
                   network_id: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   status: Optional[_builtins.str] = None,
                   tenant_id: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkV2Result:
    """
    Use this data source to get the ID of an available HuaweiCloud network.

    !> **WARNING:** It has been deprecated, use `Vpc.Subnet` instead.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    network = huaweicloud.Vpc.get_network_v2(name="tf_test_network")
    ```


    :param _builtins.str matching_subnet_cidr: The CIDR of a subnet within the network.
    :param _builtins.str name: The name of the network.
    :param _builtins.str network_id: The ID of the network.
    :param _builtins.str region: The region in which to obtain the V2 Neutron client. A Neutron client is needed to
           retrieve networks ids. If omitted, the
           `region` argument of the provider is used.
    :param _builtins.str status: The status of the network.
    """
    __args__ = dict()
    __args__['matchingSubnetCidr'] = matching_subnet_cidr
    __args__['name'] = name
    __args__['networkId'] = network_id
    __args__['region'] = region
    __args__['status'] = status
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getNetworkV2:getNetworkV2', __args__, opts=opts, typ=GetNetworkV2Result).value

    return AwaitableGetNetworkV2Result(
        admin_state_up=pulumi.get(__ret__, 'admin_state_up'),
        id=pulumi.get(__ret__, 'id'),
        matching_subnet_cidr=pulumi.get(__ret__, 'matching_subnet_cidr'),
        name=pulumi.get(__ret__, 'name'),
        network_id=pulumi.get(__ret__, 'network_id'),
        region=pulumi.get(__ret__, 'region'),
        shared=pulumi.get(__ret__, 'shared'),
        status=pulumi.get(__ret__, 'status'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_network_v2_output(matching_subnet_cidr: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          network_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          tenant_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkV2Result]:
    """
    Use this data source to get the ID of an available HuaweiCloud network.

    !> **WARNING:** It has been deprecated, use `Vpc.Subnet` instead.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    network = huaweicloud.Vpc.get_network_v2(name="tf_test_network")
    ```


    :param _builtins.str matching_subnet_cidr: The CIDR of a subnet within the network.
    :param _builtins.str name: The name of the network.
    :param _builtins.str network_id: The ID of the network.
    :param _builtins.str region: The region in which to obtain the V2 Neutron client. A Neutron client is needed to
           retrieve networks ids. If omitted, the
           `region` argument of the provider is used.
    :param _builtins.str status: The status of the network.
    """
    __args__ = dict()
    __args__['matchingSubnetCidr'] = matching_subnet_cidr
    __args__['name'] = name
    __args__['networkId'] = network_id
    __args__['region'] = region
    __args__['status'] = status
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpc/getNetworkV2:getNetworkV2', __args__, opts=opts, typ=GetNetworkV2Result)
    return __ret__.apply(lambda __response__: GetNetworkV2Result(
        admin_state_up=pulumi.get(__response__, 'admin_state_up'),
        id=pulumi.get(__response__, 'id'),
        matching_subnet_cidr=pulumi.get(__response__, 'matching_subnet_cidr'),
        name=pulumi.get(__response__, 'name'),
        network_id=pulumi.get(__response__, 'network_id'),
        region=pulumi.get(__response__, 'region'),
        shared=pulumi.get(__response__, 'shared'),
        status=pulumi.get(__response__, 'status'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
