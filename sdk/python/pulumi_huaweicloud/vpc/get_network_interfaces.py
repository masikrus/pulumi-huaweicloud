# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetNetworkInterfacesResult',
    'AwaitableGetNetworkInterfacesResult',
    'get_network_interfaces',
    'get_network_interfaces_output',
]

@pulumi.output_type
class GetNetworkInterfacesResult:
    """
    A collection of values returned by getNetworkInterfaces.
    """
    def __init__(__self__, device_id=None, device_owner=None, enable_efi=None, enterprise_project_id=None, fixed_ips=None, id=None, interface_ids=None, mac_address=None, name=None, network_id=None, ports=None, region=None, security_groups=None, status=None):
        if device_id and not isinstance(device_id, str):
            raise TypeError("Expected argument 'device_id' to be a str")
        pulumi.set(__self__, "device_id", device_id)
        if device_owner and not isinstance(device_owner, str):
            raise TypeError("Expected argument 'device_owner' to be a str")
        pulumi.set(__self__, "device_owner", device_owner)
        if enable_efi and not isinstance(enable_efi, bool):
            raise TypeError("Expected argument 'enable_efi' to be a bool")
        pulumi.set(__self__, "enable_efi", enable_efi)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if fixed_ips and not isinstance(fixed_ips, list):
            raise TypeError("Expected argument 'fixed_ips' to be a list")
        pulumi.set(__self__, "fixed_ips", fixed_ips)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_ids and not isinstance(interface_ids, list):
            raise TypeError("Expected argument 'interface_ids' to be a list")
        pulumi.set(__self__, "interface_ids", interface_ids)
        if mac_address and not isinstance(mac_address, str):
            raise TypeError("Expected argument 'mac_address' to be a str")
        pulumi.set(__self__, "mac_address", mac_address)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if ports and not isinstance(ports, list):
            raise TypeError("Expected argument 'ports' to be a list")
        pulumi.set(__self__, "ports", ports)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[_builtins.str]:
        """
        The ID of the device that the interface belongs to.
        """
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter(name="deviceOwner")
    def device_owner(self) -> Optional[_builtins.str]:
        """
        The device owner.
        """
        return pulumi.get(self, "device_owner")

    @_builtins.property
    @pulumi.getter(name="enableEfi")
    def enable_efi(self) -> Optional[_builtins.bool]:
        """
        Whether to enable EFI.
        """
        return pulumi.get(self, "enable_efi")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="fixedIps")
    def fixed_ips(self) -> Optional[Sequence[_builtins.str]]:
        """
        The interface IP addresses.
        """
        return pulumi.get(self, "fixed_ips")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interfaceIds")
    def interface_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "interface_ids")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        The MAC address.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The interface name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[_builtins.str]:
        """
        The ID of the network that the interface belongs to.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetNetworkInterfacesPortResult']:
        """
        The list of interfaces.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[_builtins.str]]:
        """
        The interface security group IDs.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The interface status.
        """
        return pulumi.get(self, "status")


class AwaitableGetNetworkInterfacesResult(GetNetworkInterfacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkInterfacesResult(
            device_id=self.device_id,
            device_owner=self.device_owner,
            enable_efi=self.enable_efi,
            enterprise_project_id=self.enterprise_project_id,
            fixed_ips=self.fixed_ips,
            id=self.id,
            interface_ids=self.interface_ids,
            mac_address=self.mac_address,
            name=self.name,
            network_id=self.network_id,
            ports=self.ports,
            region=self.region,
            security_groups=self.security_groups,
            status=self.status)


def get_network_interfaces(device_id: Optional[_builtins.str] = None,
                           device_owner: Optional[_builtins.str] = None,
                           enable_efi: Optional[_builtins.bool] = None,
                           enterprise_project_id: Optional[_builtins.str] = None,
                           fixed_ips: Optional[Sequence[_builtins.str]] = None,
                           interface_ids: Optional[Sequence[_builtins.str]] = None,
                           mac_address: Optional[_builtins.str] = None,
                           name: Optional[_builtins.str] = None,
                           network_id: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           security_groups: Optional[Sequence[_builtins.str]] = None,
                           status: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkInterfacesResult:
    """
    Use this data-source to get a list of network interfaces.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Vpc.get_network_interfaces()
    ```


    :param _builtins.str device_id: Specifies the device ID of the interface.
    :param _builtins.str device_owner: Specifies the device owner of the interface.
    :param _builtins.bool enable_efi: Specifies whether EFI is enabled .
    :param _builtins.str enterprise_project_id: Specifies the enterprise_project ID of the interface.
           The default value is **set all_granted_eps**.
    :param Sequence[_builtins.str] fixed_ips: Filter by fixed_ips=ip_address or fixed_ips=subnet_id.
    :param Sequence[_builtins.str] interface_ids: Specifies the ID of the interface.
    :param _builtins.str mac_address: Specifies the MAC address of the interface.
    :param _builtins.str name: Specifies the name of the interface.
    :param _builtins.str network_id: Specifies the network ID of the interface.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] security_groups: Specifies the security group IDs of the interface.
    :param _builtins.str status: Specifies the status of the interface.
           The value can be: **ACTIVE**, **BUILD** or **DOWN**.
    """
    __args__ = dict()
    __args__['deviceId'] = device_id
    __args__['deviceOwner'] = device_owner
    __args__['enableEfi'] = enable_efi
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['fixedIps'] = fixed_ips
    __args__['interfaceIds'] = interface_ids
    __args__['macAddress'] = mac_address
    __args__['name'] = name
    __args__['networkId'] = network_id
    __args__['region'] = region
    __args__['securityGroups'] = security_groups
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getNetworkInterfaces:getNetworkInterfaces', __args__, opts=opts, typ=GetNetworkInterfacesResult).value

    return AwaitableGetNetworkInterfacesResult(
        device_id=pulumi.get(__ret__, 'device_id'),
        device_owner=pulumi.get(__ret__, 'device_owner'),
        enable_efi=pulumi.get(__ret__, 'enable_efi'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        fixed_ips=pulumi.get(__ret__, 'fixed_ips'),
        id=pulumi.get(__ret__, 'id'),
        interface_ids=pulumi.get(__ret__, 'interface_ids'),
        mac_address=pulumi.get(__ret__, 'mac_address'),
        name=pulumi.get(__ret__, 'name'),
        network_id=pulumi.get(__ret__, 'network_id'),
        ports=pulumi.get(__ret__, 'ports'),
        region=pulumi.get(__ret__, 'region'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        status=pulumi.get(__ret__, 'status'))
def get_network_interfaces_output(device_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  device_owner: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  enable_efi: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                  enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  fixed_ips: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                  interface_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                  mac_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  network_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  security_groups: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                  status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkInterfacesResult]:
    """
    Use this data-source to get a list of network interfaces.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Vpc.get_network_interfaces()
    ```


    :param _builtins.str device_id: Specifies the device ID of the interface.
    :param _builtins.str device_owner: Specifies the device owner of the interface.
    :param _builtins.bool enable_efi: Specifies whether EFI is enabled .
    :param _builtins.str enterprise_project_id: Specifies the enterprise_project ID of the interface.
           The default value is **set all_granted_eps**.
    :param Sequence[_builtins.str] fixed_ips: Filter by fixed_ips=ip_address or fixed_ips=subnet_id.
    :param Sequence[_builtins.str] interface_ids: Specifies the ID of the interface.
    :param _builtins.str mac_address: Specifies the MAC address of the interface.
    :param _builtins.str name: Specifies the name of the interface.
    :param _builtins.str network_id: Specifies the network ID of the interface.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] security_groups: Specifies the security group IDs of the interface.
    :param _builtins.str status: Specifies the status of the interface.
           The value can be: **ACTIVE**, **BUILD** or **DOWN**.
    """
    __args__ = dict()
    __args__['deviceId'] = device_id
    __args__['deviceOwner'] = device_owner
    __args__['enableEfi'] = enable_efi
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['fixedIps'] = fixed_ips
    __args__['interfaceIds'] = interface_ids
    __args__['macAddress'] = mac_address
    __args__['name'] = name
    __args__['networkId'] = network_id
    __args__['region'] = region
    __args__['securityGroups'] = security_groups
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpc/getNetworkInterfaces:getNetworkInterfaces', __args__, opts=opts, typ=GetNetworkInterfacesResult)
    return __ret__.apply(lambda __response__: GetNetworkInterfacesResult(
        device_id=pulumi.get(__response__, 'device_id'),
        device_owner=pulumi.get(__response__, 'device_owner'),
        enable_efi=pulumi.get(__response__, 'enable_efi'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        fixed_ips=pulumi.get(__response__, 'fixed_ips'),
        id=pulumi.get(__response__, 'id'),
        interface_ids=pulumi.get(__response__, 'interface_ids'),
        mac_address=pulumi.get(__response__, 'mac_address'),
        name=pulumi.get(__response__, 'name'),
        network_id=pulumi.get(__response__, 'network_id'),
        ports=pulumi.get(__response__, 'ports'),
        region=pulumi.get(__response__, 'region'),
        security_groups=pulumi.get(__response__, 'security_groups'),
        status=pulumi.get(__response__, 'status')))
