# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEipsV3Result',
    'AwaitableGetEipsV3Result',
    'get_eips_v3',
    'get_eips_v3_output',
]

@pulumi.output_type
class GetEipsV3Result:
    """
    A collection of values returned by getEipsV3.
    """
    def __init__(__self__, alias_like=None, aliases=None, allow_share_bandwidth_type_anies=None, associate_instance_ids=None, associate_instance_types=None, bandwidth_charge_modes=None, bandwidth_ids=None, bandwidth_name_likes=None, bandwidth_names=None, bandwidth_share_types=None, bandwidth_sizes=None, billing_infos=None, billing_mode=None, descriptions=None, enterprise_project_ids=None, fields=None, id=None, ip_versions=None, public_border_groups=None, public_ip_address_like=None, public_ip_addresses=None, public_ipv6_address_like=None, public_ipv6_addresses=None, publicip_pool_names=None, publicips=None, region=None, sort_dir=None, sort_key=None, statuses=None, types=None, vnic_device_ids=None, vnic_device_owner_prefixlike=None, vnic_device_owners=None, vnic_instance_ids=None, vnic_instance_types=None, vnic_port_ids=None, vnic_private_ip_address_like=None, vnic_private_ip_addresses=None, vnic_vpc_ids=None):
        if alias_like and not isinstance(alias_like, str):
            raise TypeError("Expected argument 'alias_like' to be a str")
        pulumi.set(__self__, "alias_like", alias_like)
        if aliases and not isinstance(aliases, list):
            raise TypeError("Expected argument 'aliases' to be a list")
        pulumi.set(__self__, "aliases", aliases)
        if allow_share_bandwidth_type_anies and not isinstance(allow_share_bandwidth_type_anies, list):
            raise TypeError("Expected argument 'allow_share_bandwidth_type_anies' to be a list")
        pulumi.set(__self__, "allow_share_bandwidth_type_anies", allow_share_bandwidth_type_anies)
        if associate_instance_ids and not isinstance(associate_instance_ids, list):
            raise TypeError("Expected argument 'associate_instance_ids' to be a list")
        pulumi.set(__self__, "associate_instance_ids", associate_instance_ids)
        if associate_instance_types and not isinstance(associate_instance_types, list):
            raise TypeError("Expected argument 'associate_instance_types' to be a list")
        pulumi.set(__self__, "associate_instance_types", associate_instance_types)
        if bandwidth_charge_modes and not isinstance(bandwidth_charge_modes, list):
            raise TypeError("Expected argument 'bandwidth_charge_modes' to be a list")
        pulumi.set(__self__, "bandwidth_charge_modes", bandwidth_charge_modes)
        if bandwidth_ids and not isinstance(bandwidth_ids, list):
            raise TypeError("Expected argument 'bandwidth_ids' to be a list")
        pulumi.set(__self__, "bandwidth_ids", bandwidth_ids)
        if bandwidth_name_likes and not isinstance(bandwidth_name_likes, list):
            raise TypeError("Expected argument 'bandwidth_name_likes' to be a list")
        pulumi.set(__self__, "bandwidth_name_likes", bandwidth_name_likes)
        if bandwidth_names and not isinstance(bandwidth_names, list):
            raise TypeError("Expected argument 'bandwidth_names' to be a list")
        pulumi.set(__self__, "bandwidth_names", bandwidth_names)
        if bandwidth_share_types and not isinstance(bandwidth_share_types, list):
            raise TypeError("Expected argument 'bandwidth_share_types' to be a list")
        pulumi.set(__self__, "bandwidth_share_types", bandwidth_share_types)
        if bandwidth_sizes and not isinstance(bandwidth_sizes, list):
            raise TypeError("Expected argument 'bandwidth_sizes' to be a list")
        pulumi.set(__self__, "bandwidth_sizes", bandwidth_sizes)
        if billing_infos and not isinstance(billing_infos, list):
            raise TypeError("Expected argument 'billing_infos' to be a list")
        pulumi.set(__self__, "billing_infos", billing_infos)
        if billing_mode and not isinstance(billing_mode, str):
            raise TypeError("Expected argument 'billing_mode' to be a str")
        pulumi.set(__self__, "billing_mode", billing_mode)
        if descriptions and not isinstance(descriptions, list):
            raise TypeError("Expected argument 'descriptions' to be a list")
        pulumi.set(__self__, "descriptions", descriptions)
        if enterprise_project_ids and not isinstance(enterprise_project_ids, list):
            raise TypeError("Expected argument 'enterprise_project_ids' to be a list")
        pulumi.set(__self__, "enterprise_project_ids", enterprise_project_ids)
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_versions and not isinstance(ip_versions, list):
            raise TypeError("Expected argument 'ip_versions' to be a list")
        pulumi.set(__self__, "ip_versions", ip_versions)
        if public_border_groups and not isinstance(public_border_groups, list):
            raise TypeError("Expected argument 'public_border_groups' to be a list")
        pulumi.set(__self__, "public_border_groups", public_border_groups)
        if public_ip_address_like and not isinstance(public_ip_address_like, str):
            raise TypeError("Expected argument 'public_ip_address_like' to be a str")
        pulumi.set(__self__, "public_ip_address_like", public_ip_address_like)
        if public_ip_addresses and not isinstance(public_ip_addresses, list):
            raise TypeError("Expected argument 'public_ip_addresses' to be a list")
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        if public_ipv6_address_like and not isinstance(public_ipv6_address_like, str):
            raise TypeError("Expected argument 'public_ipv6_address_like' to be a str")
        pulumi.set(__self__, "public_ipv6_address_like", public_ipv6_address_like)
        if public_ipv6_addresses and not isinstance(public_ipv6_addresses, list):
            raise TypeError("Expected argument 'public_ipv6_addresses' to be a list")
        pulumi.set(__self__, "public_ipv6_addresses", public_ipv6_addresses)
        if publicip_pool_names and not isinstance(publicip_pool_names, list):
            raise TypeError("Expected argument 'publicip_pool_names' to be a list")
        pulumi.set(__self__, "publicip_pool_names", publicip_pool_names)
        if publicips and not isinstance(publicips, list):
            raise TypeError("Expected argument 'publicips' to be a list")
        pulumi.set(__self__, "publicips", publicips)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if types and not isinstance(types, list):
            raise TypeError("Expected argument 'types' to be a list")
        pulumi.set(__self__, "types", types)
        if vnic_device_ids and not isinstance(vnic_device_ids, list):
            raise TypeError("Expected argument 'vnic_device_ids' to be a list")
        pulumi.set(__self__, "vnic_device_ids", vnic_device_ids)
        if vnic_device_owner_prefixlike and not isinstance(vnic_device_owner_prefixlike, str):
            raise TypeError("Expected argument 'vnic_device_owner_prefixlike' to be a str")
        pulumi.set(__self__, "vnic_device_owner_prefixlike", vnic_device_owner_prefixlike)
        if vnic_device_owners and not isinstance(vnic_device_owners, list):
            raise TypeError("Expected argument 'vnic_device_owners' to be a list")
        pulumi.set(__self__, "vnic_device_owners", vnic_device_owners)
        if vnic_instance_ids and not isinstance(vnic_instance_ids, list):
            raise TypeError("Expected argument 'vnic_instance_ids' to be a list")
        pulumi.set(__self__, "vnic_instance_ids", vnic_instance_ids)
        if vnic_instance_types and not isinstance(vnic_instance_types, list):
            raise TypeError("Expected argument 'vnic_instance_types' to be a list")
        pulumi.set(__self__, "vnic_instance_types", vnic_instance_types)
        if vnic_port_ids and not isinstance(vnic_port_ids, list):
            raise TypeError("Expected argument 'vnic_port_ids' to be a list")
        pulumi.set(__self__, "vnic_port_ids", vnic_port_ids)
        if vnic_private_ip_address_like and not isinstance(vnic_private_ip_address_like, str):
            raise TypeError("Expected argument 'vnic_private_ip_address_like' to be a str")
        pulumi.set(__self__, "vnic_private_ip_address_like", vnic_private_ip_address_like)
        if vnic_private_ip_addresses and not isinstance(vnic_private_ip_addresses, list):
            raise TypeError("Expected argument 'vnic_private_ip_addresses' to be a list")
        pulumi.set(__self__, "vnic_private_ip_addresses", vnic_private_ip_addresses)
        if vnic_vpc_ids and not isinstance(vnic_vpc_ids, list):
            raise TypeError("Expected argument 'vnic_vpc_ids' to be a list")
        pulumi.set(__self__, "vnic_vpc_ids", vnic_vpc_ids)

    @_builtins.property
    @pulumi.getter(name="aliasLike")
    def alias_like(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "alias_like")

    @_builtins.property
    @pulumi.getter
    def aliases(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the name of the EIP.
        """
        return pulumi.get(self, "aliases")

    @_builtins.property
    @pulumi.getter(name="allowShareBandwidthTypeAnies")
    def allow_share_bandwidth_type_anies(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "allow_share_bandwidth_type_anies")

    @_builtins.property
    @pulumi.getter(name="associateInstanceIds")
    def associate_instance_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the ID of the instance bound to the public IP address.
        """
        return pulumi.get(self, "associate_instance_ids")

    @_builtins.property
    @pulumi.getter(name="associateInstanceTypes")
    def associate_instance_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the type of the instance bound to the public IP address.
        """
        return pulumi.get(self, "associate_instance_types")

    @_builtins.property
    @pulumi.getter(name="bandwidthChargeModes")
    def bandwidth_charge_modes(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "bandwidth_charge_modes")

    @_builtins.property
    @pulumi.getter(name="bandwidthIds")
    def bandwidth_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "bandwidth_ids")

    @_builtins.property
    @pulumi.getter(name="bandwidthNameLikes")
    def bandwidth_name_likes(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "bandwidth_name_likes")

    @_builtins.property
    @pulumi.getter(name="bandwidthNames")
    def bandwidth_names(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "bandwidth_names")

    @_builtins.property
    @pulumi.getter(name="bandwidthShareTypes")
    def bandwidth_share_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "bandwidth_share_types")

    @_builtins.property
    @pulumi.getter(name="bandwidthSizes")
    def bandwidth_sizes(self) -> Optional[Sequence[_builtins.int]]:
        return pulumi.get(self, "bandwidth_sizes")

    @_builtins.property
    @pulumi.getter(name="billingInfos")
    def billing_infos(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the bill information.
        """
        return pulumi.get(self, "billing_infos")

    @_builtins.property
    @pulumi.getter(name="billingMode")
    def billing_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "billing_mode")

    @_builtins.property
    @pulumi.getter
    def descriptions(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the description of the EIP.
        """
        return pulumi.get(self, "descriptions")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectIds")
    def enterprise_project_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the enterprise project ID of the EIP.
        """
        return pulumi.get(self, "enterprise_project_ids")

    @_builtins.property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "fields")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipVersions")
    def ip_versions(self) -> Optional[Sequence[_builtins.int]]:
        """
        Indicates the IP version of the EIP.
        """
        return pulumi.get(self, "ip_versions")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroups")
    def public_border_groups(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the resources at the central site or edge site.
        """
        return pulumi.get(self, "public_border_groups")

    @_builtins.property
    @pulumi.getter(name="publicIpAddressLike")
    def public_ip_address_like(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "public_ip_address_like")

    @_builtins.property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the EIP or IPv6 port address.
        """
        return pulumi.get(self, "public_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="publicIpv6AddressLike")
    def public_ipv6_address_like(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "public_ipv6_address_like")

    @_builtins.property
    @pulumi.getter(name="publicIpv6Addresses")
    def public_ipv6_addresses(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the public IP v6 address of the EIP.
        """
        return pulumi.get(self, "public_ipv6_addresses")

    @_builtins.property
    @pulumi.getter(name="publicipPoolNames")
    def publicip_pool_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the public pool name of the EIP.
        """
        return pulumi.get(self, "publicip_pool_names")

    @_builtins.property
    @pulumi.getter
    def publicips(self) -> Sequence['outputs.GetEipsV3PublicipResult']:
        """
        Indicates the list of EIPs.
        """
        return pulumi.get(self, "publicips")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the status of the EIP.
        """
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter
    def types(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the type of the EIP.
        """
        return pulumi.get(self, "types")

    @_builtins.property
    @pulumi.getter(name="vnicDeviceIds")
    def vnic_device_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "vnic_device_ids")

    @_builtins.property
    @pulumi.getter(name="vnicDeviceOwnerPrefixlike")
    def vnic_device_owner_prefixlike(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vnic_device_owner_prefixlike")

    @_builtins.property
    @pulumi.getter(name="vnicDeviceOwners")
    def vnic_device_owners(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "vnic_device_owners")

    @_builtins.property
    @pulumi.getter(name="vnicInstanceIds")
    def vnic_instance_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "vnic_instance_ids")

    @_builtins.property
    @pulumi.getter(name="vnicInstanceTypes")
    def vnic_instance_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "vnic_instance_types")

    @_builtins.property
    @pulumi.getter(name="vnicPortIds")
    def vnic_port_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "vnic_port_ids")

    @_builtins.property
    @pulumi.getter(name="vnicPrivateIpAddressLike")
    def vnic_private_ip_address_like(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vnic_private_ip_address_like")

    @_builtins.property
    @pulumi.getter(name="vnicPrivateIpAddresses")
    def vnic_private_ip_addresses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "vnic_private_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="vnicVpcIds")
    def vnic_vpc_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "vnic_vpc_ids")


class AwaitableGetEipsV3Result(GetEipsV3Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEipsV3Result(
            alias_like=self.alias_like,
            aliases=self.aliases,
            allow_share_bandwidth_type_anies=self.allow_share_bandwidth_type_anies,
            associate_instance_ids=self.associate_instance_ids,
            associate_instance_types=self.associate_instance_types,
            bandwidth_charge_modes=self.bandwidth_charge_modes,
            bandwidth_ids=self.bandwidth_ids,
            bandwidth_name_likes=self.bandwidth_name_likes,
            bandwidth_names=self.bandwidth_names,
            bandwidth_share_types=self.bandwidth_share_types,
            bandwidth_sizes=self.bandwidth_sizes,
            billing_infos=self.billing_infos,
            billing_mode=self.billing_mode,
            descriptions=self.descriptions,
            enterprise_project_ids=self.enterprise_project_ids,
            fields=self.fields,
            id=self.id,
            ip_versions=self.ip_versions,
            public_border_groups=self.public_border_groups,
            public_ip_address_like=self.public_ip_address_like,
            public_ip_addresses=self.public_ip_addresses,
            public_ipv6_address_like=self.public_ipv6_address_like,
            public_ipv6_addresses=self.public_ipv6_addresses,
            publicip_pool_names=self.publicip_pool_names,
            publicips=self.publicips,
            region=self.region,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            statuses=self.statuses,
            types=self.types,
            vnic_device_ids=self.vnic_device_ids,
            vnic_device_owner_prefixlike=self.vnic_device_owner_prefixlike,
            vnic_device_owners=self.vnic_device_owners,
            vnic_instance_ids=self.vnic_instance_ids,
            vnic_instance_types=self.vnic_instance_types,
            vnic_port_ids=self.vnic_port_ids,
            vnic_private_ip_address_like=self.vnic_private_ip_address_like,
            vnic_private_ip_addresses=self.vnic_private_ip_addresses,
            vnic_vpc_ids=self.vnic_vpc_ids)


def get_eips_v3(alias_like: Optional[_builtins.str] = None,
                aliases: Optional[Sequence[_builtins.str]] = None,
                allow_share_bandwidth_type_anies: Optional[Sequence[_builtins.str]] = None,
                associate_instance_ids: Optional[Sequence[_builtins.str]] = None,
                associate_instance_types: Optional[Sequence[_builtins.str]] = None,
                bandwidth_charge_modes: Optional[Sequence[_builtins.str]] = None,
                bandwidth_ids: Optional[Sequence[_builtins.str]] = None,
                bandwidth_name_likes: Optional[Sequence[_builtins.str]] = None,
                bandwidth_names: Optional[Sequence[_builtins.str]] = None,
                bandwidth_share_types: Optional[Sequence[_builtins.str]] = None,
                bandwidth_sizes: Optional[Sequence[_builtins.int]] = None,
                billing_infos: Optional[Sequence[_builtins.str]] = None,
                billing_mode: Optional[_builtins.str] = None,
                descriptions: Optional[Sequence[_builtins.str]] = None,
                enterprise_project_ids: Optional[Sequence[_builtins.str]] = None,
                fields: Optional[Sequence[_builtins.str]] = None,
                ip_versions: Optional[Sequence[_builtins.int]] = None,
                public_border_groups: Optional[Sequence[_builtins.str]] = None,
                public_ip_address_like: Optional[_builtins.str] = None,
                public_ip_addresses: Optional[Sequence[_builtins.str]] = None,
                public_ipv6_address_like: Optional[_builtins.str] = None,
                public_ipv6_addresses: Optional[Sequence[_builtins.str]] = None,
                publicip_pool_names: Optional[Sequence[_builtins.str]] = None,
                region: Optional[_builtins.str] = None,
                sort_dir: Optional[_builtins.str] = None,
                sort_key: Optional[_builtins.str] = None,
                statuses: Optional[Sequence[_builtins.str]] = None,
                types: Optional[Sequence[_builtins.str]] = None,
                vnic_device_ids: Optional[Sequence[_builtins.str]] = None,
                vnic_device_owner_prefixlike: Optional[_builtins.str] = None,
                vnic_device_owners: Optional[Sequence[_builtins.str]] = None,
                vnic_instance_ids: Optional[Sequence[_builtins.str]] = None,
                vnic_instance_types: Optional[Sequence[_builtins.str]] = None,
                vnic_port_ids: Optional[Sequence[_builtins.str]] = None,
                vnic_private_ip_address_like: Optional[_builtins.str] = None,
                vnic_private_ip_addresses: Optional[Sequence[_builtins.str]] = None,
                vnic_vpc_ids: Optional[Sequence[_builtins.str]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEipsV3Result:
    """
    Use this data source to get the list of EIPs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    eip = huaweicloud.Vpc.get_eips_v3()
    ```


    :param _builtins.str alias_like: Specifies the fuzzy search based on alias.
    :param Sequence[_builtins.str] aliases: Specifies the alias of the EIP.
    :param Sequence[_builtins.str] allow_share_bandwidth_type_anies: Specifies the shared bandwidth type of the EIP.
    :param Sequence[_builtins.str] associate_instance_ids: Specifies the associate instance ID of the EIP.
    :param Sequence[_builtins.str] associate_instance_types: Specifies the associate instance type of the EIP.
           Value options: **PORT**、**NATGW**、**ELB**、**VPN**、**ELBV1**
    :param Sequence[_builtins.str] bandwidth_charge_modes: Specifies the charge mode of the EIP.
    :param Sequence[_builtins.str] bandwidth_ids: Specifies the ID of bandwidth.
    :param Sequence[_builtins.str] bandwidth_name_likes: Specifies the fuzzy search based on bandwidth name.
    :param Sequence[_builtins.str] bandwidth_names: Specifies the name of bandwidth.
    :param Sequence[_builtins.str] bandwidth_share_types: Specifies the share type of the EIP.
    :param Sequence[_builtins.int] bandwidth_sizes: Specifies the size of bandwidth.
    :param Sequence[_builtins.str] billing_infos: Specifies the billing info of the EIP.
    :param _builtins.str billing_mode: Specifies the billing mode of the EIP.
           Value options: **YEARLY_MONTHLY**, **PAY_PER_USE**.
    :param Sequence[_builtins.str] descriptions: Specifies the description of the EIP.
    :param Sequence[_builtins.str] enterprise_project_ids: Specifies the enterprise project ID of the EIP.
    :param Sequence[_builtins.str] fields: Specifies the display fields.
           Value options: **id**, **project_id**, **ip_version**, **type**, **public_ip_address**, **public_ipv6_address**, **status**,
           **description**, **created_at**, **updated_at**, **vnic**, **bandwidth**, **associate_instance_type**,
           **associate_instance_id**, **lock_status**, **billing_info**, **tags**, **enterprise_project_id**,
           **allow_share_bandwidth_types**, **public_border_group**, **alias**, **publicip_pool_name**, **publicip_pool_id**.
    :param Sequence[_builtins.int] ip_versions: Specifies the IP version of the EIP.
           Value options: **4**, **6**.
    :param Sequence[_builtins.str] public_border_groups: Specifies the public border group of the EIP.
    :param _builtins.str public_ip_address_like: Specifies the fuzzy search based on public IP address.
    :param Sequence[_builtins.str] public_ip_addresses: Specifies the public IP address of the EIP.
    :param _builtins.str public_ipv6_address_like: Specifies the fuzzy search based on public IP v6 address.
    :param Sequence[_builtins.str] public_ipv6_addresses: Specifies the public IP v6 address  of the EIP.
    :param Sequence[_builtins.str] publicip_pool_names: Specifies the public IP pool name of the EIP.
           Value options: **5_telcom**, **5_union**, **5_bgp**, **5_sbgp**, **5_ipv6**, **5_graybgp** and pool name
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sort direction.
           Value options: **asc**, **desc**.
    :param _builtins.str sort_key: Specifies the sort key.
           Value options: **id**, **public_ip_address**, **public_ipv6_address**, **ip_version**, **created_at**, **updated_at**,
           **public_border_group**.
    :param Sequence[_builtins.str] statuses: Specifies the status of the EIP.
           Value options: **FREEZED**, **DOWN**, **ACTIVE**, **ERROR**.
    :param Sequence[_builtins.str] types: Specifies the type of the EIP.
           Value options:
           + **EIP**: EIP
           + **DUALSTACK**: dual-stack IPv6
           + **DUALSTACK_SUBNET**: Dual-stack subnet
    :param Sequence[_builtins.str] vnic_device_ids: Specifies the device ID of vnic.
    :param _builtins.str vnic_device_owner_prefixlike: Specifies the fuzzy search based on device owner prefixlike.
    :param Sequence[_builtins.str] vnic_device_owners: Specifies the device owner of vnic.
    :param Sequence[_builtins.str] vnic_instance_ids: Specifies the instance ID of vnic.
    :param Sequence[_builtins.str] vnic_instance_types: Specifies the instance type of vnic.
    :param Sequence[_builtins.str] vnic_port_ids: Specifies the port ID of vnic.
    :param _builtins.str vnic_private_ip_address_like: Specifies the fuzzy search based on private IP address
    :param Sequence[_builtins.str] vnic_private_ip_addresses: Specifies the private IP address of the EIP.
    :param Sequence[_builtins.str] vnic_vpc_ids: Specifies the vpc ID of vnic.
    """
    __args__ = dict()
    __args__['aliasLike'] = alias_like
    __args__['aliases'] = aliases
    __args__['allowShareBandwidthTypeAnies'] = allow_share_bandwidth_type_anies
    __args__['associateInstanceIds'] = associate_instance_ids
    __args__['associateInstanceTypes'] = associate_instance_types
    __args__['bandwidthChargeModes'] = bandwidth_charge_modes
    __args__['bandwidthIds'] = bandwidth_ids
    __args__['bandwidthNameLikes'] = bandwidth_name_likes
    __args__['bandwidthNames'] = bandwidth_names
    __args__['bandwidthShareTypes'] = bandwidth_share_types
    __args__['bandwidthSizes'] = bandwidth_sizes
    __args__['billingInfos'] = billing_infos
    __args__['billingMode'] = billing_mode
    __args__['descriptions'] = descriptions
    __args__['enterpriseProjectIds'] = enterprise_project_ids
    __args__['fields'] = fields
    __args__['ipVersions'] = ip_versions
    __args__['publicBorderGroups'] = public_border_groups
    __args__['publicIpAddressLike'] = public_ip_address_like
    __args__['publicIpAddresses'] = public_ip_addresses
    __args__['publicIpv6AddressLike'] = public_ipv6_address_like
    __args__['publicIpv6Addresses'] = public_ipv6_addresses
    __args__['publicipPoolNames'] = publicip_pool_names
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['statuses'] = statuses
    __args__['types'] = types
    __args__['vnicDeviceIds'] = vnic_device_ids
    __args__['vnicDeviceOwnerPrefixlike'] = vnic_device_owner_prefixlike
    __args__['vnicDeviceOwners'] = vnic_device_owners
    __args__['vnicInstanceIds'] = vnic_instance_ids
    __args__['vnicInstanceTypes'] = vnic_instance_types
    __args__['vnicPortIds'] = vnic_port_ids
    __args__['vnicPrivateIpAddressLike'] = vnic_private_ip_address_like
    __args__['vnicPrivateIpAddresses'] = vnic_private_ip_addresses
    __args__['vnicVpcIds'] = vnic_vpc_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getEipsV3:getEipsV3', __args__, opts=opts, typ=GetEipsV3Result).value

    return AwaitableGetEipsV3Result(
        alias_like=pulumi.get(__ret__, 'alias_like'),
        aliases=pulumi.get(__ret__, 'aliases'),
        allow_share_bandwidth_type_anies=pulumi.get(__ret__, 'allow_share_bandwidth_type_anies'),
        associate_instance_ids=pulumi.get(__ret__, 'associate_instance_ids'),
        associate_instance_types=pulumi.get(__ret__, 'associate_instance_types'),
        bandwidth_charge_modes=pulumi.get(__ret__, 'bandwidth_charge_modes'),
        bandwidth_ids=pulumi.get(__ret__, 'bandwidth_ids'),
        bandwidth_name_likes=pulumi.get(__ret__, 'bandwidth_name_likes'),
        bandwidth_names=pulumi.get(__ret__, 'bandwidth_names'),
        bandwidth_share_types=pulumi.get(__ret__, 'bandwidth_share_types'),
        bandwidth_sizes=pulumi.get(__ret__, 'bandwidth_sizes'),
        billing_infos=pulumi.get(__ret__, 'billing_infos'),
        billing_mode=pulumi.get(__ret__, 'billing_mode'),
        descriptions=pulumi.get(__ret__, 'descriptions'),
        enterprise_project_ids=pulumi.get(__ret__, 'enterprise_project_ids'),
        fields=pulumi.get(__ret__, 'fields'),
        id=pulumi.get(__ret__, 'id'),
        ip_versions=pulumi.get(__ret__, 'ip_versions'),
        public_border_groups=pulumi.get(__ret__, 'public_border_groups'),
        public_ip_address_like=pulumi.get(__ret__, 'public_ip_address_like'),
        public_ip_addresses=pulumi.get(__ret__, 'public_ip_addresses'),
        public_ipv6_address_like=pulumi.get(__ret__, 'public_ipv6_address_like'),
        public_ipv6_addresses=pulumi.get(__ret__, 'public_ipv6_addresses'),
        publicip_pool_names=pulumi.get(__ret__, 'publicip_pool_names'),
        publicips=pulumi.get(__ret__, 'publicips'),
        region=pulumi.get(__ret__, 'region'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        statuses=pulumi.get(__ret__, 'statuses'),
        types=pulumi.get(__ret__, 'types'),
        vnic_device_ids=pulumi.get(__ret__, 'vnic_device_ids'),
        vnic_device_owner_prefixlike=pulumi.get(__ret__, 'vnic_device_owner_prefixlike'),
        vnic_device_owners=pulumi.get(__ret__, 'vnic_device_owners'),
        vnic_instance_ids=pulumi.get(__ret__, 'vnic_instance_ids'),
        vnic_instance_types=pulumi.get(__ret__, 'vnic_instance_types'),
        vnic_port_ids=pulumi.get(__ret__, 'vnic_port_ids'),
        vnic_private_ip_address_like=pulumi.get(__ret__, 'vnic_private_ip_address_like'),
        vnic_private_ip_addresses=pulumi.get(__ret__, 'vnic_private_ip_addresses'),
        vnic_vpc_ids=pulumi.get(__ret__, 'vnic_vpc_ids'))
def get_eips_v3_output(alias_like: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       aliases: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       allow_share_bandwidth_type_anies: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       associate_instance_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       associate_instance_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       bandwidth_charge_modes: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       bandwidth_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       bandwidth_name_likes: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       bandwidth_names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       bandwidth_share_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       bandwidth_sizes: Optional[pulumi.Input[Optional[Sequence[_builtins.int]]]] = None,
                       billing_infos: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       billing_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       descriptions: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       enterprise_project_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       fields: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       ip_versions: Optional[pulumi.Input[Optional[Sequence[_builtins.int]]]] = None,
                       public_border_groups: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       public_ip_address_like: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       public_ip_addresses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       public_ipv6_address_like: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       public_ipv6_addresses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       publicip_pool_names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       vnic_device_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       vnic_device_owner_prefixlike: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       vnic_device_owners: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       vnic_instance_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       vnic_instance_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       vnic_port_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       vnic_private_ip_address_like: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       vnic_private_ip_addresses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       vnic_vpc_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEipsV3Result]:
    """
    Use this data source to get the list of EIPs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    eip = huaweicloud.Vpc.get_eips_v3()
    ```


    :param _builtins.str alias_like: Specifies the fuzzy search based on alias.
    :param Sequence[_builtins.str] aliases: Specifies the alias of the EIP.
    :param Sequence[_builtins.str] allow_share_bandwidth_type_anies: Specifies the shared bandwidth type of the EIP.
    :param Sequence[_builtins.str] associate_instance_ids: Specifies the associate instance ID of the EIP.
    :param Sequence[_builtins.str] associate_instance_types: Specifies the associate instance type of the EIP.
           Value options: **PORT**、**NATGW**、**ELB**、**VPN**、**ELBV1**
    :param Sequence[_builtins.str] bandwidth_charge_modes: Specifies the charge mode of the EIP.
    :param Sequence[_builtins.str] bandwidth_ids: Specifies the ID of bandwidth.
    :param Sequence[_builtins.str] bandwidth_name_likes: Specifies the fuzzy search based on bandwidth name.
    :param Sequence[_builtins.str] bandwidth_names: Specifies the name of bandwidth.
    :param Sequence[_builtins.str] bandwidth_share_types: Specifies the share type of the EIP.
    :param Sequence[_builtins.int] bandwidth_sizes: Specifies the size of bandwidth.
    :param Sequence[_builtins.str] billing_infos: Specifies the billing info of the EIP.
    :param _builtins.str billing_mode: Specifies the billing mode of the EIP.
           Value options: **YEARLY_MONTHLY**, **PAY_PER_USE**.
    :param Sequence[_builtins.str] descriptions: Specifies the description of the EIP.
    :param Sequence[_builtins.str] enterprise_project_ids: Specifies the enterprise project ID of the EIP.
    :param Sequence[_builtins.str] fields: Specifies the display fields.
           Value options: **id**, **project_id**, **ip_version**, **type**, **public_ip_address**, **public_ipv6_address**, **status**,
           **description**, **created_at**, **updated_at**, **vnic**, **bandwidth**, **associate_instance_type**,
           **associate_instance_id**, **lock_status**, **billing_info**, **tags**, **enterprise_project_id**,
           **allow_share_bandwidth_types**, **public_border_group**, **alias**, **publicip_pool_name**, **publicip_pool_id**.
    :param Sequence[_builtins.int] ip_versions: Specifies the IP version of the EIP.
           Value options: **4**, **6**.
    :param Sequence[_builtins.str] public_border_groups: Specifies the public border group of the EIP.
    :param _builtins.str public_ip_address_like: Specifies the fuzzy search based on public IP address.
    :param Sequence[_builtins.str] public_ip_addresses: Specifies the public IP address of the EIP.
    :param _builtins.str public_ipv6_address_like: Specifies the fuzzy search based on public IP v6 address.
    :param Sequence[_builtins.str] public_ipv6_addresses: Specifies the public IP v6 address  of the EIP.
    :param Sequence[_builtins.str] publicip_pool_names: Specifies the public IP pool name of the EIP.
           Value options: **5_telcom**, **5_union**, **5_bgp**, **5_sbgp**, **5_ipv6**, **5_graybgp** and pool name
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sort direction.
           Value options: **asc**, **desc**.
    :param _builtins.str sort_key: Specifies the sort key.
           Value options: **id**, **public_ip_address**, **public_ipv6_address**, **ip_version**, **created_at**, **updated_at**,
           **public_border_group**.
    :param Sequence[_builtins.str] statuses: Specifies the status of the EIP.
           Value options: **FREEZED**, **DOWN**, **ACTIVE**, **ERROR**.
    :param Sequence[_builtins.str] types: Specifies the type of the EIP.
           Value options:
           + **EIP**: EIP
           + **DUALSTACK**: dual-stack IPv6
           + **DUALSTACK_SUBNET**: Dual-stack subnet
    :param Sequence[_builtins.str] vnic_device_ids: Specifies the device ID of vnic.
    :param _builtins.str vnic_device_owner_prefixlike: Specifies the fuzzy search based on device owner prefixlike.
    :param Sequence[_builtins.str] vnic_device_owners: Specifies the device owner of vnic.
    :param Sequence[_builtins.str] vnic_instance_ids: Specifies the instance ID of vnic.
    :param Sequence[_builtins.str] vnic_instance_types: Specifies the instance type of vnic.
    :param Sequence[_builtins.str] vnic_port_ids: Specifies the port ID of vnic.
    :param _builtins.str vnic_private_ip_address_like: Specifies the fuzzy search based on private IP address
    :param Sequence[_builtins.str] vnic_private_ip_addresses: Specifies the private IP address of the EIP.
    :param Sequence[_builtins.str] vnic_vpc_ids: Specifies the vpc ID of vnic.
    """
    __args__ = dict()
    __args__['aliasLike'] = alias_like
    __args__['aliases'] = aliases
    __args__['allowShareBandwidthTypeAnies'] = allow_share_bandwidth_type_anies
    __args__['associateInstanceIds'] = associate_instance_ids
    __args__['associateInstanceTypes'] = associate_instance_types
    __args__['bandwidthChargeModes'] = bandwidth_charge_modes
    __args__['bandwidthIds'] = bandwidth_ids
    __args__['bandwidthNameLikes'] = bandwidth_name_likes
    __args__['bandwidthNames'] = bandwidth_names
    __args__['bandwidthShareTypes'] = bandwidth_share_types
    __args__['bandwidthSizes'] = bandwidth_sizes
    __args__['billingInfos'] = billing_infos
    __args__['billingMode'] = billing_mode
    __args__['descriptions'] = descriptions
    __args__['enterpriseProjectIds'] = enterprise_project_ids
    __args__['fields'] = fields
    __args__['ipVersions'] = ip_versions
    __args__['publicBorderGroups'] = public_border_groups
    __args__['publicIpAddressLike'] = public_ip_address_like
    __args__['publicIpAddresses'] = public_ip_addresses
    __args__['publicIpv6AddressLike'] = public_ipv6_address_like
    __args__['publicIpv6Addresses'] = public_ipv6_addresses
    __args__['publicipPoolNames'] = publicip_pool_names
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['statuses'] = statuses
    __args__['types'] = types
    __args__['vnicDeviceIds'] = vnic_device_ids
    __args__['vnicDeviceOwnerPrefixlike'] = vnic_device_owner_prefixlike
    __args__['vnicDeviceOwners'] = vnic_device_owners
    __args__['vnicInstanceIds'] = vnic_instance_ids
    __args__['vnicInstanceTypes'] = vnic_instance_types
    __args__['vnicPortIds'] = vnic_port_ids
    __args__['vnicPrivateIpAddressLike'] = vnic_private_ip_address_like
    __args__['vnicPrivateIpAddresses'] = vnic_private_ip_addresses
    __args__['vnicVpcIds'] = vnic_vpc_ids
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpc/getEipsV3:getEipsV3', __args__, opts=opts, typ=GetEipsV3Result)
    return __ret__.apply(lambda __response__: GetEipsV3Result(
        alias_like=pulumi.get(__response__, 'alias_like'),
        aliases=pulumi.get(__response__, 'aliases'),
        allow_share_bandwidth_type_anies=pulumi.get(__response__, 'allow_share_bandwidth_type_anies'),
        associate_instance_ids=pulumi.get(__response__, 'associate_instance_ids'),
        associate_instance_types=pulumi.get(__response__, 'associate_instance_types'),
        bandwidth_charge_modes=pulumi.get(__response__, 'bandwidth_charge_modes'),
        bandwidth_ids=pulumi.get(__response__, 'bandwidth_ids'),
        bandwidth_name_likes=pulumi.get(__response__, 'bandwidth_name_likes'),
        bandwidth_names=pulumi.get(__response__, 'bandwidth_names'),
        bandwidth_share_types=pulumi.get(__response__, 'bandwidth_share_types'),
        bandwidth_sizes=pulumi.get(__response__, 'bandwidth_sizes'),
        billing_infos=pulumi.get(__response__, 'billing_infos'),
        billing_mode=pulumi.get(__response__, 'billing_mode'),
        descriptions=pulumi.get(__response__, 'descriptions'),
        enterprise_project_ids=pulumi.get(__response__, 'enterprise_project_ids'),
        fields=pulumi.get(__response__, 'fields'),
        id=pulumi.get(__response__, 'id'),
        ip_versions=pulumi.get(__response__, 'ip_versions'),
        public_border_groups=pulumi.get(__response__, 'public_border_groups'),
        public_ip_address_like=pulumi.get(__response__, 'public_ip_address_like'),
        public_ip_addresses=pulumi.get(__response__, 'public_ip_addresses'),
        public_ipv6_address_like=pulumi.get(__response__, 'public_ipv6_address_like'),
        public_ipv6_addresses=pulumi.get(__response__, 'public_ipv6_addresses'),
        publicip_pool_names=pulumi.get(__response__, 'publicip_pool_names'),
        publicips=pulumi.get(__response__, 'publicips'),
        region=pulumi.get(__response__, 'region'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        statuses=pulumi.get(__response__, 'statuses'),
        types=pulumi.get(__response__, 'types'),
        vnic_device_ids=pulumi.get(__response__, 'vnic_device_ids'),
        vnic_device_owner_prefixlike=pulumi.get(__response__, 'vnic_device_owner_prefixlike'),
        vnic_device_owners=pulumi.get(__response__, 'vnic_device_owners'),
        vnic_instance_ids=pulumi.get(__response__, 'vnic_instance_ids'),
        vnic_instance_types=pulumi.get(__response__, 'vnic_instance_types'),
        vnic_port_ids=pulumi.get(__response__, 'vnic_port_ids'),
        vnic_private_ip_address_like=pulumi.get(__response__, 'vnic_private_ip_address_like'),
        vnic_private_ip_addresses=pulumi.get(__response__, 'vnic_private_ip_addresses'),
        vnic_vpc_ids=pulumi.get(__response__, 'vnic_vpc_ids')))
