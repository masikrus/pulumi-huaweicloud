# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['FloatingipV2Args', 'FloatingipV2']

@pulumi.input_type
class FloatingipV2Args:
    def __init__(__self__, *,
                 fixed_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 pool: Optional[pulumi.Input[_builtins.str]] = None,
                 port_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a FloatingipV2 resource.
        :param pulumi.Input[_builtins.str] fixed_ip: Fixed IP of the port to associate with this floating IP.
               Required if the port has multiple fixed IPs.
        :param pulumi.Input[_builtins.str] pool: The name of the pool from which to create the floating IP.
               Only admin_external_net is valid. Changing this creates a new floating IP.
        :param pulumi.Input[_builtins.str] port_id: ID of an existing port with at least one IP address to associate with this floating IP.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Networking client.
               A Networking client is needed to create a floating IP that can be used with another networking resource, such as a
               load balancer.
               If omitted, the `region` argument of the provider is used.
               Changing this creates a new floating IP (which may or may not have a different address).
        :param pulumi.Input[_builtins.str] tenant_id: the ID of the tenant in which to create the floating IP.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        if fixed_ip is not None:
            pulumi.set(__self__, "fixed_ip", fixed_ip)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if port_id is not None:
            pulumi.set(__self__, "port_id", port_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @_builtins.property
    @pulumi.getter(name="fixedIp")
    def fixed_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Fixed IP of the port to associate with this floating IP.
        Required if the port has multiple fixed IPs.
        """
        return pulumi.get(self, "fixed_ip")

    @fixed_ip.setter
    def fixed_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fixed_ip", value)

    @_builtins.property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the pool from which to create the floating IP.
        Only admin_external_net is valid. Changing this creates a new floating IP.
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pool", value)

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of an existing port with at least one IP address to associate with this floating IP.
        """
        return pulumi.get(self, "port_id")

    @port_id.setter
    def port_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the V2 Networking client.
        A Networking client is needed to create a floating IP that can be used with another networking resource, such as a
        load balancer.
        If omitted, the `region` argument of the provider is used.
        Changing this creates a new floating IP (which may or may not have a different address).
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        the ID of the tenant in which to create the floating IP.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.input_type
class _FloatingipV2State:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 fixed_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 pool: Optional[pulumi.Input[_builtins.str]] = None,
                 port_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering FloatingipV2 resources.
        :param pulumi.Input[_builtins.str] address: The actual floating IP address itself.
        :param pulumi.Input[_builtins.str] fixed_ip: Fixed IP of the port to associate with this floating IP.
               Required if the port has multiple fixed IPs.
        :param pulumi.Input[_builtins.str] pool: The name of the pool from which to create the floating IP.
               Only admin_external_net is valid. Changing this creates a new floating IP.
        :param pulumi.Input[_builtins.str] port_id: ID of an existing port with at least one IP address to associate with this floating IP.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Networking client.
               A Networking client is needed to create a floating IP that can be used with another networking resource, such as a
               load balancer.
               If omitted, the `region` argument of the provider is used.
               Changing this creates a new floating IP (which may or may not have a different address).
        :param pulumi.Input[_builtins.str] tenant_id: the ID of the tenant in which to create the floating IP.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if fixed_ip is not None:
            pulumi.set(__self__, "fixed_ip", fixed_ip)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if port_id is not None:
            pulumi.set(__self__, "port_id", port_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The actual floating IP address itself.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="fixedIp")
    def fixed_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Fixed IP of the port to associate with this floating IP.
        Required if the port has multiple fixed IPs.
        """
        return pulumi.get(self, "fixed_ip")

    @fixed_ip.setter
    def fixed_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fixed_ip", value)

    @_builtins.property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the pool from which to create the floating IP.
        Only admin_external_net is valid. Changing this creates a new floating IP.
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pool", value)

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of an existing port with at least one IP address to associate with this floating IP.
        """
        return pulumi.get(self, "port_id")

    @port_id.setter
    def port_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the V2 Networking client.
        A Networking client is needed to create a floating IP that can be used with another networking resource, such as a
        load balancer.
        If omitted, the `region` argument of the provider is used.
        Changing this creates a new floating IP (which may or may not have a different address).
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        the ID of the tenant in which to create the floating IP.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.type_token("huaweicloud:Vpc/floatingipV2:FloatingipV2")
class FloatingipV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 fixed_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 pool: Optional[pulumi.Input[_builtins.str]] = None,
                 port_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        !> **WARNING:** It has been deprecated, use `Vpc.Eip` instead.

        Manages a V2 floating IP resource within HuaweiCloud Neutron (networking)

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        floatip1 = huaweicloud.vpc.FloatingipV2("floatip_1")
        ```

        ## Import

        Floating IPs can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/floatingipV2:FloatingipV2 floatip_1 2c7f39f3-702b-48d1-940c-b50384177ee1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] fixed_ip: Fixed IP of the port to associate with this floating IP.
               Required if the port has multiple fixed IPs.
        :param pulumi.Input[_builtins.str] pool: The name of the pool from which to create the floating IP.
               Only admin_external_net is valid. Changing this creates a new floating IP.
        :param pulumi.Input[_builtins.str] port_id: ID of an existing port with at least one IP address to associate with this floating IP.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Networking client.
               A Networking client is needed to create a floating IP that can be used with another networking resource, such as a
               load balancer.
               If omitted, the `region` argument of the provider is used.
               Changing this creates a new floating IP (which may or may not have a different address).
        :param pulumi.Input[_builtins.str] tenant_id: the ID of the tenant in which to create the floating IP.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FloatingipV2Args] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        !> **WARNING:** It has been deprecated, use `Vpc.Eip` instead.

        Manages a V2 floating IP resource within HuaweiCloud Neutron (networking)

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        floatip1 = huaweicloud.vpc.FloatingipV2("floatip_1")
        ```

        ## Import

        Floating IPs can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/floatingipV2:FloatingipV2 floatip_1 2c7f39f3-702b-48d1-940c-b50384177ee1
        ```

        :param str resource_name: The name of the resource.
        :param FloatingipV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FloatingipV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 fixed_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 pool: Optional[pulumi.Input[_builtins.str]] = None,
                 port_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FloatingipV2Args.__new__(FloatingipV2Args)

            __props__.__dict__["fixed_ip"] = fixed_ip
            __props__.__dict__["pool"] = pool
            __props__.__dict__["port_id"] = port_id
            __props__.__dict__["region"] = region
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["value_specs"] = value_specs
            __props__.__dict__["address"] = None
        super(FloatingipV2, __self__).__init__(
            'huaweicloud:Vpc/floatingipV2:FloatingipV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[_builtins.str]] = None,
            fixed_ip: Optional[pulumi.Input[_builtins.str]] = None,
            pool: Optional[pulumi.Input[_builtins.str]] = None,
            port_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'FloatingipV2':
        """
        Get an existing FloatingipV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] address: The actual floating IP address itself.
        :param pulumi.Input[_builtins.str] fixed_ip: Fixed IP of the port to associate with this floating IP.
               Required if the port has multiple fixed IPs.
        :param pulumi.Input[_builtins.str] pool: The name of the pool from which to create the floating IP.
               Only admin_external_net is valid. Changing this creates a new floating IP.
        :param pulumi.Input[_builtins.str] port_id: ID of an existing port with at least one IP address to associate with this floating IP.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Networking client.
               A Networking client is needed to create a floating IP that can be used with another networking resource, such as a
               load balancer.
               If omitted, the `region` argument of the provider is used.
               Changing this creates a new floating IP (which may or may not have a different address).
        :param pulumi.Input[_builtins.str] tenant_id: the ID of the tenant in which to create the floating IP.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FloatingipV2State.__new__(_FloatingipV2State)

        __props__.__dict__["address"] = address
        __props__.__dict__["fixed_ip"] = fixed_ip
        __props__.__dict__["pool"] = pool
        __props__.__dict__["port_id"] = port_id
        __props__.__dict__["region"] = region
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["value_specs"] = value_specs
        return FloatingipV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def address(self) -> pulumi.Output[_builtins.str]:
        """
        The actual floating IP address itself.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="fixedIp")
    def fixed_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Fixed IP of the port to associate with this floating IP.
        Required if the port has multiple fixed IPs.
        """
        return pulumi.get(self, "fixed_ip")

    @_builtins.property
    @pulumi.getter
    def pool(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the pool from which to create the floating IP.
        Only admin_external_net is valid. Changing this creates a new floating IP.
        """
        return pulumi.get(self, "pool")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of an existing port with at least one IP address to associate with this floating IP.
        """
        return pulumi.get(self, "port_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the V2 Networking client.
        A Networking client is needed to create a floating IP that can be used with another networking resource, such as a
        load balancer.
        If omitted, the `region` argument of the provider is used.
        Changing this creates a new floating IP (which may or may not have a different address).
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        the ID of the tenant in which to create the floating IP.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

