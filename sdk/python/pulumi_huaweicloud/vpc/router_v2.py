# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RouterV2Args', 'RouterV2']

@pulumi.input_type
class RouterV2Args:
    def __init__(__self__, *,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 distributed: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 external_fixed_ips: Optional[pulumi.Input[Sequence[pulumi.Input['RouterV2ExternalFixedIpArgs']]]] = None,
                 external_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a RouterV2 resource.
        :param pulumi.Input[_builtins.bool] admin_state_up: Administrative up/down status for the router
               (must be "true" or "false" if provided). Changing this updates the
               `admin_state_up` of an existing router.
        :param pulumi.Input[_builtins.bool] distributed: Indicates whether or not to create a distributed router. The default policy
               setting in Neutron restricts usage of this property to administrative users only.
        :param pulumi.Input[_builtins.bool] enable_snat: Enable Source NAT for the router. Valid values are
               "true" or "false". An `external_network_id` has to be set in order to set this property. Changing this updates
               the `enable_snat` of the router.
        :param pulumi.Input[Sequence[pulumi.Input['RouterV2ExternalFixedIpArgs']]] external_fixed_ips: An external fixed IP for the router. This can be repeated. The structure is
               described below. An `external_network_id`
               has to be set in order to set this property. Changing this updates the external fixed IPs of the router.
        :param pulumi.Input[_builtins.str] external_network_id: The network UUID of an external gateway for the router. A router with an
               external gateway is required if any compute instances or load balancers will be using floating IPs. Changing this
               updates the external gateway of the router.
        :param pulumi.Input[_builtins.str] name: A unique name for the router. Changing this updates the `name` of an existing router.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 networking client. A networking client is
               needed to create a router. If omitted, the
               `region` argument of the provider is used. Changing this creates a new router.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional driver-specific options.
        """
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if distributed is not None:
            pulumi.set(__self__, "distributed", distributed)
        if enable_snat is not None:
            pulumi.set(__self__, "enable_snat", enable_snat)
        if external_fixed_ips is not None:
            pulumi.set(__self__, "external_fixed_ips", external_fixed_ips)
        if external_network_id is not None:
            pulumi.set(__self__, "external_network_id", external_network_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Administrative up/down status for the router
        (must be "true" or "false" if provided). Changing this updates the
        `admin_state_up` of an existing router.
        """
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "admin_state_up", value)

    @_builtins.property
    @pulumi.getter
    def distributed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether or not to create a distributed router. The default policy
        setting in Neutron restricts usage of this property to administrative users only.
        """
        return pulumi.get(self, "distributed")

    @distributed.setter
    def distributed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "distributed", value)

    @_builtins.property
    @pulumi.getter(name="enableSnat")
    def enable_snat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Source NAT for the router. Valid values are
        "true" or "false". An `external_network_id` has to be set in order to set this property. Changing this updates
        the `enable_snat` of the router.
        """
        return pulumi.get(self, "enable_snat")

    @enable_snat.setter
    def enable_snat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_snat", value)

    @_builtins.property
    @pulumi.getter(name="externalFixedIps")
    def external_fixed_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterV2ExternalFixedIpArgs']]]]:
        """
        An external fixed IP for the router. This can be repeated. The structure is
        described below. An `external_network_id`
        has to be set in order to set this property. Changing this updates the external fixed IPs of the router.
        """
        return pulumi.get(self, "external_fixed_ips")

    @external_fixed_ips.setter
    def external_fixed_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterV2ExternalFixedIpArgs']]]]):
        pulumi.set(self, "external_fixed_ips", value)

    @_builtins.property
    @pulumi.getter(name="externalNetworkId")
    def external_network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network UUID of an external gateway for the router. A router with an
        external gateway is required if any compute instances or load balancers will be using floating IPs. Changing this
        updates the external gateway of the router.
        """
        return pulumi.get(self, "external_network_id")

    @external_network_id.setter
    def external_network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_network_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A unique name for the router. Changing this updates the `name` of an existing router.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the V2 networking client. A networking client is
        needed to create a router. If omitted, the
        `region` argument of the provider is used. Changing this creates a new router.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of additional driver-specific options.
        """
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.input_type
class _RouterV2State:
    def __init__(__self__, *,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 distributed: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 external_fixed_ips: Optional[pulumi.Input[Sequence[pulumi.Input['RouterV2ExternalFixedIpArgs']]]] = None,
                 external_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering RouterV2 resources.
        :param pulumi.Input[_builtins.bool] admin_state_up: Administrative up/down status for the router
               (must be "true" or "false" if provided). Changing this updates the
               `admin_state_up` of an existing router.
        :param pulumi.Input[_builtins.bool] distributed: Indicates whether or not to create a distributed router. The default policy
               setting in Neutron restricts usage of this property to administrative users only.
        :param pulumi.Input[_builtins.bool] enable_snat: Enable Source NAT for the router. Valid values are
               "true" or "false". An `external_network_id` has to be set in order to set this property. Changing this updates
               the `enable_snat` of the router.
        :param pulumi.Input[Sequence[pulumi.Input['RouterV2ExternalFixedIpArgs']]] external_fixed_ips: An external fixed IP for the router. This can be repeated. The structure is
               described below. An `external_network_id`
               has to be set in order to set this property. Changing this updates the external fixed IPs of the router.
        :param pulumi.Input[_builtins.str] external_network_id: The network UUID of an external gateway for the router. A router with an
               external gateway is required if any compute instances or load balancers will be using floating IPs. Changing this
               updates the external gateway of the router.
        :param pulumi.Input[_builtins.str] name: A unique name for the router. Changing this updates the `name` of an existing router.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 networking client. A networking client is
               needed to create a router. If omitted, the
               `region` argument of the provider is used. Changing this creates a new router.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional driver-specific options.
        """
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if distributed is not None:
            pulumi.set(__self__, "distributed", distributed)
        if enable_snat is not None:
            pulumi.set(__self__, "enable_snat", enable_snat)
        if external_fixed_ips is not None:
            pulumi.set(__self__, "external_fixed_ips", external_fixed_ips)
        if external_network_id is not None:
            pulumi.set(__self__, "external_network_id", external_network_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Administrative up/down status for the router
        (must be "true" or "false" if provided). Changing this updates the
        `admin_state_up` of an existing router.
        """
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "admin_state_up", value)

    @_builtins.property
    @pulumi.getter
    def distributed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether or not to create a distributed router. The default policy
        setting in Neutron restricts usage of this property to administrative users only.
        """
        return pulumi.get(self, "distributed")

    @distributed.setter
    def distributed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "distributed", value)

    @_builtins.property
    @pulumi.getter(name="enableSnat")
    def enable_snat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Source NAT for the router. Valid values are
        "true" or "false". An `external_network_id` has to be set in order to set this property. Changing this updates
        the `enable_snat` of the router.
        """
        return pulumi.get(self, "enable_snat")

    @enable_snat.setter
    def enable_snat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_snat", value)

    @_builtins.property
    @pulumi.getter(name="externalFixedIps")
    def external_fixed_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterV2ExternalFixedIpArgs']]]]:
        """
        An external fixed IP for the router. This can be repeated. The structure is
        described below. An `external_network_id`
        has to be set in order to set this property. Changing this updates the external fixed IPs of the router.
        """
        return pulumi.get(self, "external_fixed_ips")

    @external_fixed_ips.setter
    def external_fixed_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterV2ExternalFixedIpArgs']]]]):
        pulumi.set(self, "external_fixed_ips", value)

    @_builtins.property
    @pulumi.getter(name="externalNetworkId")
    def external_network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network UUID of an external gateway for the router. A router with an
        external gateway is required if any compute instances or load balancers will be using floating IPs. Changing this
        updates the external gateway of the router.
        """
        return pulumi.get(self, "external_network_id")

    @external_network_id.setter
    def external_network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_network_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A unique name for the router. Changing this updates the `name` of an existing router.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the V2 networking client. A networking client is
        needed to create a router. If omitted, the
        `region` argument of the provider is used. Changing this creates a new router.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of additional driver-specific options.
        """
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.type_token("huaweicloud:Vpc/routerV2:RouterV2")
class RouterV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 distributed: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 external_fixed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RouterV2ExternalFixedIpArgs', 'RouterV2ExternalFixedIpArgsDict']]]]] = None,
                 external_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a V2 router resource within HuaweiCloud.

        !> **WARNING:** It has been deprecated, use `Vpc.Vpc` instead.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        router1 = huaweicloud.vpc.RouterV2("router_1",
            name="my_router",
            admin_state_up=True,
            external_network_id="f67f0d72-0ddf-11e4-9d95-e1f29f417e2f")
        ```

        ## Import

        Routers can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/routerV2:RouterV2 router_1 014395cd-89fc-4c9b-96b7-13d1ee79dad2
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] admin_state_up: Administrative up/down status for the router
               (must be "true" or "false" if provided). Changing this updates the
               `admin_state_up` of an existing router.
        :param pulumi.Input[_builtins.bool] distributed: Indicates whether or not to create a distributed router. The default policy
               setting in Neutron restricts usage of this property to administrative users only.
        :param pulumi.Input[_builtins.bool] enable_snat: Enable Source NAT for the router. Valid values are
               "true" or "false". An `external_network_id` has to be set in order to set this property. Changing this updates
               the `enable_snat` of the router.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RouterV2ExternalFixedIpArgs', 'RouterV2ExternalFixedIpArgsDict']]]] external_fixed_ips: An external fixed IP for the router. This can be repeated. The structure is
               described below. An `external_network_id`
               has to be set in order to set this property. Changing this updates the external fixed IPs of the router.
        :param pulumi.Input[_builtins.str] external_network_id: The network UUID of an external gateway for the router. A router with an
               external gateway is required if any compute instances or load balancers will be using floating IPs. Changing this
               updates the external gateway of the router.
        :param pulumi.Input[_builtins.str] name: A unique name for the router. Changing this updates the `name` of an existing router.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 networking client. A networking client is
               needed to create a router. If omitted, the
               `region` argument of the provider is used. Changing this creates a new router.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional driver-specific options.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RouterV2Args] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a V2 router resource within HuaweiCloud.

        !> **WARNING:** It has been deprecated, use `Vpc.Vpc` instead.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        router1 = huaweicloud.vpc.RouterV2("router_1",
            name="my_router",
            admin_state_up=True,
            external_network_id="f67f0d72-0ddf-11e4-9d95-e1f29f417e2f")
        ```

        ## Import

        Routers can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/routerV2:RouterV2 router_1 014395cd-89fc-4c9b-96b7-13d1ee79dad2
        ```

        :param str resource_name: The name of the resource.
        :param RouterV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouterV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 distributed: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 external_fixed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RouterV2ExternalFixedIpArgs', 'RouterV2ExternalFixedIpArgsDict']]]]] = None,
                 external_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouterV2Args.__new__(RouterV2Args)

            __props__.__dict__["admin_state_up"] = admin_state_up
            __props__.__dict__["distributed"] = distributed
            __props__.__dict__["enable_snat"] = enable_snat
            __props__.__dict__["external_fixed_ips"] = external_fixed_ips
            __props__.__dict__["external_network_id"] = external_network_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["value_specs"] = value_specs
        super(RouterV2, __self__).__init__(
            'huaweicloud:Vpc/routerV2:RouterV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
            distributed: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
            external_fixed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RouterV2ExternalFixedIpArgs', 'RouterV2ExternalFixedIpArgsDict']]]]] = None,
            external_network_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'RouterV2':
        """
        Get an existing RouterV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] admin_state_up: Administrative up/down status for the router
               (must be "true" or "false" if provided). Changing this updates the
               `admin_state_up` of an existing router.
        :param pulumi.Input[_builtins.bool] distributed: Indicates whether or not to create a distributed router. The default policy
               setting in Neutron restricts usage of this property to administrative users only.
        :param pulumi.Input[_builtins.bool] enable_snat: Enable Source NAT for the router. Valid values are
               "true" or "false". An `external_network_id` has to be set in order to set this property. Changing this updates
               the `enable_snat` of the router.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RouterV2ExternalFixedIpArgs', 'RouterV2ExternalFixedIpArgsDict']]]] external_fixed_ips: An external fixed IP for the router. This can be repeated. The structure is
               described below. An `external_network_id`
               has to be set in order to set this property. Changing this updates the external fixed IPs of the router.
        :param pulumi.Input[_builtins.str] external_network_id: The network UUID of an external gateway for the router. A router with an
               external gateway is required if any compute instances or load balancers will be using floating IPs. Changing this
               updates the external gateway of the router.
        :param pulumi.Input[_builtins.str] name: A unique name for the router. Changing this updates the `name` of an existing router.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 networking client. A networking client is
               needed to create a router. If omitted, the
               `region` argument of the provider is used. Changing this creates a new router.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional driver-specific options.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouterV2State.__new__(_RouterV2State)

        __props__.__dict__["admin_state_up"] = admin_state_up
        __props__.__dict__["distributed"] = distributed
        __props__.__dict__["enable_snat"] = enable_snat
        __props__.__dict__["external_fixed_ips"] = external_fixed_ips
        __props__.__dict__["external_network_id"] = external_network_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["value_specs"] = value_specs
        return RouterV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> pulumi.Output[_builtins.bool]:
        """
        Administrative up/down status for the router
        (must be "true" or "false" if provided). Changing this updates the
        `admin_state_up` of an existing router.
        """
        return pulumi.get(self, "admin_state_up")

    @_builtins.property
    @pulumi.getter
    def distributed(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether or not to create a distributed router. The default policy
        setting in Neutron restricts usage of this property to administrative users only.
        """
        return pulumi.get(self, "distributed")

    @_builtins.property
    @pulumi.getter(name="enableSnat")
    def enable_snat(self) -> pulumi.Output[_builtins.bool]:
        """
        Enable Source NAT for the router. Valid values are
        "true" or "false". An `external_network_id` has to be set in order to set this property. Changing this updates
        the `enable_snat` of the router.
        """
        return pulumi.get(self, "enable_snat")

    @_builtins.property
    @pulumi.getter(name="externalFixedIps")
    def external_fixed_ips(self) -> pulumi.Output[Sequence['outputs.RouterV2ExternalFixedIp']]:
        """
        An external fixed IP for the router. This can be repeated. The structure is
        described below. An `external_network_id`
        has to be set in order to set this property. Changing this updates the external fixed IPs of the router.
        """
        return pulumi.get(self, "external_fixed_ips")

    @_builtins.property
    @pulumi.getter(name="externalNetworkId")
    def external_network_id(self) -> pulumi.Output[_builtins.str]:
        """
        The network UUID of an external gateway for the router. A router with an
        external gateway is required if any compute instances or load balancers will be using floating IPs. Changing this
        updates the external gateway of the router.
        """
        return pulumi.get(self, "external_network_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A unique name for the router. Changing this updates the `name` of an existing router.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the V2 networking client. A networking client is
        needed to create a router. If omitted, the
        `region` argument of the provider is used. Changing this creates a new router.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Map of additional driver-specific options.
        """
        return pulumi.get(self, "value_specs")

