# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBandwidthTypesResult',
    'AwaitableGetBandwidthTypesResult',
    'get_bandwidth_types',
    'get_bandwidth_types_output',
]

@pulumi.output_type
class GetBandwidthTypesResult:
    """
    A collection of values returned by getBandwidthTypes.
    """
    def __init__(__self__, bandwidth_type=None, id=None, name_en=None, name_zh=None, public_border_group=None, region=None, share_bandwidth_types=None):
        if bandwidth_type and not isinstance(bandwidth_type, str):
            raise TypeError("Expected argument 'bandwidth_type' to be a str")
        pulumi.set(__self__, "bandwidth_type", bandwidth_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_en and not isinstance(name_en, str):
            raise TypeError("Expected argument 'name_en' to be a str")
        pulumi.set(__self__, "name_en", name_en)
        if name_zh and not isinstance(name_zh, str):
            raise TypeError("Expected argument 'name_zh' to be a str")
        pulumi.set(__self__, "name_zh", name_zh)
        if public_border_group and not isinstance(public_border_group, str):
            raise TypeError("Expected argument 'public_border_group' to be a str")
        pulumi.set(__self__, "public_border_group", public_border_group)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if share_bandwidth_types and not isinstance(share_bandwidth_types, list):
            raise TypeError("Expected argument 'share_bandwidth_types' to be a list")
        pulumi.set(__self__, "share_bandwidth_types", share_bandwidth_types)

    @_builtins.property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> Optional[_builtins.str]:
        """
        Indicates the bandwidth type.
        """
        return pulumi.get(self, "bandwidth_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> Optional[_builtins.str]:
        """
        Indicates the English description of the bandwidth type.
        """
        return pulumi.get(self, "name_en")

    @_builtins.property
    @pulumi.getter(name="nameZh")
    def name_zh(self) -> Optional[_builtins.str]:
        """
        Indicates the Chinese description of the bandwidth type.
        """
        return pulumi.get(self, "name_zh")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> Optional[_builtins.str]:
        """
        Indicates whether the bandwidth type is at central site or edge site.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="shareBandwidthTypes")
    def share_bandwidth_types(self) -> Sequence['outputs.GetBandwidthTypesShareBandwidthTypeResult']:
        """
        Indicates the shared bandwidth types.
        """
        return pulumi.get(self, "share_bandwidth_types")


class AwaitableGetBandwidthTypesResult(GetBandwidthTypesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBandwidthTypesResult(
            bandwidth_type=self.bandwidth_type,
            id=self.id,
            name_en=self.name_en,
            name_zh=self.name_zh,
            public_border_group=self.public_border_group,
            region=self.region,
            share_bandwidth_types=self.share_bandwidth_types)


def get_bandwidth_types(bandwidth_type: Optional[_builtins.str] = None,
                        name_en: Optional[_builtins.str] = None,
                        name_zh: Optional[_builtins.str] = None,
                        public_border_group: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBandwidthTypesResult:
    """
    Use this data source to get a list of share bandwidth types.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Vpc.get_bandwidth_types()
    ```


    :param _builtins.str bandwidth_type: Specifies the bandwidth type.
    :param _builtins.str name_en: Specifies the English description of the bandwidth type.
    :param _builtins.str name_zh: Specifies the Chinese description of the bandwidth type.
    :param _builtins.str public_border_group: Specifies the location of the bandwidth type.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['bandwidthType'] = bandwidth_type
    __args__['nameEn'] = name_en
    __args__['nameZh'] = name_zh
    __args__['publicBorderGroup'] = public_border_group
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getBandwidthTypes:getBandwidthTypes', __args__, opts=opts, typ=GetBandwidthTypesResult).value

    return AwaitableGetBandwidthTypesResult(
        bandwidth_type=pulumi.get(__ret__, 'bandwidth_type'),
        id=pulumi.get(__ret__, 'id'),
        name_en=pulumi.get(__ret__, 'name_en'),
        name_zh=pulumi.get(__ret__, 'name_zh'),
        public_border_group=pulumi.get(__ret__, 'public_border_group'),
        region=pulumi.get(__ret__, 'region'),
        share_bandwidth_types=pulumi.get(__ret__, 'share_bandwidth_types'))
def get_bandwidth_types_output(bandwidth_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name_en: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name_zh: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               public_border_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBandwidthTypesResult]:
    """
    Use this data source to get a list of share bandwidth types.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Vpc.get_bandwidth_types()
    ```


    :param _builtins.str bandwidth_type: Specifies the bandwidth type.
    :param _builtins.str name_en: Specifies the English description of the bandwidth type.
    :param _builtins.str name_zh: Specifies the Chinese description of the bandwidth type.
    :param _builtins.str public_border_group: Specifies the location of the bandwidth type.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['bandwidthType'] = bandwidth_type
    __args__['nameEn'] = name_en
    __args__['nameZh'] = name_zh
    __args__['publicBorderGroup'] = public_border_group
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpc/getBandwidthTypes:getBandwidthTypes', __args__, opts=opts, typ=GetBandwidthTypesResult)
    return __ret__.apply(lambda __response__: GetBandwidthTypesResult(
        bandwidth_type=pulumi.get(__response__, 'bandwidth_type'),
        id=pulumi.get(__response__, 'id'),
        name_en=pulumi.get(__response__, 'name_en'),
        name_zh=pulumi.get(__response__, 'name_zh'),
        public_border_group=pulumi.get(__response__, 'public_border_group'),
        region=pulumi.get(__response__, 'region'),
        share_bandwidth_types=pulumi.get(__response__, 'share_bandwidth_types')))
