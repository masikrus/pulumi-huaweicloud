# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['Eipv3AssociateArgs', 'Eipv3Associate']

@pulumi.input_type
class Eipv3AssociateArgs:
    def __init__(__self__, *,
                 associate_instance_id: pulumi.Input[_builtins.str],
                 associate_instance_type: pulumi.Input[_builtins.str],
                 publicip_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Eipv3Associate resource.
        :param pulumi.Input[_builtins.str] associate_instance_id: Specifies the ID of the instance that the port belongs to.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] associate_instance_type: Specifies the type of the instance that the port belongs to.
               Value options: **PORT**, **NATGW**, **VPN** and **ELB**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] publicip_id: Specifies the ID of a EIP. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the VPC EIP associate resource. If
               omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        pulumi.set(__self__, "associate_instance_id", associate_instance_id)
        pulumi.set(__self__, "associate_instance_type", associate_instance_type)
        pulumi.set(__self__, "publicip_id", publicip_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="associateInstanceId")
    def associate_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the instance that the port belongs to.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "associate_instance_id")

    @associate_instance_id.setter
    def associate_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "associate_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="associateInstanceType")
    def associate_instance_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the instance that the port belongs to.
        Value options: **PORT**, **NATGW**, **VPN** and **ELB**. Changing this creates a new resource.
        """
        return pulumi.get(self, "associate_instance_type")

    @associate_instance_type.setter
    def associate_instance_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "associate_instance_type", value)

    @_builtins.property
    @pulumi.getter(name="publicipId")
    def publicip_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a EIP. Changing this creates a new resource.
        """
        return pulumi.get(self, "publicip_id")

    @publicip_id.setter
    def publicip_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "publicip_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the VPC EIP associate resource. If
        omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _Eipv3AssociateState:
    def __init__(__self__, *,
                 associate_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 associate_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 publicip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Eipv3Associate resources.
        :param pulumi.Input[_builtins.str] associate_instance_id: Specifies the ID of the instance that the port belongs to.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] associate_instance_type: Specifies the type of the instance that the port belongs to.
               Value options: **PORT**, **NATGW**, **VPN** and **ELB**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] publicip_id: Specifies the ID of a EIP. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the VPC EIP associate resource. If
               omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        if associate_instance_id is not None:
            pulumi.set(__self__, "associate_instance_id", associate_instance_id)
        if associate_instance_type is not None:
            pulumi.set(__self__, "associate_instance_type", associate_instance_type)
        if publicip_id is not None:
            pulumi.set(__self__, "publicip_id", publicip_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="associateInstanceId")
    def associate_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the instance that the port belongs to.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "associate_instance_id")

    @associate_instance_id.setter
    def associate_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "associate_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="associateInstanceType")
    def associate_instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the instance that the port belongs to.
        Value options: **PORT**, **NATGW**, **VPN** and **ELB**. Changing this creates a new resource.
        """
        return pulumi.get(self, "associate_instance_type")

    @associate_instance_type.setter
    def associate_instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "associate_instance_type", value)

    @_builtins.property
    @pulumi.getter(name="publicipId")
    def publicip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a EIP. Changing this creates a new resource.
        """
        return pulumi.get(self, "publicip_id")

    @publicip_id.setter
    def publicip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "publicip_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the VPC EIP associate resource. If
        omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Vpc/eipv3Associate:Eipv3Associate")
class Eipv3Associate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associate_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 associate_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 publicip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a VPC EIP associates with an instance resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        publicip_id = config.require_object("publicipId")
        elb_id = config.require_object("elbId")
        test = huaweicloud.vpc.Eipv3Associate("test",
            publicip_id=publicip_id,
            associate_instance_type="ELB",
            associate_instance_id=elb_id)
        ```

        ## Import

        The VPC EIP associations can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/eipv3Associate:Eipv3Associate eip <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] associate_instance_id: Specifies the ID of the instance that the port belongs to.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] associate_instance_type: Specifies the type of the instance that the port belongs to.
               Value options: **PORT**, **NATGW**, **VPN** and **ELB**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] publicip_id: Specifies the ID of a EIP. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the VPC EIP associate resource. If
               omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Eipv3AssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a VPC EIP associates with an instance resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        publicip_id = config.require_object("publicipId")
        elb_id = config.require_object("elbId")
        test = huaweicloud.vpc.Eipv3Associate("test",
            publicip_id=publicip_id,
            associate_instance_type="ELB",
            associate_instance_id=elb_id)
        ```

        ## Import

        The VPC EIP associations can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/eipv3Associate:Eipv3Associate eip <id>
        ```

        :param str resource_name: The name of the resource.
        :param Eipv3AssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Eipv3AssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associate_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 associate_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 publicip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Eipv3AssociateArgs.__new__(Eipv3AssociateArgs)

            if associate_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'associate_instance_id'")
            __props__.__dict__["associate_instance_id"] = associate_instance_id
            if associate_instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'associate_instance_type'")
            __props__.__dict__["associate_instance_type"] = associate_instance_type
            if publicip_id is None and not opts.urn:
                raise TypeError("Missing required property 'publicip_id'")
            __props__.__dict__["publicip_id"] = publicip_id
            __props__.__dict__["region"] = region
        super(Eipv3Associate, __self__).__init__(
            'huaweicloud:Vpc/eipv3Associate:Eipv3Associate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            associate_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            associate_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
            publicip_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'Eipv3Associate':
        """
        Get an existing Eipv3Associate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] associate_instance_id: Specifies the ID of the instance that the port belongs to.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] associate_instance_type: Specifies the type of the instance that the port belongs to.
               Value options: **PORT**, **NATGW**, **VPN** and **ELB**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] publicip_id: Specifies the ID of a EIP. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the VPC EIP associate resource. If
               omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Eipv3AssociateState.__new__(_Eipv3AssociateState)

        __props__.__dict__["associate_instance_id"] = associate_instance_id
        __props__.__dict__["associate_instance_type"] = associate_instance_type
        __props__.__dict__["publicip_id"] = publicip_id
        __props__.__dict__["region"] = region
        return Eipv3Associate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="associateInstanceId")
    def associate_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the instance that the port belongs to.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "associate_instance_id")

    @_builtins.property
    @pulumi.getter(name="associateInstanceType")
    def associate_instance_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the instance that the port belongs to.
        Value options: **PORT**, **NATGW**, **VPN** and **ELB**. Changing this creates a new resource.
        """
        return pulumi.get(self, "associate_instance_type")

    @_builtins.property
    @pulumi.getter(name="publicipId")
    def publicip_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a EIP. Changing this creates a new resource.
        """
        return pulumi.get(self, "publicip_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the VPC EIP associate resource. If
        omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

