# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AddressGroupIpExtraSet',
    'BandwidthPublicip',
    'BandwidthV2Publicip',
    'EipBandwidth',
    'EipPublicip',
    'EipV1Bandwidth',
    'EipV1Publicip',
    'NetworkAclAssociatedSubnet',
    'NetworkAclEgressRule',
    'NetworkAclIngressRule',
    'NetworkV2Segment',
    'PortAllowedAddressPair',
    'PortExtraDhcpOption',
    'PortFixedIp',
    'PortV2AllowedAddressPair',
    'PortV2ExtraDhcpOption',
    'PortV2FixedIp',
    'RouteTableRoute',
    'RouterV2ExternalFixedIp',
    'SecgroupRule',
    'SecgroupV2Rule',
    'SubnetV2AllocationPool',
    'SubnetV2HostRoute',
    'V1Route',
    'VpcRoute',
    'GetAddressGroupsAddressGroupResult',
    'GetAddressGroupsAddressGroupIpExtraSetResult',
    'GetBandwidthAddonPackagesBandwidthPkgResult',
    'GetBandwidthLimitsEipBandwidthLimitResult',
    'GetBandwidthLimitsEipBandwidthLimitExtLimitResult',
    'GetBandwidthTypesShareBandwidthTypeResult',
    'GetBandwidthsBandwidthResult',
    'GetBandwidthsBandwidthPublicipResult',
    'GetBandwidthsV3EipBandwidthResult',
    'GetBandwidthsV3EipBandwidthBandwidthRuleResult',
    'GetBandwidthsV3EipBandwidthBandwidthRulePublicipInfoResult',
    'GetBandwidthsV3EipBandwidthPublicipInfoResult',
    'GetByTagsMatchResult',
    'GetByTagsResourceResult',
    'GetByTagsTagResult',
    'GetEipCommonPoolsCommonPoolResult',
    'GetEipPoolsPoolResult',
    'GetEipPoolsPoolBillingInfoResult',
    'GetEipTagsTagResult',
    'GetEipsV3PublicipResult',
    'GetEipsV3PublicipBandwidthResult',
    'GetEipsV3PublicipVnicResult',
    'GetFlowLogsFlowLogResult',
    'GetInternetGatewaysVpcIgwResult',
    'GetNetworkAclTagsTagResult',
    'GetNetworkAclsByTagsMatchResult',
    'GetNetworkAclsByTagsResourceResult',
    'GetNetworkAclsByTagsTagResult',
    'GetNetworkAclsNetworkAclResult',
    'GetNetworkAclsNetworkAclAssociatedSubnetResult',
    'GetNetworkAclsNetworkAclEgressRuleResult',
    'GetNetworkAclsNetworkAclIngressRuleResult',
    'GetNetworkInterfacesPortResult',
    'GetNetworkInterfacesPortAllowedAddressPairResult',
    'GetNetworkInterfacesPortBindingVifDetailResult',
    'GetNetworkInterfacesPortDnsAssignmentResult',
    'GetNetworkInterfacesPortExtraDhcpOptResult',
    'GetNetworkInterfacesPortFixedIpResult',
    'GetQuotasQuotaResult',
    'GetQuotasQuotaResourceResult',
    'GetRouteTableRouteResult',
    'GetRoutesRouteResult',
    'GetSecgroupRuleResult',
    'GetSecgroupRulesRuleResult',
    'GetSecgroupTagsTagResult',
    'GetSecgroupV2RuleResult',
    'GetSecgroupsByTagsMatchResult',
    'GetSecgroupsByTagsResourceResult',
    'GetSecgroupsByTagsTagResult',
    'GetSecgroupsSecurityGroupResult',
    'GetSubNetworkInterfacesSubNetworkInterfaceResult',
    'GetSubnetIpAvailabilitiesNetworkIpAvailabilityResult',
    'GetSubnetIpAvailabilitiesNetworkIpAvailabilitySubnetIpAvailabilityResult',
    'GetSubnetPrivateIpsPrivateIpResult',
    'GetSubnetV2AllocationPoolResult',
    'GetSubnetV2HostRouteResult',
    'GetSubnetsByTagsMatchResult',
    'GetSubnetsByTagsResourceResult',
    'GetSubnetsByTagsTagResult',
    'GetSubnetsSubnetResult',
    'GetTrafficMirrorFilterRulesTrafficMirrorFilterRuleResult',
    'GetTrafficMirrorFiltersTrafficMirrorFilterResult',
    'GetTrafficMirrorFiltersTrafficMirrorFilterEgressRuleResult',
    'GetTrafficMirrorFiltersTrafficMirrorFilterIngressRuleResult',
    'GetTrafficMirrorSessionsTrafficMirrorSessionResult',
    'GetV1RouteResult',
    'GetVpcRouteResult',
    'GetVpcsVpcResult',
]

@pulumi.output_type
class AddressGroupIpExtraSet(dict):
    def __init__(__self__, *,
                 ip: _builtins.str,
                 remarks: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip: Specifies the IP address, IP address range, or CIDR block.
        :param _builtins.str remarks: Specifies the supplementary information about the IP address,
               IP address range, or CIDR block.
        """
        pulumi.set(__self__, "ip", ip)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Specifies the IP address, IP address range, or CIDR block.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> Optional[_builtins.str]:
        """
        Specifies the supplementary information about the IP address,
        IP address range, or CIDR block.
        """
        return pulumi.get(self, "remarks")


@pulumi.output_type
class BandwidthPublicip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BandwidthPublicip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BandwidthPublicip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BandwidthPublicip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_version: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: The ID of the EIP or IPv6 port that uses the bandwidth.
        :param _builtins.str ip_address: The IPv4 or IPv6 address.
        :param _builtins.int ip_version: The IP version, either 4 or 6.
        :param _builtins.str type: The EIP type. Possible values are *5_bgp* (dynamic BGP) and *5_sbgp* (static BGP).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the EIP or IPv6 port that uses the bandwidth.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The IPv4 or IPv6 address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        """
        The IP version, either 4 or 6.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The EIP type. Possible values are *5_bgp* (dynamic BGP) and *5_sbgp* (static BGP).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class BandwidthV2Publicip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BandwidthV2Publicip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BandwidthV2Publicip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BandwidthV2Publicip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_version: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class EipBandwidth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shareType":
            suggest = "share_type"
        elif key == "chargeMode":
            suggest = "charge_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EipBandwidth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EipBandwidth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EipBandwidth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 share_type: _builtins.str,
                 charge_mode: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 size: Optional[_builtins.int] = None):
        """
        :param _builtins.str share_type: Specifies whether the bandwidth is dedicated or shared.  
               Changing this will create a new resource. Possible values are as follows:
               + **PER**: Dedicated bandwidth
               + **WHOLE**: Shared bandwidth
        :param _builtins.str charge_mode: Specifies whether the bandwidth is billed by traffic or by bandwidth
               size. The value can be **traffic** or **bandwidth**. If the `charging_mode` is **prePaid**, only **bandwidth** is valid.
        :param _builtins.str id: The shared bandwidth ID.  
               This parameter is mandatory when `share_type` is set to **WHOLE**. Changing this will create a new resource.
        :param _builtins.str name: Specifies the bandwidth name.  
               The name can contain `1` to `64` characters, including letters, digits, underscores (_), hyphens (-), and periods (.).
               This parameter is mandatory when `share_type` is set to **PER**.
        :param _builtins.int size: The bandwidth size.  
               The value ranges from `1` to `300` Mbit/s. This parameter is mandatory when `share_type` is set to **PER**.
        """
        pulumi.set(__self__, "share_type", share_type)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="shareType")
    def share_type(self) -> _builtins.str:
        """
        Specifies whether the bandwidth is dedicated or shared.  
        Changing this will create a new resource. Possible values are as follows:
        + **PER**: Dedicated bandwidth
        + **WHOLE**: Shared bandwidth
        """
        return pulumi.get(self, "share_type")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        Specifies whether the bandwidth is billed by traffic or by bandwidth
        size. The value can be **traffic** or **bandwidth**. If the `charging_mode` is **prePaid**, only **bandwidth** is valid.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The shared bandwidth ID.  
        This parameter is mandatory when `share_type` is set to **WHOLE**. Changing this will create a new resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the bandwidth name.  
        The name can contain `1` to `64` characters, including letters, digits, underscores (_), hyphens (-), and periods (.).
        This parameter is mandatory when `share_type` is set to **PER**.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        """
        The bandwidth size.  
        The value ranges from `1` to `300` Mbit/s. This parameter is mandatory when `share_type` is set to **PER**.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class EipPublicip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"
        elif key == "portId":
            suggest = "port_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EipPublicip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EipPublicip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EipPublicip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[_builtins.str] = None,
                 ip_version: Optional[_builtins.int] = None,
                 port_id: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_address: Specifies the EIP address to be assigned.  
               The value must be a valid **IPv4** address in the available IP address range.
               The system automatically assigns an EIP if you do not specify it. Changing this will create a new resource.
        :param _builtins.int ip_version: Specifies the IP version, either `4` (default) or `6`.
               
               <a name="vpc_eip_bandwidth"></a>
               The `bandwidth` block supports:
        :param _builtins.str port_id: The port ID which the EIP associated with.
        :param _builtins.str type: Specifies the EIP type. Possible values are **5_bgp** (dynamic BGP)
               and **5_sbgp** (static BGP), the default value is **5_bgp**. Changing this will create a new resource.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if port_id is not None:
            pulumi.set(__self__, "port_id", port_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        Specifies the EIP address to be assigned.  
        The value must be a valid **IPv4** address in the available IP address range.
        The system automatically assigns an EIP if you do not specify it. Changing this will create a new resource.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        """
        Specifies the IP version, either `4` (default) or `6`.

        <a name="vpc_eip_bandwidth"></a>
        The `bandwidth` block supports:
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> Optional[_builtins.str]:
        """
        The port ID which the EIP associated with.
        """
        return pulumi.get(self, "port_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the EIP type. Possible values are **5_bgp** (dynamic BGP)
        and **5_sbgp** (static BGP), the default value is **5_bgp**. Changing this will create a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EipV1Bandwidth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shareType":
            suggest = "share_type"
        elif key == "chargeMode":
            suggest = "charge_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EipV1Bandwidth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EipV1Bandwidth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EipV1Bandwidth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 share_type: _builtins.str,
                 charge_mode: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 size: Optional[_builtins.int] = None):
        """
        :param _builtins.str share_type: Whether the bandwidth is dedicated or shared.
        :param _builtins.str charge_mode: Whether the bandwidth is billed by traffic or by bandwidth size.
        :param _builtins.str id: The shared bandwidth ID.
        :param _builtins.str name: The dedicated bandwidth name.
        :param _builtins.int size: The dedicated bandwidth size.
        """
        pulumi.set(__self__, "share_type", share_type)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="shareType")
    def share_type(self) -> _builtins.str:
        """
        Whether the bandwidth is dedicated or shared.
        """
        return pulumi.get(self, "share_type")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        Whether the bandwidth is billed by traffic or by bandwidth size.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The shared bandwidth ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The dedicated bandwidth name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        """
        The dedicated bandwidth size.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class EipV1Publicip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"
        elif key == "portId":
            suggest = "port_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EipV1Publicip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EipV1Publicip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EipV1Publicip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[_builtins.str] = None,
                 ip_version: Optional[_builtins.int] = None,
                 port_id: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_address: The EIP address to be assigned.
        :param _builtins.int ip_version: The IP version.
        :param _builtins.str port_id: schema: Deprecated
        :param _builtins.str type: The EIP type.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if port_id is not None:
            pulumi.set(__self__, "port_id", port_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The EIP address to be assigned.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        """
        The IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> Optional[_builtins.str]:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The EIP type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworkAclAssociatedSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkAclAssociatedSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkAclAssociatedSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkAclAssociatedSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str subnet_id: Specifies the ID of the subnet to associate with the network ACL.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the ID of the subnet to associate with the network ACL.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class NetworkAclEgressRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipVersion":
            suggest = "ip_version"
        elif key == "destinationIpAddress":
            suggest = "destination_ip_address"
        elif key == "destinationIpAddressGroupId":
            suggest = "destination_ip_address_group_id"
        elif key == "destinationPort":
            suggest = "destination_port"
        elif key == "ruleId":
            suggest = "rule_id"
        elif key == "sourceIpAddress":
            suggest = "source_ip_address"
        elif key == "sourceIpAddressGroupId":
            suggest = "source_ip_address_group_id"
        elif key == "sourcePort":
            suggest = "source_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkAclEgressRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkAclEgressRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkAclEgressRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: _builtins.str,
                 ip_version: _builtins.int,
                 protocol: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 destination_ip_address: Optional[_builtins.str] = None,
                 destination_ip_address_group_id: Optional[_builtins.str] = None,
                 destination_port: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 rule_id: Optional[_builtins.str] = None,
                 source_ip_address: Optional[_builtins.str] = None,
                 source_ip_address_group_id: Optional[_builtins.str] = None,
                 source_port: Optional[_builtins.str] = None):
        """
        :param _builtins.str action: Specifies the rule action. The value can be: **allow** and **deny**.
        :param _builtins.int ip_version: Specifies the IP version of a network ACL rule.
               The value can be **4** (IPv4) and **6** (IPv6).
        :param _builtins.str protocol: Specifies the rule protocol The value can be **tcp**, **udp**, **icmp**, **icmpv6**,
               or an IP protocol number (0–255). The value **any** indicates all protocols.
        :param _builtins.str description: Specifies the network ACL rule description. The value can contain no more
               than 255 characters. The value cannot contain angle brackets (< or >).
        :param _builtins.str destination_ip_address: Specifies the destination IP address or CIDR block of a network ACL rule.
               The `destination_ip_address` and `destination_address_group_id` cannot be configured at the same time.
        :param _builtins.str destination_ip_address_group_id: Specifies the destination IP address group ID of a network ACL rule.
               The `destination_ip_address` and `destination_address_group_id` cannot be configured at the same time.
        :param _builtins.str destination_port: Specifies the destination ports of a network ACL rule.
               You can specify a single port or a port range. Separate every two entries with a comma.
               
               <a name="subnets"></a>
               The `associated_subnets` block supports:
        :param _builtins.str name: Specifies the network ACL rule name. The value can contain no more than 64 characters,
               including letters, digits, underscores (_), hyphens (-), and periods (.).
        :param _builtins.str rule_id: The ID of the rule.
        :param _builtins.str source_ip_address: Specifies the source IP address or CIDR block of a network ACL rule.
               The `source_ip_address` and `source_address_group_id` cannot be configured at the same time.
        :param _builtins.str source_ip_address_group_id: Specifies the source IP address group ID of a network ACL rule.
               `source_ip_address` and `source_address_group_id` cannot be configured at the same time.
        :param _builtins.str source_port: Specifies the source ports of a network ACL rule.
               You can specify a single port or a port range. Separate every two entries with a comma.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "protocol", protocol)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_ip_address is not None:
            pulumi.set(__self__, "destination_ip_address", destination_ip_address)
        if destination_ip_address_group_id is not None:
            pulumi.set(__self__, "destination_ip_address_group_id", destination_ip_address_group_id)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if source_ip_address is not None:
            pulumi.set(__self__, "source_ip_address", source_ip_address)
        if source_ip_address_group_id is not None:
            pulumi.set(__self__, "source_ip_address_group_id", source_ip_address_group_id)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        Specifies the rule action. The value can be: **allow** and **deny**.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        Specifies the IP version of a network ACL rule.
        The value can be **4** (IPv4) and **6** (IPv6).
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the rule protocol The value can be **tcp**, **udp**, **icmp**, **icmpv6**,
        or an IP protocol number (0–255). The value **any** indicates all protocols.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the network ACL rule description. The value can contain no more
        than 255 characters. The value cannot contain angle brackets (< or >).
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="destinationIpAddress")
    def destination_ip_address(self) -> Optional[_builtins.str]:
        """
        Specifies the destination IP address or CIDR block of a network ACL rule.
        The `destination_ip_address` and `destination_address_group_id` cannot be configured at the same time.
        """
        return pulumi.get(self, "destination_ip_address")

    @_builtins.property
    @pulumi.getter(name="destinationIpAddressGroupId")
    def destination_ip_address_group_id(self) -> Optional[_builtins.str]:
        """
        Specifies the destination IP address group ID of a network ACL rule.
        The `destination_ip_address` and `destination_address_group_id` cannot be configured at the same time.
        """
        return pulumi.get(self, "destination_ip_address_group_id")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[_builtins.str]:
        """
        Specifies the destination ports of a network ACL rule.
        You can specify a single port or a port range. Separate every two entries with a comma.

        <a name="subnets"></a>
        The `associated_subnets` block supports:
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the network ACL rule name. The value can contain no more than 64 characters,
        including letters, digits, underscores (_), hyphens (-), and periods (.).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.str]:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter(name="sourceIpAddress")
    def source_ip_address(self) -> Optional[_builtins.str]:
        """
        Specifies the source IP address or CIDR block of a network ACL rule.
        The `source_ip_address` and `source_address_group_id` cannot be configured at the same time.
        """
        return pulumi.get(self, "source_ip_address")

    @_builtins.property
    @pulumi.getter(name="sourceIpAddressGroupId")
    def source_ip_address_group_id(self) -> Optional[_builtins.str]:
        """
        Specifies the source IP address group ID of a network ACL rule.
        `source_ip_address` and `source_address_group_id` cannot be configured at the same time.
        """
        return pulumi.get(self, "source_ip_address_group_id")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[_builtins.str]:
        """
        Specifies the source ports of a network ACL rule.
        You can specify a single port or a port range. Separate every two entries with a comma.
        """
        return pulumi.get(self, "source_port")


@pulumi.output_type
class NetworkAclIngressRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipVersion":
            suggest = "ip_version"
        elif key == "destinationIpAddress":
            suggest = "destination_ip_address"
        elif key == "destinationIpAddressGroupId":
            suggest = "destination_ip_address_group_id"
        elif key == "destinationPort":
            suggest = "destination_port"
        elif key == "ruleId":
            suggest = "rule_id"
        elif key == "sourceIpAddress":
            suggest = "source_ip_address"
        elif key == "sourceIpAddressGroupId":
            suggest = "source_ip_address_group_id"
        elif key == "sourcePort":
            suggest = "source_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkAclIngressRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkAclIngressRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkAclIngressRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: _builtins.str,
                 ip_version: _builtins.int,
                 protocol: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 destination_ip_address: Optional[_builtins.str] = None,
                 destination_ip_address_group_id: Optional[_builtins.str] = None,
                 destination_port: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 rule_id: Optional[_builtins.str] = None,
                 source_ip_address: Optional[_builtins.str] = None,
                 source_ip_address_group_id: Optional[_builtins.str] = None,
                 source_port: Optional[_builtins.str] = None):
        """
        :param _builtins.str action: Specifies the rule action. The value can be: **allow** and **deny**.
        :param _builtins.int ip_version: Specifies the IP version of a network ACL rule.
               The value can be **4** (IPv4) and **6** (IPv6).
        :param _builtins.str protocol: Specifies the rule protocol The value can be **tcp**, **udp**, **icmp**, **icmpv6**,
               or an IP protocol number (0–255). The value **any** indicates all protocols.
        :param _builtins.str description: Specifies the network ACL rule description. The value can contain no more
               than 255 characters. The value cannot contain angle brackets (< or >).
        :param _builtins.str destination_ip_address: Specifies the destination IP address or CIDR block of a network ACL rule.
               The `destination_ip_address` and `destination_address_group_id` cannot be configured at the same time.
        :param _builtins.str destination_ip_address_group_id: Specifies the destination IP address group ID of a network ACL rule.
               The `destination_ip_address` and `destination_address_group_id` cannot be configured at the same time.
        :param _builtins.str destination_port: Specifies the destination ports of a network ACL rule.
               You can specify a single port or a port range. Separate every two entries with a comma.
               
               <a name="subnets"></a>
               The `associated_subnets` block supports:
        :param _builtins.str name: Specifies the network ACL rule name. The value can contain no more than 64 characters,
               including letters, digits, underscores (_), hyphens (-), and periods (.).
        :param _builtins.str rule_id: The ID of the rule.
        :param _builtins.str source_ip_address: Specifies the source IP address or CIDR block of a network ACL rule.
               The `source_ip_address` and `source_address_group_id` cannot be configured at the same time.
        :param _builtins.str source_ip_address_group_id: Specifies the source IP address group ID of a network ACL rule.
               `source_ip_address` and `source_address_group_id` cannot be configured at the same time.
        :param _builtins.str source_port: Specifies the source ports of a network ACL rule.
               You can specify a single port or a port range. Separate every two entries with a comma.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "protocol", protocol)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_ip_address is not None:
            pulumi.set(__self__, "destination_ip_address", destination_ip_address)
        if destination_ip_address_group_id is not None:
            pulumi.set(__self__, "destination_ip_address_group_id", destination_ip_address_group_id)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if source_ip_address is not None:
            pulumi.set(__self__, "source_ip_address", source_ip_address)
        if source_ip_address_group_id is not None:
            pulumi.set(__self__, "source_ip_address_group_id", source_ip_address_group_id)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        Specifies the rule action. The value can be: **allow** and **deny**.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        Specifies the IP version of a network ACL rule.
        The value can be **4** (IPv4) and **6** (IPv6).
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the rule protocol The value can be **tcp**, **udp**, **icmp**, **icmpv6**,
        or an IP protocol number (0–255). The value **any** indicates all protocols.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the network ACL rule description. The value can contain no more
        than 255 characters. The value cannot contain angle brackets (< or >).
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="destinationIpAddress")
    def destination_ip_address(self) -> Optional[_builtins.str]:
        """
        Specifies the destination IP address or CIDR block of a network ACL rule.
        The `destination_ip_address` and `destination_address_group_id` cannot be configured at the same time.
        """
        return pulumi.get(self, "destination_ip_address")

    @_builtins.property
    @pulumi.getter(name="destinationIpAddressGroupId")
    def destination_ip_address_group_id(self) -> Optional[_builtins.str]:
        """
        Specifies the destination IP address group ID of a network ACL rule.
        The `destination_ip_address` and `destination_address_group_id` cannot be configured at the same time.
        """
        return pulumi.get(self, "destination_ip_address_group_id")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[_builtins.str]:
        """
        Specifies the destination ports of a network ACL rule.
        You can specify a single port or a port range. Separate every two entries with a comma.

        <a name="subnets"></a>
        The `associated_subnets` block supports:
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the network ACL rule name. The value can contain no more than 64 characters,
        including letters, digits, underscores (_), hyphens (-), and periods (.).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.str]:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter(name="sourceIpAddress")
    def source_ip_address(self) -> Optional[_builtins.str]:
        """
        Specifies the source IP address or CIDR block of a network ACL rule.
        The `source_ip_address` and `source_address_group_id` cannot be configured at the same time.
        """
        return pulumi.get(self, "source_ip_address")

    @_builtins.property
    @pulumi.getter(name="sourceIpAddressGroupId")
    def source_ip_address_group_id(self) -> Optional[_builtins.str]:
        """
        Specifies the source IP address group ID of a network ACL rule.
        `source_ip_address` and `source_address_group_id` cannot be configured at the same time.
        """
        return pulumi.get(self, "source_ip_address_group_id")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[_builtins.str]:
        """
        Specifies the source ports of a network ACL rule.
        You can specify a single port or a port range. Separate every two entries with a comma.
        """
        return pulumi.get(self, "source_port")


@pulumi.output_type
class NetworkV2Segment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkType":
            suggest = "network_type"
        elif key == "physicalNetwork":
            suggest = "physical_network"
        elif key == "segmentationId":
            suggest = "segmentation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkV2Segment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkV2Segment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkV2Segment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_type: Optional[_builtins.str] = None,
                 physical_network: Optional[_builtins.str] = None,
                 segmentation_id: Optional[_builtins.int] = None):
        """
        :param _builtins.str network_type: The type of physical network.
        :param _builtins.str physical_network: The physical network where this network is implemented.
        :param _builtins.int segmentation_id: An isolated segment on the physical network.
        """
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if physical_network is not None:
            pulumi.set(__self__, "physical_network", physical_network)
        if segmentation_id is not None:
            pulumi.set(__self__, "segmentation_id", segmentation_id)

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[_builtins.str]:
        """
        The type of physical network.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="physicalNetwork")
    def physical_network(self) -> Optional[_builtins.str]:
        """
        The physical network where this network is implemented.
        """
        return pulumi.get(self, "physical_network")

    @_builtins.property
    @pulumi.getter(name="segmentationId")
    def segmentation_id(self) -> Optional[_builtins.int]:
        """
        An isolated segment on the physical network.
        """
        return pulumi.get(self, "segmentation_id")


@pulumi.output_type
class PortAllowedAddressPair(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "macAddress":
            suggest = "mac_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortAllowedAddressPair. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortAllowedAddressPair.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortAllowedAddressPair.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 mac_address: Optional[_builtins.str] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "mac_address")


@pulumi.output_type
class PortExtraDhcpOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortExtraDhcpOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortExtraDhcpOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortExtraDhcpOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str,
                 ip_version: Optional[_builtins.int] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "ip_version")


@pulumi.output_type
class PortFixedIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortFixedIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortFixedIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortFixedIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: _builtins.str,
                 ip_address: Optional[_builtins.str] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class PortV2AllowedAddressPair(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "macAddress":
            suggest = "mac_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortV2AllowedAddressPair. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortV2AllowedAddressPair.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortV2AllowedAddressPair.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 mac_address: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_address: The additional IP address.
        :param _builtins.str mac_address: The additional MAC address.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        The additional IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        The additional MAC address.
        """
        return pulumi.get(self, "mac_address")


@pulumi.output_type
class PortV2ExtraDhcpOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortV2ExtraDhcpOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortV2ExtraDhcpOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortV2ExtraDhcpOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str,
                 ip_version: Optional[_builtins.int] = None):
        """
        :param _builtins.str name: Name of the DHCP option.
        :param _builtins.str value: Value of the DHCP option.
        :param _builtins.int ip_version: IP protocol version. Defaults to 4.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the DHCP option.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value of the DHCP option.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        """
        IP protocol version. Defaults to 4.
        """
        return pulumi.get(self, "ip_version")


@pulumi.output_type
class PortV2FixedIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortV2FixedIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortV2FixedIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortV2FixedIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: _builtins.str,
                 ip_address: Optional[_builtins.str] = None):
        """
        :param _builtins.str subnet_id: Subnet in which to allocate IP address for this port.
        :param _builtins.str ip_address: IP address desired in the subnet for this port. If you don't specify `ip_address`,
               an available IP address from the specified subnet will be allocated to this port. This field will not be populated if
               it is left blank. To retrieve the assigned IP address, use the `all_fixed_ips`
               attribute.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Subnet in which to allocate IP address for this port.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IP address desired in the subnet for this port. If you don't specify `ip_address`,
        an available IP address from the specified subnet will be allocated to this port. This field will not be populated if
        it is left blank. To retrieve the assigned IP address, use the `all_fixed_ips`
        attribute.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class RouteTableRoute(dict):
    def __init__(__self__, *,
                 destination: _builtins.str,
                 nexthop: _builtins.str,
                 type: _builtins.str,
                 description: Optional[_builtins.str] = None):
        """
        :param _builtins.str destination: Specifies the destination address in the CIDR notation format,
               for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap
               with any subnet in the VPC.
        :param _builtins.str nexthop: Specifies the next hop.
               + If the route type is **ecs**, the value is an ECS instance ID in the VPC.
               + If the route type is **eni**, the value is the extension NIC of an ECS in the VPC.
               + If the route type is **vip**, the value is a virtual IP address.
               + If the route type is **nat**, the value is a VPN gateway ID.
               + If the route type is **peering**, the value is a VPC peering connection ID.
               + If the route type is **vpn**, the value is a VPN gateway ID.
               + If the route type is **dc**, the value is a Direct Connect gateway ID.
               + If the route type is **cc**, the value is a Cloud Connection ID.
               + If the route type is **egw**, the value is a VPCEP endpoint ID.
               + If the route type is **er**, the value is a ER instance ID.
        :param _builtins.str type: Specifies the route type. Currently, the value can be:
               **ecs**, **eni**, **vip**, **nat**, **peering**, **vpn**, **dc**, **cc**, **egw** and **er**.
        :param _builtins.str description: Specifies the supplementary information about the route.
               The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "nexthop", nexthop)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        """
        Specifies the destination address in the CIDR notation format,
        for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap
        with any subnet in the VPC.
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def nexthop(self) -> _builtins.str:
        """
        Specifies the next hop.
        + If the route type is **ecs**, the value is an ECS instance ID in the VPC.
        + If the route type is **eni**, the value is the extension NIC of an ECS in the VPC.
        + If the route type is **vip**, the value is a virtual IP address.
        + If the route type is **nat**, the value is a VPN gateway ID.
        + If the route type is **peering**, the value is a VPC peering connection ID.
        + If the route type is **vpn**, the value is a VPN gateway ID.
        + If the route type is **dc**, the value is a Direct Connect gateway ID.
        + If the route type is **cc**, the value is a Cloud Connection ID.
        + If the route type is **egw**, the value is a VPCEP endpoint ID.
        + If the route type is **er**, the value is a ER instance ID.
        """
        return pulumi.get(self, "nexthop")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the route type. Currently, the value can be:
        **ecs**, **eni**, **vip**, **nat**, **peering**, **vpn**, **dc**, **cc**, **egw** and **er**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the supplementary information about the route.
        The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class RouterV2ExternalFixedIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterV2ExternalFixedIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterV2ExternalFixedIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterV2ExternalFixedIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[_builtins.str] = None,
                 subnet_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_address: The IP address to set on the router.
        :param _builtins.str subnet_id: Subnet in which the fixed IP belongs to.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The IP address to set on the router.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        Subnet in which the fixed IP belongs to.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class SecgroupRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRangeMax":
            suggest = "port_range_max"
        elif key == "portRangeMin":
            suggest = "port_range_min"
        elif key == "remoteAddressGroupId":
            suggest = "remote_address_group_id"
        elif key == "remoteGroupId":
            suggest = "remote_group_id"
        elif key == "remoteIpPrefix":
            suggest = "remote_ip_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecgroupRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecgroupRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecgroupRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 ethertype: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 port_range_max: Optional[_builtins.int] = None,
                 port_range_min: Optional[_builtins.int] = None,
                 ports: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.int] = None,
                 protocol: Optional[_builtins.str] = None,
                 remote_address_group_id: Optional[_builtins.str] = None,
                 remote_group_id: Optional[_builtins.str] = None,
                 remote_ip_prefix: Optional[_builtins.str] = None):
        """
        :param _builtins.str action: The effective policy.
        :param _builtins.str description: Specifies the description for the security group.
        :param _builtins.str direction: The direction of the rule. The value can be *egress* or *ingress*.
        :param _builtins.str ethertype: The IP protocol version. The value can be *IPv4* or *IPv6*.
        :param _builtins.str id: The security group rule ID.
        :param _builtins.int port_range_max: schema: Deprecated
        :param _builtins.int port_range_min: schema: Deprecated
        :param _builtins.str ports: The port value range.
        :param _builtins.int priority: The priority number.
        :param _builtins.str protocol: The protocol type.
        :param _builtins.str remote_address_group_id: The ID of the remote address group.
        :param _builtins.str remote_group_id: The ID of the peer security group.
        :param _builtins.str remote_ip_prefix: The remote IP address. The value can be in the CIDR format or IP addresses.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if ethertype is not None:
            pulumi.set(__self__, "ethertype", ethertype)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_range_max is not None:
            pulumi.set(__self__, "port_range_max", port_range_max)
        if port_range_min is not None:
            pulumi.set(__self__, "port_range_min", port_range_min)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if remote_address_group_id is not None:
            pulumi.set(__self__, "remote_address_group_id", remote_address_group_id)
        if remote_group_id is not None:
            pulumi.set(__self__, "remote_group_id", remote_group_id)
        if remote_ip_prefix is not None:
            pulumi.set(__self__, "remote_ip_prefix", remote_ip_prefix)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[_builtins.str]:
        """
        The effective policy.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description for the security group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        The direction of the rule. The value can be *egress* or *ingress*.
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def ethertype(self) -> Optional[_builtins.str]:
        """
        The IP protocol version. The value can be *IPv4* or *IPv6*.
        """
        return pulumi.get(self, "ethertype")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The security group rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> Optional[_builtins.int]:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_range_max")

    @_builtins.property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> Optional[_builtins.int]:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_range_min")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[_builtins.str]:
        """
        The port value range.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        The priority number.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        The protocol type.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="remoteAddressGroupId")
    def remote_address_group_id(self) -> Optional[_builtins.str]:
        """
        The ID of the remote address group.
        """
        return pulumi.get(self, "remote_address_group_id")

    @_builtins.property
    @pulumi.getter(name="remoteGroupId")
    def remote_group_id(self) -> Optional[_builtins.str]:
        """
        The ID of the peer security group.
        """
        return pulumi.get(self, "remote_group_id")

    @_builtins.property
    @pulumi.getter(name="remoteIpPrefix")
    def remote_ip_prefix(self) -> Optional[_builtins.str]:
        """
        The remote IP address. The value can be in the CIDR format or IP addresses.
        """
        return pulumi.get(self, "remote_ip_prefix")


@pulumi.output_type
class SecgroupV2Rule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRangeMax":
            suggest = "port_range_max"
        elif key == "portRangeMin":
            suggest = "port_range_min"
        elif key == "remoteAddressGroupId":
            suggest = "remote_address_group_id"
        elif key == "remoteGroupId":
            suggest = "remote_group_id"
        elif key == "remoteIpPrefix":
            suggest = "remote_ip_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecgroupV2Rule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecgroupV2Rule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecgroupV2Rule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 ethertype: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 port_range_max: Optional[_builtins.int] = None,
                 port_range_min: Optional[_builtins.int] = None,
                 ports: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.int] = None,
                 protocol: Optional[_builtins.str] = None,
                 remote_address_group_id: Optional[_builtins.str] = None,
                 remote_group_id: Optional[_builtins.str] = None,
                 remote_ip_prefix: Optional[_builtins.str] = None):
        """
        :param _builtins.int port_range_max: schema: Deprecated
        :param _builtins.int port_range_min: schema: Deprecated
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if ethertype is not None:
            pulumi.set(__self__, "ethertype", ethertype)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_range_max is not None:
            pulumi.set(__self__, "port_range_max", port_range_max)
        if port_range_min is not None:
            pulumi.set(__self__, "port_range_min", port_range_min)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if remote_address_group_id is not None:
            pulumi.set(__self__, "remote_address_group_id", remote_address_group_id)
        if remote_group_id is not None:
            pulumi.set(__self__, "remote_group_id", remote_group_id)
        if remote_ip_prefix is not None:
            pulumi.set(__self__, "remote_ip_prefix", remote_ip_prefix)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def ethertype(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ethertype")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> Optional[_builtins.int]:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_range_max")

    @_builtins.property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> Optional[_builtins.int]:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_range_min")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="remoteAddressGroupId")
    def remote_address_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "remote_address_group_id")

    @_builtins.property
    @pulumi.getter(name="remoteGroupId")
    def remote_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "remote_group_id")

    @_builtins.property
    @pulumi.getter(name="remoteIpPrefix")
    def remote_ip_prefix(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "remote_ip_prefix")


@pulumi.output_type
class SubnetV2AllocationPool(dict):
    def __init__(__self__, *,
                 end: _builtins.str,
                 start: _builtins.str):
        """
        :param _builtins.str end: The ending address.
        :param _builtins.str start: The starting address.
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @_builtins.property
    @pulumi.getter
    def end(self) -> _builtins.str:
        """
        The ending address.
        """
        return pulumi.get(self, "end")

    @_builtins.property
    @pulumi.getter
    def start(self) -> _builtins.str:
        """
        The starting address.
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class SubnetV2HostRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationCidr":
            suggest = "destination_cidr"
        elif key == "nextHop":
            suggest = "next_hop"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubnetV2HostRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubnetV2HostRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubnetV2HostRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_cidr: _builtins.str,
                 next_hop: _builtins.str):
        """
        :param _builtins.str destination_cidr: The destination CIDR.
        :param _builtins.str next_hop: The next hop in the route.
        """
        pulumi.set(__self__, "destination_cidr", destination_cidr)
        pulumi.set(__self__, "next_hop", next_hop)

    @_builtins.property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> _builtins.str:
        """
        The destination CIDR.
        """
        return pulumi.get(self, "destination_cidr")

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> _builtins.str:
        """
        The next hop in the route.
        """
        return pulumi.get(self, "next_hop")


@pulumi.output_type
class V1Route(dict):
    def __init__(__self__, *,
                 destination: Optional[_builtins.str] = None,
                 nexthop: Optional[_builtins.str] = None):
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if nexthop is not None:
            pulumi.set(__self__, "nexthop", nexthop)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def nexthop(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "nexthop")


@pulumi.output_type
class VpcRoute(dict):
    def __init__(__self__, *,
                 destination: Optional[_builtins.str] = None,
                 nexthop: Optional[_builtins.str] = None):
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if nexthop is not None:
            pulumi.set(__self__, "nexthop", nexthop)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def nexthop(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "nexthop")


@pulumi.output_type
class GetAddressGroupsAddressGroupResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence[_builtins.str],
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 ip_extra_sets: Sequence['outputs.GetAddressGroupsAddressGroupIpExtraSetResult'],
                 ip_version: _builtins.int,
                 max_capacity: _builtins.int,
                 name: _builtins.str,
                 status: _builtins.str,
                 status_message: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param Sequence[_builtins.str] addresses: IP address sets in an IP address group.
               Value range: a single IP address, IP address range, or CIDR block.
        :param _builtins.str created_at: Time when the IP address group is created.
        :param _builtins.str description: Provides supplementary information about an IP address group,
               which can be used to filter the IP address group.
        :param _builtins.str enterprise_project_id: Enterprise project ID.
        :param _builtins.str id: IP address group ID, which uniquely identifies the IP address group.
        :param Sequence['GetAddressGroupsAddressGroupIpExtraSetArgs'] ip_extra_sets: IP addresses and their remarks in an IP address group.
        :param _builtins.int ip_version: Version of IP addresses in an IP address group,
               which can be used to filter the IP address group.
        :param _builtins.int max_capacity: Maximum number of entries in an address group,
               which limits the number of addresses that can be contained in an address group.
        :param _builtins.str name: Name of an IP address group, which can be used to filter the IP address group.
        :param _builtins.str status: The status of IP address group.
               Valid values are:
               + `NORMAL`: normal status.
               + `UPDATING`: updating.
               + `UPDATE_FAILED`: update failed.
               When the status of IP address group is `UPDATING`, the IP address group cannot be updated again.
        :param _builtins.str status_message: The status details of IP address group.
        :param _builtins.str updated_at: Time when the IP address group was last updated.
        """
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_extra_sets", ip_extra_sets)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "max_capacity", max_capacity)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_message", status_message)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> Sequence[_builtins.str]:
        """
        IP address sets in an IP address group.
        Value range: a single IP address, IP address range, or CIDR block.
        """
        return pulumi.get(self, "addresses")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when the IP address group is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Provides supplementary information about an IP address group,
        which can be used to filter the IP address group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        IP address group ID, which uniquely identifies the IP address group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipExtraSets")
    def ip_extra_sets(self) -> Sequence['outputs.GetAddressGroupsAddressGroupIpExtraSetResult']:
        """
        IP addresses and their remarks in an IP address group.
        """
        return pulumi.get(self, "ip_extra_sets")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        Version of IP addresses in an IP address group,
        which can be used to filter the IP address group.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> _builtins.int:
        """
        Maximum number of entries in an address group,
        which limits the number of addresses that can be contained in an address group.
        """
        return pulumi.get(self, "max_capacity")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of an IP address group, which can be used to filter the IP address group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of IP address group.
        Valid values are:
        + `NORMAL`: normal status.
        + `UPDATING`: updating.
        + `UPDATE_FAILED`: update failed.
        When the status of IP address group is `UPDATING`, the IP address group cannot be updated again.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> _builtins.str:
        """
        The status details of IP address group.
        """
        return pulumi.get(self, "status_message")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when the IP address group was last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetAddressGroupsAddressGroupIpExtraSetResult(dict):
    def __init__(__self__, *,
                 ip: _builtins.str,
                 remarks: _builtins.str):
        """
        :param _builtins.str ip: An IP address, IP address range, or CIDR block.
        :param _builtins.str remarks: Provides supplementary information about the IP address, IP address range, or CIDR block.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "remarks", remarks)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        An IP address, IP address range, or CIDR block.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        Provides supplementary information about the IP address, IP address range, or CIDR block.
        """
        return pulumi.get(self, "remarks")


@pulumi.output_type
class GetBandwidthAddonPackagesBandwidthPkgResult(dict):
    def __init__(__self__, *,
                 bandwidth_id: _builtins.str,
                 billing_info: _builtins.str,
                 end_time: _builtins.str,
                 pkg_size: _builtins.int,
                 processed_time: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 start_time: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str bandwidth_id: Indicates the  ID of the original bandwidth bound to the add-on package.
        :param _builtins.str billing_info: Indicates the information about an add-on package order.
        :param _builtins.str end_time: Indicates the end time when an add-on package takes effect.
        :param _builtins.int pkg_size: Indicates the size of the add-on packet.
               And it is the increased bandwidth over the original bandwidth.
        :param _builtins.str processed_time: Indicates the resource creation time.
        :param _builtins.str resource_id: Indicates the refueling package ID.
        :param _builtins.str resource_name: Indicates the refueling package name.
        :param _builtins.str start_time: Indicates the start time when an add-on package takes effect.
        :param _builtins.str status: Indicates the resource status of an add-on package.
               Value can be **pending**, **active**, **completed**, **error**.
        """
        pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        pulumi.set(__self__, "billing_info", billing_info)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "pkg_size", pkg_size)
        pulumi.set(__self__, "processed_time", processed_time)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> _builtins.str:
        """
        Indicates the  ID of the original bandwidth bound to the add-on package.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="billingInfo")
    def billing_info(self) -> _builtins.str:
        """
        Indicates the information about an add-on package order.
        """
        return pulumi.get(self, "billing_info")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Indicates the end time when an add-on package takes effect.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="pkgSize")
    def pkg_size(self) -> _builtins.int:
        """
        Indicates the size of the add-on packet.
        And it is the increased bandwidth over the original bandwidth.
        """
        return pulumi.get(self, "pkg_size")

    @_builtins.property
    @pulumi.getter(name="processedTime")
    def processed_time(self) -> _builtins.str:
        """
        Indicates the resource creation time.
        """
        return pulumi.get(self, "processed_time")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Indicates the refueling package ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Indicates the refueling package name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the start time when an add-on package takes effect.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the resource status of an add-on package.
        Value can be **pending**, **active**, **completed**, **error**.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetBandwidthLimitsEipBandwidthLimitResult(dict):
    def __init__(__self__, *,
                 charge_mode: _builtins.str,
                 ext_limits: Sequence['outputs.GetBandwidthLimitsEipBandwidthLimitExtLimitResult'],
                 id: _builtins.str,
                 max_size: _builtins.int,
                 min_size: _builtins.int):
        """
        :param _builtins.str charge_mode: Specifies the bandwidth charge mode.
        :param Sequence['GetBandwidthLimitsEipBandwidthLimitExtLimitArgs'] ext_limits: Indicates the additional restriction information.
        :param _builtins.str id: Indicates the bandwidth type ID.
        :param _builtins.int max_size: Indicates the maximum size that can be purchased for this type of bandwidth.
        :param _builtins.int min_size: Indicates the minimum size that can be purchased for this type of bandwidth.
        """
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "ext_limits", ext_limits)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        Specifies the bandwidth charge mode.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="extLimits")
    def ext_limits(self) -> Sequence['outputs.GetBandwidthLimitsEipBandwidthLimitExtLimitResult']:
        """
        Indicates the additional restriction information.
        """
        return pulumi.get(self, "ext_limits")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the bandwidth type ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> _builtins.int:
        """
        Indicates the maximum size that can be purchased for this type of bandwidth.
        """
        return pulumi.get(self, "max_size")

    @_builtins.property
    @pulumi.getter(name="minSize")
    def min_size(self) -> _builtins.int:
        """
        Indicates the minimum size that can be purchased for this type of bandwidth.
        """
        return pulumi.get(self, "min_size")


@pulumi.output_type
class GetBandwidthLimitsEipBandwidthLimitExtLimitResult(dict):
    def __init__(__self__, *,
                 max_ingress_size: _builtins.int,
                 min_ingress_size: _builtins.int,
                 ratio95peak: _builtins.int):
        """
        :param _builtins.int max_ingress_size: Indicates the maximum cloud access rate limit.
        :param _builtins.int min_ingress_size: Indicates the minimum cloud access rate limit.
        :param _builtins.int ratio95peak: Indicates the 95 Minimum charging rate.
        """
        pulumi.set(__self__, "max_ingress_size", max_ingress_size)
        pulumi.set(__self__, "min_ingress_size", min_ingress_size)
        pulumi.set(__self__, "ratio95peak", ratio95peak)

    @_builtins.property
    @pulumi.getter(name="maxIngressSize")
    def max_ingress_size(self) -> _builtins.int:
        """
        Indicates the maximum cloud access rate limit.
        """
        return pulumi.get(self, "max_ingress_size")

    @_builtins.property
    @pulumi.getter(name="minIngressSize")
    def min_ingress_size(self) -> _builtins.int:
        """
        Indicates the minimum cloud access rate limit.
        """
        return pulumi.get(self, "min_ingress_size")

    @_builtins.property
    @pulumi.getter
    def ratio95peak(self) -> _builtins.int:
        """
        Indicates the 95 Minimum charging rate.
        """
        return pulumi.get(self, "ratio95peak")


@pulumi.output_type
class GetBandwidthTypesShareBandwidthTypeResult(dict):
    def __init__(__self__, *,
                 bandwidth_type: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name_en: _builtins.str,
                 name_zh: _builtins.str,
                 public_border_group: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str bandwidth_type: Specifies the bandwidth type.
        :param _builtins.str created_at: Indicates the create time.
        :param _builtins.str description: Indicates the description of the bandwidth type.
        :param _builtins.str id: Indicates the ID of the supported bandwidth type.
        :param _builtins.str name_en: Specifies the English description of the bandwidth type.
        :param _builtins.str name_zh: Specifies the Chinese description of the bandwidth type.
        :param _builtins.str public_border_group: Specifies the location of the bandwidth type.
        :param _builtins.str updated_at: Indicates the update time.
        """
        pulumi.set(__self__, "bandwidth_type", bandwidth_type)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name_en", name_en)
        pulumi.set(__self__, "name_zh", name_zh)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> _builtins.str:
        """
        Specifies the bandwidth type.
        """
        return pulumi.get(self, "bandwidth_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of the bandwidth type.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the supported bandwidth type.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> _builtins.str:
        """
        Specifies the English description of the bandwidth type.
        """
        return pulumi.get(self, "name_en")

    @_builtins.property
    @pulumi.getter(name="nameZh")
    def name_zh(self) -> _builtins.str:
        """
        Specifies the Chinese description of the bandwidth type.
        """
        return pulumi.get(self, "name_zh")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        Specifies the location of the bandwidth type.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetBandwidthsBandwidthResult(dict):
    def __init__(__self__, *,
                 bandwidth_type: _builtins.str,
                 charge_mode: _builtins.str,
                 created_at: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 publicips: Sequence['outputs.GetBandwidthsBandwidthPublicipResult'],
                 share_type: _builtins.str,
                 size: _builtins.int,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str bandwidth_type: Indicates the bandwidth type.
        :param _builtins.str charge_mode: Specifies the charge mode of the bandwidth.
               Possible values can be **bandwidth** and **95peak_plus**.
        :param _builtins.str created_at: Indicates the create time of the bandwidth.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.str id: The ID of the EIP or IPv6 port that uses the bandwidth.
        :param _builtins.str name: Specifies the name of the bandwidth.
        :param Sequence['GetBandwidthsBandwidthPublicipArgs'] publicips: An array of EIPs that use the bandwidth. The object includes the following:
               The publicips structure is documented below.
        :param _builtins.str share_type: Indicates whether the bandwidth is shared or dedicated.
        :param _builtins.int size: Specifies the size of the bandwidth.
        :param _builtins.str status: Indicates the status of the bandwidth.
        :param _builtins.str updated_at: Indicates the update time of the bandwidth.
        """
        pulumi.set(__self__, "bandwidth_type", bandwidth_type)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "publicips", publicips)
        pulumi.set(__self__, "share_type", share_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> _builtins.str:
        """
        Indicates the bandwidth type.
        """
        return pulumi.get(self, "bandwidth_type")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        Specifies the charge mode of the bandwidth.
        Possible values can be **bandwidth** and **95peak_plus**.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the create time of the bandwidth.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the EIP or IPv6 port that uses the bandwidth.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the bandwidth.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def publicips(self) -> Sequence['outputs.GetBandwidthsBandwidthPublicipResult']:
        """
        An array of EIPs that use the bandwidth. The object includes the following:
        The publicips structure is documented below.
        """
        return pulumi.get(self, "publicips")

    @_builtins.property
    @pulumi.getter(name="shareType")
    def share_type(self) -> _builtins.str:
        """
        Indicates whether the bandwidth is shared or dedicated.
        """
        return pulumi.get(self, "share_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the size of the bandwidth.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the status of the bandwidth.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time of the bandwidth.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetBandwidthsBandwidthPublicipResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 ip_address: _builtins.str,
                 ip_version: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str id: The ID of the EIP or IPv6 port that uses the bandwidth.
        :param _builtins.str ip_address: The IPv4 or IPv6 address.
        :param _builtins.int ip_version: The IP version.
        :param _builtins.str type: The EIP type.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the EIP or IPv6 port that uses the bandwidth.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        The IPv4 or IPv6 address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        The IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The EIP type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBandwidthsV3EipBandwidthResult(dict):
    def __init__(__self__, *,
                 admin_state: _builtins.str,
                 bandwidth_rules: Sequence['outputs.GetBandwidthsV3EipBandwidthBandwidthRuleResult'],
                 bandwidth_type: _builtins.str,
                 billing_info: _builtins.str,
                 created_at: _builtins.str,
                 enable_bandwidth_rules: _builtins.bool,
                 id: _builtins.str,
                 ingress_size: _builtins.int,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 public_border_group: _builtins.str,
                 publicip_infos: Sequence['outputs.GetBandwidthsV3EipBandwidthPublicipInfoResult'],
                 ratio95peak_plus: _builtins.int,
                 rule_quota: _builtins.int,
                 size: _builtins.int,
                 tags: Sequence[_builtins.str],
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str admin_state: Specifies the status of the bandwidth.
        :param Sequence['GetBandwidthsV3EipBandwidthBandwidthRuleArgs'] bandwidth_rules: Indicates the bandwidth rules.
        :param _builtins.str bandwidth_type: Specifies the type of the bandwidth.
               Value options:
               + **share**: Shared Bandwidth
               + **bgp**: Dynamic BGP
               + **telcom**: China Unicom
               + **sbgp**: Static BGP
        :param _builtins.str billing_info: Specifies the charging information of the bandwidth.
        :param _builtins.str created_at: Indicates the creation time, which is a UTC time in **YYYY-MM-DDTHH:MM:SS** format.
        :param _builtins.bool enable_bandwidth_rules: Specifies whether bandwidth groups are enabled.
               Value options: **true**, **false**.
        :param _builtins.str id: Indicates the bandwidth rule ID.
        :param _builtins.int ingress_size: Specifies the cloud access size.
        :param _builtins.str name: Specifies the name of the bandwidth.
        :param _builtins.str project_id: Indicates the ID of the project to which the user belongs.
        :param _builtins.str public_border_group: Specifies the border group of the bandwidth.
        :param Sequence['GetBandwidthsV3EipBandwidthPublicipInfoArgs'] publicip_infos: Indicates the EIP information corresponding to the bandwidth.
        :param _builtins.int ratio95peak_plus: Indicates the minimum bandwidth guarantee rate of enhanced 95.
        :param _builtins.int rule_quota: Specifies the rule value of the bandwidth.
        :param _builtins.int size: Specifies the size of the bandwidth.
        :param Sequence[_builtins.str] tags: Specifies the tag of the bandwidth.
        :param _builtins.str type: Specifies the type of the bandwidth.
               Value options:
               + **WHOLE**: shared bandwidth
               + **PER**: exclusive bandwidth
        :param _builtins.str updated_at: Indicates the update time, which is a UTC time in **YYYY-MM-DDTHH:MM:SS** format.
        """
        pulumi.set(__self__, "admin_state", admin_state)
        pulumi.set(__self__, "bandwidth_rules", bandwidth_rules)
        pulumi.set(__self__, "bandwidth_type", bandwidth_type)
        pulumi.set(__self__, "billing_info", billing_info)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "enable_bandwidth_rules", enable_bandwidth_rules)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ingress_size", ingress_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "publicip_infos", publicip_infos)
        pulumi.set(__self__, "ratio95peak_plus", ratio95peak_plus)
        pulumi.set(__self__, "rule_quota", rule_quota)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> _builtins.str:
        """
        Specifies the status of the bandwidth.
        """
        return pulumi.get(self, "admin_state")

    @_builtins.property
    @pulumi.getter(name="bandwidthRules")
    def bandwidth_rules(self) -> Sequence['outputs.GetBandwidthsV3EipBandwidthBandwidthRuleResult']:
        """
        Indicates the bandwidth rules.
        """
        return pulumi.get(self, "bandwidth_rules")

    @_builtins.property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> _builtins.str:
        """
        Specifies the type of the bandwidth.
        Value options:
        + **share**: Shared Bandwidth
        + **bgp**: Dynamic BGP
        + **telcom**: China Unicom
        + **sbgp**: Static BGP
        """
        return pulumi.get(self, "bandwidth_type")

    @_builtins.property
    @pulumi.getter(name="billingInfo")
    def billing_info(self) -> _builtins.str:
        """
        Specifies the charging information of the bandwidth.
        """
        return pulumi.get(self, "billing_info")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time, which is a UTC time in **YYYY-MM-DDTHH:MM:SS** format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enableBandwidthRules")
    def enable_bandwidth_rules(self) -> _builtins.bool:
        """
        Specifies whether bandwidth groups are enabled.
        Value options: **true**, **false**.
        """
        return pulumi.get(self, "enable_bandwidth_rules")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the bandwidth rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ingressSize")
    def ingress_size(self) -> _builtins.int:
        """
        Specifies the cloud access size.
        """
        return pulumi.get(self, "ingress_size")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the bandwidth.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Indicates the ID of the project to which the user belongs.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        Specifies the border group of the bandwidth.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter(name="publicipInfos")
    def publicip_infos(self) -> Sequence['outputs.GetBandwidthsV3EipBandwidthPublicipInfoResult']:
        """
        Indicates the EIP information corresponding to the bandwidth.
        """
        return pulumi.get(self, "publicip_infos")

    @_builtins.property
    @pulumi.getter(name="ratio95peakPlus")
    def ratio95peak_plus(self) -> _builtins.int:
        """
        Indicates the minimum bandwidth guarantee rate of enhanced 95.
        """
        return pulumi.get(self, "ratio95peak_plus")

    @_builtins.property
    @pulumi.getter(name="ruleQuota")
    def rule_quota(self) -> _builtins.int:
        """
        Specifies the rule value of the bandwidth.
        """
        return pulumi.get(self, "rule_quota")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the size of the bandwidth.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        """
        Specifies the tag of the bandwidth.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the bandwidth.
        Value options:
        + **WHOLE**: shared bandwidth
        + **PER**: exclusive bandwidth
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time, which is a UTC time in **YYYY-MM-DDTHH:MM:SS** format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetBandwidthsV3EipBandwidthBandwidthRuleResult(dict):
    def __init__(__self__, *,
                 egress_guarented_size: _builtins.int,
                 egress_size: _builtins.int,
                 id: _builtins.str,
                 name: _builtins.str,
                 publicip_infos: Sequence['outputs.GetBandwidthsV3EipBandwidthBandwidthRulePublicipInfoResult']):
        """
        :param _builtins.int egress_guarented_size: Indicates the guaranteed outbound bandwidth, in Mbit/s.
        :param _builtins.int egress_size: Indicates the maximum outbound bandwidth, in Mbit/s.
        :param _builtins.str id: Indicates the bandwidth rule ID.
        :param _builtins.str name: Specifies the name of the bandwidth.
        :param Sequence['GetBandwidthsV3EipBandwidthBandwidthRulePublicipInfoArgs'] publicip_infos: Indicates the EIP information corresponding to the bandwidth.
        """
        pulumi.set(__self__, "egress_guarented_size", egress_guarented_size)
        pulumi.set(__self__, "egress_size", egress_size)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "publicip_infos", publicip_infos)

    @_builtins.property
    @pulumi.getter(name="egressGuarentedSize")
    def egress_guarented_size(self) -> _builtins.int:
        """
        Indicates the guaranteed outbound bandwidth, in Mbit/s.
        """
        return pulumi.get(self, "egress_guarented_size")

    @_builtins.property
    @pulumi.getter(name="egressSize")
    def egress_size(self) -> _builtins.int:
        """
        Indicates the maximum outbound bandwidth, in Mbit/s.
        """
        return pulumi.get(self, "egress_size")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the bandwidth rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the bandwidth.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publicipInfos")
    def publicip_infos(self) -> Sequence['outputs.GetBandwidthsV3EipBandwidthBandwidthRulePublicipInfoResult']:
        """
        Indicates the EIP information corresponding to the bandwidth.
        """
        return pulumi.get(self, "publicip_infos")


@pulumi.output_type
class GetBandwidthsV3EipBandwidthBandwidthRulePublicipInfoResult(dict):
    def __init__(__self__, *,
                 ip_version: _builtins.int,
                 publicip_address: _builtins.str,
                 publicip_id: _builtins.str,
                 publicip_type: _builtins.str,
                 publicipv6_address: _builtins.str):
        """
        :param _builtins.int ip_version: Indicates the IP version information.
        :param _builtins.str publicip_address: Indicates the elastic public IPv4 or IPv6 address.
        :param _builtins.str publicip_id: Indicates the unique IPv4 or IPv6 address of the elastic public network corresponding to the bandwidth.
        :param _builtins.str publicip_type: Indicates the EIP type.
        :param _builtins.str publicipv6_address: Indicates the IPv6 address.
        """
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "publicip_address", publicip_address)
        pulumi.set(__self__, "publicip_id", publicip_id)
        pulumi.set(__self__, "publicip_type", publicip_type)
        pulumi.set(__self__, "publicipv6_address", publicipv6_address)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        Indicates the IP version information.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="publicipAddress")
    def publicip_address(self) -> _builtins.str:
        """
        Indicates the elastic public IPv4 or IPv6 address.
        """
        return pulumi.get(self, "publicip_address")

    @_builtins.property
    @pulumi.getter(name="publicipId")
    def publicip_id(self) -> _builtins.str:
        """
        Indicates the unique IPv4 or IPv6 address of the elastic public network corresponding to the bandwidth.
        """
        return pulumi.get(self, "publicip_id")

    @_builtins.property
    @pulumi.getter(name="publicipType")
    def publicip_type(self) -> _builtins.str:
        """
        Indicates the EIP type.
        """
        return pulumi.get(self, "publicip_type")

    @_builtins.property
    @pulumi.getter(name="publicipv6Address")
    def publicipv6_address(self) -> _builtins.str:
        """
        Indicates the IPv6 address.
        """
        return pulumi.get(self, "publicipv6_address")


@pulumi.output_type
class GetBandwidthsV3EipBandwidthPublicipInfoResult(dict):
    def __init__(__self__, *,
                 ip_version: _builtins.int,
                 publicip_address: _builtins.str,
                 publicip_id: _builtins.str,
                 publicip_type: _builtins.str,
                 publicipv6_address: _builtins.str):
        """
        :param _builtins.int ip_version: Indicates the IP version information.
        :param _builtins.str publicip_address: Indicates the elastic public IPv4 or IPv6 address.
        :param _builtins.str publicip_id: Indicates the unique IPv4 or IPv6 address of the elastic public network corresponding to the bandwidth.
        :param _builtins.str publicip_type: Indicates the EIP type.
        :param _builtins.str publicipv6_address: Indicates the IPv6 address.
        """
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "publicip_address", publicip_address)
        pulumi.set(__self__, "publicip_id", publicip_id)
        pulumi.set(__self__, "publicip_type", publicip_type)
        pulumi.set(__self__, "publicipv6_address", publicipv6_address)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        Indicates the IP version information.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="publicipAddress")
    def publicip_address(self) -> _builtins.str:
        """
        Indicates the elastic public IPv4 or IPv6 address.
        """
        return pulumi.get(self, "publicip_address")

    @_builtins.property
    @pulumi.getter(name="publicipId")
    def publicip_id(self) -> _builtins.str:
        """
        Indicates the unique IPv4 or IPv6 address of the elastic public network corresponding to the bandwidth.
        """
        return pulumi.get(self, "publicip_id")

    @_builtins.property
    @pulumi.getter(name="publicipType")
    def publicip_type(self) -> _builtins.str:
        """
        Indicates the EIP type.
        """
        return pulumi.get(self, "publicip_type")

    @_builtins.property
    @pulumi.getter(name="publicipv6Address")
    def publicipv6_address(self) -> _builtins.str:
        """
        Indicates the IPv6 address.
        """
        return pulumi.get(self, "publicipv6_address")


@pulumi.output_type
class GetByTagsMatchResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the match. The value can be: **resource_name**.
        :param _builtins.str value: Specifies the value of the match.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the match. The value can be: **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetByTagsResourceResult(dict):
    def __init__(__self__, *,
                 resource_detail: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 tags: Mapping[str, _builtins.str]):
        """
        :param _builtins.str resource_detail: The detail of the VPC.
        :param _builtins.str resource_id: The ID of the VPC.
        :param _builtins.str resource_name: The name of the VPC.
        :param Mapping[str, _builtins.str] tags: Specifies the tags to filter to resources.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_detail", resource_detail)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceDetail")
    def resource_detail(self) -> _builtins.str:
        """
        The detail of the VPC.
        """
        return pulumi.get(self, "resource_detail")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The ID of the VPC.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the VPC.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the tags to filter to resources.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetByTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the match. The value can be: **resource_name**.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
               
               <a name="matches"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the match. The value can be: **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.

        <a name="matches"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetEipCommonPoolsCommonPoolResult(dict):
    def __init__(__self__, *,
                 allow_share_bandwidth_types: Sequence[_builtins.str],
                 available: _builtins.int,
                 id: _builtins.str,
                 name: _builtins.str,
                 public_border_group: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param Sequence[_builtins.str] allow_share_bandwidth_types: Indicates the list of shared bandwidth types that the public IP address can be added to.
        :param _builtins.int available: Indicates the number of available IP addresses.
        :param _builtins.str id: Indicates the common pool ID.
        :param _builtins.str name: Specifies the common pool name.
        :param _builtins.str public_border_group: Specifies whether the common pool is at the center or at the edge.
        :param _builtins.str status: Indicates the common pool status.
        :param _builtins.str type: Indicates the common pool type, such as **bgp** and **sbgp**.
        :param _builtins.int used: Indicates the number of used IP addresses.
        """
        pulumi.set(__self__, "allow_share_bandwidth_types", allow_share_bandwidth_types)
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter(name="allowShareBandwidthTypes")
    def allow_share_bandwidth_types(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of shared bandwidth types that the public IP address can be added to.
        """
        return pulumi.get(self, "allow_share_bandwidth_types")

    @_builtins.property
    @pulumi.getter
    def available(self) -> _builtins.int:
        """
        Indicates the number of available IP addresses.
        """
        return pulumi.get(self, "available")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the common pool ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the common pool name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        Specifies whether the common pool is at the center or at the edge.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the common pool status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the common pool type, such as **bgp** and **sbgp**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        Indicates the number of used IP addresses.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetEipPoolsPoolResult(dict):
    def __init__(__self__, *,
                 allow_share_bandwidth_types: Sequence[_builtins.str],
                 billing_infos: Sequence['outputs.GetEipPoolsPoolBillingInfoResult'],
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 public_border_group: _builtins.str,
                 shared: _builtins.bool,
                 size: _builtins.int,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 used: _builtins.int):
        """
        :param Sequence[_builtins.str] allow_share_bandwidth_types: Indicates the list of shared bandwidth types to which the public IP address can be added.
        :param Sequence['GetEipPoolsPoolBillingInfoArgs'] billing_infos: Indicates the order information. If an order is available, it indicates a yearly/monthly pool.
        :param _builtins.str created_at: Indicates the create time of the pool.
        :param _builtins.str description: Specifies the pool description.
        :param _builtins.str enterprise_project_id: Indicates the ID of an enterprise project.
        :param _builtins.str id: Indicates the pool ID.
        :param _builtins.str name: Specifies the pool name.
        :param _builtins.str public_border_group: Specifies whether the pool is at the center or at the edge.
        :param _builtins.bool shared: Indicates whether to share the pool.
        :param _builtins.int size: Specifies the pool size.
        :param _builtins.str status: Specifies the pool status.
        :param Mapping[str, _builtins.str] tags: The key/value pairs which associated with the EIP pool.
        :param _builtins.str type: Specifies the pool type.
        :param _builtins.str updated_at: Indicates the update time of the pool.
        :param _builtins.int used: indicates the number of used IP addresses.
        """
        pulumi.set(__self__, "allow_share_bandwidth_types", allow_share_bandwidth_types)
        pulumi.set(__self__, "billing_infos", billing_infos)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "shared", shared)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter(name="allowShareBandwidthTypes")
    def allow_share_bandwidth_types(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of shared bandwidth types to which the public IP address can be added.
        """
        return pulumi.get(self, "allow_share_bandwidth_types")

    @_builtins.property
    @pulumi.getter(name="billingInfos")
    def billing_infos(self) -> Sequence['outputs.GetEipPoolsPoolBillingInfoResult']:
        """
        Indicates the order information. If an order is available, it indicates a yearly/monthly pool.
        """
        return pulumi.get(self, "billing_infos")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the create time of the pool.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the pool description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Indicates the ID of an enterprise project.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the pool ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the pool name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        Specifies whether the pool is at the center or at the edge.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def shared(self) -> _builtins.bool:
        """
        Indicates whether to share the pool.
        """
        return pulumi.get(self, "shared")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the pool size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the pool status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs which associated with the EIP pool.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the pool type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time of the pool.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        indicates the number of used IP addresses.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetEipPoolsPoolBillingInfoResult(dict):
    def __init__(__self__, *,
                 order_id: _builtins.str,
                 product_id: _builtins.str):
        """
        :param _builtins.str order_id: Indicates the order ID.
        :param _builtins.str product_id: Indicates the product ID
        """
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "product_id", product_id)

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> _builtins.str:
        """
        Indicates the order ID.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        Indicates the product ID
        """
        return pulumi.get(self, "product_id")


@pulumi.output_type
class GetEipTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Indicates the tag key.
        :param Sequence[_builtins.str] values: Indicates the list of tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetEipsV3PublicipResult(dict):
    def __init__(__self__, *,
                 alias: _builtins.str,
                 allow_share_bandwidth_types: Sequence[_builtins.str],
                 associate_instance_id: _builtins.str,
                 associate_instance_type: _builtins.str,
                 bandwidths: Sequence['outputs.GetEipsV3PublicipBandwidthResult'],
                 billing_info: _builtins.str,
                 cascade_delete_by_instance: _builtins.bool,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 ip_version: _builtins.int,
                 lock_status: _builtins.str,
                 project_id: _builtins.str,
                 public_border_group: _builtins.str,
                 public_ip_address: _builtins.str,
                 public_ipv6_address: _builtins.str,
                 publicip_pool_id: _builtins.str,
                 publicip_pool_name: _builtins.str,
                 status: _builtins.str,
                 tags: Sequence[_builtins.str],
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 vnics: Sequence['outputs.GetEipsV3PublicipVnicResult']):
        """
        :param _builtins.str alias: Specifies the alias of the EIP.
        :param Sequence[_builtins.str] allow_share_bandwidth_types: Indicates the list of shared bandwidth types that the public IP address can be added to.
        :param _builtins.str associate_instance_id: Specifies the associate instance ID of the EIP.
        :param _builtins.str associate_instance_type: Specifies the associate instance type of the EIP.
               Value options: **PORT**、**NATGW**、**ELB**、**VPN**、**ELBV1**
        :param Sequence['GetEipsV3PublicipBandwidthArgs'] bandwidths: Indicates the bandwidth bound to the public IP address.
        :param _builtins.str billing_info: Specifies the billing info of the EIP.
        :param _builtins.bool cascade_delete_by_instance: Indicates whether the EIP can be deleted synchronously with the instance.
        :param _builtins.str created_at: Indicates the creation time.
        :param _builtins.str description: Specifies the description of the EIP.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the EIP.
        :param _builtins.str id: Indicates the bandwidth ID.
        :param _builtins.int ip_version: Specifies the IP version of the EIP.
               Value options: **4**, **6**.
        :param _builtins.str lock_status: Indicates the frozen status of the EIP.
        :param _builtins.str project_id: Indicates the project ID of the EIP.
        :param _builtins.str public_border_group: Specifies the public border group of the EIP.
        :param _builtins.str public_ip_address: Specifies the public IP address of the EIP.
        :param _builtins.str public_ipv6_address: Specifies the public IP v6 address  of the EIP.
        :param _builtins.str publicip_pool_id: Indicates the ID of the network to which the public IP address belongs.
        :param _builtins.str publicip_pool_name: Specifies the public IP pool name of the EIP.
               Value options: **5_telcom**, **5_union**, **5_bgp**, **5_sbgp**, **5_ipv6**, **5_graybgp** and pool name
        :param _builtins.str status: Specifies the status of the EIP.
               Value options: **FREEZED**, **DOWN**, **ACTIVE**, **ERROR**.
        :param Sequence[_builtins.str] tags: Indicates the tags of the EIP.
        :param _builtins.str type: Specifies the type of the EIP.
               Value options:
               + **EIP**: EIP
               + **DUALSTACK**: dual-stack IPv6
               + **DUALSTACK_SUBNET**: Dual-stack subnet
        :param _builtins.str updated_at: Indicates the update time.
        :param Sequence['GetEipsV3PublicipVnicArgs'] vnics: Indicates the port information when a public IP address is bound to a port instance.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "allow_share_bandwidth_types", allow_share_bandwidth_types)
        pulumi.set(__self__, "associate_instance_id", associate_instance_id)
        pulumi.set(__self__, "associate_instance_type", associate_instance_type)
        pulumi.set(__self__, "bandwidths", bandwidths)
        pulumi.set(__self__, "billing_info", billing_info)
        pulumi.set(__self__, "cascade_delete_by_instance", cascade_delete_by_instance)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "lock_status", lock_status)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "public_ip_address", public_ip_address)
        pulumi.set(__self__, "public_ipv6_address", public_ipv6_address)
        pulumi.set(__self__, "publicip_pool_id", publicip_pool_id)
        pulumi.set(__self__, "publicip_pool_name", publicip_pool_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vnics", vnics)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> _builtins.str:
        """
        Specifies the alias of the EIP.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="allowShareBandwidthTypes")
    def allow_share_bandwidth_types(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of shared bandwidth types that the public IP address can be added to.
        """
        return pulumi.get(self, "allow_share_bandwidth_types")

    @_builtins.property
    @pulumi.getter(name="associateInstanceId")
    def associate_instance_id(self) -> _builtins.str:
        """
        Specifies the associate instance ID of the EIP.
        """
        return pulumi.get(self, "associate_instance_id")

    @_builtins.property
    @pulumi.getter(name="associateInstanceType")
    def associate_instance_type(self) -> _builtins.str:
        """
        Specifies the associate instance type of the EIP.
        Value options: **PORT**、**NATGW**、**ELB**、**VPN**、**ELBV1**
        """
        return pulumi.get(self, "associate_instance_type")

    @_builtins.property
    @pulumi.getter
    def bandwidths(self) -> Sequence['outputs.GetEipsV3PublicipBandwidthResult']:
        """
        Indicates the bandwidth bound to the public IP address.
        """
        return pulumi.get(self, "bandwidths")

    @_builtins.property
    @pulumi.getter(name="billingInfo")
    def billing_info(self) -> _builtins.str:
        """
        Specifies the billing info of the EIP.
        """
        return pulumi.get(self, "billing_info")

    @_builtins.property
    @pulumi.getter(name="cascadeDeleteByInstance")
    def cascade_delete_by_instance(self) -> _builtins.bool:
        """
        Indicates whether the EIP can be deleted synchronously with the instance.
        """
        return pulumi.get(self, "cascade_delete_by_instance")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the EIP.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID of the EIP.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the bandwidth ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        Specifies the IP version of the EIP.
        Value options: **4**, **6**.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="lockStatus")
    def lock_status(self) -> _builtins.str:
        """
        Indicates the frozen status of the EIP.
        """
        return pulumi.get(self, "lock_status")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Indicates the project ID of the EIP.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        """
        Specifies the public border group of the EIP.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter(name="publicIpAddress")
    def public_ip_address(self) -> _builtins.str:
        """
        Specifies the public IP address of the EIP.
        """
        return pulumi.get(self, "public_ip_address")

    @_builtins.property
    @pulumi.getter(name="publicIpv6Address")
    def public_ipv6_address(self) -> _builtins.str:
        """
        Specifies the public IP v6 address  of the EIP.
        """
        return pulumi.get(self, "public_ipv6_address")

    @_builtins.property
    @pulumi.getter(name="publicipPoolId")
    def publicip_pool_id(self) -> _builtins.str:
        """
        Indicates the ID of the network to which the public IP address belongs.
        """
        return pulumi.get(self, "publicip_pool_id")

    @_builtins.property
    @pulumi.getter(name="publicipPoolName")
    def publicip_pool_name(self) -> _builtins.str:
        """
        Specifies the public IP pool name of the EIP.
        Value options: **5_telcom**, **5_union**, **5_bgp**, **5_sbgp**, **5_ipv6**, **5_graybgp** and pool name
        """
        return pulumi.get(self, "publicip_pool_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the EIP.
        Value options: **FREEZED**, **DOWN**, **ACTIVE**, **ERROR**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        """
        Indicates the tags of the EIP.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the EIP.
        Value options:
        + **EIP**: EIP
        + **DUALSTACK**: dual-stack IPv6
        + **DUALSTACK_SUBNET**: Dual-stack subnet
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def vnics(self) -> Sequence['outputs.GetEipsV3PublicipVnicResult']:
        """
        Indicates the port information when a public IP address is bound to a port instance.
        """
        return pulumi.get(self, "vnics")


@pulumi.output_type
class GetEipsV3PublicipBandwidthResult(dict):
    def __init__(__self__, *,
                 billing_info: _builtins.str,
                 charge_mode: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 share_type: _builtins.str,
                 size: _builtins.int):
        """
        :param _builtins.str billing_info: Specifies the billing info of the EIP.
        :param _builtins.str charge_mode: Indicates the charging mode.
               The value can be:
               + **bandwidth**: charging by bandwidth
               + **traffic**: charging by traffic
               + **95peak_plus**: charging by enhanced 95
        :param _builtins.str id: Indicates the bandwidth ID.
        :param _builtins.str name: Indicates the bandwidth name.
        :param _builtins.str share_type: Indicates the bandwidth share type.
               The value can be:
               + **PER**: exclusive bandwidth
               + **WHOLE**: shared bandwidth
        :param _builtins.int size: Indicates the bandwidth size.
        """
        pulumi.set(__self__, "billing_info", billing_info)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "share_type", share_type)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="billingInfo")
    def billing_info(self) -> _builtins.str:
        """
        Specifies the billing info of the EIP.
        """
        return pulumi.get(self, "billing_info")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        Indicates the charging mode.
        The value can be:
        + **bandwidth**: charging by bandwidth
        + **traffic**: charging by traffic
        + **95peak_plus**: charging by enhanced 95
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the bandwidth ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the bandwidth name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="shareType")
    def share_type(self) -> _builtins.str:
        """
        Indicates the bandwidth share type.
        The value can be:
        + **PER**: exclusive bandwidth
        + **WHOLE**: shared bandwidth
        """
        return pulumi.get(self, "share_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the bandwidth size.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetEipsV3PublicipVnicResult(dict):
    def __init__(__self__, *,
                 device_id: _builtins.str,
                 device_owner: _builtins.str,
                 instance_id: _builtins.str,
                 instance_type: _builtins.str,
                 mac: _builtins.str,
                 port_id: _builtins.str,
                 port_profile: _builtins.str,
                 private_ip_address: _builtins.str,
                 vni: _builtins.str,
                 vpc_id: _builtins.str,
                 vtep: _builtins.str):
        """
        :param _builtins.str device_id: Indicates the ID of the device to which the port belongs.
        :param _builtins.str device_owner: Indicates the device owner.
        :param _builtins.str instance_id: Indicates the ID of the instance to which the port belongs.
        :param _builtins.str instance_type: Indicates the type.
        :param _builtins.str mac: Indicates the port MAC address of the port instance.
        :param _builtins.str port_id: Indicates the port ID.
        :param _builtins.str port_profile: Indicates the port profile information.
        :param _builtins.str private_ip_address: Indicates the private IP address.
        :param _builtins.str vni: Indicates the VXLAN ID.
        :param _builtins.str vpc_id: Indicates the VPC ID.
        :param _builtins.str vtep: Indicates the VTEP IP address.
        """
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "device_owner", device_owner)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "port_profile", port_profile)
        pulumi.set(__self__, "private_ip_address", private_ip_address)
        pulumi.set(__self__, "vni", vni)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vtep", vtep)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> _builtins.str:
        """
        Indicates the ID of the device to which the port belongs.
        """
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter(name="deviceOwner")
    def device_owner(self) -> _builtins.str:
        """
        Indicates the device owner.
        """
        return pulumi.get(self, "device_owner")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the ID of the instance to which the port belongs.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        """
        Indicates the type.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter
    def mac(self) -> _builtins.str:
        """
        Indicates the port MAC address of the port instance.
        """
        return pulumi.get(self, "mac")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> _builtins.str:
        """
        Indicates the port ID.
        """
        return pulumi.get(self, "port_id")

    @_builtins.property
    @pulumi.getter(name="portProfile")
    def port_profile(self) -> _builtins.str:
        """
        Indicates the port profile information.
        """
        return pulumi.get(self, "port_profile")

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> _builtins.str:
        """
        Indicates the private IP address.
        """
        return pulumi.get(self, "private_ip_address")

    @_builtins.property
    @pulumi.getter
    def vni(self) -> _builtins.str:
        """
        Indicates the VXLAN ID.
        """
        return pulumi.get(self, "vni")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Indicates the VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter
    def vtep(self) -> _builtins.str:
        """
        Indicates the VTEP IP address.
        """
        return pulumi.get(self, "vtep")


@pulumi.output_type
class GetFlowLogsFlowLogResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 log_group_id: _builtins.str,
                 log_stream_id: _builtins.str,
                 name: _builtins.str,
                 resource_id: _builtins.str,
                 resource_type: _builtins.str,
                 status: _builtins.str,
                 traffic_type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The time when the resource is created.
        :param _builtins.str description: The VPC flow log description.
        :param _builtins.bool enabled: Whether to enable the VPC flow log.
        :param _builtins.str id: The ID of a VPC flow log
        :param _builtins.str log_group_id: Specifies the LTS log group ID.
        :param _builtins.str log_stream_id: Specifies the LTS log stream ID.
        :param _builtins.str name: Specifies the VPC flow log name.
               The value can contain no more than 64 characters,
               including letters, digits, underscores (_), hyphens (-), and periods (.).
        :param _builtins.str resource_id: Specifies the resource ID for which that the logs to be collected.
        :param _builtins.str resource_type: Specifies the resource type for which that the logs to be collected.
               The value can be: **port**, **network,** and **vpc**.
        :param _builtins.str status: Specifies the status of the flow log.
               The value can be **ACTIVE**, **DOWN** or **ERROR**.
        :param _builtins.str traffic_type: Specifies the type of traffic to log.
               The value can be: **all**, **accept** and **reject**.
        :param _builtins.str updated_at: The time when the resource is last updated.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "traffic_type", traffic_type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the resource is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The VPC flow log description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether to enable the VPC flow log.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of a VPC flow log
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> _builtins.str:
        """
        Specifies the LTS log group ID.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> _builtins.str:
        """
        Specifies the LTS log stream ID.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the VPC flow log name.
        The value can contain no more than 64 characters,
        including letters, digits, underscores (_), hyphens (-), and periods (.).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID for which that the logs to be collected.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Specifies the resource type for which that the logs to be collected.
        The value can be: **port**, **network,** and **vpc**.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the flow log.
        The value can be **ACTIVE**, **DOWN** or **ERROR**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> _builtins.str:
        """
        Specifies the type of traffic to log.
        The value can be: **all**, **accept** and **reject**.
        """
        return pulumi.get(self, "traffic_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the resource is last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetInternetGatewaysVpcIgwResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 enable_ipv6: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str,
                 subnet_id: _builtins.str,
                 updated_at: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str created_at: The create time of IGW.
        :param _builtins.bool enable_ipv6: Indicates the IGW enable ipv6 or not.
        :param _builtins.str id: The IGW ID.
        :param _builtins.str name: The IGW name.
        :param _builtins.str subnet_id: The subnet ID which the IGW associated with.
        :param _builtins.str updated_at: The update time of IGW.
        :param _builtins.str vpc_id: Specifies the VPC ID.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "enable_ipv6", enable_ipv6)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The create time of IGW.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enableIpv6")
    def enable_ipv6(self) -> _builtins.bool:
        """
        Indicates the IGW enable ipv6 or not.
        """
        return pulumi.get(self, "enable_ipv6")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The IGW ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The IGW name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The subnet ID which the IGW associated with.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of IGW.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the VPC ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetNetworkAclTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The tag key.
        :param Sequence[_builtins.str] values: The tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkAclsByTagsMatchResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the match. The value can be: **resource_name**.
        :param _builtins.str value: Specifies the value of the match.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the match. The value can be: **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetworkAclsByTagsResourceResult(dict):
    def __init__(__self__, *,
                 resource_detail: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 tags: Mapping[str, _builtins.str]):
        """
        :param _builtins.str resource_detail: The detail of the network ACL.
        :param _builtins.str resource_id: The ID of the network ACL.
        :param _builtins.str resource_name: The name of the network ACL.
        :param Mapping[str, _builtins.str] tags: Specifies the tags to filter to resources.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_detail", resource_detail)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceDetail")
    def resource_detail(self) -> _builtins.str:
        """
        The detail of the network ACL.
        """
        return pulumi.get(self, "resource_detail")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The ID of the network ACL.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the network ACL.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the tags to filter to resources.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNetworkAclsByTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the match. The value can be: **resource_name**.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
               
               <a name="matches"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the match. The value can be: **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.

        <a name="matches"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkAclsNetworkAclResult(dict):
    def __init__(__self__, *,
                 associated_subnets: Sequence['outputs.GetNetworkAclsNetworkAclAssociatedSubnetResult'],
                 created_at: _builtins.str,
                 description: _builtins.str,
                 egress_rules: Sequence['outputs.GetNetworkAclsNetworkAclEgressRuleResult'],
                 enabled: _builtins.bool,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 ingress_rules: Sequence['outputs.GetNetworkAclsNetworkAclIngressRuleResult'],
                 name: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param Sequence['GetNetworkAclsNetworkAclAssociatedSubnetArgs'] associated_subnets: The associated subnets of the network ACL.
               The associated_subnets structure is documented below.
        :param _builtins.str created_at: The created time of the ACL.
        :param _builtins.str description: The network ACL rule description.
        :param Sequence['GetNetworkAclsNetworkAclEgressRuleArgs'] egress_rules: The egress rules of the network ACL.
               The rules structure is documented below.
        :param _builtins.bool enabled: Specifies whether the network ACL is enabled. The value can be **true** or **false**.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the network ACL.
        :param _builtins.str id: The network ACL ID.
        :param Sequence['GetNetworkAclsNetworkAclIngressRuleArgs'] ingress_rules: The ingress rules of the network ACL.
               The rules structure is documented below.
        :param _builtins.str name: Specifies the network ACL name. The value can contain no more than 64 characters,
               including letters, digits, underscores (_), hyphens (-), and periods (.).
        :param _builtins.str status: Specifies the status of the network ACL.
        :param _builtins.str updated_at: The updated time of the ACL.
        """
        pulumi.set(__self__, "associated_subnets", associated_subnets)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "egress_rules", egress_rules)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ingress_rules", ingress_rules)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="associatedSubnets")
    def associated_subnets(self) -> Sequence['outputs.GetNetworkAclsNetworkAclAssociatedSubnetResult']:
        """
        The associated subnets of the network ACL.
        The associated_subnets structure is documented below.
        """
        return pulumi.get(self, "associated_subnets")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The created time of the ACL.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The network ACL rule description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="egressRules")
    def egress_rules(self) -> Sequence['outputs.GetNetworkAclsNetworkAclEgressRuleResult']:
        """
        The egress rules of the network ACL.
        The rules structure is documented below.
        """
        return pulumi.get(self, "egress_rules")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Specifies whether the network ACL is enabled. The value can be **true** or **false**.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID of the network ACL.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The network ACL ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ingressRules")
    def ingress_rules(self) -> Sequence['outputs.GetNetworkAclsNetworkAclIngressRuleResult']:
        """
        The ingress rules of the network ACL.
        The rules structure is documented below.
        """
        return pulumi.get(self, "ingress_rules")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the network ACL name. The value can contain no more than 64 characters,
        including letters, digits, underscores (_), hyphens (-), and periods (.).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the network ACL.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The updated time of the ACL.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetNetworkAclsNetworkAclAssociatedSubnetResult(dict):
    def __init__(__self__, *,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str subnet_id: The ID of the subnet to associate with the network ACL.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the subnet to associate with the network ACL.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNetworkAclsNetworkAclEgressRuleResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 description: _builtins.str,
                 destination_ip_address: _builtins.str,
                 destination_ip_address_group_id: _builtins.str,
                 destination_port: _builtins.str,
                 ip_version: _builtins.int,
                 name: _builtins.str,
                 protocol: _builtins.str,
                 rule_id: _builtins.str,
                 source_ip_address: _builtins.str,
                 source_ip_address_group_id: _builtins.str,
                 source_port: _builtins.str):
        """
        :param _builtins.str action: The rule action.
        :param _builtins.str description: The network ACL rule description.
        :param _builtins.str destination_ip_address: The destination IP address or CIDR block of a network ACL rule.
        :param _builtins.str destination_ip_address_group_id: The destination IP address group ID of a network ACL rule.
        :param _builtins.str destination_port: The destination ports of a network ACL rule.
        :param _builtins.int ip_version: The IP version of a network ACL rule.
        :param _builtins.str name: Specifies the network ACL name. The value can contain no more than 64 characters,
               including letters, digits, underscores (_), hyphens (-), and periods (.).
        :param _builtins.str protocol: The rule protocol.
        :param _builtins.str rule_id: The ID of the rule.
        :param _builtins.str source_ip_address: The source IP address or CIDR block of a network ACL rule.
        :param _builtins.str source_ip_address_group_id: The source IP address group ID of a network ACL rule.
        :param _builtins.str source_port: The source ports of a network ACL rule.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "destination_ip_address", destination_ip_address)
        pulumi.set(__self__, "destination_ip_address_group_id", destination_ip_address_group_id)
        pulumi.set(__self__, "destination_port", destination_port)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "source_ip_address", source_ip_address)
        pulumi.set(__self__, "source_ip_address_group_id", source_ip_address_group_id)
        pulumi.set(__self__, "source_port", source_port)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        The rule action.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The network ACL rule description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="destinationIpAddress")
    def destination_ip_address(self) -> _builtins.str:
        """
        The destination IP address or CIDR block of a network ACL rule.
        """
        return pulumi.get(self, "destination_ip_address")

    @_builtins.property
    @pulumi.getter(name="destinationIpAddressGroupId")
    def destination_ip_address_group_id(self) -> _builtins.str:
        """
        The destination IP address group ID of a network ACL rule.
        """
        return pulumi.get(self, "destination_ip_address_group_id")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> _builtins.str:
        """
        The destination ports of a network ACL rule.
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        The IP version of a network ACL rule.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the network ACL name. The value can contain no more than 64 characters,
        including letters, digits, underscores (_), hyphens (-), and periods (.).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The rule protocol.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> _builtins.str:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter(name="sourceIpAddress")
    def source_ip_address(self) -> _builtins.str:
        """
        The source IP address or CIDR block of a network ACL rule.
        """
        return pulumi.get(self, "source_ip_address")

    @_builtins.property
    @pulumi.getter(name="sourceIpAddressGroupId")
    def source_ip_address_group_id(self) -> _builtins.str:
        """
        The source IP address group ID of a network ACL rule.
        """
        return pulumi.get(self, "source_ip_address_group_id")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> _builtins.str:
        """
        The source ports of a network ACL rule.
        """
        return pulumi.get(self, "source_port")


@pulumi.output_type
class GetNetworkAclsNetworkAclIngressRuleResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 description: _builtins.str,
                 destination_ip_address: _builtins.str,
                 destination_ip_address_group_id: _builtins.str,
                 destination_port: _builtins.str,
                 ip_version: _builtins.int,
                 name: _builtins.str,
                 protocol: _builtins.str,
                 rule_id: _builtins.str,
                 source_ip_address: _builtins.str,
                 source_ip_address_group_id: _builtins.str,
                 source_port: _builtins.str):
        """
        :param _builtins.str action: The rule action.
        :param _builtins.str description: The network ACL rule description.
        :param _builtins.str destination_ip_address: The destination IP address or CIDR block of a network ACL rule.
        :param _builtins.str destination_ip_address_group_id: The destination IP address group ID of a network ACL rule.
        :param _builtins.str destination_port: The destination ports of a network ACL rule.
        :param _builtins.int ip_version: The IP version of a network ACL rule.
        :param _builtins.str name: Specifies the network ACL name. The value can contain no more than 64 characters,
               including letters, digits, underscores (_), hyphens (-), and periods (.).
        :param _builtins.str protocol: The rule protocol.
        :param _builtins.str rule_id: The ID of the rule.
        :param _builtins.str source_ip_address: The source IP address or CIDR block of a network ACL rule.
        :param _builtins.str source_ip_address_group_id: The source IP address group ID of a network ACL rule.
        :param _builtins.str source_port: The source ports of a network ACL rule.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "destination_ip_address", destination_ip_address)
        pulumi.set(__self__, "destination_ip_address_group_id", destination_ip_address_group_id)
        pulumi.set(__self__, "destination_port", destination_port)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "source_ip_address", source_ip_address)
        pulumi.set(__self__, "source_ip_address_group_id", source_ip_address_group_id)
        pulumi.set(__self__, "source_port", source_port)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        The rule action.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The network ACL rule description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="destinationIpAddress")
    def destination_ip_address(self) -> _builtins.str:
        """
        The destination IP address or CIDR block of a network ACL rule.
        """
        return pulumi.get(self, "destination_ip_address")

    @_builtins.property
    @pulumi.getter(name="destinationIpAddressGroupId")
    def destination_ip_address_group_id(self) -> _builtins.str:
        """
        The destination IP address group ID of a network ACL rule.
        """
        return pulumi.get(self, "destination_ip_address_group_id")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> _builtins.str:
        """
        The destination ports of a network ACL rule.
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        The IP version of a network ACL rule.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the network ACL name. The value can contain no more than 64 characters,
        including letters, digits, underscores (_), hyphens (-), and periods (.).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The rule protocol.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> _builtins.str:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter(name="sourceIpAddress")
    def source_ip_address(self) -> _builtins.str:
        """
        The source IP address or CIDR block of a network ACL rule.
        """
        return pulumi.get(self, "source_ip_address")

    @_builtins.property
    @pulumi.getter(name="sourceIpAddressGroupId")
    def source_ip_address_group_id(self) -> _builtins.str:
        """
        The source IP address group ID of a network ACL rule.
        """
        return pulumi.get(self, "source_ip_address_group_id")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> _builtins.str:
        """
        The source ports of a network ACL rule.
        """
        return pulumi.get(self, "source_port")


@pulumi.output_type
class GetNetworkInterfacesPortResult(dict):
    def __init__(__self__, *,
                 allowed_address_pairs: Sequence['outputs.GetNetworkInterfacesPortAllowedAddressPairResult'],
                 binding_profile: Mapping[str, _builtins.str],
                 binding_vif_details: Sequence['outputs.GetNetworkInterfacesPortBindingVifDetailResult'],
                 binding_vnic_type: _builtins.str,
                 device_id: _builtins.str,
                 device_owner: _builtins.str,
                 dns_assignments: Sequence['outputs.GetNetworkInterfacesPortDnsAssignmentResult'],
                 dns_name: _builtins.str,
                 enable_efi: _builtins.bool,
                 extra_dhcp_opts: Sequence['outputs.GetNetworkInterfacesPortExtraDhcpOptResult'],
                 fixed_ips: Sequence['outputs.GetNetworkInterfacesPortFixedIpResult'],
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 instance_type: _builtins.str,
                 ipv6_bandwidth_id: _builtins.str,
                 mac_address: _builtins.str,
                 name: _builtins.str,
                 network_id: _builtins.str,
                 port_security_enabled: _builtins.bool,
                 security_groups: Sequence[_builtins.str],
                 status: _builtins.str,
                 zone_id: _builtins.str):
        """
        :param Sequence['GetNetworkInterfacesPortAllowedAddressPairArgs'] allowed_address_pairs: The IP address and MAC address pairs of the interface.
        :param Mapping[str, _builtins.str] binding_profile: The user-defined settings.
        :param Sequence['GetNetworkInterfacesPortBindingVifDetailArgs'] binding_vif_details: The VIF details.
        :param _builtins.str binding_vnic_type: The type of the bound vNIC.
        :param _builtins.str device_id: Specifies the device ID of the interface.
        :param _builtins.str device_owner: Specifies the device owner of the interface.
        :param Sequence['GetNetworkInterfacesPortDnsAssignmentArgs'] dns_assignments: The default private network domain name information of the primary NIC.
        :param _builtins.str dns_name: The default private network DNS name of the primary NIC.
        :param _builtins.bool enable_efi: Specifies whether EFI is enabled .
        :param Sequence['GetNetworkInterfacesPortExtraDhcpOptArgs'] extra_dhcp_opts: The extended DHCP option.
        :param Sequence['GetNetworkInterfacesPortFixedIpArgs'] fixed_ips: Filter by fixed_ips=ip_address or fixed_ips=subnet_id.
        :param _builtins.str id: The interface ID
        :param _builtins.str instance_id: The ID of the instance to which the interface belongs.
        :param _builtins.str instance_type: The type of the instance to which the interface belongs.
        :param _builtins.str ipv6_bandwidth_id: The ID of the shared bandwidth bound to the IPv6 NIC.
        :param _builtins.str mac_address: Specifies the MAC address of the interface.
        :param _builtins.str name: Specifies the name of the interface.
        :param _builtins.str network_id: Specifies the network ID of the interface.
        :param _builtins.bool port_security_enabled: Whether the security option is enabled for the interface.
        :param Sequence[_builtins.str] security_groups: Specifies the security group IDs of the interface.
        :param _builtins.str status: Specifies the status of the interface.
               The value can be: **ACTIVE**, **BUILD** or **DOWN**.
        :param _builtins.str zone_id: The AZ that the interface belongs to.
        """
        pulumi.set(__self__, "allowed_address_pairs", allowed_address_pairs)
        pulumi.set(__self__, "binding_profile", binding_profile)
        pulumi.set(__self__, "binding_vif_details", binding_vif_details)
        pulumi.set(__self__, "binding_vnic_type", binding_vnic_type)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "device_owner", device_owner)
        pulumi.set(__self__, "dns_assignments", dns_assignments)
        pulumi.set(__self__, "dns_name", dns_name)
        pulumi.set(__self__, "enable_efi", enable_efi)
        pulumi.set(__self__, "extra_dhcp_opts", extra_dhcp_opts)
        pulumi.set(__self__, "fixed_ips", fixed_ips)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "ipv6_bandwidth_id", ipv6_bandwidth_id)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "port_security_enabled", port_security_enabled)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter(name="allowedAddressPairs")
    def allowed_address_pairs(self) -> Sequence['outputs.GetNetworkInterfacesPortAllowedAddressPairResult']:
        """
        The IP address and MAC address pairs of the interface.
        """
        return pulumi.get(self, "allowed_address_pairs")

    @_builtins.property
    @pulumi.getter(name="bindingProfile")
    def binding_profile(self) -> Mapping[str, _builtins.str]:
        """
        The user-defined settings.
        """
        return pulumi.get(self, "binding_profile")

    @_builtins.property
    @pulumi.getter(name="bindingVifDetails")
    def binding_vif_details(self) -> Sequence['outputs.GetNetworkInterfacesPortBindingVifDetailResult']:
        """
        The VIF details.
        """
        return pulumi.get(self, "binding_vif_details")

    @_builtins.property
    @pulumi.getter(name="bindingVnicType")
    def binding_vnic_type(self) -> _builtins.str:
        """
        The type of the bound vNIC.
        """
        return pulumi.get(self, "binding_vnic_type")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> _builtins.str:
        """
        Specifies the device ID of the interface.
        """
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter(name="deviceOwner")
    def device_owner(self) -> _builtins.str:
        """
        Specifies the device owner of the interface.
        """
        return pulumi.get(self, "device_owner")

    @_builtins.property
    @pulumi.getter(name="dnsAssignments")
    def dns_assignments(self) -> Sequence['outputs.GetNetworkInterfacesPortDnsAssignmentResult']:
        """
        The default private network domain name information of the primary NIC.
        """
        return pulumi.get(self, "dns_assignments")

    @_builtins.property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> _builtins.str:
        """
        The default private network DNS name of the primary NIC.
        """
        return pulumi.get(self, "dns_name")

    @_builtins.property
    @pulumi.getter(name="enableEfi")
    def enable_efi(self) -> _builtins.bool:
        """
        Specifies whether EFI is enabled .
        """
        return pulumi.get(self, "enable_efi")

    @_builtins.property
    @pulumi.getter(name="extraDhcpOpts")
    def extra_dhcp_opts(self) -> Sequence['outputs.GetNetworkInterfacesPortExtraDhcpOptResult']:
        """
        The extended DHCP option.
        """
        return pulumi.get(self, "extra_dhcp_opts")

    @_builtins.property
    @pulumi.getter(name="fixedIps")
    def fixed_ips(self) -> Sequence['outputs.GetNetworkInterfacesPortFixedIpResult']:
        """
        Filter by fixed_ips=ip_address or fixed_ips=subnet_id.
        """
        return pulumi.get(self, "fixed_ips")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The interface ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The ID of the instance to which the interface belongs.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        """
        The type of the instance to which the interface belongs.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="ipv6BandwidthId")
    def ipv6_bandwidth_id(self) -> _builtins.str:
        """
        The ID of the shared bandwidth bound to the IPv6 NIC.
        """
        return pulumi.get(self, "ipv6_bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        Specifies the MAC address of the interface.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the interface.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        """
        Specifies the network ID of the interface.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="portSecurityEnabled")
    def port_security_enabled(self) -> _builtins.bool:
        """
        Whether the security option is enabled for the interface.
        """
        return pulumi.get(self, "port_security_enabled")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        """
        Specifies the security group IDs of the interface.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the interface.
        The value can be: **ACTIVE**, **BUILD** or **DOWN**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> _builtins.str:
        """
        The AZ that the interface belongs to.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetNetworkInterfacesPortAllowedAddressPairResult(dict):
    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 mac_address: _builtins.str):
        """
        :param _builtins.str ip_address: The interface IP address.
        :param _builtins.str mac_address: Specifies the MAC address of the interface.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "mac_address", mac_address)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        The interface IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        Specifies the MAC address of the interface.
        """
        return pulumi.get(self, "mac_address")


@pulumi.output_type
class GetNetworkInterfacesPortBindingVifDetailResult(dict):
    def __init__(__self__, *,
                 ovs_hybrid_plug: _builtins.bool,
                 port_filter: _builtins.bool,
                 primary_interface: _builtins.bool):
        """
        :param _builtins.bool ovs_hybrid_plug: The ovs hybrid plug.
        :param _builtins.bool port_filter: The port filter.
        :param _builtins.bool primary_interface: Whether this is the primary NIC.
        """
        pulumi.set(__self__, "ovs_hybrid_plug", ovs_hybrid_plug)
        pulumi.set(__self__, "port_filter", port_filter)
        pulumi.set(__self__, "primary_interface", primary_interface)

    @_builtins.property
    @pulumi.getter(name="ovsHybridPlug")
    def ovs_hybrid_plug(self) -> _builtins.bool:
        """
        The ovs hybrid plug.
        """
        return pulumi.get(self, "ovs_hybrid_plug")

    @_builtins.property
    @pulumi.getter(name="portFilter")
    def port_filter(self) -> _builtins.bool:
        """
        The port filter.
        """
        return pulumi.get(self, "port_filter")

    @_builtins.property
    @pulumi.getter(name="primaryInterface")
    def primary_interface(self) -> _builtins.bool:
        """
        Whether this is the primary NIC.
        """
        return pulumi.get(self, "primary_interface")


@pulumi.output_type
class GetNetworkInterfacesPortDnsAssignmentResult(dict):
    def __init__(__self__, *,
                 fqdn: _builtins.str,
                 hostname: _builtins.str,
                 ip_address: _builtins.str):
        """
        :param _builtins.str fqdn: The private network fully qualified domain name (FQDN) of the interface.
        :param _builtins.str hostname: The interface host name.
        :param _builtins.str ip_address: The interface IP address.
        """
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ip_address", ip_address)

    @_builtins.property
    @pulumi.getter
    def fqdn(self) -> _builtins.str:
        """
        The private network fully qualified domain name (FQDN) of the interface.
        """
        return pulumi.get(self, "fqdn")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        The interface host name.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        The interface IP address.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetNetworkInterfacesPortExtraDhcpOptResult(dict):
    def __init__(__self__, *,
                 opt_name: _builtins.str,
                 opt_value: _builtins.str):
        """
        :param _builtins.str opt_name: The option name.
        :param _builtins.str opt_value: The option value.
        """
        pulumi.set(__self__, "opt_name", opt_name)
        pulumi.set(__self__, "opt_value", opt_value)

    @_builtins.property
    @pulumi.getter(name="optName")
    def opt_name(self) -> _builtins.str:
        """
        The option name.
        """
        return pulumi.get(self, "opt_name")

    @_builtins.property
    @pulumi.getter(name="optValue")
    def opt_value(self) -> _builtins.str:
        """
        The option value.
        """
        return pulumi.get(self, "opt_value")


@pulumi.output_type
class GetNetworkInterfacesPortFixedIpResult(dict):
    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str ip_address: The interface IP address.
        :param _builtins.str subnet_id: The ID of subnet to which the interface belongs.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        The interface IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of subnet to which the interface belongs.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetQuotasQuotaResourceResult']):
        """
        :param Sequence['GetQuotasQuotaResourceArgs'] resources: The resource objects.
        """
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetQuotasQuotaResourceResult']:
        """
        The resource objects.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetQuotasQuotaResourceResult(dict):
    def __init__(__self__, *,
                 min: _builtins.int,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int min: The minimum quota value allowed.
        :param _builtins.int quota: The maximum quota values for the resources.
        :param _builtins.str type: Specifies the type of resource to filter quotas.
               The value can be **vpc**, **subnet**, **securityGroup**, **securityGroupRule**, **publicIp**,
               **vpn**, **vpngw**, **vpcPeer**, **firewall**, **shareBandwidth**, **shareBandwidthIP**,
               **loadbalancer**, **listener**, **physicalConnect**, **virtualInterface**,
               **vpcContainRoutetable**, and **routetableContainRoutes**.
        :param _builtins.int used: The number of created resources.
        """
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.int:
        """
        The minimum quota value allowed.
        """
        return pulumi.get(self, "min")

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        The maximum quota values for the resources.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of resource to filter quotas.
        The value can be **vpc**, **subnet**, **securityGroup**, **securityGroupRule**, **publicIp**,
        **vpn**, **vpngw**, **vpcPeer**, **firewall**, **shareBandwidth**, **shareBandwidthIP**,
        **loadbalancer**, **listener**, **physicalConnect**, **virtualInterface**,
        **vpcContainRoutetable**, and **routetableContainRoutes**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The number of created resources.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetRouteTableRouteResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 destination: _builtins.str,
                 nexthop: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str description: The description about the route.
        :param _builtins.str destination: The destination address in the CIDR notation format
        :param _builtins.str nexthop: The next hop.
        :param _builtins.str type: The route type.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "nexthop", nexthop)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description about the route.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        """
        The destination address in the CIDR notation format
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def nexthop(self) -> _builtins.str:
        """
        The next hop.
        """
        return pulumi.get(self, "nexthop")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The route type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRoutesRouteResult(dict):
    def __init__(__self__, *,
                 destination: _builtins.str,
                 id: _builtins.str,
                 nexthop: _builtins.str,
                 type: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str destination: Specifies the route destination.
        :param _builtins.str id: The route ID.
        :param _builtins.str nexthop: The next hop of the route.
        :param _builtins.str type: Specifies the route type.
        :param _builtins.str vpc_id: Specifies the ID of the VPC to which the route belongs.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "nexthop", nexthop)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        """
        Specifies the route destination.
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The route ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def nexthop(self) -> _builtins.str:
        """
        The next hop of the route.
        """
        return pulumi.get(self, "nexthop")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the route type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the ID of the VPC to which the route belongs.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetSecgroupRuleResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 description: _builtins.str,
                 direction: _builtins.str,
                 ethertype: _builtins.str,
                 id: _builtins.str,
                 port_range_max: _builtins.int,
                 port_range_min: _builtins.int,
                 ports: _builtins.str,
                 priority: _builtins.int,
                 protocol: _builtins.str,
                 remote_address_group_id: _builtins.str,
                 remote_group_id: _builtins.str,
                 remote_ip_prefix: _builtins.str):
        """
        :param _builtins.str action: The effective policy.
        :param _builtins.str description: The supplementary information about the security group rule.
        :param _builtins.str direction: The direction of the rule. The value can be *egress* or *ingress*.
        :param _builtins.str ethertype: The IP protocol version. The value can be *IPv4* or *IPv6*.
        :param _builtins.str id: The security group rule ID.
        :param _builtins.int port_range_max: schema: Deprecated
        :param _builtins.int port_range_min: schema: Deprecated
        :param _builtins.str ports: The port value range.
        :param _builtins.int priority: The priority number.
        :param _builtins.str protocol: The protocol type.
        :param _builtins.str remote_address_group_id: The ID of the remote address group.
        :param _builtins.str remote_group_id: The ID of the peer security group.
        :param _builtins.str remote_ip_prefix: The remote IP address. The value can be in the CIDR format or IP addresses.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "ethertype", ethertype)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "port_range_max", port_range_max)
        pulumi.set(__self__, "port_range_min", port_range_min)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "remote_address_group_id", remote_address_group_id)
        pulumi.set(__self__, "remote_group_id", remote_group_id)
        pulumi.set(__self__, "remote_ip_prefix", remote_ip_prefix)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        The effective policy.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The supplementary information about the security group rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        The direction of the rule. The value can be *egress* or *ingress*.
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def ethertype(self) -> _builtins.str:
        """
        The IP protocol version. The value can be *IPv4* or *IPv6*.
        """
        return pulumi.get(self, "ethertype")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The security group rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> _builtins.int:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_range_max")

    @_builtins.property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> _builtins.int:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_range_min")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> _builtins.str:
        """
        The port value range.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        The priority number.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol type.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="remoteAddressGroupId")
    def remote_address_group_id(self) -> _builtins.str:
        """
        The ID of the remote address group.
        """
        return pulumi.get(self, "remote_address_group_id")

    @_builtins.property
    @pulumi.getter(name="remoteGroupId")
    def remote_group_id(self) -> _builtins.str:
        """
        The ID of the peer security group.
        """
        return pulumi.get(self, "remote_group_id")

    @_builtins.property
    @pulumi.getter(name="remoteIpPrefix")
    def remote_ip_prefix(self) -> _builtins.str:
        """
        The remote IP address. The value can be in the CIDR format or IP addresses.
        """
        return pulumi.get(self, "remote_ip_prefix")


@pulumi.output_type
class GetSecgroupRulesRuleResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 direction: _builtins.str,
                 ethertype: _builtins.str,
                 id: _builtins.str,
                 ports: _builtins.str,
                 priority: _builtins.int,
                 protocol: _builtins.str,
                 remote_address_group_id: _builtins.str,
                 remote_group_id: _builtins.str,
                 remote_ip_prefix: _builtins.str,
                 security_group_id: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str action: Specifies the effective policy of the security group rule used for query.  
               The valid values are as follows:
               + **allow**
               + **deny**
        :param _builtins.str created_at: The creation time, in UTC format.
        :param _builtins.str description: Specifies the security group rule description used for query.
        :param _builtins.str direction: Specifies the direction of the security group rule used for query.  
               The valid values are as follows:
               + **ingress**
               + **egress**
        :param _builtins.str ethertype: The security group rule IP address protocol type. The value can be **IPv4** or **IPv6**.
        :param _builtins.str id: The ID of the security group rule.
        :param _builtins.str ports: The range of port values for security group rule. Which supports single port (80), continuous port (1-30)
               and discontinuous port (22, 3389, 80).
        :param _builtins.int priority: The priority of security group rule. The valid value ranges from `1` to `100`, `1` represents the
               highest priority.
        :param _builtins.str protocol: Specifies the security group rule protocol type used for query.  
               The value can be **tcp**, **udp**, **icmp**, **icmpv6** or IP protocol number, if empty, it indicates support for
               all protocols.
        :param _builtins.str remote_address_group_id: The remote address group ID.  
               This field is mutually exclusive with `remote_group_id` and `remote_ip_prefix`.
        :param _builtins.str remote_group_id: Specifies the remote security group ID used for query.
        :param _builtins.str remote_ip_prefix: The remote IP address. The value can be in the CIDR format or IP addresses.  
               This field is mutually exclusive with `remote_group_id` and `remote_address_group_id`.
        :param _builtins.str security_group_id: Specifies the security group ID that the rule should belong to.
        :param _builtins.str updated_at: The latest update time, in UTC format.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "ethertype", ethertype)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "remote_address_group_id", remote_address_group_id)
        pulumi.set(__self__, "remote_group_id", remote_group_id)
        pulumi.set(__self__, "remote_ip_prefix", remote_ip_prefix)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        Specifies the effective policy of the security group rule used for query.  
        The valid values are as follows:
        + **allow**
        + **deny**
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time, in UTC format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the security group rule description used for query.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Specifies the direction of the security group rule used for query.  
        The valid values are as follows:
        + **ingress**
        + **egress**
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def ethertype(self) -> _builtins.str:
        """
        The security group rule IP address protocol type. The value can be **IPv4** or **IPv6**.
        """
        return pulumi.get(self, "ethertype")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the security group rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> _builtins.str:
        """
        The range of port values for security group rule. Which supports single port (80), continuous port (1-30)
        and discontinuous port (22, 3389, 80).
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        The priority of security group rule. The valid value ranges from `1` to `100`, `1` represents the
        highest priority.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the security group rule protocol type used for query.  
        The value can be **tcp**, **udp**, **icmp**, **icmpv6** or IP protocol number, if empty, it indicates support for
        all protocols.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="remoteAddressGroupId")
    def remote_address_group_id(self) -> _builtins.str:
        """
        The remote address group ID.  
        This field is mutually exclusive with `remote_group_id` and `remote_ip_prefix`.
        """
        return pulumi.get(self, "remote_address_group_id")

    @_builtins.property
    @pulumi.getter(name="remoteGroupId")
    def remote_group_id(self) -> _builtins.str:
        """
        Specifies the remote security group ID used for query.
        """
        return pulumi.get(self, "remote_group_id")

    @_builtins.property
    @pulumi.getter(name="remoteIpPrefix")
    def remote_ip_prefix(self) -> _builtins.str:
        """
        The remote IP address. The value can be in the CIDR format or IP addresses.  
        This field is mutually exclusive with `remote_group_id` and `remote_address_group_id`.
        """
        return pulumi.get(self, "remote_ip_prefix")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        Specifies the security group ID that the rule should belong to.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time, in UTC format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetSecgroupTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The tag key.
        :param Sequence[_builtins.str] values: The tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSecgroupV2RuleResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 description: _builtins.str,
                 direction: _builtins.str,
                 ethertype: _builtins.str,
                 id: _builtins.str,
                 port_range_max: _builtins.int,
                 port_range_min: _builtins.int,
                 ports: _builtins.str,
                 priority: _builtins.int,
                 protocol: _builtins.str,
                 remote_address_group_id: _builtins.str,
                 remote_group_id: _builtins.str,
                 remote_ip_prefix: _builtins.str):
        """
        :param _builtins.int port_range_max: schema: Deprecated
        :param _builtins.int port_range_min: schema: Deprecated
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "ethertype", ethertype)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "port_range_max", port_range_max)
        pulumi.set(__self__, "port_range_min", port_range_min)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "remote_address_group_id", remote_address_group_id)
        pulumi.set(__self__, "remote_group_id", remote_group_id)
        pulumi.set(__self__, "remote_ip_prefix", remote_ip_prefix)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def ethertype(self) -> _builtins.str:
        return pulumi.get(self, "ethertype")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> _builtins.int:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_range_max")

    @_builtins.property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> _builtins.int:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_range_min")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> _builtins.str:
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="remoteAddressGroupId")
    def remote_address_group_id(self) -> _builtins.str:
        return pulumi.get(self, "remote_address_group_id")

    @_builtins.property
    @pulumi.getter(name="remoteGroupId")
    def remote_group_id(self) -> _builtins.str:
        return pulumi.get(self, "remote_group_id")

    @_builtins.property
    @pulumi.getter(name="remoteIpPrefix")
    def remote_ip_prefix(self) -> _builtins.str:
        return pulumi.get(self, "remote_ip_prefix")


@pulumi.output_type
class GetSecgroupsByTagsMatchResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the match. The value can be: **resource_name**.
        :param _builtins.str value: Specifies the value of the match.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the match. The value can be: **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecgroupsByTagsResourceResult(dict):
    def __init__(__self__, *,
                 resource_detail: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 tags: Mapping[str, _builtins.str]):
        """
        :param _builtins.str resource_detail: The detail of the security group.
        :param _builtins.str resource_id: The ID of the security group.
        :param _builtins.str resource_name: The name of the security group.
        :param Mapping[str, _builtins.str] tags: Specifies the tags to filter to resources.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_detail", resource_detail)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceDetail")
    def resource_detail(self) -> _builtins.str:
        """
        The detail of the security group.
        """
        return pulumi.get(self, "resource_detail")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the tags to filter to resources.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSecgroupsByTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the match. The value can be: **resource_name**.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
               
               <a name="matches"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the match. The value can be: **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.

        <a name="matches"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSecgroupsSecurityGroupResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time, in UTC format.
        :param _builtins.str description: Specifies the description of the security group. The security groups can be
               filtered by keywords in the description.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the security group.
        :param _builtins.str id: Specifies the id of the desired security group.
        :param _builtins.str name: Specifies the name of the security group.
        :param _builtins.str updated_at: The last update time, in UTC format.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time, in UTC format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the security group. The security groups can be
        filtered by keywords in the description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID of the security group.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the id of the desired security group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the security group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The last update time, in UTC format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetSubNetworkInterfacesSubNetworkInterfaceResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 ip_address: _builtins.str,
                 ipv6_ip_address: _builtins.str,
                 mac_address: _builtins.str,
                 parent_device_id: _builtins.str,
                 parent_id: _builtins.str,
                 project_id: _builtins.str,
                 security_enabled: _builtins.bool,
                 security_groups: Sequence[_builtins.str],
                 subnet_id: _builtins.str,
                 tags: Sequence[_builtins.str],
                 vlan_id: _builtins.int,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str created_at: The time when the supplementary network interface is created.
        :param _builtins.str description: Specifies the description of the supplementary network interface.
        :param _builtins.str id: The ID of supplementary network interface.
        :param _builtins.str ip_address: Specifies the private IPv4 address of the supplementary network interface.
        :param _builtins.str ipv6_ip_address: The IPv6 address of the supplementary network interface.
        :param _builtins.str mac_address: Specifies the MAC address of the supplementary network interface.
        :param _builtins.str parent_device_id: The ID of the parent device.
        :param _builtins.str parent_id: Specifies the ID of the elastic network interface
               to which the supplementary network interface belongs.
        :param _builtins.str project_id: The ID of the project to which the supplementary network interface belongs.
        :param _builtins.bool security_enabled: Whether the IPv6 address is it enabled of the supplementary network interface.
        :param Sequence[_builtins.str] security_groups: The list of the security groups IDs to which the supplementary network interface belongs.
        :param _builtins.str subnet_id: Specifies the ID of the subnet to which the supplementary network interface belongs.
        :param Sequence[_builtins.str] tags: The tags of a supplementary network interface.
        :param _builtins.int vlan_id: The vlan ID of the supplementary network interface.
        :param _builtins.str vpc_id: Specifies the ID of the VPC to which the supplementary network interface belongs.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ipv6_ip_address", ipv6_ip_address)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "parent_device_id", parent_device_id)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_enabled", security_enabled)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vlan_id", vlan_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the supplementary network interface is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the supplementary network interface.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of supplementary network interface.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Specifies the private IPv4 address of the supplementary network interface.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipv6IpAddress")
    def ipv6_ip_address(self) -> _builtins.str:
        """
        The IPv6 address of the supplementary network interface.
        """
        return pulumi.get(self, "ipv6_ip_address")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        Specifies the MAC address of the supplementary network interface.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="parentDeviceId")
    def parent_device_id(self) -> _builtins.str:
        """
        The ID of the parent device.
        """
        return pulumi.get(self, "parent_device_id")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        """
        Specifies the ID of the elastic network interface
        to which the supplementary network interface belongs.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The ID of the project to which the supplementary network interface belongs.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="securityEnabled")
    def security_enabled(self) -> _builtins.bool:
        """
        Whether the IPv6 address is it enabled of the supplementary network interface.
        """
        return pulumi.get(self, "security_enabled")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        """
        The list of the security groups IDs to which the supplementary network interface belongs.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the ID of the subnet to which the supplementary network interface belongs.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        """
        The tags of a supplementary network interface.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> _builtins.int:
        """
        The vlan ID of the supplementary network interface.
        """
        return pulumi.get(self, "vlan_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the ID of the VPC to which the supplementary network interface belongs.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetSubnetIpAvailabilitiesNetworkIpAvailabilityResult(dict):
    def __init__(__self__, *,
                 network_id: _builtins.str,
                 network_name: _builtins.str,
                 subnet_ip_availabilities: Sequence['outputs.GetSubnetIpAvailabilitiesNetworkIpAvailabilitySubnetIpAvailabilityResult'],
                 total_ips: _builtins.int,
                 used_ips: _builtins.int):
        """
        :param _builtins.str network_id: Specifies the subnet ID.
        :param _builtins.str network_name: The network name.
        :param Sequence['GetSubnetIpAvailabilitiesNetworkIpAvailabilitySubnetIpAvailabilityArgs'] subnet_ip_availabilities: The subnet IP address usage objects.
        :param _builtins.int total_ips: The total number of IP addresses on a subnet.
               The reserved IP addresses are not included.
        :param _builtins.int used_ips: The number of in-use IP addresses on a subnet.
               The reserved IP addresses are not included.
        """
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "network_name", network_name)
        pulumi.set(__self__, "subnet_ip_availabilities", subnet_ip_availabilities)
        pulumi.set(__self__, "total_ips", total_ips)
        pulumi.set(__self__, "used_ips", used_ips)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        """
        Specifies the subnet ID.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="networkName")
    def network_name(self) -> _builtins.str:
        """
        The network name.
        """
        return pulumi.get(self, "network_name")

    @_builtins.property
    @pulumi.getter(name="subnetIpAvailabilities")
    def subnet_ip_availabilities(self) -> Sequence['outputs.GetSubnetIpAvailabilitiesNetworkIpAvailabilitySubnetIpAvailabilityResult']:
        """
        The subnet IP address usage objects.
        """
        return pulumi.get(self, "subnet_ip_availabilities")

    @_builtins.property
    @pulumi.getter(name="totalIps")
    def total_ips(self) -> _builtins.int:
        """
        The total number of IP addresses on a subnet.
        The reserved IP addresses are not included.
        """
        return pulumi.get(self, "total_ips")

    @_builtins.property
    @pulumi.getter(name="usedIps")
    def used_ips(self) -> _builtins.int:
        """
        The number of in-use IP addresses on a subnet.
        The reserved IP addresses are not included.
        """
        return pulumi.get(self, "used_ips")


@pulumi.output_type
class GetSubnetIpAvailabilitiesNetworkIpAvailabilitySubnetIpAvailabilityResult(dict):
    def __init__(__self__, *,
                 cidr: _builtins.str,
                 ip_version: _builtins.int,
                 subnet_id: _builtins.str,
                 subnet_name: _builtins.str,
                 total_ips: _builtins.int,
                 used_ips: _builtins.int):
        """
        :param _builtins.str cidr: The subnet CIDR block.
        :param _builtins.int ip_version: The IP version of the subnet.
               The value can be **4** or **6**.
        :param _builtins.str subnet_id: The subnet ID.
        :param _builtins.str subnet_name: The subnet name.
        :param _builtins.int total_ips: The total number of IP addresses on a subnet.
               The reserved IP addresses are not included.
        :param _builtins.int used_ips: The number of in-use IP addresses on a subnet.
               The reserved IP addresses are not included.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "total_ips", total_ips)
        pulumi.set(__self__, "used_ips", used_ips)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        The subnet CIDR block.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        The IP version of the subnet.
        The value can be **4** or **6**.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> _builtins.str:
        """
        The subnet name.
        """
        return pulumi.get(self, "subnet_name")

    @_builtins.property
    @pulumi.getter(name="totalIps")
    def total_ips(self) -> _builtins.int:
        """
        The total number of IP addresses on a subnet.
        The reserved IP addresses are not included.
        """
        return pulumi.get(self, "total_ips")

    @_builtins.property
    @pulumi.getter(name="usedIps")
    def used_ips(self) -> _builtins.int:
        """
        The number of in-use IP addresses on a subnet.
        The reserved IP addresses are not included.
        """
        return pulumi.get(self, "used_ips")


@pulumi.output_type
class GetSubnetPrivateIpsPrivateIpResult(dict):
    def __init__(__self__, *,
                 device_owner: _builtins.str,
                 id: _builtins.str,
                 ip_address: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str device_owner: The resource using the private IP address. The parameter is left blank if it is not used.
        :param _builtins.str id: The private IP address ID
        :param _builtins.str ip_address: The private IP address.
        :param _builtins.str status: The status of the private IP address.
               Possible values are **ACTIVE** and **DOWN**.
        :param _builtins.str subnet_id: Specifies the ID of the subnet that the private IP address belongs to.
        """
        pulumi.set(__self__, "device_owner", device_owner)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="deviceOwner")
    def device_owner(self) -> _builtins.str:
        """
        The resource using the private IP address. The parameter is left blank if it is not used.
        """
        return pulumi.get(self, "device_owner")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The private IP address ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        The private IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the private IP address.
        Possible values are **ACTIVE** and **DOWN**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the ID of the subnet that the private IP address belongs to.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetSubnetV2AllocationPoolResult(dict):
    def __init__(__self__, *,
                 end: _builtins.str,
                 start: _builtins.str):
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @_builtins.property
    @pulumi.getter
    def end(self) -> _builtins.str:
        return pulumi.get(self, "end")

    @_builtins.property
    @pulumi.getter
    def start(self) -> _builtins.str:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetSubnetV2HostRouteResult(dict):
    def __init__(__self__, *,
                 destination_cidr: _builtins.str,
                 next_hop: _builtins.str):
        pulumi.set(__self__, "destination_cidr", destination_cidr)
        pulumi.set(__self__, "next_hop", next_hop)

    @_builtins.property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> _builtins.str:
        return pulumi.get(self, "destination_cidr")

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> _builtins.str:
        return pulumi.get(self, "next_hop")


@pulumi.output_type
class GetSubnetsByTagsMatchResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the match. The value can be: **resource_name**.
        :param _builtins.str value: Specifies the value of the match.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the match. The value can be: **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubnetsByTagsResourceResult(dict):
    def __init__(__self__, *,
                 resource_detail: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 tags: Mapping[str, _builtins.str]):
        """
        :param _builtins.str resource_detail: The detail of the subnet.
        :param _builtins.str resource_id: The ID of the subnet.
        :param _builtins.str resource_name: The name of the subnet.
        :param Mapping[str, _builtins.str] tags: Specifies the tags to filter to resources.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_detail", resource_detail)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceDetail")
    def resource_detail(self) -> _builtins.str:
        """
        The detail of the subnet.
        """
        return pulumi.get(self, "resource_detail")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The ID of the subnet.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the subnet.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the tags to filter to resources.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSubnetsByTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the match. The value can be: **resource_name**.
        :param Sequence[_builtins.str] values: Specifies the values of the tag.
               
               <a name="matches"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the match. The value can be: **resource_name**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values of the tag.

        <a name="matches"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSubnetsSubnetResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 cidr: _builtins.str,
                 description: _builtins.str,
                 dhcp_enable: _builtins.bool,
                 dns_lists: Sequence[_builtins.str],
                 gateway_ip: _builtins.str,
                 id: _builtins.str,
                 ipv4_subnet_id: _builtins.str,
                 ipv6_cidr: _builtins.str,
                 ipv6_enable: _builtins.bool,
                 ipv6_gateway: _builtins.str,
                 ipv6_subnet_id: _builtins.str,
                 name: _builtins.str,
                 primary_dns: _builtins.str,
                 secondary_dns: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 vpc_id: _builtins.str):
        """
        :param _builtins.str availability_zone: Specifies the availability zone (AZ) to which the desired subnet belongs to.
        :param _builtins.str cidr: Specifies the network segment of desired subnet. The value must be in CIDR format.
        :param _builtins.str gateway_ip: Specifies the subnet gateway address of desired subnet.
        :param _builtins.str id: Specifies the id of the desired subnet.
        :param _builtins.str name: Specifies the name of the desired subnet.
        :param _builtins.str primary_dns: Specifies the IP address of DNS server 1 on the desired subnet.
        :param _builtins.str secondary_dns: Specifies the IP address of DNS server 2 on the desired subnet.
        :param _builtins.str status: Specifies the current status of the desired subnet.
               the value can be ACTIVE, DOWN, UNKNOWN, or ERROR.
        :param _builtins.str subnet_id: schema: Deprecated
        :param Mapping[str, _builtins.str] tags: Specifies the included key/value pairs which associated with the desired subnet.
               
               > A maximum of 10 tag keys are allowed for each query operation. Each tag key can have up to 10 tag values.
               The tag key cannot be left blank or set to an empty string. Each tag key must be unique, and each tag value in a
               tag must be unique, use commas(,) to separate the multiple values. An empty for values indicates any value.
               The values are in the OR relationship.
        :param _builtins.str vpc_id: Specifies the id of the VPC that the desired subnet belongs to.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dhcp_enable", dhcp_enable)
        pulumi.set(__self__, "dns_lists", dns_lists)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipv4_subnet_id", ipv4_subnet_id)
        pulumi.set(__self__, "ipv6_cidr", ipv6_cidr)
        pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        pulumi.set(__self__, "ipv6_gateway", ipv6_gateway)
        pulumi.set(__self__, "ipv6_subnet_id", ipv6_subnet_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_dns", primary_dns)
        pulumi.set(__self__, "secondary_dns", secondary_dns)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Specifies the availability zone (AZ) to which the desired subnet belongs to.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        Specifies the network segment of desired subnet. The value must be in CIDR format.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dhcpEnable")
    def dhcp_enable(self) -> _builtins.bool:
        return pulumi.get(self, "dhcp_enable")

    @_builtins.property
    @pulumi.getter(name="dnsLists")
    def dns_lists(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "dns_lists")

    @_builtins.property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> _builtins.str:
        """
        Specifies the subnet gateway address of desired subnet.
        """
        return pulumi.get(self, "gateway_ip")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the id of the desired subnet.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetId")
    def ipv4_subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "ipv4_subnet_id")

    @_builtins.property
    @pulumi.getter(name="ipv6Cidr")
    def ipv6_cidr(self) -> _builtins.str:
        return pulumi.get(self, "ipv6_cidr")

    @_builtins.property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> _builtins.bool:
        return pulumi.get(self, "ipv6_enable")

    @_builtins.property
    @pulumi.getter(name="ipv6Gateway")
    def ipv6_gateway(self) -> _builtins.str:
        return pulumi.get(self, "ipv6_gateway")

    @_builtins.property
    @pulumi.getter(name="ipv6SubnetId")
    def ipv6_subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "ipv6_subnet_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the desired subnet.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="primaryDns")
    def primary_dns(self) -> _builtins.str:
        """
        Specifies the IP address of DNS server 1 on the desired subnet.
        """
        return pulumi.get(self, "primary_dns")

    @_builtins.property
    @pulumi.getter(name="secondaryDns")
    def secondary_dns(self) -> _builtins.str:
        """
        Specifies the IP address of DNS server 2 on the desired subnet.
        """
        return pulumi.get(self, "secondary_dns")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the current status of the desired subnet.
        the value can be ACTIVE, DOWN, UNKNOWN, or ERROR.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the included key/value pairs which associated with the desired subnet.

        > A maximum of 10 tag keys are allowed for each query operation. Each tag key can have up to 10 tag values.
        The tag key cannot be left blank or set to an empty string. Each tag key must be unique, and each tag value in a
        tag must be unique, use commas(,) to separate the multiple values. An empty for values indicates any value.
        The values are in the OR relationship.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the id of the VPC that the desired subnet belongs to.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetTrafficMirrorFilterRulesTrafficMirrorFilterRuleResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 destination_cidr_block: _builtins.str,
                 destination_port_range: _builtins.str,
                 direction: _builtins.str,
                 ethertype: _builtins.str,
                 id: _builtins.str,
                 priority: _builtins.int,
                 project_id: _builtins.str,
                 protocol: _builtins.str,
                 source_cidr_block: _builtins.str,
                 source_port_range: _builtins.str,
                 traffic_mirror_filter_id: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str action: The policy of in the traffic mirror filter rule.
               Valid values are **accept** or **reject**.
        :param _builtins.str created_at: Time when a traffic mirror filter rule is created.
        :param _builtins.str description: Description of a traffic mirror filter rule.
        :param _builtins.str destination_cidr_block: The destination IP address of the traffic mirror filter rule.
        :param _builtins.str destination_port_range: The destination port number range of the traffic mirror filter rule.
               The value ranges from `1` to `65,535`, enter two port numbers connected by a hyphen (-). For example, **80-200**.
        :param _builtins.str direction: The direction of the traffic mirror filter rule.
               Valid values are **ingress** or **egress**.
        :param _builtins.str ethertype: IP address version of the mirrored traffic.
        :param _builtins.str id: Traffic mirror filter rule ID.
        :param _builtins.int priority: The priority number of the traffic mirror filter rule.
               Valid value ranges from `1` to `65,535`.
        :param _builtins.str project_id: Project ID.
        :param _builtins.str protocol: The protocol of the traffic mirror filter rule.
               Valid value are **tcp**, **udp**, **icmp**, **icmpv6**, **all**.
        :param _builtins.str source_cidr_block: The source IP address of the traffic mirror filter rule.
        :param _builtins.str source_port_range: The source port number range of the traffic mirror filter rule.
               The value ranges from `1` to `65,535`, enter two port numbers connected by a hyphen (-). For example, **80-200**.
        :param _builtins.str traffic_mirror_filter_id: The traffic mirror filter ID used as the query filter.
        :param _builtins.str updated_at: Time when a traffic mirror filter rule is updated.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "destination_cidr_block", destination_cidr_block)
        pulumi.set(__self__, "destination_port_range", destination_port_range)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "ethertype", ethertype)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source_cidr_block", source_cidr_block)
        pulumi.set(__self__, "source_port_range", source_port_range)
        pulumi.set(__self__, "traffic_mirror_filter_id", traffic_mirror_filter_id)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        The policy of in the traffic mirror filter rule.
        Valid values are **accept** or **reject**.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when a traffic mirror filter rule is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of a traffic mirror filter rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="destinationCidrBlock")
    def destination_cidr_block(self) -> _builtins.str:
        """
        The destination IP address of the traffic mirror filter rule.
        """
        return pulumi.get(self, "destination_cidr_block")

    @_builtins.property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> _builtins.str:
        """
        The destination port number range of the traffic mirror filter rule.
        The value ranges from `1` to `65,535`, enter two port numbers connected by a hyphen (-). For example, **80-200**.
        """
        return pulumi.get(self, "destination_port_range")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        The direction of the traffic mirror filter rule.
        Valid values are **ingress** or **egress**.
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def ethertype(self) -> _builtins.str:
        """
        IP address version of the mirrored traffic.
        """
        return pulumi.get(self, "ethertype")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Traffic mirror filter rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        The priority number of the traffic mirror filter rule.
        Valid value ranges from `1` to `65,535`.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol of the traffic mirror filter rule.
        Valid value are **tcp**, **udp**, **icmp**, **icmpv6**, **all**.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="sourceCidrBlock")
    def source_cidr_block(self) -> _builtins.str:
        """
        The source IP address of the traffic mirror filter rule.
        """
        return pulumi.get(self, "source_cidr_block")

    @_builtins.property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> _builtins.str:
        """
        The source port number range of the traffic mirror filter rule.
        The value ranges from `1` to `65,535`, enter two port numbers connected by a hyphen (-). For example, **80-200**.
        """
        return pulumi.get(self, "source_port_range")

    @_builtins.property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> _builtins.str:
        """
        The traffic mirror filter ID used as the query filter.
        """
        return pulumi.get(self, "traffic_mirror_filter_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when a traffic mirror filter rule is updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetTrafficMirrorFiltersTrafficMirrorFilterResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 egress_rules: Sequence['outputs.GetTrafficMirrorFiltersTrafficMirrorFilterEgressRuleResult'],
                 id: _builtins.str,
                 ingress_rules: Sequence['outputs.GetTrafficMirrorFiltersTrafficMirrorFilterIngressRuleResult'],
                 name: _builtins.str,
                 project_id: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: Time when a traffic mirror filter rule is created.
        :param _builtins.str description: Description of a traffic mirror filter rule.
        :param Sequence['GetTrafficMirrorFiltersTrafficMirrorFilterEgressRuleArgs'] egress_rules: Outbound mirror filter rules.
        :param _builtins.str id: Traffic mirror filter rule ID.
        :param Sequence['GetTrafficMirrorFiltersTrafficMirrorFilterIngressRuleArgs'] ingress_rules: Inbound mirror filter rules.
        :param _builtins.str name: Specifies the name of the traffic mirror filter.
        :param _builtins.str project_id: Project ID.
        :param _builtins.str updated_at: Time when a traffic mirror filter rule is updated.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "egress_rules", egress_rules)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ingress_rules", ingress_rules)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when a traffic mirror filter rule is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of a traffic mirror filter rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="egressRules")
    def egress_rules(self) -> Sequence['outputs.GetTrafficMirrorFiltersTrafficMirrorFilterEgressRuleResult']:
        """
        Outbound mirror filter rules.
        """
        return pulumi.get(self, "egress_rules")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Traffic mirror filter rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ingressRules")
    def ingress_rules(self) -> Sequence['outputs.GetTrafficMirrorFiltersTrafficMirrorFilterIngressRuleResult']:
        """
        Inbound mirror filter rules.
        """
        return pulumi.get(self, "ingress_rules")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the traffic mirror filter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when a traffic mirror filter rule is updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetTrafficMirrorFiltersTrafficMirrorFilterEgressRuleResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 destination_cidr_block: _builtins.str,
                 destination_port_range: _builtins.str,
                 direction: _builtins.str,
                 ethertype: _builtins.str,
                 id: _builtins.str,
                 priority: _builtins.int,
                 project_id: _builtins.str,
                 protocol: _builtins.str,
                 source_cidr_block: _builtins.str,
                 source_port_range: _builtins.str,
                 traffic_mirror_filter_id: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str action: Whether to accept or reject traffic.
        :param _builtins.str created_at: Time when a traffic mirror filter rule is created.
        :param _builtins.str description: Description of a traffic mirror filter rule.
        :param _builtins.str destination_cidr_block: Destination CIDR block of the mirrored traffic.
        :param _builtins.str destination_port_range: Source port range.
        :param _builtins.str direction: Traffic direction.
        :param _builtins.str ethertype: IP address version of the mirrored traffic.
        :param _builtins.str id: Traffic mirror filter rule ID.
        :param _builtins.int priority: Mirror filter rule priority.
        :param _builtins.str project_id: Project ID.
        :param _builtins.str protocol: Protocol of the mirrored traffic.
        :param _builtins.str source_cidr_block: Source CIDR block of the mirrored traffic.
        :param _builtins.str source_port_range: Source port range.
        :param _builtins.str traffic_mirror_filter_id: Specifies the ID of the traffic mirror filter.
        :param _builtins.str updated_at: Time when a traffic mirror filter rule is updated.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "destination_cidr_block", destination_cidr_block)
        pulumi.set(__self__, "destination_port_range", destination_port_range)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "ethertype", ethertype)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source_cidr_block", source_cidr_block)
        pulumi.set(__self__, "source_port_range", source_port_range)
        pulumi.set(__self__, "traffic_mirror_filter_id", traffic_mirror_filter_id)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        Whether to accept or reject traffic.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when a traffic mirror filter rule is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of a traffic mirror filter rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="destinationCidrBlock")
    def destination_cidr_block(self) -> _builtins.str:
        """
        Destination CIDR block of the mirrored traffic.
        """
        return pulumi.get(self, "destination_cidr_block")

    @_builtins.property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> _builtins.str:
        """
        Source port range.
        """
        return pulumi.get(self, "destination_port_range")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Traffic direction.
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def ethertype(self) -> _builtins.str:
        """
        IP address version of the mirrored traffic.
        """
        return pulumi.get(self, "ethertype")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Traffic mirror filter rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Mirror filter rule priority.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol of the mirrored traffic.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="sourceCidrBlock")
    def source_cidr_block(self) -> _builtins.str:
        """
        Source CIDR block of the mirrored traffic.
        """
        return pulumi.get(self, "source_cidr_block")

    @_builtins.property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> _builtins.str:
        """
        Source port range.
        """
        return pulumi.get(self, "source_port_range")

    @_builtins.property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> _builtins.str:
        """
        Specifies the ID of the traffic mirror filter.
        """
        return pulumi.get(self, "traffic_mirror_filter_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when a traffic mirror filter rule is updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetTrafficMirrorFiltersTrafficMirrorFilterIngressRuleResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 destination_cidr_block: _builtins.str,
                 destination_port_range: _builtins.str,
                 direction: _builtins.str,
                 ethertype: _builtins.str,
                 id: _builtins.str,
                 priority: _builtins.int,
                 project_id: _builtins.str,
                 protocol: _builtins.str,
                 source_cidr_block: _builtins.str,
                 source_port_range: _builtins.str,
                 traffic_mirror_filter_id: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str action: Whether to accept or reject traffic.
        :param _builtins.str created_at: Time when a traffic mirror filter rule is created.
        :param _builtins.str description: Description of a traffic mirror filter rule.
        :param _builtins.str destination_cidr_block: Destination CIDR block of the mirrored traffic.
        :param _builtins.str destination_port_range: Source port range.
        :param _builtins.str direction: Traffic direction.
        :param _builtins.str ethertype: IP address version of the mirrored traffic.
        :param _builtins.str id: Traffic mirror filter rule ID.
        :param _builtins.int priority: Mirror filter rule priority.
        :param _builtins.str project_id: Project ID.
        :param _builtins.str protocol: Protocol of the mirrored traffic.
        :param _builtins.str source_cidr_block: Source CIDR block of the mirrored traffic.
        :param _builtins.str source_port_range: Source port range.
        :param _builtins.str traffic_mirror_filter_id: Specifies the ID of the traffic mirror filter.
        :param _builtins.str updated_at: Time when a traffic mirror filter rule is updated.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "destination_cidr_block", destination_cidr_block)
        pulumi.set(__self__, "destination_port_range", destination_port_range)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "ethertype", ethertype)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source_cidr_block", source_cidr_block)
        pulumi.set(__self__, "source_port_range", source_port_range)
        pulumi.set(__self__, "traffic_mirror_filter_id", traffic_mirror_filter_id)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        Whether to accept or reject traffic.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when a traffic mirror filter rule is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of a traffic mirror filter rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="destinationCidrBlock")
    def destination_cidr_block(self) -> _builtins.str:
        """
        Destination CIDR block of the mirrored traffic.
        """
        return pulumi.get(self, "destination_cidr_block")

    @_builtins.property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> _builtins.str:
        """
        Source port range.
        """
        return pulumi.get(self, "destination_port_range")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Traffic direction.
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def ethertype(self) -> _builtins.str:
        """
        IP address version of the mirrored traffic.
        """
        return pulumi.get(self, "ethertype")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Traffic mirror filter rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Mirror filter rule priority.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol of the mirrored traffic.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="sourceCidrBlock")
    def source_cidr_block(self) -> _builtins.str:
        """
        Source CIDR block of the mirrored traffic.
        """
        return pulumi.get(self, "source_cidr_block")

    @_builtins.property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> _builtins.str:
        """
        Source port range.
        """
        return pulumi.get(self, "source_port_range")

    @_builtins.property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> _builtins.str:
        """
        Specifies the ID of the traffic mirror filter.
        """
        return pulumi.get(self, "traffic_mirror_filter_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when a traffic mirror filter rule is updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetTrafficMirrorSessionsTrafficMirrorSessionResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str,
                 packet_length: _builtins.int,
                 priority: _builtins.int,
                 project_id: _builtins.str,
                 traffic_mirror_filter_id: _builtins.str,
                 traffic_mirror_sources: Sequence[_builtins.str],
                 traffic_mirror_target_id: _builtins.str,
                 traffic_mirror_target_type: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 virtual_network_id: _builtins.int):
        """
        :param _builtins.str created_at: Time when a traffic mirror session is created.
        :param _builtins.str description: Description of a traffic mirror session.
        :param _builtins.bool enabled: Specifies whether the mirror session is enabled. Defaults to **true**.
        :param _builtins.str id: Traffic mirror session ID.
        :param _builtins.str name: Specifies the traffic mirror session name used to query.
        :param _builtins.int packet_length: Specifies the maximum transmission unit (MTU).
               The value range is **1-1460**, defaults to **96**.
        :param _builtins.int priority: Specifies the mirror session priority. The value range is **1-32766**.
               A smaller value indicates a higher priority.
        :param _builtins.str project_id: Project ID.
        :param _builtins.str traffic_mirror_filter_id: Specifies the traffic mirror filter ID used in the session.
        :param Sequence[_builtins.str] traffic_mirror_sources: Mirror source IDs. An elastic network interface can be used as a mirror source.
               Each mirror session can have up to 10 mirror sources by default.
        :param _builtins.str traffic_mirror_target_id: Specifies the traffic mirror target ID.
        :param _builtins.str traffic_mirror_target_type: Specifies the mirror target type. The value can be:
               + **eni**: elastic network interface;
               + **elb**: private network load balancer;
        :param _builtins.str type: Specifies the mirror source type. The value can be **eni**(elastic network interface).
        :param _builtins.str updated_at: Time when the traffic mirror session is updated.
        :param _builtins.int virtual_network_id: Specifies the VNI, which is used to distinguish mirrored traffic of different
               sessions. The value range is **0-16777215**, defaults to **1**.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "packet_length", packet_length)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "traffic_mirror_filter_id", traffic_mirror_filter_id)
        pulumi.set(__self__, "traffic_mirror_sources", traffic_mirror_sources)
        pulumi.set(__self__, "traffic_mirror_target_id", traffic_mirror_target_id)
        pulumi.set(__self__, "traffic_mirror_target_type", traffic_mirror_target_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "virtual_network_id", virtual_network_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Time when a traffic mirror session is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of a traffic mirror session.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Specifies whether the mirror session is enabled. Defaults to **true**.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Traffic mirror session ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the traffic mirror session name used to query.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> _builtins.int:
        """
        Specifies the maximum transmission unit (MTU).
        The value range is **1-1460**, defaults to **96**.
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Specifies the mirror session priority. The value range is **1-32766**.
        A smaller value indicates a higher priority.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> _builtins.str:
        """
        Specifies the traffic mirror filter ID used in the session.
        """
        return pulumi.get(self, "traffic_mirror_filter_id")

    @_builtins.property
    @pulumi.getter(name="trafficMirrorSources")
    def traffic_mirror_sources(self) -> Sequence[_builtins.str]:
        """
        Mirror source IDs. An elastic network interface can be used as a mirror source.
        Each mirror session can have up to 10 mirror sources by default.
        """
        return pulumi.get(self, "traffic_mirror_sources")

    @_builtins.property
    @pulumi.getter(name="trafficMirrorTargetId")
    def traffic_mirror_target_id(self) -> _builtins.str:
        """
        Specifies the traffic mirror target ID.
        """
        return pulumi.get(self, "traffic_mirror_target_id")

    @_builtins.property
    @pulumi.getter(name="trafficMirrorTargetType")
    def traffic_mirror_target_type(self) -> _builtins.str:
        """
        Specifies the mirror target type. The value can be:
        + **eni**: elastic network interface;
        + **elb**: private network load balancer;
        """
        return pulumi.get(self, "traffic_mirror_target_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the mirror source type. The value can be **eni**(elastic network interface).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Time when the traffic mirror session is updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkId")
    def virtual_network_id(self) -> _builtins.int:
        """
        Specifies the VNI, which is used to distinguish mirrored traffic of different
        sessions. The value range is **0-16777215**, defaults to **1**.
        """
        return pulumi.get(self, "virtual_network_id")


@pulumi.output_type
class GetV1RouteResult(dict):
    def __init__(__self__, *,
                 destination: _builtins.str,
                 nexthop: _builtins.str):
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "nexthop", nexthop)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def nexthop(self) -> _builtins.str:
        return pulumi.get(self, "nexthop")


@pulumi.output_type
class GetVpcRouteResult(dict):
    def __init__(__self__, *,
                 destination: _builtins.str,
                 nexthop: _builtins.str):
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "nexthop", nexthop)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def nexthop(self) -> _builtins.str:
        return pulumi.get(self, "nexthop")


@pulumi.output_type
class GetVpcsVpcResult(dict):
    def __init__(__self__, *,
                 cidr: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 secondary_cidrs: Sequence[_builtins.str],
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str]):
        """
        :param _builtins.str cidr: Specifies the cidr block of the desired VPC.
        :param _builtins.str description: The description of the VPC.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID which the desired VPC belongs to.
        :param _builtins.str id: Specifies the id of the desired VPC.
        :param _builtins.str name: Specifies the name of the desired VPC. The value is a string of no more than 64 characters
               and can contain digits, letters, underscores (_) and hyphens (-).
        :param Sequence[_builtins.str] secondary_cidrs: The secondary CIDR blocks of the VPC.
        :param _builtins.str status: Specifies the current status of the desired VPC. The value can be CREATING, OK or ERROR.
        :param Mapping[str, _builtins.str] tags: Specifies the included key/value pairs which associated with the desired VPC.
               
               > A maximum of 10 tag keys are allowed for each query operation. Each tag key can have up to 10 tag values.
               The tag key cannot be left blank or set to an empty string. Each tag key must be unique, and each tag value in a
               tag must be unique, use commas(,) to separate the multiple values. An empty for values indicates any value.
               The values are in the OR relationship.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secondary_cidrs", secondary_cidrs)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        Specifies the cidr block of the desired VPC.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the VPC.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID which the desired VPC belongs to.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the id of the desired VPC.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the desired VPC. The value is a string of no more than 64 characters
        and can contain digits, letters, underscores (_) and hyphens (-).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="secondaryCidrs")
    def secondary_cidrs(self) -> Sequence[_builtins.str]:
        """
        The secondary CIDR blocks of the VPC.
        """
        return pulumi.get(self, "secondary_cidrs")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the current status of the desired VPC. The value can be CREATING, OK or ERROR.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the included key/value pairs which associated with the desired VPC.

        > A maximum of 10 tag keys are allowed for each query operation. Each tag key can have up to 10 tag values.
        The tag key cannot be left blank or set to an empty string. Each tag key must be unique, and each tag value in a
        tag must be unique, use commas(,) to separate the multiple values. An empty for values indicates any value.
        The values are in the OR relationship.
        """
        return pulumi.get(self, "tags")


