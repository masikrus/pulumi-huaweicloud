# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNetworkAclsByTagsResult',
    'AwaitableGetNetworkAclsByTagsResult',
    'get_network_acls_by_tags',
    'get_network_acls_by_tags_output',
]

@pulumi.output_type
class GetNetworkAclsByTagsResult:
    """
    A collection of values returned by getNetworkAclsByTags.
    """
    def __init__(__self__, id=None, matches=None, region=None, resources=None, tags=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if matches and not isinstance(matches, list):
            raise TypeError("Expected argument 'matches' to be a list")
        pulumi.set(__self__, "matches", matches)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetNetworkAclsByTagsMatchResult']]:
        return pulumi.get(self, "matches")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetNetworkAclsByTagsResourceResult']:
        """
        The list of the network ACLs found. The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetNetworkAclsByTagsTagResult']]:
        """
        The tags which associated with the network ACL.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.int:
        """
        The total count of the network ACLs found.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetNetworkAclsByTagsResult(GetNetworkAclsByTagsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkAclsByTagsResult(
            id=self.id,
            matches=self.matches,
            region=self.region,
            resources=self.resources,
            tags=self.tags,
            total_count=self.total_count)


def get_network_acls_by_tags(matches: Optional[Sequence[Union['GetNetworkAclsByTagsMatchArgs', 'GetNetworkAclsByTagsMatchArgsDict']]] = None,
                             region: Optional[_builtins.str] = None,
                             tags: Optional[Sequence[Union['GetNetworkAclsByTagsTagArgs', 'GetNetworkAclsByTagsTagArgsDict']]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkAclsByTagsResult:
    """
    Use this data source to get a list of network ACLs by tags.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Vpc.get_network_acls_by_tags(tags=[
        {
            "key": "foo",
            "values": ["bar"],
        },
        {
            "key": "key",
            "values": [
                "value_1",
                "value_2",
            ],
        },
    ])
    ```


    :param Sequence[Union['GetNetworkAclsByTagsMatchArgs', 'GetNetworkAclsByTagsMatchArgsDict']] matches: Specifies the matches to filter to resources.
           The matches structure is documented below.
           
           <a name="tags"></a>
           The `tags` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[Union['GetNetworkAclsByTagsTagArgs', 'GetNetworkAclsByTagsTagArgsDict']] tags: Specifies the tags to filter to resources.
           The tags structure is documented below.
    """
    __args__ = dict()
    __args__['matches'] = matches
    __args__['region'] = region
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getNetworkAclsByTags:getNetworkAclsByTags', __args__, opts=opts, typ=GetNetworkAclsByTagsResult).value

    return AwaitableGetNetworkAclsByTagsResult(
        id=pulumi.get(__ret__, 'id'),
        matches=pulumi.get(__ret__, 'matches'),
        region=pulumi.get(__ret__, 'region'),
        resources=pulumi.get(__ret__, 'resources'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'))
def get_network_acls_by_tags_output(matches: Optional[pulumi.Input[Optional[Sequence[Union['GetNetworkAclsByTagsMatchArgs', 'GetNetworkAclsByTagsMatchArgsDict']]]]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    tags: Optional[pulumi.Input[Optional[Sequence[Union['GetNetworkAclsByTagsTagArgs', 'GetNetworkAclsByTagsTagArgsDict']]]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkAclsByTagsResult]:
    """
    Use this data source to get a list of network ACLs by tags.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Vpc.get_network_acls_by_tags(tags=[
        {
            "key": "foo",
            "values": ["bar"],
        },
        {
            "key": "key",
            "values": [
                "value_1",
                "value_2",
            ],
        },
    ])
    ```


    :param Sequence[Union['GetNetworkAclsByTagsMatchArgs', 'GetNetworkAclsByTagsMatchArgsDict']] matches: Specifies the matches to filter to resources.
           The matches structure is documented below.
           
           <a name="tags"></a>
           The `tags` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[Union['GetNetworkAclsByTagsTagArgs', 'GetNetworkAclsByTagsTagArgsDict']] tags: Specifies the tags to filter to resources.
           The tags structure is documented below.
    """
    __args__ = dict()
    __args__['matches'] = matches
    __args__['region'] = region
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpc/getNetworkAclsByTags:getNetworkAclsByTags', __args__, opts=opts, typ=GetNetworkAclsByTagsResult)
    return __ret__.apply(lambda __response__: GetNetworkAclsByTagsResult(
        id=pulumi.get(__response__, 'id'),
        matches=pulumi.get(__response__, 'matches'),
        region=pulumi.get(__response__, 'region'),
        resources=pulumi.get(__response__, 'resources'),
        tags=pulumi.get(__response__, 'tags'),
        total_count=pulumi.get(__response__, 'total_count')))
