# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PortV2Args', 'PortV2']

@pulumi.input_type
class PortV2Args:
    def __init__(__self__, *,
                 network_id: pulumi.Input[_builtins.str],
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 allowed_address_pairs: Optional[pulumi.Input[Sequence[pulumi.Input['PortV2AllowedAddressPairArgs']]]] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 device_owner: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_dhcp_options: Optional[pulumi.Input[Sequence[pulumi.Input['PortV2ExtraDhcpOptionArgs']]]] = None,
                 fixed_ips: Optional[pulumi.Input[Sequence[pulumi.Input['PortV2FixedIpArgs']]]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_security_groups: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a PortV2 resource.
        :param pulumi.Input[_builtins.str] network_id: The ID of the network to attach the port to. Changing this creates a new
               port.
        :param pulumi.Input[Sequence[pulumi.Input['PortV2AllowedAddressPairArgs']]] allowed_address_pairs: An IP/MAC Address pair of additional IP addresses that can be active on
               this port. The structure is described below.
        :param pulumi.Input[_builtins.str] device_id: The ID of the device attached to the port. Changing this creates a new
               port.
        :param pulumi.Input[_builtins.str] device_owner: The device owner of the Port. Changing this creates a new port.
        :param pulumi.Input[Sequence[pulumi.Input['PortV2ExtraDhcpOptionArgs']]] extra_dhcp_options: An extra DHCP option that needs to be configured on the port. The structure is
               described below. Can be specified multiple times.
        :param pulumi.Input[Sequence[pulumi.Input['PortV2FixedIpArgs']]] fixed_ips: An array of desired IPs for this port. The structure is described below.
        :param pulumi.Input[_builtins.str] mac_address: Specify a specific MAC address for the port. Changing this creates a new
               port.
        :param pulumi.Input[_builtins.str] name: A unique name for the port. Changing this updates the `name` of an existing port.
        :param pulumi.Input[_builtins.bool] no_security_groups: Conflicts with `security_group_ids`. If set to
               `true`, then no security groups are applied to the port. If set to `false` and no `security_group_ids` are specified,
               then the Port will yield to the default behavior of the Networking service, which is to usually apply the "default"
               security group.
        :param pulumi.Input[_builtins.str] region: The region in which to create the networking port resource. If omitted, the
               provider-level region will be used. Changing this creates a new port resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_ids: Conflicts with `no_security_groups`. A list of security group IDs to apply to
               the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the
               Compute Instance).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        pulumi.set(__self__, "network_id", network_id)
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if allowed_address_pairs is not None:
            pulumi.set(__self__, "allowed_address_pairs", allowed_address_pairs)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if device_owner is not None:
            pulumi.set(__self__, "device_owner", device_owner)
        if extra_dhcp_options is not None:
            pulumi.set(__self__, "extra_dhcp_options", extra_dhcp_options)
        if fixed_ips is not None:
            pulumi.set(__self__, "fixed_ips", fixed_ips)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if no_security_groups is not None:
            pulumi.set(__self__, "no_security_groups", no_security_groups)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the network to attach the port to. Changing this creates a new
        port.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "admin_state_up", value)

    @_builtins.property
    @pulumi.getter(name="allowedAddressPairs")
    def allowed_address_pairs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortV2AllowedAddressPairArgs']]]]:
        """
        An IP/MAC Address pair of additional IP addresses that can be active on
        this port. The structure is described below.
        """
        return pulumi.get(self, "allowed_address_pairs")

    @allowed_address_pairs.setter
    def allowed_address_pairs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortV2AllowedAddressPairArgs']]]]):
        pulumi.set(self, "allowed_address_pairs", value)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the device attached to the port. Changing this creates a new
        port.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter(name="deviceOwner")
    def device_owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The device owner of the Port. Changing this creates a new port.
        """
        return pulumi.get(self, "device_owner")

    @device_owner.setter
    def device_owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device_owner", value)

    @_builtins.property
    @pulumi.getter(name="extraDhcpOptions")
    def extra_dhcp_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortV2ExtraDhcpOptionArgs']]]]:
        """
        An extra DHCP option that needs to be configured on the port. The structure is
        described below. Can be specified multiple times.
        """
        return pulumi.get(self, "extra_dhcp_options")

    @extra_dhcp_options.setter
    def extra_dhcp_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortV2ExtraDhcpOptionArgs']]]]):
        pulumi.set(self, "extra_dhcp_options", value)

    @_builtins.property
    @pulumi.getter(name="fixedIps")
    def fixed_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortV2FixedIpArgs']]]]:
        """
        An array of desired IPs for this port. The structure is described below.
        """
        return pulumi.get(self, "fixed_ips")

    @fixed_ips.setter
    def fixed_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortV2FixedIpArgs']]]]):
        pulumi.set(self, "fixed_ips", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify a specific MAC address for the port. Changing this creates a new
        port.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A unique name for the port. Changing this updates the `name` of an existing port.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="noSecurityGroups")
    def no_security_groups(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Conflicts with `security_group_ids`. If set to
        `true`, then no security groups are applied to the port. If set to `false` and no `security_group_ids` are specified,
        then the Port will yield to the default behavior of the Networking service, which is to usually apply the "default"
        security group.
        """
        return pulumi.get(self, "no_security_groups")

    @no_security_groups.setter
    def no_security_groups(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_security_groups", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the networking port resource. If omitted, the
        provider-level region will be used. Changing this creates a new port resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Conflicts with `no_security_groups`. A list of security group IDs to apply to
        the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the
        Compute Instance).
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.input_type
class _PortV2State:
    def __init__(__self__, *,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 all_fixed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 all_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_address_pairs: Optional[pulumi.Input[Sequence[pulumi.Input['PortV2AllowedAddressPairArgs']]]] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 device_owner: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_dhcp_options: Optional[pulumi.Input[Sequence[pulumi.Input['PortV2ExtraDhcpOptionArgs']]]] = None,
                 fixed_ips: Optional[pulumi.Input[Sequence[pulumi.Input['PortV2FixedIpArgs']]]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 no_security_groups: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering PortV2 resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] all_fixed_ips: The collection of Fixed IP addresses on the port in the order returned by the Network v2 API.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] all_security_group_ids: The collection of Security Group IDs on the port which have been explicitly and implicitly
               added.
        :param pulumi.Input[Sequence[pulumi.Input['PortV2AllowedAddressPairArgs']]] allowed_address_pairs: An IP/MAC Address pair of additional IP addresses that can be active on
               this port. The structure is described below.
        :param pulumi.Input[_builtins.str] device_id: The ID of the device attached to the port. Changing this creates a new
               port.
        :param pulumi.Input[_builtins.str] device_owner: The device owner of the Port. Changing this creates a new port.
        :param pulumi.Input[Sequence[pulumi.Input['PortV2ExtraDhcpOptionArgs']]] extra_dhcp_options: An extra DHCP option that needs to be configured on the port. The structure is
               described below. Can be specified multiple times.
        :param pulumi.Input[Sequence[pulumi.Input['PortV2FixedIpArgs']]] fixed_ips: An array of desired IPs for this port. The structure is described below.
        :param pulumi.Input[_builtins.str] mac_address: Specify a specific MAC address for the port. Changing this creates a new
               port.
        :param pulumi.Input[_builtins.str] name: A unique name for the port. Changing this updates the `name` of an existing port.
        :param pulumi.Input[_builtins.str] network_id: The ID of the network to attach the port to. Changing this creates a new
               port.
        :param pulumi.Input[_builtins.bool] no_security_groups: Conflicts with `security_group_ids`. If set to
               `true`, then no security groups are applied to the port. If set to `false` and no `security_group_ids` are specified,
               then the Port will yield to the default behavior of the Networking service, which is to usually apply the "default"
               security group.
        :param pulumi.Input[_builtins.str] region: The region in which to create the networking port resource. If omitted, the
               provider-level region will be used. Changing this creates a new port resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_ids: Conflicts with `no_security_groups`. A list of security group IDs to apply to
               the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the
               Compute Instance).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if all_fixed_ips is not None:
            pulumi.set(__self__, "all_fixed_ips", all_fixed_ips)
        if all_security_group_ids is not None:
            pulumi.set(__self__, "all_security_group_ids", all_security_group_ids)
        if allowed_address_pairs is not None:
            pulumi.set(__self__, "allowed_address_pairs", allowed_address_pairs)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if device_owner is not None:
            pulumi.set(__self__, "device_owner", device_owner)
        if extra_dhcp_options is not None:
            pulumi.set(__self__, "extra_dhcp_options", extra_dhcp_options)
        if fixed_ips is not None:
            pulumi.set(__self__, "fixed_ips", fixed_ips)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if no_security_groups is not None:
            pulumi.set(__self__, "no_security_groups", no_security_groups)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "admin_state_up", value)

    @_builtins.property
    @pulumi.getter(name="allFixedIps")
    def all_fixed_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The collection of Fixed IP addresses on the port in the order returned by the Network v2 API.
        """
        return pulumi.get(self, "all_fixed_ips")

    @all_fixed_ips.setter
    def all_fixed_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "all_fixed_ips", value)

    @_builtins.property
    @pulumi.getter(name="allSecurityGroupIds")
    def all_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The collection of Security Group IDs on the port which have been explicitly and implicitly
        added.
        """
        return pulumi.get(self, "all_security_group_ids")

    @all_security_group_ids.setter
    def all_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "all_security_group_ids", value)

    @_builtins.property
    @pulumi.getter(name="allowedAddressPairs")
    def allowed_address_pairs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortV2AllowedAddressPairArgs']]]]:
        """
        An IP/MAC Address pair of additional IP addresses that can be active on
        this port. The structure is described below.
        """
        return pulumi.get(self, "allowed_address_pairs")

    @allowed_address_pairs.setter
    def allowed_address_pairs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortV2AllowedAddressPairArgs']]]]):
        pulumi.set(self, "allowed_address_pairs", value)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the device attached to the port. Changing this creates a new
        port.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter(name="deviceOwner")
    def device_owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The device owner of the Port. Changing this creates a new port.
        """
        return pulumi.get(self, "device_owner")

    @device_owner.setter
    def device_owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device_owner", value)

    @_builtins.property
    @pulumi.getter(name="extraDhcpOptions")
    def extra_dhcp_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortV2ExtraDhcpOptionArgs']]]]:
        """
        An extra DHCP option that needs to be configured on the port. The structure is
        described below. Can be specified multiple times.
        """
        return pulumi.get(self, "extra_dhcp_options")

    @extra_dhcp_options.setter
    def extra_dhcp_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortV2ExtraDhcpOptionArgs']]]]):
        pulumi.set(self, "extra_dhcp_options", value)

    @_builtins.property
    @pulumi.getter(name="fixedIps")
    def fixed_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortV2FixedIpArgs']]]]:
        """
        An array of desired IPs for this port. The structure is described below.
        """
        return pulumi.get(self, "fixed_ips")

    @fixed_ips.setter
    def fixed_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortV2FixedIpArgs']]]]):
        pulumi.set(self, "fixed_ips", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify a specific MAC address for the port. Changing this creates a new
        port.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A unique name for the port. Changing this updates the `name` of an existing port.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the network to attach the port to. Changing this creates a new
        port.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter(name="noSecurityGroups")
    def no_security_groups(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Conflicts with `security_group_ids`. If set to
        `true`, then no security groups are applied to the port. If set to `false` and no `security_group_ids` are specified,
        then the Port will yield to the default behavior of the Networking service, which is to usually apply the "default"
        security group.
        """
        return pulumi.get(self, "no_security_groups")

    @no_security_groups.setter
    def no_security_groups(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_security_groups", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the networking port resource. If omitted, the
        provider-level region will be used. Changing this creates a new port resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Conflicts with `no_security_groups`. A list of security group IDs to apply to
        the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the
        Compute Instance).
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.type_token("huaweicloud:Vpc/portV2:PortV2")
class PortV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 allowed_address_pairs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortV2AllowedAddressPairArgs', 'PortV2AllowedAddressPairArgsDict']]]]] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 device_owner: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_dhcp_options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortV2ExtraDhcpOptionArgs', 'PortV2ExtraDhcpOptionArgsDict']]]]] = None,
                 fixed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortV2FixedIpArgs', 'PortV2FixedIpArgsDict']]]]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 no_security_groups: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a Port resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        mynet = huaweicloud.Vpc.get_subnet(name="subnet-default")
        myport = huaweicloud.vpc.Port("myport",
            name="port",
            network_id=mynet.id,
            admin_state_up=True)
        ```

        ## Import

        Ports can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/portV2:PortV2 port_1 eae26a3e-1c33-4cc1-9c31-0cd729c438a1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PortV2AllowedAddressPairArgs', 'PortV2AllowedAddressPairArgsDict']]]] allowed_address_pairs: An IP/MAC Address pair of additional IP addresses that can be active on
               this port. The structure is described below.
        :param pulumi.Input[_builtins.str] device_id: The ID of the device attached to the port. Changing this creates a new
               port.
        :param pulumi.Input[_builtins.str] device_owner: The device owner of the Port. Changing this creates a new port.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PortV2ExtraDhcpOptionArgs', 'PortV2ExtraDhcpOptionArgsDict']]]] extra_dhcp_options: An extra DHCP option that needs to be configured on the port. The structure is
               described below. Can be specified multiple times.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PortV2FixedIpArgs', 'PortV2FixedIpArgsDict']]]] fixed_ips: An array of desired IPs for this port. The structure is described below.
        :param pulumi.Input[_builtins.str] mac_address: Specify a specific MAC address for the port. Changing this creates a new
               port.
        :param pulumi.Input[_builtins.str] name: A unique name for the port. Changing this updates the `name` of an existing port.
        :param pulumi.Input[_builtins.str] network_id: The ID of the network to attach the port to. Changing this creates a new
               port.
        :param pulumi.Input[_builtins.bool] no_security_groups: Conflicts with `security_group_ids`. If set to
               `true`, then no security groups are applied to the port. If set to `false` and no `security_group_ids` are specified,
               then the Port will yield to the default behavior of the Networking service, which is to usually apply the "default"
               security group.
        :param pulumi.Input[_builtins.str] region: The region in which to create the networking port resource. If omitted, the
               provider-level region will be used. Changing this creates a new port resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_ids: Conflicts with `no_security_groups`. A list of security group IDs to apply to
               the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the
               Compute Instance).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PortV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Port resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        mynet = huaweicloud.Vpc.get_subnet(name="subnet-default")
        myport = huaweicloud.vpc.Port("myport",
            name="port",
            network_id=mynet.id,
            admin_state_up=True)
        ```

        ## Import

        Ports can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/portV2:PortV2 port_1 eae26a3e-1c33-4cc1-9c31-0cd729c438a1
        ```

        :param str resource_name: The name of the resource.
        :param PortV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PortV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 allowed_address_pairs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortV2AllowedAddressPairArgs', 'PortV2AllowedAddressPairArgsDict']]]]] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 device_owner: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_dhcp_options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortV2ExtraDhcpOptionArgs', 'PortV2ExtraDhcpOptionArgsDict']]]]] = None,
                 fixed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortV2FixedIpArgs', 'PortV2FixedIpArgsDict']]]]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 no_security_groups: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PortV2Args.__new__(PortV2Args)

            __props__.__dict__["admin_state_up"] = admin_state_up
            __props__.__dict__["allowed_address_pairs"] = allowed_address_pairs
            __props__.__dict__["device_id"] = device_id
            __props__.__dict__["device_owner"] = device_owner
            __props__.__dict__["extra_dhcp_options"] = extra_dhcp_options
            __props__.__dict__["fixed_ips"] = fixed_ips
            __props__.__dict__["mac_address"] = mac_address
            __props__.__dict__["name"] = name
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["no_security_groups"] = no_security_groups
            __props__.__dict__["region"] = region
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["value_specs"] = value_specs
            __props__.__dict__["all_fixed_ips"] = None
            __props__.__dict__["all_security_group_ids"] = None
        super(PortV2, __self__).__init__(
            'huaweicloud:Vpc/portV2:PortV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
            all_fixed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            all_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            allowed_address_pairs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortV2AllowedAddressPairArgs', 'PortV2AllowedAddressPairArgsDict']]]]] = None,
            device_id: Optional[pulumi.Input[_builtins.str]] = None,
            device_owner: Optional[pulumi.Input[_builtins.str]] = None,
            extra_dhcp_options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortV2ExtraDhcpOptionArgs', 'PortV2ExtraDhcpOptionArgsDict']]]]] = None,
            fixed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortV2FixedIpArgs', 'PortV2FixedIpArgsDict']]]]] = None,
            mac_address: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_id: Optional[pulumi.Input[_builtins.str]] = None,
            no_security_groups: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'PortV2':
        """
        Get an existing PortV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] all_fixed_ips: The collection of Fixed IP addresses on the port in the order returned by the Network v2 API.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] all_security_group_ids: The collection of Security Group IDs on the port which have been explicitly and implicitly
               added.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PortV2AllowedAddressPairArgs', 'PortV2AllowedAddressPairArgsDict']]]] allowed_address_pairs: An IP/MAC Address pair of additional IP addresses that can be active on
               this port. The structure is described below.
        :param pulumi.Input[_builtins.str] device_id: The ID of the device attached to the port. Changing this creates a new
               port.
        :param pulumi.Input[_builtins.str] device_owner: The device owner of the Port. Changing this creates a new port.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PortV2ExtraDhcpOptionArgs', 'PortV2ExtraDhcpOptionArgsDict']]]] extra_dhcp_options: An extra DHCP option that needs to be configured on the port. The structure is
               described below. Can be specified multiple times.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PortV2FixedIpArgs', 'PortV2FixedIpArgsDict']]]] fixed_ips: An array of desired IPs for this port. The structure is described below.
        :param pulumi.Input[_builtins.str] mac_address: Specify a specific MAC address for the port. Changing this creates a new
               port.
        :param pulumi.Input[_builtins.str] name: A unique name for the port. Changing this updates the `name` of an existing port.
        :param pulumi.Input[_builtins.str] network_id: The ID of the network to attach the port to. Changing this creates a new
               port.
        :param pulumi.Input[_builtins.bool] no_security_groups: Conflicts with `security_group_ids`. If set to
               `true`, then no security groups are applied to the port. If set to `false` and no `security_group_ids` are specified,
               then the Port will yield to the default behavior of the Networking service, which is to usually apply the "default"
               security group.
        :param pulumi.Input[_builtins.str] region: The region in which to create the networking port resource. If omitted, the
               provider-level region will be used. Changing this creates a new port resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_ids: Conflicts with `no_security_groups`. A list of security group IDs to apply to
               the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the
               Compute Instance).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PortV2State.__new__(_PortV2State)

        __props__.__dict__["admin_state_up"] = admin_state_up
        __props__.__dict__["all_fixed_ips"] = all_fixed_ips
        __props__.__dict__["all_security_group_ids"] = all_security_group_ids
        __props__.__dict__["allowed_address_pairs"] = allowed_address_pairs
        __props__.__dict__["device_id"] = device_id
        __props__.__dict__["device_owner"] = device_owner
        __props__.__dict__["extra_dhcp_options"] = extra_dhcp_options
        __props__.__dict__["fixed_ips"] = fixed_ips
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["name"] = name
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["no_security_groups"] = no_security_groups
        __props__.__dict__["region"] = region
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["value_specs"] = value_specs
        return PortV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "admin_state_up")

    @_builtins.property
    @pulumi.getter(name="allFixedIps")
    def all_fixed_ips(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The collection of Fixed IP addresses on the port in the order returned by the Network v2 API.
        """
        return pulumi.get(self, "all_fixed_ips")

    @_builtins.property
    @pulumi.getter(name="allSecurityGroupIds")
    def all_security_group_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The collection of Security Group IDs on the port which have been explicitly and implicitly
        added.
        """
        return pulumi.get(self, "all_security_group_ids")

    @_builtins.property
    @pulumi.getter(name="allowedAddressPairs")
    def allowed_address_pairs(self) -> pulumi.Output[Sequence['outputs.PortV2AllowedAddressPair']]:
        """
        An IP/MAC Address pair of additional IP addresses that can be active on
        this port. The structure is described below.
        """
        return pulumi.get(self, "allowed_address_pairs")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the device attached to the port. Changing this creates a new
        port.
        """
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter(name="deviceOwner")
    def device_owner(self) -> pulumi.Output[_builtins.str]:
        """
        The device owner of the Port. Changing this creates a new port.
        """
        return pulumi.get(self, "device_owner")

    @_builtins.property
    @pulumi.getter(name="extraDhcpOptions")
    def extra_dhcp_options(self) -> pulumi.Output[Optional[Sequence['outputs.PortV2ExtraDhcpOption']]]:
        """
        An extra DHCP option that needs to be configured on the port. The structure is
        described below. Can be specified multiple times.
        """
        return pulumi.get(self, "extra_dhcp_options")

    @_builtins.property
    @pulumi.getter(name="fixedIps")
    def fixed_ips(self) -> pulumi.Output[Optional[Sequence['outputs.PortV2FixedIp']]]:
        """
        An array of desired IPs for this port. The structure is described below.
        """
        return pulumi.get(self, "fixed_ips")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[_builtins.str]:
        """
        Specify a specific MAC address for the port. Changing this creates a new
        port.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A unique name for the port. Changing this updates the `name` of an existing port.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the network to attach the port to. Changing this creates a new
        port.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="noSecurityGroups")
    def no_security_groups(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Conflicts with `security_group_ids`. If set to
        `true`, then no security groups are applied to the port. If set to `false` and no `security_group_ids` are specified,
        then the Port will yield to the default behavior of the Networking service, which is to usually apply the "default"
        security group.
        """
        return pulumi.get(self, "no_security_groups")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the networking port resource. If omitted, the
        provider-level region will be used. Changing this creates a new port resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Conflicts with `no_security_groups`. A list of security group IDs to apply to
        the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the
        Compute Instance).
        """
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

