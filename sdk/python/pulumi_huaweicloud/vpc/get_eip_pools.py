# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEipPoolsResult',
    'AwaitableGetEipPoolsResult',
    'get_eip_pools',
    'get_eip_pools_output',
]

@pulumi.output_type
class GetEipPoolsResult:
    """
    A collection of values returned by getEipPools.
    """
    def __init__(__self__, description=None, id=None, name=None, pools=None, public_border_group=None, region=None, size=None, status=None, type=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pools and not isinstance(pools, list):
            raise TypeError("Expected argument 'pools' to be a list")
        pulumi.set(__self__, "pools", pools)
        if public_border_group and not isinstance(public_border_group, str):
            raise TypeError("Expected argument 'public_border_group' to be a str")
        pulumi.set(__self__, "public_border_group", public_border_group)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Indicates the description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the pool name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def pools(self) -> Sequence['outputs.GetEipPoolsPoolResult']:
        """
        Indicates the public network pools.
        """
        return pulumi.get(self, "pools")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> Optional[_builtins.str]:
        """
        Indicates the pool at the central site or edge site.
        """
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        """
        Indicates the pool size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the pool status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the pool type.
        """
        return pulumi.get(self, "type")


class AwaitableGetEipPoolsResult(GetEipPoolsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEipPoolsResult(
            description=self.description,
            id=self.id,
            name=self.name,
            pools=self.pools,
            public_border_group=self.public_border_group,
            region=self.region,
            size=self.size,
            status=self.status,
            type=self.type)


def get_eip_pools(description: Optional[_builtins.str] = None,
                  name: Optional[_builtins.str] = None,
                  public_border_group: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  size: Optional[_builtins.int] = None,
                  status: Optional[_builtins.str] = None,
                  type: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEipPoolsResult:
    """
    Use this data source to get a list of EIP pools.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Vpc.get_eip_pools()
    ```


    :param _builtins.str description: Specifies the pool description.
    :param _builtins.str name: Specifies the pool name.
    :param _builtins.str public_border_group: Specifies whether the pool is at the center or at the edge.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.int size: Specifies the pool size.
    :param _builtins.str status: Specifies the pool status.
    :param _builtins.str type: Specifies the pool type.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['name'] = name
    __args__['publicBorderGroup'] = public_border_group
    __args__['region'] = region
    __args__['size'] = size
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getEipPools:getEipPools', __args__, opts=opts, typ=GetEipPoolsResult).value

    return AwaitableGetEipPoolsResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        pools=pulumi.get(__ret__, 'pools'),
        public_border_group=pulumi.get(__ret__, 'public_border_group'),
        region=pulumi.get(__ret__, 'region'),
        size=pulumi.get(__ret__, 'size'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_eip_pools_output(description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         public_border_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         size: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                         status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEipPoolsResult]:
    """
    Use this data source to get a list of EIP pools.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Vpc.get_eip_pools()
    ```


    :param _builtins.str description: Specifies the pool description.
    :param _builtins.str name: Specifies the pool name.
    :param _builtins.str public_border_group: Specifies whether the pool is at the center or at the edge.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.int size: Specifies the pool size.
    :param _builtins.str status: Specifies the pool status.
    :param _builtins.str type: Specifies the pool type.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['name'] = name
    __args__['publicBorderGroup'] = public_border_group
    __args__['region'] = region
    __args__['size'] = size
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpc/getEipPools:getEipPools', __args__, opts=opts, typ=GetEipPoolsResult)
    return __ret__.apply(lambda __response__: GetEipPoolsResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        pools=pulumi.get(__response__, 'pools'),
        public_border_group=pulumi.get(__response__, 'public_border_group'),
        region=pulumi.get(__response__, 'region'),
        size=pulumi.get(__response__, 'size'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
