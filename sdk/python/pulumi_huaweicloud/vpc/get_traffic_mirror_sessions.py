# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTrafficMirrorSessionsResult',
    'AwaitableGetTrafficMirrorSessionsResult',
    'get_traffic_mirror_sessions',
    'get_traffic_mirror_sessions_output',
]

@pulumi.output_type
class GetTrafficMirrorSessionsResult:
    """
    A collection of values returned by getTrafficMirrorSessions.
    """
    def __init__(__self__, enabled=None, id=None, name=None, packet_length=None, priority=None, region=None, traffic_mirror_filter_id=None, traffic_mirror_session_id=None, traffic_mirror_sessions=None, traffic_mirror_target_id=None, traffic_mirror_target_type=None, type=None, virtual_network_id=None):
        if enabled and not isinstance(enabled, str):
            raise TypeError("Expected argument 'enabled' to be a str")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if packet_length and not isinstance(packet_length, str):
            raise TypeError("Expected argument 'packet_length' to be a str")
        pulumi.set(__self__, "packet_length", packet_length)
        if priority and not isinstance(priority, str):
            raise TypeError("Expected argument 'priority' to be a str")
        pulumi.set(__self__, "priority", priority)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if traffic_mirror_filter_id and not isinstance(traffic_mirror_filter_id, str):
            raise TypeError("Expected argument 'traffic_mirror_filter_id' to be a str")
        pulumi.set(__self__, "traffic_mirror_filter_id", traffic_mirror_filter_id)
        if traffic_mirror_session_id and not isinstance(traffic_mirror_session_id, str):
            raise TypeError("Expected argument 'traffic_mirror_session_id' to be a str")
        pulumi.set(__self__, "traffic_mirror_session_id", traffic_mirror_session_id)
        if traffic_mirror_sessions and not isinstance(traffic_mirror_sessions, list):
            raise TypeError("Expected argument 'traffic_mirror_sessions' to be a list")
        pulumi.set(__self__, "traffic_mirror_sessions", traffic_mirror_sessions)
        if traffic_mirror_target_id and not isinstance(traffic_mirror_target_id, str):
            raise TypeError("Expected argument 'traffic_mirror_target_id' to be a str")
        pulumi.set(__self__, "traffic_mirror_target_id", traffic_mirror_target_id)
        if traffic_mirror_target_type and not isinstance(traffic_mirror_target_type, str):
            raise TypeError("Expected argument 'traffic_mirror_target_type' to be a str")
        pulumi.set(__self__, "traffic_mirror_target_type", traffic_mirror_target_type)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if virtual_network_id and not isinstance(virtual_network_id, str):
            raise TypeError("Expected argument 'virtual_network_id' to be a str")
        pulumi.set(__self__, "virtual_network_id", virtual_network_id)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.str]:
        """
        Whether to enable a mirror session.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Traffic mirror session name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[_builtins.str]:
        """
        Maximum transmission unit (MTU).
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.str]:
        """
        Mirror session priority.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> Optional[_builtins.str]:
        """
        Traffic mirror filter ID.
        """
        return pulumi.get(self, "traffic_mirror_filter_id")

    @_builtins.property
    @pulumi.getter(name="trafficMirrorSessionId")
    def traffic_mirror_session_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "traffic_mirror_session_id")

    @_builtins.property
    @pulumi.getter(name="trafficMirrorSessions")
    def traffic_mirror_sessions(self) -> Sequence['outputs.GetTrafficMirrorSessionsTrafficMirrorSessionResult']:
        """
        List of traffic mirror sessions.
        """
        return pulumi.get(self, "traffic_mirror_sessions")

    @_builtins.property
    @pulumi.getter(name="trafficMirrorTargetId")
    def traffic_mirror_target_id(self) -> Optional[_builtins.str]:
        """
        Mirror target ID.
        """
        return pulumi.get(self, "traffic_mirror_target_id")

    @_builtins.property
    @pulumi.getter(name="trafficMirrorTargetType")
    def traffic_mirror_target_type(self) -> Optional[_builtins.str]:
        """
        Mirror target type.
        """
        return pulumi.get(self, "traffic_mirror_target_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Supported mirror source type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkId")
    def virtual_network_id(self) -> Optional[_builtins.str]:
        """
        VNI, which is used to distinguish mirrored traffic of different sessions.
        """
        return pulumi.get(self, "virtual_network_id")


class AwaitableGetTrafficMirrorSessionsResult(GetTrafficMirrorSessionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrafficMirrorSessionsResult(
            enabled=self.enabled,
            id=self.id,
            name=self.name,
            packet_length=self.packet_length,
            priority=self.priority,
            region=self.region,
            traffic_mirror_filter_id=self.traffic_mirror_filter_id,
            traffic_mirror_session_id=self.traffic_mirror_session_id,
            traffic_mirror_sessions=self.traffic_mirror_sessions,
            traffic_mirror_target_id=self.traffic_mirror_target_id,
            traffic_mirror_target_type=self.traffic_mirror_target_type,
            type=self.type,
            virtual_network_id=self.virtual_network_id)


def get_traffic_mirror_sessions(enabled: Optional[_builtins.str] = None,
                                name: Optional[_builtins.str] = None,
                                packet_length: Optional[_builtins.str] = None,
                                priority: Optional[_builtins.str] = None,
                                region: Optional[_builtins.str] = None,
                                traffic_mirror_filter_id: Optional[_builtins.str] = None,
                                traffic_mirror_session_id: Optional[_builtins.str] = None,
                                traffic_mirror_target_id: Optional[_builtins.str] = None,
                                traffic_mirror_target_type: Optional[_builtins.str] = None,
                                type: Optional[_builtins.str] = None,
                                virtual_network_id: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrafficMirrorSessionsResult:
    """
    Use this data source to get the traffic mirror sessions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test1 = huaweicloud.Vpc.get_traffic_mirror_sessions(name="mirror-session-a6b5")
    ```


    :param _builtins.str enabled: Specifies whether the mirror session is enabled. Defaults to **true**.
    :param _builtins.str name: Specifies the traffic mirror session name used to query.
    :param _builtins.str packet_length: Specifies the maximum transmission unit (MTU).
           The value range is **1-1460**, defaults to **96**.
    :param _builtins.str priority: Specifies the mirror session priority. The value range is **1-32766**.
           A smaller value indicates a higher priority.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str traffic_mirror_filter_id: Specifies the traffic mirror filter ID used in the session.
    :param _builtins.str traffic_mirror_session_id: Specifies the traffic mirror session ID used to query.
    :param _builtins.str traffic_mirror_target_id: Specifies the traffic mirror target ID.
    :param _builtins.str traffic_mirror_target_type: Specifies the mirror target type. The value can be:
           + **eni**: elastic network interface;
           + **elb**: private network load balancer;
    :param _builtins.str type: Specifies the mirror source type. The value can be **eni**(elastic network interface).
    :param _builtins.str virtual_network_id: Specifies the VNI, which is used to distinguish mirrored traffic of different
           sessions. The value range is **0-16777215**, defaults to **1**.
    """
    __args__ = dict()
    __args__['enabled'] = enabled
    __args__['name'] = name
    __args__['packetLength'] = packet_length
    __args__['priority'] = priority
    __args__['region'] = region
    __args__['trafficMirrorFilterId'] = traffic_mirror_filter_id
    __args__['trafficMirrorSessionId'] = traffic_mirror_session_id
    __args__['trafficMirrorTargetId'] = traffic_mirror_target_id
    __args__['trafficMirrorTargetType'] = traffic_mirror_target_type
    __args__['type'] = type
    __args__['virtualNetworkId'] = virtual_network_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getTrafficMirrorSessions:getTrafficMirrorSessions', __args__, opts=opts, typ=GetTrafficMirrorSessionsResult).value

    return AwaitableGetTrafficMirrorSessionsResult(
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        packet_length=pulumi.get(__ret__, 'packet_length'),
        priority=pulumi.get(__ret__, 'priority'),
        region=pulumi.get(__ret__, 'region'),
        traffic_mirror_filter_id=pulumi.get(__ret__, 'traffic_mirror_filter_id'),
        traffic_mirror_session_id=pulumi.get(__ret__, 'traffic_mirror_session_id'),
        traffic_mirror_sessions=pulumi.get(__ret__, 'traffic_mirror_sessions'),
        traffic_mirror_target_id=pulumi.get(__ret__, 'traffic_mirror_target_id'),
        traffic_mirror_target_type=pulumi.get(__ret__, 'traffic_mirror_target_type'),
        type=pulumi.get(__ret__, 'type'),
        virtual_network_id=pulumi.get(__ret__, 'virtual_network_id'))
def get_traffic_mirror_sessions_output(enabled: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       packet_length: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       priority: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       traffic_mirror_filter_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       traffic_mirror_session_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       traffic_mirror_target_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       traffic_mirror_target_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       virtual_network_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTrafficMirrorSessionsResult]:
    """
    Use this data source to get the traffic mirror sessions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test1 = huaweicloud.Vpc.get_traffic_mirror_sessions(name="mirror-session-a6b5")
    ```


    :param _builtins.str enabled: Specifies whether the mirror session is enabled. Defaults to **true**.
    :param _builtins.str name: Specifies the traffic mirror session name used to query.
    :param _builtins.str packet_length: Specifies the maximum transmission unit (MTU).
           The value range is **1-1460**, defaults to **96**.
    :param _builtins.str priority: Specifies the mirror session priority. The value range is **1-32766**.
           A smaller value indicates a higher priority.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str traffic_mirror_filter_id: Specifies the traffic mirror filter ID used in the session.
    :param _builtins.str traffic_mirror_session_id: Specifies the traffic mirror session ID used to query.
    :param _builtins.str traffic_mirror_target_id: Specifies the traffic mirror target ID.
    :param _builtins.str traffic_mirror_target_type: Specifies the mirror target type. The value can be:
           + **eni**: elastic network interface;
           + **elb**: private network load balancer;
    :param _builtins.str type: Specifies the mirror source type. The value can be **eni**(elastic network interface).
    :param _builtins.str virtual_network_id: Specifies the VNI, which is used to distinguish mirrored traffic of different
           sessions. The value range is **0-16777215**, defaults to **1**.
    """
    __args__ = dict()
    __args__['enabled'] = enabled
    __args__['name'] = name
    __args__['packetLength'] = packet_length
    __args__['priority'] = priority
    __args__['region'] = region
    __args__['trafficMirrorFilterId'] = traffic_mirror_filter_id
    __args__['trafficMirrorSessionId'] = traffic_mirror_session_id
    __args__['trafficMirrorTargetId'] = traffic_mirror_target_id
    __args__['trafficMirrorTargetType'] = traffic_mirror_target_type
    __args__['type'] = type
    __args__['virtualNetworkId'] = virtual_network_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpc/getTrafficMirrorSessions:getTrafficMirrorSessions', __args__, opts=opts, typ=GetTrafficMirrorSessionsResult)
    return __ret__.apply(lambda __response__: GetTrafficMirrorSessionsResult(
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        packet_length=pulumi.get(__response__, 'packet_length'),
        priority=pulumi.get(__response__, 'priority'),
        region=pulumi.get(__response__, 'region'),
        traffic_mirror_filter_id=pulumi.get(__response__, 'traffic_mirror_filter_id'),
        traffic_mirror_session_id=pulumi.get(__response__, 'traffic_mirror_session_id'),
        traffic_mirror_sessions=pulumi.get(__response__, 'traffic_mirror_sessions'),
        traffic_mirror_target_id=pulumi.get(__response__, 'traffic_mirror_target_id'),
        traffic_mirror_target_type=pulumi.get(__response__, 'traffic_mirror_target_type'),
        type=pulumi.get(__response__, 'type'),
        virtual_network_id=pulumi.get(__response__, 'virtual_network_id')))
