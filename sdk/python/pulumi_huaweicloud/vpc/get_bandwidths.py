# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBandwidthsResult',
    'AwaitableGetBandwidthsResult',
    'get_bandwidths',
    'get_bandwidths_output',
]

@pulumi.output_type
class GetBandwidthsResult:
    """
    A collection of values returned by getBandwidths.
    """
    def __init__(__self__, bandwidth_id=None, bandwidths=None, charge_mode=None, enterprise_project_id=None, id=None, name=None, region=None, size=None):
        if bandwidth_id and not isinstance(bandwidth_id, str):
            raise TypeError("Expected argument 'bandwidth_id' to be a str")
        pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidths and not isinstance(bandwidths, list):
            raise TypeError("Expected argument 'bandwidths' to be a list")
        pulumi.set(__self__, "bandwidths", bandwidths)
        if charge_mode and not isinstance(charge_mode, str):
            raise TypeError("Expected argument 'charge_mode' to be a str")
        pulumi.set(__self__, "charge_mode", charge_mode)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter
    def bandwidths(self) -> Sequence['outputs.GetBandwidthsBandwidthResult']:
        """
        The filtered bandwidths.
        The bandwidths structure is documented below.
        """
        return pulumi.get(self, "bandwidths")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        Indicates the charge mode of the bandwidth.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        Indicates the enterprise project id the bandwidth belongs to.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the bandwidth.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        """
        Indicates the size of the bandwidth.
        """
        return pulumi.get(self, "size")


class AwaitableGetBandwidthsResult(GetBandwidthsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBandwidthsResult(
            bandwidth_id=self.bandwidth_id,
            bandwidths=self.bandwidths,
            charge_mode=self.charge_mode,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            region=self.region,
            size=self.size)


def get_bandwidths(bandwidth_id: Optional[_builtins.str] = None,
                   charge_mode: Optional[_builtins.str] = None,
                   enterprise_project_id: Optional[_builtins.str] = None,
                   name: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   size: Optional[_builtins.int] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBandwidthsResult:
    """
    Use this data source to get a list of shared bandwidths.

    ## Example Usage

    ### Example Usage of getting all bandwidths

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    all = huaweicloud.Vpc.get_bandwidths()
    ```

    ### Example Usage to filter specific bandwidths

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    bandwidth_name = config.require_object("bandwidthName")
    filter_by_name = huaweicloud.Vpc.get_bandwidths(name=bandwidth_name)
    ```


    :param _builtins.str bandwidth_id: Specifies the ID of the bandwidth.
    :param _builtins.str charge_mode: Specifies the charge mode of the bandwidth.
           Possible values can be **bandwidth** and **95peak_plus**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str name: Specifies the name of the bandwidth.
    :param _builtins.str region: Specifies the region in which to obtain the bandwidths.
           If omitted, the provider-level region will be used.
    :param _builtins.int size: Specifies the size of the bandwidth.
    """
    __args__ = dict()
    __args__['bandwidthId'] = bandwidth_id
    __args__['chargeMode'] = charge_mode
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['size'] = size
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getBandwidths:getBandwidths', __args__, opts=opts, typ=GetBandwidthsResult).value

    return AwaitableGetBandwidthsResult(
        bandwidth_id=pulumi.get(__ret__, 'bandwidth_id'),
        bandwidths=pulumi.get(__ret__, 'bandwidths'),
        charge_mode=pulumi.get(__ret__, 'charge_mode'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        size=pulumi.get(__ret__, 'size'))
def get_bandwidths_output(bandwidth_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          charge_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          size: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBandwidthsResult]:
    """
    Use this data source to get a list of shared bandwidths.

    ## Example Usage

    ### Example Usage of getting all bandwidths

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    all = huaweicloud.Vpc.get_bandwidths()
    ```

    ### Example Usage to filter specific bandwidths

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    bandwidth_name = config.require_object("bandwidthName")
    filter_by_name = huaweicloud.Vpc.get_bandwidths(name=bandwidth_name)
    ```


    :param _builtins.str bandwidth_id: Specifies the ID of the bandwidth.
    :param _builtins.str charge_mode: Specifies the charge mode of the bandwidth.
           Possible values can be **bandwidth** and **95peak_plus**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str name: Specifies the name of the bandwidth.
    :param _builtins.str region: Specifies the region in which to obtain the bandwidths.
           If omitted, the provider-level region will be used.
    :param _builtins.int size: Specifies the size of the bandwidth.
    """
    __args__ = dict()
    __args__['bandwidthId'] = bandwidth_id
    __args__['chargeMode'] = charge_mode
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['size'] = size
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpc/getBandwidths:getBandwidths', __args__, opts=opts, typ=GetBandwidthsResult)
    return __ret__.apply(lambda __response__: GetBandwidthsResult(
        bandwidth_id=pulumi.get(__response__, 'bandwidth_id'),
        bandwidths=pulumi.get(__response__, 'bandwidths'),
        charge_mode=pulumi.get(__response__, 'charge_mode'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        size=pulumi.get(__response__, 'size')))
