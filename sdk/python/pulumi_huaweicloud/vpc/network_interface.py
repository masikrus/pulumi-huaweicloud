# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['NetworkInterfaceArgs', 'NetworkInterface']

@pulumi.input_type
class NetworkInterfaceArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[_builtins.str],
                 allowed_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dhcp_lease_time: Optional[pulumi.Input[_builtins.str]] = None,
                 fixed_ip_v4: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a NetworkInterface resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the network interface belongs.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_addresses: Specifies an array of IP addresses that can be active on the
               network interface. If the IP address is "1.1.1.1/0", it means that the source/destination address
               check switch is turned off.
        :param pulumi.Input[_builtins.str] dhcp_lease_time: Specifies the DHCP lease time. The value format of value is "Xh",
               the value of "X" is "-1" or from "1" to "30000". If the value is "-1", the DHCP lease time is infinite.
        :param pulumi.Input[_builtins.str] fixed_ip_v4: Specifies the network interface IPv4 address.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the network interface name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_ids: Specifies an array of one or more security group IDs.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the network interface tags in the format of key-value pairs.
               This parameter can only be used in **cn-south-2** for now.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if allowed_addresses is not None:
            pulumi.set(__self__, "allowed_addresses", allowed_addresses)
        if dhcp_lease_time is not None:
            pulumi.set(__self__, "dhcp_lease_time", dhcp_lease_time)
        if fixed_ip_v4 is not None:
            pulumi.set(__self__, "fixed_ip_v4", fixed_ip_v4)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the subnet to which the network interface belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="allowedAddresses")
    def allowed_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies an array of IP addresses that can be active on the
        network interface. If the IP address is "1.1.1.1/0", it means that the source/destination address
        check switch is turned off.
        """
        return pulumi.get(self, "allowed_addresses")

    @allowed_addresses.setter
    def allowed_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_addresses", value)

    @_builtins.property
    @pulumi.getter(name="dhcpLeaseTime")
    def dhcp_lease_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DHCP lease time. The value format of value is "Xh",
        the value of "X" is "-1" or from "1" to "30000". If the value is "-1", the DHCP lease time is infinite.
        """
        return pulumi.get(self, "dhcp_lease_time")

    @dhcp_lease_time.setter
    def dhcp_lease_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dhcp_lease_time", value)

    @_builtins.property
    @pulumi.getter(name="fixedIpV4")
    def fixed_ip_v4(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network interface IPv4 address.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "fixed_ip_v4")

    @fixed_ip_v4.setter
    def fixed_ip_v4(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fixed_ip_v4", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies an array of one or more security group IDs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the network interface tags in the format of key-value pairs.
        This parameter can only be used in **cn-south-2** for now.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _NetworkInterfaceState:
    def __init__(__self__, *,
                 allowed_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 device_owner: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_lease_time: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_efi: Optional[pulumi.Input[_builtins.bool]] = None,
                 fixed_ip_v4: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port_security_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering NetworkInterface resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_addresses: Specifies an array of IP addresses that can be active on the
               network interface. If the IP address is "1.1.1.1/0", it means that the source/destination address
               check switch is turned off.
        :param pulumi.Input[_builtins.str] availability_zone: Indicates the availability zone to which the network interface belongs.
        :param pulumi.Input[_builtins.str] device_id: Indicates the ID of the device to which the network interface belongs.
        :param pulumi.Input[_builtins.str] device_owner: Indicates the belonged device, which can be the DHCP server, router, load balancer, or Nova.
        :param pulumi.Input[_builtins.str] dhcp_lease_time: Specifies the DHCP lease time. The value format of value is "Xh",
               the value of "X" is "-1" or from "1" to "30000". If the value is "-1", the DHCP lease time is infinite.
        :param pulumi.Input[_builtins.str] dns_name: Indicates the default private network DNS name of the primary NIC.
        :param pulumi.Input[_builtins.bool] enable_efi: Indicates whether to enable EFI.
        :param pulumi.Input[_builtins.str] fixed_ip_v4: Specifies the network interface IPv4 address.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Indicates the ID of the instance to which the network interface belongs.
        :param pulumi.Input[_builtins.str] instance_type: Indicates the type of the instance to which the network interface belongs.
        :param pulumi.Input[_builtins.str] ipv6_bandwidth_id: Indicates the Shared bandwidth ID bound to IPv6 network interface.
        :param pulumi.Input[_builtins.str] mac_address: Indicates the network interface MAC address.
        :param pulumi.Input[_builtins.str] name: Specifies the network interface name.
        :param pulumi.Input[_builtins.bool] port_security_enabled: Indicates whether the security option is enabled for the network interface.
               If the option is not enabled, the security group and DHCP snooping do not take effect.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_ids: Specifies an array of one or more security group IDs.
        :param pulumi.Input[_builtins.str] status: Indicates the network interface status.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the network interface belongs.
               Changing this creates a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the network interface tags in the format of key-value pairs.
               This parameter can only be used in **cn-south-2** for now.
        """
        if allowed_addresses is not None:
            pulumi.set(__self__, "allowed_addresses", allowed_addresses)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if device_owner is not None:
            pulumi.set(__self__, "device_owner", device_owner)
        if dhcp_lease_time is not None:
            pulumi.set(__self__, "dhcp_lease_time", dhcp_lease_time)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if enable_efi is not None:
            pulumi.set(__self__, "enable_efi", enable_efi)
        if fixed_ip_v4 is not None:
            pulumi.set(__self__, "fixed_ip_v4", fixed_ip_v4)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if ipv6_bandwidth_id is not None:
            pulumi.set(__self__, "ipv6_bandwidth_id", ipv6_bandwidth_id)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port_security_enabled is not None:
            pulumi.set(__self__, "port_security_enabled", port_security_enabled)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="allowedAddresses")
    def allowed_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies an array of IP addresses that can be active on the
        network interface. If the IP address is "1.1.1.1/0", it means that the source/destination address
        check switch is turned off.
        """
        return pulumi.get(self, "allowed_addresses")

    @allowed_addresses.setter
    def allowed_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_addresses", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the availability zone to which the network interface belongs.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of the device to which the network interface belongs.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter(name="deviceOwner")
    def device_owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the belonged device, which can be the DHCP server, router, load balancer, or Nova.
        """
        return pulumi.get(self, "device_owner")

    @device_owner.setter
    def device_owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device_owner", value)

    @_builtins.property
    @pulumi.getter(name="dhcpLeaseTime")
    def dhcp_lease_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DHCP lease time. The value format of value is "Xh",
        the value of "X" is "-1" or from "1" to "30000". If the value is "-1", the DHCP lease time is infinite.
        """
        return pulumi.get(self, "dhcp_lease_time")

    @dhcp_lease_time.setter
    def dhcp_lease_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dhcp_lease_time", value)

    @_builtins.property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the default private network DNS name of the primary NIC.
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_name", value)

    @_builtins.property
    @pulumi.getter(name="enableEfi")
    def enable_efi(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether to enable EFI.
        """
        return pulumi.get(self, "enable_efi")

    @enable_efi.setter
    def enable_efi(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_efi", value)

    @_builtins.property
    @pulumi.getter(name="fixedIpV4")
    def fixed_ip_v4(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network interface IPv4 address.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "fixed_ip_v4")

    @fixed_ip_v4.setter
    def fixed_ip_v4(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fixed_ip_v4", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of the instance to which the network interface belongs.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the type of the instance to which the network interface belongs.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_type", value)

    @_builtins.property
    @pulumi.getter(name="ipv6BandwidthId")
    def ipv6_bandwidth_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the Shared bandwidth ID bound to IPv6 network interface.
        """
        return pulumi.get(self, "ipv6_bandwidth_id")

    @ipv6_bandwidth_id.setter
    def ipv6_bandwidth_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_bandwidth_id", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the network interface MAC address.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="portSecurityEnabled")
    def port_security_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the security option is enabled for the network interface.
        If the option is not enabled, the security group and DHCP snooping do not take effect.
        """
        return pulumi.get(self, "port_security_enabled")

    @port_security_enabled.setter
    def port_security_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "port_security_enabled", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies an array of one or more security group IDs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the network interface status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the subnet to which the network interface belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the network interface tags in the format of key-value pairs.
        This parameter can only be used in **cn-south-2** for now.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("huaweicloud:Vpc/networkInterface:NetworkInterface")
class NetworkInterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dhcp_lease_time: Optional[pulumi.Input[_builtins.str]] = None,
                 fixed_ip_v4: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a VPC network interface resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        subnet_id = config.require_object("subnetId")
        test = huaweicloud.vpc.NetworkInterface("test",
            name=name,
            subnet_id=subnet_id)
        ```

        ## Import

        The network interface can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/networkInterface:NetworkInterface test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_addresses: Specifies an array of IP addresses that can be active on the
               network interface. If the IP address is "1.1.1.1/0", it means that the source/destination address
               check switch is turned off.
        :param pulumi.Input[_builtins.str] dhcp_lease_time: Specifies the DHCP lease time. The value format of value is "Xh",
               the value of "X" is "-1" or from "1" to "30000". If the value is "-1", the DHCP lease time is infinite.
        :param pulumi.Input[_builtins.str] fixed_ip_v4: Specifies the network interface IPv4 address.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the network interface name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_ids: Specifies an array of one or more security group IDs.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the network interface belongs.
               Changing this creates a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the network interface tags in the format of key-value pairs.
               This parameter can only be used in **cn-south-2** for now.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkInterfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a VPC network interface resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        subnet_id = config.require_object("subnetId")
        test = huaweicloud.vpc.NetworkInterface("test",
            name=name,
            subnet_id=subnet_id)
        ```

        ## Import

        The network interface can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/networkInterface:NetworkInterface test <id>
        ```

        :param str resource_name: The name of the resource.
        :param NetworkInterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkInterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dhcp_lease_time: Optional[pulumi.Input[_builtins.str]] = None,
                 fixed_ip_v4: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkInterfaceArgs.__new__(NetworkInterfaceArgs)

            __props__.__dict__["allowed_addresses"] = allowed_addresses
            __props__.__dict__["dhcp_lease_time"] = dhcp_lease_time
            __props__.__dict__["fixed_ip_v4"] = fixed_ip_v4
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["security_group_ids"] = security_group_ids
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["availability_zone"] = None
            __props__.__dict__["device_id"] = None
            __props__.__dict__["device_owner"] = None
            __props__.__dict__["dns_name"] = None
            __props__.__dict__["enable_efi"] = None
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["instance_type"] = None
            __props__.__dict__["ipv6_bandwidth_id"] = None
            __props__.__dict__["mac_address"] = None
            __props__.__dict__["port_security_enabled"] = None
            __props__.__dict__["status"] = None
        super(NetworkInterface, __self__).__init__(
            'huaweicloud:Vpc/networkInterface:NetworkInterface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            device_id: Optional[pulumi.Input[_builtins.str]] = None,
            device_owner: Optional[pulumi.Input[_builtins.str]] = None,
            dhcp_lease_time: Optional[pulumi.Input[_builtins.str]] = None,
            dns_name: Optional[pulumi.Input[_builtins.str]] = None,
            enable_efi: Optional[pulumi.Input[_builtins.bool]] = None,
            fixed_ip_v4: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_type: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
            mac_address: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            port_security_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'NetworkInterface':
        """
        Get an existing NetworkInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_addresses: Specifies an array of IP addresses that can be active on the
               network interface. If the IP address is "1.1.1.1/0", it means that the source/destination address
               check switch is turned off.
        :param pulumi.Input[_builtins.str] availability_zone: Indicates the availability zone to which the network interface belongs.
        :param pulumi.Input[_builtins.str] device_id: Indicates the ID of the device to which the network interface belongs.
        :param pulumi.Input[_builtins.str] device_owner: Indicates the belonged device, which can be the DHCP server, router, load balancer, or Nova.
        :param pulumi.Input[_builtins.str] dhcp_lease_time: Specifies the DHCP lease time. The value format of value is "Xh",
               the value of "X" is "-1" or from "1" to "30000". If the value is "-1", the DHCP lease time is infinite.
        :param pulumi.Input[_builtins.str] dns_name: Indicates the default private network DNS name of the primary NIC.
        :param pulumi.Input[_builtins.bool] enable_efi: Indicates whether to enable EFI.
        :param pulumi.Input[_builtins.str] fixed_ip_v4: Specifies the network interface IPv4 address.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Indicates the ID of the instance to which the network interface belongs.
        :param pulumi.Input[_builtins.str] instance_type: Indicates the type of the instance to which the network interface belongs.
        :param pulumi.Input[_builtins.str] ipv6_bandwidth_id: Indicates the Shared bandwidth ID bound to IPv6 network interface.
        :param pulumi.Input[_builtins.str] mac_address: Indicates the network interface MAC address.
        :param pulumi.Input[_builtins.str] name: Specifies the network interface name.
        :param pulumi.Input[_builtins.bool] port_security_enabled: Indicates whether the security option is enabled for the network interface.
               If the option is not enabled, the security group and DHCP snooping do not take effect.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_ids: Specifies an array of one or more security group IDs.
        :param pulumi.Input[_builtins.str] status: Indicates the network interface status.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of the subnet to which the network interface belongs.
               Changing this creates a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the network interface tags in the format of key-value pairs.
               This parameter can only be used in **cn-south-2** for now.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkInterfaceState.__new__(_NetworkInterfaceState)

        __props__.__dict__["allowed_addresses"] = allowed_addresses
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["device_id"] = device_id
        __props__.__dict__["device_owner"] = device_owner
        __props__.__dict__["dhcp_lease_time"] = dhcp_lease_time
        __props__.__dict__["dns_name"] = dns_name
        __props__.__dict__["enable_efi"] = enable_efi
        __props__.__dict__["fixed_ip_v4"] = fixed_ip_v4
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["ipv6_bandwidth_id"] = ipv6_bandwidth_id
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["name"] = name
        __props__.__dict__["port_security_enabled"] = port_security_enabled
        __props__.__dict__["region"] = region
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        return NetworkInterface(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowedAddresses")
    def allowed_addresses(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies an array of IP addresses that can be active on the
        network interface. If the IP address is "1.1.1.1/0", it means that the source/destination address
        check switch is turned off.
        """
        return pulumi.get(self, "allowed_addresses")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the availability zone to which the network interface belongs.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the ID of the device to which the network interface belongs.
        """
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter(name="deviceOwner")
    def device_owner(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the belonged device, which can be the DHCP server, router, load balancer, or Nova.
        """
        return pulumi.get(self, "device_owner")

    @_builtins.property
    @pulumi.getter(name="dhcpLeaseTime")
    def dhcp_lease_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DHCP lease time. The value format of value is "Xh",
        the value of "X" is "-1" or from "1" to "30000". If the value is "-1", the DHCP lease time is infinite.
        """
        return pulumi.get(self, "dhcp_lease_time")

    @_builtins.property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the default private network DNS name of the primary NIC.
        """
        return pulumi.get(self, "dns_name")

    @_builtins.property
    @pulumi.getter(name="enableEfi")
    def enable_efi(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether to enable EFI.
        """
        return pulumi.get(self, "enable_efi")

    @_builtins.property
    @pulumi.getter(name="fixedIpV4")
    def fixed_ip_v4(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the network interface IPv4 address.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "fixed_ip_v4")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the ID of the instance to which the network interface belongs.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the type of the instance to which the network interface belongs.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="ipv6BandwidthId")
    def ipv6_bandwidth_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the Shared bandwidth ID bound to IPv6 network interface.
        """
        return pulumi.get(self, "ipv6_bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the network interface MAC address.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the network interface name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="portSecurityEnabled")
    def port_security_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the security option is enabled for the network interface.
        If the option is not enabled, the security group and DHCP snooping do not take effect.
        """
        return pulumi.get(self, "port_security_enabled")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies an array of one or more security group IDs.
        """
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the network interface status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the subnet to which the network interface belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the network interface tags in the format of key-value pairs.
        This parameter can only be used in **cn-south-2** for now.
        """
        return pulumi.get(self, "tags")

