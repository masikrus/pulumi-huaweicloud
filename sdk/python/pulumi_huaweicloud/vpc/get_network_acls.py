# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetNetworkAclsResult',
    'AwaitableGetNetworkAclsResult',
    'get_network_acls',
    'get_network_acls_output',
]

@pulumi.output_type
class GetNetworkAclsResult:
    """
    A collection of values returned by getNetworkAcls.
    """
    def __init__(__self__, enabled=None, enterprise_project_id=None, id=None, name=None, network_acl_id=None, network_acls=None, region=None, status=None):
        if enabled and not isinstance(enabled, str):
            raise TypeError("Expected argument 'enabled' to be a str")
        pulumi.set(__self__, "enabled", enabled)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_acl_id and not isinstance(network_acl_id, str):
            raise TypeError("Expected argument 'network_acl_id' to be a str")
        pulumi.set(__self__, "network_acl_id", network_acl_id)
        if network_acls and not isinstance(network_acls, list):
            raise TypeError("Expected argument 'network_acls' to be a list")
        pulumi.set(__self__, "network_acls", network_acls)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.str]:
        """
        Whether the network ACL is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID of the network ACL.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The network ACL rule name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAclId")
    def network_acl_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "network_acl_id")

    @_builtins.property
    @pulumi.getter(name="networkAcls")
    def network_acls(self) -> Sequence['outputs.GetNetworkAclsNetworkAclResult']:
        """
        The list of VPC network ACLs.
        The network_acls structure is documented below.
        """
        return pulumi.get(self, "network_acls")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the ACL.
        """
        return pulumi.get(self, "status")


class AwaitableGetNetworkAclsResult(GetNetworkAclsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkAclsResult(
            enabled=self.enabled,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            network_acl_id=self.network_acl_id,
            network_acls=self.network_acls,
            region=self.region,
            status=self.status)


def get_network_acls(enabled: Optional[_builtins.str] = None,
                     enterprise_project_id: Optional[_builtins.str] = None,
                     name: Optional[_builtins.str] = None,
                     network_acl_id: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     status: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkAclsResult:
    """
    Use this data source to get the list of VPC network ACLs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    network_acl_name = config.require_object("networkAclName")
    enterprise_project_id = config.require_object("enterpriseProjectId")
    basic = huaweicloud.Vpc.get_network_acls(name=network_acl_name,
        enterprise_project_id=enterprise_project_id)
    ```


    :param _builtins.str enabled: Specifies whether the network ACL is enabled. The value can be **true** or **false**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the network ACL.
    :param _builtins.str name: Specifies the network ACL name. The value can contain no more than 64 characters,
           including letters, digits, underscores (_), hyphens (-), and periods (.).
    :param _builtins.str network_acl_id: Specifies the network ACL ID.
    :param _builtins.str region: Specifies the region in which to obtain the network ACLs.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the network ACL.
    """
    __args__ = dict()
    __args__['enabled'] = enabled
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['networkAclId'] = network_acl_id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getNetworkAcls:getNetworkAcls', __args__, opts=opts, typ=GetNetworkAclsResult).value

    return AwaitableGetNetworkAclsResult(
        enabled=pulumi.get(__ret__, 'enabled'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        network_acl_id=pulumi.get(__ret__, 'network_acl_id'),
        network_acls=pulumi.get(__ret__, 'network_acls'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_network_acls_output(enabled: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            network_acl_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkAclsResult]:
    """
    Use this data source to get the list of VPC network ACLs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    network_acl_name = config.require_object("networkAclName")
    enterprise_project_id = config.require_object("enterpriseProjectId")
    basic = huaweicloud.Vpc.get_network_acls(name=network_acl_name,
        enterprise_project_id=enterprise_project_id)
    ```


    :param _builtins.str enabled: Specifies whether the network ACL is enabled. The value can be **true** or **false**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the network ACL.
    :param _builtins.str name: Specifies the network ACL name. The value can contain no more than 64 characters,
           including letters, digits, underscores (_), hyphens (-), and periods (.).
    :param _builtins.str network_acl_id: Specifies the network ACL ID.
    :param _builtins.str region: Specifies the region in which to obtain the network ACLs.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the network ACL.
    """
    __args__ = dict()
    __args__['enabled'] = enabled
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['networkAclId'] = network_acl_id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Vpc/getNetworkAcls:getNetworkAcls', __args__, opts=opts, typ=GetNetworkAclsResult)
    return __ret__.apply(lambda __response__: GetNetworkAclsResult(
        enabled=pulumi.get(__response__, 'enabled'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        network_acl_id=pulumi.get(__response__, 'network_acl_id'),
        network_acls=pulumi.get(__response__, 'network_acls'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
