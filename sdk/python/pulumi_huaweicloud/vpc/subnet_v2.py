# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SubnetV2Args', 'SubnetV2']

@pulumi.input_type
class SubnetV2Args:
    def __init__(__self__, *,
                 cidr: pulumi.Input[_builtins.str],
                 network_id: pulumi.Input[_builtins.str],
                 allocation_pools: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2AllocationPoolArgs']]]] = None,
                 dns_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 host_routes: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2HostRouteArgs']]]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv6_address_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_ra_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_gateway: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a SubnetV2 resource.
        :param pulumi.Input[_builtins.str] cidr: CIDR representing IP range for this subnet, based on IP version. Changing this
               creates a new subnet.
        :param pulumi.Input[_builtins.str] network_id: The UUID of the parent network. Changing this creates a new subnet.
        :param pulumi.Input[Sequence[pulumi.Input['SubnetV2AllocationPoolArgs']]] allocation_pools: An array of sub-ranges of CIDR available for dynamic allocation to ports. The
               allocation_pool object structure is documented below. Changing this creates a new subnet.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dns_nameservers: An array of DNS name server names used by hosts in this subnet. Changing this
               updates the DNS name servers for the existing subnet.
        :param pulumi.Input[_builtins.bool] enable_dhcp: The administrative state of the network. The value must be "true".
        :param pulumi.Input[_builtins.str] gateway_ip: Default gateway used by devices in this subnet. Leaving this blank and not
               setting `no_gateway` will cause a default gateway of `.1` to be used. Changing this updates the gateway IP of the
               existing subnet.
        :param pulumi.Input[Sequence[pulumi.Input['SubnetV2HostRouteArgs']]] host_routes: An array of routes that should be used by devices with IPs from this subnet (not
               including local subnet route). The host_route object structure is documented below. Changing this updates the host
               routes for the existing subnet.
        :param pulumi.Input[_builtins.int] ip_version: IP version, either 4 (default) or 6. Changing this creates a new subnet.
        :param pulumi.Input[_builtins.str] name: The name of the subnet. Changing this updates the name of the existing subnet.
        :param pulumi.Input[_builtins.bool] no_gateway: Do not set a gateway IP on this subnet. Changing this removes or adds a default
               gateway IP of the existing subnet.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Networking client. A Networking client is
               needed to create a Neutron subnet. If omitted, the
               `region` argument of the provider is used. Changing this creates a new subnet.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "network_id", network_id)
        if allocation_pools is not None:
            pulumi.set(__self__, "allocation_pools", allocation_pools)
        if dns_nameservers is not None:
            pulumi.set(__self__, "dns_nameservers", dns_nameservers)
        if enable_dhcp is not None:
            pulumi.set(__self__, "enable_dhcp", enable_dhcp)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if host_routes is not None:
            pulumi.set(__self__, "host_routes", host_routes)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if ipv6_address_mode is not None:
            pulumi.set(__self__, "ipv6_address_mode", ipv6_address_mode)
        if ipv6_ra_mode is not None:
            pulumi.set(__self__, "ipv6_ra_mode", ipv6_ra_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if no_gateway is not None:
            pulumi.set(__self__, "no_gateway", no_gateway)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[_builtins.str]:
        """
        CIDR representing IP range for this subnet, based on IP version. Changing this
        creates a new subnet.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[_builtins.str]:
        """
        The UUID of the parent network. Changing this creates a new subnet.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter(name="allocationPools")
    def allocation_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2AllocationPoolArgs']]]]:
        """
        An array of sub-ranges of CIDR available for dynamic allocation to ports. The
        allocation_pool object structure is documented below. Changing this creates a new subnet.
        """
        return pulumi.get(self, "allocation_pools")

    @allocation_pools.setter
    def allocation_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2AllocationPoolArgs']]]]):
        pulumi.set(self, "allocation_pools", value)

    @_builtins.property
    @pulumi.getter(name="dnsNameservers")
    def dns_nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        An array of DNS name server names used by hosts in this subnet. Changing this
        updates the DNS name servers for the existing subnet.
        """
        return pulumi.get(self, "dns_nameservers")

    @dns_nameservers.setter
    def dns_nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "dns_nameservers", value)

    @_builtins.property
    @pulumi.getter(name="enableDhcp")
    def enable_dhcp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The administrative state of the network. The value must be "true".
        """
        return pulumi.get(self, "enable_dhcp")

    @enable_dhcp.setter
    def enable_dhcp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_dhcp", value)

    @_builtins.property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default gateway used by devices in this subnet. Leaving this blank and not
        setting `no_gateway` will cause a default gateway of `.1` to be used. Changing this updates the gateway IP of the
        existing subnet.
        """
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway_ip", value)

    @_builtins.property
    @pulumi.getter(name="hostRoutes")
    def host_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2HostRouteArgs']]]]:
        """
        An array of routes that should be used by devices with IPs from this subnet (not
        including local subnet route). The host_route object structure is documented below. Changing this updates the host
        routes for the existing subnet.
        """
        return pulumi.get(self, "host_routes")

    @host_routes.setter
    def host_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2HostRouteArgs']]]]):
        pulumi.set(self, "host_routes", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IP version, either 4 (default) or 6. Changing this creates a new subnet.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AddressMode")
    def ipv6_address_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv6_address_mode")

    @ipv6_address_mode.setter
    def ipv6_address_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address_mode", value)

    @_builtins.property
    @pulumi.getter(name="ipv6RaMode")
    def ipv6_ra_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv6_ra_mode")

    @ipv6_ra_mode.setter
    def ipv6_ra_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_ra_mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the subnet. Changing this updates the name of the existing subnet.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="noGateway")
    def no_gateway(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not set a gateway IP on this subnet. Changing this removes or adds a default
        gateway IP of the existing subnet.
        """
        return pulumi.get(self, "no_gateway")

    @no_gateway.setter
    def no_gateway(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_gateway", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the V2 Networking client. A Networking client is
        needed to create a Neutron subnet. If omitted, the
        `region` argument of the provider is used. Changing this creates a new subnet.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.input_type
class _SubnetV2State:
    def __init__(__self__, *,
                 allocation_pools: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2AllocationPoolArgs']]]] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 host_routes: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2HostRouteArgs']]]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv6_address_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_ra_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 no_gateway: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering SubnetV2 resources.
        :param pulumi.Input[Sequence[pulumi.Input['SubnetV2AllocationPoolArgs']]] allocation_pools: An array of sub-ranges of CIDR available for dynamic allocation to ports. The
               allocation_pool object structure is documented below. Changing this creates a new subnet.
        :param pulumi.Input[_builtins.str] cidr: CIDR representing IP range for this subnet, based on IP version. Changing this
               creates a new subnet.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dns_nameservers: An array of DNS name server names used by hosts in this subnet. Changing this
               updates the DNS name servers for the existing subnet.
        :param pulumi.Input[_builtins.bool] enable_dhcp: The administrative state of the network. The value must be "true".
        :param pulumi.Input[_builtins.str] gateway_ip: Default gateway used by devices in this subnet. Leaving this blank and not
               setting `no_gateway` will cause a default gateway of `.1` to be used. Changing this updates the gateway IP of the
               existing subnet.
        :param pulumi.Input[Sequence[pulumi.Input['SubnetV2HostRouteArgs']]] host_routes: An array of routes that should be used by devices with IPs from this subnet (not
               including local subnet route). The host_route object structure is documented below. Changing this updates the host
               routes for the existing subnet.
        :param pulumi.Input[_builtins.int] ip_version: IP version, either 4 (default) or 6. Changing this creates a new subnet.
        :param pulumi.Input[_builtins.str] name: The name of the subnet. Changing this updates the name of the existing subnet.
        :param pulumi.Input[_builtins.str] network_id: The UUID of the parent network. Changing this creates a new subnet.
        :param pulumi.Input[_builtins.bool] no_gateway: Do not set a gateway IP on this subnet. Changing this removes or adds a default
               gateway IP of the existing subnet.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Networking client. A Networking client is
               needed to create a Neutron subnet. If omitted, the
               `region` argument of the provider is used. Changing this creates a new subnet.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        if allocation_pools is not None:
            pulumi.set(__self__, "allocation_pools", allocation_pools)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if dns_nameservers is not None:
            pulumi.set(__self__, "dns_nameservers", dns_nameservers)
        if enable_dhcp is not None:
            pulumi.set(__self__, "enable_dhcp", enable_dhcp)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if host_routes is not None:
            pulumi.set(__self__, "host_routes", host_routes)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if ipv6_address_mode is not None:
            pulumi.set(__self__, "ipv6_address_mode", ipv6_address_mode)
        if ipv6_ra_mode is not None:
            pulumi.set(__self__, "ipv6_ra_mode", ipv6_ra_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if no_gateway is not None:
            pulumi.set(__self__, "no_gateway", no_gateway)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @_builtins.property
    @pulumi.getter(name="allocationPools")
    def allocation_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2AllocationPoolArgs']]]]:
        """
        An array of sub-ranges of CIDR available for dynamic allocation to ports. The
        allocation_pool object structure is documented below. Changing this creates a new subnet.
        """
        return pulumi.get(self, "allocation_pools")

    @allocation_pools.setter
    def allocation_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2AllocationPoolArgs']]]]):
        pulumi.set(self, "allocation_pools", value)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIDR representing IP range for this subnet, based on IP version. Changing this
        creates a new subnet.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter(name="dnsNameservers")
    def dns_nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        An array of DNS name server names used by hosts in this subnet. Changing this
        updates the DNS name servers for the existing subnet.
        """
        return pulumi.get(self, "dns_nameservers")

    @dns_nameservers.setter
    def dns_nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "dns_nameservers", value)

    @_builtins.property
    @pulumi.getter(name="enableDhcp")
    def enable_dhcp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The administrative state of the network. The value must be "true".
        """
        return pulumi.get(self, "enable_dhcp")

    @enable_dhcp.setter
    def enable_dhcp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_dhcp", value)

    @_builtins.property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default gateway used by devices in this subnet. Leaving this blank and not
        setting `no_gateway` will cause a default gateway of `.1` to be used. Changing this updates the gateway IP of the
        existing subnet.
        """
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway_ip", value)

    @_builtins.property
    @pulumi.getter(name="hostRoutes")
    def host_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2HostRouteArgs']]]]:
        """
        An array of routes that should be used by devices with IPs from this subnet (not
        including local subnet route). The host_route object structure is documented below. Changing this updates the host
        routes for the existing subnet.
        """
        return pulumi.get(self, "host_routes")

    @host_routes.setter
    def host_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2HostRouteArgs']]]]):
        pulumi.set(self, "host_routes", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IP version, either 4 (default) or 6. Changing this creates a new subnet.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AddressMode")
    def ipv6_address_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv6_address_mode")

    @ipv6_address_mode.setter
    def ipv6_address_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address_mode", value)

    @_builtins.property
    @pulumi.getter(name="ipv6RaMode")
    def ipv6_ra_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv6_ra_mode")

    @ipv6_ra_mode.setter
    def ipv6_ra_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_ra_mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the subnet. Changing this updates the name of the existing subnet.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The UUID of the parent network. Changing this creates a new subnet.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter(name="noGateway")
    def no_gateway(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not set a gateway IP on this subnet. Changing this removes or adds a default
        gateway IP of the existing subnet.
        """
        return pulumi.get(self, "no_gateway")

    @no_gateway.setter
    def no_gateway(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_gateway", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the V2 Networking client. A Networking client is
        needed to create a Neutron subnet. If omitted, the
        `region` argument of the provider is used. Changing this creates a new subnet.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.type_token("huaweicloud:Vpc/subnetV2:SubnetV2")
class SubnetV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocation_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2AllocationPoolArgs', 'SubnetV2AllocationPoolArgsDict']]]]] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 host_routes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2HostRouteArgs', 'SubnetV2HostRouteArgsDict']]]]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv6_address_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_ra_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 no_gateway: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a V2 Neutron subnet resource within HuaweiCloud.

        !> **WARNING:** It has been deprecated, use `Vpc.Subnet` instead.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        network1 = huaweicloud.vpc.NetworkV2("network_1",
            name="tf_test_network",
            admin_state_up="true")
        subnet1 = huaweicloud.vpc.SubnetV2("subnet_1",
            network_id=network1.id,
            cidr="192.168.199.0/24")
        ```

        ## Import

        Subnets can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/subnetV2:SubnetV2 subnet_1 da4faf16-5546-41e4-8330-4d0002b74048
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2AllocationPoolArgs', 'SubnetV2AllocationPoolArgsDict']]]] allocation_pools: An array of sub-ranges of CIDR available for dynamic allocation to ports. The
               allocation_pool object structure is documented below. Changing this creates a new subnet.
        :param pulumi.Input[_builtins.str] cidr: CIDR representing IP range for this subnet, based on IP version. Changing this
               creates a new subnet.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dns_nameservers: An array of DNS name server names used by hosts in this subnet. Changing this
               updates the DNS name servers for the existing subnet.
        :param pulumi.Input[_builtins.bool] enable_dhcp: The administrative state of the network. The value must be "true".
        :param pulumi.Input[_builtins.str] gateway_ip: Default gateway used by devices in this subnet. Leaving this blank and not
               setting `no_gateway` will cause a default gateway of `.1` to be used. Changing this updates the gateway IP of the
               existing subnet.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2HostRouteArgs', 'SubnetV2HostRouteArgsDict']]]] host_routes: An array of routes that should be used by devices with IPs from this subnet (not
               including local subnet route). The host_route object structure is documented below. Changing this updates the host
               routes for the existing subnet.
        :param pulumi.Input[_builtins.int] ip_version: IP version, either 4 (default) or 6. Changing this creates a new subnet.
        :param pulumi.Input[_builtins.str] name: The name of the subnet. Changing this updates the name of the existing subnet.
        :param pulumi.Input[_builtins.str] network_id: The UUID of the parent network. Changing this creates a new subnet.
        :param pulumi.Input[_builtins.bool] no_gateway: Do not set a gateway IP on this subnet. Changing this removes or adds a default
               gateway IP of the existing subnet.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Networking client. A Networking client is
               needed to create a Neutron subnet. If omitted, the
               `region` argument of the provider is used. Changing this creates a new subnet.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubnetV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a V2 Neutron subnet resource within HuaweiCloud.

        !> **WARNING:** It has been deprecated, use `Vpc.Subnet` instead.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        network1 = huaweicloud.vpc.NetworkV2("network_1",
            name="tf_test_network",
            admin_state_up="true")
        subnet1 = huaweicloud.vpc.SubnetV2("subnet_1",
            network_id=network1.id,
            cidr="192.168.199.0/24")
        ```

        ## Import

        Subnets can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Vpc/subnetV2:SubnetV2 subnet_1 da4faf16-5546-41e4-8330-4d0002b74048
        ```

        :param str resource_name: The name of the resource.
        :param SubnetV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubnetV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocation_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2AllocationPoolArgs', 'SubnetV2AllocationPoolArgsDict']]]]] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 host_routes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2HostRouteArgs', 'SubnetV2HostRouteArgsDict']]]]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv6_address_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_ra_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 no_gateway: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubnetV2Args.__new__(SubnetV2Args)

            __props__.__dict__["allocation_pools"] = allocation_pools
            if cidr is None and not opts.urn:
                raise TypeError("Missing required property 'cidr'")
            __props__.__dict__["cidr"] = cidr
            __props__.__dict__["dns_nameservers"] = dns_nameservers
            __props__.__dict__["enable_dhcp"] = enable_dhcp
            __props__.__dict__["gateway_ip"] = gateway_ip
            __props__.__dict__["host_routes"] = host_routes
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["ipv6_address_mode"] = ipv6_address_mode
            __props__.__dict__["ipv6_ra_mode"] = ipv6_ra_mode
            __props__.__dict__["name"] = name
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["no_gateway"] = no_gateway
            __props__.__dict__["region"] = region
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["value_specs"] = value_specs
        super(SubnetV2, __self__).__init__(
            'huaweicloud:Vpc/subnetV2:SubnetV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allocation_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2AllocationPoolArgs', 'SubnetV2AllocationPoolArgsDict']]]]] = None,
            cidr: Optional[pulumi.Input[_builtins.str]] = None,
            dns_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            enable_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
            gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
            host_routes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2HostRouteArgs', 'SubnetV2HostRouteArgsDict']]]]] = None,
            ip_version: Optional[pulumi.Input[_builtins.int]] = None,
            ipv6_address_mode: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_ra_mode: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_id: Optional[pulumi.Input[_builtins.str]] = None,
            no_gateway: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'SubnetV2':
        """
        Get an existing SubnetV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2AllocationPoolArgs', 'SubnetV2AllocationPoolArgsDict']]]] allocation_pools: An array of sub-ranges of CIDR available for dynamic allocation to ports. The
               allocation_pool object structure is documented below. Changing this creates a new subnet.
        :param pulumi.Input[_builtins.str] cidr: CIDR representing IP range for this subnet, based on IP version. Changing this
               creates a new subnet.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dns_nameservers: An array of DNS name server names used by hosts in this subnet. Changing this
               updates the DNS name servers for the existing subnet.
        :param pulumi.Input[_builtins.bool] enable_dhcp: The administrative state of the network. The value must be "true".
        :param pulumi.Input[_builtins.str] gateway_ip: Default gateway used by devices in this subnet. Leaving this blank and not
               setting `no_gateway` will cause a default gateway of `.1` to be used. Changing this updates the gateway IP of the
               existing subnet.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2HostRouteArgs', 'SubnetV2HostRouteArgsDict']]]] host_routes: An array of routes that should be used by devices with IPs from this subnet (not
               including local subnet route). The host_route object structure is documented below. Changing this updates the host
               routes for the existing subnet.
        :param pulumi.Input[_builtins.int] ip_version: IP version, either 4 (default) or 6. Changing this creates a new subnet.
        :param pulumi.Input[_builtins.str] name: The name of the subnet. Changing this updates the name of the existing subnet.
        :param pulumi.Input[_builtins.str] network_id: The UUID of the parent network. Changing this creates a new subnet.
        :param pulumi.Input[_builtins.bool] no_gateway: Do not set a gateway IP on this subnet. Changing this removes or adds a default
               gateway IP of the existing subnet.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Networking client. A Networking client is
               needed to create a Neutron subnet. If omitted, the
               `region` argument of the provider is used. Changing this creates a new subnet.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubnetV2State.__new__(_SubnetV2State)

        __props__.__dict__["allocation_pools"] = allocation_pools
        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["dns_nameservers"] = dns_nameservers
        __props__.__dict__["enable_dhcp"] = enable_dhcp
        __props__.__dict__["gateway_ip"] = gateway_ip
        __props__.__dict__["host_routes"] = host_routes
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["ipv6_address_mode"] = ipv6_address_mode
        __props__.__dict__["ipv6_ra_mode"] = ipv6_ra_mode
        __props__.__dict__["name"] = name
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["no_gateway"] = no_gateway
        __props__.__dict__["region"] = region
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["value_specs"] = value_specs
        return SubnetV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allocationPools")
    def allocation_pools(self) -> pulumi.Output[Sequence['outputs.SubnetV2AllocationPool']]:
        """
        An array of sub-ranges of CIDR available for dynamic allocation to ports. The
        allocation_pool object structure is documented below. Changing this creates a new subnet.
        """
        return pulumi.get(self, "allocation_pools")

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[_builtins.str]:
        """
        CIDR representing IP range for this subnet, based on IP version. Changing this
        creates a new subnet.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="dnsNameservers")
    def dns_nameservers(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        An array of DNS name server names used by hosts in this subnet. Changing this
        updates the DNS name servers for the existing subnet.
        """
        return pulumi.get(self, "dns_nameservers")

    @_builtins.property
    @pulumi.getter(name="enableDhcp")
    def enable_dhcp(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        The administrative state of the network. The value must be "true".
        """
        return pulumi.get(self, "enable_dhcp")

    @_builtins.property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Default gateway used by devices in this subnet. Leaving this blank and not
        setting `no_gateway` will cause a default gateway of `.1` to be used. Changing this updates the gateway IP of the
        existing subnet.
        """
        return pulumi.get(self, "gateway_ip")

    @_builtins.property
    @pulumi.getter(name="hostRoutes")
    def host_routes(self) -> pulumi.Output[Optional[Sequence['outputs.SubnetV2HostRoute']]]:
        """
        An array of routes that should be used by devices with IPs from this subnet (not
        including local subnet route). The host_route object structure is documented below. Changing this updates the host
        routes for the existing subnet.
        """
        return pulumi.get(self, "host_routes")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        IP version, either 4 (default) or 6. Changing this creates a new subnet.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressMode")
    def ipv6_address_mode(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ipv6_address_mode")

    @_builtins.property
    @pulumi.getter(name="ipv6RaMode")
    def ipv6_ra_mode(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ipv6_ra_mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the subnet. Changing this updates the name of the existing subnet.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[_builtins.str]:
        """
        The UUID of the parent network. Changing this creates a new subnet.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="noGateway")
    def no_gateway(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Do not set a gateway IP on this subnet. Changing this removes or adds a default
        gateway IP of the existing subnet.
        """
        return pulumi.get(self, "no_gateway")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the V2 Networking client. A Networking client is
        needed to create a Neutron subnet. If omitted, the
        `region` argument of the provider is used. Changing this creates a new subnet.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

