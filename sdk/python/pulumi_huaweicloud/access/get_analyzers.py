# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAnalyzersResult',
    'AwaitableGetAnalyzersResult',
    'get_analyzers',
    'get_analyzers_output',
]

@pulumi.output_type
class GetAnalyzersResult:
    """
    A collection of values returned by getAnalyzers.
    """
    def __init__(__self__, analyzers=None, id=None, region=None, type=None):
        if analyzers and not isinstance(analyzers, list):
            raise TypeError("Expected argument 'analyzers' to be a list")
        pulumi.set(__self__, "analyzers", analyzers)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def analyzers(self) -> Sequence['outputs.GetAnalyzersAnalyzerResult']:
        """
        The list of analyzers.
        The analyzers structure is documented below.
        """
        return pulumi.get(self, "analyzers")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the analyzer.
        """
        return pulumi.get(self, "type")


class AwaitableGetAnalyzersResult(GetAnalyzersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAnalyzersResult(
            analyzers=self.analyzers,
            id=self.id,
            region=self.region,
            type=self.type)


def get_analyzers(region: Optional[_builtins.str] = None,
                  type: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAnalyzersResult:
    """
    Use this data source to get a list of Access Analyzers within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.access.get_analyzers(type="account")
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the type of the analyzer.
           The value can be: **account**, **organization**, **account_unused_access** and **organization_unused_access**.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:access/getAnalyzers:getAnalyzers', __args__, opts=opts, typ=GetAnalyzersResult).value

    return AwaitableGetAnalyzersResult(
        analyzers=pulumi.get(__ret__, 'analyzers'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_analyzers_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAnalyzersResult]:
    """
    Use this data source to get a list of Access Analyzers within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.access.get_analyzers(type="account")
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the type of the analyzer.
           The value can be: **account**, **organization**, **account_unused_access** and **organization_unused_access**.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:access/getAnalyzers:getAnalyzers', __args__, opts=opts, typ=GetAnalyzersResult)
    return __ret__.apply(lambda __response__: GetAnalyzersResult(
        analyzers=pulumi.get(__response__, 'analyzers'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))
