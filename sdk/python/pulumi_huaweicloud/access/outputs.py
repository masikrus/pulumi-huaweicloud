# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AnalyzerArchiveRuleFilter',
    'AnalyzerArchiveRuleFilterCriterion',
    'AnalyzerConfiguration',
    'AnalyzerConfigurationUnusedAccess',
    'AnalyzerStatusReason',
    'GetAnalyzerArchiveRulesArchiveRuleResult',
    'GetAnalyzerArchiveRulesArchiveRuleFilterResult',
    'GetAnalyzerArchiveRulesArchiveRuleFilterCriterionResult',
    'GetAnalyzersAnalyzerResult',
    'GetAnalyzersAnalyzerConfigurationResult',
    'GetAnalyzersAnalyzerConfigurationUnusedAccessResult',
    'GetAnalyzersAnalyzerStatusReasonResult',
]

@pulumi.output_type
class AnalyzerArchiveRuleFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "organizationId":
            suggest = "organization_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalyzerArchiveRuleFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalyzerArchiveRuleFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalyzerArchiveRuleFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 criterion: 'outputs.AnalyzerArchiveRuleFilterCriterion',
                 key: _builtins.str,
                 organization_id: Optional[_builtins.str] = None):
        """
        :param 'AnalyzerArchiveRuleFilterCriterionArgs' criterion: Specifies the extend parameters of the mesh.
        :param _builtins.str key: Specifies the cluster informations in the mesh.
        :param _builtins.str organization_id: Specifies the cluster informations in the mesh.
        """
        pulumi.set(__self__, "criterion", criterion)
        pulumi.set(__self__, "key", key)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)

    @_builtins.property
    @pulumi.getter
    def criterion(self) -> 'outputs.AnalyzerArchiveRuleFilterCriterion':
        """
        Specifies the extend parameters of the mesh.
        """
        return pulumi.get(self, "criterion")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the cluster informations in the mesh.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[_builtins.str]:
        """
        Specifies the cluster informations in the mesh.
        """
        return pulumi.get(self, "organization_id")


@pulumi.output_type
class AnalyzerArchiveRuleFilterCriterion(dict):
    def __init__(__self__, *,
                 contains: Optional[Sequence[_builtins.str]] = None,
                 eqs: Optional[Sequence[_builtins.str]] = None,
                 exists: Optional[_builtins.str] = None,
                 neqs: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] contains: Specifies the cluster informations in the mesh.
        :param Sequence[_builtins.str] eqs: Specifies the cluster informations in the mesh.
        :param _builtins.str exists: Specifies the cluster informations in the mesh.
        :param Sequence[_builtins.str] neqs: Specifies the cluster informations in the mesh.
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if eqs is not None:
            pulumi.set(__self__, "eqs", eqs)
        if exists is not None:
            pulumi.set(__self__, "exists", exists)
        if neqs is not None:
            pulumi.set(__self__, "neqs", neqs)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the cluster informations in the mesh.
        """
        return pulumi.get(self, "contains")

    @_builtins.property
    @pulumi.getter
    def eqs(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the cluster informations in the mesh.
        """
        return pulumi.get(self, "eqs")

    @_builtins.property
    @pulumi.getter
    def exists(self) -> Optional[_builtins.str]:
        """
        Specifies the cluster informations in the mesh.
        """
        return pulumi.get(self, "exists")

    @_builtins.property
    @pulumi.getter
    def neqs(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the cluster informations in the mesh.
        """
        return pulumi.get(self, "neqs")


@pulumi.output_type
class AnalyzerConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unusedAccess":
            suggest = "unused_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalyzerConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalyzerConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalyzerConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 unused_access: Optional['outputs.AnalyzerConfigurationUnusedAccess'] = None):
        """
        :param 'AnalyzerConfigurationUnusedAccessArgs' unused_access: Specifies the unused access.
               The unused_access structure is documented below.
               
               <a name="unused_access"></a>
               The `unused_access` block supports:
        """
        if unused_access is not None:
            pulumi.set(__self__, "unused_access", unused_access)

    @_builtins.property
    @pulumi.getter(name="unusedAccess")
    def unused_access(self) -> Optional['outputs.AnalyzerConfigurationUnusedAccess']:
        """
        Specifies the unused access.
        The unused_access structure is documented below.

        <a name="unused_access"></a>
        The `unused_access` block supports:
        """
        return pulumi.get(self, "unused_access")


@pulumi.output_type
class AnalyzerConfigurationUnusedAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unusedAccessAge":
            suggest = "unused_access_age"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalyzerConfigurationUnusedAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalyzerConfigurationUnusedAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalyzerConfigurationUnusedAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 unused_access_age: Optional[_builtins.int] = None):
        """
        :param _builtins.int unused_access_age: Specifies the unused access age in days.
               When the `type` is **account_unused_access** or **organization_unused_access**, the default value is 90.
        """
        if unused_access_age is not None:
            pulumi.set(__self__, "unused_access_age", unused_access_age)

    @_builtins.property
    @pulumi.getter(name="unusedAccessAge")
    def unused_access_age(self) -> Optional[_builtins.int]:
        """
        Specifies the unused access age in days.
        When the `type` is **account_unused_access** or **organization_unused_access**, the default value is 90.
        """
        return pulumi.get(self, "unused_access_age")


@pulumi.output_type
class AnalyzerStatusReason(dict):
    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None,
                 details: Optional[_builtins.str] = None):
        """
        :param _builtins.str code: The code of the status reason.
        :param _builtins.str details: The details of the status reason.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if details is not None:
            pulumi.set(__self__, "details", details)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        The code of the status reason.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Optional[_builtins.str]:
        """
        The details of the status reason.
        """
        return pulumi.get(self, "details")


@pulumi.output_type
class GetAnalyzerArchiveRulesArchiveRuleResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 filters: Sequence['outputs.GetAnalyzerArchiveRulesArchiveRuleFilterResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str,
                 urn: _builtins.str):
        """
        :param _builtins.str created_at: The time when the archive rule was created.
        :param Sequence['GetAnalyzerArchiveRulesArchiveRuleFilterArgs'] filters: The filters of the archive rule.
               The filters structure is documented below.
        :param _builtins.str id: The archive rule ID.
        :param _builtins.str name: The name of the archive rule.
        :param _builtins.str updated_at: The time when the archive rule was updated.
        :param _builtins.str urn: The resource archive rule identifier.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the archive rule was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetAnalyzerArchiveRulesArchiveRuleFilterResult']:
        """
        The filters of the archive rule.
        The filters structure is documented below.
        """
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The archive rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the archive rule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the archive rule was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> _builtins.str:
        """
        The resource archive rule identifier.
        """
        return pulumi.get(self, "urn")


@pulumi.output_type
class GetAnalyzerArchiveRulesArchiveRuleFilterResult(dict):
    def __init__(__self__, *,
                 criterions: Sequence['outputs.GetAnalyzerArchiveRulesArchiveRuleFilterCriterionResult'],
                 key: _builtins.str):
        """
        :param Sequence['GetAnalyzerArchiveRulesArchiveRuleFilterCriterionArgs'] criterions: The criterion of the filter.
               The criterion structure is documented below.
        :param _builtins.str key: The key of the filter.
        """
        pulumi.set(__self__, "criterions", criterions)
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def criterions(self) -> Sequence['outputs.GetAnalyzerArchiveRulesArchiveRuleFilterCriterionResult']:
        """
        The criterion of the filter.
        The criterion structure is documented below.
        """
        return pulumi.get(self, "criterions")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the filter.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class GetAnalyzerArchiveRulesArchiveRuleFilterCriterionResult(dict):
    def __init__(__self__, *,
                 contains: Sequence[_builtins.str],
                 eqs: Sequence[_builtins.str],
                 exists: _builtins.str,
                 neqs: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] contains: The values of the **contains** operator.
        :param Sequence[_builtins.str] eqs: The values of the **equals** operator.
        :param _builtins.str exists: The values of the **exists** operator.
        :param Sequence[_builtins.str] neqs: The values of the **not equals** operator.
        """
        pulumi.set(__self__, "contains", contains)
        pulumi.set(__self__, "eqs", eqs)
        pulumi.set(__self__, "exists", exists)
        pulumi.set(__self__, "neqs", neqs)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Sequence[_builtins.str]:
        """
        The values of the **contains** operator.
        """
        return pulumi.get(self, "contains")

    @_builtins.property
    @pulumi.getter
    def eqs(self) -> Sequence[_builtins.str]:
        """
        The values of the **equals** operator.
        """
        return pulumi.get(self, "eqs")

    @_builtins.property
    @pulumi.getter
    def exists(self) -> _builtins.str:
        """
        The values of the **exists** operator.
        """
        return pulumi.get(self, "exists")

    @_builtins.property
    @pulumi.getter
    def neqs(self) -> Sequence[_builtins.str]:
        """
        The values of the **not equals** operator.
        """
        return pulumi.get(self, "neqs")


@pulumi.output_type
class GetAnalyzersAnalyzerResult(dict):
    def __init__(__self__, *,
                 configurations: Sequence['outputs.GetAnalyzersAnalyzerConfigurationResult'],
                 created_at: _builtins.str,
                 id: _builtins.str,
                 last_analyzed_resource: _builtins.str,
                 last_resource_analyzed_at: _builtins.str,
                 name: _builtins.str,
                 organization_id: _builtins.str,
                 status: _builtins.str,
                 status_reasons: Sequence['outputs.GetAnalyzersAnalyzerStatusReasonResult'],
                 tags: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 urn: _builtins.str):
        """
        :param Sequence['GetAnalyzersAnalyzerConfigurationArgs'] configurations: The configuration of the analyzer.
               The configuration structure is documented below.
        :param _builtins.str created_at: The time when the analyzer was created.
        :param _builtins.str id: The data souce ID.
        :param _builtins.str last_analyzed_resource: The URN of last analyzed resource.
        :param _builtins.str last_resource_analyzed_at: The time when the resource was last analyzed.
        :param _builtins.str name: The name of the analyzer.
        :param _builtins.str organization_id: The organization ID of the analyzer.
        :param _builtins.str status: The status of the analyzer.
        :param Sequence['GetAnalyzersAnalyzerStatusReasonArgs'] status_reasons: The status reason of the analyzer.
               The status_reason structure is documented below.
        :param Mapping[str, _builtins.str] tags: The tags of the analyzer.
        :param _builtins.str type: Specifies the type of the analyzer.
               The value can be: **account**, **organization**, **account_unused_access** and **organization_unused_access**.
        :param _builtins.str urn: The resource analyzer identifier.
        """
        pulumi.set(__self__, "configurations", configurations)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_analyzed_resource", last_analyzed_resource)
        pulumi.set(__self__, "last_resource_analyzed_at", last_resource_analyzed_at)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_reasons", status_reasons)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetAnalyzersAnalyzerConfigurationResult']:
        """
        The configuration of the analyzer.
        The configuration structure is documented below.
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the analyzer was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The data souce ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastAnalyzedResource")
    def last_analyzed_resource(self) -> _builtins.str:
        """
        The URN of last analyzed resource.
        """
        return pulumi.get(self, "last_analyzed_resource")

    @_builtins.property
    @pulumi.getter(name="lastResourceAnalyzedAt")
    def last_resource_analyzed_at(self) -> _builtins.str:
        """
        The time when the resource was last analyzed.
        """
        return pulumi.get(self, "last_resource_analyzed_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the analyzer.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> _builtins.str:
        """
        The organization ID of the analyzer.
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the analyzer.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Sequence['outputs.GetAnalyzersAnalyzerStatusReasonResult']:
        """
        The status reason of the analyzer.
        The status_reason structure is documented below.
        """
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The tags of the analyzer.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the analyzer.
        The value can be: **account**, **organization**, **account_unused_access** and **organization_unused_access**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> _builtins.str:
        """
        The resource analyzer identifier.
        """
        return pulumi.get(self, "urn")


@pulumi.output_type
class GetAnalyzersAnalyzerConfigurationResult(dict):
    def __init__(__self__, *,
                 unused_accesses: Sequence['outputs.GetAnalyzersAnalyzerConfigurationUnusedAccessResult']):
        """
        :param Sequence['GetAnalyzersAnalyzerConfigurationUnusedAccessArgs'] unused_accesses: The unused access.
               The unused_access structure is documented below.
        """
        pulumi.set(__self__, "unused_accesses", unused_accesses)

    @_builtins.property
    @pulumi.getter(name="unusedAccesses")
    def unused_accesses(self) -> Sequence['outputs.GetAnalyzersAnalyzerConfigurationUnusedAccessResult']:
        """
        The unused access.
        The unused_access structure is documented below.
        """
        return pulumi.get(self, "unused_accesses")


@pulumi.output_type
class GetAnalyzersAnalyzerConfigurationUnusedAccessResult(dict):
    def __init__(__self__, *,
                 unused_access_age: _builtins.int):
        """
        :param _builtins.int unused_access_age: The unused access age in days.
        """
        pulumi.set(__self__, "unused_access_age", unused_access_age)

    @_builtins.property
    @pulumi.getter(name="unusedAccessAge")
    def unused_access_age(self) -> _builtins.int:
        """
        The unused access age in days.
        """
        return pulumi.get(self, "unused_access_age")


@pulumi.output_type
class GetAnalyzersAnalyzerStatusReasonResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 details: _builtins.str):
        """
        :param _builtins.str code: The code of the status reason.
        :param _builtins.str details: The details of the status reason.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The code of the status reason.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def details(self) -> _builtins.str:
        """
        The details of the status reason.
        """
        return pulumi.get(self, "details")


