# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AnalyzerArchiveRuleFilterArgs',
    'AnalyzerArchiveRuleFilterArgsDict',
    'AnalyzerArchiveRuleFilterCriterionArgs',
    'AnalyzerArchiveRuleFilterCriterionArgsDict',
    'AnalyzerConfigurationArgs',
    'AnalyzerConfigurationArgsDict',
    'AnalyzerConfigurationUnusedAccessArgs',
    'AnalyzerConfigurationUnusedAccessArgsDict',
    'AnalyzerStatusReasonArgs',
    'AnalyzerStatusReasonArgsDict',
]

MYPY = False

if not MYPY:
    class AnalyzerArchiveRuleFilterArgsDict(TypedDict):
        criterion: pulumi.Input['AnalyzerArchiveRuleFilterCriterionArgsDict']
        """
        Specifies the extend parameters of the mesh.
        """
        key: pulumi.Input[_builtins.str]
        """
        Specifies the cluster informations in the mesh.
        """
        organization_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the cluster informations in the mesh.
        """
elif False:
    AnalyzerArchiveRuleFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyzerArchiveRuleFilterArgs:
    def __init__(__self__, *,
                 criterion: pulumi.Input['AnalyzerArchiveRuleFilterCriterionArgs'],
                 key: pulumi.Input[_builtins.str],
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['AnalyzerArchiveRuleFilterCriterionArgs'] criterion: Specifies the extend parameters of the mesh.
        :param pulumi.Input[_builtins.str] key: Specifies the cluster informations in the mesh.
        :param pulumi.Input[_builtins.str] organization_id: Specifies the cluster informations in the mesh.
        """
        pulumi.set(__self__, "criterion", criterion)
        pulumi.set(__self__, "key", key)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)

    @_builtins.property
    @pulumi.getter
    def criterion(self) -> pulumi.Input['AnalyzerArchiveRuleFilterCriterionArgs']:
        """
        Specifies the extend parameters of the mesh.
        """
        return pulumi.get(self, "criterion")

    @criterion.setter
    def criterion(self, value: pulumi.Input['AnalyzerArchiveRuleFilterCriterionArgs']):
        pulumi.set(self, "criterion", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cluster informations in the mesh.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster informations in the mesh.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_id", value)


if not MYPY:
    class AnalyzerArchiveRuleFilterCriterionArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the cluster informations in the mesh.
        """
        eqs: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the cluster informations in the mesh.
        """
        exists: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the cluster informations in the mesh.
        """
        neqs: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the cluster informations in the mesh.
        """
elif False:
    AnalyzerArchiveRuleFilterCriterionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyzerArchiveRuleFilterCriterionArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 eqs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 exists: Optional[pulumi.Input[_builtins.str]] = None,
                 neqs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] contains: Specifies the cluster informations in the mesh.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] eqs: Specifies the cluster informations in the mesh.
        :param pulumi.Input[_builtins.str] exists: Specifies the cluster informations in the mesh.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] neqs: Specifies the cluster informations in the mesh.
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if eqs is not None:
            pulumi.set(__self__, "eqs", eqs)
        if exists is not None:
            pulumi.set(__self__, "exists", exists)
        if neqs is not None:
            pulumi.set(__self__, "neqs", neqs)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the cluster informations in the mesh.
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "contains", value)

    @_builtins.property
    @pulumi.getter
    def eqs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the cluster informations in the mesh.
        """
        return pulumi.get(self, "eqs")

    @eqs.setter
    def eqs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "eqs", value)

    @_builtins.property
    @pulumi.getter
    def exists(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster informations in the mesh.
        """
        return pulumi.get(self, "exists")

    @exists.setter
    def exists(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exists", value)

    @_builtins.property
    @pulumi.getter
    def neqs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the cluster informations in the mesh.
        """
        return pulumi.get(self, "neqs")

    @neqs.setter
    def neqs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "neqs", value)


if not MYPY:
    class AnalyzerConfigurationArgsDict(TypedDict):
        unused_access: NotRequired[pulumi.Input['AnalyzerConfigurationUnusedAccessArgsDict']]
        """
        Specifies the unused access.
        The unused_access structure is documented below.

        <a name="unused_access"></a>
        The `unused_access` block supports:
        """
elif False:
    AnalyzerConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyzerConfigurationArgs:
    def __init__(__self__, *,
                 unused_access: Optional[pulumi.Input['AnalyzerConfigurationUnusedAccessArgs']] = None):
        """
        :param pulumi.Input['AnalyzerConfigurationUnusedAccessArgs'] unused_access: Specifies the unused access.
               The unused_access structure is documented below.
               
               <a name="unused_access"></a>
               The `unused_access` block supports:
        """
        if unused_access is not None:
            pulumi.set(__self__, "unused_access", unused_access)

    @_builtins.property
    @pulumi.getter(name="unusedAccess")
    def unused_access(self) -> Optional[pulumi.Input['AnalyzerConfigurationUnusedAccessArgs']]:
        """
        Specifies the unused access.
        The unused_access structure is documented below.

        <a name="unused_access"></a>
        The `unused_access` block supports:
        """
        return pulumi.get(self, "unused_access")

    @unused_access.setter
    def unused_access(self, value: Optional[pulumi.Input['AnalyzerConfigurationUnusedAccessArgs']]):
        pulumi.set(self, "unused_access", value)


if not MYPY:
    class AnalyzerConfigurationUnusedAccessArgsDict(TypedDict):
        unused_access_age: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the unused access age in days.
        When the `type` is **account_unused_access** or **organization_unused_access**, the default value is 90.
        """
elif False:
    AnalyzerConfigurationUnusedAccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyzerConfigurationUnusedAccessArgs:
    def __init__(__self__, *,
                 unused_access_age: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] unused_access_age: Specifies the unused access age in days.
               When the `type` is **account_unused_access** or **organization_unused_access**, the default value is 90.
        """
        if unused_access_age is not None:
            pulumi.set(__self__, "unused_access_age", unused_access_age)

    @_builtins.property
    @pulumi.getter(name="unusedAccessAge")
    def unused_access_age(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the unused access age in days.
        When the `type` is **account_unused_access** or **organization_unused_access**, the default value is 90.
        """
        return pulumi.get(self, "unused_access_age")

    @unused_access_age.setter
    def unused_access_age(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "unused_access_age", value)


if not MYPY:
    class AnalyzerStatusReasonArgsDict(TypedDict):
        code: NotRequired[pulumi.Input[_builtins.str]]
        """
        The code of the status reason.
        """
        details: NotRequired[pulumi.Input[_builtins.str]]
        """
        The details of the status reason.
        """
elif False:
    AnalyzerStatusReasonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyzerStatusReasonArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 details: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] code: The code of the status reason.
        :param pulumi.Input[_builtins.str] details: The details of the status reason.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if details is not None:
            pulumi.set(__self__, "details", details)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The code of the status reason.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The details of the status reason.
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "details", value)


