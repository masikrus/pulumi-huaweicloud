# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAnalyzerArchiveRulesResult',
    'AwaitableGetAnalyzerArchiveRulesResult',
    'get_analyzer_archive_rules',
    'get_analyzer_archive_rules_output',
]

@pulumi.output_type
class GetAnalyzerArchiveRulesResult:
    """
    A collection of values returned by getAnalyzerArchiveRules.
    """
    def __init__(__self__, analyzer_id=None, archive_rules=None, id=None, region=None):
        if analyzer_id and not isinstance(analyzer_id, str):
            raise TypeError("Expected argument 'analyzer_id' to be a str")
        pulumi.set(__self__, "analyzer_id", analyzer_id)
        if archive_rules and not isinstance(archive_rules, list):
            raise TypeError("Expected argument 'archive_rules' to be a list")
        pulumi.set(__self__, "archive_rules", archive_rules)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="analyzerId")
    def analyzer_id(self) -> _builtins.str:
        return pulumi.get(self, "analyzer_id")

    @_builtins.property
    @pulumi.getter(name="archiveRules")
    def archive_rules(self) -> Sequence['outputs.GetAnalyzerArchiveRulesArchiveRuleResult']:
        """
        The list of archive rules.
        The archive_rules structure is documented below.
        """
        return pulumi.get(self, "archive_rules")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetAnalyzerArchiveRulesResult(GetAnalyzerArchiveRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAnalyzerArchiveRulesResult(
            analyzer_id=self.analyzer_id,
            archive_rules=self.archive_rules,
            id=self.id,
            region=self.region)


def get_analyzer_archive_rules(analyzer_id: Optional[_builtins.str] = None,
                               region: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAnalyzerArchiveRulesResult:
    """
    Use this data source to get a list of Access Analyzers archive rules within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    analyzer_id = config.require_object("analyzerId")
    test = huaweicloud.access.get_analyzer_archive_rules(analyzer_id=analyzer_id)
    ```


    :param _builtins.str analyzer_id: Specifies the ID of the analyzer to which the archive rule belongs.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['analyzerId'] = analyzer_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:access/getAnalyzerArchiveRules:getAnalyzerArchiveRules', __args__, opts=opts, typ=GetAnalyzerArchiveRulesResult).value

    return AwaitableGetAnalyzerArchiveRulesResult(
        analyzer_id=pulumi.get(__ret__, 'analyzer_id'),
        archive_rules=pulumi.get(__ret__, 'archive_rules'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_analyzer_archive_rules_output(analyzer_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAnalyzerArchiveRulesResult]:
    """
    Use this data source to get a list of Access Analyzers archive rules within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    analyzer_id = config.require_object("analyzerId")
    test = huaweicloud.access.get_analyzer_archive_rules(analyzer_id=analyzer_id)
    ```


    :param _builtins.str analyzer_id: Specifies the ID of the analyzer to which the archive rule belongs.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['analyzerId'] = analyzer_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:access/getAnalyzerArchiveRules:getAnalyzerArchiveRules', __args__, opts=opts, typ=GetAnalyzerArchiveRulesResult)
    return __ret__.apply(lambda __response__: GetAnalyzerArchiveRulesResult(
        analyzer_id=pulumi.get(__response__, 'analyzer_id'),
        archive_rules=pulumi.get(__response__, 'archive_rules'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
