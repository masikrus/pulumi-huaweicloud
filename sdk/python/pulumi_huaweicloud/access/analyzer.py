# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AnalyzerArgs', 'Analyzer']

@pulumi.input_type
class AnalyzerArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 configuration: Optional[pulumi.Input['AnalyzerConfigurationArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Analyzer resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the analyzer.
               The value can be: **account**, **organization**, **account_unused_access** and **organization_unused_access**.
        :param pulumi.Input['AnalyzerConfigurationArgs'] configuration: Specifies the configuration of the analyzer.
               The configuration structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the analyzer.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of the analyzer.
               
               <a name="configuration"></a>
               The `configuration` block supports:
        """
        pulumi.set(__self__, "type", type)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the analyzer.
        The value can be: **account**, **organization**, **account_unused_access** and **organization_unused_access**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['AnalyzerConfigurationArgs']]:
        """
        Specifies the configuration of the analyzer.
        The configuration structure is documented below.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['AnalyzerConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the analyzer.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the tags of the analyzer.

        <a name="configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _AnalyzerState:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['AnalyzerConfigurationArgs']] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 last_analyzed_resource: Optional[pulumi.Input[_builtins.str]] = None,
                 last_resource_analyzed_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['AnalyzerStatusReasonArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 urn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Analyzer resources.
        :param pulumi.Input['AnalyzerConfigurationArgs'] configuration: Specifies the configuration of the analyzer.
               The configuration structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The time when the analyzer was created.
        :param pulumi.Input[_builtins.str] last_analyzed_resource: The URN of last analyzed resource.
        :param pulumi.Input[_builtins.str] last_resource_analyzed_at: The time when the resource was last analyzed.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the analyzer.
        :param pulumi.Input[_builtins.str] organization_id: The organization ID of the analyzer.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the analyzer.
        :param pulumi.Input[Sequence[pulumi.Input['AnalyzerStatusReasonArgs']]] status_reasons: The status reason of the analyzer.
               The status_reason structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of the analyzer.
               
               <a name="configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the type of the analyzer.
               The value can be: **account**, **organization**, **account_unused_access** and **organization_unused_access**.
        :param pulumi.Input[_builtins.str] urn: The resource analyzer identifier.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if last_analyzed_resource is not None:
            pulumi.set(__self__, "last_analyzed_resource", last_analyzed_resource)
        if last_resource_analyzed_at is not None:
            pulumi.set(__self__, "last_resource_analyzed_at", last_resource_analyzed_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reasons is not None:
            pulumi.set(__self__, "status_reasons", status_reasons)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if urn is not None:
            pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['AnalyzerConfigurationArgs']]:
        """
        Specifies the configuration of the analyzer.
        The configuration structure is documented below.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['AnalyzerConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the analyzer was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="lastAnalyzedResource")
    def last_analyzed_resource(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URN of last analyzed resource.
        """
        return pulumi.get(self, "last_analyzed_resource")

    @last_analyzed_resource.setter
    def last_analyzed_resource(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_analyzed_resource", value)

    @_builtins.property
    @pulumi.getter(name="lastResourceAnalyzedAt")
    def last_resource_analyzed_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the resource was last analyzed.
        """
        return pulumi.get(self, "last_resource_analyzed_at")

    @last_resource_analyzed_at.setter
    def last_resource_analyzed_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_resource_analyzed_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the analyzer.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The organization ID of the analyzer.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the analyzer.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalyzerStatusReasonArgs']]]]:
        """
        The status reason of the analyzer.
        The status_reason structure is documented below.
        """
        return pulumi.get(self, "status_reasons")

    @status_reasons.setter
    def status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalyzerStatusReasonArgs']]]]):
        pulumi.set(self, "status_reasons", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the tags of the analyzer.

        <a name="configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the analyzer.
        The value can be: **account**, **organization**, **account_unused_access** and **organization_unused_access**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource analyzer identifier.
        """
        return pulumi.get(self, "urn")

    @urn.setter
    def urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "urn", value)


@pulumi.type_token("huaweicloud:access/analyzer:Analyzer")
class Analyzer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[Union['AnalyzerConfigurationArgs', 'AnalyzerConfigurationArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an Access Analyzer resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        analyzer_name = config.require_object("analyzerName")
        test = huaweicloud.access.Analyzer("test",
            name=analyzer_name,
            type="account",
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ## Import

        Analyzers can be imported by their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:access/analyzer:Analyzer test 3b7e65af-e75b-4d78-ac75-2a87924cd2a2
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AnalyzerConfigurationArgs', 'AnalyzerConfigurationArgsDict']] configuration: Specifies the configuration of the analyzer.
               The configuration structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the analyzer.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of the analyzer.
               
               <a name="configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the type of the analyzer.
               The value can be: **account**, **organization**, **account_unused_access** and **organization_unused_access**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AnalyzerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Access Analyzer resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        analyzer_name = config.require_object("analyzerName")
        test = huaweicloud.access.Analyzer("test",
            name=analyzer_name,
            type="account",
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ## Import

        Analyzers can be imported by their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:access/analyzer:Analyzer test 3b7e65af-e75b-4d78-ac75-2a87924cd2a2
        ```

        :param str resource_name: The name of the resource.
        :param AnalyzerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AnalyzerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[Union['AnalyzerConfigurationArgs', 'AnalyzerConfigurationArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AnalyzerArgs.__new__(AnalyzerArgs)

            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["last_analyzed_resource"] = None
            __props__.__dict__["last_resource_analyzed_at"] = None
            __props__.__dict__["organization_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
            __props__.__dict__["urn"] = None
        super(Analyzer, __self__).__init__(
            'huaweicloud:access/analyzer:Analyzer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            configuration: Optional[pulumi.Input[Union['AnalyzerConfigurationArgs', 'AnalyzerConfigurationArgsDict']]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            last_analyzed_resource: Optional[pulumi.Input[_builtins.str]] = None,
            last_resource_analyzed_at: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organization_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AnalyzerStatusReasonArgs', 'AnalyzerStatusReasonArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            urn: Optional[pulumi.Input[_builtins.str]] = None) -> 'Analyzer':
        """
        Get an existing Analyzer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AnalyzerConfigurationArgs', 'AnalyzerConfigurationArgsDict']] configuration: Specifies the configuration of the analyzer.
               The configuration structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The time when the analyzer was created.
        :param pulumi.Input[_builtins.str] last_analyzed_resource: The URN of last analyzed resource.
        :param pulumi.Input[_builtins.str] last_resource_analyzed_at: The time when the resource was last analyzed.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the analyzer.
        :param pulumi.Input[_builtins.str] organization_id: The organization ID of the analyzer.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the analyzer.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AnalyzerStatusReasonArgs', 'AnalyzerStatusReasonArgsDict']]]] status_reasons: The status reason of the analyzer.
               The status_reason structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of the analyzer.
               
               <a name="configuration"></a>
               The `configuration` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the type of the analyzer.
               The value can be: **account**, **organization**, **account_unused_access** and **organization_unused_access**.
        :param pulumi.Input[_builtins.str] urn: The resource analyzer identifier.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AnalyzerState.__new__(_AnalyzerState)

        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["last_analyzed_resource"] = last_analyzed_resource
        __props__.__dict__["last_resource_analyzed_at"] = last_resource_analyzed_at
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reasons"] = status_reasons
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["urn"] = urn
        return Analyzer(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> pulumi.Output['outputs.AnalyzerConfiguration']:
        """
        Specifies the configuration of the analyzer.
        The configuration structure is documented below.
        """
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the analyzer was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="lastAnalyzedResource")
    def last_analyzed_resource(self) -> pulumi.Output[_builtins.str]:
        """
        The URN of last analyzed resource.
        """
        return pulumi.get(self, "last_analyzed_resource")

    @_builtins.property
    @pulumi.getter(name="lastResourceAnalyzedAt")
    def last_resource_analyzed_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the resource was last analyzed.
        """
        return pulumi.get(self, "last_resource_analyzed_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the analyzer.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[_builtins.str]:
        """
        The organization ID of the analyzer.
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the analyzer.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence['outputs.AnalyzerStatusReason']]:
        """
        The status reason of the analyzer.
        The status_reason structure is documented below.
        """
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the tags of the analyzer.

        <a name="configuration"></a>
        The `configuration` block supports:
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the analyzer.
        The value can be: **account**, **organization**, **account_unused_access** and **organization_unused_access**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> pulumi.Output[_builtins.str]:
        """
        The resource analyzer identifier.
        """
        return pulumi.get(self, "urn")

