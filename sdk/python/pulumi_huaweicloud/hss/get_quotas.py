# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetQuotasResult',
    'AwaitableGetQuotasResult',
    'get_quotas',
    'get_quotas_output',
]

@pulumi.output_type
class GetQuotasResult:
    """
    A collection of values returned by getQuotas.
    """
    def __init__(__self__, category=None, charging_mode=None, enterprise_project_id=None, host_name=None, id=None, quota_id=None, quotas=None, region=None, status=None, used_status=None, version=None):
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        pulumi.set(__self__, "category", category)
        if charging_mode and not isinstance(charging_mode, str):
            raise TypeError("Expected argument 'charging_mode' to be a str")
        pulumi.set(__self__, "charging_mode", charging_mode)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        pulumi.set(__self__, "host_name", host_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if quota_id and not isinstance(quota_id, str):
            raise TypeError("Expected argument 'quota_id' to be a str")
        pulumi.set(__self__, "quota_id", quota_id)
        if quotas and not isinstance(quotas, list):
            raise TypeError("Expected argument 'quotas' to be a list")
        pulumi.set(__self__, "quotas", quotas)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if used_status and not isinstance(used_status, str):
            raise TypeError("Expected argument 'used_status' to be a str")
        pulumi.set(__self__, "used_status", used_status)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[_builtins.str]:
        """
        The charging mode of quota.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID to which the quota belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        The host name for quota binding.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="quotaId")
    def quota_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "quota_id")

    @_builtins.property
    @pulumi.getter
    def quotas(self) -> Sequence['outputs.GetQuotasQuotaResult']:
        """
        All quotas that match the filter parameters.  
        The quotas structure is documented below.
        """
        return pulumi.get(self, "quotas")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of quota.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="usedStatus")
    def used_status(self) -> Optional[_builtins.str]:
        """
        The usage status of quota.
        """
        return pulumi.get(self, "used_status")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        The version of quota.
        """
        return pulumi.get(self, "version")


class AwaitableGetQuotasResult(GetQuotasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQuotasResult(
            category=self.category,
            charging_mode=self.charging_mode,
            enterprise_project_id=self.enterprise_project_id,
            host_name=self.host_name,
            id=self.id,
            quota_id=self.quota_id,
            quotas=self.quotas,
            region=self.region,
            status=self.status,
            used_status=self.used_status,
            version=self.version)


def get_quotas(category: Optional[_builtins.str] = None,
               charging_mode: Optional[_builtins.str] = None,
               enterprise_project_id: Optional[_builtins.str] = None,
               host_name: Optional[_builtins.str] = None,
               quota_id: Optional[_builtins.str] = None,
               region: Optional[_builtins.str] = None,
               status: Optional[_builtins.str] = None,
               used_status: Optional[_builtins.str] = None,
               version: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQuotasResult:
    """
    Use this data source to get the list of HSS quotas within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    quota_id = config.require_object("quotaId")
    test = huaweicloud.hss.get_quotas(quota_id=quota_id)
    ```


    :param _builtins.str category: Specifies the category of the quotas to be queried.
           The valid values are as follows:
           + **host_resource**: Host protection quota.
           + **container_resource**: Container protection quota.
           
           If omitted, return all quotas for host resource.
           If set to **container_resource**, return all quotas with version **hss.version.container.enterprise**.
    :param _builtins.str charging_mode: Specifies the charging mode of the quotas to be queried.
           The valid values are as follows:
           + **prePaid**: The yearly/monthly billing mode.
           + **postPaid**: The pay-per-use billing mode.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the quotas belong.
           For enterprise users, if omitted, will query the quotas under all enterprise projects.
    :param _builtins.str host_name: Specifies the host name for the quota binding to be queried.
    :param _builtins.str quota_id: Specifies the ID of the quota to be queried.
    :param _builtins.str region: Specifies the region in which to query the HSS quotas.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the quotas to be queried.
           The value can be **normal**, **expired**, or **freeze**.
    :param _builtins.str used_status: Specifies the usage status of the quotas to be queried.
           The value can be **idle** or **used**.
    :param _builtins.str version: Specifies the version of the quotas to be queried.
           The valid values are as follows:
           + **hss.version.basic**: Basic version.
           + **hss.version.advanced**: Professional version.
           + **hss.version.enterprise**: Enterprise version.
           + **hss.version.premium**: Ultimate version.
           + **hss.version.wtp**: Web page tamper prevention version.
    """
    __args__ = dict()
    __args__['category'] = category
    __args__['chargingMode'] = charging_mode
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostName'] = host_name
    __args__['quotaId'] = quota_id
    __args__['region'] = region
    __args__['status'] = status
    __args__['usedStatus'] = used_status
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getQuotas:getQuotas', __args__, opts=opts, typ=GetQuotasResult).value

    return AwaitableGetQuotasResult(
        category=pulumi.get(__ret__, 'category'),
        charging_mode=pulumi.get(__ret__, 'charging_mode'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        host_name=pulumi.get(__ret__, 'host_name'),
        id=pulumi.get(__ret__, 'id'),
        quota_id=pulumi.get(__ret__, 'quota_id'),
        quotas=pulumi.get(__ret__, 'quotas'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        used_status=pulumi.get(__ret__, 'used_status'),
        version=pulumi.get(__ret__, 'version'))
def get_quotas_output(category: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      charging_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      host_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      quota_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      used_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetQuotasResult]:
    """
    Use this data source to get the list of HSS quotas within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    quota_id = config.require_object("quotaId")
    test = huaweicloud.hss.get_quotas(quota_id=quota_id)
    ```


    :param _builtins.str category: Specifies the category of the quotas to be queried.
           The valid values are as follows:
           + **host_resource**: Host protection quota.
           + **container_resource**: Container protection quota.
           
           If omitted, return all quotas for host resource.
           If set to **container_resource**, return all quotas with version **hss.version.container.enterprise**.
    :param _builtins.str charging_mode: Specifies the charging mode of the quotas to be queried.
           The valid values are as follows:
           + **prePaid**: The yearly/monthly billing mode.
           + **postPaid**: The pay-per-use billing mode.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the quotas belong.
           For enterprise users, if omitted, will query the quotas under all enterprise projects.
    :param _builtins.str host_name: Specifies the host name for the quota binding to be queried.
    :param _builtins.str quota_id: Specifies the ID of the quota to be queried.
    :param _builtins.str region: Specifies the region in which to query the HSS quotas.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the quotas to be queried.
           The value can be **normal**, **expired**, or **freeze**.
    :param _builtins.str used_status: Specifies the usage status of the quotas to be queried.
           The value can be **idle** or **used**.
    :param _builtins.str version: Specifies the version of the quotas to be queried.
           The valid values are as follows:
           + **hss.version.basic**: Basic version.
           + **hss.version.advanced**: Professional version.
           + **hss.version.enterprise**: Enterprise version.
           + **hss.version.premium**: Ultimate version.
           + **hss.version.wtp**: Web page tamper prevention version.
    """
    __args__ = dict()
    __args__['category'] = category
    __args__['chargingMode'] = charging_mode
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostName'] = host_name
    __args__['quotaId'] = quota_id
    __args__['region'] = region
    __args__['status'] = status
    __args__['usedStatus'] = used_status
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getQuotas:getQuotas', __args__, opts=opts, typ=GetQuotasResult)
    return __ret__.apply(lambda __response__: GetQuotasResult(
        category=pulumi.get(__response__, 'category'),
        charging_mode=pulumi.get(__response__, 'charging_mode'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        host_name=pulumi.get(__response__, 'host_name'),
        id=pulumi.get(__response__, 'id'),
        quota_id=pulumi.get(__response__, 'quota_id'),
        quotas=pulumi.get(__response__, 'quotas'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        used_status=pulumi.get(__response__, 'used_status'),
        version=pulumi.get(__response__, 'version')))
