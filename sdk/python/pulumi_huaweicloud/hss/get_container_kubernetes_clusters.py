# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetContainerKubernetesClustersResult',
    'AwaitableGetContainerKubernetesClustersResult',
    'get_container_kubernetes_clusters',
    'get_container_kubernetes_clusters_output',
]

@pulumi.output_type
class GetContainerKubernetesClustersResult:
    """
    A collection of values returned by getContainerKubernetesClusters.
    """
    def __init__(__self__, cluster_info_lists=None, cluster_name=None, enterprise_project_id=None, id=None, last_update_time=None, load_agent_info=None, region=None, scene=None, total_num=None):
        if cluster_info_lists and not isinstance(cluster_info_lists, list):
            raise TypeError("Expected argument 'cluster_info_lists' to be a list")
        pulumi.set(__self__, "cluster_info_lists", cluster_info_lists)
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_update_time and not isinstance(last_update_time, int):
            raise TypeError("Expected argument 'last_update_time' to be a int")
        pulumi.set(__self__, "last_update_time", last_update_time)
        if load_agent_info and not isinstance(load_agent_info, bool):
            raise TypeError("Expected argument 'load_agent_info' to be a bool")
        pulumi.set(__self__, "load_agent_info", load_agent_info)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scene and not isinstance(scene, str):
            raise TypeError("Expected argument 'scene' to be a str")
        pulumi.set(__self__, "scene", scene)
        if total_num and not isinstance(total_num, int):
            raise TypeError("Expected argument 'total_num' to be a int")
        pulumi.set(__self__, "total_num", total_num)

    @_builtins.property
    @pulumi.getter(name="clusterInfoLists")
    def cluster_info_lists(self) -> Sequence['outputs.GetContainerKubernetesClustersClusterInfoListResult']:
        """
        The list of cluster information.
        The cluster_info_list structure is documented below.
        """
        return pulumi.get(self, "cluster_info_lists")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[_builtins.str]:
        """
        The cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> _builtins.int:
        """
        The latest update time.
        """
        return pulumi.get(self, "last_update_time")

    @_builtins.property
    @pulumi.getter(name="loadAgentInfo")
    def load_agent_info(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "load_agent_info")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def scene(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "scene")

    @_builtins.property
    @pulumi.getter(name="totalNum")
    def total_num(self) -> _builtins.int:
        """
        The total number of clusters.
        """
        return pulumi.get(self, "total_num")


class AwaitableGetContainerKubernetesClustersResult(GetContainerKubernetesClustersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerKubernetesClustersResult(
            cluster_info_lists=self.cluster_info_lists,
            cluster_name=self.cluster_name,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            last_update_time=self.last_update_time,
            load_agent_info=self.load_agent_info,
            region=self.region,
            scene=self.scene,
            total_num=self.total_num)


def get_container_kubernetes_clusters(cluster_name: Optional[_builtins.str] = None,
                                      enterprise_project_id: Optional[_builtins.str] = None,
                                      load_agent_info: Optional[_builtins.bool] = None,
                                      region: Optional[_builtins.str] = None,
                                      scene: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerKubernetesClustersResult:
    """
    Use this data source to get the list of HSS container kubernetes clusters within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_container_kubernetes_clusters()
    ```


    :param _builtins.str cluster_name: Specifies the cluster name.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.bool load_agent_info: Specifies whether to load agent related information.
           The value can be **true** or **false**. Defaults to **false**.
    :param _builtins.str region: Specifies the region in which to query the HSS container kubernetes clusters.
           If omitted, the provider-level region will be used.
    :param _builtins.str scene: Specifies the query scenario type.  
           The valid values are as follows:
           + **cluster_risk**: Cluster risk scenario.
    """
    __args__ = dict()
    __args__['clusterName'] = cluster_name
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['loadAgentInfo'] = load_agent_info
    __args__['region'] = region
    __args__['scene'] = scene
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getContainerKubernetesClusters:getContainerKubernetesClusters', __args__, opts=opts, typ=GetContainerKubernetesClustersResult).value

    return AwaitableGetContainerKubernetesClustersResult(
        cluster_info_lists=pulumi.get(__ret__, 'cluster_info_lists'),
        cluster_name=pulumi.get(__ret__, 'cluster_name'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        last_update_time=pulumi.get(__ret__, 'last_update_time'),
        load_agent_info=pulumi.get(__ret__, 'load_agent_info'),
        region=pulumi.get(__ret__, 'region'),
        scene=pulumi.get(__ret__, 'scene'),
        total_num=pulumi.get(__ret__, 'total_num'))
def get_container_kubernetes_clusters_output(cluster_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             load_agent_info: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             scene: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerKubernetesClustersResult]:
    """
    Use this data source to get the list of HSS container kubernetes clusters within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_container_kubernetes_clusters()
    ```


    :param _builtins.str cluster_name: Specifies the cluster name.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.bool load_agent_info: Specifies whether to load agent related information.
           The value can be **true** or **false**. Defaults to **false**.
    :param _builtins.str region: Specifies the region in which to query the HSS container kubernetes clusters.
           If omitted, the provider-level region will be used.
    :param _builtins.str scene: Specifies the query scenario type.  
           The valid values are as follows:
           + **cluster_risk**: Cluster risk scenario.
    """
    __args__ = dict()
    __args__['clusterName'] = cluster_name
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['loadAgentInfo'] = load_agent_info
    __args__['region'] = region
    __args__['scene'] = scene
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getContainerKubernetesClusters:getContainerKubernetesClusters', __args__, opts=opts, typ=GetContainerKubernetesClustersResult)
    return __ret__.apply(lambda __response__: GetContainerKubernetesClustersResult(
        cluster_info_lists=pulumi.get(__response__, 'cluster_info_lists'),
        cluster_name=pulumi.get(__response__, 'cluster_name'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        last_update_time=pulumi.get(__response__, 'last_update_time'),
        load_agent_info=pulumi.get(__response__, 'load_agent_info'),
        region=pulumi.get(__response__, 'region'),
        scene=pulumi.get(__response__, 'scene'),
        total_num=pulumi.get(__response__, 'total_num')))
