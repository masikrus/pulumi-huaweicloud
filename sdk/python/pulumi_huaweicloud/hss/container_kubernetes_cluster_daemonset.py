# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerKubernetesClusterDaemonsetArgs', 'ContainerKubernetesClusterDaemonset']

@pulumi.input_type
class ContainerKubernetesClusterDaemonsetArgs:
    def __init__(__self__, *,
                 auto_upgrade: pulumi.Input[_builtins.bool],
                 cluster_id: pulumi.Input[_builtins.str],
                 cluster_name: pulumi.Input[_builtins.str],
                 runtime_infos: pulumi.Input[Sequence[pulumi.Input['ContainerKubernetesClusterDaemonsetRuntimeInfoArgs']]],
                 agent_version: Optional[pulumi.Input[_builtins.str]] = None,
                 cce_protection_type: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 invoked_service: Optional[pulumi.Input[_builtins.str]] = None,
                 prefer_packet_cycle: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule_info: Optional[pulumi.Input['ContainerKubernetesClusterDaemonsetScheduleInfoArgs']] = None):
        """
        The set of arguments for constructing a ContainerKubernetesClusterDaemonset resource.
        :param pulumi.Input[_builtins.bool] auto_upgrade: Specifies whether to enable automatic agent upgrade.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the CCE cluster ID.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the CCE cluster name.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerKubernetesClusterDaemonsetRuntimeInfoArgs']]] runtime_infos: Specifies the container runtime configuration.
               The runtime_info structure is documented below.
        :param pulumi.Input[_builtins.str] agent_version: Specifies the agent version.
        :param pulumi.Input[_builtins.str] cce_protection_type: Specifies the CCE protection type.  
               The valid values are as follows:
               + **cluster_level**: Cluster level protection.
               + **node_level**: Node level protection.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the payment mode.  
               The valid values are as follows:
               + **on_demand**: On-demand.
               + **free_security_check**: Free safety medical examination.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
               
               <a name="runtime_info_struct"></a>
               The `runtime_info` block supports:
        :param pulumi.Input[_builtins.str] invoked_service: Specifies the calling service.  
               The valid values are as follows:
               + **hss**
               + **cce**
               
               Defaults to **hss**.
        :param pulumi.Input[_builtins.bool] prefer_packet_cycle: Specifies whether to prioritize the use of package cycle quotas.
               
               > The `invoked_service`, `charging_mode`, `cce_protection_type`, and `prefer_packet_cycle` parameters are used in
               the CCE integrated protection call scenario.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input['ContainerKubernetesClusterDaemonsetScheduleInfoArgs'] schedule_info: Specifies the node scheduling information.
               The schedule_info structure is documented below.
        """
        pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "runtime_infos", runtime_infos)
        if agent_version is not None:
            pulumi.set(__self__, "agent_version", agent_version)
        if cce_protection_type is not None:
            pulumi.set(__self__, "cce_protection_type", cce_protection_type)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if invoked_service is not None:
            pulumi.set(__self__, "invoked_service", invoked_service)
        if prefer_packet_cycle is not None:
            pulumi.set(__self__, "prefer_packet_cycle", prefer_packet_cycle)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schedule_info is not None:
            pulumi.set(__self__, "schedule_info", schedule_info)

    @_builtins.property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether to enable automatic agent upgrade.
        """
        return pulumi.get(self, "auto_upgrade")

    @auto_upgrade.setter
    def auto_upgrade(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "auto_upgrade", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CCE cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CCE cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="runtimeInfos")
    def runtime_infos(self) -> pulumi.Input[Sequence[pulumi.Input['ContainerKubernetesClusterDaemonsetRuntimeInfoArgs']]]:
        """
        Specifies the container runtime configuration.
        The runtime_info structure is documented below.
        """
        return pulumi.get(self, "runtime_infos")

    @runtime_infos.setter
    def runtime_infos(self, value: pulumi.Input[Sequence[pulumi.Input['ContainerKubernetesClusterDaemonsetRuntimeInfoArgs']]]):
        pulumi.set(self, "runtime_infos", value)

    @_builtins.property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the agent version.
        """
        return pulumi.get(self, "agent_version")

    @agent_version.setter
    def agent_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_version", value)

    @_builtins.property
    @pulumi.getter(name="cceProtectionType")
    def cce_protection_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CCE protection type.  
        The valid values are as follows:
        + **cluster_level**: Cluster level protection.
        + **node_level**: Node level protection.
        """
        return pulumi.get(self, "cce_protection_type")

    @cce_protection_type.setter
    def cce_protection_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cce_protection_type", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the payment mode.  
        The valid values are as follows:
        + **on_demand**: On-demand.
        + **free_security_check**: Free safety medical examination.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.

        <a name="runtime_info_struct"></a>
        The `runtime_info` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="invokedService")
    def invoked_service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the calling service.  
        The valid values are as follows:
        + **hss**
        + **cce**

        Defaults to **hss**.
        """
        return pulumi.get(self, "invoked_service")

    @invoked_service.setter
    def invoked_service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "invoked_service", value)

    @_builtins.property
    @pulumi.getter(name="preferPacketCycle")
    def prefer_packet_cycle(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to prioritize the use of package cycle quotas.

        > The `invoked_service`, `charging_mode`, `cce_protection_type`, and `prefer_packet_cycle` parameters are used in
        the CCE integrated protection call scenario.
        """
        return pulumi.get(self, "prefer_packet_cycle")

    @prefer_packet_cycle.setter
    def prefer_packet_cycle(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "prefer_packet_cycle", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="scheduleInfo")
    def schedule_info(self) -> Optional[pulumi.Input['ContainerKubernetesClusterDaemonsetScheduleInfoArgs']]:
        """
        Specifies the node scheduling information.
        The schedule_info structure is documented below.
        """
        return pulumi.get(self, "schedule_info")

    @schedule_info.setter
    def schedule_info(self, value: Optional[pulumi.Input['ContainerKubernetesClusterDaemonsetScheduleInfoArgs']]):
        pulumi.set(self, "schedule_info", value)


@pulumi.input_type
class _ContainerKubernetesClusterDaemonsetState:
    def __init__(__self__, *,
                 agent_version: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 cce_protection_type: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_status: Optional[pulumi.Input[_builtins.str]] = None,
                 ds_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerKubernetesClusterDaemonsetDsInfoArgs']]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 installed_status: Optional[pulumi.Input[_builtins.str]] = None,
                 invoked_service: Optional[pulumi.Input[_builtins.str]] = None,
                 node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 prefer_packet_cycle: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerKubernetesClusterDaemonsetRuntimeInfoArgs']]]] = None,
                 schedule_info: Optional[pulumi.Input['ContainerKubernetesClusterDaemonsetScheduleInfoArgs']] = None,
                 yaml_content: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ContainerKubernetesClusterDaemonset resources.
        :param pulumi.Input[_builtins.str] agent_version: Specifies the agent version.
        :param pulumi.Input[_builtins.bool] auto_upgrade: Specifies whether to enable automatic agent upgrade.
        :param pulumi.Input[_builtins.str] cce_protection_type: Specifies the CCE protection type.  
               The valid values are as follows:
               + **cluster_level**: Cluster level protection.
               + **node_level**: Node level protection.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the payment mode.  
               The valid values are as follows:
               + **on_demand**: On-demand.
               + **free_security_check**: Free safety medical examination.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the CCE cluster ID.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the CCE cluster name.
        :param pulumi.Input[_builtins.str] cluster_status: The cluster status.  
               The valid values are as follows:
               + **Available**: Indicating that the cluster is in a normal state.
               + **Unavailable**: Indicating cluster anomaly, manual deletion is required or contact the administrator for deletion.
               + **ScalingUp**: Indicating that the cluster is currently undergoing expansion.
               + **ScalingDown**: Indicating that the cluster is currently undergoing capacity reduction.
               + **Creating**: Indicating that the cluster is currently in the process of being created.
               + **Deleting**: Indicating that the cluster is in the process of being deleted.
               + **Upgrading**: Indicating that the cluster is currently undergoing an upgrade process.
               + **Resizing**: The cluster is currently undergoing specification changes.
               + **RollingBack**: Indicating that the cluster is currently in the process of rolling back.
               + **RollbackFailed**: Indicating a cluster rollback exception, please contact the administrator for a rollback retry.
               + **Empty**: The cluster has no resources.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerKubernetesClusterDaemonsetDsInfoArgs']]] ds_infos: The ds status.
               The ds_info structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
               
               <a name="runtime_info_struct"></a>
               The `runtime_info` block supports:
        :param pulumi.Input[_builtins.str] installed_status: The cluster ds installation status.  
               The valid values are as follows:
               + **installing**
               + **install_success**
               + **install_failed**
               + **partically_success**
               + **upgrade_success**
               + **upgrade_failed**
               + **upgrading**
               + **none**
        :param pulumi.Input[_builtins.str] invoked_service: Specifies the calling service.  
               The valid values are as follows:
               + **hss**
               + **cce**
               
               Defaults to **hss**.
        :param pulumi.Input[_builtins.int] node_num: The total number of nodes.
        :param pulumi.Input[_builtins.bool] prefer_packet_cycle: Specifies whether to prioritize the use of package cycle quotas.
               
               > The `invoked_service`, `charging_mode`, `cce_protection_type`, and `prefer_packet_cycle` parameters are used in
               the CCE integrated protection call scenario.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerKubernetesClusterDaemonsetRuntimeInfoArgs']]] runtime_infos: Specifies the container runtime configuration.
               The runtime_info structure is documented below.
        :param pulumi.Input['ContainerKubernetesClusterDaemonsetScheduleInfoArgs'] schedule_info: Specifies the node scheduling information.
               The schedule_info structure is documented below.
        :param pulumi.Input[_builtins.str] yaml_content: The original yaml.
        """
        if agent_version is not None:
            pulumi.set(__self__, "agent_version", agent_version)
        if auto_upgrade is not None:
            pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if cce_protection_type is not None:
            pulumi.set(__self__, "cce_protection_type", cce_protection_type)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_status is not None:
            pulumi.set(__self__, "cluster_status", cluster_status)
        if ds_infos is not None:
            pulumi.set(__self__, "ds_infos", ds_infos)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if installed_status is not None:
            pulumi.set(__self__, "installed_status", installed_status)
        if invoked_service is not None:
            pulumi.set(__self__, "invoked_service", invoked_service)
        if node_num is not None:
            pulumi.set(__self__, "node_num", node_num)
        if prefer_packet_cycle is not None:
            pulumi.set(__self__, "prefer_packet_cycle", prefer_packet_cycle)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if runtime_infos is not None:
            pulumi.set(__self__, "runtime_infos", runtime_infos)
        if schedule_info is not None:
            pulumi.set(__self__, "schedule_info", schedule_info)
        if yaml_content is not None:
            pulumi.set(__self__, "yaml_content", yaml_content)

    @_builtins.property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the agent version.
        """
        return pulumi.get(self, "agent_version")

    @agent_version.setter
    def agent_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_version", value)

    @_builtins.property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable automatic agent upgrade.
        """
        return pulumi.get(self, "auto_upgrade")

    @auto_upgrade.setter
    def auto_upgrade(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_upgrade", value)

    @_builtins.property
    @pulumi.getter(name="cceProtectionType")
    def cce_protection_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CCE protection type.  
        The valid values are as follows:
        + **cluster_level**: Cluster level protection.
        + **node_level**: Node level protection.
        """
        return pulumi.get(self, "cce_protection_type")

    @cce_protection_type.setter
    def cce_protection_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cce_protection_type", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the payment mode.  
        The valid values are as follows:
        + **on_demand**: On-demand.
        + **free_security_check**: Free safety medical examination.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CCE cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CCE cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterStatus")
    def cluster_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster status.  
        The valid values are as follows:
        + **Available**: Indicating that the cluster is in a normal state.
        + **Unavailable**: Indicating cluster anomaly, manual deletion is required or contact the administrator for deletion.
        + **ScalingUp**: Indicating that the cluster is currently undergoing expansion.
        + **ScalingDown**: Indicating that the cluster is currently undergoing capacity reduction.
        + **Creating**: Indicating that the cluster is currently in the process of being created.
        + **Deleting**: Indicating that the cluster is in the process of being deleted.
        + **Upgrading**: Indicating that the cluster is currently undergoing an upgrade process.
        + **Resizing**: The cluster is currently undergoing specification changes.
        + **RollingBack**: Indicating that the cluster is currently in the process of rolling back.
        + **RollbackFailed**: Indicating a cluster rollback exception, please contact the administrator for a rollback retry.
        + **Empty**: The cluster has no resources.
        """
        return pulumi.get(self, "cluster_status")

    @cluster_status.setter
    def cluster_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_status", value)

    @_builtins.property
    @pulumi.getter(name="dsInfos")
    def ds_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerKubernetesClusterDaemonsetDsInfoArgs']]]]:
        """
        The ds status.
        The ds_info structure is documented below.
        """
        return pulumi.get(self, "ds_infos")

    @ds_infos.setter
    def ds_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerKubernetesClusterDaemonsetDsInfoArgs']]]]):
        pulumi.set(self, "ds_infos", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.

        <a name="runtime_info_struct"></a>
        The `runtime_info` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="installedStatus")
    def installed_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster ds installation status.  
        The valid values are as follows:
        + **installing**
        + **install_success**
        + **install_failed**
        + **partically_success**
        + **upgrade_success**
        + **upgrade_failed**
        + **upgrading**
        + **none**
        """
        return pulumi.get(self, "installed_status")

    @installed_status.setter
    def installed_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "installed_status", value)

    @_builtins.property
    @pulumi.getter(name="invokedService")
    def invoked_service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the calling service.  
        The valid values are as follows:
        + **hss**
        + **cce**

        Defaults to **hss**.
        """
        return pulumi.get(self, "invoked_service")

    @invoked_service.setter
    def invoked_service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "invoked_service", value)

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The total number of nodes.
        """
        return pulumi.get(self, "node_num")

    @node_num.setter
    def node_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "node_num", value)

    @_builtins.property
    @pulumi.getter(name="preferPacketCycle")
    def prefer_packet_cycle(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to prioritize the use of package cycle quotas.

        > The `invoked_service`, `charging_mode`, `cce_protection_type`, and `prefer_packet_cycle` parameters are used in
        the CCE integrated protection call scenario.
        """
        return pulumi.get(self, "prefer_packet_cycle")

    @prefer_packet_cycle.setter
    def prefer_packet_cycle(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "prefer_packet_cycle", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="runtimeInfos")
    def runtime_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerKubernetesClusterDaemonsetRuntimeInfoArgs']]]]:
        """
        Specifies the container runtime configuration.
        The runtime_info structure is documented below.
        """
        return pulumi.get(self, "runtime_infos")

    @runtime_infos.setter
    def runtime_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerKubernetesClusterDaemonsetRuntimeInfoArgs']]]]):
        pulumi.set(self, "runtime_infos", value)

    @_builtins.property
    @pulumi.getter(name="scheduleInfo")
    def schedule_info(self) -> Optional[pulumi.Input['ContainerKubernetesClusterDaemonsetScheduleInfoArgs']]:
        """
        Specifies the node scheduling information.
        The schedule_info structure is documented below.
        """
        return pulumi.get(self, "schedule_info")

    @schedule_info.setter
    def schedule_info(self, value: Optional[pulumi.Input['ContainerKubernetesClusterDaemonsetScheduleInfoArgs']]):
        pulumi.set(self, "schedule_info", value)

    @_builtins.property
    @pulumi.getter(name="yamlContent")
    def yaml_content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The original yaml.
        """
        return pulumi.get(self, "yaml_content")

    @yaml_content.setter
    def yaml_content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "yaml_content", value)


@pulumi.type_token("huaweicloud:hss/containerKubernetesClusterDaemonset:ContainerKubernetesClusterDaemonset")
class ContainerKubernetesClusterDaemonset(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_version: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 cce_protection_type: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 invoked_service: Optional[pulumi.Input[_builtins.str]] = None,
                 prefer_packet_cycle: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerKubernetesClusterDaemonsetRuntimeInfoArgs', 'ContainerKubernetesClusterDaemonsetRuntimeInfoArgsDict']]]]] = None,
                 schedule_info: Optional[pulumi.Input[Union['ContainerKubernetesClusterDaemonsetScheduleInfoArgs', 'ContainerKubernetesClusterDaemonsetScheduleInfoArgsDict']]] = None,
                 __props__=None):
        """
        Manages an HSS container kubernetes cluster daemonset resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        cluster_name = config.require_object("clusterName")
        auto_upgrade = config.require_object("autoUpgrade")
        runtime_name = config.require_object("runtimeName")
        test = huaweicloud.hss.ContainerKubernetesClusterDaemonset("test",
            cluster_id=cluster_id,
            cluster_name=cluster_name,
            auto_upgrade=auto_upgrade,
            runtime_infos=[{
                "runtime_name": runtime_name,
            }])
        ```

        ## Import

        The HSS container kubernetes cluster daemonset can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:hss/containerKubernetesClusterDaemonset:ContainerKubernetesClusterDaemonset test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `cluster_id`, `cluster_name`,

        `auto_upgrade`, `agent_version`, `invoked_service`, `charging_mode`, `cce_protection_type`, `prefer_packet_cycle`,

        `enterprise_project_id`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_hss_container_kubernetes_cluster_daemonset" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              cluster_id, cluster_name, auto_upgrade, agent_version, invoked_service, charging_mode, cce_protection_type,
            
              prefer_packet_cycle, enterprise_project_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agent_version: Specifies the agent version.
        :param pulumi.Input[_builtins.bool] auto_upgrade: Specifies whether to enable automatic agent upgrade.
        :param pulumi.Input[_builtins.str] cce_protection_type: Specifies the CCE protection type.  
               The valid values are as follows:
               + **cluster_level**: Cluster level protection.
               + **node_level**: Node level protection.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the payment mode.  
               The valid values are as follows:
               + **on_demand**: On-demand.
               + **free_security_check**: Free safety medical examination.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the CCE cluster ID.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the CCE cluster name.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
               
               <a name="runtime_info_struct"></a>
               The `runtime_info` block supports:
        :param pulumi.Input[_builtins.str] invoked_service: Specifies the calling service.  
               The valid values are as follows:
               + **hss**
               + **cce**
               
               Defaults to **hss**.
        :param pulumi.Input[_builtins.bool] prefer_packet_cycle: Specifies whether to prioritize the use of package cycle quotas.
               
               > The `invoked_service`, `charging_mode`, `cce_protection_type`, and `prefer_packet_cycle` parameters are used in
               the CCE integrated protection call scenario.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerKubernetesClusterDaemonsetRuntimeInfoArgs', 'ContainerKubernetesClusterDaemonsetRuntimeInfoArgsDict']]]] runtime_infos: Specifies the container runtime configuration.
               The runtime_info structure is documented below.
        :param pulumi.Input[Union['ContainerKubernetesClusterDaemonsetScheduleInfoArgs', 'ContainerKubernetesClusterDaemonsetScheduleInfoArgsDict']] schedule_info: Specifies the node scheduling information.
               The schedule_info structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerKubernetesClusterDaemonsetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an HSS container kubernetes cluster daemonset resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        cluster_name = config.require_object("clusterName")
        auto_upgrade = config.require_object("autoUpgrade")
        runtime_name = config.require_object("runtimeName")
        test = huaweicloud.hss.ContainerKubernetesClusterDaemonset("test",
            cluster_id=cluster_id,
            cluster_name=cluster_name,
            auto_upgrade=auto_upgrade,
            runtime_infos=[{
                "runtime_name": runtime_name,
            }])
        ```

        ## Import

        The HSS container kubernetes cluster daemonset can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:hss/containerKubernetesClusterDaemonset:ContainerKubernetesClusterDaemonset test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `cluster_id`, `cluster_name`,

        `auto_upgrade`, `agent_version`, `invoked_service`, `charging_mode`, `cce_protection_type`, `prefer_packet_cycle`,

        `enterprise_project_id`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_hss_container_kubernetes_cluster_daemonset" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              cluster_id, cluster_name, auto_upgrade, agent_version, invoked_service, charging_mode, cce_protection_type,
            
              prefer_packet_cycle, enterprise_project_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ContainerKubernetesClusterDaemonsetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerKubernetesClusterDaemonsetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_version: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 cce_protection_type: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 invoked_service: Optional[pulumi.Input[_builtins.str]] = None,
                 prefer_packet_cycle: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerKubernetesClusterDaemonsetRuntimeInfoArgs', 'ContainerKubernetesClusterDaemonsetRuntimeInfoArgsDict']]]]] = None,
                 schedule_info: Optional[pulumi.Input[Union['ContainerKubernetesClusterDaemonsetScheduleInfoArgs', 'ContainerKubernetesClusterDaemonsetScheduleInfoArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerKubernetesClusterDaemonsetArgs.__new__(ContainerKubernetesClusterDaemonsetArgs)

            __props__.__dict__["agent_version"] = agent_version
            if auto_upgrade is None and not opts.urn:
                raise TypeError("Missing required property 'auto_upgrade'")
            __props__.__dict__["auto_upgrade"] = auto_upgrade
            __props__.__dict__["cce_protection_type"] = cce_protection_type
            __props__.__dict__["charging_mode"] = charging_mode
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["invoked_service"] = invoked_service
            __props__.__dict__["prefer_packet_cycle"] = prefer_packet_cycle
            __props__.__dict__["region"] = region
            if runtime_infos is None and not opts.urn:
                raise TypeError("Missing required property 'runtime_infos'")
            __props__.__dict__["runtime_infos"] = runtime_infos
            __props__.__dict__["schedule_info"] = schedule_info
            __props__.__dict__["cluster_status"] = None
            __props__.__dict__["ds_infos"] = None
            __props__.__dict__["installed_status"] = None
            __props__.__dict__["node_num"] = None
            __props__.__dict__["yaml_content"] = None
        super(ContainerKubernetesClusterDaemonset, __self__).__init__(
            'huaweicloud:hss/containerKubernetesClusterDaemonset:ContainerKubernetesClusterDaemonset',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agent_version: Optional[pulumi.Input[_builtins.str]] = None,
            auto_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
            cce_protection_type: Optional[pulumi.Input[_builtins.str]] = None,
            charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_status: Optional[pulumi.Input[_builtins.str]] = None,
            ds_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerKubernetesClusterDaemonsetDsInfoArgs', 'ContainerKubernetesClusterDaemonsetDsInfoArgsDict']]]]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            installed_status: Optional[pulumi.Input[_builtins.str]] = None,
            invoked_service: Optional[pulumi.Input[_builtins.str]] = None,
            node_num: Optional[pulumi.Input[_builtins.int]] = None,
            prefer_packet_cycle: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            runtime_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerKubernetesClusterDaemonsetRuntimeInfoArgs', 'ContainerKubernetesClusterDaemonsetRuntimeInfoArgsDict']]]]] = None,
            schedule_info: Optional[pulumi.Input[Union['ContainerKubernetesClusterDaemonsetScheduleInfoArgs', 'ContainerKubernetesClusterDaemonsetScheduleInfoArgsDict']]] = None,
            yaml_content: Optional[pulumi.Input[_builtins.str]] = None) -> 'ContainerKubernetesClusterDaemonset':
        """
        Get an existing ContainerKubernetesClusterDaemonset resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agent_version: Specifies the agent version.
        :param pulumi.Input[_builtins.bool] auto_upgrade: Specifies whether to enable automatic agent upgrade.
        :param pulumi.Input[_builtins.str] cce_protection_type: Specifies the CCE protection type.  
               The valid values are as follows:
               + **cluster_level**: Cluster level protection.
               + **node_level**: Node level protection.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the payment mode.  
               The valid values are as follows:
               + **on_demand**: On-demand.
               + **free_security_check**: Free safety medical examination.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the CCE cluster ID.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the CCE cluster name.
        :param pulumi.Input[_builtins.str] cluster_status: The cluster status.  
               The valid values are as follows:
               + **Available**: Indicating that the cluster is in a normal state.
               + **Unavailable**: Indicating cluster anomaly, manual deletion is required or contact the administrator for deletion.
               + **ScalingUp**: Indicating that the cluster is currently undergoing expansion.
               + **ScalingDown**: Indicating that the cluster is currently undergoing capacity reduction.
               + **Creating**: Indicating that the cluster is currently in the process of being created.
               + **Deleting**: Indicating that the cluster is in the process of being deleted.
               + **Upgrading**: Indicating that the cluster is currently undergoing an upgrade process.
               + **Resizing**: The cluster is currently undergoing specification changes.
               + **RollingBack**: Indicating that the cluster is currently in the process of rolling back.
               + **RollbackFailed**: Indicating a cluster rollback exception, please contact the administrator for a rollback retry.
               + **Empty**: The cluster has no resources.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerKubernetesClusterDaemonsetDsInfoArgs', 'ContainerKubernetesClusterDaemonsetDsInfoArgsDict']]]] ds_infos: The ds status.
               The ds_info structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
               
               <a name="runtime_info_struct"></a>
               The `runtime_info` block supports:
        :param pulumi.Input[_builtins.str] installed_status: The cluster ds installation status.  
               The valid values are as follows:
               + **installing**
               + **install_success**
               + **install_failed**
               + **partically_success**
               + **upgrade_success**
               + **upgrade_failed**
               + **upgrading**
               + **none**
        :param pulumi.Input[_builtins.str] invoked_service: Specifies the calling service.  
               The valid values are as follows:
               + **hss**
               + **cce**
               
               Defaults to **hss**.
        :param pulumi.Input[_builtins.int] node_num: The total number of nodes.
        :param pulumi.Input[_builtins.bool] prefer_packet_cycle: Specifies whether to prioritize the use of package cycle quotas.
               
               > The `invoked_service`, `charging_mode`, `cce_protection_type`, and `prefer_packet_cycle` parameters are used in
               the CCE integrated protection call scenario.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerKubernetesClusterDaemonsetRuntimeInfoArgs', 'ContainerKubernetesClusterDaemonsetRuntimeInfoArgsDict']]]] runtime_infos: Specifies the container runtime configuration.
               The runtime_info structure is documented below.
        :param pulumi.Input[Union['ContainerKubernetesClusterDaemonsetScheduleInfoArgs', 'ContainerKubernetesClusterDaemonsetScheduleInfoArgsDict']] schedule_info: Specifies the node scheduling information.
               The schedule_info structure is documented below.
        :param pulumi.Input[_builtins.str] yaml_content: The original yaml.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerKubernetesClusterDaemonsetState.__new__(_ContainerKubernetesClusterDaemonsetState)

        __props__.__dict__["agent_version"] = agent_version
        __props__.__dict__["auto_upgrade"] = auto_upgrade
        __props__.__dict__["cce_protection_type"] = cce_protection_type
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["cluster_status"] = cluster_status
        __props__.__dict__["ds_infos"] = ds_infos
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["installed_status"] = installed_status
        __props__.__dict__["invoked_service"] = invoked_service
        __props__.__dict__["node_num"] = node_num
        __props__.__dict__["prefer_packet_cycle"] = prefer_packet_cycle
        __props__.__dict__["region"] = region
        __props__.__dict__["runtime_infos"] = runtime_infos
        __props__.__dict__["schedule_info"] = schedule_info
        __props__.__dict__["yaml_content"] = yaml_content
        return ContainerKubernetesClusterDaemonset(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the agent version.
        """
        return pulumi.get(self, "agent_version")

    @_builtins.property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable automatic agent upgrade.
        """
        return pulumi.get(self, "auto_upgrade")

    @_builtins.property
    @pulumi.getter(name="cceProtectionType")
    def cce_protection_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the CCE protection type.  
        The valid values are as follows:
        + **cluster_level**: Cluster level protection.
        + **node_level**: Node level protection.
        """
        return pulumi.get(self, "cce_protection_type")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the payment mode.  
        The valid values are as follows:
        + **on_demand**: On-demand.
        + **free_security_check**: Free safety medical examination.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CCE cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CCE cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterStatus")
    def cluster_status(self) -> pulumi.Output[_builtins.str]:
        """
        The cluster status.  
        The valid values are as follows:
        + **Available**: Indicating that the cluster is in a normal state.
        + **Unavailable**: Indicating cluster anomaly, manual deletion is required or contact the administrator for deletion.
        + **ScalingUp**: Indicating that the cluster is currently undergoing expansion.
        + **ScalingDown**: Indicating that the cluster is currently undergoing capacity reduction.
        + **Creating**: Indicating that the cluster is currently in the process of being created.
        + **Deleting**: Indicating that the cluster is in the process of being deleted.
        + **Upgrading**: Indicating that the cluster is currently undergoing an upgrade process.
        + **Resizing**: The cluster is currently undergoing specification changes.
        + **RollingBack**: Indicating that the cluster is currently in the process of rolling back.
        + **RollbackFailed**: Indicating a cluster rollback exception, please contact the administrator for a rollback retry.
        + **Empty**: The cluster has no resources.
        """
        return pulumi.get(self, "cluster_status")

    @_builtins.property
    @pulumi.getter(name="dsInfos")
    def ds_infos(self) -> pulumi.Output[Sequence['outputs.ContainerKubernetesClusterDaemonsetDsInfo']]:
        """
        The ds status.
        The ds_info structure is documented below.
        """
        return pulumi.get(self, "ds_infos")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.

        <a name="runtime_info_struct"></a>
        The `runtime_info` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="installedStatus")
    def installed_status(self) -> pulumi.Output[_builtins.str]:
        """
        The cluster ds installation status.  
        The valid values are as follows:
        + **installing**
        + **install_success**
        + **install_failed**
        + **partically_success**
        + **upgrade_success**
        + **upgrade_failed**
        + **upgrading**
        + **none**
        """
        return pulumi.get(self, "installed_status")

    @_builtins.property
    @pulumi.getter(name="invokedService")
    def invoked_service(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the calling service.  
        The valid values are as follows:
        + **hss**
        + **cce**

        Defaults to **hss**.
        """
        return pulumi.get(self, "invoked_service")

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> pulumi.Output[_builtins.int]:
        """
        The total number of nodes.
        """
        return pulumi.get(self, "node_num")

    @_builtins.property
    @pulumi.getter(name="preferPacketCycle")
    def prefer_packet_cycle(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to prioritize the use of package cycle quotas.

        > The `invoked_service`, `charging_mode`, `cce_protection_type`, and `prefer_packet_cycle` parameters are used in
        the CCE integrated protection call scenario.
        """
        return pulumi.get(self, "prefer_packet_cycle")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="runtimeInfos")
    def runtime_infos(self) -> pulumi.Output[Sequence['outputs.ContainerKubernetesClusterDaemonsetRuntimeInfo']]:
        """
        Specifies the container runtime configuration.
        The runtime_info structure is documented below.
        """
        return pulumi.get(self, "runtime_infos")

    @_builtins.property
    @pulumi.getter(name="scheduleInfo")
    def schedule_info(self) -> pulumi.Output['outputs.ContainerKubernetesClusterDaemonsetScheduleInfo']:
        """
        Specifies the node scheduling information.
        The schedule_info structure is documented below.
        """
        return pulumi.get(self, "schedule_info")

    @_builtins.property
    @pulumi.getter(name="yamlContent")
    def yaml_content(self) -> pulumi.Output[_builtins.str]:
        """
        The original yaml.
        """
        return pulumi.get(self, "yaml_content")

