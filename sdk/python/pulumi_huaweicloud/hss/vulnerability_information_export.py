# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['VulnerabilityInformationExportArgs', 'VulnerabilityInformationExport']

@pulumi.input_type
class VulnerabilityInformationExportArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[_builtins.str],
                 export_headers: pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]],
                 export_size: pulumi.Input[_builtins.int],
                 asset_value: Optional[pulumi.Input[_builtins.str]] = None,
                 cve_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 handle_status: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 label_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repair_priority: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vul_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vul_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vul_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VulnerabilityInformationExport resource.
        :param pulumi.Input[_builtins.str] category: Specifies the type of vulnerability data to be exported.  
               The valid values are as follows:
               + **vul**: Vulnerability.
               + **host**: Host vulnerability.
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]] export_headers: Specifies the header information list for exporting vulnerability
               data.
               Please refer to Example Usage for the format of valid values.
        :param pulumi.Input[_builtins.int] export_size: Specifies the number of exported data items.
        :param pulumi.Input[_builtins.str] asset_value: Specifies the asset importance.  
               The valid values are as follows:
               + **important**
               + **common**
               + **test**
        :param pulumi.Input[_builtins.str] cve_id: Specifies the vulnerability ID.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the hosts
               belong.
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
        :param pulumi.Input[_builtins.str] group_name: Specifies the host group name.
        :param pulumi.Input[_builtins.str] handle_status: Specifies the remediation status.  
               The valid values are as follows:
               + **unhandled**
               + **handled**
        :param pulumi.Input[_builtins.str] host_id: Specifies the host ID. When exporting vulnerabilities from a single host,
               it will be used.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_id_lists: Specifies the list of exported host IDs.
        :param pulumi.Input[_builtins.str] label_list: Specifies the vulnerability label.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repair_priority: Specifies the vulnerability repair priority.  
               The valid values are as follows:
               + **Critical**
               + **High**
               + **Medium**
               + **Low**
        :param pulumi.Input[_builtins.str] status: Specifies the vulnerability status.
        :param pulumi.Input[_builtins.str] type: Specifies the vulnerability type.  
               The valid values are as follows:
               + **linux_vul**: Linux vulnerability.
               + **windows_vul**: Windows vulnerability.
               + **web_cms**: Web-CMS vulnerability.
               + **app_vul**: Application vulnerability.
               + **urgent_vul**: Emergency vulnerability.
        :param pulumi.Input[_builtins.str] vul_id: Specifies the vulnerability ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vul_id_lists: Specifies the list of vulnerability IDs for export.
        :param pulumi.Input[_builtins.str] vul_name: Specifies the vulnerability name.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "export_headers", export_headers)
        pulumi.set(__self__, "export_size", export_size)
        if asset_value is not None:
            pulumi.set(__self__, "asset_value", asset_value)
        if cve_id is not None:
            pulumi.set(__self__, "cve_id", cve_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if handle_status is not None:
            pulumi.set(__self__, "handle_status", handle_status)
        if host_id is not None:
            pulumi.set(__self__, "host_id", host_id)
        if host_id_lists is not None:
            pulumi.set(__self__, "host_id_lists", host_id_lists)
        if label_list is not None:
            pulumi.set(__self__, "label_list", label_list)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if repair_priority is not None:
            pulumi.set(__self__, "repair_priority", repair_priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vul_id is not None:
            pulumi.set(__self__, "vul_id", vul_id)
        if vul_id_lists is not None:
            pulumi.set(__self__, "vul_id_lists", vul_id_lists)
        if vul_name is not None:
            pulumi.set(__self__, "vul_name", vul_name)

    @_builtins.property
    @pulumi.getter
    def category(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of vulnerability data to be exported.  
        The valid values are as follows:
        + **vul**: Vulnerability.
        + **host**: Host vulnerability.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter(name="exportHeaders")
    def export_headers(self) -> pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]:
        """
        Specifies the header information list for exporting vulnerability
        data.
        Please refer to Example Usage for the format of valid values.
        """
        return pulumi.get(self, "export_headers")

    @export_headers.setter
    def export_headers(self, value: pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]):
        pulumi.set(self, "export_headers", value)

    @_builtins.property
    @pulumi.getter(name="exportSize")
    def export_size(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of exported data items.
        """
        return pulumi.get(self, "export_size")

    @export_size.setter
    def export_size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "export_size", value)

    @_builtins.property
    @pulumi.getter(name="assetValue")
    def asset_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the asset importance.  
        The valid values are as follows:
        + **important**
        + **common**
        + **test**
        """
        return pulumi.get(self, "asset_value")

    @asset_value.setter
    def asset_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "asset_value", value)

    @_builtins.property
    @pulumi.getter(name="cveId")
    def cve_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability ID.
        """
        return pulumi.get(self, "cve_id")

    @cve_id.setter
    def cve_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cve_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the hosts
        belong.
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host group name.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter(name="handleStatus")
    def handle_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the remediation status.  
        The valid values are as follows:
        + **unhandled**
        + **handled**
        """
        return pulumi.get(self, "handle_status")

    @handle_status.setter
    def handle_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "handle_status", value)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host ID. When exporting vulnerabilities from a single host,
        it will be used.
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter(name="hostIdLists")
    def host_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of exported host IDs.
        """
        return pulumi.get(self, "host_id_lists")

    @host_id_lists.setter
    def host_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_id_lists", value)

    @_builtins.property
    @pulumi.getter(name="labelList")
    def label_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability label.
        """
        return pulumi.get(self, "label_list")

    @label_list.setter
    def label_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label_list", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="repairPriority")
    def repair_priority(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability repair priority.  
        The valid values are as follows:
        + **Critical**
        + **High**
        + **Medium**
        + **Low**
        """
        return pulumi.get(self, "repair_priority")

    @repair_priority.setter
    def repair_priority(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repair_priority", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability type.  
        The valid values are as follows:
        + **linux_vul**: Linux vulnerability.
        + **windows_vul**: Windows vulnerability.
        + **web_cms**: Web-CMS vulnerability.
        + **app_vul**: Application vulnerability.
        + **urgent_vul**: Emergency vulnerability.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vulId")
    def vul_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability ID.
        """
        return pulumi.get(self, "vul_id")

    @vul_id.setter
    def vul_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vul_id", value)

    @_builtins.property
    @pulumi.getter(name="vulIdLists")
    def vul_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of vulnerability IDs for export.
        """
        return pulumi.get(self, "vul_id_lists")

    @vul_id_lists.setter
    def vul_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vul_id_lists", value)

    @_builtins.property
    @pulumi.getter(name="vulName")
    def vul_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability name.
        """
        return pulumi.get(self, "vul_name")

    @vul_name.setter
    def vul_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vul_name", value)


@pulumi.input_type
class _VulnerabilityInformationExportState:
    def __init__(__self__, *,
                 asset_value: Optional[pulumi.Input[_builtins.str]] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 cve_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 export_headers: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]] = None,
                 export_size: Optional[pulumi.Input[_builtins.int]] = None,
                 file_id: Optional[pulumi.Input[_builtins.str]] = None,
                 file_name: Optional[pulumi.Input[_builtins.str]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 handle_status: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 label_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repair_priority: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vul_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vul_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vul_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VulnerabilityInformationExport resources.
        :param pulumi.Input[_builtins.str] asset_value: Specifies the asset importance.  
               The valid values are as follows:
               + **important**
               + **common**
               + **test**
        :param pulumi.Input[_builtins.str] category: Specifies the type of vulnerability data to be exported.  
               The valid values are as follows:
               + **vul**: Vulnerability.
               + **host**: Host vulnerability.
        :param pulumi.Input[_builtins.str] cve_id: Specifies the vulnerability ID.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the hosts
               belong.
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]] export_headers: Specifies the header information list for exporting vulnerability
               data.
               Please refer to Example Usage for the format of valid values.
        :param pulumi.Input[_builtins.int] export_size: Specifies the number of exported data items.
        :param pulumi.Input[_builtins.str] file_id: The export file ID.
        :param pulumi.Input[_builtins.str] file_name: The export file name.
        :param pulumi.Input[_builtins.str] group_name: Specifies the host group name.
        :param pulumi.Input[_builtins.str] handle_status: Specifies the remediation status.  
               The valid values are as follows:
               + **unhandled**
               + **handled**
        :param pulumi.Input[_builtins.str] host_id: Specifies the host ID. When exporting vulnerabilities from a single host,
               it will be used.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_id_lists: Specifies the list of exported host IDs.
        :param pulumi.Input[_builtins.str] label_list: Specifies the vulnerability label.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repair_priority: Specifies the vulnerability repair priority.  
               The valid values are as follows:
               + **Critical**
               + **High**
               + **Medium**
               + **Low**
        :param pulumi.Input[_builtins.str] status: Specifies the vulnerability status.
        :param pulumi.Input[_builtins.str] task_id: The export task ID.
        :param pulumi.Input[_builtins.str] task_name: The export task name.
        :param pulumi.Input[_builtins.str] task_status: The export task status. The valid values are **success**, **failure**, and **running**.
        :param pulumi.Input[_builtins.str] type: Specifies the vulnerability type.  
               The valid values are as follows:
               + **linux_vul**: Linux vulnerability.
               + **windows_vul**: Windows vulnerability.
               + **web_cms**: Web-CMS vulnerability.
               + **app_vul**: Application vulnerability.
               + **urgent_vul**: Emergency vulnerability.
        :param pulumi.Input[_builtins.str] vul_id: Specifies the vulnerability ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vul_id_lists: Specifies the list of vulnerability IDs for export.
        :param pulumi.Input[_builtins.str] vul_name: Specifies the vulnerability name.
        """
        if asset_value is not None:
            pulumi.set(__self__, "asset_value", asset_value)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if cve_id is not None:
            pulumi.set(__self__, "cve_id", cve_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if export_headers is not None:
            pulumi.set(__self__, "export_headers", export_headers)
        if export_size is not None:
            pulumi.set(__self__, "export_size", export_size)
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if handle_status is not None:
            pulumi.set(__self__, "handle_status", handle_status)
        if host_id is not None:
            pulumi.set(__self__, "host_id", host_id)
        if host_id_lists is not None:
            pulumi.set(__self__, "host_id_lists", host_id_lists)
        if label_list is not None:
            pulumi.set(__self__, "label_list", label_list)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if repair_priority is not None:
            pulumi.set(__self__, "repair_priority", repair_priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if task_status is not None:
            pulumi.set(__self__, "task_status", task_status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vul_id is not None:
            pulumi.set(__self__, "vul_id", vul_id)
        if vul_id_lists is not None:
            pulumi.set(__self__, "vul_id_lists", vul_id_lists)
        if vul_name is not None:
            pulumi.set(__self__, "vul_name", vul_name)

    @_builtins.property
    @pulumi.getter(name="assetValue")
    def asset_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the asset importance.  
        The valid values are as follows:
        + **important**
        + **common**
        + **test**
        """
        return pulumi.get(self, "asset_value")

    @asset_value.setter
    def asset_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "asset_value", value)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of vulnerability data to be exported.  
        The valid values are as follows:
        + **vul**: Vulnerability.
        + **host**: Host vulnerability.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter(name="cveId")
    def cve_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability ID.
        """
        return pulumi.get(self, "cve_id")

    @cve_id.setter
    def cve_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cve_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the hosts
        belong.
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="exportHeaders")
    def export_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]]:
        """
        Specifies the header information list for exporting vulnerability
        data.
        Please refer to Example Usage for the format of valid values.
        """
        return pulumi.get(self, "export_headers")

    @export_headers.setter
    def export_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]]):
        pulumi.set(self, "export_headers", value)

    @_builtins.property
    @pulumi.getter(name="exportSize")
    def export_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of exported data items.
        """
        return pulumi.get(self, "export_size")

    @export_size.setter
    def export_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "export_size", value)

    @_builtins.property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The export file ID.
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file_id", value)

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The export file name.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file_name", value)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host group name.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter(name="handleStatus")
    def handle_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the remediation status.  
        The valid values are as follows:
        + **unhandled**
        + **handled**
        """
        return pulumi.get(self, "handle_status")

    @handle_status.setter
    def handle_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "handle_status", value)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host ID. When exporting vulnerabilities from a single host,
        it will be used.
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter(name="hostIdLists")
    def host_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of exported host IDs.
        """
        return pulumi.get(self, "host_id_lists")

    @host_id_lists.setter
    def host_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_id_lists", value)

    @_builtins.property
    @pulumi.getter(name="labelList")
    def label_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability label.
        """
        return pulumi.get(self, "label_list")

    @label_list.setter
    def label_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label_list", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="repairPriority")
    def repair_priority(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability repair priority.  
        The valid values are as follows:
        + **Critical**
        + **High**
        + **Medium**
        + **Low**
        """
        return pulumi.get(self, "repair_priority")

    @repair_priority.setter
    def repair_priority(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repair_priority", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The export task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_id", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The export task name.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The export task status. The valid values are **success**, **failure**, and **running**.
        """
        return pulumi.get(self, "task_status")

    @task_status.setter
    def task_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability type.  
        The valid values are as follows:
        + **linux_vul**: Linux vulnerability.
        + **windows_vul**: Windows vulnerability.
        + **web_cms**: Web-CMS vulnerability.
        + **app_vul**: Application vulnerability.
        + **urgent_vul**: Emergency vulnerability.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vulId")
    def vul_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability ID.
        """
        return pulumi.get(self, "vul_id")

    @vul_id.setter
    def vul_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vul_id", value)

    @_builtins.property
    @pulumi.getter(name="vulIdLists")
    def vul_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of vulnerability IDs for export.
        """
        return pulumi.get(self, "vul_id_lists")

    @vul_id_lists.setter
    def vul_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vul_id_lists", value)

    @_builtins.property
    @pulumi.getter(name="vulName")
    def vul_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the vulnerability name.
        """
        return pulumi.get(self, "vul_name")

    @vul_name.setter
    def vul_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vul_name", value)


@pulumi.type_token("huaweicloud:hss/vulnerabilityInformationExport:VulnerabilityInformationExport")
class VulnerabilityInformationExport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_value: Optional[pulumi.Input[_builtins.str]] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 cve_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 export_headers: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]] = None,
                 export_size: Optional[pulumi.Input[_builtins.int]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 handle_status: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 label_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repair_priority: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vul_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vul_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vul_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an HSS export vulnerability information resource within HuaweiCloud.

        > This resource is only a one-time action resource for HSS export vulnerability information. Deleting this resource
          will not clear the corresponding request record, but will only remove the resource information from the tf state file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        export_size = config.require_object("exportSize")
        category = config.require_object("category")
        test = huaweicloud.hss.VulnerabilityInformationExport("test",
            export_size=export_size,
            category=category,
            export_headers=[
                [
                    "vul_id",
                    "Vulnerability ID",
                ],
                [
                    "vul_name",
                    "Vulnerability Name",
                ],
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] asset_value: Specifies the asset importance.  
               The valid values are as follows:
               + **important**
               + **common**
               + **test**
        :param pulumi.Input[_builtins.str] category: Specifies the type of vulnerability data to be exported.  
               The valid values are as follows:
               + **vul**: Vulnerability.
               + **host**: Host vulnerability.
        :param pulumi.Input[_builtins.str] cve_id: Specifies the vulnerability ID.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the hosts
               belong.
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]] export_headers: Specifies the header information list for exporting vulnerability
               data.
               Please refer to Example Usage for the format of valid values.
        :param pulumi.Input[_builtins.int] export_size: Specifies the number of exported data items.
        :param pulumi.Input[_builtins.str] group_name: Specifies the host group name.
        :param pulumi.Input[_builtins.str] handle_status: Specifies the remediation status.  
               The valid values are as follows:
               + **unhandled**
               + **handled**
        :param pulumi.Input[_builtins.str] host_id: Specifies the host ID. When exporting vulnerabilities from a single host,
               it will be used.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_id_lists: Specifies the list of exported host IDs.
        :param pulumi.Input[_builtins.str] label_list: Specifies the vulnerability label.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repair_priority: Specifies the vulnerability repair priority.  
               The valid values are as follows:
               + **Critical**
               + **High**
               + **Medium**
               + **Low**
        :param pulumi.Input[_builtins.str] status: Specifies the vulnerability status.
        :param pulumi.Input[_builtins.str] type: Specifies the vulnerability type.  
               The valid values are as follows:
               + **linux_vul**: Linux vulnerability.
               + **windows_vul**: Windows vulnerability.
               + **web_cms**: Web-CMS vulnerability.
               + **app_vul**: Application vulnerability.
               + **urgent_vul**: Emergency vulnerability.
        :param pulumi.Input[_builtins.str] vul_id: Specifies the vulnerability ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vul_id_lists: Specifies the list of vulnerability IDs for export.
        :param pulumi.Input[_builtins.str] vul_name: Specifies the vulnerability name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VulnerabilityInformationExportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an HSS export vulnerability information resource within HuaweiCloud.

        > This resource is only a one-time action resource for HSS export vulnerability information. Deleting this resource
          will not clear the corresponding request record, but will only remove the resource information from the tf state file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        export_size = config.require_object("exportSize")
        category = config.require_object("category")
        test = huaweicloud.hss.VulnerabilityInformationExport("test",
            export_size=export_size,
            category=category,
            export_headers=[
                [
                    "vul_id",
                    "Vulnerability ID",
                ],
                [
                    "vul_name",
                    "Vulnerability Name",
                ],
            ])
        ```

        :param str resource_name: The name of the resource.
        :param VulnerabilityInformationExportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VulnerabilityInformationExportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_value: Optional[pulumi.Input[_builtins.str]] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 cve_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 export_headers: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]] = None,
                 export_size: Optional[pulumi.Input[_builtins.int]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 handle_status: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 label_list: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repair_priority: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vul_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vul_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vul_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VulnerabilityInformationExportArgs.__new__(VulnerabilityInformationExportArgs)

            __props__.__dict__["asset_value"] = asset_value
            if category is None and not opts.urn:
                raise TypeError("Missing required property 'category'")
            __props__.__dict__["category"] = category
            __props__.__dict__["cve_id"] = cve_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if export_headers is None and not opts.urn:
                raise TypeError("Missing required property 'export_headers'")
            __props__.__dict__["export_headers"] = export_headers
            if export_size is None and not opts.urn:
                raise TypeError("Missing required property 'export_size'")
            __props__.__dict__["export_size"] = export_size
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["handle_status"] = handle_status
            __props__.__dict__["host_id"] = host_id
            __props__.__dict__["host_id_lists"] = host_id_lists
            __props__.__dict__["label_list"] = label_list
            __props__.__dict__["region"] = region
            __props__.__dict__["repair_priority"] = repair_priority
            __props__.__dict__["status"] = status
            __props__.__dict__["type"] = type
            __props__.__dict__["vul_id"] = vul_id
            __props__.__dict__["vul_id_lists"] = vul_id_lists
            __props__.__dict__["vul_name"] = vul_name
            __props__.__dict__["file_id"] = None
            __props__.__dict__["file_name"] = None
            __props__.__dict__["task_id"] = None
            __props__.__dict__["task_name"] = None
            __props__.__dict__["task_status"] = None
        super(VulnerabilityInformationExport, __self__).__init__(
            'huaweicloud:hss/vulnerabilityInformationExport:VulnerabilityInformationExport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            asset_value: Optional[pulumi.Input[_builtins.str]] = None,
            category: Optional[pulumi.Input[_builtins.str]] = None,
            cve_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            export_headers: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]] = None,
            export_size: Optional[pulumi.Input[_builtins.int]] = None,
            file_id: Optional[pulumi.Input[_builtins.str]] = None,
            file_name: Optional[pulumi.Input[_builtins.str]] = None,
            group_name: Optional[pulumi.Input[_builtins.str]] = None,
            handle_status: Optional[pulumi.Input[_builtins.str]] = None,
            host_id: Optional[pulumi.Input[_builtins.str]] = None,
            host_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            label_list: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            repair_priority: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            task_id: Optional[pulumi.Input[_builtins.str]] = None,
            task_name: Optional[pulumi.Input[_builtins.str]] = None,
            task_status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            vul_id: Optional[pulumi.Input[_builtins.str]] = None,
            vul_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            vul_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'VulnerabilityInformationExport':
        """
        Get an existing VulnerabilityInformationExport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] asset_value: Specifies the asset importance.  
               The valid values are as follows:
               + **important**
               + **common**
               + **test**
        :param pulumi.Input[_builtins.str] category: Specifies the type of vulnerability data to be exported.  
               The valid values are as follows:
               + **vul**: Vulnerability.
               + **host**: Host vulnerability.
        :param pulumi.Input[_builtins.str] cve_id: Specifies the vulnerability ID.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the hosts
               belong.
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]] export_headers: Specifies the header information list for exporting vulnerability
               data.
               Please refer to Example Usage for the format of valid values.
        :param pulumi.Input[_builtins.int] export_size: Specifies the number of exported data items.
        :param pulumi.Input[_builtins.str] file_id: The export file ID.
        :param pulumi.Input[_builtins.str] file_name: The export file name.
        :param pulumi.Input[_builtins.str] group_name: Specifies the host group name.
        :param pulumi.Input[_builtins.str] handle_status: Specifies the remediation status.  
               The valid values are as follows:
               + **unhandled**
               + **handled**
        :param pulumi.Input[_builtins.str] host_id: Specifies the host ID. When exporting vulnerabilities from a single host,
               it will be used.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_id_lists: Specifies the list of exported host IDs.
        :param pulumi.Input[_builtins.str] label_list: Specifies the vulnerability label.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repair_priority: Specifies the vulnerability repair priority.  
               The valid values are as follows:
               + **Critical**
               + **High**
               + **Medium**
               + **Low**
        :param pulumi.Input[_builtins.str] status: Specifies the vulnerability status.
        :param pulumi.Input[_builtins.str] task_id: The export task ID.
        :param pulumi.Input[_builtins.str] task_name: The export task name.
        :param pulumi.Input[_builtins.str] task_status: The export task status. The valid values are **success**, **failure**, and **running**.
        :param pulumi.Input[_builtins.str] type: Specifies the vulnerability type.  
               The valid values are as follows:
               + **linux_vul**: Linux vulnerability.
               + **windows_vul**: Windows vulnerability.
               + **web_cms**: Web-CMS vulnerability.
               + **app_vul**: Application vulnerability.
               + **urgent_vul**: Emergency vulnerability.
        :param pulumi.Input[_builtins.str] vul_id: Specifies the vulnerability ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vul_id_lists: Specifies the list of vulnerability IDs for export.
        :param pulumi.Input[_builtins.str] vul_name: Specifies the vulnerability name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VulnerabilityInformationExportState.__new__(_VulnerabilityInformationExportState)

        __props__.__dict__["asset_value"] = asset_value
        __props__.__dict__["category"] = category
        __props__.__dict__["cve_id"] = cve_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["export_headers"] = export_headers
        __props__.__dict__["export_size"] = export_size
        __props__.__dict__["file_id"] = file_id
        __props__.__dict__["file_name"] = file_name
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["handle_status"] = handle_status
        __props__.__dict__["host_id"] = host_id
        __props__.__dict__["host_id_lists"] = host_id_lists
        __props__.__dict__["label_list"] = label_list
        __props__.__dict__["region"] = region
        __props__.__dict__["repair_priority"] = repair_priority
        __props__.__dict__["status"] = status
        __props__.__dict__["task_id"] = task_id
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["task_status"] = task_status
        __props__.__dict__["type"] = type
        __props__.__dict__["vul_id"] = vul_id
        __props__.__dict__["vul_id_lists"] = vul_id_lists
        __props__.__dict__["vul_name"] = vul_name
        return VulnerabilityInformationExport(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="assetValue")
    def asset_value(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the asset importance.  
        The valid values are as follows:
        + **important**
        + **common**
        + **test**
        """
        return pulumi.get(self, "asset_value")

    @_builtins.property
    @pulumi.getter
    def category(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of vulnerability data to be exported.  
        The valid values are as follows:
        + **vul**: Vulnerability.
        + **host**: Host vulnerability.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="cveId")
    def cve_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the vulnerability ID.
        """
        return pulumi.get(self, "cve_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the hosts
        belong.
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="exportHeaders")
    def export_headers(self) -> pulumi.Output[Sequence[Sequence[_builtins.str]]]:
        """
        Specifies the header information list for exporting vulnerability
        data.
        Please refer to Example Usage for the format of valid values.
        """
        return pulumi.get(self, "export_headers")

    @_builtins.property
    @pulumi.getter(name="exportSize")
    def export_size(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the number of exported data items.
        """
        return pulumi.get(self, "export_size")

    @_builtins.property
    @pulumi.getter(name="fileId")
    def file_id(self) -> pulumi.Output[_builtins.str]:
        """
        The export file ID.
        """
        return pulumi.get(self, "file_id")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Output[_builtins.str]:
        """
        The export file name.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the host group name.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="handleStatus")
    def handle_status(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the remediation status.  
        The valid values are as follows:
        + **unhandled**
        + **handled**
        """
        return pulumi.get(self, "handle_status")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the host ID. When exporting vulnerabilities from a single host,
        it will be used.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostIdLists")
    def host_id_lists(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the list of exported host IDs.
        """
        return pulumi.get(self, "host_id_lists")

    @_builtins.property
    @pulumi.getter(name="labelList")
    def label_list(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the vulnerability label.
        """
        return pulumi.get(self, "label_list")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="repairPriority")
    def repair_priority(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the vulnerability repair priority.  
        The valid values are as follows:
        + **Critical**
        + **High**
        + **Medium**
        + **Low**
        """
        return pulumi.get(self, "repair_priority")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the vulnerability status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[_builtins.str]:
        """
        The export task ID.
        """
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[_builtins.str]:
        """
        The export task name.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> pulumi.Output[_builtins.str]:
        """
        The export task status. The valid values are **success**, **failure**, and **running**.
        """
        return pulumi.get(self, "task_status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the vulnerability type.  
        The valid values are as follows:
        + **linux_vul**: Linux vulnerability.
        + **windows_vul**: Windows vulnerability.
        + **web_cms**: Web-CMS vulnerability.
        + **app_vul**: Application vulnerability.
        + **urgent_vul**: Emergency vulnerability.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vulId")
    def vul_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the vulnerability ID.
        """
        return pulumi.get(self, "vul_id")

    @_builtins.property
    @pulumi.getter(name="vulIdLists")
    def vul_id_lists(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the list of vulnerability IDs for export.
        """
        return pulumi.get(self, "vul_id_lists")

    @_builtins.property
    @pulumi.getter(name="vulName")
    def vul_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the vulnerability name.
        """
        return pulumi.get(self, "vul_name")

