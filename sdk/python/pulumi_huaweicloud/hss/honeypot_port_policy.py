# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HoneypotPortPolicyArgs', 'HoneypotPortPolicy']

@pulumi.input_type
class HoneypotPortPolicyArgs:
    def __init__(__self__, *,
                 os_type: pulumi.Input[_builtins.str],
                 policy_name: pulumi.Input[_builtins.str],
                 ports_lists: pulumi.Input[Sequence[pulumi.Input['HoneypotPortPolicyPortsListArgs']]],
                 white_ips: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a HoneypotPortPolicy resource.
        :param pulumi.Input[_builtins.str] os_type: Specifies the OS type.
               The valid values are as follows:
               + **Linux**
               + **Windows**
        :param pulumi.Input[_builtins.str] policy_name: Specifies the honeypot policy name.
               The name must be unique.
        :param pulumi.Input[Sequence[pulumi.Input['HoneypotPortPolicyPortsListArgs']]] ports_lists: Specifies the port and protocol list.
               The ports_list structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] white_ips: Specifies the IP addresses whitelist.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
               
               <a name="honeypot_policy_ports_struct"></a>
               The `ports_list` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] group_lists: Specifies the server group ID list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_ids: Specifies the ID list of the hosts.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "ports_lists", ports_lists)
        pulumi.set(__self__, "white_ips", white_ips)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group_lists is not None:
            pulumi.set(__self__, "group_lists", group_lists)
        if host_ids is not None:
            pulumi.set(__self__, "host_ids", host_ids)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the OS type.
        The valid values are as follows:
        + **Linux**
        + **Windows**
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the honeypot policy name.
        The name must be unique.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_name", value)

    @_builtins.property
    @pulumi.getter(name="portsLists")
    def ports_lists(self) -> pulumi.Input[Sequence[pulumi.Input['HoneypotPortPolicyPortsListArgs']]]:
        """
        Specifies the port and protocol list.
        The ports_list structure is documented below.
        """
        return pulumi.get(self, "ports_lists")

    @ports_lists.setter
    def ports_lists(self, value: pulumi.Input[Sequence[pulumi.Input['HoneypotPortPolicyPortsListArgs']]]):
        pulumi.set(self, "ports_lists", value)

    @_builtins.property
    @pulumi.getter(name="whiteIps")
    def white_ips(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the IP addresses whitelist.
        """
        return pulumi.get(self, "white_ips")

    @white_ips.setter
    def white_ips(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "white_ips", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.

        <a name="honeypot_policy_ports_struct"></a>
        The `ports_list` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="groupLists")
    def group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the server group ID list.
        """
        return pulumi.get(self, "group_lists")

    @group_lists.setter
    def group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "group_lists", value)

    @_builtins.property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the ID list of the hosts.
        """
        return pulumi.get(self, "host_ids")

    @host_ids.setter
    def host_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_ids", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _HoneypotPortPolicyState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 port_lists: Optional[pulumi.Input[Sequence[pulumi.Input['HoneypotPortPolicyPortListArgs']]]] = None,
                 ports_lists: Optional[pulumi.Input[Sequence[pulumi.Input['HoneypotPortPolicyPortsListArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 white_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering HoneypotPortPolicy resources.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
               
               <a name="honeypot_policy_ports_struct"></a>
               The `ports_list` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] group_lists: Specifies the server group ID list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_ids: Specifies the ID list of the hosts.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_lists: The host ID list.
        :param pulumi.Input[_builtins.str] os_type: Specifies the OS type.
               The valid values are as follows:
               + **Linux**
               + **Windows**
        :param pulumi.Input[_builtins.str] policy_name: Specifies the honeypot policy name.
               The name must be unique.
        :param pulumi.Input[Sequence[pulumi.Input['HoneypotPortPolicyPortListArgs']]] port_lists: The port and protocol list.
               The port_list structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['HoneypotPortPolicyPortsListArgs']]] ports_lists: Specifies the port and protocol list.
               The ports_list structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] white_ips: Specifies the IP addresses whitelist.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group_lists is not None:
            pulumi.set(__self__, "group_lists", group_lists)
        if host_ids is not None:
            pulumi.set(__self__, "host_ids", host_ids)
        if host_lists is not None:
            pulumi.set(__self__, "host_lists", host_lists)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if port_lists is not None:
            pulumi.set(__self__, "port_lists", port_lists)
        if ports_lists is not None:
            pulumi.set(__self__, "ports_lists", ports_lists)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if white_ips is not None:
            pulumi.set(__self__, "white_ips", white_ips)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.

        <a name="honeypot_policy_ports_struct"></a>
        The `ports_list` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="groupLists")
    def group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the server group ID list.
        """
        return pulumi.get(self, "group_lists")

    @group_lists.setter
    def group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "group_lists", value)

    @_builtins.property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the ID list of the hosts.
        """
        return pulumi.get(self, "host_ids")

    @host_ids.setter
    def host_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_ids", value)

    @_builtins.property
    @pulumi.getter(name="hostLists")
    def host_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The host ID list.
        """
        return pulumi.get(self, "host_lists")

    @host_lists.setter
    def host_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_lists", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OS type.
        The valid values are as follows:
        + **Linux**
        + **Windows**
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the honeypot policy name.
        The name must be unique.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_name", value)

    @_builtins.property
    @pulumi.getter(name="portLists")
    def port_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HoneypotPortPolicyPortListArgs']]]]:
        """
        The port and protocol list.
        The port_list structure is documented below.
        """
        return pulumi.get(self, "port_lists")

    @port_lists.setter
    def port_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HoneypotPortPolicyPortListArgs']]]]):
        pulumi.set(self, "port_lists", value)

    @_builtins.property
    @pulumi.getter(name="portsLists")
    def ports_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HoneypotPortPolicyPortsListArgs']]]]:
        """
        Specifies the port and protocol list.
        The ports_list structure is documented below.
        """
        return pulumi.get(self, "ports_lists")

    @ports_lists.setter
    def ports_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HoneypotPortPolicyPortsListArgs']]]]):
        pulumi.set(self, "ports_lists", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="whiteIps")
    def white_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the IP addresses whitelist.
        """
        return pulumi.get(self, "white_ips")

    @white_ips.setter
    def white_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "white_ips", value)


@pulumi.type_token("huaweicloud:hss/honeypotPortPolicy:HoneypotPortPolicy")
class HoneypotPortPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ports_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HoneypotPortPolicyPortsListArgs', 'HoneypotPortPolicyPortsListArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 white_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a dynamic port honeypot policy resource within HuaweiCloud.

        > Create the dynamic port honeypot policy resource need to meet the following conditions:
          <br/>1. The server that not bound the EIP.
          <br/>2. The HSS premium edition or higher has been enabled on the server.
          <br/>3. The server agent is online. The Windows agent version is 4.0.22 or later, and the Linux agent version
          is 3.2.10 or later.
          <br/>4. For more details, please refer to [document](https://support.huaweicloud.com/intl/en-us/usermanual-hss2.0/hss_01_0600.html).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_name = config.require_object("policyName")
        os_type = config.require_object("osType")
        white_ip = config.require_object("whiteIp")
        host_id = config.require_object("hostId")
        test = huaweicloud.hss.HoneypotPortPolicy("test",
            policy_name=policy_name,
            os_type=os_type,
            ports_lists=[
                {
                    "port": 8006,
                    "protocol": "tcp",
                },
                {
                    "port": 8008,
                    "protocol": "tcp",
                },
            ],
            white_ips=white_ip,
            host_ids=host_id)
        ```

        ## Import

        The resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:hss/honeypotPortPolicy:HoneypotPortPolicy test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `ports_list`, `host_id`, `group_list`, `enterprise_project_id`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_hss_honeypot_port_policy" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              "ports_list", host_id, group_list, enterprise_project_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
               
               <a name="honeypot_policy_ports_struct"></a>
               The `ports_list` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] group_lists: Specifies the server group ID list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_ids: Specifies the ID list of the hosts.
        :param pulumi.Input[_builtins.str] os_type: Specifies the OS type.
               The valid values are as follows:
               + **Linux**
               + **Windows**
        :param pulumi.Input[_builtins.str] policy_name: Specifies the honeypot policy name.
               The name must be unique.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HoneypotPortPolicyPortsListArgs', 'HoneypotPortPolicyPortsListArgsDict']]]] ports_lists: Specifies the port and protocol list.
               The ports_list structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] white_ips: Specifies the IP addresses whitelist.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HoneypotPortPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a dynamic port honeypot policy resource within HuaweiCloud.

        > Create the dynamic port honeypot policy resource need to meet the following conditions:
          <br/>1. The server that not bound the EIP.
          <br/>2. The HSS premium edition or higher has been enabled on the server.
          <br/>3. The server agent is online. The Windows agent version is 4.0.22 or later, and the Linux agent version
          is 3.2.10 or later.
          <br/>4. For more details, please refer to [document](https://support.huaweicloud.com/intl/en-us/usermanual-hss2.0/hss_01_0600.html).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_name = config.require_object("policyName")
        os_type = config.require_object("osType")
        white_ip = config.require_object("whiteIp")
        host_id = config.require_object("hostId")
        test = huaweicloud.hss.HoneypotPortPolicy("test",
            policy_name=policy_name,
            os_type=os_type,
            ports_lists=[
                {
                    "port": 8006,
                    "protocol": "tcp",
                },
                {
                    "port": 8008,
                    "protocol": "tcp",
                },
            ],
            white_ips=white_ip,
            host_ids=host_id)
        ```

        ## Import

        The resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:hss/honeypotPortPolicy:HoneypotPortPolicy test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `ports_list`, `host_id`, `group_list`, `enterprise_project_id`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_hss_honeypot_port_policy" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              "ports_list", host_id, group_list, enterprise_project_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param HoneypotPortPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HoneypotPortPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ports_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HoneypotPortPolicyPortsListArgs', 'HoneypotPortPolicyPortsListArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 white_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HoneypotPortPolicyArgs.__new__(HoneypotPortPolicyArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["group_lists"] = group_lists
            __props__.__dict__["host_ids"] = host_ids
            if os_type is None and not opts.urn:
                raise TypeError("Missing required property 'os_type'")
            __props__.__dict__["os_type"] = os_type
            if policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'policy_name'")
            __props__.__dict__["policy_name"] = policy_name
            if ports_lists is None and not opts.urn:
                raise TypeError("Missing required property 'ports_lists'")
            __props__.__dict__["ports_lists"] = ports_lists
            __props__.__dict__["region"] = region
            if white_ips is None and not opts.urn:
                raise TypeError("Missing required property 'white_ips'")
            __props__.__dict__["white_ips"] = white_ips
            __props__.__dict__["host_lists"] = None
            __props__.__dict__["port_lists"] = None
        super(HoneypotPortPolicy, __self__).__init__(
            'huaweicloud:hss/honeypotPortPolicy:HoneypotPortPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            host_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            os_type: Optional[pulumi.Input[_builtins.str]] = None,
            policy_name: Optional[pulumi.Input[_builtins.str]] = None,
            port_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HoneypotPortPolicyPortListArgs', 'HoneypotPortPolicyPortListArgsDict']]]]] = None,
            ports_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HoneypotPortPolicyPortsListArgs', 'HoneypotPortPolicyPortsListArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            white_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'HoneypotPortPolicy':
        """
        Get an existing HoneypotPortPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
               
               <a name="honeypot_policy_ports_struct"></a>
               The `ports_list` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] group_lists: Specifies the server group ID list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_ids: Specifies the ID list of the hosts.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_lists: The host ID list.
        :param pulumi.Input[_builtins.str] os_type: Specifies the OS type.
               The valid values are as follows:
               + **Linux**
               + **Windows**
        :param pulumi.Input[_builtins.str] policy_name: Specifies the honeypot policy name.
               The name must be unique.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HoneypotPortPolicyPortListArgs', 'HoneypotPortPolicyPortListArgsDict']]]] port_lists: The port and protocol list.
               The port_list structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HoneypotPortPolicyPortsListArgs', 'HoneypotPortPolicyPortsListArgsDict']]]] ports_lists: Specifies the port and protocol list.
               The ports_list structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] white_ips: Specifies the IP addresses whitelist.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HoneypotPortPolicyState.__new__(_HoneypotPortPolicyState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["group_lists"] = group_lists
        __props__.__dict__["host_ids"] = host_ids
        __props__.__dict__["host_lists"] = host_lists
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["policy_name"] = policy_name
        __props__.__dict__["port_lists"] = port_lists
        __props__.__dict__["ports_lists"] = ports_lists
        __props__.__dict__["region"] = region
        __props__.__dict__["white_ips"] = white_ips
        return HoneypotPortPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.

        <a name="honeypot_policy_ports_struct"></a>
        The `ports_list` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="groupLists")
    def group_lists(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the server group ID list.
        """
        return pulumi.get(self, "group_lists")

    @_builtins.property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the ID list of the hosts.
        """
        return pulumi.get(self, "host_ids")

    @_builtins.property
    @pulumi.getter(name="hostLists")
    def host_lists(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The host ID list.
        """
        return pulumi.get(self, "host_lists")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the OS type.
        The valid values are as follows:
        + **Linux**
        + **Windows**
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the honeypot policy name.
        The name must be unique.
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="portLists")
    def port_lists(self) -> pulumi.Output[Sequence['outputs.HoneypotPortPolicyPortList']]:
        """
        The port and protocol list.
        The port_list structure is documented below.
        """
        return pulumi.get(self, "port_lists")

    @_builtins.property
    @pulumi.getter(name="portsLists")
    def ports_lists(self) -> pulumi.Output[Sequence['outputs.HoneypotPortPolicyPortsList']]:
        """
        Specifies the port and protocol list.
        The ports_list structure is documented below.
        """
        return pulumi.get(self, "ports_lists")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="whiteIps")
    def white_ips(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the IP addresses whitelist.
        """
        return pulumi.get(self, "white_ips")

