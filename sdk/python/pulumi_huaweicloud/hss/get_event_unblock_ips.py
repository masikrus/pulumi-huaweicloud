# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEventUnblockIpsResult',
    'AwaitableGetEventUnblockIpsResult',
    'get_event_unblock_ips',
    'get_event_unblock_ips_output',
]

@pulumi.output_type
class GetEventUnblockIpsResult:
    """
    A collection of values returned by getEventUnblockIps.
    """
    def __init__(__self__, data_lists=None, enterprise_project_id=None, host_name=None, id=None, intercept_status=None, last_days=None, region=None, src_ip=None):
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        pulumi.set(__self__, "host_name", host_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if intercept_status and not isinstance(intercept_status, str):
            raise TypeError("Expected argument 'intercept_status' to be a str")
        pulumi.set(__self__, "intercept_status", intercept_status)
        if last_days and not isinstance(last_days, int):
            raise TypeError("Expected argument 'last_days' to be a int")
        pulumi.set(__self__, "last_days", last_days)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if src_ip and not isinstance(src_ip, str):
            raise TypeError("Expected argument 'src_ip' to be a str")
        pulumi.set(__self__, "src_ip", src_ip)

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetEventUnblockIpsDataListResult']:
        """
        The details of intercepted IP list.
        The data_list structure is documented below.
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interceptStatus")
    def intercept_status(self) -> Optional[_builtins.str]:
        """
        The interception status.
        """
        return pulumi.get(self, "intercept_status")

    @_builtins.property
    @pulumi.getter(name="lastDays")
    def last_days(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "last_days")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[_builtins.str]:
        """
        The IP address of the attack source.
        """
        return pulumi.get(self, "src_ip")


class AwaitableGetEventUnblockIpsResult(GetEventUnblockIpsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventUnblockIpsResult(
            data_lists=self.data_lists,
            enterprise_project_id=self.enterprise_project_id,
            host_name=self.host_name,
            id=self.id,
            intercept_status=self.intercept_status,
            last_days=self.last_days,
            region=self.region,
            src_ip=self.src_ip)


def get_event_unblock_ips(enterprise_project_id: Optional[_builtins.str] = None,
                          host_name: Optional[_builtins.str] = None,
                          intercept_status: Optional[_builtins.str] = None,
                          last_days: Optional[_builtins.int] = None,
                          region: Optional[_builtins.str] = None,
                          src_ip: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventUnblockIpsResult:
    """
    Use this data source to get the list of HSS unblock IPs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_event_unblock_ips()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the hosts
           belong.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.str intercept_status: Specifies interception status.
           The valid values are as follows:
           + **intercepted**: Indicates that it has been intercepted.
           + **canceled**: Indicates that it has been unblocked.
           + **cancelling**: Indicates pending unblock.
    :param _builtins.int last_days: Specifies the query time range and number of days.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str src_ip: Specifies the IP address of the attack source.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostName'] = host_name
    __args__['interceptStatus'] = intercept_status
    __args__['lastDays'] = last_days
    __args__['region'] = region
    __args__['srcIp'] = src_ip
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getEventUnblockIps:getEventUnblockIps', __args__, opts=opts, typ=GetEventUnblockIpsResult).value

    return AwaitableGetEventUnblockIpsResult(
        data_lists=pulumi.get(__ret__, 'data_lists'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        host_name=pulumi.get(__ret__, 'host_name'),
        id=pulumi.get(__ret__, 'id'),
        intercept_status=pulumi.get(__ret__, 'intercept_status'),
        last_days=pulumi.get(__ret__, 'last_days'),
        region=pulumi.get(__ret__, 'region'),
        src_ip=pulumi.get(__ret__, 'src_ip'))
def get_event_unblock_ips_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 host_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 intercept_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 last_days: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 src_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEventUnblockIpsResult]:
    """
    Use this data source to get the list of HSS unblock IPs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_event_unblock_ips()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the hosts
           belong.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.str intercept_status: Specifies interception status.
           The valid values are as follows:
           + **intercepted**: Indicates that it has been intercepted.
           + **canceled**: Indicates that it has been unblocked.
           + **cancelling**: Indicates pending unblock.
    :param _builtins.int last_days: Specifies the query time range and number of days.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str src_ip: Specifies the IP address of the attack source.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostName'] = host_name
    __args__['interceptStatus'] = intercept_status
    __args__['lastDays'] = last_days
    __args__['region'] = region
    __args__['srcIp'] = src_ip
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getEventUnblockIps:getEventUnblockIps', __args__, opts=opts, typ=GetEventUnblockIpsResult)
    return __ret__.apply(lambda __response__: GetEventUnblockIpsResult(
        data_lists=pulumi.get(__response__, 'data_lists'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        host_name=pulumi.get(__response__, 'host_name'),
        id=pulumi.get(__response__, 'id'),
        intercept_status=pulumi.get(__response__, 'intercept_status'),
        last_days=pulumi.get(__response__, 'last_days'),
        region=pulumi.get(__response__, 'region'),
        src_ip=pulumi.get(__response__, 'src_ip')))
