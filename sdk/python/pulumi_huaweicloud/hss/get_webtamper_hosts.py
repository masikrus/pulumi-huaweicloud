# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetWebtamperHostsResult',
    'AwaitableGetWebtamperHostsResult',
    'get_webtamper_hosts',
    'get_webtamper_hosts_output',
]

@pulumi.output_type
class GetWebtamperHostsResult:
    """
    A collection of values returned by getWebtamperHosts.
    """
    def __init__(__self__, enterprise_project_id=None, group_name=None, host_id=None, hosts=None, id=None, name=None, os_type=None, private_ip=None, protect_status=None, public_ip=None, rasp_protect_status=None, region=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        pulumi.set(__self__, "group_name", group_name)
        if host_id and not isinstance(host_id, str):
            raise TypeError("Expected argument 'host_id' to be a str")
        pulumi.set(__self__, "host_id", host_id)
        if hosts and not isinstance(hosts, list):
            raise TypeError("Expected argument 'hosts' to be a list")
        pulumi.set(__self__, "hosts", hosts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        pulumi.set(__self__, "os_type", os_type)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if protect_status and not isinstance(protect_status, str):
            raise TypeError("Expected argument 'protect_status' to be a str")
        pulumi.set(__self__, "protect_status", protect_status)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if rasp_protect_status and not isinstance(rasp_protect_status, str):
            raise TypeError("Expected argument 'rasp_protect_status' to be a str")
        pulumi.set(__self__, "rasp_protect_status", rasp_protect_status)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[_builtins.str]:
        """
        The host group name to which the web tamper host belongs.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetWebtamperHostsHostResult']:
        """
        All web tamper hosts that match the filter parameters.  
        The hosts structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the web tamper host.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[_builtins.str]:
        """
        The operating system type of the web tamper host.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        The private IP address of the web tamper host.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> Optional[_builtins.str]:
        """
        The protection status of the web tamper host.
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The elastic public IP address of the web tamper host.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="raspProtectStatus")
    def rasp_protect_status(self) -> Optional[_builtins.str]:
        """
        The dynamic protection status of the web tamper host.
        """
        return pulumi.get(self, "rasp_protect_status")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetWebtamperHostsResult(GetWebtamperHostsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebtamperHostsResult(
            enterprise_project_id=self.enterprise_project_id,
            group_name=self.group_name,
            host_id=self.host_id,
            hosts=self.hosts,
            id=self.id,
            name=self.name,
            os_type=self.os_type,
            private_ip=self.private_ip,
            protect_status=self.protect_status,
            public_ip=self.public_ip,
            rasp_protect_status=self.rasp_protect_status,
            region=self.region)


def get_webtamper_hosts(enterprise_project_id: Optional[_builtins.str] = None,
                        group_name: Optional[_builtins.str] = None,
                        host_id: Optional[_builtins.str] = None,
                        name: Optional[_builtins.str] = None,
                        os_type: Optional[_builtins.str] = None,
                        private_ip: Optional[_builtins.str] = None,
                        protect_status: Optional[_builtins.str] = None,
                        public_ip: Optional[_builtins.str] = None,
                        rasp_protect_status: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWebtamperHostsResult:
    """
    Use this data source to get the list of HSS web tamper hosts within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    host_id = config.require_object("hostId")
    test = huaweicloud.hss.get_webtamper_hosts(host_id=host_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the web tamper hosts
           belong. For enterprise users, if omitted, will query the web tamper hosts under all enterprise projects.
    :param _builtins.str group_name: Specifies the host group name to which the web tamper hosts belong to be queried.
    :param _builtins.str host_id: Specifies the ID of the web tamper host to be queried.
    :param _builtins.str name: Specifies the name of the web tamper host to be queried.
           This field will undergo a fuzzy matching query, the query result is for all web tamper hosts whose names contain this
           value.
    :param _builtins.str os_type: Specifies the operating system type of the web tamper host to be queried.
           The value can be **linux** or **windows**.
    :param _builtins.str private_ip: Specifies the private IP address of the web tamper host to be queried.
    :param _builtins.str protect_status: Specifies the protection status of the web tamper hosts to be queried.
           The value can be **closed** or **opened**.
    :param _builtins.str public_ip: Specifies the elastic public IP address of the web tamper host to be queried.
    :param _builtins.str rasp_protect_status: Specifies the dynamic protection status of the web tamper hosts to be
           queried. The value can be **closed** or **opened**.
    :param _builtins.str region: Specifies the region in which to query the HSS web tamper hosts.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupName'] = group_name
    __args__['hostId'] = host_id
    __args__['name'] = name
    __args__['osType'] = os_type
    __args__['privateIp'] = private_ip
    __args__['protectStatus'] = protect_status
    __args__['publicIp'] = public_ip
    __args__['raspProtectStatus'] = rasp_protect_status
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getWebtamperHosts:getWebtamperHosts', __args__, opts=opts, typ=GetWebtamperHostsResult).value

    return AwaitableGetWebtamperHostsResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        group_name=pulumi.get(__ret__, 'group_name'),
        host_id=pulumi.get(__ret__, 'host_id'),
        hosts=pulumi.get(__ret__, 'hosts'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        os_type=pulumi.get(__ret__, 'os_type'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        protect_status=pulumi.get(__ret__, 'protect_status'),
        public_ip=pulumi.get(__ret__, 'public_ip'),
        rasp_protect_status=pulumi.get(__ret__, 'rasp_protect_status'),
        region=pulumi.get(__ret__, 'region'))
def get_webtamper_hosts_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               host_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               os_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               private_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               protect_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               public_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               rasp_protect_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWebtamperHostsResult]:
    """
    Use this data source to get the list of HSS web tamper hosts within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    host_id = config.require_object("hostId")
    test = huaweicloud.hss.get_webtamper_hosts(host_id=host_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the web tamper hosts
           belong. For enterprise users, if omitted, will query the web tamper hosts under all enterprise projects.
    :param _builtins.str group_name: Specifies the host group name to which the web tamper hosts belong to be queried.
    :param _builtins.str host_id: Specifies the ID of the web tamper host to be queried.
    :param _builtins.str name: Specifies the name of the web tamper host to be queried.
           This field will undergo a fuzzy matching query, the query result is for all web tamper hosts whose names contain this
           value.
    :param _builtins.str os_type: Specifies the operating system type of the web tamper host to be queried.
           The value can be **linux** or **windows**.
    :param _builtins.str private_ip: Specifies the private IP address of the web tamper host to be queried.
    :param _builtins.str protect_status: Specifies the protection status of the web tamper hosts to be queried.
           The value can be **closed** or **opened**.
    :param _builtins.str public_ip: Specifies the elastic public IP address of the web tamper host to be queried.
    :param _builtins.str rasp_protect_status: Specifies the dynamic protection status of the web tamper hosts to be
           queried. The value can be **closed** or **opened**.
    :param _builtins.str region: Specifies the region in which to query the HSS web tamper hosts.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupName'] = group_name
    __args__['hostId'] = host_id
    __args__['name'] = name
    __args__['osType'] = os_type
    __args__['privateIp'] = private_ip
    __args__['protectStatus'] = protect_status
    __args__['publicIp'] = public_ip
    __args__['raspProtectStatus'] = rasp_protect_status
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getWebtamperHosts:getWebtamperHosts', __args__, opts=opts, typ=GetWebtamperHostsResult)
    return __ret__.apply(lambda __response__: GetWebtamperHostsResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        group_name=pulumi.get(__response__, 'group_name'),
        host_id=pulumi.get(__response__, 'host_id'),
        hosts=pulumi.get(__response__, 'hosts'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        os_type=pulumi.get(__response__, 'os_type'),
        private_ip=pulumi.get(__response__, 'private_ip'),
        protect_status=pulumi.get(__response__, 'protect_status'),
        public_ip=pulumi.get(__response__, 'public_ip'),
        rasp_protect_status=pulumi.get(__response__, 'rasp_protect_status'),
        region=pulumi.get(__response__, 'region')))
