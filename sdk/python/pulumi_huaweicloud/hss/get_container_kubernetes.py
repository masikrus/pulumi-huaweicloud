# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetContainerKubernetesResult',
    'AwaitableGetContainerKubernetesResult',
    'get_container_kubernetes',
    'get_container_kubernetes_output',
]

@pulumi.output_type
class GetContainerKubernetesResult:
    """
    A collection of values returned by getContainerKubernetes.
    """
    def __init__(__self__, cluster_container=None, container_name=None, data_lists=None, enterprise_project_id=None, id=None, image_name=None, last_update_time=None, pod_name=None, region=None, total_num=None):
        if cluster_container and not isinstance(cluster_container, bool):
            raise TypeError("Expected argument 'cluster_container' to be a bool")
        pulumi.set(__self__, "cluster_container", cluster_container)
        if container_name and not isinstance(container_name, str):
            raise TypeError("Expected argument 'container_name' to be a str")
        pulumi.set(__self__, "container_name", container_name)
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_name and not isinstance(image_name, str):
            raise TypeError("Expected argument 'image_name' to be a str")
        pulumi.set(__self__, "image_name", image_name)
        if last_update_time and not isinstance(last_update_time, int):
            raise TypeError("Expected argument 'last_update_time' to be a int")
        pulumi.set(__self__, "last_update_time", last_update_time)
        if pod_name and not isinstance(pod_name, str):
            raise TypeError("Expected argument 'pod_name' to be a str")
        pulumi.set(__self__, "pod_name", pod_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if total_num and not isinstance(total_num, int):
            raise TypeError("Expected argument 'total_num' to be a int")
        pulumi.set(__self__, "total_num", total_num)

    @_builtins.property
    @pulumi.getter(name="clusterContainer")
    def cluster_container(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "cluster_container")

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[_builtins.str]:
        """
        The container name.
        """
        return pulumi.get(self, "container_name")

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetContainerKubernetesDataListResult']:
        """
        The list of container information.
        The data_list structure is documented below.
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[_builtins.str]:
        """
        The image name.
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> _builtins.int:
        """
        The last update time.
        """
        return pulumi.get(self, "last_update_time")

    @_builtins.property
    @pulumi.getter(name="podName")
    def pod_name(self) -> Optional[_builtins.str]:
        """
        The pod name.
        """
        return pulumi.get(self, "pod_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="totalNum")
    def total_num(self) -> _builtins.int:
        """
        The total number of containers.
        """
        return pulumi.get(self, "total_num")


class AwaitableGetContainerKubernetesResult(GetContainerKubernetesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerKubernetesResult(
            cluster_container=self.cluster_container,
            container_name=self.container_name,
            data_lists=self.data_lists,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            image_name=self.image_name,
            last_update_time=self.last_update_time,
            pod_name=self.pod_name,
            region=self.region,
            total_num=self.total_num)


def get_container_kubernetes(cluster_container: Optional[_builtins.bool] = None,
                             container_name: Optional[_builtins.str] = None,
                             enterprise_project_id: Optional[_builtins.str] = None,
                             image_name: Optional[_builtins.str] = None,
                             pod_name: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerKubernetesResult:
    """
    Use this data source to get the list of HSS container information within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_container_kubernetes()
    ```


    :param _builtins.bool cluster_container: Specifies whether it is a cluster-managed container.
    :param _builtins.str container_name: Specifies the container name.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str image_name: Specifies the image name.
    :param _builtins.str pod_name: Specifies the pod name.
    :param _builtins.str region: Specifies the region in which to query the HSS container information.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterContainer'] = cluster_container
    __args__['containerName'] = container_name
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['imageName'] = image_name
    __args__['podName'] = pod_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getContainerKubernetes:getContainerKubernetes', __args__, opts=opts, typ=GetContainerKubernetesResult).value

    return AwaitableGetContainerKubernetesResult(
        cluster_container=pulumi.get(__ret__, 'cluster_container'),
        container_name=pulumi.get(__ret__, 'container_name'),
        data_lists=pulumi.get(__ret__, 'data_lists'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        image_name=pulumi.get(__ret__, 'image_name'),
        last_update_time=pulumi.get(__ret__, 'last_update_time'),
        pod_name=pulumi.get(__ret__, 'pod_name'),
        region=pulumi.get(__ret__, 'region'),
        total_num=pulumi.get(__ret__, 'total_num'))
def get_container_kubernetes_output(cluster_container: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                    container_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    image_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    pod_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerKubernetesResult]:
    """
    Use this data source to get the list of HSS container information within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_container_kubernetes()
    ```


    :param _builtins.bool cluster_container: Specifies whether it is a cluster-managed container.
    :param _builtins.str container_name: Specifies the container name.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str image_name: Specifies the image name.
    :param _builtins.str pod_name: Specifies the pod name.
    :param _builtins.str region: Specifies the region in which to query the HSS container information.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterContainer'] = cluster_container
    __args__['containerName'] = container_name
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['imageName'] = image_name
    __args__['podName'] = pod_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getContainerKubernetes:getContainerKubernetes', __args__, opts=opts, typ=GetContainerKubernetesResult)
    return __ret__.apply(lambda __response__: GetContainerKubernetesResult(
        cluster_container=pulumi.get(__response__, 'cluster_container'),
        container_name=pulumi.get(__response__, 'container_name'),
        data_lists=pulumi.get(__response__, 'data_lists'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        image_name=pulumi.get(__response__, 'image_name'),
        last_update_time=pulumi.get(__response__, 'last_update_time'),
        pod_name=pulumi.get(__response__, 'pod_name'),
        region=pulumi.get(__response__, 'region'),
        total_num=pulumi.get(__response__, 'total_num')))
