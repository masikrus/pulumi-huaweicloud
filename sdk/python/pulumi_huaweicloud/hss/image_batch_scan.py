# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ImageBatchScanArgs', 'ImageBatchScan']

@pulumi.input_type
class ImageBatchScanArgs:
    def __init__(__self__, *,
                 image_type: pulumi.Input[_builtins.str],
                 end_latest_scan_time: Optional[pulumi.Input[_builtins.int]] = None,
                 end_latest_update_time: Optional[pulumi.Input[_builtins.int]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ImageBatchScanImageInfoListArgs']]]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 image_size: Optional[pulumi.Input[_builtins.int]] = None,
                 image_version: Optional[pulumi.Input[_builtins.str]] = None,
                 latest_version: Optional[pulumi.Input[_builtins.bool]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repo_type: Optional[pulumi.Input[_builtins.str]] = None,
                 scan_status: Optional[pulumi.Input[_builtins.str]] = None,
                 start_latest_scan_time: Optional[pulumi.Input[_builtins.int]] = None,
                 start_latest_update_time: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a ImageBatchScan resource.
        :param pulumi.Input[_builtins.str] image_type: Specifies the image type.  
               The valid values are as follows:
               + **private_image**: Private image repository.
               + **shared_image**: Shared image repository.
        :param pulumi.Input[_builtins.int] end_latest_scan_time: Specifies the end time of the last scan completion date
               in milliseconds.
        :param pulumi.Input[_builtins.int] end_latest_update_time: Specifies the end time of the creation date in milliseconds.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
               
               <a name="image_info_list_struct"></a>
               The `image_info_list` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['ImageBatchScanImageInfoListArgs']]] image_info_lists: Specifies the list of images to scan.  
               This parameter is required when `operate_all` is left blank or set to **false**.
               
               The image_info_list structure is documented below.
        :param pulumi.Input[_builtins.str] image_name: Specifies the image name.
        :param pulumi.Input[_builtins.int] image_size: Specifies the image size.
        :param pulumi.Input[_builtins.str] image_version: Specifies the image version.
        :param pulumi.Input[_builtins.bool] latest_version: Specifies whether to only focus on the latest version image.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace.
        :param pulumi.Input[_builtins.bool] operate_all: Specifies whether to scan all images. The valid values are **true**
               and **false**.
               If this parameter is left blank or set to **false**, the `image_info_list` is required.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repo_type: Specifies the repository type. Currently only supports **SWR**.
        :param pulumi.Input[_builtins.str] scan_status: Specifies the scan status.  
               The valid values are as follows:
               + **unscan**: Not scanned.
               + **success**: Scan completed.
               + **scanning**: Scanning.
               + **failed**: Scan failed.
               + **download_failed**: Download failed.
               + **image_oversized**: Large image size.
        :param pulumi.Input[_builtins.int] start_latest_scan_time: Specifies the start time of the last scan completion date
               in milliseconds.
        :param pulumi.Input[_builtins.int] start_latest_update_time: Specifies the start time of the creation date
               in milliseconds.
        """
        pulumi.set(__self__, "image_type", image_type)
        if end_latest_scan_time is not None:
            pulumi.set(__self__, "end_latest_scan_time", end_latest_scan_time)
        if end_latest_update_time is not None:
            pulumi.set(__self__, "end_latest_update_time", end_latest_update_time)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if image_info_lists is not None:
            pulumi.set(__self__, "image_info_lists", image_info_lists)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_size is not None:
            pulumi.set(__self__, "image_size", image_size)
        if image_version is not None:
            pulumi.set(__self__, "image_version", image_version)
        if latest_version is not None:
            pulumi.set(__self__, "latest_version", latest_version)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if operate_all is not None:
            pulumi.set(__self__, "operate_all", operate_all)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if repo_type is not None:
            pulumi.set(__self__, "repo_type", repo_type)
        if scan_status is not None:
            pulumi.set(__self__, "scan_status", scan_status)
        if start_latest_scan_time is not None:
            pulumi.set(__self__, "start_latest_scan_time", start_latest_scan_time)
        if start_latest_update_time is not None:
            pulumi.set(__self__, "start_latest_update_time", start_latest_update_time)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the image type.  
        The valid values are as follows:
        + **private_image**: Private image repository.
        + **shared_image**: Shared image repository.
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_type", value)

    @_builtins.property
    @pulumi.getter(name="endLatestScanTime")
    def end_latest_scan_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the end time of the last scan completion date
        in milliseconds.
        """
        return pulumi.get(self, "end_latest_scan_time")

    @end_latest_scan_time.setter
    def end_latest_scan_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "end_latest_scan_time", value)

    @_builtins.property
    @pulumi.getter(name="endLatestUpdateTime")
    def end_latest_update_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the end time of the creation date in milliseconds.
        """
        return pulumi.get(self, "end_latest_update_time")

    @end_latest_update_time.setter
    def end_latest_update_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "end_latest_update_time", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.

        <a name="image_info_list_struct"></a>
        The `image_info_list` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="imageInfoLists")
    def image_info_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageBatchScanImageInfoListArgs']]]]:
        """
        Specifies the list of images to scan.  
        This parameter is required when `operate_all` is left blank or set to **false**.

        The image_info_list structure is documented below.
        """
        return pulumi.get(self, "image_info_lists")

    @image_info_lists.setter
    def image_info_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageBatchScanImageInfoListArgs']]]]):
        pulumi.set(self, "image_info_lists", value)

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image name.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_name", value)

    @_builtins.property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the image size.
        """
        return pulumi.get(self, "image_size")

    @image_size.setter
    def image_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "image_size", value)

    @_builtins.property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image version.
        """
        return pulumi.get(self, "image_version")

    @image_version.setter
    def image_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_version", value)

    @_builtins.property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to only focus on the latest version image.
        """
        return pulumi.get(self, "latest_version")

    @latest_version.setter
    def latest_version(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "latest_version", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="operateAll")
    def operate_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to scan all images. The valid values are **true**
        and **false**.
        If this parameter is left blank or set to **false**, the `image_info_list` is required.
        """
        return pulumi.get(self, "operate_all")

    @operate_all.setter
    def operate_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operate_all", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="repoType")
    def repo_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the repository type. Currently only supports **SWR**.
        """
        return pulumi.get(self, "repo_type")

    @repo_type.setter
    def repo_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repo_type", value)

    @_builtins.property
    @pulumi.getter(name="scanStatus")
    def scan_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scan status.  
        The valid values are as follows:
        + **unscan**: Not scanned.
        + **success**: Scan completed.
        + **scanning**: Scanning.
        + **failed**: Scan failed.
        + **download_failed**: Download failed.
        + **image_oversized**: Large image size.
        """
        return pulumi.get(self, "scan_status")

    @scan_status.setter
    def scan_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scan_status", value)

    @_builtins.property
    @pulumi.getter(name="startLatestScanTime")
    def start_latest_scan_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the start time of the last scan completion date
        in milliseconds.
        """
        return pulumi.get(self, "start_latest_scan_time")

    @start_latest_scan_time.setter
    def start_latest_scan_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "start_latest_scan_time", value)

    @_builtins.property
    @pulumi.getter(name="startLatestUpdateTime")
    def start_latest_update_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the start time of the creation date
        in milliseconds.
        """
        return pulumi.get(self, "start_latest_update_time")

    @start_latest_update_time.setter
    def start_latest_update_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "start_latest_update_time", value)


@pulumi.input_type
class _ImageBatchScanState:
    def __init__(__self__, *,
                 end_latest_scan_time: Optional[pulumi.Input[_builtins.int]] = None,
                 end_latest_update_time: Optional[pulumi.Input[_builtins.int]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ImageBatchScanImageInfoListArgs']]]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 image_size: Optional[pulumi.Input[_builtins.int]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 image_version: Optional[pulumi.Input[_builtins.str]] = None,
                 latest_version: Optional[pulumi.Input[_builtins.bool]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repo_type: Optional[pulumi.Input[_builtins.str]] = None,
                 scan_status: Optional[pulumi.Input[_builtins.str]] = None,
                 start_latest_scan_time: Optional[pulumi.Input[_builtins.int]] = None,
                 start_latest_update_time: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering ImageBatchScan resources.
        :param pulumi.Input[_builtins.int] end_latest_scan_time: Specifies the end time of the last scan completion date
               in milliseconds.
        :param pulumi.Input[_builtins.int] end_latest_update_time: Specifies the end time of the creation date in milliseconds.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
               
               <a name="image_info_list_struct"></a>
               The `image_info_list` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['ImageBatchScanImageInfoListArgs']]] image_info_lists: Specifies the list of images to scan.  
               This parameter is required when `operate_all` is left blank or set to **false**.
               
               The image_info_list structure is documented below.
        :param pulumi.Input[_builtins.str] image_name: Specifies the image name.
        :param pulumi.Input[_builtins.int] image_size: Specifies the image size.
        :param pulumi.Input[_builtins.str] image_type: Specifies the image type.  
               The valid values are as follows:
               + **private_image**: Private image repository.
               + **shared_image**: Shared image repository.
        :param pulumi.Input[_builtins.str] image_version: Specifies the image version.
        :param pulumi.Input[_builtins.bool] latest_version: Specifies whether to only focus on the latest version image.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace.
        :param pulumi.Input[_builtins.bool] operate_all: Specifies whether to scan all images. The valid values are **true**
               and **false**.
               If this parameter is left blank or set to **false**, the `image_info_list` is required.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repo_type: Specifies the repository type. Currently only supports **SWR**.
        :param pulumi.Input[_builtins.str] scan_status: Specifies the scan status.  
               The valid values are as follows:
               + **unscan**: Not scanned.
               + **success**: Scan completed.
               + **scanning**: Scanning.
               + **failed**: Scan failed.
               + **download_failed**: Download failed.
               + **image_oversized**: Large image size.
        :param pulumi.Input[_builtins.int] start_latest_scan_time: Specifies the start time of the last scan completion date
               in milliseconds.
        :param pulumi.Input[_builtins.int] start_latest_update_time: Specifies the start time of the creation date
               in milliseconds.
        """
        if end_latest_scan_time is not None:
            pulumi.set(__self__, "end_latest_scan_time", end_latest_scan_time)
        if end_latest_update_time is not None:
            pulumi.set(__self__, "end_latest_update_time", end_latest_update_time)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if image_info_lists is not None:
            pulumi.set(__self__, "image_info_lists", image_info_lists)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_size is not None:
            pulumi.set(__self__, "image_size", image_size)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if image_version is not None:
            pulumi.set(__self__, "image_version", image_version)
        if latest_version is not None:
            pulumi.set(__self__, "latest_version", latest_version)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if operate_all is not None:
            pulumi.set(__self__, "operate_all", operate_all)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if repo_type is not None:
            pulumi.set(__self__, "repo_type", repo_type)
        if scan_status is not None:
            pulumi.set(__self__, "scan_status", scan_status)
        if start_latest_scan_time is not None:
            pulumi.set(__self__, "start_latest_scan_time", start_latest_scan_time)
        if start_latest_update_time is not None:
            pulumi.set(__self__, "start_latest_update_time", start_latest_update_time)

    @_builtins.property
    @pulumi.getter(name="endLatestScanTime")
    def end_latest_scan_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the end time of the last scan completion date
        in milliseconds.
        """
        return pulumi.get(self, "end_latest_scan_time")

    @end_latest_scan_time.setter
    def end_latest_scan_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "end_latest_scan_time", value)

    @_builtins.property
    @pulumi.getter(name="endLatestUpdateTime")
    def end_latest_update_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the end time of the creation date in milliseconds.
        """
        return pulumi.get(self, "end_latest_update_time")

    @end_latest_update_time.setter
    def end_latest_update_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "end_latest_update_time", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.

        <a name="image_info_list_struct"></a>
        The `image_info_list` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="imageInfoLists")
    def image_info_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageBatchScanImageInfoListArgs']]]]:
        """
        Specifies the list of images to scan.  
        This parameter is required when `operate_all` is left blank or set to **false**.

        The image_info_list structure is documented below.
        """
        return pulumi.get(self, "image_info_lists")

    @image_info_lists.setter
    def image_info_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageBatchScanImageInfoListArgs']]]]):
        pulumi.set(self, "image_info_lists", value)

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image name.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_name", value)

    @_builtins.property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the image size.
        """
        return pulumi.get(self, "image_size")

    @image_size.setter
    def image_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "image_size", value)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image type.  
        The valid values are as follows:
        + **private_image**: Private image repository.
        + **shared_image**: Shared image repository.
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_type", value)

    @_builtins.property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image version.
        """
        return pulumi.get(self, "image_version")

    @image_version.setter
    def image_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_version", value)

    @_builtins.property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to only focus on the latest version image.
        """
        return pulumi.get(self, "latest_version")

    @latest_version.setter
    def latest_version(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "latest_version", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="operateAll")
    def operate_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to scan all images. The valid values are **true**
        and **false**.
        If this parameter is left blank or set to **false**, the `image_info_list` is required.
        """
        return pulumi.get(self, "operate_all")

    @operate_all.setter
    def operate_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operate_all", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="repoType")
    def repo_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the repository type. Currently only supports **SWR**.
        """
        return pulumi.get(self, "repo_type")

    @repo_type.setter
    def repo_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repo_type", value)

    @_builtins.property
    @pulumi.getter(name="scanStatus")
    def scan_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scan status.  
        The valid values are as follows:
        + **unscan**: Not scanned.
        + **success**: Scan completed.
        + **scanning**: Scanning.
        + **failed**: Scan failed.
        + **download_failed**: Download failed.
        + **image_oversized**: Large image size.
        """
        return pulumi.get(self, "scan_status")

    @scan_status.setter
    def scan_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scan_status", value)

    @_builtins.property
    @pulumi.getter(name="startLatestScanTime")
    def start_latest_scan_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the start time of the last scan completion date
        in milliseconds.
        """
        return pulumi.get(self, "start_latest_scan_time")

    @start_latest_scan_time.setter
    def start_latest_scan_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "start_latest_scan_time", value)

    @_builtins.property
    @pulumi.getter(name="startLatestUpdateTime")
    def start_latest_update_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the start time of the creation date
        in milliseconds.
        """
        return pulumi.get(self, "start_latest_update_time")

    @start_latest_update_time.setter
    def start_latest_update_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "start_latest_update_time", value)


@pulumi.type_token("huaweicloud:hss/imageBatchScan:ImageBatchScan")
class ImageBatchScan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_latest_scan_time: Optional[pulumi.Input[_builtins.int]] = None,
                 end_latest_update_time: Optional[pulumi.Input[_builtins.int]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageBatchScanImageInfoListArgs', 'ImageBatchScanImageInfoListArgsDict']]]]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 image_size: Optional[pulumi.Input[_builtins.int]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 image_version: Optional[pulumi.Input[_builtins.str]] = None,
                 latest_version: Optional[pulumi.Input[_builtins.bool]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repo_type: Optional[pulumi.Input[_builtins.str]] = None,
                 scan_status: Optional[pulumi.Input[_builtins.str]] = None,
                 start_latest_scan_time: Optional[pulumi.Input[_builtins.int]] = None,
                 start_latest_update_time: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Using this resource to batch scan images in image repositories within HuaweiCloud.

        > This resource is only a one-time action resource to batch scan images in image repositories. Deleting this resource
          will not clear the corresponding scan records, but will only remove the resource information from the tf state file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        image_type = config.require_object("imageType")
        repo_type = config.require_object("repoType")
        test = huaweicloud.hss.ImageBatchScan("test",
            image_type=image_type,
            repo_type=repo_type,
            operate_all=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] end_latest_scan_time: Specifies the end time of the last scan completion date
               in milliseconds.
        :param pulumi.Input[_builtins.int] end_latest_update_time: Specifies the end time of the creation date in milliseconds.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
               
               <a name="image_info_list_struct"></a>
               The `image_info_list` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['ImageBatchScanImageInfoListArgs', 'ImageBatchScanImageInfoListArgsDict']]]] image_info_lists: Specifies the list of images to scan.  
               This parameter is required when `operate_all` is left blank or set to **false**.
               
               The image_info_list structure is documented below.
        :param pulumi.Input[_builtins.str] image_name: Specifies the image name.
        :param pulumi.Input[_builtins.int] image_size: Specifies the image size.
        :param pulumi.Input[_builtins.str] image_type: Specifies the image type.  
               The valid values are as follows:
               + **private_image**: Private image repository.
               + **shared_image**: Shared image repository.
        :param pulumi.Input[_builtins.str] image_version: Specifies the image version.
        :param pulumi.Input[_builtins.bool] latest_version: Specifies whether to only focus on the latest version image.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace.
        :param pulumi.Input[_builtins.bool] operate_all: Specifies whether to scan all images. The valid values are **true**
               and **false**.
               If this parameter is left blank or set to **false**, the `image_info_list` is required.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repo_type: Specifies the repository type. Currently only supports **SWR**.
        :param pulumi.Input[_builtins.str] scan_status: Specifies the scan status.  
               The valid values are as follows:
               + **unscan**: Not scanned.
               + **success**: Scan completed.
               + **scanning**: Scanning.
               + **failed**: Scan failed.
               + **download_failed**: Download failed.
               + **image_oversized**: Large image size.
        :param pulumi.Input[_builtins.int] start_latest_scan_time: Specifies the start time of the last scan completion date
               in milliseconds.
        :param pulumi.Input[_builtins.int] start_latest_update_time: Specifies the start time of the creation date
               in milliseconds.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageBatchScanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to batch scan images in image repositories within HuaweiCloud.

        > This resource is only a one-time action resource to batch scan images in image repositories. Deleting this resource
          will not clear the corresponding scan records, but will only remove the resource information from the tf state file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        image_type = config.require_object("imageType")
        repo_type = config.require_object("repoType")
        test = huaweicloud.hss.ImageBatchScan("test",
            image_type=image_type,
            repo_type=repo_type,
            operate_all=True)
        ```

        :param str resource_name: The name of the resource.
        :param ImageBatchScanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageBatchScanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_latest_scan_time: Optional[pulumi.Input[_builtins.int]] = None,
                 end_latest_update_time: Optional[pulumi.Input[_builtins.int]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageBatchScanImageInfoListArgs', 'ImageBatchScanImageInfoListArgsDict']]]]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 image_size: Optional[pulumi.Input[_builtins.int]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 image_version: Optional[pulumi.Input[_builtins.str]] = None,
                 latest_version: Optional[pulumi.Input[_builtins.bool]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repo_type: Optional[pulumi.Input[_builtins.str]] = None,
                 scan_status: Optional[pulumi.Input[_builtins.str]] = None,
                 start_latest_scan_time: Optional[pulumi.Input[_builtins.int]] = None,
                 start_latest_update_time: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageBatchScanArgs.__new__(ImageBatchScanArgs)

            __props__.__dict__["end_latest_scan_time"] = end_latest_scan_time
            __props__.__dict__["end_latest_update_time"] = end_latest_update_time
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["image_info_lists"] = image_info_lists
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["image_size"] = image_size
            if image_type is None and not opts.urn:
                raise TypeError("Missing required property 'image_type'")
            __props__.__dict__["image_type"] = image_type
            __props__.__dict__["image_version"] = image_version
            __props__.__dict__["latest_version"] = latest_version
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["operate_all"] = operate_all
            __props__.__dict__["region"] = region
            __props__.__dict__["repo_type"] = repo_type
            __props__.__dict__["scan_status"] = scan_status
            __props__.__dict__["start_latest_scan_time"] = start_latest_scan_time
            __props__.__dict__["start_latest_update_time"] = start_latest_update_time
        super(ImageBatchScan, __self__).__init__(
            'huaweicloud:hss/imageBatchScan:ImageBatchScan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            end_latest_scan_time: Optional[pulumi.Input[_builtins.int]] = None,
            end_latest_update_time: Optional[pulumi.Input[_builtins.int]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            image_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageBatchScanImageInfoListArgs', 'ImageBatchScanImageInfoListArgsDict']]]]] = None,
            image_name: Optional[pulumi.Input[_builtins.str]] = None,
            image_size: Optional[pulumi.Input[_builtins.int]] = None,
            image_type: Optional[pulumi.Input[_builtins.str]] = None,
            image_version: Optional[pulumi.Input[_builtins.str]] = None,
            latest_version: Optional[pulumi.Input[_builtins.bool]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            repo_type: Optional[pulumi.Input[_builtins.str]] = None,
            scan_status: Optional[pulumi.Input[_builtins.str]] = None,
            start_latest_scan_time: Optional[pulumi.Input[_builtins.int]] = None,
            start_latest_update_time: Optional[pulumi.Input[_builtins.int]] = None) -> 'ImageBatchScan':
        """
        Get an existing ImageBatchScan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] end_latest_scan_time: Specifies the end time of the last scan completion date
               in milliseconds.
        :param pulumi.Input[_builtins.int] end_latest_update_time: Specifies the end time of the creation date in milliseconds.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
               
               <a name="image_info_list_struct"></a>
               The `image_info_list` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['ImageBatchScanImageInfoListArgs', 'ImageBatchScanImageInfoListArgsDict']]]] image_info_lists: Specifies the list of images to scan.  
               This parameter is required when `operate_all` is left blank or set to **false**.
               
               The image_info_list structure is documented below.
        :param pulumi.Input[_builtins.str] image_name: Specifies the image name.
        :param pulumi.Input[_builtins.int] image_size: Specifies the image size.
        :param pulumi.Input[_builtins.str] image_type: Specifies the image type.  
               The valid values are as follows:
               + **private_image**: Private image repository.
               + **shared_image**: Shared image repository.
        :param pulumi.Input[_builtins.str] image_version: Specifies the image version.
        :param pulumi.Input[_builtins.bool] latest_version: Specifies whether to only focus on the latest version image.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace.
        :param pulumi.Input[_builtins.bool] operate_all: Specifies whether to scan all images. The valid values are **true**
               and **false**.
               If this parameter is left blank or set to **false**, the `image_info_list` is required.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repo_type: Specifies the repository type. Currently only supports **SWR**.
        :param pulumi.Input[_builtins.str] scan_status: Specifies the scan status.  
               The valid values are as follows:
               + **unscan**: Not scanned.
               + **success**: Scan completed.
               + **scanning**: Scanning.
               + **failed**: Scan failed.
               + **download_failed**: Download failed.
               + **image_oversized**: Large image size.
        :param pulumi.Input[_builtins.int] start_latest_scan_time: Specifies the start time of the last scan completion date
               in milliseconds.
        :param pulumi.Input[_builtins.int] start_latest_update_time: Specifies the start time of the creation date
               in milliseconds.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageBatchScanState.__new__(_ImageBatchScanState)

        __props__.__dict__["end_latest_scan_time"] = end_latest_scan_time
        __props__.__dict__["end_latest_update_time"] = end_latest_update_time
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["image_info_lists"] = image_info_lists
        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["image_size"] = image_size
        __props__.__dict__["image_type"] = image_type
        __props__.__dict__["image_version"] = image_version
        __props__.__dict__["latest_version"] = latest_version
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["operate_all"] = operate_all
        __props__.__dict__["region"] = region
        __props__.__dict__["repo_type"] = repo_type
        __props__.__dict__["scan_status"] = scan_status
        __props__.__dict__["start_latest_scan_time"] = start_latest_scan_time
        __props__.__dict__["start_latest_update_time"] = start_latest_update_time
        return ImageBatchScan(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="endLatestScanTime")
    def end_latest_scan_time(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the end time of the last scan completion date
        in milliseconds.
        """
        return pulumi.get(self, "end_latest_scan_time")

    @_builtins.property
    @pulumi.getter(name="endLatestUpdateTime")
    def end_latest_update_time(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the end time of the creation date in milliseconds.
        """
        return pulumi.get(self, "end_latest_update_time")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.

        <a name="image_info_list_struct"></a>
        The `image_info_list` block supports:
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="imageInfoLists")
    def image_info_lists(self) -> pulumi.Output[Optional[Sequence['outputs.ImageBatchScanImageInfoList']]]:
        """
        Specifies the list of images to scan.  
        This parameter is required when `operate_all` is left blank or set to **false**.

        The image_info_list structure is documented below.
        """
        return pulumi.get(self, "image_info_lists")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the image name.
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the image size.
        """
        return pulumi.get(self, "image_size")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the image type.  
        The valid values are as follows:
        + **private_image**: Private image repository.
        + **shared_image**: Shared image repository.
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the image version.
        """
        return pulumi.get(self, "image_version")

    @_builtins.property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to only focus on the latest version image.
        """
        return pulumi.get(self, "latest_version")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="operateAll")
    def operate_all(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to scan all images. The valid values are **true**
        and **false**.
        If this parameter is left blank or set to **false**, the `image_info_list` is required.
        """
        return pulumi.get(self, "operate_all")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="repoType")
    def repo_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the repository type. Currently only supports **SWR**.
        """
        return pulumi.get(self, "repo_type")

    @_builtins.property
    @pulumi.getter(name="scanStatus")
    def scan_status(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the scan status.  
        The valid values are as follows:
        + **unscan**: Not scanned.
        + **success**: Scan completed.
        + **scanning**: Scanning.
        + **failed**: Scan failed.
        + **download_failed**: Download failed.
        + **image_oversized**: Large image size.
        """
        return pulumi.get(self, "scan_status")

    @_builtins.property
    @pulumi.getter(name="startLatestScanTime")
    def start_latest_scan_time(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the start time of the last scan completion date
        in milliseconds.
        """
        return pulumi.get(self, "start_latest_scan_time")

    @_builtins.property
    @pulumi.getter(name="startLatestUpdateTime")
    def start_latest_update_time(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the start time of the creation date
        in milliseconds.
        """
        return pulumi.get(self, "start_latest_update_time")

