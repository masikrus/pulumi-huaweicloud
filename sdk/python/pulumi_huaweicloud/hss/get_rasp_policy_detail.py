# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRaspPolicyDetailResult',
    'AwaitableGetRaspPolicyDetailResult',
    'get_rasp_policy_detail',
    'get_rasp_policy_detail_output',
]

@pulumi.output_type
class GetRaspPolicyDetailResult:
    """
    A collection of values returned by getRaspPolicyDetail.
    """
    def __init__(__self__, enterprise_project_id=None, id=None, os_type=None, policy_id=None, policy_name=None, region=None, rule_lists=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        pulumi.set(__self__, "os_type", os_type)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if policy_name and not isinstance(policy_name, str):
            raise TypeError("Expected argument 'policy_name' to be a str")
        pulumi.set(__self__, "policy_name", policy_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_lists and not isinstance(rule_lists, list):
            raise TypeError("Expected argument 'rule_lists' to be a list")
        pulumi.set(__self__, "rule_lists", rule_lists)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The OS type.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        The protection policy name.
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleLists")
    def rule_lists(self) -> Sequence['outputs.GetRaspPolicyDetailRuleListResult']:
        """
        All ports that match the filter parameters.
        The rule_list structure is documented below.
        """
        return pulumi.get(self, "rule_lists")


class AwaitableGetRaspPolicyDetailResult(GetRaspPolicyDetailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRaspPolicyDetailResult(
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            os_type=self.os_type,
            policy_id=self.policy_id,
            policy_name=self.policy_name,
            region=self.region,
            rule_lists=self.rule_lists)


def get_rasp_policy_detail(enterprise_project_id: Optional[_builtins.str] = None,
                           policy_id: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRaspPolicyDetailResult:
    """
    Use this data source to query a specifies protection policy details.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_id = config.require_object("policyId")
    test = huaweicloud.hss.get_rasp_policy_detail(policy_id=policy_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
    :param _builtins.str policy_id: Specifies the protection policy ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['policyId'] = policy_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getRaspPolicyDetail:getRaspPolicyDetail', __args__, opts=opts, typ=GetRaspPolicyDetailResult).value

    return AwaitableGetRaspPolicyDetailResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        os_type=pulumi.get(__ret__, 'os_type'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        policy_name=pulumi.get(__ret__, 'policy_name'),
        region=pulumi.get(__ret__, 'region'),
        rule_lists=pulumi.get(__ret__, 'rule_lists'))
def get_rasp_policy_detail_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRaspPolicyDetailResult]:
    """
    Use this data source to query a specifies protection policy details.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_id = config.require_object("policyId")
    test = huaweicloud.hss.get_rasp_policy_detail(policy_id=policy_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
    :param _builtins.str policy_id: Specifies the protection policy ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['policyId'] = policy_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getRaspPolicyDetail:getRaspPolicyDetail', __args__, opts=opts, typ=GetRaspPolicyDetailResult)
    return __ret__.apply(lambda __response__: GetRaspPolicyDetailResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        os_type=pulumi.get(__response__, 'os_type'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        policy_name=pulumi.get(__response__, 'policy_name'),
        region=pulumi.get(__response__, 'region'),
        rule_lists=pulumi.get(__response__, 'rule_lists')))
