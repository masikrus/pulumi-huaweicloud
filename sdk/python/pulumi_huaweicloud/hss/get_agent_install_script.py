# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAgentInstallScriptResult',
    'AwaitableGetAgentInstallScriptResult',
    'get_agent_install_script',
    'get_agent_install_script_output',
]

@pulumi.output_type
class GetAgentInstallScriptResult:
    """
    A collection of values returned by getAgentInstallScript.
    """
    def __init__(__self__, batch_install=None, enterprise_project_id=None, id=None, install_script_lists=None, os_arch=None, os_type=None, outside_host=None, region=None, type=None):
        if batch_install and not isinstance(batch_install, bool):
            raise TypeError("Expected argument 'batch_install' to be a bool")
        pulumi.set(__self__, "batch_install", batch_install)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if install_script_lists and not isinstance(install_script_lists, list):
            raise TypeError("Expected argument 'install_script_lists' to be a list")
        pulumi.set(__self__, "install_script_lists", install_script_lists)
        if os_arch and not isinstance(os_arch, str):
            raise TypeError("Expected argument 'os_arch' to be a str")
        pulumi.set(__self__, "os_arch", os_arch)
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        pulumi.set(__self__, "os_type", os_type)
        if outside_host and not isinstance(outside_host, bool):
            raise TypeError("Expected argument 'outside_host' to be a bool")
        pulumi.set(__self__, "outside_host", outside_host)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="batchInstall")
    def batch_install(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "batch_install")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="installScriptLists")
    def install_script_lists(self) -> Sequence['outputs.GetAgentInstallScriptInstallScriptListResult']:
        """
        The list of installation scripts.  
        The install_script_list structure is documented below.
        """
        return pulumi.get(self, "install_script_lists")

    @_builtins.property
    @pulumi.getter(name="osArch")
    def os_arch(self) -> _builtins.str:
        return pulumi.get(self, "os_arch")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="outsideHost")
    def outside_host(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "outside_host")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")


class AwaitableGetAgentInstallScriptResult(GetAgentInstallScriptResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAgentInstallScriptResult(
            batch_install=self.batch_install,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            install_script_lists=self.install_script_lists,
            os_arch=self.os_arch,
            os_type=self.os_type,
            outside_host=self.outside_host,
            region=self.region,
            type=self.type)


def get_agent_install_script(batch_install: Optional[_builtins.bool] = None,
                             enterprise_project_id: Optional[_builtins.str] = None,
                             os_arch: Optional[_builtins.str] = None,
                             os_type: Optional[_builtins.str] = None,
                             outside_host: Optional[_builtins.bool] = None,
                             region: Optional[_builtins.str] = None,
                             type: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAgentInstallScriptResult:
    """
    Use this data source to get HSS agent install script within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_agent_install_script()
    ```


    :param _builtins.bool batch_install: Specifies whether to install in bulk.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str os_arch: Specifies system architecture. The valid values are **x86_64** and **aarch64**.
           + If `os_type` is **Windows**, this field can only set to **x86_64**.
    :param _builtins.str os_type: Specifies the OS type. The valid values are **Windows** and **Linux**.
    :param _builtins.bool outside_host: Specifies whether it is not HuaweiCloud.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies type. The valid values are **password** and **ssh_key**.
    """
    __args__ = dict()
    __args__['batchInstall'] = batch_install
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['osArch'] = os_arch
    __args__['osType'] = os_type
    __args__['outsideHost'] = outside_host
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getAgentInstallScript:getAgentInstallScript', __args__, opts=opts, typ=GetAgentInstallScriptResult).value

    return AwaitableGetAgentInstallScriptResult(
        batch_install=pulumi.get(__ret__, 'batch_install'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        install_script_lists=pulumi.get(__ret__, 'install_script_lists'),
        os_arch=pulumi.get(__ret__, 'os_arch'),
        os_type=pulumi.get(__ret__, 'os_type'),
        outside_host=pulumi.get(__ret__, 'outside_host'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_agent_install_script_output(batch_install: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                    enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    os_arch: Optional[pulumi.Input[_builtins.str]] = None,
                                    os_type: Optional[pulumi.Input[_builtins.str]] = None,
                                    outside_host: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAgentInstallScriptResult]:
    """
    Use this data source to get HSS agent install script within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_agent_install_script()
    ```


    :param _builtins.bool batch_install: Specifies whether to install in bulk.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str os_arch: Specifies system architecture. The valid values are **x86_64** and **aarch64**.
           + If `os_type` is **Windows**, this field can only set to **x86_64**.
    :param _builtins.str os_type: Specifies the OS type. The valid values are **Windows** and **Linux**.
    :param _builtins.bool outside_host: Specifies whether it is not HuaweiCloud.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies type. The valid values are **password** and **ssh_key**.
    """
    __args__ = dict()
    __args__['batchInstall'] = batch_install
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['osArch'] = os_arch
    __args__['osType'] = os_type
    __args__['outsideHost'] = outside_host
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getAgentInstallScript:getAgentInstallScript', __args__, opts=opts, typ=GetAgentInstallScriptResult)
    return __ret__.apply(lambda __response__: GetAgentInstallScriptResult(
        batch_install=pulumi.get(__response__, 'batch_install'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        install_script_lists=pulumi.get(__response__, 'install_script_lists'),
        os_arch=pulumi.get(__response__, 'os_arch'),
        os_type=pulumi.get(__response__, 'os_type'),
        outside_host=pulumi.get(__response__, 'outside_host'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))
