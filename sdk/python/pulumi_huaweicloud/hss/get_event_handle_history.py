# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEventHandleHistoryResult',
    'AwaitableGetEventHandleHistoryResult',
    'get_event_handle_history',
    'get_event_handle_history_output',
]

@pulumi.output_type
class GetEventHandleHistoryResult:
    """
    A collection of values returned by getEventHandleHistory.
    """
    def __init__(__self__, asset_value=None, attack_tag=None, data_lists=None, enterprise_project_id=None, event_class_ids=None, event_name=None, event_type=None, handle_status=None, host_ip=None, host_name=None, id=None, private_ip=None, public_ip=None, region=None, severity=None, sort_dir=None, sort_key=None):
        if asset_value and not isinstance(asset_value, str):
            raise TypeError("Expected argument 'asset_value' to be a str")
        pulumi.set(__self__, "asset_value", asset_value)
        if attack_tag and not isinstance(attack_tag, str):
            raise TypeError("Expected argument 'attack_tag' to be a str")
        pulumi.set(__self__, "attack_tag", attack_tag)
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if event_class_ids and not isinstance(event_class_ids, list):
            raise TypeError("Expected argument 'event_class_ids' to be a list")
        pulumi.set(__self__, "event_class_ids", event_class_ids)
        if event_name and not isinstance(event_name, str):
            raise TypeError("Expected argument 'event_name' to be a str")
        pulumi.set(__self__, "event_name", event_name)
        if event_type and not isinstance(event_type, int):
            raise TypeError("Expected argument 'event_type' to be a int")
        pulumi.set(__self__, "event_type", event_type)
        if handle_status and not isinstance(handle_status, str):
            raise TypeError("Expected argument 'handle_status' to be a str")
        pulumi.set(__self__, "handle_status", handle_status)
        if host_ip and not isinstance(host_ip, str):
            raise TypeError("Expected argument 'host_ip' to be a str")
        pulumi.set(__self__, "host_ip", host_ip)
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        pulumi.set(__self__, "host_name", host_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if severity and not isinstance(severity, str):
            raise TypeError("Expected argument 'severity' to be a str")
        pulumi.set(__self__, "severity", severity)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)

    @_builtins.property
    @pulumi.getter(name="assetValue")
    def asset_value(self) -> Optional[_builtins.str]:
        """
        The asset importance.
        """
        return pulumi.get(self, "asset_value")

    @_builtins.property
    @pulumi.getter(name="attackTag")
    def attack_tag(self) -> Optional[_builtins.str]:
        """
        The attack flag.
        """
        return pulumi.get(self, "attack_tag")

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetEventHandleHistoryDataListResult']:
        """
        The event handle history list.
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="eventClassIds")
    def event_class_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "event_class_ids")

    @_builtins.property
    @pulumi.getter(name="eventName")
    def event_name(self) -> Optional[_builtins.str]:
        """
        The event name.
        """
        return pulumi.get(self, "event_name")

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[_builtins.int]:
        """
        The event type.
        """
        return pulumi.get(self, "event_type")

    @_builtins.property
    @pulumi.getter(name="handleStatus")
    def handle_status(self) -> Optional[_builtins.str]:
        """
        The handling status.
        """
        return pulumi.get(self, "handle_status")

    @_builtins.property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_ip")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        The host private IP address.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The host EIP.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> Optional[_builtins.str]:
        """
        The threat level.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")


class AwaitableGetEventHandleHistoryResult(GetEventHandleHistoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventHandleHistoryResult(
            asset_value=self.asset_value,
            attack_tag=self.attack_tag,
            data_lists=self.data_lists,
            enterprise_project_id=self.enterprise_project_id,
            event_class_ids=self.event_class_ids,
            event_name=self.event_name,
            event_type=self.event_type,
            handle_status=self.handle_status,
            host_ip=self.host_ip,
            host_name=self.host_name,
            id=self.id,
            private_ip=self.private_ip,
            public_ip=self.public_ip,
            region=self.region,
            severity=self.severity,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key)


def get_event_handle_history(asset_value: Optional[_builtins.str] = None,
                             attack_tag: Optional[_builtins.str] = None,
                             enterprise_project_id: Optional[_builtins.str] = None,
                             event_class_ids: Optional[Sequence[_builtins.str]] = None,
                             event_name: Optional[_builtins.str] = None,
                             event_type: Optional[_builtins.int] = None,
                             handle_status: Optional[_builtins.str] = None,
                             host_ip: Optional[_builtins.str] = None,
                             host_name: Optional[_builtins.str] = None,
                             private_ip: Optional[_builtins.str] = None,
                             public_ip: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             severity: Optional[_builtins.str] = None,
                             sort_dir: Optional[_builtins.str] = None,
                             sort_key: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventHandleHistoryResult:
    """
    Use this data source to get the list of historical alarm records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_event_handle_history()
    ```


    :param _builtins.str asset_value: Specifies the asset importance.
           The valid values are as follows:
           + **important**
           + **common**
           + **test**
    :param _builtins.str attack_tag: Specifies the attack flag.
           The valid values are as follows:
           + **attack_success**: Indicates attack success.
           + **attack_attempt**: Indicates attack attempt.
           + **attack_blocked**: Indicated blocked attack.
           + **abnormal_behavior**: Indicates abnormal behavior.
           + **collapsible_host**: Indicates compromised host.
           + **system_vulnerability**: Indicates system vulnerability.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param Sequence[_builtins.str] event_class_ids: Specifies the event ID list.
           The valid values are as follows:
           + **container_1001**: Container namespace.
           + **container_1002**: Container port enabled.
           + **container_1003**: Container security options.
           + **container_1004**: Container mount directory.
           + **containerescape_0001**: High-risk system call.
           + **containerescape_0002**: Shocker attack.
           + **containerescape_0003**: DirtCow attack.
           + **containerescape_0004**: Container file escape.
           + **dockerfile_001**: Modification of user-defined protected container file.
           + **dockerfile_002**: Modification of executable files in the container file system.
           + **dockerproc_001**: Abnormal container process.
           + **fileprotect_0001**: File privilege escalation.
           + **fileprotect_0002**: Key file change.
           + **fileprotect_0003**: Key file path change.
           + **fileprotect_0004**: File/directory change.
           + **av_1002**: Virus.
           + **av_1003**: Worm.
           + **av_1004**: Trojan.
           + **av_1005**: Botnet.
           + **av_1006**: Bbackdoor.
           + **av_1007**: Spyware.
           + **av_1008**: Malicious adware.
           + **av_1009**: Phishing.
           + **av_1010**: Rootkit
           + **av_1011**: Ransomware.
           + **av_1012**: Hacker tool.
           + **av_1013**: Grayware.
           + **av_1015**: Webshell.
           + **av_1016**: Mining software.
           + **login_0001**: Brute-force cracking.
           + **login_0002**: Successful cracking.
           + **login_1001**: Successful login.
           + **login_1002**: Remote login.
           + **login_1003**: Weak password.
           + **malware_0001**: Shell change report.
           + **malware_0002**: Reverse shell report.
           + **malware_1001**: Malicious program.
           + **procdet_0001**: Abnormal process behavior detection.
           + **procdet_0002**: Process privilege escalation.
           + **crontab_0001**: Crontab script privilege escalation.
           + **crontab_0002**: Malicious path privilege escalation.
           + **procreport_0001**: Risky commands.
           + **user_1001**: Account change.
           + **user_1002**: Risky account.
           + **vmescape_0001**: VM sensitive command execution.
           + **vmescape_0002**: Access from virtualization process to sensitive file.
           + **vmescape_0003**: Abnormal VM port access.
           + **webshell_0001**: Website backdoor.
           + **network_1001**: Malicious mining.
           + **network_1002**: DDoS attacks.
           + **network_1003**: Malicious scan.
           + **network_1004**: Attack in sensitive areas.
           + **ransomware_0001**: Ransomware attack.
           + **ransomware_0002**: Ransomware attack.
           + **ransomware_0003**: Ransomware attack.
           + **fileless_0001**: Process injection.
           + **fileless_0002**: Dynamic library injection.
           + **fileless_0003**: Key configuration change.
           + **fileless_0004**: Environment variable change.
           + **fileless_0005**: Memory file process.
           + **fileless_0006**: VDSO hijacking
           + **crontab_1001**: Suspicious crontab task.
           + **vul_exploit_0001**: Redis vulnerability exploit.
           + **vul_exploit_0002**: Hadoop vulnerability exploit.
           + **vul_exploit_0003**: MySQL vulnerability exploit.
           + **rootkit_0001**: Suspicious rootkit file.
           + **rootkit_0002**: Suspicious kernel module.
           + **RASP_0004**: Webshell upload.
           + **RASP_0018**: Fileless webshell.
           + **blockexec_001**: Known ransomware attack.
           + **hips_0001**: Windows Defender disabled.
           + **hips_0002**: Suspicious hacker tool.
           + **hips_0003**: Suspicious ransomware encryption behavior.
           + **hips_0004**: Hidden account creation.
           + **hips_0005**: User password and credential reading.
           + **hips_0006**: Suspicious SAM file export.
           + **hips_0007**: Suspicious shadow copy deletion.
           + **hips_0008**: Backup file deletion.
           + **hips_0009**: Registry of suspicious ransomware.
           + **hips_0010**: Suspicious abnormal process.
           + **hips_0011**: Suspicious scan.
           + **hips_0012**: Suspicious ransomware script running.
           + **hips_0013**: Suspicious mining command execution.
           + **hips_0014**: Suspicious windows security center disabling.
           + **hips_0015**: Suspicious behavior of disabling the firewall service.
           + **hips_0016**: Suspicious system automatic recovery disabling.
           + **hips_0017**: Executable file execution in Office.
           + **hips_0018**: Abnormal file creation with macros in Office.
           + **hips_0019**: Suspicious registry operation.
           + **hips_0020**: Confluence remote code execution.
           + **hips_0021**: MSDT remote code execution.
           + **portscan_0001**: Common port scan.
           + **portscan_0002**: Secret port scan.
           + **k8s_1001**: Kubernetes event deletion.
           + **k8s_1002**: Privileged pod creations.
           + **k8s_1003**: Interactive shell used in pod.
           + **k8s_1004**: Pod created with sensitive directory.
           + **k8s_1005**: Pod created with server network.
           + **k8s_1006**: Pod created with host PID space.
           + **k8s_1007**: Authentication failure when common pods access API server.
           + **k8s_1008**: API server access from common pod using curl.
           + **k8s_1009**: Exec in system management space.
           + **k8s_1010**: Pod created in management space.
           + **k8s_1011**: Static pod creation.
           + **k8s_1012**: DaemonSet creation.
           + **k8s_1013**: Scheduled cluster task creation.
           + **k8s_1014**: Operation on secrets.
           + **k8s_1015**: Allowed operation enumeration.
           + **k8s_1016**: High privilege RoleBinding or ClusterRoleBinding.
           + **k8s_1017**: ServiceAccount creation.
           + **k8s_1018**: Cronjob creation.
           + **k8s_1019**: Interactive shell used for exec in pods.
           + **k8s_1020**: Unauthorized access to API server.
           + **k8s_1021**: Access to API server with curl.
           + **k8s_1022**: Ingress vulnerability.
           + **k8s_1023**: MITM attack.
           + **k8s_1024**: Worm or mining or Trojan.
           + **k8s_1025**: K8s event deletion.
           + **k8s_1026**: SelfSubjectRulesReview.
           + **imgblock_0001**: Image blocking based on whitelist.
           + **imgblock_0002**: Image blocking based on blacklist.
           + **imgblock_0003**: Image tag blocking based on whitelist.
           + **imgblock_0004**: Image tag blocking based on blacklist.
           + **imgblock_0005**: Container creation blocked based on whitelist.
           + **imgblock_0006**: Container creation blocked based on blacklist.
           + **imgblock_0007**: Container mount proc blocking.
           + **imgblock_0008**: Container seccomp unconfined blocking.
           + **imgblock_0009**: Container privilege blocking.
           + **imgblock_0010**: Container capabilities blocking.
    :param _builtins.str event_name: Specifies the alarm name. Supports fuzzy match.
    :param _builtins.int event_type: Specifies the event type.
           The valid values are as follows:
           + **1001**: Common malware.
           + **1002**: Virus.
           + **1003**: Worm.
           + **1004**: Trojan.
           + **1005**: Botnet.
           + **1006**: Backdoor.
           + **1010**: Rootkit.
           + **1011**: Ransomware.
           + **1012**: Hacker tool.
           + **1015**: Web shell.
           + **1016**: Mining.
           + **1017**: Reverse shell.
           + **2001**: Common vulnerability exploit.
           + **2012**: Remote code execution.
           + **2047**: Redis vulnerability exploit.
           + **2048**: Hadoop vulnerability exploit.
           + **2049**: MySQL vulnerability exploit.
           + **3002**: File privilege escalation.
           + **3003**: Process privilege escalation.
           + **3004**: Critical file change.
           + **3005**: File/directory change.
           + **3007**: Abnormal process behavior.
           + **3015**: High-risk command execution.
           + **3018**: Abnormal shell.
           + **3027**: Suspicious crontab task.
           + **3029**: System protection disabled.
           + **3030**: Backup deletion.
           + **3031**: Suspicious registry operations.
           + **3036**: Container image blocking.
           + **4002**: Brute-force attack.
           + **4004**: Abnormal login.
           + **4006**: Invalid accounts.
           + **4014**: Account added.
           + **4020**: Password theft.
           + **6002**: Port scan.
           + **6003**: Server scan.
           + **13001**: Kubernetes event deletion.
           + **13002**: Abnormal pod behavior.
           + **13003**: Enumerating user information.
           + **13004**: Cluster role binding.
    :param _builtins.str handle_status: Specifies the handling status.
           The valid values are as follows:
           + **unhandled**
           + **handled**
    :param _builtins.str host_ip: Specifies the host IP address.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.str private_ip: Specifies the host private IP address.
    :param _builtins.str public_ip: Specifies the host EIP.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str severity: Specifies the threat level.
           The valid values are as follows:
           + **Security**
           + **Low**
           + **Medium**
           + **High**
           + **Critical**
    :param _builtins.str sort_dir: Specifies sorting order.
           The valid values are as follows:
           + **asc**: Ascending order.
           + **desc**: Descending order.
           
           If `sort_key` is not empty, the returned results are sorted in ascending or descending order by `sort_key`.
           The default order is descending.
    :param _builtins.str sort_key: Specifies sorting field.
           The valid value is **handle_time**.
    """
    __args__ = dict()
    __args__['assetValue'] = asset_value
    __args__['attackTag'] = attack_tag
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['eventClassIds'] = event_class_ids
    __args__['eventName'] = event_name
    __args__['eventType'] = event_type
    __args__['handleStatus'] = handle_status
    __args__['hostIp'] = host_ip
    __args__['hostName'] = host_name
    __args__['privateIp'] = private_ip
    __args__['publicIp'] = public_ip
    __args__['region'] = region
    __args__['severity'] = severity
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getEventHandleHistory:getEventHandleHistory', __args__, opts=opts, typ=GetEventHandleHistoryResult).value

    return AwaitableGetEventHandleHistoryResult(
        asset_value=pulumi.get(__ret__, 'asset_value'),
        attack_tag=pulumi.get(__ret__, 'attack_tag'),
        data_lists=pulumi.get(__ret__, 'data_lists'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        event_class_ids=pulumi.get(__ret__, 'event_class_ids'),
        event_name=pulumi.get(__ret__, 'event_name'),
        event_type=pulumi.get(__ret__, 'event_type'),
        handle_status=pulumi.get(__ret__, 'handle_status'),
        host_ip=pulumi.get(__ret__, 'host_ip'),
        host_name=pulumi.get(__ret__, 'host_name'),
        id=pulumi.get(__ret__, 'id'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        public_ip=pulumi.get(__ret__, 'public_ip'),
        region=pulumi.get(__ret__, 'region'),
        severity=pulumi.get(__ret__, 'severity'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'))
def get_event_handle_history_output(asset_value: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    attack_tag: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    event_class_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                    event_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    event_type: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                    handle_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    host_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    host_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    private_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    public_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    severity: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEventHandleHistoryResult]:
    """
    Use this data source to get the list of historical alarm records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_event_handle_history()
    ```


    :param _builtins.str asset_value: Specifies the asset importance.
           The valid values are as follows:
           + **important**
           + **common**
           + **test**
    :param _builtins.str attack_tag: Specifies the attack flag.
           The valid values are as follows:
           + **attack_success**: Indicates attack success.
           + **attack_attempt**: Indicates attack attempt.
           + **attack_blocked**: Indicated blocked attack.
           + **abnormal_behavior**: Indicates abnormal behavior.
           + **collapsible_host**: Indicates compromised host.
           + **system_vulnerability**: Indicates system vulnerability.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param Sequence[_builtins.str] event_class_ids: Specifies the event ID list.
           The valid values are as follows:
           + **container_1001**: Container namespace.
           + **container_1002**: Container port enabled.
           + **container_1003**: Container security options.
           + **container_1004**: Container mount directory.
           + **containerescape_0001**: High-risk system call.
           + **containerescape_0002**: Shocker attack.
           + **containerescape_0003**: DirtCow attack.
           + **containerescape_0004**: Container file escape.
           + **dockerfile_001**: Modification of user-defined protected container file.
           + **dockerfile_002**: Modification of executable files in the container file system.
           + **dockerproc_001**: Abnormal container process.
           + **fileprotect_0001**: File privilege escalation.
           + **fileprotect_0002**: Key file change.
           + **fileprotect_0003**: Key file path change.
           + **fileprotect_0004**: File/directory change.
           + **av_1002**: Virus.
           + **av_1003**: Worm.
           + **av_1004**: Trojan.
           + **av_1005**: Botnet.
           + **av_1006**: Bbackdoor.
           + **av_1007**: Spyware.
           + **av_1008**: Malicious adware.
           + **av_1009**: Phishing.
           + **av_1010**: Rootkit
           + **av_1011**: Ransomware.
           + **av_1012**: Hacker tool.
           + **av_1013**: Grayware.
           + **av_1015**: Webshell.
           + **av_1016**: Mining software.
           + **login_0001**: Brute-force cracking.
           + **login_0002**: Successful cracking.
           + **login_1001**: Successful login.
           + **login_1002**: Remote login.
           + **login_1003**: Weak password.
           + **malware_0001**: Shell change report.
           + **malware_0002**: Reverse shell report.
           + **malware_1001**: Malicious program.
           + **procdet_0001**: Abnormal process behavior detection.
           + **procdet_0002**: Process privilege escalation.
           + **crontab_0001**: Crontab script privilege escalation.
           + **crontab_0002**: Malicious path privilege escalation.
           + **procreport_0001**: Risky commands.
           + **user_1001**: Account change.
           + **user_1002**: Risky account.
           + **vmescape_0001**: VM sensitive command execution.
           + **vmescape_0002**: Access from virtualization process to sensitive file.
           + **vmescape_0003**: Abnormal VM port access.
           + **webshell_0001**: Website backdoor.
           + **network_1001**: Malicious mining.
           + **network_1002**: DDoS attacks.
           + **network_1003**: Malicious scan.
           + **network_1004**: Attack in sensitive areas.
           + **ransomware_0001**: Ransomware attack.
           + **ransomware_0002**: Ransomware attack.
           + **ransomware_0003**: Ransomware attack.
           + **fileless_0001**: Process injection.
           + **fileless_0002**: Dynamic library injection.
           + **fileless_0003**: Key configuration change.
           + **fileless_0004**: Environment variable change.
           + **fileless_0005**: Memory file process.
           + **fileless_0006**: VDSO hijacking
           + **crontab_1001**: Suspicious crontab task.
           + **vul_exploit_0001**: Redis vulnerability exploit.
           + **vul_exploit_0002**: Hadoop vulnerability exploit.
           + **vul_exploit_0003**: MySQL vulnerability exploit.
           + **rootkit_0001**: Suspicious rootkit file.
           + **rootkit_0002**: Suspicious kernel module.
           + **RASP_0004**: Webshell upload.
           + **RASP_0018**: Fileless webshell.
           + **blockexec_001**: Known ransomware attack.
           + **hips_0001**: Windows Defender disabled.
           + **hips_0002**: Suspicious hacker tool.
           + **hips_0003**: Suspicious ransomware encryption behavior.
           + **hips_0004**: Hidden account creation.
           + **hips_0005**: User password and credential reading.
           + **hips_0006**: Suspicious SAM file export.
           + **hips_0007**: Suspicious shadow copy deletion.
           + **hips_0008**: Backup file deletion.
           + **hips_0009**: Registry of suspicious ransomware.
           + **hips_0010**: Suspicious abnormal process.
           + **hips_0011**: Suspicious scan.
           + **hips_0012**: Suspicious ransomware script running.
           + **hips_0013**: Suspicious mining command execution.
           + **hips_0014**: Suspicious windows security center disabling.
           + **hips_0015**: Suspicious behavior of disabling the firewall service.
           + **hips_0016**: Suspicious system automatic recovery disabling.
           + **hips_0017**: Executable file execution in Office.
           + **hips_0018**: Abnormal file creation with macros in Office.
           + **hips_0019**: Suspicious registry operation.
           + **hips_0020**: Confluence remote code execution.
           + **hips_0021**: MSDT remote code execution.
           + **portscan_0001**: Common port scan.
           + **portscan_0002**: Secret port scan.
           + **k8s_1001**: Kubernetes event deletion.
           + **k8s_1002**: Privileged pod creations.
           + **k8s_1003**: Interactive shell used in pod.
           + **k8s_1004**: Pod created with sensitive directory.
           + **k8s_1005**: Pod created with server network.
           + **k8s_1006**: Pod created with host PID space.
           + **k8s_1007**: Authentication failure when common pods access API server.
           + **k8s_1008**: API server access from common pod using curl.
           + **k8s_1009**: Exec in system management space.
           + **k8s_1010**: Pod created in management space.
           + **k8s_1011**: Static pod creation.
           + **k8s_1012**: DaemonSet creation.
           + **k8s_1013**: Scheduled cluster task creation.
           + **k8s_1014**: Operation on secrets.
           + **k8s_1015**: Allowed operation enumeration.
           + **k8s_1016**: High privilege RoleBinding or ClusterRoleBinding.
           + **k8s_1017**: ServiceAccount creation.
           + **k8s_1018**: Cronjob creation.
           + **k8s_1019**: Interactive shell used for exec in pods.
           + **k8s_1020**: Unauthorized access to API server.
           + **k8s_1021**: Access to API server with curl.
           + **k8s_1022**: Ingress vulnerability.
           + **k8s_1023**: MITM attack.
           + **k8s_1024**: Worm or mining or Trojan.
           + **k8s_1025**: K8s event deletion.
           + **k8s_1026**: SelfSubjectRulesReview.
           + **imgblock_0001**: Image blocking based on whitelist.
           + **imgblock_0002**: Image blocking based on blacklist.
           + **imgblock_0003**: Image tag blocking based on whitelist.
           + **imgblock_0004**: Image tag blocking based on blacklist.
           + **imgblock_0005**: Container creation blocked based on whitelist.
           + **imgblock_0006**: Container creation blocked based on blacklist.
           + **imgblock_0007**: Container mount proc blocking.
           + **imgblock_0008**: Container seccomp unconfined blocking.
           + **imgblock_0009**: Container privilege blocking.
           + **imgblock_0010**: Container capabilities blocking.
    :param _builtins.str event_name: Specifies the alarm name. Supports fuzzy match.
    :param _builtins.int event_type: Specifies the event type.
           The valid values are as follows:
           + **1001**: Common malware.
           + **1002**: Virus.
           + **1003**: Worm.
           + **1004**: Trojan.
           + **1005**: Botnet.
           + **1006**: Backdoor.
           + **1010**: Rootkit.
           + **1011**: Ransomware.
           + **1012**: Hacker tool.
           + **1015**: Web shell.
           + **1016**: Mining.
           + **1017**: Reverse shell.
           + **2001**: Common vulnerability exploit.
           + **2012**: Remote code execution.
           + **2047**: Redis vulnerability exploit.
           + **2048**: Hadoop vulnerability exploit.
           + **2049**: MySQL vulnerability exploit.
           + **3002**: File privilege escalation.
           + **3003**: Process privilege escalation.
           + **3004**: Critical file change.
           + **3005**: File/directory change.
           + **3007**: Abnormal process behavior.
           + **3015**: High-risk command execution.
           + **3018**: Abnormal shell.
           + **3027**: Suspicious crontab task.
           + **3029**: System protection disabled.
           + **3030**: Backup deletion.
           + **3031**: Suspicious registry operations.
           + **3036**: Container image blocking.
           + **4002**: Brute-force attack.
           + **4004**: Abnormal login.
           + **4006**: Invalid accounts.
           + **4014**: Account added.
           + **4020**: Password theft.
           + **6002**: Port scan.
           + **6003**: Server scan.
           + **13001**: Kubernetes event deletion.
           + **13002**: Abnormal pod behavior.
           + **13003**: Enumerating user information.
           + **13004**: Cluster role binding.
    :param _builtins.str handle_status: Specifies the handling status.
           The valid values are as follows:
           + **unhandled**
           + **handled**
    :param _builtins.str host_ip: Specifies the host IP address.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.str private_ip: Specifies the host private IP address.
    :param _builtins.str public_ip: Specifies the host EIP.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str severity: Specifies the threat level.
           The valid values are as follows:
           + **Security**
           + **Low**
           + **Medium**
           + **High**
           + **Critical**
    :param _builtins.str sort_dir: Specifies sorting order.
           The valid values are as follows:
           + **asc**: Ascending order.
           + **desc**: Descending order.
           
           If `sort_key` is not empty, the returned results are sorted in ascending or descending order by `sort_key`.
           The default order is descending.
    :param _builtins.str sort_key: Specifies sorting field.
           The valid value is **handle_time**.
    """
    __args__ = dict()
    __args__['assetValue'] = asset_value
    __args__['attackTag'] = attack_tag
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['eventClassIds'] = event_class_ids
    __args__['eventName'] = event_name
    __args__['eventType'] = event_type
    __args__['handleStatus'] = handle_status
    __args__['hostIp'] = host_ip
    __args__['hostName'] = host_name
    __args__['privateIp'] = private_ip
    __args__['publicIp'] = public_ip
    __args__['region'] = region
    __args__['severity'] = severity
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getEventHandleHistory:getEventHandleHistory', __args__, opts=opts, typ=GetEventHandleHistoryResult)
    return __ret__.apply(lambda __response__: GetEventHandleHistoryResult(
        asset_value=pulumi.get(__response__, 'asset_value'),
        attack_tag=pulumi.get(__response__, 'attack_tag'),
        data_lists=pulumi.get(__response__, 'data_lists'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        event_class_ids=pulumi.get(__response__, 'event_class_ids'),
        event_name=pulumi.get(__response__, 'event_name'),
        event_type=pulumi.get(__response__, 'event_type'),
        handle_status=pulumi.get(__response__, 'handle_status'),
        host_ip=pulumi.get(__response__, 'host_ip'),
        host_name=pulumi.get(__response__, 'host_name'),
        id=pulumi.get(__response__, 'id'),
        private_ip=pulumi.get(__response__, 'private_ip'),
        public_ip=pulumi.get(__response__, 'public_ip'),
        region=pulumi.get(__response__, 'region'),
        severity=pulumi.get(__response__, 'severity'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key')))
