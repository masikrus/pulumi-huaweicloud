# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAssetAppsResult',
    'AwaitableGetAssetAppsResult',
    'get_asset_apps',
    'get_asset_apps_output',
]

@pulumi.output_type
class GetAssetAppsResult:
    """
    A collection of values returned by getAssetApps.
    """
    def __init__(__self__, app_name=None, category=None, data_lists=None, enterprise_project_id=None, host_id=None, host_ip=None, host_name=None, id=None, install_dir=None, part_match=None, region=None, version=None):
        if app_name and not isinstance(app_name, str):
            raise TypeError("Expected argument 'app_name' to be a str")
        pulumi.set(__self__, "app_name", app_name)
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        pulumi.set(__self__, "category", category)
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if host_id and not isinstance(host_id, str):
            raise TypeError("Expected argument 'host_id' to be a str")
        pulumi.set(__self__, "host_id", host_id)
        if host_ip and not isinstance(host_ip, str):
            raise TypeError("Expected argument 'host_ip' to be a str")
        pulumi.set(__self__, "host_ip", host_ip)
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        pulumi.set(__self__, "host_name", host_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if install_dir and not isinstance(install_dir, str):
            raise TypeError("Expected argument 'install_dir' to be a str")
        pulumi.set(__self__, "install_dir", install_dir)
        if part_match and not isinstance(part_match, bool):
            raise TypeError("Expected argument 'part_match' to be a bool")
        pulumi.set(__self__, "part_match", part_match)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[_builtins.str]:
        """
        The software name.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetAssetAppsDataListResult']:
        """
        The software list.
        The data_list structure is documented below.
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[_builtins.str]:
        """
        The host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[_builtins.str]:
        """
        The host IP address.
        """
        return pulumi.get(self, "host_ip")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="installDir")
    def install_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "install_dir")

    @_builtins.property
    @pulumi.getter(name="partMatch")
    def part_match(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "part_match")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        The version number.
        """
        return pulumi.get(self, "version")


class AwaitableGetAssetAppsResult(GetAssetAppsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAssetAppsResult(
            app_name=self.app_name,
            category=self.category,
            data_lists=self.data_lists,
            enterprise_project_id=self.enterprise_project_id,
            host_id=self.host_id,
            host_ip=self.host_ip,
            host_name=self.host_name,
            id=self.id,
            install_dir=self.install_dir,
            part_match=self.part_match,
            region=self.region,
            version=self.version)


def get_asset_apps(app_name: Optional[_builtins.str] = None,
                   category: Optional[_builtins.str] = None,
                   enterprise_project_id: Optional[_builtins.str] = None,
                   host_id: Optional[_builtins.str] = None,
                   host_ip: Optional[_builtins.str] = None,
                   host_name: Optional[_builtins.str] = None,
                   install_dir: Optional[_builtins.str] = None,
                   part_match: Optional[_builtins.bool] = None,
                   region: Optional[_builtins.str] = None,
                   version: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAssetAppsResult:
    """
    Use this data source to query the HSS asset app list within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_asset_apps()
    ```


    :param _builtins.str app_name: Specifies the software name.
    :param _builtins.str category: Specifies the type. The default value is **host**.
           The valid values are as follows:
           + **host**: Host.
           + **container**: Container.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the hosts belong.
           This parameter is valid only when the enterprise project function is enabled.
           The value **all_granted_eps** indicates all enterprise projects.
           If omitted, the default enterprise project will be used.
    :param _builtins.str host_id: Specifies the host ID.
    :param _builtins.str host_ip: Specifies the host IP address.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.str install_dir: Specifies the installation directory.
    :param _builtins.bool part_match: Specifies whether fuzzy match is used. The default value is **false**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str version: Specifies the software version.
    """
    __args__ = dict()
    __args__['appName'] = app_name
    __args__['category'] = category
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostId'] = host_id
    __args__['hostIp'] = host_ip
    __args__['hostName'] = host_name
    __args__['installDir'] = install_dir
    __args__['partMatch'] = part_match
    __args__['region'] = region
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getAssetApps:getAssetApps', __args__, opts=opts, typ=GetAssetAppsResult).value

    return AwaitableGetAssetAppsResult(
        app_name=pulumi.get(__ret__, 'app_name'),
        category=pulumi.get(__ret__, 'category'),
        data_lists=pulumi.get(__ret__, 'data_lists'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        host_id=pulumi.get(__ret__, 'host_id'),
        host_ip=pulumi.get(__ret__, 'host_ip'),
        host_name=pulumi.get(__ret__, 'host_name'),
        id=pulumi.get(__ret__, 'id'),
        install_dir=pulumi.get(__ret__, 'install_dir'),
        part_match=pulumi.get(__ret__, 'part_match'),
        region=pulumi.get(__ret__, 'region'),
        version=pulumi.get(__ret__, 'version'))
def get_asset_apps_output(app_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          category: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          host_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          host_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          host_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          install_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          part_match: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAssetAppsResult]:
    """
    Use this data source to query the HSS asset app list within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_asset_apps()
    ```


    :param _builtins.str app_name: Specifies the software name.
    :param _builtins.str category: Specifies the type. The default value is **host**.
           The valid values are as follows:
           + **host**: Host.
           + **container**: Container.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the hosts belong.
           This parameter is valid only when the enterprise project function is enabled.
           The value **all_granted_eps** indicates all enterprise projects.
           If omitted, the default enterprise project will be used.
    :param _builtins.str host_id: Specifies the host ID.
    :param _builtins.str host_ip: Specifies the host IP address.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.str install_dir: Specifies the installation directory.
    :param _builtins.bool part_match: Specifies whether fuzzy match is used. The default value is **false**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str version: Specifies the software version.
    """
    __args__ = dict()
    __args__['appName'] = app_name
    __args__['category'] = category
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostId'] = host_id
    __args__['hostIp'] = host_ip
    __args__['hostName'] = host_name
    __args__['installDir'] = install_dir
    __args__['partMatch'] = part_match
    __args__['region'] = region
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getAssetApps:getAssetApps', __args__, opts=opts, typ=GetAssetAppsResult)
    return __ret__.apply(lambda __response__: GetAssetAppsResult(
        app_name=pulumi.get(__response__, 'app_name'),
        category=pulumi.get(__response__, 'category'),
        data_lists=pulumi.get(__response__, 'data_lists'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        host_id=pulumi.get(__response__, 'host_id'),
        host_ip=pulumi.get(__response__, 'host_ip'),
        host_name=pulumi.get(__response__, 'host_name'),
        id=pulumi.get(__response__, 'id'),
        install_dir=pulumi.get(__response__, 'install_dir'),
        part_match=pulumi.get(__response__, 'part_match'),
        region=pulumi.get(__response__, 'region'),
        version=pulumi.get(__response__, 'version')))
