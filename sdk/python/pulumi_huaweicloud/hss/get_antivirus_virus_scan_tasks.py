# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAntivirusVirusScanTasksResult',
    'AwaitableGetAntivirusVirusScanTasksResult',
    'get_antivirus_virus_scan_tasks',
    'get_antivirus_virus_scan_tasks_output',
]

@pulumi.output_type
class GetAntivirusVirusScanTasksResult:
    """
    A collection of values returned by getAntivirusVirusScanTasks.
    """
    def __init__(__self__, begin_time=None, data_lists=None, end_time=None, enterprise_project_id=None, host_name=None, host_task_statuses=None, id=None, last_days=None, private_ip=None, public_ip=None, region=None, task_name=None, task_status=None, total_num=None, whether_paid_task=None):
        if begin_time and not isinstance(begin_time, str):
            raise TypeError("Expected argument 'begin_time' to be a str")
        pulumi.set(__self__, "begin_time", begin_time)
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        pulumi.set(__self__, "host_name", host_name)
        if host_task_statuses and not isinstance(host_task_statuses, list):
            raise TypeError("Expected argument 'host_task_statuses' to be a list")
        pulumi.set(__self__, "host_task_statuses", host_task_statuses)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_days and not isinstance(last_days, int):
            raise TypeError("Expected argument 'last_days' to be a int")
        pulumi.set(__self__, "last_days", last_days)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if task_name and not isinstance(task_name, str):
            raise TypeError("Expected argument 'task_name' to be a str")
        pulumi.set(__self__, "task_name", task_name)
        if task_status and not isinstance(task_status, str):
            raise TypeError("Expected argument 'task_status' to be a str")
        pulumi.set(__self__, "task_status", task_status)
        if total_num and not isinstance(total_num, int):
            raise TypeError("Expected argument 'total_num' to be a int")
        pulumi.set(__self__, "total_num", total_num)
        if whether_paid_task and not isinstance(whether_paid_task, bool):
            raise TypeError("Expected argument 'whether_paid_task' to be a bool")
        pulumi.set(__self__, "whether_paid_task", whether_paid_task)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetAntivirusVirusScanTasksDataListResult']:
        """
        The list of virus scan tasks details.
        The data_list structure is documented below.
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="hostTaskStatuses")
    def host_task_statuses(self) -> Optional[Sequence[_builtins.str]]:
        """
        The host scanning status.
        """
        return pulumi.get(self, "host_task_statuses")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastDays")
    def last_days(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "last_days")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        The host private IP address.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The host public IP address.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[_builtins.str]:
        """
        The task name.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> Optional[_builtins.str]:
        """
        The task status.  
        The valid values are as follows:
        + **scanning**
        + **finish**
        """
        return pulumi.get(self, "task_status")

    @_builtins.property
    @pulumi.getter(name="totalNum")
    def total_num(self) -> _builtins.int:
        """
        The total number of tasks.
        """
        return pulumi.get(self, "total_num")

    @_builtins.property
    @pulumi.getter(name="whetherPaidTask")
    def whether_paid_task(self) -> _builtins.bool:
        """
        Is this scanning task paid or not.
        """
        return pulumi.get(self, "whether_paid_task")


class AwaitableGetAntivirusVirusScanTasksResult(GetAntivirusVirusScanTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAntivirusVirusScanTasksResult(
            begin_time=self.begin_time,
            data_lists=self.data_lists,
            end_time=self.end_time,
            enterprise_project_id=self.enterprise_project_id,
            host_name=self.host_name,
            host_task_statuses=self.host_task_statuses,
            id=self.id,
            last_days=self.last_days,
            private_ip=self.private_ip,
            public_ip=self.public_ip,
            region=self.region,
            task_name=self.task_name,
            task_status=self.task_status,
            total_num=self.total_num,
            whether_paid_task=self.whether_paid_task)


def get_antivirus_virus_scan_tasks(begin_time: Optional[_builtins.str] = None,
                                   end_time: Optional[_builtins.str] = None,
                                   enterprise_project_id: Optional[_builtins.str] = None,
                                   host_name: Optional[_builtins.str] = None,
                                   host_task_statuses: Optional[Sequence[_builtins.str]] = None,
                                   last_days: Optional[_builtins.int] = None,
                                   private_ip: Optional[_builtins.str] = None,
                                   public_ip: Optional[_builtins.str] = None,
                                   region: Optional[_builtins.str] = None,
                                   task_name: Optional[_builtins.str] = None,
                                   task_status: Optional[_builtins.str] = None,
                                   whether_paid_task: Optional[_builtins.bool] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAntivirusVirusScanTasksResult:
    """
    Use this data source to get the list of HSS virus scan tasks within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_antivirus_virus_scan_tasks()
    ```


    :param _builtins.str begin_time: Specifies the starting time of the query time period, with a millisecond-level
           timestamp. It is mutually exclusive with parameter `last_days`, and it needs to satisfy the condition that the
           difference between `end_time` and `begin_time` is less than or equal to `2` days.
    :param _builtins.str end_time: Specifies the end time of the query time period, with a millisecond-level
           timestamp. It is mutually exclusive with parameter `last_days`, and it needs to satisfy the condition that the
           difference between `end_time` and `begin_time` is less than or equal to `2` days.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str host_name: Specifies the host name.
    :param Sequence[_builtins.str] host_task_statuses: Specifies the list of host scanning status.  
           The valid values are as follows:
           + **scanning**
           + **success**
           + **fail**
           + **cancel**
    :param _builtins.int last_days: Specifies the number of days within the query time range. Which is mutually exclusive
           with parameters `begin_time` and `end_time`.
    :param _builtins.str private_ip: Specifies the host private IP address.
    :param _builtins.str public_ip: Specifies the host public IP address.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str task_name: Specifies the task name.
    :param _builtins.str task_status: Specifies the task status.  
           The valid values are as follows:
           + **scanning**
           + **cancel**
           + **fail**
           + **finish**
    :param _builtins.bool whether_paid_task: Specifies whether this scanning task is paid or not.  
           The valid values are as follows:
           + **true**
           + **false**
    """
    __args__ = dict()
    __args__['beginTime'] = begin_time
    __args__['endTime'] = end_time
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostName'] = host_name
    __args__['hostTaskStatuses'] = host_task_statuses
    __args__['lastDays'] = last_days
    __args__['privateIp'] = private_ip
    __args__['publicIp'] = public_ip
    __args__['region'] = region
    __args__['taskName'] = task_name
    __args__['taskStatus'] = task_status
    __args__['whetherPaidTask'] = whether_paid_task
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getAntivirusVirusScanTasks:getAntivirusVirusScanTasks', __args__, opts=opts, typ=GetAntivirusVirusScanTasksResult).value

    return AwaitableGetAntivirusVirusScanTasksResult(
        begin_time=pulumi.get(__ret__, 'begin_time'),
        data_lists=pulumi.get(__ret__, 'data_lists'),
        end_time=pulumi.get(__ret__, 'end_time'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        host_name=pulumi.get(__ret__, 'host_name'),
        host_task_statuses=pulumi.get(__ret__, 'host_task_statuses'),
        id=pulumi.get(__ret__, 'id'),
        last_days=pulumi.get(__ret__, 'last_days'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        public_ip=pulumi.get(__ret__, 'public_ip'),
        region=pulumi.get(__ret__, 'region'),
        task_name=pulumi.get(__ret__, 'task_name'),
        task_status=pulumi.get(__ret__, 'task_status'),
        total_num=pulumi.get(__ret__, 'total_num'),
        whether_paid_task=pulumi.get(__ret__, 'whether_paid_task'))
def get_antivirus_virus_scan_tasks_output(begin_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          host_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          host_task_statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                          last_days: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                          private_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          public_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          task_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          task_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          whether_paid_task: Optional[pulumi.Input[_builtins.bool]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAntivirusVirusScanTasksResult]:
    """
    Use this data source to get the list of HSS virus scan tasks within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_antivirus_virus_scan_tasks()
    ```


    :param _builtins.str begin_time: Specifies the starting time of the query time period, with a millisecond-level
           timestamp. It is mutually exclusive with parameter `last_days`, and it needs to satisfy the condition that the
           difference between `end_time` and `begin_time` is less than or equal to `2` days.
    :param _builtins.str end_time: Specifies the end time of the query time period, with a millisecond-level
           timestamp. It is mutually exclusive with parameter `last_days`, and it needs to satisfy the condition that the
           difference between `end_time` and `begin_time` is less than or equal to `2` days.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str host_name: Specifies the host name.
    :param Sequence[_builtins.str] host_task_statuses: Specifies the list of host scanning status.  
           The valid values are as follows:
           + **scanning**
           + **success**
           + **fail**
           + **cancel**
    :param _builtins.int last_days: Specifies the number of days within the query time range. Which is mutually exclusive
           with parameters `begin_time` and `end_time`.
    :param _builtins.str private_ip: Specifies the host private IP address.
    :param _builtins.str public_ip: Specifies the host public IP address.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str task_name: Specifies the task name.
    :param _builtins.str task_status: Specifies the task status.  
           The valid values are as follows:
           + **scanning**
           + **cancel**
           + **fail**
           + **finish**
    :param _builtins.bool whether_paid_task: Specifies whether this scanning task is paid or not.  
           The valid values are as follows:
           + **true**
           + **false**
    """
    __args__ = dict()
    __args__['beginTime'] = begin_time
    __args__['endTime'] = end_time
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostName'] = host_name
    __args__['hostTaskStatuses'] = host_task_statuses
    __args__['lastDays'] = last_days
    __args__['privateIp'] = private_ip
    __args__['publicIp'] = public_ip
    __args__['region'] = region
    __args__['taskName'] = task_name
    __args__['taskStatus'] = task_status
    __args__['whetherPaidTask'] = whether_paid_task
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getAntivirusVirusScanTasks:getAntivirusVirusScanTasks', __args__, opts=opts, typ=GetAntivirusVirusScanTasksResult)
    return __ret__.apply(lambda __response__: GetAntivirusVirusScanTasksResult(
        begin_time=pulumi.get(__response__, 'begin_time'),
        data_lists=pulumi.get(__response__, 'data_lists'),
        end_time=pulumi.get(__response__, 'end_time'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        host_name=pulumi.get(__response__, 'host_name'),
        host_task_statuses=pulumi.get(__response__, 'host_task_statuses'),
        id=pulumi.get(__response__, 'id'),
        last_days=pulumi.get(__response__, 'last_days'),
        private_ip=pulumi.get(__response__, 'private_ip'),
        public_ip=pulumi.get(__response__, 'public_ip'),
        region=pulumi.get(__response__, 'region'),
        task_name=pulumi.get(__response__, 'task_name'),
        task_status=pulumi.get(__response__, 'task_status'),
        total_num=pulumi.get(__response__, 'total_num'),
        whether_paid_task=pulumi.get(__response__, 'whether_paid_task')))
