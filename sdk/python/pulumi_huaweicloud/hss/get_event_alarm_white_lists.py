# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEventAlarmWhiteListsResult',
    'AwaitableGetEventAlarmWhiteListsResult',
    'get_event_alarm_white_lists',
    'get_event_alarm_white_lists_output',
]

@pulumi.output_type
class GetEventAlarmWhiteListsResult:
    """
    A collection of values returned by getEventAlarmWhiteLists.
    """
    def __init__(__self__, data_lists=None, enterprise_project_id=None, event_type=None, event_type_lists=None, hash=None, id=None, limit_num=None, region=None, remain_num=None, total_num=None):
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if event_type and not isinstance(event_type, int):
            raise TypeError("Expected argument 'event_type' to be a int")
        pulumi.set(__self__, "event_type", event_type)
        if event_type_lists and not isinstance(event_type_lists, list):
            raise TypeError("Expected argument 'event_type_lists' to be a list")
        pulumi.set(__self__, "event_type_lists", event_type_lists)
        if hash and not isinstance(hash, str):
            raise TypeError("Expected argument 'hash' to be a str")
        pulumi.set(__self__, "hash", hash)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit_num and not isinstance(limit_num, int):
            raise TypeError("Expected argument 'limit_num' to be a int")
        pulumi.set(__self__, "limit_num", limit_num)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if remain_num and not isinstance(remain_num, int):
            raise TypeError("Expected argument 'remain_num' to be a int")
        pulumi.set(__self__, "remain_num", remain_num)
        if total_num and not isinstance(total_num, int):
            raise TypeError("Expected argument 'total_num' to be a int")
        pulumi.set(__self__, "total_num", total_num)

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetEventAlarmWhiteListsDataListResult']:
        """
        The list of white lists details.
        The data_list structure is documented below.
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[_builtins.int]:
        """
        The event type.
        """
        return pulumi.get(self, "event_type")

    @_builtins.property
    @pulumi.getter(name="eventTypeLists")
    def event_type_lists(self) -> Sequence[_builtins.int]:
        """
        The event types that support filtering.
        """
        return pulumi.get(self, "event_type_lists")

    @_builtins.property
    @pulumi.getter
    def hash(self) -> Optional[_builtins.str]:
        """
        The event white list SHA256.
        """
        return pulumi.get(self, "hash")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="limitNum")
    def limit_num(self) -> _builtins.int:
        """
        The maximum number of white lists.
        """
        return pulumi.get(self, "limit_num")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="remainNum")
    def remain_num(self) -> _builtins.int:
        """
        The number of white lists that can continue to be added.
        """
        return pulumi.get(self, "remain_num")

    @_builtins.property
    @pulumi.getter(name="totalNum")
    def total_num(self) -> _builtins.int:
        """
        The total number of white lists.
        """
        return pulumi.get(self, "total_num")


class AwaitableGetEventAlarmWhiteListsResult(GetEventAlarmWhiteListsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventAlarmWhiteListsResult(
            data_lists=self.data_lists,
            enterprise_project_id=self.enterprise_project_id,
            event_type=self.event_type,
            event_type_lists=self.event_type_lists,
            hash=self.hash,
            id=self.id,
            limit_num=self.limit_num,
            region=self.region,
            remain_num=self.remain_num,
            total_num=self.total_num)


def get_event_alarm_white_lists(enterprise_project_id: Optional[_builtins.str] = None,
                                event_type: Optional[_builtins.int] = None,
                                hash: Optional[_builtins.str] = None,
                                region: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventAlarmWhiteListsResult:
    """
    Use this data source to get the list of HSS alarm white lists within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_event_alarm_white_lists()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.int event_type: Specifies the event type.  
           The valid values are as follows:
           + **1001**: General malware.
           + **1002**: Virus.
           + **1003**: Worm.
           + **1004**: Trojan.
           + **1005**: Botnet.
           + **1006**: Backdoor.
           + **1010**: Rootkit.
           + **1011**: Ransomware.
           + **1012**: Hacker tool.
           + **1015**: Webshell.
           + **1016**: Mining.
           + **1017**: Reverse Shell.
           + **2001**: General vulnerability exploitation.
           + **2012**: Remote code execution.
           + **2047**: Redis vulnerability exploitation.
           + **2048**: Hadoop vulnerability exploitation.
           + **2049**: MySQL vulnerability exploitation.
           + **3002**: File privilege escalation.
           + **3003**: Process privilege escalation.
           + **3004**: Key file change.
           + **3005**: File/directory change.
           + **3007**: Process abnormal behavior.
           + **3015**: High-risk command execution.
           + **3018**: Abnormal Shell.
           + **3027**: Crontab suspicious task.
           + **3029**: System security protection disabled.
           + **3030**: Backup deletion.
           + **3031**: Abnormal registry operation.
           + **3036**: Container image blocking.
           + **4002**: Brute force cracking.
           + **4004**: Abnormal login.
           + **4006**: Illegal system account.
           + **4014**: User account addition.
           + **4020**: User password theft.
           + **6002**: Port scanning.
           + **6003**: Host scanning.
           + **13001**: Kubernetes event deletion.
           + **13002**: Pod abnormal behavior.
           + **13003**: Enumerate user information.
           + **13004**: Bind cluster user role.
    :param _builtins.str hash: Specifies the event white list SHA256.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['eventType'] = event_type
    __args__['hash'] = hash
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getEventAlarmWhiteLists:getEventAlarmWhiteLists', __args__, opts=opts, typ=GetEventAlarmWhiteListsResult).value

    return AwaitableGetEventAlarmWhiteListsResult(
        data_lists=pulumi.get(__ret__, 'data_lists'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        event_type=pulumi.get(__ret__, 'event_type'),
        event_type_lists=pulumi.get(__ret__, 'event_type_lists'),
        hash=pulumi.get(__ret__, 'hash'),
        id=pulumi.get(__ret__, 'id'),
        limit_num=pulumi.get(__ret__, 'limit_num'),
        region=pulumi.get(__ret__, 'region'),
        remain_num=pulumi.get(__ret__, 'remain_num'),
        total_num=pulumi.get(__ret__, 'total_num'))
def get_event_alarm_white_lists_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       event_type: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                       hash: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEventAlarmWhiteListsResult]:
    """
    Use this data source to get the list of HSS alarm white lists within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_event_alarm_white_lists()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.int event_type: Specifies the event type.  
           The valid values are as follows:
           + **1001**: General malware.
           + **1002**: Virus.
           + **1003**: Worm.
           + **1004**: Trojan.
           + **1005**: Botnet.
           + **1006**: Backdoor.
           + **1010**: Rootkit.
           + **1011**: Ransomware.
           + **1012**: Hacker tool.
           + **1015**: Webshell.
           + **1016**: Mining.
           + **1017**: Reverse Shell.
           + **2001**: General vulnerability exploitation.
           + **2012**: Remote code execution.
           + **2047**: Redis vulnerability exploitation.
           + **2048**: Hadoop vulnerability exploitation.
           + **2049**: MySQL vulnerability exploitation.
           + **3002**: File privilege escalation.
           + **3003**: Process privilege escalation.
           + **3004**: Key file change.
           + **3005**: File/directory change.
           + **3007**: Process abnormal behavior.
           + **3015**: High-risk command execution.
           + **3018**: Abnormal Shell.
           + **3027**: Crontab suspicious task.
           + **3029**: System security protection disabled.
           + **3030**: Backup deletion.
           + **3031**: Abnormal registry operation.
           + **3036**: Container image blocking.
           + **4002**: Brute force cracking.
           + **4004**: Abnormal login.
           + **4006**: Illegal system account.
           + **4014**: User account addition.
           + **4020**: User password theft.
           + **6002**: Port scanning.
           + **6003**: Host scanning.
           + **13001**: Kubernetes event deletion.
           + **13002**: Pod abnormal behavior.
           + **13003**: Enumerate user information.
           + **13004**: Bind cluster user role.
    :param _builtins.str hash: Specifies the event white list SHA256.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['eventType'] = event_type
    __args__['hash'] = hash
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getEventAlarmWhiteLists:getEventAlarmWhiteLists', __args__, opts=opts, typ=GetEventAlarmWhiteListsResult)
    return __ret__.apply(lambda __response__: GetEventAlarmWhiteListsResult(
        data_lists=pulumi.get(__response__, 'data_lists'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        event_type=pulumi.get(__response__, 'event_type'),
        event_type_lists=pulumi.get(__response__, 'event_type_lists'),
        hash=pulumi.get(__response__, 'hash'),
        id=pulumi.get(__response__, 'id'),
        limit_num=pulumi.get(__response__, 'limit_num'),
        region=pulumi.get(__response__, 'region'),
        remain_num=pulumi.get(__response__, 'remain_num'),
        total_num=pulumi.get(__response__, 'total_num')))
