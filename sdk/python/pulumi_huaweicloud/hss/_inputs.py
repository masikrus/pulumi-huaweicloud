# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CceProtectionRuntimeInfoArgs',
    'CceProtectionRuntimeInfoArgsDict',
    'CceProtectionScheduleInfoArgs',
    'CceProtectionScheduleInfoArgsDict',
    'ContainerExportTaskCreateTimeArgs',
    'ContainerExportTaskCreateTimeArgsDict',
    'ContainerKubernetesClusterDaemonsetDsInfoArgs',
    'ContainerKubernetesClusterDaemonsetDsInfoArgsDict',
    'ContainerKubernetesClusterDaemonsetRuntimeInfoArgs',
    'ContainerKubernetesClusterDaemonsetRuntimeInfoArgsDict',
    'ContainerKubernetesClusterDaemonsetScheduleInfoArgs',
    'ContainerKubernetesClusterDaemonsetScheduleInfoArgsDict',
    'ContainerKubernetesSyncMccsDataListArgs',
    'ContainerKubernetesSyncMccsDataListArgsDict',
    'EventAlarmWhiteListDeleteDataListArgs',
    'EventAlarmWhiteListDeleteDataListArgsDict',
    'EventDeleteIsolatedFileDataListArgs',
    'EventDeleteIsolatedFileDataListArgsDict',
    'EventUnblockIpDataListArgs',
    'EventUnblockIpDataListArgsDict',
    'HoneypotPortPolicyPortListArgs',
    'HoneypotPortPolicyPortListArgsDict',
    'HoneypotPortPolicyPortsListArgs',
    'HoneypotPortPolicyPortsListArgsDict',
    'ImageBatchScanImageInfoListArgs',
    'ImageBatchScanImageInfoListArgsDict',
    'GetContainerKubernetesClustersConfigsClusterInfoListArgs',
    'GetContainerKubernetesClustersConfigsClusterInfoListArgsDict',
]

MYPY = False

if not MYPY:
    class CceProtectionRuntimeInfoArgsDict(TypedDict):
        runtime_name: NotRequired[pulumi.Input[_builtins.str]]
        runtime_path: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CceProtectionRuntimeInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CceProtectionRuntimeInfoArgs:
    def __init__(__self__, *,
                 runtime_name: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_path: Optional[pulumi.Input[_builtins.str]] = None):
        if runtime_name is not None:
            pulumi.set(__self__, "runtime_name", runtime_name)
        if runtime_path is not None:
            pulumi.set(__self__, "runtime_path", runtime_path)

    @_builtins.property
    @pulumi.getter(name="runtimeName")
    def runtime_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "runtime_name")

    @runtime_name.setter
    def runtime_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "runtime_name", value)

    @_builtins.property
    @pulumi.getter(name="runtimePath")
    def runtime_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "runtime_path")

    @runtime_path.setter
    def runtime_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "runtime_path", value)


if not MYPY:
    class CceProtectionScheduleInfoArgsDict(TypedDict):
        node_selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        pod_tolerances: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    CceProtectionScheduleInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CceProtectionScheduleInfoArgs:
    def __init__(__self__, *,
                 node_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pod_tolerances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        if node_selectors is not None:
            pulumi.set(__self__, "node_selectors", node_selectors)
        if pod_tolerances is not None:
            pulumi.set(__self__, "pod_tolerances", pod_tolerances)

    @_builtins.property
    @pulumi.getter(name="nodeSelectors")
    def node_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "node_selectors")

    @node_selectors.setter
    def node_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_selectors", value)

    @_builtins.property
    @pulumi.getter(name="podTolerances")
    def pod_tolerances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "pod_tolerances")

    @pod_tolerances.setter
    def pod_tolerances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pod_tolerances", value)


if not MYPY:
    class ContainerExportTaskCreateTimeArgsDict(TypedDict):
        end_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the end time for filtering containers.
        """
        start_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the start time for filtering containers.
        """
elif False:
    ContainerExportTaskCreateTimeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerExportTaskCreateTimeArgs:
    def __init__(__self__, *,
                 end_time: Optional[pulumi.Input[_builtins.int]] = None,
                 start_time: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] end_time: Specifies the end time for filtering containers.
        :param pulumi.Input[_builtins.int] start_time: Specifies the start time for filtering containers.
        """
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the end time for filtering containers.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the start time for filtering containers.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "start_time", value)


if not MYPY:
    class ContainerKubernetesClusterDaemonsetDsInfoArgsDict(TypedDict):
        current_num: NotRequired[pulumi.Input[_builtins.int]]
        """
        The current quantity.
        """
        desired_num: NotRequired[pulumi.Input[_builtins.int]]
        """
        The target number.
        """
        ready_num: NotRequired[pulumi.Input[_builtins.int]]
        """
        The ready quantity.
        """
elif False:
    ContainerKubernetesClusterDaemonsetDsInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerKubernetesClusterDaemonsetDsInfoArgs:
    def __init__(__self__, *,
                 current_num: Optional[pulumi.Input[_builtins.int]] = None,
                 desired_num: Optional[pulumi.Input[_builtins.int]] = None,
                 ready_num: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] current_num: The current quantity.
        :param pulumi.Input[_builtins.int] desired_num: The target number.
        :param pulumi.Input[_builtins.int] ready_num: The ready quantity.
        """
        if current_num is not None:
            pulumi.set(__self__, "current_num", current_num)
        if desired_num is not None:
            pulumi.set(__self__, "desired_num", desired_num)
        if ready_num is not None:
            pulumi.set(__self__, "ready_num", ready_num)

    @_builtins.property
    @pulumi.getter(name="currentNum")
    def current_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The current quantity.
        """
        return pulumi.get(self, "current_num")

    @current_num.setter
    def current_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "current_num", value)

    @_builtins.property
    @pulumi.getter(name="desiredNum")
    def desired_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The target number.
        """
        return pulumi.get(self, "desired_num")

    @desired_num.setter
    def desired_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "desired_num", value)

    @_builtins.property
    @pulumi.getter(name="readyNum")
    def ready_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The ready quantity.
        """
        return pulumi.get(self, "ready_num")

    @ready_num.setter
    def ready_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ready_num", value)


if not MYPY:
    class ContainerKubernetesClusterDaemonsetRuntimeInfoArgsDict(TypedDict):
        runtime_name: pulumi.Input[_builtins.str]
        """
        Specifies the runtime name.  
        The valid values are as follows:
        + **crio_endpoint**: CRIO.
        + **containerd_endpoint**: Containerd.
        + **docker_endpoint**: Docker.
        + **isulad_endpoint**: Isulad.
        + **podman_endpoint**: Podman.
        """
        runtime_path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the runtime path.  

        <a name="schedule_info_struct"></a>
        The `schedule_info` block supports:
        """
elif False:
    ContainerKubernetesClusterDaemonsetRuntimeInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerKubernetesClusterDaemonsetRuntimeInfoArgs:
    def __init__(__self__, *,
                 runtime_name: pulumi.Input[_builtins.str],
                 runtime_path: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] runtime_name: Specifies the runtime name.  
               The valid values are as follows:
               + **crio_endpoint**: CRIO.
               + **containerd_endpoint**: Containerd.
               + **docker_endpoint**: Docker.
               + **isulad_endpoint**: Isulad.
               + **podman_endpoint**: Podman.
        :param pulumi.Input[_builtins.str] runtime_path: Specifies the runtime path.  
               
               <a name="schedule_info_struct"></a>
               The `schedule_info` block supports:
        """
        pulumi.set(__self__, "runtime_name", runtime_name)
        if runtime_path is not None:
            pulumi.set(__self__, "runtime_path", runtime_path)

    @_builtins.property
    @pulumi.getter(name="runtimeName")
    def runtime_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the runtime name.  
        The valid values are as follows:
        + **crio_endpoint**: CRIO.
        + **containerd_endpoint**: Containerd.
        + **docker_endpoint**: Docker.
        + **isulad_endpoint**: Isulad.
        + **podman_endpoint**: Podman.
        """
        return pulumi.get(self, "runtime_name")

    @runtime_name.setter
    def runtime_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "runtime_name", value)

    @_builtins.property
    @pulumi.getter(name="runtimePath")
    def runtime_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the runtime path.  

        <a name="schedule_info_struct"></a>
        The `schedule_info` block supports:
        """
        return pulumi.get(self, "runtime_path")

    @runtime_path.setter
    def runtime_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "runtime_path", value)


if not MYPY:
    class ContainerKubernetesClusterDaemonsetScheduleInfoArgsDict(TypedDict):
        node_selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the node selector.
        """
        pod_tolerances: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the pod tolerance.
        """
elif False:
    ContainerKubernetesClusterDaemonsetScheduleInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerKubernetesClusterDaemonsetScheduleInfoArgs:
    def __init__(__self__, *,
                 node_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pod_tolerances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] node_selectors: Specifies the node selector.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pod_tolerances: Specifies the pod tolerance.
        """
        if node_selectors is not None:
            pulumi.set(__self__, "node_selectors", node_selectors)
        if pod_tolerances is not None:
            pulumi.set(__self__, "pod_tolerances", pod_tolerances)

    @_builtins.property
    @pulumi.getter(name="nodeSelectors")
    def node_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the node selector.
        """
        return pulumi.get(self, "node_selectors")

    @node_selectors.setter
    def node_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_selectors", value)

    @_builtins.property
    @pulumi.getter(name="podTolerances")
    def pod_tolerances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the pod tolerance.
        """
        return pulumi.get(self, "pod_tolerances")

    @pod_tolerances.setter
    def pod_tolerances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pod_tolerances", value)


if not MYPY:
    class ContainerKubernetesSyncMccsDataListArgsDict(TypedDict):
        cluster_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the cluster to synchronize.
        """
elif False:
    ContainerKubernetesSyncMccsDataListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerKubernetesSyncMccsDataListArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the cluster to synchronize.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the cluster to synchronize.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)


if not MYPY:
    class EventAlarmWhiteListDeleteDataListArgsDict(TypedDict):
        description: pulumi.Input[_builtins.str]
        """
        Specifies the description.
        """
        event_type: pulumi.Input[_builtins.int]
        """
        Specifies the event type.  
        The valid values are as follows:
        + **1001**: General malware.
        + **1002**: Virus.
        + **1003**: Worm.
        + **1004**: Trojan.
        + **1005**: Botnet.
        + **1006**: Backdoor.
        + **1010**: Rootkit.
        + **1011**: Ransomware.
        + **1012**: Hacker tool.
        + **1015**: Webshell.
        + **1016**: Mining.
        + **1017**: Reverse Shell.
        + **2001**: General vulnerability exploitation.
        + **2012**: Remote code execution.
        + **2047**: Redis vulnerability exploitation.
        + **2048**: Hadoop vulnerability exploitation.
        + **2049**: MySQL vulnerability exploitation.
        + **3002**: File privilege escalation.
        + **3003**: Process privilege escalation.
        + **3004**: Key file change.
        + **3005**: File/directory change.
        + **3007**: Process abnormal behavior.
        + **3015**: High-risk command execution.
        + **3018**: Abnormal Shell.
        + **3027**: Crontab suspicious task.
        + **3029**: System security protection disabled.
        + **3030**: Backup deletion.
        + **3031**: Abnormal registry operation.
        + **3036**: Container image blocking.
        + **4002**: Brute force cracking.
        + **4004**: Abnormal login.
        + **4006**: Illegal system account.
        + **4014**: User account addition.
        + **4020**: User password theft.
        + **6002**: Port scanning.
        + **6003**: Host scanning.
        + **13001**: Kubernetes event deletion.
        + **13002**: Pod abnormal behavior.
        + **13003**: Enumerate user information.
        + **13004**: Bind cluster user role.
        """
        hash: pulumi.Input[_builtins.str]
        """
        Specifies the event white list SHA256.
        """
        delete_white_rule: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to delete the alarm white list rule.
        This field is only used when the deleted white list is of rule type.
        """
        field_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the white field value.
        """
        file_hash: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the file hash.
        """
        file_path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the file path.
        """
        judge_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the judge type.  
        The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        """
        white_field: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the white field.  
        The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        """
elif False:
    EventAlarmWhiteListDeleteDataListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EventAlarmWhiteListDeleteDataListArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[_builtins.str],
                 event_type: pulumi.Input[_builtins.int],
                 hash: pulumi.Input[_builtins.str],
                 delete_white_rule: Optional[pulumi.Input[_builtins.bool]] = None,
                 field_value: Optional[pulumi.Input[_builtins.str]] = None,
                 file_hash: Optional[pulumi.Input[_builtins.str]] = None,
                 file_path: Optional[pulumi.Input[_builtins.str]] = None,
                 judge_type: Optional[pulumi.Input[_builtins.str]] = None,
                 white_field: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] description: Specifies the description.
        :param pulumi.Input[_builtins.int] event_type: Specifies the event type.  
               The valid values are as follows:
               + **1001**: General malware.
               + **1002**: Virus.
               + **1003**: Worm.
               + **1004**: Trojan.
               + **1005**: Botnet.
               + **1006**: Backdoor.
               + **1010**: Rootkit.
               + **1011**: Ransomware.
               + **1012**: Hacker tool.
               + **1015**: Webshell.
               + **1016**: Mining.
               + **1017**: Reverse Shell.
               + **2001**: General vulnerability exploitation.
               + **2012**: Remote code execution.
               + **2047**: Redis vulnerability exploitation.
               + **2048**: Hadoop vulnerability exploitation.
               + **2049**: MySQL vulnerability exploitation.
               + **3002**: File privilege escalation.
               + **3003**: Process privilege escalation.
               + **3004**: Key file change.
               + **3005**: File/directory change.
               + **3007**: Process abnormal behavior.
               + **3015**: High-risk command execution.
               + **3018**: Abnormal Shell.
               + **3027**: Crontab suspicious task.
               + **3029**: System security protection disabled.
               + **3030**: Backup deletion.
               + **3031**: Abnormal registry operation.
               + **3036**: Container image blocking.
               + **4002**: Brute force cracking.
               + **4004**: Abnormal login.
               + **4006**: Illegal system account.
               + **4014**: User account addition.
               + **4020**: User password theft.
               + **6002**: Port scanning.
               + **6003**: Host scanning.
               + **13001**: Kubernetes event deletion.
               + **13002**: Pod abnormal behavior.
               + **13003**: Enumerate user information.
               + **13004**: Bind cluster user role.
        :param pulumi.Input[_builtins.str] hash: Specifies the event white list SHA256.
        :param pulumi.Input[_builtins.bool] delete_white_rule: Specifies whether to delete the alarm white list rule.
               This field is only used when the deleted white list is of rule type.
        :param pulumi.Input[_builtins.str] field_value: Specifies the white field value.
        :param pulumi.Input[_builtins.str] file_hash: Specifies the file hash.
        :param pulumi.Input[_builtins.str] file_path: Specifies the file path.
        :param pulumi.Input[_builtins.str] judge_type: Specifies the judge type.  
               The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        :param pulumi.Input[_builtins.str] white_field: Specifies the white field.  
               The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "hash", hash)
        if delete_white_rule is not None:
            pulumi.set(__self__, "delete_white_rule", delete_white_rule)
        if field_value is not None:
            pulumi.set(__self__, "field_value", field_value)
        if file_hash is not None:
            pulumi.set(__self__, "file_hash", file_hash)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if judge_type is not None:
            pulumi.set(__self__, "judge_type", judge_type)
        if white_field is not None:
            pulumi.set(__self__, "white_field", white_field)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the event type.  
        The valid values are as follows:
        + **1001**: General malware.
        + **1002**: Virus.
        + **1003**: Worm.
        + **1004**: Trojan.
        + **1005**: Botnet.
        + **1006**: Backdoor.
        + **1010**: Rootkit.
        + **1011**: Ransomware.
        + **1012**: Hacker tool.
        + **1015**: Webshell.
        + **1016**: Mining.
        + **1017**: Reverse Shell.
        + **2001**: General vulnerability exploitation.
        + **2012**: Remote code execution.
        + **2047**: Redis vulnerability exploitation.
        + **2048**: Hadoop vulnerability exploitation.
        + **2049**: MySQL vulnerability exploitation.
        + **3002**: File privilege escalation.
        + **3003**: Process privilege escalation.
        + **3004**: Key file change.
        + **3005**: File/directory change.
        + **3007**: Process abnormal behavior.
        + **3015**: High-risk command execution.
        + **3018**: Abnormal Shell.
        + **3027**: Crontab suspicious task.
        + **3029**: System security protection disabled.
        + **3030**: Backup deletion.
        + **3031**: Abnormal registry operation.
        + **3036**: Container image blocking.
        + **4002**: Brute force cracking.
        + **4004**: Abnormal login.
        + **4006**: Illegal system account.
        + **4014**: User account addition.
        + **4020**: User password theft.
        + **6002**: Port scanning.
        + **6003**: Host scanning.
        + **13001**: Kubernetes event deletion.
        + **13002**: Pod abnormal behavior.
        + **13003**: Enumerate user information.
        + **13004**: Bind cluster user role.
        """
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "event_type", value)

    @_builtins.property
    @pulumi.getter
    def hash(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the event white list SHA256.
        """
        return pulumi.get(self, "hash")

    @hash.setter
    def hash(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "hash", value)

    @_builtins.property
    @pulumi.getter(name="deleteWhiteRule")
    def delete_white_rule(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete the alarm white list rule.
        This field is only used when the deleted white list is of rule type.
        """
        return pulumi.get(self, "delete_white_rule")

    @delete_white_rule.setter
    def delete_white_rule(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_white_rule", value)

    @_builtins.property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the white field value.
        """
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "field_value", value)

    @_builtins.property
    @pulumi.getter(name="fileHash")
    def file_hash(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the file hash.
        """
        return pulumi.get(self, "file_hash")

    @file_hash.setter
    def file_hash(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file_hash", value)

    @_builtins.property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the file path.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file_path", value)

    @_builtins.property
    @pulumi.getter(name="judgeType")
    def judge_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the judge type.  
        The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        """
        return pulumi.get(self, "judge_type")

    @judge_type.setter
    def judge_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "judge_type", value)

    @_builtins.property
    @pulumi.getter(name="whiteField")
    def white_field(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the white field.  
        The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        """
        return pulumi.get(self, "white_field")

    @white_field.setter
    def white_field(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "white_field", value)


if not MYPY:
    class EventDeleteIsolatedFileDataListArgsDict(TypedDict):
        file_attr: pulumi.Input[_builtins.str]
        file_hash: pulumi.Input[_builtins.str]
        file_path: pulumi.Input[_builtins.str]
        host_id: pulumi.Input[_builtins.str]
elif False:
    EventDeleteIsolatedFileDataListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EventDeleteIsolatedFileDataListArgs:
    def __init__(__self__, *,
                 file_attr: pulumi.Input[_builtins.str],
                 file_hash: pulumi.Input[_builtins.str],
                 file_path: pulumi.Input[_builtins.str],
                 host_id: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "file_attr", file_attr)
        pulumi.set(__self__, "file_hash", file_hash)
        pulumi.set(__self__, "file_path", file_path)
        pulumi.set(__self__, "host_id", host_id)

    @_builtins.property
    @pulumi.getter(name="fileAttr")
    def file_attr(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "file_attr")

    @file_attr.setter
    def file_attr(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "file_attr", value)

    @_builtins.property
    @pulumi.getter(name="fileHash")
    def file_hash(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "file_hash")

    @file_hash.setter
    def file_hash(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "file_hash", value)

    @_builtins.property
    @pulumi.getter(name="filePath")
    def file_path(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "file_path", value)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_id", value)


if not MYPY:
    class EventUnblockIpDataListArgsDict(TypedDict):
        host_id: pulumi.Input[_builtins.str]
        """
        Specifies the host ID.
        """
        login_type: pulumi.Input[_builtins.str]
        """
        Specifies login type.  
        The valid values are as follows:
        + **mysql**: Represents the MySQL service.
        + **rdp**: Represents the RDP service.
        + **ssh**: Represents the SSH service.
        + **vsftp**: Represents the VSFTP service.
        """
        src_ip: pulumi.Input[_builtins.str]
        """
        Specifies the IP address of the attack source.
        """
elif False:
    EventUnblockIpDataListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EventUnblockIpDataListArgs:
    def __init__(__self__, *,
                 host_id: pulumi.Input[_builtins.str],
                 login_type: pulumi.Input[_builtins.str],
                 src_ip: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] host_id: Specifies the host ID.
        :param pulumi.Input[_builtins.str] login_type: Specifies login type.  
               The valid values are as follows:
               + **mysql**: Represents the MySQL service.
               + **rdp**: Represents the RDP service.
               + **ssh**: Represents the SSH service.
               + **vsftp**: Represents the VSFTP service.
        :param pulumi.Input[_builtins.str] src_ip: Specifies the IP address of the attack source.
        """
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "login_type", login_type)
        pulumi.set(__self__, "src_ip", src_ip)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the host ID.
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter(name="loginType")
    def login_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies login type.  
        The valid values are as follows:
        + **mysql**: Represents the MySQL service.
        + **rdp**: Represents the RDP service.
        + **ssh**: Represents the SSH service.
        + **vsftp**: Represents the VSFTP service.
        """
        return pulumi.get(self, "login_type")

    @login_type.setter
    def login_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "login_type", value)

    @_builtins.property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the IP address of the attack source.
        """
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "src_ip", value)


if not MYPY:
    class HoneypotPortPolicyPortListArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the port number.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the protocol type.
        The valid values are as follows:
        + **tcp**
        + **tcp6**
        """
elif False:
    HoneypotPortPolicyPortListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HoneypotPortPolicyPortListArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] port: Specifies the port number.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol type.
               The valid values are as follows:
               + **tcp**
               + **tcp6**
        """
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the port number.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protocol type.
        The valid values are as follows:
        + **tcp**
        + **tcp6**
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class HoneypotPortPolicyPortsListArgsDict(TypedDict):
        port: pulumi.Input[_builtins.int]
        """
        Specifies the port number.
        """
        protocol: pulumi.Input[_builtins.str]
        """
        Specifies the protocol type.
        The valid values are as follows:
        + **tcp**
        + **tcp6**
        """
elif False:
    HoneypotPortPolicyPortsListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HoneypotPortPolicyPortsListArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[_builtins.int],
                 protocol: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.int] port: Specifies the port number.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol type.
               The valid values are as follows:
               + **tcp**
               + **tcp6**
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the port number.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protocol type.
        The valid values are as follows:
        + **tcp**
        + **tcp6**
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class ImageBatchScanImageInfoListArgsDict(TypedDict):
        image_name: pulumi.Input[_builtins.str]
        """
        Specifies the image name.
        """
        image_version: pulumi.Input[_builtins.str]
        """
        Specifies the image version.
        """
        namespace: pulumi.Input[_builtins.str]
        """
        Specifies the namespace.
        """
        instance_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the enterprise instance ID.
        """
        instance_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the URL for downloading enterprise images.
        """
elif False:
    ImageBatchScanImageInfoListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImageBatchScanImageInfoListArgs:
    def __init__(__self__, *,
                 image_name: pulumi.Input[_builtins.str],
                 image_version: pulumi.Input[_builtins.str],
                 namespace: pulumi.Input[_builtins.str],
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] image_name: Specifies the image name.
        :param pulumi.Input[_builtins.str] image_version: Specifies the image version.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the enterprise instance ID.
        :param pulumi.Input[_builtins.str] instance_url: Specifies the URL for downloading enterprise images.
        """
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "image_version", image_version)
        pulumi.set(__self__, "namespace", namespace)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_url is not None:
            pulumi.set(__self__, "instance_url", instance_url)

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the image name.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_name", value)

    @_builtins.property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the image version.
        """
        return pulumi.get(self, "image_version")

    @image_version.setter
    def image_version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_version", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the URL for downloading enterprise images.
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_url", value)


if not MYPY:
    class GetContainerKubernetesClustersConfigsClusterInfoListArgsDict(TypedDict):
        cluster_id: _builtins.str
        """
        Specifies the cluster ID.
        """
        cluster_name: _builtins.str
        """
        Specifies the cluster name.
        """
elif False:
    GetContainerKubernetesClustersConfigsClusterInfoListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetContainerKubernetesClustersConfigsClusterInfoListArgs:
    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 cluster_name: _builtins.str):
        """
        :param _builtins.str cluster_id: Specifies the cluster ID.
        :param _builtins.str cluster_name: Specifies the cluster name.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: _builtins.str):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        Specifies the cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: _builtins.str):
        pulumi.set(self, "cluster_name", value)


