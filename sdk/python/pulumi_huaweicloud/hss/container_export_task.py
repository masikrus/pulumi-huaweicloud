# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerExportTaskArgs', 'ContainerExportTask']

@pulumi.input_type
class ContainerExportTaskArgs:
    def __init__(__self__, *,
                 export_headers: pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]],
                 cluster_container: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 container_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 create_time: Optional[pulumi.Input['ContainerExportTaskCreateTimeArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 export_size: Optional[pulumi.Input[_builtins.int]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 risky: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ContainerExportTask resource.
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]] export_headers: Specifies the header information list for exporting container
               data. The type of this field is an `Array<Array<string>>`. Please refer to Example Usage for the format of valid values.
               Valid key values and their corresponding table header names (table header names can be customized): **container_id**,
               **container_name**, **image_name**, **pod_name**, **cluster_name**, **cluster_type**, **status**, **risky**, **low_risk**,
               **medium_risk**, **high_risk**, **fatal_risk**, **create_time**, **restart_count**, **cpu_limit**, and **memory_limit**.
        :param pulumi.Input[_builtins.str] cluster_container: Specifies whether the container is in a cluster. The valid
               values are:
               + **true**: Only containers in a cluster are exported.
               + **false**: Only non-cluster containers are exported.
               
               This field does not involve a default value.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster to which the container belongs.
               The value contains `1` to `255` characters.
        :param pulumi.Input[_builtins.str] cluster_type: Specifies the cluster type. Options:
               + **cce**: CCE cluster.
               + **ali**: Alibaba Cloud cluster.
               + **tencent**: Tencent Cloud cluster.
               + **azure**: Microsoft Azure Cloud cluster.
               + **aws**: AWS Cloud cluster.
               + **self_built_hw**: Customer-built cluster on Huawei Cloud.
               + **self_built_idc**: IDC on-premises cluster.
        :param pulumi.Input[_builtins.str] container_name: Specifies the name of the container to export.
               The value contains `1` to `255` characters.
        :param pulumi.Input[_builtins.str] cpu_limit: Specifies the CPU limit for the container.
               You can enter `0` to `64` characters. The unit is m, for example, **100m**.
        :param pulumi.Input['ContainerExportTaskCreateTimeArgs'] create_time: Specifies the time range for filtering containers.
               The create_time structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project that the server
               belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
               set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
               transfer the enterprise project ID to query the server in the enterprise project.
               Otherwise, an error is reported due to insufficient permission.
               
               > An enterprise project can be configured only after the enterprise project function is enabled.
        :param pulumi.Input[_builtins.int] export_size: Specifies the number of containers to export.
               The value ranges from `1` to `100,000`.
               
               <a name="create_time_object"></a>
               The `create_time` block supports:
        :param pulumi.Input[_builtins.str] image_name: Specifies the name of the container image.
               The value contains `1` to `255` characters.
        :param pulumi.Input[_builtins.str] memory_limit: Specifies the memory limit for the container.
               You can enter `0` to `64` characters. The unit is Mi or Gi, for example, **300Mi**.
        :param pulumi.Input[_builtins.str] pod_name: Specifies the name of the pod to which the container belongs.
               The value can contain `1` to `512` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] risky: Specifies whether the container has security risks. Options:
               + **true**: Only containers with security risks are to be exported.
               + **false**: Only containers without security risks are to be exported.
        :param pulumi.Input[_builtins.str] status: Specifies the container status. Valid values are **Running**, **Waiting**,
               **Terminated**, **Isolated**, and **Paused**.
        """
        pulumi.set(__self__, "export_headers", export_headers)
        if cluster_container is not None:
            pulumi.set(__self__, "cluster_container", cluster_container)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if export_size is not None:
            pulumi.set(__self__, "export_size", export_size)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if pod_name is not None:
            pulumi.set(__self__, "pod_name", pod_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if risky is not None:
            pulumi.set(__self__, "risky", risky)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="exportHeaders")
    def export_headers(self) -> pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]:
        """
        Specifies the header information list for exporting container
        data. The type of this field is an `Array<Array<string>>`. Please refer to Example Usage for the format of valid values.
        Valid key values and their corresponding table header names (table header names can be customized): **container_id**,
        **container_name**, **image_name**, **pod_name**, **cluster_name**, **cluster_type**, **status**, **risky**, **low_risk**,
        **medium_risk**, **high_risk**, **fatal_risk**, **create_time**, **restart_count**, **cpu_limit**, and **memory_limit**.
        """
        return pulumi.get(self, "export_headers")

    @export_headers.setter
    def export_headers(self, value: pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]):
        pulumi.set(self, "export_headers", value)

    @_builtins.property
    @pulumi.getter(name="clusterContainer")
    def cluster_container(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the container is in a cluster. The valid
        values are:
        + **true**: Only containers in a cluster are exported.
        + **false**: Only non-cluster containers are exported.

        This field does not involve a default value.
        """
        return pulumi.get(self, "cluster_container")

    @cluster_container.setter
    def cluster_container(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_container", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the cluster to which the container belongs.
        The value contains `1` to `255` characters.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster type. Options:
        + **cce**: CCE cluster.
        + **ali**: Alibaba Cloud cluster.
        + **tencent**: Tencent Cloud cluster.
        + **azure**: Microsoft Azure Cloud cluster.
        + **aws**: AWS Cloud cluster.
        + **self_built_hw**: Customer-built cluster on Huawei Cloud.
        + **self_built_idc**: IDC on-premises cluster.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_type", value)

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the container to export.
        The value contains `1` to `255` characters.
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_name", value)

    @_builtins.property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CPU limit for the container.
        You can enter `0` to `64` characters. The unit is m, for example, **100m**.
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cpu_limit", value)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input['ContainerExportTaskCreateTimeArgs']]:
        """
        Specifies the time range for filtering containers.
        The create_time structure is documented below.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input['ContainerExportTaskCreateTimeArgs']]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project that the server
        belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
        set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
        transfer the enterprise project ID to query the server in the enterprise project.
        Otherwise, an error is reported due to insufficient permission.

        > An enterprise project can be configured only after the enterprise project function is enabled.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="exportSize")
    def export_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of containers to export.
        The value ranges from `1` to `100,000`.

        <a name="create_time_object"></a>
        The `create_time` block supports:
        """
        return pulumi.get(self, "export_size")

    @export_size.setter
    def export_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "export_size", value)

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the container image.
        The value contains `1` to `255` characters.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_name", value)

    @_builtins.property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the memory limit for the container.
        You can enter `0` to `64` characters. The unit is Mi or Gi, for example, **300Mi**.
        """
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "memory_limit", value)

    @_builtins.property
    @pulumi.getter(name="podName")
    def pod_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the pod to which the container belongs.
        The value can contain `1` to `512` characters.
        """
        return pulumi.get(self, "pod_name")

    @pod_name.setter
    def pod_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def risky(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the container has security risks. Options:
        + **true**: Only containers with security risks are to be exported.
        + **false**: Only containers without security risks are to be exported.
        """
        return pulumi.get(self, "risky")

    @risky.setter
    def risky(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "risky", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the container status. Valid values are **Running**, **Waiting**,
        **Terminated**, **Isolated**, and **Paused**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _ContainerExportTaskState:
    def __init__(__self__, *,
                 cluster_container: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 container_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 create_time: Optional[pulumi.Input['ContainerExportTaskCreateTimeArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 export_headers: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]] = None,
                 export_size: Optional[pulumi.Input[_builtins.int]] = None,
                 file_id: Optional[pulumi.Input[_builtins.str]] = None,
                 file_name: Optional[pulumi.Input[_builtins.str]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 risky: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ContainerExportTask resources.
        :param pulumi.Input[_builtins.str] cluster_container: Specifies whether the container is in a cluster. The valid
               values are:
               + **true**: Only containers in a cluster are exported.
               + **false**: Only non-cluster containers are exported.
               
               This field does not involve a default value.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster to which the container belongs.
               The value contains `1` to `255` characters.
        :param pulumi.Input[_builtins.str] cluster_type: Specifies the cluster type. Options:
               + **cce**: CCE cluster.
               + **ali**: Alibaba Cloud cluster.
               + **tencent**: Tencent Cloud cluster.
               + **azure**: Microsoft Azure Cloud cluster.
               + **aws**: AWS Cloud cluster.
               + **self_built_hw**: Customer-built cluster on Huawei Cloud.
               + **self_built_idc**: IDC on-premises cluster.
        :param pulumi.Input[_builtins.str] container_name: Specifies the name of the container to export.
               The value contains `1` to `255` characters.
        :param pulumi.Input[_builtins.str] cpu_limit: Specifies the CPU limit for the container.
               You can enter `0` to `64` characters. The unit is m, for example, **100m**.
        :param pulumi.Input['ContainerExportTaskCreateTimeArgs'] create_time: Specifies the time range for filtering containers.
               The create_time structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project that the server
               belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
               set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
               transfer the enterprise project ID to query the server in the enterprise project.
               Otherwise, an error is reported due to insufficient permission.
               
               > An enterprise project can be configured only after the enterprise project function is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]] export_headers: Specifies the header information list for exporting container
               data. The type of this field is an `Array<Array<string>>`. Please refer to Example Usage for the format of valid values.
               Valid key values and their corresponding table header names (table header names can be customized): **container_id**,
               **container_name**, **image_name**, **pod_name**, **cluster_name**, **cluster_type**, **status**, **risky**, **low_risk**,
               **medium_risk**, **high_risk**, **fatal_risk**, **create_time**, **restart_count**, **cpu_limit**, and **memory_limit**.
        :param pulumi.Input[_builtins.int] export_size: Specifies the number of containers to export.
               The value ranges from `1` to `100,000`.
               
               <a name="create_time_object"></a>
               The `create_time` block supports:
        :param pulumi.Input[_builtins.str] file_id: The export file ID.
        :param pulumi.Input[_builtins.str] file_name: The export file name.
        :param pulumi.Input[_builtins.str] image_name: Specifies the name of the container image.
               The value contains `1` to `255` characters.
        :param pulumi.Input[_builtins.str] memory_limit: Specifies the memory limit for the container.
               You can enter `0` to `64` characters. The unit is Mi or Gi, for example, **300Mi**.
        :param pulumi.Input[_builtins.str] pod_name: Specifies the name of the pod to which the container belongs.
               The value can contain `1` to `512` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] risky: Specifies whether the container has security risks. Options:
               + **true**: Only containers with security risks are to be exported.
               + **false**: Only containers without security risks are to be exported.
        :param pulumi.Input[_builtins.str] status: Specifies the container status. Valid values are **Running**, **Waiting**,
               **Terminated**, **Isolated**, and **Paused**.
        :param pulumi.Input[_builtins.str] task_id: The export task ID.
        :param pulumi.Input[_builtins.str] task_name: The export task name.
        :param pulumi.Input[_builtins.str] task_status: The export task status. The valid values are **success**, **failure**, and **running**.
        """
        if cluster_container is not None:
            pulumi.set(__self__, "cluster_container", cluster_container)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if export_headers is not None:
            pulumi.set(__self__, "export_headers", export_headers)
        if export_size is not None:
            pulumi.set(__self__, "export_size", export_size)
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if pod_name is not None:
            pulumi.set(__self__, "pod_name", pod_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if risky is not None:
            pulumi.set(__self__, "risky", risky)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if task_status is not None:
            pulumi.set(__self__, "task_status", task_status)

    @_builtins.property
    @pulumi.getter(name="clusterContainer")
    def cluster_container(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the container is in a cluster. The valid
        values are:
        + **true**: Only containers in a cluster are exported.
        + **false**: Only non-cluster containers are exported.

        This field does not involve a default value.
        """
        return pulumi.get(self, "cluster_container")

    @cluster_container.setter
    def cluster_container(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_container", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the cluster to which the container belongs.
        The value contains `1` to `255` characters.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster type. Options:
        + **cce**: CCE cluster.
        + **ali**: Alibaba Cloud cluster.
        + **tencent**: Tencent Cloud cluster.
        + **azure**: Microsoft Azure Cloud cluster.
        + **aws**: AWS Cloud cluster.
        + **self_built_hw**: Customer-built cluster on Huawei Cloud.
        + **self_built_idc**: IDC on-premises cluster.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_type", value)

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the container to export.
        The value contains `1` to `255` characters.
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_name", value)

    @_builtins.property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CPU limit for the container.
        You can enter `0` to `64` characters. The unit is m, for example, **100m**.
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cpu_limit", value)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input['ContainerExportTaskCreateTimeArgs']]:
        """
        Specifies the time range for filtering containers.
        The create_time structure is documented below.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input['ContainerExportTaskCreateTimeArgs']]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project that the server
        belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
        set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
        transfer the enterprise project ID to query the server in the enterprise project.
        Otherwise, an error is reported due to insufficient permission.

        > An enterprise project can be configured only after the enterprise project function is enabled.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="exportHeaders")
    def export_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]]:
        """
        Specifies the header information list for exporting container
        data. The type of this field is an `Array<Array<string>>`. Please refer to Example Usage for the format of valid values.
        Valid key values and their corresponding table header names (table header names can be customized): **container_id**,
        **container_name**, **image_name**, **pod_name**, **cluster_name**, **cluster_type**, **status**, **risky**, **low_risk**,
        **medium_risk**, **high_risk**, **fatal_risk**, **create_time**, **restart_count**, **cpu_limit**, and **memory_limit**.
        """
        return pulumi.get(self, "export_headers")

    @export_headers.setter
    def export_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]]):
        pulumi.set(self, "export_headers", value)

    @_builtins.property
    @pulumi.getter(name="exportSize")
    def export_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of containers to export.
        The value ranges from `1` to `100,000`.

        <a name="create_time_object"></a>
        The `create_time` block supports:
        """
        return pulumi.get(self, "export_size")

    @export_size.setter
    def export_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "export_size", value)

    @_builtins.property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The export file ID.
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file_id", value)

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The export file name.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file_name", value)

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the container image.
        The value contains `1` to `255` characters.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_name", value)

    @_builtins.property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the memory limit for the container.
        You can enter `0` to `64` characters. The unit is Mi or Gi, for example, **300Mi**.
        """
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "memory_limit", value)

    @_builtins.property
    @pulumi.getter(name="podName")
    def pod_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the pod to which the container belongs.
        The value can contain `1` to `512` characters.
        """
        return pulumi.get(self, "pod_name")

    @pod_name.setter
    def pod_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def risky(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the container has security risks. Options:
        + **true**: Only containers with security risks are to be exported.
        + **false**: Only containers without security risks are to be exported.
        """
        return pulumi.get(self, "risky")

    @risky.setter
    def risky(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "risky", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the container status. Valid values are **Running**, **Waiting**,
        **Terminated**, **Isolated**, and **Paused**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The export task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_id", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The export task name.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The export task status. The valid values are **success**, **failure**, and **running**.
        """
        return pulumi.get(self, "task_status")

    @task_status.setter
    def task_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_status", value)


@pulumi.type_token("huaweicloud:hss/containerExportTask:ContainerExportTask")
class ContainerExportTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_container: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 container_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 create_time: Optional[pulumi.Input[Union['ContainerExportTaskCreateTimeArgs', 'ContainerExportTaskCreateTimeArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 export_headers: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]] = None,
                 export_size: Optional[pulumi.Input[_builtins.int]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 risky: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an HSS container export task resource within HuaweiCloud.

        > This resource is only a one-time action resource for HSS container export. Deleting this resource
           will not clear the corresponding request record, but will only remove the resource information from the tf state file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.hss.ContainerExportTask("test", export_headers=[
            [
                "container_name",
                "Container Name",
            ],
            [
                "cluster_name",
                "Cluster Name",
            ],
            [
                "status",
                "Status",
            ],
        ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_container: Specifies whether the container is in a cluster. The valid
               values are:
               + **true**: Only containers in a cluster are exported.
               + **false**: Only non-cluster containers are exported.
               
               This field does not involve a default value.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster to which the container belongs.
               The value contains `1` to `255` characters.
        :param pulumi.Input[_builtins.str] cluster_type: Specifies the cluster type. Options:
               + **cce**: CCE cluster.
               + **ali**: Alibaba Cloud cluster.
               + **tencent**: Tencent Cloud cluster.
               + **azure**: Microsoft Azure Cloud cluster.
               + **aws**: AWS Cloud cluster.
               + **self_built_hw**: Customer-built cluster on Huawei Cloud.
               + **self_built_idc**: IDC on-premises cluster.
        :param pulumi.Input[_builtins.str] container_name: Specifies the name of the container to export.
               The value contains `1` to `255` characters.
        :param pulumi.Input[_builtins.str] cpu_limit: Specifies the CPU limit for the container.
               You can enter `0` to `64` characters. The unit is m, for example, **100m**.
        :param pulumi.Input[Union['ContainerExportTaskCreateTimeArgs', 'ContainerExportTaskCreateTimeArgsDict']] create_time: Specifies the time range for filtering containers.
               The create_time structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project that the server
               belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
               set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
               transfer the enterprise project ID to query the server in the enterprise project.
               Otherwise, an error is reported due to insufficient permission.
               
               > An enterprise project can be configured only after the enterprise project function is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]] export_headers: Specifies the header information list for exporting container
               data. The type of this field is an `Array<Array<string>>`. Please refer to Example Usage for the format of valid values.
               Valid key values and their corresponding table header names (table header names can be customized): **container_id**,
               **container_name**, **image_name**, **pod_name**, **cluster_name**, **cluster_type**, **status**, **risky**, **low_risk**,
               **medium_risk**, **high_risk**, **fatal_risk**, **create_time**, **restart_count**, **cpu_limit**, and **memory_limit**.
        :param pulumi.Input[_builtins.int] export_size: Specifies the number of containers to export.
               The value ranges from `1` to `100,000`.
               
               <a name="create_time_object"></a>
               The `create_time` block supports:
        :param pulumi.Input[_builtins.str] image_name: Specifies the name of the container image.
               The value contains `1` to `255` characters.
        :param pulumi.Input[_builtins.str] memory_limit: Specifies the memory limit for the container.
               You can enter `0` to `64` characters. The unit is Mi or Gi, for example, **300Mi**.
        :param pulumi.Input[_builtins.str] pod_name: Specifies the name of the pod to which the container belongs.
               The value can contain `1` to `512` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] risky: Specifies whether the container has security risks. Options:
               + **true**: Only containers with security risks are to be exported.
               + **false**: Only containers without security risks are to be exported.
        :param pulumi.Input[_builtins.str] status: Specifies the container status. Valid values are **Running**, **Waiting**,
               **Terminated**, **Isolated**, and **Paused**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerExportTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an HSS container export task resource within HuaweiCloud.

        > This resource is only a one-time action resource for HSS container export. Deleting this resource
           will not clear the corresponding request record, but will only remove the resource information from the tf state file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.hss.ContainerExportTask("test", export_headers=[
            [
                "container_name",
                "Container Name",
            ],
            [
                "cluster_name",
                "Cluster Name",
            ],
            [
                "status",
                "Status",
            ],
        ])
        ```

        :param str resource_name: The name of the resource.
        :param ContainerExportTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerExportTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_container: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 container_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 create_time: Optional[pulumi.Input[Union['ContainerExportTaskCreateTimeArgs', 'ContainerExportTaskCreateTimeArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 export_headers: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]] = None,
                 export_size: Optional[pulumi.Input[_builtins.int]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 risky: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerExportTaskArgs.__new__(ContainerExportTaskArgs)

            __props__.__dict__["cluster_container"] = cluster_container
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["cluster_type"] = cluster_type
            __props__.__dict__["container_name"] = container_name
            __props__.__dict__["cpu_limit"] = cpu_limit
            __props__.__dict__["create_time"] = create_time
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if export_headers is None and not opts.urn:
                raise TypeError("Missing required property 'export_headers'")
            __props__.__dict__["export_headers"] = export_headers
            __props__.__dict__["export_size"] = export_size
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["memory_limit"] = memory_limit
            __props__.__dict__["pod_name"] = pod_name
            __props__.__dict__["region"] = region
            __props__.__dict__["risky"] = risky
            __props__.__dict__["status"] = status
            __props__.__dict__["file_id"] = None
            __props__.__dict__["file_name"] = None
            __props__.__dict__["task_id"] = None
            __props__.__dict__["task_name"] = None
            __props__.__dict__["task_status"] = None
        super(ContainerExportTask, __self__).__init__(
            'huaweicloud:hss/containerExportTask:ContainerExportTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_container: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
            container_name: Optional[pulumi.Input[_builtins.str]] = None,
            cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
            create_time: Optional[pulumi.Input[Union['ContainerExportTaskCreateTimeArgs', 'ContainerExportTaskCreateTimeArgsDict']]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            export_headers: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]] = None,
            export_size: Optional[pulumi.Input[_builtins.int]] = None,
            file_id: Optional[pulumi.Input[_builtins.str]] = None,
            file_name: Optional[pulumi.Input[_builtins.str]] = None,
            image_name: Optional[pulumi.Input[_builtins.str]] = None,
            memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
            pod_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            risky: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            task_id: Optional[pulumi.Input[_builtins.str]] = None,
            task_name: Optional[pulumi.Input[_builtins.str]] = None,
            task_status: Optional[pulumi.Input[_builtins.str]] = None) -> 'ContainerExportTask':
        """
        Get an existing ContainerExportTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_container: Specifies whether the container is in a cluster. The valid
               values are:
               + **true**: Only containers in a cluster are exported.
               + **false**: Only non-cluster containers are exported.
               
               This field does not involve a default value.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster to which the container belongs.
               The value contains `1` to `255` characters.
        :param pulumi.Input[_builtins.str] cluster_type: Specifies the cluster type. Options:
               + **cce**: CCE cluster.
               + **ali**: Alibaba Cloud cluster.
               + **tencent**: Tencent Cloud cluster.
               + **azure**: Microsoft Azure Cloud cluster.
               + **aws**: AWS Cloud cluster.
               + **self_built_hw**: Customer-built cluster on Huawei Cloud.
               + **self_built_idc**: IDC on-premises cluster.
        :param pulumi.Input[_builtins.str] container_name: Specifies the name of the container to export.
               The value contains `1` to `255` characters.
        :param pulumi.Input[_builtins.str] cpu_limit: Specifies the CPU limit for the container.
               You can enter `0` to `64` characters. The unit is m, for example, **100m**.
        :param pulumi.Input[Union['ContainerExportTaskCreateTimeArgs', 'ContainerExportTaskCreateTimeArgsDict']] create_time: Specifies the time range for filtering containers.
               The create_time structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project that the server
               belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
               set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
               transfer the enterprise project ID to query the server in the enterprise project.
               Otherwise, an error is reported due to insufficient permission.
               
               > An enterprise project can be configured only after the enterprise project function is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]] export_headers: Specifies the header information list for exporting container
               data. The type of this field is an `Array<Array<string>>`. Please refer to Example Usage for the format of valid values.
               Valid key values and their corresponding table header names (table header names can be customized): **container_id**,
               **container_name**, **image_name**, **pod_name**, **cluster_name**, **cluster_type**, **status**, **risky**, **low_risk**,
               **medium_risk**, **high_risk**, **fatal_risk**, **create_time**, **restart_count**, **cpu_limit**, and **memory_limit**.
        :param pulumi.Input[_builtins.int] export_size: Specifies the number of containers to export.
               The value ranges from `1` to `100,000`.
               
               <a name="create_time_object"></a>
               The `create_time` block supports:
        :param pulumi.Input[_builtins.str] file_id: The export file ID.
        :param pulumi.Input[_builtins.str] file_name: The export file name.
        :param pulumi.Input[_builtins.str] image_name: Specifies the name of the container image.
               The value contains `1` to `255` characters.
        :param pulumi.Input[_builtins.str] memory_limit: Specifies the memory limit for the container.
               You can enter `0` to `64` characters. The unit is Mi or Gi, for example, **300Mi**.
        :param pulumi.Input[_builtins.str] pod_name: Specifies the name of the pod to which the container belongs.
               The value can contain `1` to `512` characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] risky: Specifies whether the container has security risks. Options:
               + **true**: Only containers with security risks are to be exported.
               + **false**: Only containers without security risks are to be exported.
        :param pulumi.Input[_builtins.str] status: Specifies the container status. Valid values are **Running**, **Waiting**,
               **Terminated**, **Isolated**, and **Paused**.
        :param pulumi.Input[_builtins.str] task_id: The export task ID.
        :param pulumi.Input[_builtins.str] task_name: The export task name.
        :param pulumi.Input[_builtins.str] task_status: The export task status. The valid values are **success**, **failure**, and **running**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerExportTaskState.__new__(_ContainerExportTaskState)

        __props__.__dict__["cluster_container"] = cluster_container
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["container_name"] = container_name
        __props__.__dict__["cpu_limit"] = cpu_limit
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["export_headers"] = export_headers
        __props__.__dict__["export_size"] = export_size
        __props__.__dict__["file_id"] = file_id
        __props__.__dict__["file_name"] = file_name
        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["memory_limit"] = memory_limit
        __props__.__dict__["pod_name"] = pod_name
        __props__.__dict__["region"] = region
        __props__.__dict__["risky"] = risky
        __props__.__dict__["status"] = status
        __props__.__dict__["task_id"] = task_id
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["task_status"] = task_status
        return ContainerExportTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterContainer")
    def cluster_container(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether the container is in a cluster. The valid
        values are:
        + **true**: Only containers in a cluster are exported.
        + **false**: Only non-cluster containers are exported.

        This field does not involve a default value.
        """
        return pulumi.get(self, "cluster_container")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the name of the cluster to which the container belongs.
        The value contains `1` to `255` characters.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the cluster type. Options:
        + **cce**: CCE cluster.
        + **ali**: Alibaba Cloud cluster.
        + **tencent**: Tencent Cloud cluster.
        + **azure**: Microsoft Azure Cloud cluster.
        + **aws**: AWS Cloud cluster.
        + **self_built_hw**: Customer-built cluster on Huawei Cloud.
        + **self_built_idc**: IDC on-premises cluster.
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the name of the container to export.
        The value contains `1` to `255` characters.
        """
        return pulumi.get(self, "container_name")

    @_builtins.property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the CPU limit for the container.
        You can enter `0` to `64` characters. The unit is m, for example, **100m**.
        """
        return pulumi.get(self, "cpu_limit")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[Optional['outputs.ContainerExportTaskCreateTime']]:
        """
        Specifies the time range for filtering containers.
        The create_time structure is documented below.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the enterprise project that the server
        belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
        set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
        transfer the enterprise project ID to query the server in the enterprise project.
        Otherwise, an error is reported due to insufficient permission.

        > An enterprise project can be configured only after the enterprise project function is enabled.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="exportHeaders")
    def export_headers(self) -> pulumi.Output[Sequence[Sequence[_builtins.str]]]:
        """
        Specifies the header information list for exporting container
        data. The type of this field is an `Array<Array<string>>`. Please refer to Example Usage for the format of valid values.
        Valid key values and their corresponding table header names (table header names can be customized): **container_id**,
        **container_name**, **image_name**, **pod_name**, **cluster_name**, **cluster_type**, **status**, **risky**, **low_risk**,
        **medium_risk**, **high_risk**, **fatal_risk**, **create_time**, **restart_count**, **cpu_limit**, and **memory_limit**.
        """
        return pulumi.get(self, "export_headers")

    @_builtins.property
    @pulumi.getter(name="exportSize")
    def export_size(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the number of containers to export.
        The value ranges from `1` to `100,000`.

        <a name="create_time_object"></a>
        The `create_time` block supports:
        """
        return pulumi.get(self, "export_size")

    @_builtins.property
    @pulumi.getter(name="fileId")
    def file_id(self) -> pulumi.Output[_builtins.str]:
        """
        The export file ID.
        """
        return pulumi.get(self, "file_id")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Output[_builtins.str]:
        """
        The export file name.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the name of the container image.
        The value contains `1` to `255` characters.
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the memory limit for the container.
        You can enter `0` to `64` characters. The unit is Mi or Gi, for example, **300Mi**.
        """
        return pulumi.get(self, "memory_limit")

    @_builtins.property
    @pulumi.getter(name="podName")
    def pod_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the name of the pod to which the container belongs.
        The value can contain `1` to `512` characters.
        """
        return pulumi.get(self, "pod_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def risky(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether the container has security risks. Options:
        + **true**: Only containers with security risks are to be exported.
        + **false**: Only containers without security risks are to be exported.
        """
        return pulumi.get(self, "risky")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the container status. Valid values are **Running**, **Waiting**,
        **Terminated**, **Isolated**, and **Paused**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[_builtins.str]:
        """
        The export task ID.
        """
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[_builtins.str]:
        """
        The export task name.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> pulumi.Output[_builtins.str]:
        """
        The export task status. The valid values are **success**, **failure**, and **running**.
        """
        return pulumi.get(self, "task_status")

