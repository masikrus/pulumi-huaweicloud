# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['EventSystemUserWhiteListArgs', 'EventSystemUserWhiteList']

@pulumi.input_type
class EventSystemUserWhiteListArgs:
    def __init__(__self__, *,
                 host_id: pulumi.Input[_builtins.str],
                 system_user_name_lists: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remarks: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EventSystemUserWhiteList resource.
        :param pulumi.Input[_builtins.str] host_id: Specifies the host ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] system_user_name_lists: Specifies the list of system user-names to be added to the white list.
        :param pulumi.Input[_builtins.bool] delete_all: Specifies whether to delete all system user white lists. When set to `true`, all
               system user white lists under HSS will be deleted.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] remarks: Specifies the remarks of the white list.
        """
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "system_user_name_lists", system_user_name_lists)
        if delete_all is not None:
            pulumi.set(__self__, "delete_all", delete_all)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the host ID.
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter(name="systemUserNameLists")
    def system_user_name_lists(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the list of system user-names to be added to the white list.
        """
        return pulumi.get(self, "system_user_name_lists")

    @system_user_name_lists.setter
    def system_user_name_lists(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "system_user_name_lists", value)

    @_builtins.property
    @pulumi.getter(name="deleteAll")
    def delete_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete all system user white lists. When set to `true`, all
        system user white lists under HSS will be deleted.
        """
        return pulumi.get(self, "delete_all")

    @delete_all.setter
    def delete_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_all", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the remarks of the white list.
        """
        return pulumi.get(self, "remarks")

    @remarks.setter
    def remarks(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remarks", value)


@pulumi.input_type
class _EventSystemUserWhiteListState:
    def __init__(__self__, *,
                 delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remarks: Optional[pulumi.Input[_builtins.str]] = None,
                 system_user_name_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 update_time: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering EventSystemUserWhiteList resources.
        :param pulumi.Input[_builtins.bool] delete_all: Specifies whether to delete all system user white lists. When set to `true`, all
               system user white lists under HSS will be deleted.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
        :param pulumi.Input[_builtins.str] enterprise_project_name: The enterprise project name.
        :param pulumi.Input[_builtins.str] host_id: Specifies the host ID.
        :param pulumi.Input[_builtins.str] host_name: The host name.
        :param pulumi.Input[_builtins.str] private_ip: The private IP address of the host.
        :param pulumi.Input[_builtins.str] public_ip: The public IP address of the host.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] remarks: Specifies the remarks of the white list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] system_user_name_lists: Specifies the list of system user-names to be added to the white list.
        :param pulumi.Input[_builtins.int] update_time: The update time in milliseconds.
        """
        if delete_all is not None:
            pulumi.set(__self__, "delete_all", delete_all)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if enterprise_project_name is not None:
            pulumi.set(__self__, "enterprise_project_name", enterprise_project_name)
        if host_id is not None:
            pulumi.set(__self__, "host_id", host_id)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if system_user_name_lists is not None:
            pulumi.set(__self__, "system_user_name_lists", system_user_name_lists)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="deleteAll")
    def delete_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete all system user white lists. When set to `true`, all
        system user white lists under HSS will be deleted.
        """
        return pulumi.get(self, "delete_all")

    @delete_all.setter
    def delete_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_all", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The enterprise project name.
        """
        return pulumi.get(self, "enterprise_project_name")

    @enterprise_project_name.setter
    def enterprise_project_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_name", value)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host ID.
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The host name.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The private IP address of the host.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP address of the host.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the remarks of the white list.
        """
        return pulumi.get(self, "remarks")

    @remarks.setter
    def remarks(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remarks", value)

    @_builtins.property
    @pulumi.getter(name="systemUserNameLists")
    def system_user_name_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of system user-names to be added to the white list.
        """
        return pulumi.get(self, "system_user_name_lists")

    @system_user_name_lists.setter
    def system_user_name_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "system_user_name_lists", value)

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The update time in milliseconds.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "update_time", value)


@pulumi.type_token("huaweicloud:hss/eventSystemUserWhiteList:EventSystemUserWhiteList")
class EventSystemUserWhiteList(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remarks: Optional[pulumi.Input[_builtins.str]] = None,
                 system_user_name_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages an HSS event system user white list resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        host_id = config.require_object("hostId")
        test = huaweicloud.hss.EventSystemUserWhiteList("test",
            host_id=host_id,
            system_user_name_lists=[
                "test_user1",
                "test_user2",
            ])
        ```

        ## Import

        The HSS event system user white list can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:hss/eventSystemUserWhiteList:EventSystemUserWhiteList test <host_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `enterprise_project_id`, `delete_all`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_hss_event_system_user_white_list" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              enterprise_project_id, delete_all,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] delete_all: Specifies whether to delete all system user white lists. When set to `true`, all
               system user white lists under HSS will be deleted.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
        :param pulumi.Input[_builtins.str] host_id: Specifies the host ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] remarks: Specifies the remarks of the white list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] system_user_name_lists: Specifies the list of system user-names to be added to the white list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventSystemUserWhiteListArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an HSS event system user white list resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        host_id = config.require_object("hostId")
        test = huaweicloud.hss.EventSystemUserWhiteList("test",
            host_id=host_id,
            system_user_name_lists=[
                "test_user1",
                "test_user2",
            ])
        ```

        ## Import

        The HSS event system user white list can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:hss/eventSystemUserWhiteList:EventSystemUserWhiteList test <host_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `enterprise_project_id`, `delete_all`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_hss_event_system_user_white_list" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              enterprise_project_id, delete_all,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param EventSystemUserWhiteListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventSystemUserWhiteListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remarks: Optional[pulumi.Input[_builtins.str]] = None,
                 system_user_name_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventSystemUserWhiteListArgs.__new__(EventSystemUserWhiteListArgs)

            __props__.__dict__["delete_all"] = delete_all
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if host_id is None and not opts.urn:
                raise TypeError("Missing required property 'host_id'")
            __props__.__dict__["host_id"] = host_id
            __props__.__dict__["region"] = region
            __props__.__dict__["remarks"] = remarks
            if system_user_name_lists is None and not opts.urn:
                raise TypeError("Missing required property 'system_user_name_lists'")
            __props__.__dict__["system_user_name_lists"] = system_user_name_lists
            __props__.__dict__["enterprise_project_name"] = None
            __props__.__dict__["host_name"] = None
            __props__.__dict__["private_ip"] = None
            __props__.__dict__["public_ip"] = None
            __props__.__dict__["update_time"] = None
        super(EventSystemUserWhiteList, __self__).__init__(
            'huaweicloud:hss/eventSystemUserWhiteList:EventSystemUserWhiteList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_name: Optional[pulumi.Input[_builtins.str]] = None,
            host_id: Optional[pulumi.Input[_builtins.str]] = None,
            host_name: Optional[pulumi.Input[_builtins.str]] = None,
            private_ip: Optional[pulumi.Input[_builtins.str]] = None,
            public_ip: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            remarks: Optional[pulumi.Input[_builtins.str]] = None,
            system_user_name_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            update_time: Optional[pulumi.Input[_builtins.int]] = None) -> 'EventSystemUserWhiteList':
        """
        Get an existing EventSystemUserWhiteList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] delete_all: Specifies whether to delete all system user white lists. When set to `true`, all
               system user white lists under HSS will be deleted.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
        :param pulumi.Input[_builtins.str] enterprise_project_name: The enterprise project name.
        :param pulumi.Input[_builtins.str] host_id: Specifies the host ID.
        :param pulumi.Input[_builtins.str] host_name: The host name.
        :param pulumi.Input[_builtins.str] private_ip: The private IP address of the host.
        :param pulumi.Input[_builtins.str] public_ip: The public IP address of the host.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] remarks: Specifies the remarks of the white list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] system_user_name_lists: Specifies the list of system user-names to be added to the white list.
        :param pulumi.Input[_builtins.int] update_time: The update time in milliseconds.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventSystemUserWhiteListState.__new__(_EventSystemUserWhiteListState)

        __props__.__dict__["delete_all"] = delete_all
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["enterprise_project_name"] = enterprise_project_name
        __props__.__dict__["host_id"] = host_id
        __props__.__dict__["host_name"] = host_name
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["region"] = region
        __props__.__dict__["remarks"] = remarks
        __props__.__dict__["system_user_name_lists"] = system_user_name_lists
        __props__.__dict__["update_time"] = update_time
        return EventSystemUserWhiteList(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="deleteAll")
    def delete_all(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to delete all system user white lists. When set to `true`, all
        system user white lists under HSS will be deleted.
        """
        return pulumi.get(self, "delete_all")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> pulumi.Output[_builtins.str]:
        """
        The enterprise project name.
        """
        return pulumi.get(self, "enterprise_project_name")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Output[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[_builtins.str]:
        """
        The private IP address of the host.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[_builtins.str]:
        """
        The public IP address of the host.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the remarks of the white list.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter(name="systemUserNameLists")
    def system_user_name_lists(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of system user-names to be added to the white list.
        """
        return pulumi.get(self, "system_user_name_lists")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[_builtins.int]:
        """
        The update time in milliseconds.
        """
        return pulumi.get(self, "update_time")

