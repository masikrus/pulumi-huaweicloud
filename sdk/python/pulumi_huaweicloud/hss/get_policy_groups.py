# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicyGroupsResult',
    'AwaitableGetPolicyGroupsResult',
    'get_policy_groups',
    'get_policy_groups_output',
]

@pulumi.output_type
class GetPolicyGroupsResult:
    """
    A collection of values returned by getPolicyGroups.
    """
    def __init__(__self__, container_mode=None, data_lists=None, enterprise_project_id=None, group_id=None, group_name=None, id=None, region=None):
        if container_mode and not isinstance(container_mode, bool):
            raise TypeError("Expected argument 'container_mode' to be a bool")
        pulumi.set(__self__, "container_mode", container_mode)
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        pulumi.set(__self__, "group_name", group_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="containerMode")
    def container_mode(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "container_mode")

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetPolicyGroupsDataListResult']:
        """
        The policy group list.
        The data_list structure is documented below.
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        """
        The policy group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[_builtins.str]:
        """
        The policy group name.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetPolicyGroupsResult(GetPolicyGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyGroupsResult(
            container_mode=self.container_mode,
            data_lists=self.data_lists,
            enterprise_project_id=self.enterprise_project_id,
            group_id=self.group_id,
            group_name=self.group_name,
            id=self.id,
            region=self.region)


def get_policy_groups(container_mode: Optional[_builtins.bool] = None,
                      enterprise_project_id: Optional[_builtins.str] = None,
                      group_id: Optional[_builtins.str] = None,
                      group_name: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyGroupsResult:
    """
    Use this data source to get the list of HSS policy groups within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_policy_groups()
    ```


    :param _builtins.bool container_mode: Specifies whether to query the container edition policy.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the resource belongs.
           This parameter is valid only when the enterprise project function is enabled.
           For enterprise users, if omitted, default enterprise project will be used.
    :param _builtins.str group_id: Specifies the policy group ID.
    :param _builtins.str group_name: Specifies the policy group name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['containerMode'] = container_mode
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupId'] = group_id
    __args__['groupName'] = group_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getPolicyGroups:getPolicyGroups', __args__, opts=opts, typ=GetPolicyGroupsResult).value

    return AwaitableGetPolicyGroupsResult(
        container_mode=pulumi.get(__ret__, 'container_mode'),
        data_lists=pulumi.get(__ret__, 'data_lists'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        group_id=pulumi.get(__ret__, 'group_id'),
        group_name=pulumi.get(__ret__, 'group_name'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_policy_groups_output(container_mode: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                             enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyGroupsResult]:
    """
    Use this data source to get the list of HSS policy groups within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_policy_groups()
    ```


    :param _builtins.bool container_mode: Specifies whether to query the container edition policy.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the resource belongs.
           This parameter is valid only when the enterprise project function is enabled.
           For enterprise users, if omitted, default enterprise project will be used.
    :param _builtins.str group_id: Specifies the policy group ID.
    :param _builtins.str group_name: Specifies the policy group name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['containerMode'] = container_mode
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupId'] = group_id
    __args__['groupName'] = group_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getPolicyGroups:getPolicyGroups', __args__, opts=opts, typ=GetPolicyGroupsResult)
    return __ret__.apply(lambda __response__: GetPolicyGroupsResult(
        container_mode=pulumi.get(__response__, 'container_mode'),
        data_lists=pulumi.get(__response__, 'data_lists'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        group_id=pulumi.get(__response__, 'group_id'),
        group_name=pulumi.get(__response__, 'group_name'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
