# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ContainerKubernetesClusterProtectionEnableArgs', 'ContainerKubernetesClusterProtectionEnable']

@pulumi.input_type
class ContainerKubernetesClusterProtectionEnableArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 cluster_name: pulumi.Input[_builtins.str],
                 cce_protection_type: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 monitor_protection_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 prefer_packet_cycle: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ContainerKubernetesClusterProtectionEnable resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the cluster.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster to protect.
        :param pulumi.Input[_builtins.str] cce_protection_type: Specifies the CCE protection type. Options:
               + **cluster_level**: Cluster-level protection.
               + **node_level**: Node-level protection.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode. Options:
               + **on_demand**: On-demand.
               + **free_security_check**: Free security check.
        :param pulumi.Input[_builtins.str] cluster_type: Specifies the type of CCE cluster. Options:
               + **existing**: Existing cluster.
               + **adding**: New cluster.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project that the resource
               belongs to. The value **0** indicates the default enterprise project. To query resources in all enterprise projects,
               set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
               transfer the enterprise project ID to query the resource in the enterprise project.
               Otherwise, an error is reported due to insufficient permission.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] monitor_protection_statuses: Specifies the protection statuses to monitor.
               Valid values are **protecting**, **part_protect**, **creating**, **unprotect**, and **wait_protect**.
               The **protecting** status will be monitored by default if this field is not configured.
               
               > For example, if you configure the value of this field to **["protecting", "wait_protect"]**, the resource will rotate
               the cluster protection configuration information.
               <br/>1. If the protection status is **protecting** or **wait_protect**, the resource creation is successful.
               <br/>2. If the protection status is **error_protect**, the resource creation fails.
               <br/>3. Other protection states will continue to rotate until the timeout.
        :param pulumi.Input[_builtins.bool] prefer_packet_cycle: Specifies whether to prioritize the use of packet cycle quota.
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        if cce_protection_type is not None:
            pulumi.set(__self__, "cce_protection_type", cce_protection_type)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if monitor_protection_statuses is not None:
            pulumi.set(__self__, "monitor_protection_statuses", monitor_protection_statuses)
        if prefer_packet_cycle is not None:
            pulumi.set(__self__, "prefer_packet_cycle", prefer_packet_cycle)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the cluster to protect.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="cceProtectionType")
    def cce_protection_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CCE protection type. Options:
        + **cluster_level**: Cluster-level protection.
        + **node_level**: Node-level protection.
        """
        return pulumi.get(self, "cce_protection_type")

    @cce_protection_type.setter
    def cce_protection_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cce_protection_type", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging mode. Options:
        + **on_demand**: On-demand.
        + **free_security_check**: Free security check.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of CCE cluster. Options:
        + **existing**: Existing cluster.
        + **adding**: New cluster.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_type", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project that the resource
        belongs to. The value **0** indicates the default enterprise project. To query resources in all enterprise projects,
        set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
        transfer the enterprise project ID to query the resource in the enterprise project.
        Otherwise, an error is reported due to insufficient permission.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="monitorProtectionStatuses")
    def monitor_protection_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the protection statuses to monitor.
        Valid values are **protecting**, **part_protect**, **creating**, **unprotect**, and **wait_protect**.
        The **protecting** status will be monitored by default if this field is not configured.

        > For example, if you configure the value of this field to **["protecting", "wait_protect"]**, the resource will rotate
        the cluster protection configuration information.
        <br/>1. If the protection status is **protecting** or **wait_protect**, the resource creation is successful.
        <br/>2. If the protection status is **error_protect**, the resource creation fails.
        <br/>3. Other protection states will continue to rotate until the timeout.
        """
        return pulumi.get(self, "monitor_protection_statuses")

    @monitor_protection_statuses.setter
    def monitor_protection_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "monitor_protection_statuses", value)

    @_builtins.property
    @pulumi.getter(name="preferPacketCycle")
    def prefer_packet_cycle(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to prioritize the use of packet cycle quota.
        Defaults to **false**.
        """
        return pulumi.get(self, "prefer_packet_cycle")

    @prefer_packet_cycle.setter
    def prefer_packet_cycle(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "prefer_packet_cycle", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ContainerKubernetesClusterProtectionEnableState:
    def __init__(__self__, *,
                 cce_protection_type: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 monitor_protection_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 prefer_packet_cycle: Optional[pulumi.Input[_builtins.bool]] = None,
                 protect_status: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ContainerKubernetesClusterProtectionEnable resources.
        :param pulumi.Input[_builtins.str] cce_protection_type: Specifies the CCE protection type. Options:
               + **cluster_level**: Cluster-level protection.
               + **node_level**: Node-level protection.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode. Options:
               + **on_demand**: On-demand.
               + **free_security_check**: Free security check.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the cluster.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster to protect.
        :param pulumi.Input[_builtins.str] cluster_type: Specifies the type of CCE cluster. Options:
               + **existing**: Existing cluster.
               + **adding**: New cluster.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project that the resource
               belongs to. The value **0** indicates the default enterprise project. To query resources in all enterprise projects,
               set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
               transfer the enterprise project ID to query the resource in the enterprise project.
               Otherwise, an error is reported due to insufficient permission.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] monitor_protection_statuses: Specifies the protection statuses to monitor.
               Valid values are **protecting**, **part_protect**, **creating**, **unprotect**, and **wait_protect**.
               The **protecting** status will be monitored by default if this field is not configured.
               
               > For example, if you configure the value of this field to **["protecting", "wait_protect"]**, the resource will rotate
               the cluster protection configuration information.
               <br/>1. If the protection status is **protecting** or **wait_protect**, the resource creation is successful.
               <br/>2. If the protection status is **error_protect**, the resource creation fails.
               <br/>3. Other protection states will continue to rotate until the timeout.
        :param pulumi.Input[_builtins.bool] prefer_packet_cycle: Specifies whether to prioritize the use of packet cycle quota.
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] protect_status: The protection status of the cluster. Represents the status value matched by the
               parameter `monitor_protection_statuses`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if cce_protection_type is not None:
            pulumi.set(__self__, "cce_protection_type", cce_protection_type)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if monitor_protection_statuses is not None:
            pulumi.set(__self__, "monitor_protection_statuses", monitor_protection_statuses)
        if prefer_packet_cycle is not None:
            pulumi.set(__self__, "prefer_packet_cycle", prefer_packet_cycle)
        if protect_status is not None:
            pulumi.set(__self__, "protect_status", protect_status)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="cceProtectionType")
    def cce_protection_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CCE protection type. Options:
        + **cluster_level**: Cluster-level protection.
        + **node_level**: Node-level protection.
        """
        return pulumi.get(self, "cce_protection_type")

    @cce_protection_type.setter
    def cce_protection_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cce_protection_type", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging mode. Options:
        + **on_demand**: On-demand.
        + **free_security_check**: Free security check.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the cluster to protect.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of CCE cluster. Options:
        + **existing**: Existing cluster.
        + **adding**: New cluster.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_type", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project that the resource
        belongs to. The value **0** indicates the default enterprise project. To query resources in all enterprise projects,
        set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
        transfer the enterprise project ID to query the resource in the enterprise project.
        Otherwise, an error is reported due to insufficient permission.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="monitorProtectionStatuses")
    def monitor_protection_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the protection statuses to monitor.
        Valid values are **protecting**, **part_protect**, **creating**, **unprotect**, and **wait_protect**.
        The **protecting** status will be monitored by default if this field is not configured.

        > For example, if you configure the value of this field to **["protecting", "wait_protect"]**, the resource will rotate
        the cluster protection configuration information.
        <br/>1. If the protection status is **protecting** or **wait_protect**, the resource creation is successful.
        <br/>2. If the protection status is **error_protect**, the resource creation fails.
        <br/>3. Other protection states will continue to rotate until the timeout.
        """
        return pulumi.get(self, "monitor_protection_statuses")

    @monitor_protection_statuses.setter
    def monitor_protection_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "monitor_protection_statuses", value)

    @_builtins.property
    @pulumi.getter(name="preferPacketCycle")
    def prefer_packet_cycle(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to prioritize the use of packet cycle quota.
        Defaults to **false**.
        """
        return pulumi.get(self, "prefer_packet_cycle")

    @prefer_packet_cycle.setter
    def prefer_packet_cycle(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "prefer_packet_cycle", value)

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The protection status of the cluster. Represents the status value matched by the
        parameter `monitor_protection_statuses`.
        """
        return pulumi.get(self, "protect_status")

    @protect_status.setter
    def protect_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protect_status", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:hss/containerKubernetesClusterProtectionEnable:ContainerKubernetesClusterProtectionEnable")
class ContainerKubernetesClusterProtectionEnable(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cce_protection_type: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 monitor_protection_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 prefer_packet_cycle: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manage a resource to enable HSS container Kubernetes cluster (CCE) protection within HuaweiCloud.

        > This resource is only a one-time action resource for HSS container Kubernetes cluster protection. Deleting this resource
           will not disable the protection, but will only remove the resource information from the tf state file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_name = config.require_object("clusterName")
        cluster_type = config.require_object("clusterType")
        cluster_id = config.require_object("clusterId")
        charging_mode = config.require_object("chargingMode")
        cce_protection_type = config.require_object("cceProtectionType")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.hss.ContainerKubernetesClusterProtectionEnable("test",
            cluster_name=cluster_name,
            cluster_id=cluster_id,
            cluster_type=cluster_type,
            charging_mode=charging_mode,
            cce_protection_type=cce_protection_type,
            enterprise_project_id=enterprise_project_id,
            prefer_packet_cycle=False,
            monitor_protection_statuses=[
                "protecting",
                "part_protect",
                "unprotect",
                "wait_protect",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cce_protection_type: Specifies the CCE protection type. Options:
               + **cluster_level**: Cluster-level protection.
               + **node_level**: Node-level protection.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode. Options:
               + **on_demand**: On-demand.
               + **free_security_check**: Free security check.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the cluster.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster to protect.
        :param pulumi.Input[_builtins.str] cluster_type: Specifies the type of CCE cluster. Options:
               + **existing**: Existing cluster.
               + **adding**: New cluster.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project that the resource
               belongs to. The value **0** indicates the default enterprise project. To query resources in all enterprise projects,
               set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
               transfer the enterprise project ID to query the resource in the enterprise project.
               Otherwise, an error is reported due to insufficient permission.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] monitor_protection_statuses: Specifies the protection statuses to monitor.
               Valid values are **protecting**, **part_protect**, **creating**, **unprotect**, and **wait_protect**.
               The **protecting** status will be monitored by default if this field is not configured.
               
               > For example, if you configure the value of this field to **["protecting", "wait_protect"]**, the resource will rotate
               the cluster protection configuration information.
               <br/>1. If the protection status is **protecting** or **wait_protect**, the resource creation is successful.
               <br/>2. If the protection status is **error_protect**, the resource creation fails.
               <br/>3. Other protection states will continue to rotate until the timeout.
        :param pulumi.Input[_builtins.bool] prefer_packet_cycle: Specifies whether to prioritize the use of packet cycle quota.
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerKubernetesClusterProtectionEnableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage a resource to enable HSS container Kubernetes cluster (CCE) protection within HuaweiCloud.

        > This resource is only a one-time action resource for HSS container Kubernetes cluster protection. Deleting this resource
           will not disable the protection, but will only remove the resource information from the tf state file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_name = config.require_object("clusterName")
        cluster_type = config.require_object("clusterType")
        cluster_id = config.require_object("clusterId")
        charging_mode = config.require_object("chargingMode")
        cce_protection_type = config.require_object("cceProtectionType")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.hss.ContainerKubernetesClusterProtectionEnable("test",
            cluster_name=cluster_name,
            cluster_id=cluster_id,
            cluster_type=cluster_type,
            charging_mode=charging_mode,
            cce_protection_type=cce_protection_type,
            enterprise_project_id=enterprise_project_id,
            prefer_packet_cycle=False,
            monitor_protection_statuses=[
                "protecting",
                "part_protect",
                "unprotect",
                "wait_protect",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param ContainerKubernetesClusterProtectionEnableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerKubernetesClusterProtectionEnableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cce_protection_type: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 monitor_protection_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 prefer_packet_cycle: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerKubernetesClusterProtectionEnableArgs.__new__(ContainerKubernetesClusterProtectionEnableArgs)

            __props__.__dict__["cce_protection_type"] = cce_protection_type
            __props__.__dict__["charging_mode"] = charging_mode
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["cluster_type"] = cluster_type
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["monitor_protection_statuses"] = monitor_protection_statuses
            __props__.__dict__["prefer_packet_cycle"] = prefer_packet_cycle
            __props__.__dict__["region"] = region
            __props__.__dict__["protect_status"] = None
        super(ContainerKubernetesClusterProtectionEnable, __self__).__init__(
            'huaweicloud:hss/containerKubernetesClusterProtectionEnable:ContainerKubernetesClusterProtectionEnable',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cce_protection_type: Optional[pulumi.Input[_builtins.str]] = None,
            charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            monitor_protection_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            prefer_packet_cycle: Optional[pulumi.Input[_builtins.bool]] = None,
            protect_status: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'ContainerKubernetesClusterProtectionEnable':
        """
        Get an existing ContainerKubernetesClusterProtectionEnable resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cce_protection_type: Specifies the CCE protection type. Options:
               + **cluster_level**: Cluster-level protection.
               + **node_level**: Node-level protection.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode. Options:
               + **on_demand**: On-demand.
               + **free_security_check**: Free security check.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the ID of the cluster.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster to protect.
        :param pulumi.Input[_builtins.str] cluster_type: Specifies the type of CCE cluster. Options:
               + **existing**: Existing cluster.
               + **adding**: New cluster.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project that the resource
               belongs to. The value **0** indicates the default enterprise project. To query resources in all enterprise projects,
               set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
               transfer the enterprise project ID to query the resource in the enterprise project.
               Otherwise, an error is reported due to insufficient permission.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] monitor_protection_statuses: Specifies the protection statuses to monitor.
               Valid values are **protecting**, **part_protect**, **creating**, **unprotect**, and **wait_protect**.
               The **protecting** status will be monitored by default if this field is not configured.
               
               > For example, if you configure the value of this field to **["protecting", "wait_protect"]**, the resource will rotate
               the cluster protection configuration information.
               <br/>1. If the protection status is **protecting** or **wait_protect**, the resource creation is successful.
               <br/>2. If the protection status is **error_protect**, the resource creation fails.
               <br/>3. Other protection states will continue to rotate until the timeout.
        :param pulumi.Input[_builtins.bool] prefer_packet_cycle: Specifies whether to prioritize the use of packet cycle quota.
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] protect_status: The protection status of the cluster. Represents the status value matched by the
               parameter `monitor_protection_statuses`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerKubernetesClusterProtectionEnableState.__new__(_ContainerKubernetesClusterProtectionEnableState)

        __props__.__dict__["cce_protection_type"] = cce_protection_type
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["monitor_protection_statuses"] = monitor_protection_statuses
        __props__.__dict__["prefer_packet_cycle"] = prefer_packet_cycle
        __props__.__dict__["protect_status"] = protect_status
        __props__.__dict__["region"] = region
        return ContainerKubernetesClusterProtectionEnable(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cceProtectionType")
    def cce_protection_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the CCE protection type. Options:
        + **cluster_level**: Cluster-level protection.
        + **node_level**: Node-level protection.
        """
        return pulumi.get(self, "cce_protection_type")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the charging mode. Options:
        + **on_demand**: On-demand.
        + **free_security_check**: Free security check.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the cluster to protect.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of CCE cluster. Options:
        + **existing**: Existing cluster.
        + **adding**: New cluster.
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the enterprise project that the resource
        belongs to. The value **0** indicates the default enterprise project. To query resources in all enterprise projects,
        set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
        transfer the enterprise project ID to query the resource in the enterprise project.
        Otherwise, an error is reported due to insufficient permission.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="monitorProtectionStatuses")
    def monitor_protection_statuses(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the protection statuses to monitor.
        Valid values are **protecting**, **part_protect**, **creating**, **unprotect**, and **wait_protect**.
        The **protecting** status will be monitored by default if this field is not configured.

        > For example, if you configure the value of this field to **["protecting", "wait_protect"]**, the resource will rotate
        the cluster protection configuration information.
        <br/>1. If the protection status is **protecting** or **wait_protect**, the resource creation is successful.
        <br/>2. If the protection status is **error_protect**, the resource creation fails.
        <br/>3. Other protection states will continue to rotate until the timeout.
        """
        return pulumi.get(self, "monitor_protection_statuses")

    @_builtins.property
    @pulumi.getter(name="preferPacketCycle")
    def prefer_packet_cycle(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to prioritize the use of packet cycle quota.
        Defaults to **false**.
        """
        return pulumi.get(self, "prefer_packet_cycle")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> pulumi.Output[_builtins.str]:
        """
        The protection status of the cluster. Represents the status value matched by the
        parameter `monitor_protection_statuses`.
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

