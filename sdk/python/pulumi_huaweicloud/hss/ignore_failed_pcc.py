# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['IgnoreFailedPccArgs', 'IgnoreFailedPcc']

@pulumi.input_type
class IgnoreFailedPccArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IgnoreFailedPcc resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action type to perform.
               The valid values are:
               + **ignore**: Ignore the servers that fail the password complexity check.
               + **unignore**: Unignore the servers that fail the password complexity check.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project that the server
               belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
               set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
               transfer the enterprise project ID to query the server in the enterprise project. Otherwise, an error is reported due
               to insufficient permission.
               
               > An enterprise project can be configured only after the enterprise project function is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_ids: Specifies the list of host IDs to perform the action on.
               This parameter is ignored when `operate_all` is set to **true**.
        :param pulumi.Input[_builtins.bool] operate_all: Specifies whether the operation is a full operation. A maximum of
               `1,000` hosts can be processed at a time. Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "action", action)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if host_ids is not None:
            pulumi.set(__self__, "host_ids", host_ids)
        if operate_all is not None:
            pulumi.set(__self__, "operate_all", operate_all)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the action type to perform.
        The valid values are:
        + **ignore**: Ignore the servers that fail the password complexity check.
        + **unignore**: Unignore the servers that fail the password complexity check.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project that the server
        belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
        set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
        transfer the enterprise project ID to query the server in the enterprise project. Otherwise, an error is reported due
        to insufficient permission.

        > An enterprise project can be configured only after the enterprise project function is enabled.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of host IDs to perform the action on.
        This parameter is ignored when `operate_all` is set to **true**.
        """
        return pulumi.get(self, "host_ids")

    @host_ids.setter
    def host_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_ids", value)

    @_builtins.property
    @pulumi.getter(name="operateAll")
    def operate_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the operation is a full operation. A maximum of
        `1,000` hosts can be processed at a time. Defaults to **false**.
        """
        return pulumi.get(self, "operate_all")

    @operate_all.setter
    def operate_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operate_all", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _IgnoreFailedPccState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IgnoreFailedPcc resources.
        :param pulumi.Input[_builtins.str] action: Specifies the action type to perform.
               The valid values are:
               + **ignore**: Ignore the servers that fail the password complexity check.
               + **unignore**: Unignore the servers that fail the password complexity check.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project that the server
               belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
               set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
               transfer the enterprise project ID to query the server in the enterprise project. Otherwise, an error is reported due
               to insufficient permission.
               
               > An enterprise project can be configured only after the enterprise project function is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_ids: Specifies the list of host IDs to perform the action on.
               This parameter is ignored when `operate_all` is set to **true**.
        :param pulumi.Input[_builtins.bool] operate_all: Specifies whether the operation is a full operation. A maximum of
               `1,000` hosts can be processed at a time. Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if host_ids is not None:
            pulumi.set(__self__, "host_ids", host_ids)
        if operate_all is not None:
            pulumi.set(__self__, "operate_all", operate_all)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the action type to perform.
        The valid values are:
        + **ignore**: Ignore the servers that fail the password complexity check.
        + **unignore**: Unignore the servers that fail the password complexity check.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project that the server
        belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
        set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
        transfer the enterprise project ID to query the server in the enterprise project. Otherwise, an error is reported due
        to insufficient permission.

        > An enterprise project can be configured only after the enterprise project function is enabled.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of host IDs to perform the action on.
        This parameter is ignored when `operate_all` is set to **true**.
        """
        return pulumi.get(self, "host_ids")

    @host_ids.setter
    def host_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_ids", value)

    @_builtins.property
    @pulumi.getter(name="operateAll")
    def operate_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the operation is a full operation. A maximum of
        `1,000` hosts can be processed at a time. Defaults to **false**.
        """
        return pulumi.get(self, "operate_all")

    @operate_all.setter
    def operate_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operate_all", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:hss/ignoreFailedPcc:IgnoreFailedPcc")
class IgnoreFailedPcc(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to ignore or cancel the ignorance of servers that fail the password complexity check within HuaweiCloud.

        > This resource is a stateless operation resource. Deleting this resource will not affect the ignore status of the hosts,
        but will only remove the resource information from the tf state file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.hss.IgnoreFailedPcc("test",
            action="ignore",
            operate_all=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action type to perform.
               The valid values are:
               + **ignore**: Ignore the servers that fail the password complexity check.
               + **unignore**: Unignore the servers that fail the password complexity check.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project that the server
               belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
               set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
               transfer the enterprise project ID to query the server in the enterprise project. Otherwise, an error is reported due
               to insufficient permission.
               
               > An enterprise project can be configured only after the enterprise project function is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_ids: Specifies the list of host IDs to perform the action on.
               This parameter is ignored when `operate_all` is set to **true**.
        :param pulumi.Input[_builtins.bool] operate_all: Specifies whether the operation is a full operation. A maximum of
               `1,000` hosts can be processed at a time. Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IgnoreFailedPccArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to ignore or cancel the ignorance of servers that fail the password complexity check within HuaweiCloud.

        > This resource is a stateless operation resource. Deleting this resource will not affect the ignore status of the hosts,
        but will only remove the resource information from the tf state file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.hss.IgnoreFailedPcc("test",
            action="ignore",
            operate_all=True)
        ```

        :param str resource_name: The name of the resource.
        :param IgnoreFailedPccArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IgnoreFailedPccArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IgnoreFailedPccArgs.__new__(IgnoreFailedPccArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["host_ids"] = host_ids
            __props__.__dict__["operate_all"] = operate_all
            __props__.__dict__["region"] = region
        super(IgnoreFailedPcc, __self__).__init__(
            'huaweicloud:hss/ignoreFailedPcc:IgnoreFailedPcc',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'IgnoreFailedPcc':
        """
        Get an existing IgnoreFailedPcc resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action type to perform.
               The valid values are:
               + **ignore**: Ignore the servers that fail the password complexity check.
               + **unignore**: Unignore the servers that fail the password complexity check.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project that the server
               belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
               set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
               transfer the enterprise project ID to query the server in the enterprise project. Otherwise, an error is reported due
               to insufficient permission.
               
               > An enterprise project can be configured only after the enterprise project function is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_ids: Specifies the list of host IDs to perform the action on.
               This parameter is ignored when `operate_all` is set to **true**.
        :param pulumi.Input[_builtins.bool] operate_all: Specifies whether the operation is a full operation. A maximum of
               `1,000` hosts can be processed at a time. Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IgnoreFailedPccState.__new__(_IgnoreFailedPccState)

        __props__.__dict__["action"] = action
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["host_ids"] = host_ids
        __props__.__dict__["operate_all"] = operate_all
        __props__.__dict__["region"] = region
        return IgnoreFailedPcc(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the action type to perform.
        The valid values are:
        + **ignore**: Ignore the servers that fail the password complexity check.
        + **unignore**: Unignore the servers that fail the password complexity check.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the enterprise project that the server
        belongs to. The value **0** indicates the default enterprise project. To query servers in all enterprise projects,
        set this parameter to **all_granted_eps**. If you have only the permission on an enterprise project, you need to
        transfer the enterprise project ID to query the server in the enterprise project. Otherwise, an error is reported due
        to insufficient permission.

        > An enterprise project can be configured only after the enterprise project function is enabled.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the list of host IDs to perform the action on.
        This parameter is ignored when `operate_all` is set to **true**.
        """
        return pulumi.get(self, "host_ids")

    @_builtins.property
    @pulumi.getter(name="operateAll")
    def operate_all(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the operation is a full operation. A maximum of
        `1,000` hosts can be processed at a time. Defaults to **false**.
        """
        return pulumi.get(self, "operate_all")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

