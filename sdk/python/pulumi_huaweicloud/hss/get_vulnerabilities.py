# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetVulnerabilitiesResult',
    'AwaitableGetVulnerabilitiesResult',
    'get_vulnerabilities',
    'get_vulnerabilities_output',
]

@pulumi.output_type
class GetVulnerabilitiesResult:
    """
    A collection of values returned by getVulnerabilities.
    """
    def __init__(__self__, asset_value=None, cve_id=None, data_lists=None, enterprise_project_id=None, group_name=None, handle_status=None, id=None, label_list=None, region=None, repair_priority=None, status=None, type=None, vul_id=None, vul_name=None):
        if asset_value and not isinstance(asset_value, str):
            raise TypeError("Expected argument 'asset_value' to be a str")
        pulumi.set(__self__, "asset_value", asset_value)
        if cve_id and not isinstance(cve_id, str):
            raise TypeError("Expected argument 'cve_id' to be a str")
        pulumi.set(__self__, "cve_id", cve_id)
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        pulumi.set(__self__, "group_name", group_name)
        if handle_status and not isinstance(handle_status, str):
            raise TypeError("Expected argument 'handle_status' to be a str")
        pulumi.set(__self__, "handle_status", handle_status)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if label_list and not isinstance(label_list, str):
            raise TypeError("Expected argument 'label_list' to be a str")
        pulumi.set(__self__, "label_list", label_list)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if repair_priority and not isinstance(repair_priority, str):
            raise TypeError("Expected argument 'repair_priority' to be a str")
        pulumi.set(__self__, "repair_priority", repair_priority)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vul_id and not isinstance(vul_id, str):
            raise TypeError("Expected argument 'vul_id' to be a str")
        pulumi.set(__self__, "vul_id", vul_id)
        if vul_name and not isinstance(vul_name, str):
            raise TypeError("Expected argument 'vul_name' to be a str")
        pulumi.set(__self__, "vul_name", vul_name)

    @_builtins.property
    @pulumi.getter(name="assetValue")
    def asset_value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "asset_value")

    @_builtins.property
    @pulumi.getter(name="cveId")
    def cve_id(self) -> Optional[_builtins.str]:
        """
        The CVE ID.
        """
        return pulumi.get(self, "cve_id")

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetVulnerabilitiesDataListResult']:
        """
        Software vulnerability list
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="handleStatus")
    def handle_status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "handle_status")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="labelList")
    def label_list(self) -> Optional[_builtins.str]:
        """
        The vulnerability tags list.
        """
        return pulumi.get(self, "label_list")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="repairPriority")
    def repair_priority(self) -> Optional[_builtins.str]:
        """
        The fixing priority.
        """
        return pulumi.get(self, "repair_priority")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The vulnerability type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vulId")
    def vul_id(self) -> Optional[_builtins.str]:
        """
        The vulnerability ID.
        """
        return pulumi.get(self, "vul_id")

    @_builtins.property
    @pulumi.getter(name="vulName")
    def vul_name(self) -> Optional[_builtins.str]:
        """
        The vulnerability name.
        """
        return pulumi.get(self, "vul_name")


class AwaitableGetVulnerabilitiesResult(GetVulnerabilitiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVulnerabilitiesResult(
            asset_value=self.asset_value,
            cve_id=self.cve_id,
            data_lists=self.data_lists,
            enterprise_project_id=self.enterprise_project_id,
            group_name=self.group_name,
            handle_status=self.handle_status,
            id=self.id,
            label_list=self.label_list,
            region=self.region,
            repair_priority=self.repair_priority,
            status=self.status,
            type=self.type,
            vul_id=self.vul_id,
            vul_name=self.vul_name)


def get_vulnerabilities(asset_value: Optional[_builtins.str] = None,
                        cve_id: Optional[_builtins.str] = None,
                        enterprise_project_id: Optional[_builtins.str] = None,
                        group_name: Optional[_builtins.str] = None,
                        handle_status: Optional[_builtins.str] = None,
                        label_list: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        repair_priority: Optional[_builtins.str] = None,
                        status: Optional[_builtins.str] = None,
                        type: Optional[_builtins.str] = None,
                        vul_id: Optional[_builtins.str] = None,
                        vul_name: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVulnerabilitiesResult:
    """
    Use this data source to get the list of vulnerabilities.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_vulnerabilities()
    ```


    :param _builtins.str asset_value: Specifies the asset importance.
           The valid values are as follows:
           + **important**
           + **common**
           + **test**
    :param _builtins.str cve_id: Specifies the CVE ID.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the hosts belong.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str group_name: Specifies the server group name.
    :param _builtins.str handle_status: Specifies the handling status.
           The valid values are as follows:
           + **unhandled**
           + **handled**
    :param _builtins.str label_list: Specifies the vulnerability tags.
           Multiple labels can be transferred for filtering, separated by commas (,). For example, **test1,test2**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str repair_priority: Specifies the fixing priority.
           The valid values are as follows:
           + **Critical**
           + **High**
           + **Medium**
           + **Low**
    :param _builtins.str status: Specifies the vulnerability status.
           The valid values are as follows:
           + **vul_status_unfix**: Indicates not fixed.
           + **vul_status_ignored**: Indicates ignored.
           + **vul_status_verified**: Indicates verification in progress.
           + **vul_status_fixing**: Indicates fixing is in progress.
           + **vul_status_fixed**: Indicates fix succeeded.
           + **vul_status_reboot**: Indicates the issue is fixed and waiting for restart.
           + **vul_status_failed**: Indicates the issue failed to be fixed.
           + **vul_status_fix_after_reboot**: Indicates restart the host and try again.
    :param _builtins.str type: Specifies the vulnerability type.
           The valid values are as follows:
           + **linux_vul**: Linux vulnerability.
           + **windows_vul**: Windows vulnerability.
           + **web_cms**: Web-CMS vulnerability.
           + **app_vul**: Application vulnerability.
           + **urgent_vul**: Emergency vulnerability.
    :param _builtins.str vul_id: Specifies the vulnerability ID.
    :param _builtins.str vul_name: Specifies the vulnerability name.
    """
    __args__ = dict()
    __args__['assetValue'] = asset_value
    __args__['cveId'] = cve_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupName'] = group_name
    __args__['handleStatus'] = handle_status
    __args__['labelList'] = label_list
    __args__['region'] = region
    __args__['repairPriority'] = repair_priority
    __args__['status'] = status
    __args__['type'] = type
    __args__['vulId'] = vul_id
    __args__['vulName'] = vul_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getVulnerabilities:getVulnerabilities', __args__, opts=opts, typ=GetVulnerabilitiesResult).value

    return AwaitableGetVulnerabilitiesResult(
        asset_value=pulumi.get(__ret__, 'asset_value'),
        cve_id=pulumi.get(__ret__, 'cve_id'),
        data_lists=pulumi.get(__ret__, 'data_lists'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        group_name=pulumi.get(__ret__, 'group_name'),
        handle_status=pulumi.get(__ret__, 'handle_status'),
        id=pulumi.get(__ret__, 'id'),
        label_list=pulumi.get(__ret__, 'label_list'),
        region=pulumi.get(__ret__, 'region'),
        repair_priority=pulumi.get(__ret__, 'repair_priority'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        vul_id=pulumi.get(__ret__, 'vul_id'),
        vul_name=pulumi.get(__ret__, 'vul_name'))
def get_vulnerabilities_output(asset_value: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               cve_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               handle_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               label_list: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               repair_priority: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               vul_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               vul_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVulnerabilitiesResult]:
    """
    Use this data source to get the list of vulnerabilities.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_vulnerabilities()
    ```


    :param _builtins.str asset_value: Specifies the asset importance.
           The valid values are as follows:
           + **important**
           + **common**
           + **test**
    :param _builtins.str cve_id: Specifies the CVE ID.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the hosts belong.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str group_name: Specifies the server group name.
    :param _builtins.str handle_status: Specifies the handling status.
           The valid values are as follows:
           + **unhandled**
           + **handled**
    :param _builtins.str label_list: Specifies the vulnerability tags.
           Multiple labels can be transferred for filtering, separated by commas (,). For example, **test1,test2**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str repair_priority: Specifies the fixing priority.
           The valid values are as follows:
           + **Critical**
           + **High**
           + **Medium**
           + **Low**
    :param _builtins.str status: Specifies the vulnerability status.
           The valid values are as follows:
           + **vul_status_unfix**: Indicates not fixed.
           + **vul_status_ignored**: Indicates ignored.
           + **vul_status_verified**: Indicates verification in progress.
           + **vul_status_fixing**: Indicates fixing is in progress.
           + **vul_status_fixed**: Indicates fix succeeded.
           + **vul_status_reboot**: Indicates the issue is fixed and waiting for restart.
           + **vul_status_failed**: Indicates the issue failed to be fixed.
           + **vul_status_fix_after_reboot**: Indicates restart the host and try again.
    :param _builtins.str type: Specifies the vulnerability type.
           The valid values are as follows:
           + **linux_vul**: Linux vulnerability.
           + **windows_vul**: Windows vulnerability.
           + **web_cms**: Web-CMS vulnerability.
           + **app_vul**: Application vulnerability.
           + **urgent_vul**: Emergency vulnerability.
    :param _builtins.str vul_id: Specifies the vulnerability ID.
    :param _builtins.str vul_name: Specifies the vulnerability name.
    """
    __args__ = dict()
    __args__['assetValue'] = asset_value
    __args__['cveId'] = cve_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupName'] = group_name
    __args__['handleStatus'] = handle_status
    __args__['labelList'] = label_list
    __args__['region'] = region
    __args__['repairPriority'] = repair_priority
    __args__['status'] = status
    __args__['type'] = type
    __args__['vulId'] = vul_id
    __args__['vulName'] = vul_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getVulnerabilities:getVulnerabilities', __args__, opts=opts, typ=GetVulnerabilitiesResult)
    return __ret__.apply(lambda __response__: GetVulnerabilitiesResult(
        asset_value=pulumi.get(__response__, 'asset_value'),
        cve_id=pulumi.get(__response__, 'cve_id'),
        data_lists=pulumi.get(__response__, 'data_lists'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        group_name=pulumi.get(__response__, 'group_name'),
        handle_status=pulumi.get(__response__, 'handle_status'),
        id=pulumi.get(__response__, 'id'),
        label_list=pulumi.get(__response__, 'label_list'),
        region=pulumi.get(__response__, 'region'),
        repair_priority=pulumi.get(__response__, 'repair_priority'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        vul_id=pulumi.get(__response__, 'vul_id'),
        vul_name=pulumi.get(__response__, 'vul_name')))
