# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAutoLaunchsResult',
    'AwaitableGetAutoLaunchsResult',
    'get_auto_launchs',
    'get_auto_launchs_output',
]

@pulumi.output_type
class GetAutoLaunchsResult:
    """
    A collection of values returned by getAutoLaunchs.
    """
    def __init__(__self__, data_lists=None, enterprise_project_id=None, host_id=None, host_ip=None, host_name=None, id=None, name=None, part_match=None, region=None, type=None):
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if host_id and not isinstance(host_id, str):
            raise TypeError("Expected argument 'host_id' to be a str")
        pulumi.set(__self__, "host_id", host_id)
        if host_ip and not isinstance(host_ip, str):
            raise TypeError("Expected argument 'host_ip' to be a str")
        pulumi.set(__self__, "host_ip", host_ip)
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        pulumi.set(__self__, "host_name", host_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if part_match and not isinstance(part_match, bool):
            raise TypeError("Expected argument 'part_match' to be a bool")
        pulumi.set(__self__, "part_match", part_match)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetAutoLaunchsDataListResult']:
        """
        All auto launch items that match the filter parameters.
        The data_list structure is documented below.
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[_builtins.str]:
        """
        The host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[_builtins.str]:
        """
        The host IP address.
        """
        return pulumi.get(self, "host_ip")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The auto launch item name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="partMatch")
    def part_match(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "part_match")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The auto launch item type.
        """
        return pulumi.get(self, "type")


class AwaitableGetAutoLaunchsResult(GetAutoLaunchsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutoLaunchsResult(
            data_lists=self.data_lists,
            enterprise_project_id=self.enterprise_project_id,
            host_id=self.host_id,
            host_ip=self.host_ip,
            host_name=self.host_name,
            id=self.id,
            name=self.name,
            part_match=self.part_match,
            region=self.region,
            type=self.type)


def get_auto_launchs(enterprise_project_id: Optional[_builtins.str] = None,
                     host_id: Optional[_builtins.str] = None,
                     host_ip: Optional[_builtins.str] = None,
                     host_name: Optional[_builtins.str] = None,
                     name: Optional[_builtins.str] = None,
                     part_match: Optional[_builtins.bool] = None,
                     region: Optional[_builtins.str] = None,
                     type: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutoLaunchsResult:
    """
    Use this data source to get the list of auto launch items.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_auto_launchs()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the hosts belong.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str host_id: Specifies the host ID.
    :param _builtins.str host_ip: Specifies the host IP address.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.str name: Specifies the auto launch item name.
    :param _builtins.bool part_match: Specifies whether to use fuzzy matching.
           Defaults to **false**, indicates exact matching.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the auto launch item type.
           The valid values are as follows:
           + **0**: Auto launch service.
           + **1**: Scheduled task.
           + **2**: Preloaded dynamic library.
           + **3**: Run registry key.
           + **4**: Startup folder.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostId'] = host_id
    __args__['hostIp'] = host_ip
    __args__['hostName'] = host_name
    __args__['name'] = name
    __args__['partMatch'] = part_match
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getAutoLaunchs:getAutoLaunchs', __args__, opts=opts, typ=GetAutoLaunchsResult).value

    return AwaitableGetAutoLaunchsResult(
        data_lists=pulumi.get(__ret__, 'data_lists'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        host_id=pulumi.get(__ret__, 'host_id'),
        host_ip=pulumi.get(__ret__, 'host_ip'),
        host_name=pulumi.get(__ret__, 'host_name'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        part_match=pulumi.get(__ret__, 'part_match'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_auto_launchs_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            host_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            host_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            host_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            part_match: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAutoLaunchsResult]:
    """
    Use this data source to get the list of auto launch items.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_auto_launchs()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the hosts belong.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str host_id: Specifies the host ID.
    :param _builtins.str host_ip: Specifies the host IP address.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.str name: Specifies the auto launch item name.
    :param _builtins.bool part_match: Specifies whether to use fuzzy matching.
           Defaults to **false**, indicates exact matching.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the auto launch item type.
           The valid values are as follows:
           + **0**: Auto launch service.
           + **1**: Scheduled task.
           + **2**: Preloaded dynamic library.
           + **3**: Run registry key.
           + **4**: Startup folder.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostId'] = host_id
    __args__['hostIp'] = host_ip
    __args__['hostName'] = host_name
    __args__['name'] = name
    __args__['partMatch'] = part_match
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getAutoLaunchs:getAutoLaunchs', __args__, opts=opts, typ=GetAutoLaunchsResult)
    return __ret__.apply(lambda __response__: GetAutoLaunchsResult(
        data_lists=pulumi.get(__response__, 'data_lists'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        host_id=pulumi.get(__response__, 'host_id'),
        host_ip=pulumi.get(__response__, 'host_ip'),
        host_name=pulumi.get(__response__, 'host_name'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        part_match=pulumi.get(__response__, 'part_match'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))
