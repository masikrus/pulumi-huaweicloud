# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'CceProtectionRuntimeInfo',
    'CceProtectionScheduleInfo',
    'ContainerExportTaskCreateTime',
    'ContainerKubernetesClusterDaemonsetDsInfo',
    'ContainerKubernetesClusterDaemonsetRuntimeInfo',
    'ContainerKubernetesClusterDaemonsetScheduleInfo',
    'ContainerKubernetesSyncMccsDataList',
    'EventAlarmWhiteListDeleteDataList',
    'EventDeleteIsolatedFileDataList',
    'EventUnblockIpDataList',
    'HoneypotPortPolicyPortList',
    'HoneypotPortPolicyPortsList',
    'ImageBatchScanImageInfoList',
    'GetAgentInstallScriptInstallScriptListResult',
    'GetAntivirusAvailableHostsDataListResult',
    'GetAntivirusCustomScanPoliciesDataListResult',
    'GetAntivirusCustomScanPoliciesDataListHostInfoListResult',
    'GetAntivirusVirusScanTasksDataListResult',
    'GetAntivirusVirusScanTasksDataListHostInfoListResult',
    'GetAppStatisticsDataListResult',
    'GetAssetAppsDataListResult',
    'GetAssetPortStatisticsDataListResult',
    'GetAssetPortsDataListResult',
    'GetAssetUserStatisticsDataListResult',
    'GetAssetUsersDataListResult',
    'GetAutoLaunchStatisticsDataListResult',
    'GetAutoLaunchsDataListResult',
    'GetBackupPolicyOperationDefinitionResult',
    'GetBackupPolicyTriggerResult',
    'GetBackupPolicyTriggerPropertyResult',
    'GetContainerKubernetesClustersClusterInfoListResult',
    'GetContainerKubernetesClustersConfigsClusterInfoListResult',
    'GetContainerKubernetesClustersConfigsDataListResult',
    'GetContainerKubernetesDataListResult',
    'GetContainerKubernetesEndpointDetailEndpointPodListResult',
    'GetContainerKubernetesEndpointDetailEndpointPortListResult',
    'GetContainerKubernetesEndpointsEndpointInfoListResult',
    'GetContainerNodesDataListResult',
    'GetEventAlarmWhiteListsDataListResult',
    'GetEventHandleHistoryDataListResult',
    'GetEventLoginWhiteListsDataListResult',
    'GetEventSystemUserWhiteListsDataListResult',
    'GetEventUnblockIpsDataListResult',
    'GetHoneypotPortPoliciesDataListResult',
    'GetHostGroupsGroupResult',
    'GetHostVulnerabilitiesDataListResult',
    'GetHostVulnerabilitiesDataListAppListResult',
    'GetHostVulnerabilitiesDataListCveListResult',
    'GetHostVulnerabilitiesDataListDisabledOperateTypeResult',
    'GetHostsHostResult',
    'GetPolicyGroupsDataListResult',
    'GetProductInfosDataListResult',
    'GetProductInfosDataListVersionInfoResult',
    'GetProductInfosDataListVersionInfoPeriodResult',
    'GetQuotasQuotaResult',
    'GetRansomwareProtectionPoliciesPolicyResult',
    'GetRansomwareProtectionPoliciesPolicyProcessWhitelistResult',
    'GetRaspPoliciesDataListResult',
    'GetRaspPolicyDetailRuleListResult',
    'GetRaspRulesDataListResult',
    'GetRaspServersDataListResult',
    'GetResourceQuotasDataListResult',
    'GetResourceQuotasDataListAvailableResourcesListResult',
    'GetSettingLoginCommonIpsDataListResult',
    'GetSettingLoginCommonLocationsDataListResult',
    'GetTagsTagResult',
    'GetVulnerabilitiesDataListResult',
    'GetVulnerabilitiesDataListCveListResult',
    'GetVulnerabilitiesDataListHostsNumResult',
    'GetVulnerabilitiesDataListRepairPriorityListResult',
    'GetVulnerabilityHandleHistoryDataListResult',
    'GetVulnerabilityHandleHistoryDataListCveListResult',
    'GetVulnerabilityHostsDataListResult',
    'GetVulnerabilityHostsDataListDisabledOperateTypeResult',
    'GetWebtamperHostsHostResult',
]

@pulumi.output_type
class CceProtectionRuntimeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runtimeName":
            suggest = "runtime_name"
        elif key == "runtimePath":
            suggest = "runtime_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceProtectionRuntimeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceProtectionRuntimeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceProtectionRuntimeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 runtime_name: Optional[_builtins.str] = None,
                 runtime_path: Optional[_builtins.str] = None):
        if runtime_name is not None:
            pulumi.set(__self__, "runtime_name", runtime_name)
        if runtime_path is not None:
            pulumi.set(__self__, "runtime_path", runtime_path)

    @_builtins.property
    @pulumi.getter(name="runtimeName")
    def runtime_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "runtime_name")

    @_builtins.property
    @pulumi.getter(name="runtimePath")
    def runtime_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "runtime_path")


@pulumi.output_type
class CceProtectionScheduleInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeSelectors":
            suggest = "node_selectors"
        elif key == "podTolerances":
            suggest = "pod_tolerances"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceProtectionScheduleInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceProtectionScheduleInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceProtectionScheduleInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_selectors: Optional[Sequence[_builtins.str]] = None,
                 pod_tolerances: Optional[Sequence[_builtins.str]] = None):
        if node_selectors is not None:
            pulumi.set(__self__, "node_selectors", node_selectors)
        if pod_tolerances is not None:
            pulumi.set(__self__, "pod_tolerances", pod_tolerances)

    @_builtins.property
    @pulumi.getter(name="nodeSelectors")
    def node_selectors(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "node_selectors")

    @_builtins.property
    @pulumi.getter(name="podTolerances")
    def pod_tolerances(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "pod_tolerances")


@pulumi.output_type
class ContainerExportTaskCreateTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerExportTaskCreateTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerExportTaskCreateTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerExportTaskCreateTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: Optional[_builtins.int] = None,
                 start_time: Optional[_builtins.int] = None):
        """
        :param _builtins.int end_time: Specifies the end time for filtering containers.
        :param _builtins.int start_time: Specifies the start time for filtering containers.
        """
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.int]:
        """
        Specifies the end time for filtering containers.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.int]:
        """
        Specifies the start time for filtering containers.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class ContainerKubernetesClusterDaemonsetDsInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentNum":
            suggest = "current_num"
        elif key == "desiredNum":
            suggest = "desired_num"
        elif key == "readyNum":
            suggest = "ready_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerKubernetesClusterDaemonsetDsInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerKubernetesClusterDaemonsetDsInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerKubernetesClusterDaemonsetDsInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_num: Optional[_builtins.int] = None,
                 desired_num: Optional[_builtins.int] = None,
                 ready_num: Optional[_builtins.int] = None):
        """
        :param _builtins.int current_num: The current quantity.
        :param _builtins.int desired_num: The target number.
        :param _builtins.int ready_num: The ready quantity.
        """
        if current_num is not None:
            pulumi.set(__self__, "current_num", current_num)
        if desired_num is not None:
            pulumi.set(__self__, "desired_num", desired_num)
        if ready_num is not None:
            pulumi.set(__self__, "ready_num", ready_num)

    @_builtins.property
    @pulumi.getter(name="currentNum")
    def current_num(self) -> Optional[_builtins.int]:
        """
        The current quantity.
        """
        return pulumi.get(self, "current_num")

    @_builtins.property
    @pulumi.getter(name="desiredNum")
    def desired_num(self) -> Optional[_builtins.int]:
        """
        The target number.
        """
        return pulumi.get(self, "desired_num")

    @_builtins.property
    @pulumi.getter(name="readyNum")
    def ready_num(self) -> Optional[_builtins.int]:
        """
        The ready quantity.
        """
        return pulumi.get(self, "ready_num")


@pulumi.output_type
class ContainerKubernetesClusterDaemonsetRuntimeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runtimeName":
            suggest = "runtime_name"
        elif key == "runtimePath":
            suggest = "runtime_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerKubernetesClusterDaemonsetRuntimeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerKubernetesClusterDaemonsetRuntimeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerKubernetesClusterDaemonsetRuntimeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 runtime_name: _builtins.str,
                 runtime_path: Optional[_builtins.str] = None):
        """
        :param _builtins.str runtime_name: Specifies the runtime name.  
               The valid values are as follows:
               + **crio_endpoint**: CRIO.
               + **containerd_endpoint**: Containerd.
               + **docker_endpoint**: Docker.
               + **isulad_endpoint**: Isulad.
               + **podman_endpoint**: Podman.
        :param _builtins.str runtime_path: Specifies the runtime path.  
               
               <a name="schedule_info_struct"></a>
               The `schedule_info` block supports:
        """
        pulumi.set(__self__, "runtime_name", runtime_name)
        if runtime_path is not None:
            pulumi.set(__self__, "runtime_path", runtime_path)

    @_builtins.property
    @pulumi.getter(name="runtimeName")
    def runtime_name(self) -> _builtins.str:
        """
        Specifies the runtime name.  
        The valid values are as follows:
        + **crio_endpoint**: CRIO.
        + **containerd_endpoint**: Containerd.
        + **docker_endpoint**: Docker.
        + **isulad_endpoint**: Isulad.
        + **podman_endpoint**: Podman.
        """
        return pulumi.get(self, "runtime_name")

    @_builtins.property
    @pulumi.getter(name="runtimePath")
    def runtime_path(self) -> Optional[_builtins.str]:
        """
        Specifies the runtime path.  

        <a name="schedule_info_struct"></a>
        The `schedule_info` block supports:
        """
        return pulumi.get(self, "runtime_path")


@pulumi.output_type
class ContainerKubernetesClusterDaemonsetScheduleInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeSelectors":
            suggest = "node_selectors"
        elif key == "podTolerances":
            suggest = "pod_tolerances"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerKubernetesClusterDaemonsetScheduleInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerKubernetesClusterDaemonsetScheduleInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerKubernetesClusterDaemonsetScheduleInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_selectors: Optional[Sequence[_builtins.str]] = None,
                 pod_tolerances: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] node_selectors: Specifies the node selector.
        :param Sequence[_builtins.str] pod_tolerances: Specifies the pod tolerance.
        """
        if node_selectors is not None:
            pulumi.set(__self__, "node_selectors", node_selectors)
        if pod_tolerances is not None:
            pulumi.set(__self__, "pod_tolerances", pod_tolerances)

    @_builtins.property
    @pulumi.getter(name="nodeSelectors")
    def node_selectors(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the node selector.
        """
        return pulumi.get(self, "node_selectors")

    @_builtins.property
    @pulumi.getter(name="podTolerances")
    def pod_tolerances(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the pod tolerance.
        """
        return pulumi.get(self, "pod_tolerances")


@pulumi.output_type
class ContainerKubernetesSyncMccsDataList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerKubernetesSyncMccsDataList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerKubernetesSyncMccsDataList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerKubernetesSyncMccsDataList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: _builtins.str):
        """
        :param _builtins.str cluster_id: Specifies the ID of the cluster to synchronize.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        Specifies the ID of the cluster to synchronize.
        """
        return pulumi.get(self, "cluster_id")


@pulumi.output_type
class EventAlarmWhiteListDeleteDataList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventType":
            suggest = "event_type"
        elif key == "deleteWhiteRule":
            suggest = "delete_white_rule"
        elif key == "fieldValue":
            suggest = "field_value"
        elif key == "fileHash":
            suggest = "file_hash"
        elif key == "filePath":
            suggest = "file_path"
        elif key == "judgeType":
            suggest = "judge_type"
        elif key == "whiteField":
            suggest = "white_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventAlarmWhiteListDeleteDataList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventAlarmWhiteListDeleteDataList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventAlarmWhiteListDeleteDataList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: _builtins.str,
                 event_type: _builtins.int,
                 hash: _builtins.str,
                 delete_white_rule: Optional[_builtins.bool] = None,
                 field_value: Optional[_builtins.str] = None,
                 file_hash: Optional[_builtins.str] = None,
                 file_path: Optional[_builtins.str] = None,
                 judge_type: Optional[_builtins.str] = None,
                 white_field: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the description.
        :param _builtins.int event_type: Specifies the event type.  
               The valid values are as follows:
               + **1001**: General malware.
               + **1002**: Virus.
               + **1003**: Worm.
               + **1004**: Trojan.
               + **1005**: Botnet.
               + **1006**: Backdoor.
               + **1010**: Rootkit.
               + **1011**: Ransomware.
               + **1012**: Hacker tool.
               + **1015**: Webshell.
               + **1016**: Mining.
               + **1017**: Reverse Shell.
               + **2001**: General vulnerability exploitation.
               + **2012**: Remote code execution.
               + **2047**: Redis vulnerability exploitation.
               + **2048**: Hadoop vulnerability exploitation.
               + **2049**: MySQL vulnerability exploitation.
               + **3002**: File privilege escalation.
               + **3003**: Process privilege escalation.
               + **3004**: Key file change.
               + **3005**: File/directory change.
               + **3007**: Process abnormal behavior.
               + **3015**: High-risk command execution.
               + **3018**: Abnormal Shell.
               + **3027**: Crontab suspicious task.
               + **3029**: System security protection disabled.
               + **3030**: Backup deletion.
               + **3031**: Abnormal registry operation.
               + **3036**: Container image blocking.
               + **4002**: Brute force cracking.
               + **4004**: Abnormal login.
               + **4006**: Illegal system account.
               + **4014**: User account addition.
               + **4020**: User password theft.
               + **6002**: Port scanning.
               + **6003**: Host scanning.
               + **13001**: Kubernetes event deletion.
               + **13002**: Pod abnormal behavior.
               + **13003**: Enumerate user information.
               + **13004**: Bind cluster user role.
        :param _builtins.str hash: Specifies the event white list SHA256.
        :param _builtins.bool delete_white_rule: Specifies whether to delete the alarm white list rule.
               This field is only used when the deleted white list is of rule type.
        :param _builtins.str field_value: Specifies the white field value.
        :param _builtins.str file_hash: Specifies the file hash.
        :param _builtins.str file_path: Specifies the file path.
        :param _builtins.str judge_type: Specifies the judge type.  
               The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        :param _builtins.str white_field: Specifies the white field.  
               The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "hash", hash)
        if delete_white_rule is not None:
            pulumi.set(__self__, "delete_white_rule", delete_white_rule)
        if field_value is not None:
            pulumi.set(__self__, "field_value", field_value)
        if file_hash is not None:
            pulumi.set(__self__, "file_hash", file_hash)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if judge_type is not None:
            pulumi.set(__self__, "judge_type", judge_type)
        if white_field is not None:
            pulumi.set(__self__, "white_field", white_field)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> _builtins.int:
        """
        Specifies the event type.  
        The valid values are as follows:
        + **1001**: General malware.
        + **1002**: Virus.
        + **1003**: Worm.
        + **1004**: Trojan.
        + **1005**: Botnet.
        + **1006**: Backdoor.
        + **1010**: Rootkit.
        + **1011**: Ransomware.
        + **1012**: Hacker tool.
        + **1015**: Webshell.
        + **1016**: Mining.
        + **1017**: Reverse Shell.
        + **2001**: General vulnerability exploitation.
        + **2012**: Remote code execution.
        + **2047**: Redis vulnerability exploitation.
        + **2048**: Hadoop vulnerability exploitation.
        + **2049**: MySQL vulnerability exploitation.
        + **3002**: File privilege escalation.
        + **3003**: Process privilege escalation.
        + **3004**: Key file change.
        + **3005**: File/directory change.
        + **3007**: Process abnormal behavior.
        + **3015**: High-risk command execution.
        + **3018**: Abnormal Shell.
        + **3027**: Crontab suspicious task.
        + **3029**: System security protection disabled.
        + **3030**: Backup deletion.
        + **3031**: Abnormal registry operation.
        + **3036**: Container image blocking.
        + **4002**: Brute force cracking.
        + **4004**: Abnormal login.
        + **4006**: Illegal system account.
        + **4014**: User account addition.
        + **4020**: User password theft.
        + **6002**: Port scanning.
        + **6003**: Host scanning.
        + **13001**: Kubernetes event deletion.
        + **13002**: Pod abnormal behavior.
        + **13003**: Enumerate user information.
        + **13004**: Bind cluster user role.
        """
        return pulumi.get(self, "event_type")

    @_builtins.property
    @pulumi.getter
    def hash(self) -> _builtins.str:
        """
        Specifies the event white list SHA256.
        """
        return pulumi.get(self, "hash")

    @_builtins.property
    @pulumi.getter(name="deleteWhiteRule")
    def delete_white_rule(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to delete the alarm white list rule.
        This field is only used when the deleted white list is of rule type.
        """
        return pulumi.get(self, "delete_white_rule")

    @_builtins.property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[_builtins.str]:
        """
        Specifies the white field value.
        """
        return pulumi.get(self, "field_value")

    @_builtins.property
    @pulumi.getter(name="fileHash")
    def file_hash(self) -> Optional[_builtins.str]:
        """
        Specifies the file hash.
        """
        return pulumi.get(self, "file_hash")

    @_builtins.property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[_builtins.str]:
        """
        Specifies the file path.
        """
        return pulumi.get(self, "file_path")

    @_builtins.property
    @pulumi.getter(name="judgeType")
    def judge_type(self) -> Optional[_builtins.str]:
        """
        Specifies the judge type.  
        The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        """
        return pulumi.get(self, "judge_type")

    @_builtins.property
    @pulumi.getter(name="whiteField")
    def white_field(self) -> Optional[_builtins.str]:
        """
        Specifies the white field.  
        The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        """
        return pulumi.get(self, "white_field")


@pulumi.output_type
class EventDeleteIsolatedFileDataList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileAttr":
            suggest = "file_attr"
        elif key == "fileHash":
            suggest = "file_hash"
        elif key == "filePath":
            suggest = "file_path"
        elif key == "hostId":
            suggest = "host_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDeleteIsolatedFileDataList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDeleteIsolatedFileDataList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDeleteIsolatedFileDataList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_attr: _builtins.str,
                 file_hash: _builtins.str,
                 file_path: _builtins.str,
                 host_id: _builtins.str):
        pulumi.set(__self__, "file_attr", file_attr)
        pulumi.set(__self__, "file_hash", file_hash)
        pulumi.set(__self__, "file_path", file_path)
        pulumi.set(__self__, "host_id", host_id)

    @_builtins.property
    @pulumi.getter(name="fileAttr")
    def file_attr(self) -> _builtins.str:
        return pulumi.get(self, "file_attr")

    @_builtins.property
    @pulumi.getter(name="fileHash")
    def file_hash(self) -> _builtins.str:
        return pulumi.get(self, "file_hash")

    @_builtins.property
    @pulumi.getter(name="filePath")
    def file_path(self) -> _builtins.str:
        return pulumi.get(self, "file_path")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        return pulumi.get(self, "host_id")


@pulumi.output_type
class EventUnblockIpDataList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostId":
            suggest = "host_id"
        elif key == "loginType":
            suggest = "login_type"
        elif key == "srcIp":
            suggest = "src_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventUnblockIpDataList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventUnblockIpDataList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventUnblockIpDataList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_id: _builtins.str,
                 login_type: _builtins.str,
                 src_ip: _builtins.str):
        """
        :param _builtins.str host_id: Specifies the host ID.
        :param _builtins.str login_type: Specifies login type.  
               The valid values are as follows:
               + **mysql**: Represents the MySQL service.
               + **rdp**: Represents the RDP service.
               + **ssh**: Represents the SSH service.
               + **vsftp**: Represents the VSFTP service.
        :param _builtins.str src_ip: Specifies the IP address of the attack source.
        """
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "login_type", login_type)
        pulumi.set(__self__, "src_ip", src_ip)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        Specifies the host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="loginType")
    def login_type(self) -> _builtins.str:
        """
        Specifies login type.  
        The valid values are as follows:
        + **mysql**: Represents the MySQL service.
        + **rdp**: Represents the RDP service.
        + **ssh**: Represents the SSH service.
        + **vsftp**: Represents the VSFTP service.
        """
        return pulumi.get(self, "login_type")

    @_builtins.property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> _builtins.str:
        """
        Specifies the IP address of the attack source.
        """
        return pulumi.get(self, "src_ip")


@pulumi.output_type
class HoneypotPortPolicyPortList(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.int] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.int port: Specifies the port number.
        :param _builtins.str protocol: Specifies the protocol type.
               The valid values are as follows:
               + **tcp**
               + **tcp6**
        """
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the port number.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Specifies the protocol type.
        The valid values are as follows:
        + **tcp**
        + **tcp6**
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class HoneypotPortPolicyPortsList(dict):
    def __init__(__self__, *,
                 port: _builtins.int,
                 protocol: _builtins.str):
        """
        :param _builtins.int port: Specifies the port number.
        :param _builtins.str protocol: Specifies the protocol type.
               The valid values are as follows:
               + **tcp**
               + **tcp6**
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Specifies the port number.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol type.
        The valid values are as follows:
        + **tcp**
        + **tcp6**
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class ImageBatchScanImageInfoList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageName":
            suggest = "image_name"
        elif key == "imageVersion":
            suggest = "image_version"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceUrl":
            suggest = "instance_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageBatchScanImageInfoList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageBatchScanImageInfoList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageBatchScanImageInfoList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_name: _builtins.str,
                 image_version: _builtins.str,
                 namespace: _builtins.str,
                 instance_id: Optional[_builtins.str] = None,
                 instance_url: Optional[_builtins.str] = None):
        """
        :param _builtins.str image_name: Specifies the image name.
        :param _builtins.str image_version: Specifies the image version.
        :param _builtins.str namespace: Specifies the namespace.
        :param _builtins.str instance_id: Specifies the enterprise instance ID.
        :param _builtins.str instance_url: Specifies the URL for downloading enterprise images.
        """
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "image_version", image_version)
        pulumi.set(__self__, "namespace", namespace)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_url is not None:
            pulumi.set(__self__, "instance_url", instance_url)

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> _builtins.str:
        """
        Specifies the image name.
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> _builtins.str:
        """
        Specifies the image version.
        """
        return pulumi.get(self, "image_version")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        Specifies the enterprise instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> Optional[_builtins.str]:
        """
        Specifies the URL for downloading enterprise images.
        """
        return pulumi.get(self, "instance_url")


@pulumi.output_type
class GetAgentInstallScriptInstallScriptListResult(dict):
    def __init__(__self__, *,
                 cmd: _builtins.str,
                 package_download_url: _builtins.str,
                 package_type: _builtins.str):
        """
        :param _builtins.str cmd: The command.
        :param _builtins.str package_download_url: The package download URL.
        :param _builtins.str package_type: The packet type.
        """
        pulumi.set(__self__, "cmd", cmd)
        pulumi.set(__self__, "package_download_url", package_download_url)
        pulumi.set(__self__, "package_type", package_type)

    @_builtins.property
    @pulumi.getter
    def cmd(self) -> _builtins.str:
        """
        The command.
        """
        return pulumi.get(self, "cmd")

    @_builtins.property
    @pulumi.getter(name="packageDownloadUrl")
    def package_download_url(self) -> _builtins.str:
        """
        The package download URL.
        """
        return pulumi.get(self, "package_download_url")

    @_builtins.property
    @pulumi.getter(name="packageType")
    def package_type(self) -> _builtins.str:
        """
        The packet type.
        """
        return pulumi.get(self, "package_type")


@pulumi.output_type
class GetAntivirusAvailableHostsDataListResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 group_id: _builtins.str,
                 host_id: _builtins.str,
                 host_name: _builtins.str,
                 os_type: _builtins.str,
                 private_ip: _builtins.str,
                 public_ip: _builtins.str):
        """
        :param _builtins.str agent_id: The host agent ID.
        :param _builtins.str group_id: Specifies the host group ID.
        :param _builtins.str host_id: Specifies the host ID.
        :param _builtins.str host_name: Specifies the host name.
        :param _builtins.str os_type: The host operating system type. The valid value can be **Linux** or **Windows**.
        :param _builtins.str private_ip: Specifies the host private IP address.
        :param _builtins.str public_ip: Specifies the host public IP address.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        The host agent ID.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        Specifies the host group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        Specifies the host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The host operating system type. The valid value can be **Linux** or **Windows**.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Specifies the host private IP address.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        Specifies the host public IP address.
        """
        return pulumi.get(self, "public_ip")


@pulumi.output_type
class GetAntivirusCustomScanPoliciesDataListResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 file_type_lists: Sequence[_builtins.int],
                 host_info_lists: Sequence['outputs.GetAntivirusCustomScanPoliciesDataListHostInfoListResult'],
                 host_num: _builtins.int,
                 ignore_dir: _builtins.str,
                 invalidate: _builtins.bool,
                 next_start_time: _builtins.int,
                 policy_id: _builtins.str,
                 policy_name: _builtins.str,
                 scan_dir: _builtins.str,
                 scan_hour: _builtins.int,
                 scan_minute: _builtins.int,
                 scan_period: _builtins.str,
                 scan_period_date: _builtins.int,
                 scan_time: _builtins.int,
                 start_type: _builtins.str,
                 whether_paid_task: _builtins.bool):
        """
        :param _builtins.str action: The disposal action.  
               The valid values are as follows:
               + **auto**: Automatic disposal.
               + **manual**: Manual disposal.
        :param Sequence[_builtins.int] file_type_lists: The file type list.
        :param Sequence['GetAntivirusCustomScanPoliciesDataListHostInfoListArgs'] host_info_lists: The host details.
               The host_info_list structure is documented below.
        :param _builtins.int host_num: Affects the number of hosts.
        :param _builtins.str ignore_dir: The exclude directories. Separate multiple directories with semicolons.
        :param _builtins.bool invalidate: Is it invalid. The valid value can be **true** or **false**.
        :param _builtins.int next_start_time: The next startup time in milliseconds.
        :param _builtins.str policy_id: The policy ID.
        :param _builtins.str policy_name: Specifies the policy name.
        :param _builtins.str scan_dir: The scan directories. Separate multiple directories with semicolons.
        :param _builtins.int scan_hour: The scanning hours. Only has a value when the `startup_type` is period.
        :param _builtins.int scan_minute: The scanning minutes. Only has a value when the `startup_type` is period.
        :param _builtins.str scan_period: The startup period.  
               The valid values are as follows:
               + **day**
               + **week**
               + **month**
        :param _builtins.int scan_period_date: The scan cycle date. The valid values are `1` - `28`.
               + When the `scan_period` is week, `1` - `7` represents sunday to saturday.
               + When the `scan_period` is month, `1` - `28` represents the 1st to 28th of each month.
        :param _builtins.int scan_time: The scan timestamp in milliseconds. Only has a value when the `startup_type` is later.
        :param _builtins.str start_type: The startup type.  
               The valid values are as follows:
               + **now**
               + **later**
               + **period**
        :param _builtins.bool whether_paid_task: Is the scanning task paid for this time. The valid value can be **true** or **false**.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "file_type_lists", file_type_lists)
        pulumi.set(__self__, "host_info_lists", host_info_lists)
        pulumi.set(__self__, "host_num", host_num)
        pulumi.set(__self__, "ignore_dir", ignore_dir)
        pulumi.set(__self__, "invalidate", invalidate)
        pulumi.set(__self__, "next_start_time", next_start_time)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "scan_dir", scan_dir)
        pulumi.set(__self__, "scan_hour", scan_hour)
        pulumi.set(__self__, "scan_minute", scan_minute)
        pulumi.set(__self__, "scan_period", scan_period)
        pulumi.set(__self__, "scan_period_date", scan_period_date)
        pulumi.set(__self__, "scan_time", scan_time)
        pulumi.set(__self__, "start_type", start_type)
        pulumi.set(__self__, "whether_paid_task", whether_paid_task)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        The disposal action.  
        The valid values are as follows:
        + **auto**: Automatic disposal.
        + **manual**: Manual disposal.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="fileTypeLists")
    def file_type_lists(self) -> Sequence[_builtins.int]:
        """
        The file type list.
        """
        return pulumi.get(self, "file_type_lists")

    @_builtins.property
    @pulumi.getter(name="hostInfoLists")
    def host_info_lists(self) -> Sequence['outputs.GetAntivirusCustomScanPoliciesDataListHostInfoListResult']:
        """
        The host details.
        The host_info_list structure is documented below.
        """
        return pulumi.get(self, "host_info_lists")

    @_builtins.property
    @pulumi.getter(name="hostNum")
    def host_num(self) -> _builtins.int:
        """
        Affects the number of hosts.
        """
        return pulumi.get(self, "host_num")

    @_builtins.property
    @pulumi.getter(name="ignoreDir")
    def ignore_dir(self) -> _builtins.str:
        """
        The exclude directories. Separate multiple directories with semicolons.
        """
        return pulumi.get(self, "ignore_dir")

    @_builtins.property
    @pulumi.getter
    def invalidate(self) -> _builtins.bool:
        """
        Is it invalid. The valid value can be **true** or **false**.
        """
        return pulumi.get(self, "invalidate")

    @_builtins.property
    @pulumi.getter(name="nextStartTime")
    def next_start_time(self) -> _builtins.int:
        """
        The next startup time in milliseconds.
        """
        return pulumi.get(self, "next_start_time")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        The policy ID.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        Specifies the policy name.
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="scanDir")
    def scan_dir(self) -> _builtins.str:
        """
        The scan directories. Separate multiple directories with semicolons.
        """
        return pulumi.get(self, "scan_dir")

    @_builtins.property
    @pulumi.getter(name="scanHour")
    def scan_hour(self) -> _builtins.int:
        """
        The scanning hours. Only has a value when the `startup_type` is period.
        """
        return pulumi.get(self, "scan_hour")

    @_builtins.property
    @pulumi.getter(name="scanMinute")
    def scan_minute(self) -> _builtins.int:
        """
        The scanning minutes. Only has a value when the `startup_type` is period.
        """
        return pulumi.get(self, "scan_minute")

    @_builtins.property
    @pulumi.getter(name="scanPeriod")
    def scan_period(self) -> _builtins.str:
        """
        The startup period.  
        The valid values are as follows:
        + **day**
        + **week**
        + **month**
        """
        return pulumi.get(self, "scan_period")

    @_builtins.property
    @pulumi.getter(name="scanPeriodDate")
    def scan_period_date(self) -> _builtins.int:
        """
        The scan cycle date. The valid values are `1` - `28`.
        + When the `scan_period` is week, `1` - `7` represents sunday to saturday.
        + When the `scan_period` is month, `1` - `28` represents the 1st to 28th of each month.
        """
        return pulumi.get(self, "scan_period_date")

    @_builtins.property
    @pulumi.getter(name="scanTime")
    def scan_time(self) -> _builtins.int:
        """
        The scan timestamp in milliseconds. Only has a value when the `startup_type` is later.
        """
        return pulumi.get(self, "scan_time")

    @_builtins.property
    @pulumi.getter(name="startType")
    def start_type(self) -> _builtins.str:
        """
        The startup type.  
        The valid values are as follows:
        + **now**
        + **later**
        + **period**
        """
        return pulumi.get(self, "start_type")

    @_builtins.property
    @pulumi.getter(name="whetherPaidTask")
    def whether_paid_task(self) -> _builtins.bool:
        """
        Is the scanning task paid for this time. The valid value can be **true** or **false**.
        """
        return pulumi.get(self, "whether_paid_task")


@pulumi.output_type
class GetAntivirusCustomScanPoliciesDataListHostInfoListResult(dict):
    def __init__(__self__, *,
                 asset_value: _builtins.str,
                 host_id: _builtins.str,
                 host_name: _builtins.str,
                 private_ip: _builtins.str,
                 public_ip: _builtins.str):
        """
        :param _builtins.str asset_value: The asset importance. The valid value can be **important**, **common**, or **test**.
        :param _builtins.str host_id: The host ID.
        :param _builtins.str host_name: The host name.
        :param _builtins.str private_ip: The host private IP address.
        :param _builtins.str public_ip: The host public IP address.
        """
        pulumi.set(__self__, "asset_value", asset_value)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)

    @_builtins.property
    @pulumi.getter(name="assetValue")
    def asset_value(self) -> _builtins.str:
        """
        The asset importance. The valid value can be **important**, **common**, or **test**.
        """
        return pulumi.get(self, "asset_value")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        The host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        The host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The host private IP address.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The host public IP address.
        """
        return pulumi.get(self, "public_ip")


@pulumi.output_type
class GetAntivirusVirusScanTasksDataListResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 cancel_host_num: _builtins.int,
                 fail_host_num: _builtins.int,
                 host_info_lists: Sequence['outputs.GetAntivirusVirusScanTasksDataListHostInfoListResult'],
                 host_num: _builtins.int,
                 rescan: _builtins.bool,
                 scan_type: _builtins.str,
                 start_time: _builtins.int,
                 start_type: _builtins.str,
                 success_host_num: _builtins.int,
                 task_id: _builtins.str,
                 task_name: _builtins.str,
                 task_status: _builtins.str,
                 whether_paid_task: _builtins.bool):
        """
        :param _builtins.str action: The disposal action.  
               The valid values are as follows:
               + **auto**
               + **manual**
        :param _builtins.int cancel_host_num: The number of hosts cancelled.
        :param _builtins.int fail_host_num: The number of hosts with scanning failures.
        :param Sequence['GetAntivirusVirusScanTasksDataListHostInfoListArgs'] host_info_lists: The list of host details.
               The host_info_list structure is documented below.
        :param _builtins.int host_num: The number of associated hosts.
        :param _builtins.bool rescan: Do you need to rescan.
        :param _builtins.str scan_type: The scan type.  
               The valid values are as follows:
               + **quick**
               + **full**
               + **custom**
        :param _builtins.int start_time: The start time in milliseconds.
        :param _builtins.str start_type: The startup type.  
               The valid values are as follows:
               + **now**
               + **later**
               + **period**
        :param _builtins.int success_host_num: The number of hosts successfully scanned.
        :param _builtins.str task_id: The task ID.
        :param _builtins.str task_name: Specifies the task name.
        :param _builtins.str task_status: Specifies the task status.  
               The valid values are as follows:
               + **scanning**
               + **cancel**
               + **fail**
               + **finish**
        :param _builtins.bool whether_paid_task: Specifies whether this scanning task is paid or not.  
               The valid values are as follows:
               + **true**
               + **false**
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cancel_host_num", cancel_host_num)
        pulumi.set(__self__, "fail_host_num", fail_host_num)
        pulumi.set(__self__, "host_info_lists", host_info_lists)
        pulumi.set(__self__, "host_num", host_num)
        pulumi.set(__self__, "rescan", rescan)
        pulumi.set(__self__, "scan_type", scan_type)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "start_type", start_type)
        pulumi.set(__self__, "success_host_num", success_host_num)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "task_status", task_status)
        pulumi.set(__self__, "whether_paid_task", whether_paid_task)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        The disposal action.  
        The valid values are as follows:
        + **auto**
        + **manual**
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="cancelHostNum")
    def cancel_host_num(self) -> _builtins.int:
        """
        The number of hosts cancelled.
        """
        return pulumi.get(self, "cancel_host_num")

    @_builtins.property
    @pulumi.getter(name="failHostNum")
    def fail_host_num(self) -> _builtins.int:
        """
        The number of hosts with scanning failures.
        """
        return pulumi.get(self, "fail_host_num")

    @_builtins.property
    @pulumi.getter(name="hostInfoLists")
    def host_info_lists(self) -> Sequence['outputs.GetAntivirusVirusScanTasksDataListHostInfoListResult']:
        """
        The list of host details.
        The host_info_list structure is documented below.
        """
        return pulumi.get(self, "host_info_lists")

    @_builtins.property
    @pulumi.getter(name="hostNum")
    def host_num(self) -> _builtins.int:
        """
        The number of associated hosts.
        """
        return pulumi.get(self, "host_num")

    @_builtins.property
    @pulumi.getter
    def rescan(self) -> _builtins.bool:
        """
        Do you need to rescan.
        """
        return pulumi.get(self, "rescan")

    @_builtins.property
    @pulumi.getter(name="scanType")
    def scan_type(self) -> _builtins.str:
        """
        The scan type.  
        The valid values are as follows:
        + **quick**
        + **full**
        + **custom**
        """
        return pulumi.get(self, "scan_type")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        The start time in milliseconds.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="startType")
    def start_type(self) -> _builtins.str:
        """
        The startup type.  
        The valid values are as follows:
        + **now**
        + **later**
        + **period**
        """
        return pulumi.get(self, "start_type")

    @_builtins.property
    @pulumi.getter(name="successHostNum")
    def success_host_num(self) -> _builtins.int:
        """
        The number of hosts successfully scanned.
        """
        return pulumi.get(self, "success_host_num")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        """
        The task ID.
        """
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> _builtins.str:
        """
        Specifies the task name.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> _builtins.str:
        """
        Specifies the task status.  
        The valid values are as follows:
        + **scanning**
        + **cancel**
        + **fail**
        + **finish**
        """
        return pulumi.get(self, "task_status")

    @_builtins.property
    @pulumi.getter(name="whetherPaidTask")
    def whether_paid_task(self) -> _builtins.bool:
        """
        Specifies whether this scanning task is paid or not.  
        The valid values are as follows:
        + **true**
        + **false**
        """
        return pulumi.get(self, "whether_paid_task")


@pulumi.output_type
class GetAntivirusVirusScanTasksDataListHostInfoListResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 agent_status: _builtins.str,
                 asset_value: _builtins.str,
                 deleted: _builtins.bool,
                 fail_reason: _builtins.str,
                 host_id: _builtins.str,
                 host_name: _builtins.str,
                 host_status: _builtins.str,
                 host_task_status: _builtins.str,
                 os_name: _builtins.str,
                 os_type: _builtins.str,
                 os_version: _builtins.str,
                 private_ip: _builtins.str,
                 protect_status: _builtins.str,
                 public_ip: _builtins.str,
                 run_duration: _builtins.int,
                 scan_file_num: _builtins.int,
                 scan_progress: _builtins.str,
                 start_time: _builtins.int,
                 virus_num: _builtins.int,
                 whether_using_quota: _builtins.int):
        """
        :param _builtins.str agent_id: The agent ID.
        :param _builtins.str agent_status: The agent status.  
               The valid values are as follows:
               + **installed**
               + **not_installed*
               + **online**
               + **offline**
               + **install_failed**
               + **installing**
               + **not_online**
        :param _builtins.str asset_value: The importance of assets.  
               The valid values are as follows:
               + **important**: Deleted.
               + **common*: Not deleted.
               + **test*: Not deleted.
        :param _builtins.bool deleted: Do you want to delete it.  
               The valid values are as follows:
               + **true**: Deleted.
               + **false*: Not deleted.
        :param _builtins.str fail_reason: The failure reason.
        :param _builtins.str host_id: The host ID.
        :param _builtins.str host_name: Specifies the host name.
        :param _builtins.str host_status: The host status.
        :param _builtins.str host_task_status: Specifies the list of host scanning status.  
               The valid values are as follows:
               + **scanning**
               + **success**
               + **fail**
               + **cancel**
        :param _builtins.str os_name: The operating system name.
        :param _builtins.str os_type: The operating system type.
               The valid values are as follows:
               + **Linux**
               + **Windows*
        :param _builtins.str os_version: The operating system version.
        :param _builtins.str private_ip: Specifies the host private IP address.
        :param _builtins.str protect_status: The protection status.  
               The valid values are as follows:
               + **closed**
               + **opened**
        :param _builtins.str public_ip: Specifies the host public IP address.
        :param _builtins.int run_duration: The running time in seconds.
        :param _builtins.int scan_file_num: The number of scanned files.
        :param _builtins.str scan_progress: The scan progress.
        :param _builtins.int start_time: The start time in milliseconds.
        :param _builtins.int virus_num: The number of hosts cancelled.
        :param _builtins.int whether_using_quota: Whether to use virus scanning and removal quota on a per-use basis.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "agent_status", agent_status)
        pulumi.set(__self__, "asset_value", asset_value)
        pulumi.set(__self__, "deleted", deleted)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "host_status", host_status)
        pulumi.set(__self__, "host_task_status", host_task_status)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "protect_status", protect_status)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "run_duration", run_duration)
        pulumi.set(__self__, "scan_file_num", scan_file_num)
        pulumi.set(__self__, "scan_progress", scan_progress)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "virus_num", virus_num)
        pulumi.set(__self__, "whether_using_quota", whether_using_quota)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        The agent ID.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="agentStatus")
    def agent_status(self) -> _builtins.str:
        """
        The agent status.  
        The valid values are as follows:
        + **installed**
        + **not_installed*
        + **online**
        + **offline**
        + **install_failed**
        + **installing**
        + **not_online**
        """
        return pulumi.get(self, "agent_status")

    @_builtins.property
    @pulumi.getter(name="assetValue")
    def asset_value(self) -> _builtins.str:
        """
        The importance of assets.  
        The valid values are as follows:
        + **important**: Deleted.
        + **common*: Not deleted.
        + **test*: Not deleted.
        """
        return pulumi.get(self, "asset_value")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> _builtins.bool:
        """
        Do you want to delete it.  
        The valid values are as follows:
        + **true**: Deleted.
        + **false*: Not deleted.
        """
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> _builtins.str:
        """
        The failure reason.
        """
        return pulumi.get(self, "fail_reason")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        The host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="hostStatus")
    def host_status(self) -> _builtins.str:
        """
        The host status.
        """
        return pulumi.get(self, "host_status")

    @_builtins.property
    @pulumi.getter(name="hostTaskStatus")
    def host_task_status(self) -> _builtins.str:
        """
        Specifies the list of host scanning status.  
        The valid values are as follows:
        + **scanning**
        + **success**
        + **fail**
        + **cancel**
        """
        return pulumi.get(self, "host_task_status")

    @_builtins.property
    @pulumi.getter(name="osName")
    def os_name(self) -> _builtins.str:
        """
        The operating system name.
        """
        return pulumi.get(self, "os_name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The operating system type.
        The valid values are as follows:
        + **Linux**
        + **Windows*
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> _builtins.str:
        """
        The operating system version.
        """
        return pulumi.get(self, "os_version")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Specifies the host private IP address.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> _builtins.str:
        """
        The protection status.  
        The valid values are as follows:
        + **closed**
        + **opened**
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        Specifies the host public IP address.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="runDuration")
    def run_duration(self) -> _builtins.int:
        """
        The running time in seconds.
        """
        return pulumi.get(self, "run_duration")

    @_builtins.property
    @pulumi.getter(name="scanFileNum")
    def scan_file_num(self) -> _builtins.int:
        """
        The number of scanned files.
        """
        return pulumi.get(self, "scan_file_num")

    @_builtins.property
    @pulumi.getter(name="scanProgress")
    def scan_progress(self) -> _builtins.str:
        """
        The scan progress.
        """
        return pulumi.get(self, "scan_progress")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        The start time in milliseconds.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="virusNum")
    def virus_num(self) -> _builtins.int:
        """
        The number of hosts cancelled.
        """
        return pulumi.get(self, "virus_num")

    @_builtins.property
    @pulumi.getter(name="whetherUsingQuota")
    def whether_using_quota(self) -> _builtins.int:
        """
        Whether to use virus scanning and removal quota on a per-use basis.
        """
        return pulumi.get(self, "whether_using_quota")


@pulumi.output_type
class GetAppStatisticsDataListResult(dict):
    def __init__(__self__, *,
                 app_name: _builtins.str,
                 num: _builtins.int):
        """
        :param _builtins.str app_name: Specifies the app name.
        :param _builtins.int num: The number of hosts that have this app.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "num", num)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        Specifies the app name.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter
    def num(self) -> _builtins.int:
        """
        The number of hosts that have this app.
        """
        return pulumi.get(self, "num")


@pulumi.output_type
class GetAssetAppsDataListResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 app_name: _builtins.str,
                 container_id: _builtins.str,
                 container_name: _builtins.str,
                 host_id: _builtins.str,
                 host_ip: _builtins.str,
                 host_name: _builtins.str,
                 recent_scan_time: _builtins.int,
                 update_time: _builtins.int,
                 version: _builtins.str):
        """
        :param _builtins.str agent_id: The agent ID.
        :param _builtins.str app_name: Specifies the software name.
        :param _builtins.str container_id: The container ID.
        :param _builtins.str container_name: The container name.
        :param _builtins.str host_id: Specifies the host ID.
        :param _builtins.str host_ip: Specifies the host IP address.
        :param _builtins.str host_name: Specifies the host name.
        :param _builtins.int recent_scan_time: The latest scanning time, in milliseconds.
        :param _builtins.int update_time: The latest update time, in milliseconds.
        :param _builtins.str version: Specifies the software version.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "container_id", container_id)
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_ip", host_ip)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "recent_scan_time", recent_scan_time)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        The agent ID.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        Specifies the software name.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="containerId")
    def container_id(self) -> _builtins.str:
        """
        The container ID.
        """
        return pulumi.get(self, "container_id")

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> _builtins.str:
        """
        The container name.
        """
        return pulumi.get(self, "container_name")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        Specifies the host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> _builtins.str:
        """
        Specifies the host IP address.
        """
        return pulumi.get(self, "host_ip")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="recentScanTime")
    def recent_scan_time(self) -> _builtins.int:
        """
        The latest scanning time, in milliseconds.
        """
        return pulumi.get(self, "recent_scan_time")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.int:
        """
        The latest update time, in milliseconds.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the software version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetAssetPortStatisticsDataListResult(dict):
    def __init__(__self__, *,
                 num: _builtins.int,
                 port: _builtins.int,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.int num: The number of ports.
        :param _builtins.int port: Specifies the port number.
        :param _builtins.str status: Specifies the port status.
               The valid values are as follows:
               + **danger**: Dangerous ports.
               + **unknow**: No ports with known risks.
        :param _builtins.str type: Specifies the port type.
        """
        pulumi.set(__self__, "num", num)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def num(self) -> _builtins.int:
        """
        The number of ports.
        """
        return pulumi.get(self, "num")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Specifies the port number.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the port status.
        The valid values are as follows:
        + **danger**: Dangerous ports.
        + **unknow**: No ports with known risks.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the port type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAssetPortsDataListResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 container_id: _builtins.str,
                 host_id: _builtins.str,
                 laddr: _builtins.str,
                 path: _builtins.str,
                 pid: _builtins.int,
                 port: _builtins.int,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str agent_id: The agent ID.
        :param _builtins.str container_id: The container ID.
        :param _builtins.str host_id: Specifies the host ID.
        :param _builtins.str laddr: The listening IP address.
        :param _builtins.str path: The executable file path of the process.
        :param _builtins.int pid: The process ID.
        :param _builtins.int port: Specifies the port number.
        :param _builtins.str status: Specifies the port status.
               The valid values are as follows:
               + **normal**: Normal.
               + **danger**: Dangerous.
               + **unknow**: Unknown.
        :param _builtins.str type: Specifies the port type.
               The valid values are as follows:
               + **TCP**
               + **UDP**
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "container_id", container_id)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "laddr", laddr)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "pid", pid)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        The agent ID.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="containerId")
    def container_id(self) -> _builtins.str:
        """
        The container ID.
        """
        return pulumi.get(self, "container_id")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        Specifies the host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter
    def laddr(self) -> _builtins.str:
        """
        The listening IP address.
        """
        return pulumi.get(self, "laddr")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The executable file path of the process.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def pid(self) -> _builtins.int:
        """
        The process ID.
        """
        return pulumi.get(self, "pid")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Specifies the port number.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the port status.
        The valid values are as follows:
        + **normal**: Normal.
        + **danger**: Dangerous.
        + **unknow**: Unknown.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the port type.
        The valid values are as follows:
        + **TCP**
        + **UDP**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAssetUserStatisticsDataListResult(dict):
    def __init__(__self__, *,
                 num: _builtins.int,
                 user_name: _builtins.str):
        """
        :param _builtins.int num: The number of servers of the user.
        :param _builtins.str user_name: Specifies the user name.
        """
        pulumi.set(__self__, "num", num)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def num(self) -> _builtins.int:
        """
        The number of servers of the user.
        """
        return pulumi.get(self, "num")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        Specifies the user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetAssetUsersDataListResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 container_id: _builtins.str,
                 container_name: _builtins.str,
                 host_id: _builtins.str,
                 host_ip: _builtins.str,
                 host_name: _builtins.str,
                 login_permission: _builtins.bool,
                 recent_scan_time: _builtins.int,
                 root_permission: _builtins.bool,
                 shell: _builtins.str,
                 user_group_name: _builtins.str,
                 user_home_dir: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str agent_id: The agent ID.
        :param _builtins.str container_id: The container ID.
        :param _builtins.str container_name: The container name.
        :param _builtins.str host_id: Specifies the host ID.
        :param _builtins.str host_ip: The host IP.
        :param _builtins.str host_name: Specifies the host name.
        :param _builtins.bool login_permission: Specifies whether the user has the login permission.
        :param _builtins.int recent_scan_time: The latest scan time.
        :param _builtins.bool root_permission: Specifies whether the user has root permissions.
        :param _builtins.str shell: The user startup shell.
        :param _builtins.str user_group_name: The user group name.
        :param _builtins.str user_home_dir: The user home directory.
        :param _builtins.str user_name: Specifies the account name.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "container_id", container_id)
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_ip", host_ip)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "login_permission", login_permission)
        pulumi.set(__self__, "recent_scan_time", recent_scan_time)
        pulumi.set(__self__, "root_permission", root_permission)
        pulumi.set(__self__, "shell", shell)
        pulumi.set(__self__, "user_group_name", user_group_name)
        pulumi.set(__self__, "user_home_dir", user_home_dir)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        The agent ID.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="containerId")
    def container_id(self) -> _builtins.str:
        """
        The container ID.
        """
        return pulumi.get(self, "container_id")

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> _builtins.str:
        """
        The container name.
        """
        return pulumi.get(self, "container_name")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        Specifies the host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> _builtins.str:
        """
        The host IP.
        """
        return pulumi.get(self, "host_ip")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="loginPermission")
    def login_permission(self) -> _builtins.bool:
        """
        Specifies whether the user has the login permission.
        """
        return pulumi.get(self, "login_permission")

    @_builtins.property
    @pulumi.getter(name="recentScanTime")
    def recent_scan_time(self) -> _builtins.int:
        """
        The latest scan time.
        """
        return pulumi.get(self, "recent_scan_time")

    @_builtins.property
    @pulumi.getter(name="rootPermission")
    def root_permission(self) -> _builtins.bool:
        """
        Specifies whether the user has root permissions.
        """
        return pulumi.get(self, "root_permission")

    @_builtins.property
    @pulumi.getter
    def shell(self) -> _builtins.str:
        """
        The user startup shell.
        """
        return pulumi.get(self, "shell")

    @_builtins.property
    @pulumi.getter(name="userGroupName")
    def user_group_name(self) -> _builtins.str:
        """
        The user group name.
        """
        return pulumi.get(self, "user_group_name")

    @_builtins.property
    @pulumi.getter(name="userHomeDir")
    def user_home_dir(self) -> _builtins.str:
        """
        The user home directory.
        """
        return pulumi.get(self, "user_home_dir")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        Specifies the account name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetAutoLaunchStatisticsDataListResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 num: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str name: Specifies the auto launch name.
        :param _builtins.int num: The number of hosts that have this auto launch item.
        :param _builtins.str type: Specifies the auto launch type. The valid values are as follows:
               + **0**: Auto launch service.
               + **1**: Scheduled task.
               + **2**: Preload dynamic library.
               + **3**: Run registry key.
               + **4**: Startup folder.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "num", num)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the auto launch name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def num(self) -> _builtins.int:
        """
        The number of hosts that have this auto launch item.
        """
        return pulumi.get(self, "num")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the auto launch type. The valid values are as follows:
        + **0**: Auto launch service.
        + **1**: Scheduled task.
        + **2**: Preload dynamic library.
        + **3**: Run registry key.
        + **4**: Startup folder.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAutoLaunchsDataListResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 hash: _builtins.str,
                 host_id: _builtins.str,
                 host_ip: _builtins.str,
                 host_name: _builtins.str,
                 name: _builtins.str,
                 path: _builtins.str,
                 recent_scan_time: _builtins.int,
                 run_user: _builtins.str,
                 type: _builtins.int):
        """
        :param _builtins.str agent_id: The agent ID.
        :param _builtins.str hash: The file hash value generated using the SHA256 algorithm.
        :param _builtins.str host_id: Specifies the host ID.
        :param _builtins.str host_ip: Specifies the host IP address.
        :param _builtins.str host_name: Specifies the host name.
        :param _builtins.str name: Specifies the auto launch item name.
        :param _builtins.str path: The path of the auto launch item.
        :param _builtins.int recent_scan_time: The latest scan time.
        :param _builtins.str run_user: The user who starts the execution.
        :param _builtins.int type: Specifies the auto launch item type.
               The valid values are as follows:
               + **0**: Auto launch service.
               + **1**: Scheduled task.
               + **2**: Preloaded dynamic library.
               + **3**: Run registry key.
               + **4**: Startup folder.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "hash", hash)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_ip", host_ip)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "recent_scan_time", recent_scan_time)
        pulumi.set(__self__, "run_user", run_user)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        The agent ID.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter
    def hash(self) -> _builtins.str:
        """
        The file hash value generated using the SHA256 algorithm.
        """
        return pulumi.get(self, "hash")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        Specifies the host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> _builtins.str:
        """
        Specifies the host IP address.
        """
        return pulumi.get(self, "host_ip")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the auto launch item name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The path of the auto launch item.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="recentScanTime")
    def recent_scan_time(self) -> _builtins.int:
        """
        The latest scan time.
        """
        return pulumi.get(self, "recent_scan_time")

    @_builtins.property
    @pulumi.getter(name="runUser")
    def run_user(self) -> _builtins.str:
        """
        The user who starts the execution.
        """
        return pulumi.get(self, "run_user")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.int:
        """
        Specifies the auto launch item type.
        The valid values are as follows:
        + **0**: Auto launch service.
        + **1**: Scheduled task.
        + **2**: Preloaded dynamic library.
        + **3**: Run registry key.
        + **4**: Startup folder.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBackupPolicyOperationDefinitionResult(dict):
    def __init__(__self__, *,
                 day_backups: _builtins.int,
                 max_backups: _builtins.int,
                 month_backups: _builtins.int,
                 retention_duration_days: _builtins.int,
                 timezone: _builtins.str,
                 week_backups: _builtins.int,
                 year_backups: _builtins.int):
        """
        :param _builtins.int day_backups: The maximum number of daily backups that can be retained.
        :param _builtins.int max_backups: The maximum number of backups that can be automatically created for a backup object.
               If the value is `-1`, backups will not be cleared by quantity limit. If this parameter and `retention_duration_days`
               are left blank at the same time, the backups will be retained permanently. Minimum value: `1`. Maximum value: `99999`.
               Default value: `-1`.
        :param _builtins.int month_backups: The maximum number of monthly backups that can be retained.
        :param _builtins.int retention_duration_days: The duration of retaining a backup, in days. The maximum value is 99999. If the value is
               `-1`, backups will not be cleared by retention duration. If this parameter and `max_backups` are left blank at the
               same time, the backups will be retained permanently.
        :param _builtins.str timezone: The time zone where the user is located. For example, **UTC+08:00**.
        :param _builtins.int week_backups: The maximum number of weekly backups that can be retained.
        :param _builtins.int year_backups: The maximum number of yearly backups that can be retained.
        """
        pulumi.set(__self__, "day_backups", day_backups)
        pulumi.set(__self__, "max_backups", max_backups)
        pulumi.set(__self__, "month_backups", month_backups)
        pulumi.set(__self__, "retention_duration_days", retention_duration_days)
        pulumi.set(__self__, "timezone", timezone)
        pulumi.set(__self__, "week_backups", week_backups)
        pulumi.set(__self__, "year_backups", year_backups)

    @_builtins.property
    @pulumi.getter(name="dayBackups")
    def day_backups(self) -> _builtins.int:
        """
        The maximum number of daily backups that can be retained.
        """
        return pulumi.get(self, "day_backups")

    @_builtins.property
    @pulumi.getter(name="maxBackups")
    def max_backups(self) -> _builtins.int:
        """
        The maximum number of backups that can be automatically created for a backup object.
        If the value is `-1`, backups will not be cleared by quantity limit. If this parameter and `retention_duration_days`
        are left blank at the same time, the backups will be retained permanently. Minimum value: `1`. Maximum value: `99999`.
        Default value: `-1`.
        """
        return pulumi.get(self, "max_backups")

    @_builtins.property
    @pulumi.getter(name="monthBackups")
    def month_backups(self) -> _builtins.int:
        """
        The maximum number of monthly backups that can be retained.
        """
        return pulumi.get(self, "month_backups")

    @_builtins.property
    @pulumi.getter(name="retentionDurationDays")
    def retention_duration_days(self) -> _builtins.int:
        """
        The duration of retaining a backup, in days. The maximum value is 99999. If the value is
        `-1`, backups will not be cleared by retention duration. If this parameter and `max_backups` are left blank at the
        same time, the backups will be retained permanently.
        """
        return pulumi.get(self, "retention_duration_days")

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> _builtins.str:
        """
        The time zone where the user is located. For example, **UTC+08:00**.
        """
        return pulumi.get(self, "timezone")

    @_builtins.property
    @pulumi.getter(name="weekBackups")
    def week_backups(self) -> _builtins.int:
        """
        The maximum number of weekly backups that can be retained.
        """
        return pulumi.get(self, "week_backups")

    @_builtins.property
    @pulumi.getter(name="yearBackups")
    def year_backups(self) -> _builtins.int:
        """
        The maximum number of yearly backups that can be retained.
        """
        return pulumi.get(self, "year_backups")


@pulumi.output_type
class GetBackupPolicyTriggerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 properties: Sequence['outputs.GetBackupPolicyTriggerPropertyResult'],
                 type: _builtins.str):
        """
        :param _builtins.str id: The scheduler ID.
        :param _builtins.str name: The scheduler name.
        :param Sequence['GetBackupPolicyTriggerPropertyArgs'] properties: The scheduler attribute.
               The properties structure is documented below.
        :param _builtins.str type: The scheduler type. Currently, only **time** is supported.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The scheduler ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The scheduler name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetBackupPolicyTriggerPropertyResult']:
        """
        The scheduler attribute.
        The properties structure is documented below.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The scheduler type. Currently, only **time** is supported.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBackupPolicyTriggerPropertyResult(dict):
    def __init__(__self__, *,
                 patterns: Sequence[_builtins.str],
                 start_time: _builtins.str):
        """
        :param Sequence[_builtins.str] patterns: The scheduling policy. The value contains a maximum of `10,240` characters and complies with iCalendar RFC
               `2445`. However, only FREQ, BYDAY, BYHOUR, and BYMINUTE are supported. FREQ can be set to only WEEKLY or DAILY. BYDAY
               can be set to the seven days in a week (MO, TU, WE, TH, FR, SA and SU). BYHOUR can be set to `0` to `23` hours. BYMINUTE
               can be set to `0` to `59` minutes. The interval between time points cannot be less than one hour. Multiple backup time
               points can be set in a backup policy, and up to `24` time points can be set for a day.
        :param _builtins.str start_time: The scheduler start time. Example: **2020-01-08 09:59:49**.
        """
        pulumi.set(__self__, "patterns", patterns)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter
    def patterns(self) -> Sequence[_builtins.str]:
        """
        The scheduling policy. The value contains a maximum of `10,240` characters and complies with iCalendar RFC
        `2445`. However, only FREQ, BYDAY, BYHOUR, and BYMINUTE are supported. FREQ can be set to only WEEKLY or DAILY. BYDAY
        can be set to the seven days in a week (MO, TU, WE, TH, FR, SA and SU). BYHOUR can be set to `0` to `23` hours. BYMINUTE
        can be set to `0` to `59` minutes. The interval between time points cannot be less than one hour. Multiple backup time
        points can be set in a backup policy, and up to `24` time points can be set for a day.
        """
        return pulumi.get(self, "patterns")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        The scheduler start time. Example: **2020-01-08 09:59:49**.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetContainerKubernetesClustersClusterInfoListResult(dict):
    def __init__(__self__, *,
                 active_nodes_number: _builtins.int,
                 agent_ds_failed_reason: _builtins.str,
                 agent_ds_install_status: _builtins.str,
                 agent_install_failed_num: _builtins.int,
                 agent_installed_num: _builtins.int,
                 agent_not_install_num: _builtins.int,
                 app_vul_num: _builtins.int,
                 cluster_id: _builtins.str,
                 cluster_name: _builtins.str,
                 cluster_type: _builtins.str,
                 creation_timestamp: _builtins.int,
                 emg_vul_num: _builtins.int,
                 id: _builtins.str,
                 last_operate_timestamp: _builtins.int,
                 last_scan_time: _builtins.int,
                 risk_assess_num: _builtins.int,
                 sec_comp_num: _builtins.int,
                 status: _builtins.str,
                 sys_vul_num: _builtins.int,
                 total_nodes_number: _builtins.int,
                 version: _builtins.str):
        """
        :param _builtins.int active_nodes_number: The normal number of nodes.
        :param _builtins.str agent_ds_failed_reason: The reason for operation failure.
        :param _builtins.str agent_ds_install_status: The installation status of agent ds in the cluster. When associating agent related
               information, it is necessary to also consider the `last_operate_time` time.
               The valid values are as follows:
               + **NotInstall**
               + **Installed**
        :param _builtins.int agent_install_failed_num: The number of failed installation nodes in the cluster.
        :param _builtins.int agent_installed_num: The number of installed agent nodes in the cluster.
        :param _builtins.int agent_not_install_num: The number of nodes without agent installed in the cluster.
        :param _builtins.int app_vul_num: The number of application vulnerabilities in the cluster.
        :param _builtins.str cluster_id: The cluster ID.
        :param _builtins.str cluster_name: Specifies the cluster name.
        :param _builtins.str cluster_type: The cluster type.
        :param _builtins.int creation_timestamp: Create timestamp.
        :param _builtins.int emg_vul_num: The number of emergency vulnerabilities in the cluster.
        :param _builtins.str id: The ID.
        :param _builtins.int last_operate_timestamp: The latest operation timestamp, daemon script installation operation time, when the agent
               is still being installed within a `10` minutes interval.
        :param _builtins.int last_scan_time: The latest scan timestamp of the cluster.
        :param _builtins.int risk_assess_num: The number of risk assessment questions in the cluster.
        :param _builtins.int sec_comp_num: The number of security and compliance issues in the cluster.
        :param _builtins.str status: The cluster status.  
               The valid values are as follows:
               + **Available**: Indicating that the cluster is in a normal state.
               + **Unavailable**: Indicating cluster anomaly, manual deletion is required or contact the administrator for deletion.
               + **ScalingUp**: Indicating that the cluster is currently undergoing expansion.
               + **ScalingDown**: Indicating that the cluster is currently undergoing capacity reduction.
               + **Creating**: Indicating that the cluster is currently in the process of being created.
               + **Deleting**: Indicating that the cluster is in the process of being deleted.
               + **Upgrading**: Indicating that the cluster is currently undergoing an upgrade process.
               + **Resizing**: The cluster is currently undergoing specification changes.
               + **RollingBack**: Indicating that the cluster is currently in the process of rolling back.
               + **RollbackFailed**: Indicating a cluster rollback exception, please contact the administrator for a rollback retry.
               + **Empty**: The cluster has no resources.
        :param _builtins.int sys_vul_num: The number of system vulnerabilities in the cluster.
        :param _builtins.int total_nodes_number: The total number of nodes.
        :param _builtins.str version: The cluster version.
        """
        pulumi.set(__self__, "active_nodes_number", active_nodes_number)
        pulumi.set(__self__, "agent_ds_failed_reason", agent_ds_failed_reason)
        pulumi.set(__self__, "agent_ds_install_status", agent_ds_install_status)
        pulumi.set(__self__, "agent_install_failed_num", agent_install_failed_num)
        pulumi.set(__self__, "agent_installed_num", agent_installed_num)
        pulumi.set(__self__, "agent_not_install_num", agent_not_install_num)
        pulumi.set(__self__, "app_vul_num", app_vul_num)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "emg_vul_num", emg_vul_num)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_operate_timestamp", last_operate_timestamp)
        pulumi.set(__self__, "last_scan_time", last_scan_time)
        pulumi.set(__self__, "risk_assess_num", risk_assess_num)
        pulumi.set(__self__, "sec_comp_num", sec_comp_num)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sys_vul_num", sys_vul_num)
        pulumi.set(__self__, "total_nodes_number", total_nodes_number)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="activeNodesNumber")
    def active_nodes_number(self) -> _builtins.int:
        """
        The normal number of nodes.
        """
        return pulumi.get(self, "active_nodes_number")

    @_builtins.property
    @pulumi.getter(name="agentDsFailedReason")
    def agent_ds_failed_reason(self) -> _builtins.str:
        """
        The reason for operation failure.
        """
        return pulumi.get(self, "agent_ds_failed_reason")

    @_builtins.property
    @pulumi.getter(name="agentDsInstallStatus")
    def agent_ds_install_status(self) -> _builtins.str:
        """
        The installation status of agent ds in the cluster. When associating agent related
        information, it is necessary to also consider the `last_operate_time` time.
        The valid values are as follows:
        + **NotInstall**
        + **Installed**
        """
        return pulumi.get(self, "agent_ds_install_status")

    @_builtins.property
    @pulumi.getter(name="agentInstallFailedNum")
    def agent_install_failed_num(self) -> _builtins.int:
        """
        The number of failed installation nodes in the cluster.
        """
        return pulumi.get(self, "agent_install_failed_num")

    @_builtins.property
    @pulumi.getter(name="agentInstalledNum")
    def agent_installed_num(self) -> _builtins.int:
        """
        The number of installed agent nodes in the cluster.
        """
        return pulumi.get(self, "agent_installed_num")

    @_builtins.property
    @pulumi.getter(name="agentNotInstallNum")
    def agent_not_install_num(self) -> _builtins.int:
        """
        The number of nodes without agent installed in the cluster.
        """
        return pulumi.get(self, "agent_not_install_num")

    @_builtins.property
    @pulumi.getter(name="appVulNum")
    def app_vul_num(self) -> _builtins.int:
        """
        The number of application vulnerabilities in the cluster.
        """
        return pulumi.get(self, "app_vul_num")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        The cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        Specifies the cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> _builtins.str:
        """
        The cluster type.
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.int:
        """
        Create timestamp.
        """
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter(name="emgVulNum")
    def emg_vul_num(self) -> _builtins.int:
        """
        The number of emergency vulnerabilities in the cluster.
        """
        return pulumi.get(self, "emg_vul_num")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastOperateTimestamp")
    def last_operate_timestamp(self) -> _builtins.int:
        """
        The latest operation timestamp, daemon script installation operation time, when the agent
        is still being installed within a `10` minutes interval.
        """
        return pulumi.get(self, "last_operate_timestamp")

    @_builtins.property
    @pulumi.getter(name="lastScanTime")
    def last_scan_time(self) -> _builtins.int:
        """
        The latest scan timestamp of the cluster.
        """
        return pulumi.get(self, "last_scan_time")

    @_builtins.property
    @pulumi.getter(name="riskAssessNum")
    def risk_assess_num(self) -> _builtins.int:
        """
        The number of risk assessment questions in the cluster.
        """
        return pulumi.get(self, "risk_assess_num")

    @_builtins.property
    @pulumi.getter(name="secCompNum")
    def sec_comp_num(self) -> _builtins.int:
        """
        The number of security and compliance issues in the cluster.
        """
        return pulumi.get(self, "sec_comp_num")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The cluster status.  
        The valid values are as follows:
        + **Available**: Indicating that the cluster is in a normal state.
        + **Unavailable**: Indicating cluster anomaly, manual deletion is required or contact the administrator for deletion.
        + **ScalingUp**: Indicating that the cluster is currently undergoing expansion.
        + **ScalingDown**: Indicating that the cluster is currently undergoing capacity reduction.
        + **Creating**: Indicating that the cluster is currently in the process of being created.
        + **Deleting**: Indicating that the cluster is in the process of being deleted.
        + **Upgrading**: Indicating that the cluster is currently undergoing an upgrade process.
        + **Resizing**: The cluster is currently undergoing specification changes.
        + **RollingBack**: Indicating that the cluster is currently in the process of rolling back.
        + **RollbackFailed**: Indicating a cluster rollback exception, please contact the administrator for a rollback retry.
        + **Empty**: The cluster has no resources.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="sysVulNum")
    def sys_vul_num(self) -> _builtins.int:
        """
        The number of system vulnerabilities in the cluster.
        """
        return pulumi.get(self, "sys_vul_num")

    @_builtins.property
    @pulumi.getter(name="totalNodesNumber")
    def total_nodes_number(self) -> _builtins.int:
        """
        The total number of nodes.
        """
        return pulumi.get(self, "total_nodes_number")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The cluster version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetContainerKubernetesClustersConfigsClusterInfoListResult(dict):
    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 cluster_name: _builtins.str):
        """
        :param _builtins.str cluster_id: Specifies the cluster ID.
        :param _builtins.str cluster_name: Specifies the cluster name.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        Specifies the cluster name.
        """
        return pulumi.get(self, "cluster_name")


@pulumi.output_type
class GetContainerKubernetesClustersConfigsDataListResult(dict):
    def __init__(__self__, *,
                 charging_mode: _builtins.str,
                 cluster_id: _builtins.str,
                 cluster_name: _builtins.str,
                 cluster_type: _builtins.str,
                 fail_reason: _builtins.str,
                 node_total_num: _builtins.int,
                 prefer_packet_cycle: _builtins.int,
                 protect_degradation_node_num: _builtins.int,
                 protect_interrupt_node_num: _builtins.int,
                 protect_node_num: _builtins.int,
                 protect_status: _builtins.str,
                 protect_type: _builtins.str,
                 unprotect_node_num: _builtins.int):
        """
        :param _builtins.str charging_mode: The charging mode. The valid values are **on_demand** and **free**.
        :param _builtins.str cluster_id: Specifies the cluster ID.
        :param _builtins.str cluster_name: Specifies the cluster name.
        :param _builtins.str cluster_type: The cluster type.
        :param _builtins.str fail_reason: The failure reason.
        :param _builtins.int node_total_num: The total number of nodes.
        :param _builtins.int prefer_packet_cycle: Whether to prefer packet cycle. The value `0` indicates false, and `1` indicates true.
        :param _builtins.int protect_degradation_node_num: The number of nodes with degraded protection.
        :param _builtins.int protect_interrupt_node_num: The number of nodes with interrupted protection.
        :param _builtins.int protect_node_num: The number of protected nodes.
        :param _builtins.str protect_status: The protection status. The valid values are:
               + **protecting**: Protecting
               + **part_protect**: Partial protection
               + **creating**: Creating
               + **error_protect**: Protection error
               + **unprotect**: Unprotected
               + **wait_protect**: Waiting for protection
        :param _builtins.str protect_type: The protection type.
        :param _builtins.int unprotect_node_num: The number of unprotected nodes.
        """
        pulumi.set(__self__, "charging_mode", charging_mode)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "node_total_num", node_total_num)
        pulumi.set(__self__, "prefer_packet_cycle", prefer_packet_cycle)
        pulumi.set(__self__, "protect_degradation_node_num", protect_degradation_node_num)
        pulumi.set(__self__, "protect_interrupt_node_num", protect_interrupt_node_num)
        pulumi.set(__self__, "protect_node_num", protect_node_num)
        pulumi.set(__self__, "protect_status", protect_status)
        pulumi.set(__self__, "protect_type", protect_type)
        pulumi.set(__self__, "unprotect_node_num", unprotect_node_num)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> _builtins.str:
        """
        The charging mode. The valid values are **on_demand** and **free**.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        Specifies the cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> _builtins.str:
        """
        The cluster type.
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> _builtins.str:
        """
        The failure reason.
        """
        return pulumi.get(self, "fail_reason")

    @_builtins.property
    @pulumi.getter(name="nodeTotalNum")
    def node_total_num(self) -> _builtins.int:
        """
        The total number of nodes.
        """
        return pulumi.get(self, "node_total_num")

    @_builtins.property
    @pulumi.getter(name="preferPacketCycle")
    def prefer_packet_cycle(self) -> _builtins.int:
        """
        Whether to prefer packet cycle. The value `0` indicates false, and `1` indicates true.
        """
        return pulumi.get(self, "prefer_packet_cycle")

    @_builtins.property
    @pulumi.getter(name="protectDegradationNodeNum")
    def protect_degradation_node_num(self) -> _builtins.int:
        """
        The number of nodes with degraded protection.
        """
        return pulumi.get(self, "protect_degradation_node_num")

    @_builtins.property
    @pulumi.getter(name="protectInterruptNodeNum")
    def protect_interrupt_node_num(self) -> _builtins.int:
        """
        The number of nodes with interrupted protection.
        """
        return pulumi.get(self, "protect_interrupt_node_num")

    @_builtins.property
    @pulumi.getter(name="protectNodeNum")
    def protect_node_num(self) -> _builtins.int:
        """
        The number of protected nodes.
        """
        return pulumi.get(self, "protect_node_num")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> _builtins.str:
        """
        The protection status. The valid values are:
        + **protecting**: Protecting
        + **part_protect**: Partial protection
        + **creating**: Creating
        + **error_protect**: Protection error
        + **unprotect**: Unprotected
        + **wait_protect**: Waiting for protection
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter(name="protectType")
    def protect_type(self) -> _builtins.str:
        """
        The protection type.
        """
        return pulumi.get(self, "protect_type")

    @_builtins.property
    @pulumi.getter(name="unprotectNodeNum")
    def unprotect_node_num(self) -> _builtins.int:
        """
        The number of unprotected nodes.
        """
        return pulumi.get(self, "unprotect_node_num")


@pulumi.output_type
class GetContainerKubernetesDataListResult(dict):
    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 cluster_name: _builtins.str,
                 cluster_type: _builtins.str,
                 container_id: _builtins.str,
                 container_name: _builtins.str,
                 cpu_limit: _builtins.str,
                 create_time: _builtins.int,
                 fatal_risk: _builtins.int,
                 high_risk: _builtins.int,
                 id: _builtins.str,
                 image_name: _builtins.str,
                 low_risk: _builtins.int,
                 medium_risk: _builtins.int,
                 memory_limit: _builtins.str,
                 pod_name: _builtins.str,
                 region_id: _builtins.str,
                 restart_count: _builtins.int,
                 risky: _builtins.bool,
                 status: _builtins.str):
        """
        :param _builtins.str cluster_id: The cluster ID.
        :param _builtins.str cluster_name: The cluster name.
        :param _builtins.str cluster_type: The cluster type.  
               The valid values are as follows:
               + **k8s**: Native cluster.
               + **cce**: CCE cluster.
               + **ali**: Alibaba Cloud cluster.
               + **tencent**: Tencent Cloud cluster.
               + **azure**: Microsoft Azure cluster.
               + **aws**: Amazon cluster.
               + **self_built_hw**: Huawei Cloud self-built cluster.
               + **self_built_idc**: IDC self-built cluster.
        :param _builtins.str container_id: The container ID.
        :param _builtins.str container_name: Specifies the container name.
        :param _builtins.str cpu_limit: The CPU limit.
        :param _builtins.int create_time: The creation time of the container.
        :param _builtins.int fatal_risk: The number of fatal-risk vulnerabilities.
        :param _builtins.int high_risk: The number of high-risk vulnerabilities.
        :param _builtins.str id: The ID.
        :param _builtins.str image_name: Specifies the image name.
        :param _builtins.int low_risk: The number of low-risk vulnerabilities.
        :param _builtins.int medium_risk: The number of medium-risk vulnerabilities.
        :param _builtins.str memory_limit: The memory limit.
        :param _builtins.str pod_name: Specifies the pod name.
        :param _builtins.str region_id: The region ID.
        :param _builtins.int restart_count: The number of restarts.
        :param _builtins.bool risky: Whether there is a risk.
        :param _builtins.str status: The container status.  
               The valid values are as follows:
               + **Running**
               + **Terminated**
               + **Waiting**
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "container_id", container_id)
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "cpu_limit", cpu_limit)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "fatal_risk", fatal_risk)
        pulumi.set(__self__, "high_risk", high_risk)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "low_risk", low_risk)
        pulumi.set(__self__, "medium_risk", medium_risk)
        pulumi.set(__self__, "memory_limit", memory_limit)
        pulumi.set(__self__, "pod_name", pod_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "restart_count", restart_count)
        pulumi.set(__self__, "risky", risky)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        The cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        The cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> _builtins.str:
        """
        The cluster type.  
        The valid values are as follows:
        + **k8s**: Native cluster.
        + **cce**: CCE cluster.
        + **ali**: Alibaba Cloud cluster.
        + **tencent**: Tencent Cloud cluster.
        + **azure**: Microsoft Azure cluster.
        + **aws**: Amazon cluster.
        + **self_built_hw**: Huawei Cloud self-built cluster.
        + **self_built_idc**: IDC self-built cluster.
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter(name="containerId")
    def container_id(self) -> _builtins.str:
        """
        The container ID.
        """
        return pulumi.get(self, "container_id")

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> _builtins.str:
        """
        Specifies the container name.
        """
        return pulumi.get(self, "container_name")

    @_builtins.property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> _builtins.str:
        """
        The CPU limit.
        """
        return pulumi.get(self, "cpu_limit")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.int:
        """
        The creation time of the container.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="fatalRisk")
    def fatal_risk(self) -> _builtins.int:
        """
        The number of fatal-risk vulnerabilities.
        """
        return pulumi.get(self, "fatal_risk")

    @_builtins.property
    @pulumi.getter(name="highRisk")
    def high_risk(self) -> _builtins.int:
        """
        The number of high-risk vulnerabilities.
        """
        return pulumi.get(self, "high_risk")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> _builtins.str:
        """
        Specifies the image name.
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="lowRisk")
    def low_risk(self) -> _builtins.int:
        """
        The number of low-risk vulnerabilities.
        """
        return pulumi.get(self, "low_risk")

    @_builtins.property
    @pulumi.getter(name="mediumRisk")
    def medium_risk(self) -> _builtins.int:
        """
        The number of medium-risk vulnerabilities.
        """
        return pulumi.get(self, "medium_risk")

    @_builtins.property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> _builtins.str:
        """
        The memory limit.
        """
        return pulumi.get(self, "memory_limit")

    @_builtins.property
    @pulumi.getter(name="podName")
    def pod_name(self) -> _builtins.str:
        """
        Specifies the pod name.
        """
        return pulumi.get(self, "pod_name")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="restartCount")
    def restart_count(self) -> _builtins.int:
        """
        The number of restarts.
        """
        return pulumi.get(self, "restart_count")

    @_builtins.property
    @pulumi.getter
    def risky(self) -> _builtins.bool:
        """
        Whether there is a risk.
        """
        return pulumi.get(self, "risky")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The container status.  
        The valid values are as follows:
        + **Running**
        + **Terminated**
        + **Waiting**
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetContainerKubernetesEndpointDetailEndpointPodListResult(dict):
    def __init__(__self__, *,
                 available: _builtins.bool,
                 endpoint_id: _builtins.str,
                 id: _builtins.str,
                 pod_ip: _builtins.str,
                 pod_name: _builtins.str):
        """
        :param _builtins.bool available: Is it available.
        :param _builtins.str endpoint_id: Specifies the endpoint ID.
        :param _builtins.str id: The ID.
        :param _builtins.str pod_ip: The pod ip.
        :param _builtins.str pod_name: The pod name.
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "pod_ip", pod_ip)
        pulumi.set(__self__, "pod_name", pod_name)

    @_builtins.property
    @pulumi.getter
    def available(self) -> _builtins.bool:
        """
        Is it available.
        """
        return pulumi.get(self, "available")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> _builtins.str:
        """
        Specifies the endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="podIp")
    def pod_ip(self) -> _builtins.str:
        """
        The pod ip.
        """
        return pulumi.get(self, "pod_ip")

    @_builtins.property
    @pulumi.getter(name="podName")
    def pod_name(self) -> _builtins.str:
        """
        The pod name.
        """
        return pulumi.get(self, "pod_name")


@pulumi.output_type
class GetContainerKubernetesEndpointDetailEndpointPortListResult(dict):
    def __init__(__self__, *,
                 app_protocol: _builtins.str,
                 endpoint_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 port: _builtins.int,
                 protocol: _builtins.str):
        """
        :param _builtins.str app_protocol: The application protocol.
        :param _builtins.str endpoint_id: Specifies the endpoint ID.
        :param _builtins.str id: The ID.
        :param _builtins.str name: The port name.
        :param _builtins.int port: The port number.
        :param _builtins.str protocol: The service agreement.
        """
        pulumi.set(__self__, "app_protocol", app_protocol)
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> _builtins.str:
        """
        The application protocol.
        """
        return pulumi.get(self, "app_protocol")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> _builtins.str:
        """
        Specifies the endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The port name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port number.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The service agreement.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetContainerKubernetesEndpointsEndpointInfoListResult(dict):
    def __init__(__self__, *,
                 association_service: _builtins.bool,
                 cluster_name: _builtins.str,
                 cluster_type: _builtins.str,
                 creation_timestamp: _builtins.int,
                 id: _builtins.str,
                 name: _builtins.str,
                 namespace: _builtins.str,
                 service_name: _builtins.str):
        """
        :param _builtins.bool association_service: Is it associated with a service.
        :param _builtins.str cluster_name: Specifies the cluster name.
        :param _builtins.str cluster_type: The cluster type.  
               The valid values are as follows:
               + **k8s**: Native cluster.
               + **cce**: CCE cluster.
               + **ali**: Alibaba cloud cluster.
               + **tencent**: Tencent cloud cluster.
               + **azure**: Microsoft cloud cluster.
               + **aws**: Amazon cluster.
               + **self_built_hw**: HuaweiCloud self built cluster.
               + **self_built_idc**: IDC self built cluster.
        :param _builtins.int creation_timestamp: Create timestamp.
        :param _builtins.str id: The ID.
        :param _builtins.str name: Specifies the endpoint name.
        :param _builtins.str namespace: Specifies the namespace.
        :param _builtins.str service_name: The service name.
        """
        pulumi.set(__self__, "association_service", association_service)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "service_name", service_name)

    @_builtins.property
    @pulumi.getter(name="associationService")
    def association_service(self) -> _builtins.bool:
        """
        Is it associated with a service.
        """
        return pulumi.get(self, "association_service")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        Specifies the cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> _builtins.str:
        """
        The cluster type.  
        The valid values are as follows:
        + **k8s**: Native cluster.
        + **cce**: CCE cluster.
        + **ali**: Alibaba cloud cluster.
        + **tencent**: Tencent cloud cluster.
        + **azure**: Microsoft cloud cluster.
        + **aws**: Amazon cluster.
        + **self_built_hw**: HuaweiCloud self built cluster.
        + **self_built_idc**: IDC self built cluster.
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.int:
        """
        Create timestamp.
        """
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the endpoint name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The service name.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetContainerNodesDataListResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 agent_status: _builtins.str,
                 asset: _builtins.int,
                 container_tags: _builtins.str,
                 degradation_reason: _builtins.str,
                 detect_result: _builtins.str,
                 enterprise_project_name: _builtins.str,
                 group_name: _builtins.str,
                 host_id: _builtins.str,
                 host_name: _builtins.str,
                 host_status: _builtins.str,
                 intrusion: _builtins.int,
                 policy_group_id: _builtins.str,
                 policy_group_name: _builtins.str,
                 private_ip: _builtins.str,
                 protect_degradation: _builtins.bool,
                 protect_interrupt: _builtins.bool,
                 protect_status: _builtins.str,
                 public_ip: _builtins.str,
                 resource_id: _builtins.str,
                 vulnerability: _builtins.int):
        """
        :param _builtins.str agent_id: The agent ID.
        :param _builtins.str agent_status: Specifies the agent status.  
               The valid values are as follows:
               + **not_installed**
               + **online**
               + **offline**
        :param _builtins.int asset: The asset risk.
        :param _builtins.str container_tags: Specifies the label used to identify CCE container nodes or self built nodes.  
               The valid values are as follows:
               + **cce**: CCE nodes.
               + **self**: Self built nodes.
               + **other**: Other nodes.
        :param _builtins.str degradation_reason: The reasons for downgraded protection.
        :param _builtins.str detect_result: The host security detection results.  
               The valid values are as follows:
               + **undetected**: Not detected.
               + **clean**: No Risk.
               + **risk**: At risk.
               + **scanning**: Detecting.
        :param _builtins.str enterprise_project_name: The enterprise project name.
        :param _builtins.str group_name: The host group name.
        :param _builtins.str host_id: The host ID.
        :param _builtins.str host_name: Specifies the host name.
        :param _builtins.str host_status: The host status.  
               The valid values are as follows:
               + **ACTIVE**
               + **SHUTOFF**
               + **BUILDING**
               + **ERROR**
        :param _builtins.int intrusion: The intrusion risk.
        :param _builtins.str policy_group_id: The policy group ID.
        :param _builtins.str policy_group_name: The policy group name.
        :param _builtins.str private_ip: The private ip address.
        :param _builtins.bool protect_degradation: Has the protection been downgraded.
        :param _builtins.bool protect_interrupt: Is the protection interrupted.
        :param _builtins.str protect_status: Specifies the protection status.  
               The valid values are as follows:
               + **closed**
               + **opened**
        :param _builtins.str public_ip: The elastic public IP address.
        :param _builtins.str resource_id: The host security quota ID (UUID).
        :param _builtins.int vulnerability: The vulnerability risk.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "agent_status", agent_status)
        pulumi.set(__self__, "asset", asset)
        pulumi.set(__self__, "container_tags", container_tags)
        pulumi.set(__self__, "degradation_reason", degradation_reason)
        pulumi.set(__self__, "detect_result", detect_result)
        pulumi.set(__self__, "enterprise_project_name", enterprise_project_name)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "host_status", host_status)
        pulumi.set(__self__, "intrusion", intrusion)
        pulumi.set(__self__, "policy_group_id", policy_group_id)
        pulumi.set(__self__, "policy_group_name", policy_group_name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "protect_degradation", protect_degradation)
        pulumi.set(__self__, "protect_interrupt", protect_interrupt)
        pulumi.set(__self__, "protect_status", protect_status)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "vulnerability", vulnerability)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        The agent ID.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="agentStatus")
    def agent_status(self) -> _builtins.str:
        """
        Specifies the agent status.  
        The valid values are as follows:
        + **not_installed**
        + **online**
        + **offline**
        """
        return pulumi.get(self, "agent_status")

    @_builtins.property
    @pulumi.getter
    def asset(self) -> _builtins.int:
        """
        The asset risk.
        """
        return pulumi.get(self, "asset")

    @_builtins.property
    @pulumi.getter(name="containerTags")
    def container_tags(self) -> _builtins.str:
        """
        Specifies the label used to identify CCE container nodes or self built nodes.  
        The valid values are as follows:
        + **cce**: CCE nodes.
        + **self**: Self built nodes.
        + **other**: Other nodes.
        """
        return pulumi.get(self, "container_tags")

    @_builtins.property
    @pulumi.getter(name="degradationReason")
    def degradation_reason(self) -> _builtins.str:
        """
        The reasons for downgraded protection.
        """
        return pulumi.get(self, "degradation_reason")

    @_builtins.property
    @pulumi.getter(name="detectResult")
    def detect_result(self) -> _builtins.str:
        """
        The host security detection results.  
        The valid values are as follows:
        + **undetected**: Not detected.
        + **clean**: No Risk.
        + **risk**: At risk.
        + **scanning**: Detecting.
        """
        return pulumi.get(self, "detect_result")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> _builtins.str:
        """
        The enterprise project name.
        """
        return pulumi.get(self, "enterprise_project_name")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        The host group name.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        The host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="hostStatus")
    def host_status(self) -> _builtins.str:
        """
        The host status.  
        The valid values are as follows:
        + **ACTIVE**
        + **SHUTOFF**
        + **BUILDING**
        + **ERROR**
        """
        return pulumi.get(self, "host_status")

    @_builtins.property
    @pulumi.getter
    def intrusion(self) -> _builtins.int:
        """
        The intrusion risk.
        """
        return pulumi.get(self, "intrusion")

    @_builtins.property
    @pulumi.getter(name="policyGroupId")
    def policy_group_id(self) -> _builtins.str:
        """
        The policy group ID.
        """
        return pulumi.get(self, "policy_group_id")

    @_builtins.property
    @pulumi.getter(name="policyGroupName")
    def policy_group_name(self) -> _builtins.str:
        """
        The policy group name.
        """
        return pulumi.get(self, "policy_group_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The private ip address.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="protectDegradation")
    def protect_degradation(self) -> _builtins.bool:
        """
        Has the protection been downgraded.
        """
        return pulumi.get(self, "protect_degradation")

    @_builtins.property
    @pulumi.getter(name="protectInterrupt")
    def protect_interrupt(self) -> _builtins.bool:
        """
        Is the protection interrupted.
        """
        return pulumi.get(self, "protect_interrupt")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> _builtins.str:
        """
        Specifies the protection status.  
        The valid values are as follows:
        + **closed**
        + **opened**
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The elastic public IP address.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The host security quota ID (UUID).
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def vulnerability(self) -> _builtins.int:
        """
        The vulnerability risk.
        """
        return pulumi.get(self, "vulnerability")


@pulumi.output_type
class GetEventAlarmWhiteListsDataListResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 enterprise_project_name: _builtins.str,
                 event_type: _builtins.int,
                 field_value: _builtins.str,
                 hash: _builtins.str,
                 judge_type: _builtins.str,
                 update_time: _builtins.int,
                 white_field: _builtins.str):
        """
        :param _builtins.str description: The description.
        :param _builtins.str enterprise_project_name: The enterprise project name.
        :param _builtins.int event_type: Specifies the event type.  
               The valid values are as follows:
               + **1001**: General malware.
               + **1002**: Virus.
               + **1003**: Worm.
               + **1004**: Trojan.
               + **1005**: Botnet.
               + **1006**: Backdoor.
               + **1010**: Rootkit.
               + **1011**: Ransomware.
               + **1012**: Hacker tool.
               + **1015**: Webshell.
               + **1016**: Mining.
               + **1017**: Reverse Shell.
               + **2001**: General vulnerability exploitation.
               + **2012**: Remote code execution.
               + **2047**: Redis vulnerability exploitation.
               + **2048**: Hadoop vulnerability exploitation.
               + **2049**: MySQL vulnerability exploitation.
               + **3002**: File privilege escalation.
               + **3003**: Process privilege escalation.
               + **3004**: Key file change.
               + **3005**: File/directory change.
               + **3007**: Process abnormal behavior.
               + **3015**: High-risk command execution.
               + **3018**: Abnormal Shell.
               + **3027**: Crontab suspicious task.
               + **3029**: System security protection disabled.
               + **3030**: Backup deletion.
               + **3031**: Abnormal registry operation.
               + **3036**: Container image blocking.
               + **4002**: Brute force cracking.
               + **4004**: Abnormal login.
               + **4006**: Illegal system account.
               + **4014**: User account addition.
               + **4020**: User password theft.
               + **6002**: Port scanning.
               + **6003**: Host scanning.
               + **13001**: Kubernetes event deletion.
               + **13002**: Pod abnormal behavior.
               + **13003**: Enumerate user information.
               + **13004**: Bind cluster user role.
        :param _builtins.str field_value: The field value.
        :param _builtins.str hash: Specifies the event white list SHA256.
        :param _builtins.str judge_type: The judge type.  
               The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        :param _builtins.int update_time: The update time in milliseconds.
        :param _builtins.str white_field: The white field.  
               The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_name", enterprise_project_name)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "field_value", field_value)
        pulumi.set(__self__, "hash", hash)
        pulumi.set(__self__, "judge_type", judge_type)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "white_field", white_field)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> _builtins.str:
        """
        The enterprise project name.
        """
        return pulumi.get(self, "enterprise_project_name")

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> _builtins.int:
        """
        Specifies the event type.  
        The valid values are as follows:
        + **1001**: General malware.
        + **1002**: Virus.
        + **1003**: Worm.
        + **1004**: Trojan.
        + **1005**: Botnet.
        + **1006**: Backdoor.
        + **1010**: Rootkit.
        + **1011**: Ransomware.
        + **1012**: Hacker tool.
        + **1015**: Webshell.
        + **1016**: Mining.
        + **1017**: Reverse Shell.
        + **2001**: General vulnerability exploitation.
        + **2012**: Remote code execution.
        + **2047**: Redis vulnerability exploitation.
        + **2048**: Hadoop vulnerability exploitation.
        + **2049**: MySQL vulnerability exploitation.
        + **3002**: File privilege escalation.
        + **3003**: Process privilege escalation.
        + **3004**: Key file change.
        + **3005**: File/directory change.
        + **3007**: Process abnormal behavior.
        + **3015**: High-risk command execution.
        + **3018**: Abnormal Shell.
        + **3027**: Crontab suspicious task.
        + **3029**: System security protection disabled.
        + **3030**: Backup deletion.
        + **3031**: Abnormal registry operation.
        + **3036**: Container image blocking.
        + **4002**: Brute force cracking.
        + **4004**: Abnormal login.
        + **4006**: Illegal system account.
        + **4014**: User account addition.
        + **4020**: User password theft.
        + **6002**: Port scanning.
        + **6003**: Host scanning.
        + **13001**: Kubernetes event deletion.
        + **13002**: Pod abnormal behavior.
        + **13003**: Enumerate user information.
        + **13004**: Bind cluster user role.
        """
        return pulumi.get(self, "event_type")

    @_builtins.property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> _builtins.str:
        """
        The field value.
        """
        return pulumi.get(self, "field_value")

    @_builtins.property
    @pulumi.getter
    def hash(self) -> _builtins.str:
        """
        Specifies the event white list SHA256.
        """
        return pulumi.get(self, "hash")

    @_builtins.property
    @pulumi.getter(name="judgeType")
    def judge_type(self) -> _builtins.str:
        """
        The judge type.  
        The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        """
        return pulumi.get(self, "judge_type")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.int:
        """
        The update time in milliseconds.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="whiteField")
    def white_field(self) -> _builtins.str:
        """
        The white field.  
        The valid values for this field, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-hss2.0/ListAlarmWhiteList.html).
        """
        return pulumi.get(self, "white_field")


@pulumi.output_type
class GetEventHandleHistoryDataListResult(dict):
    def __init__(__self__, *,
                 asset_value: _builtins.str,
                 attack_tag: _builtins.str,
                 event_abstract: _builtins.str,
                 event_class_id: _builtins.str,
                 event_name: _builtins.str,
                 event_type: _builtins.int,
                 handle_status: _builtins.str,
                 handle_time: _builtins.int,
                 host_name: _builtins.str,
                 notes: _builtins.str,
                 occur_time: _builtins.int,
                 operate_type: _builtins.str,
                 private_ip: _builtins.str,
                 public_ip: _builtins.str,
                 severity: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str asset_value: Specifies the asset importance.
               The valid values are as follows:
               + **important**
               + **common**
               + **test**
        :param _builtins.str attack_tag: Specifies the attack flag.
               The valid values are as follows:
               + **attack_success**: Indicates attack success.
               + **attack_attempt**: Indicates attack attempt.
               + **attack_blocked**: Indicated blocked attack.
               + **abnormal_behavior**: Indicates abnormal behavior.
               + **collapsible_host**: Indicates compromised host.
               + **system_vulnerability**: Indicates system vulnerability.
        :param _builtins.str event_abstract: The event summary.
        :param _builtins.str event_class_id: The event category.
        :param _builtins.str event_name: Specifies the alarm name. Supports fuzzy match.
        :param _builtins.int event_type: Specifies the event type.
               The valid values are as follows:
               + **1001**: Common malware.
               + **1002**: Virus.
               + **1003**: Worm.
               + **1004**: Trojan.
               + **1005**: Botnet.
               + **1006**: Backdoor.
               + **1010**: Rootkit.
               + **1011**: Ransomware.
               + **1012**: Hacker tool.
               + **1015**: Web shell.
               + **1016**: Mining.
               + **1017**: Reverse shell.
               + **2001**: Common vulnerability exploit.
               + **2012**: Remote code execution.
               + **2047**: Redis vulnerability exploit.
               + **2048**: Hadoop vulnerability exploit.
               + **2049**: MySQL vulnerability exploit.
               + **3002**: File privilege escalation.
               + **3003**: Process privilege escalation.
               + **3004**: Critical file change.
               + **3005**: File/directory change.
               + **3007**: Abnormal process behavior.
               + **3015**: High-risk command execution.
               + **3018**: Abnormal shell.
               + **3027**: Suspicious crontab task.
               + **3029**: System protection disabled.
               + **3030**: Backup deletion.
               + **3031**: Suspicious registry operations.
               + **3036**: Container image blocking.
               + **4002**: Brute-force attack.
               + **4004**: Abnormal login.
               + **4006**: Invalid accounts.
               + **4014**: Account added.
               + **4020**: Password theft.
               + **6002**: Port scan.
               + **6003**: Server scan.
               + **13001**: Kubernetes event deletion.
               + **13002**: Abnormal pod behavior.
               + **13003**: Enumerating user information.
               + **13004**: Cluster role binding.
        :param _builtins.str handle_status: Specifies the handling status.
               The valid values are as follows:
               + **unhandled**
               + **handled**
        :param _builtins.int handle_time: The handling time.
        :param _builtins.str host_name: Specifies the host name.
        :param _builtins.str notes: The remarke.
        :param _builtins.int occur_time: The event occurrence time.
        :param _builtins.str operate_type: The handling method.
               The valid values are as follows:
               + **mark_as_handled**
               + **ignore**
               + **add_to_alarm_whitelist**
               + **add_to_login_whitelist**
               + **isolate_and_kill**
               + **unhandle**
               + **do_not_ignore**
               + **remove_from_alarm_whitelist**
               + **remove_from_login_whitelist**
               + **do_not_isolate_or_kill**
        :param _builtins.str private_ip: Specifies the host private IP address.
        :param _builtins.str public_ip: Specifies the host EIP.
        :param _builtins.str severity: Specifies the threat level.
               The valid values are as follows:
               + **Security**
               + **Low**
               + **Medium**
               + **High**
               + **Critical**
        :param _builtins.str user_name: The user name.
        """
        pulumi.set(__self__, "asset_value", asset_value)
        pulumi.set(__self__, "attack_tag", attack_tag)
        pulumi.set(__self__, "event_abstract", event_abstract)
        pulumi.set(__self__, "event_class_id", event_class_id)
        pulumi.set(__self__, "event_name", event_name)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "handle_status", handle_status)
        pulumi.set(__self__, "handle_time", handle_time)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "occur_time", occur_time)
        pulumi.set(__self__, "operate_type", operate_type)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="assetValue")
    def asset_value(self) -> _builtins.str:
        """
        Specifies the asset importance.
        The valid values are as follows:
        + **important**
        + **common**
        + **test**
        """
        return pulumi.get(self, "asset_value")

    @_builtins.property
    @pulumi.getter(name="attackTag")
    def attack_tag(self) -> _builtins.str:
        """
        Specifies the attack flag.
        The valid values are as follows:
        + **attack_success**: Indicates attack success.
        + **attack_attempt**: Indicates attack attempt.
        + **attack_blocked**: Indicated blocked attack.
        + **abnormal_behavior**: Indicates abnormal behavior.
        + **collapsible_host**: Indicates compromised host.
        + **system_vulnerability**: Indicates system vulnerability.
        """
        return pulumi.get(self, "attack_tag")

    @_builtins.property
    @pulumi.getter(name="eventAbstract")
    def event_abstract(self) -> _builtins.str:
        """
        The event summary.
        """
        return pulumi.get(self, "event_abstract")

    @_builtins.property
    @pulumi.getter(name="eventClassId")
    def event_class_id(self) -> _builtins.str:
        """
        The event category.
        """
        return pulumi.get(self, "event_class_id")

    @_builtins.property
    @pulumi.getter(name="eventName")
    def event_name(self) -> _builtins.str:
        """
        Specifies the alarm name. Supports fuzzy match.
        """
        return pulumi.get(self, "event_name")

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> _builtins.int:
        """
        Specifies the event type.
        The valid values are as follows:
        + **1001**: Common malware.
        + **1002**: Virus.
        + **1003**: Worm.
        + **1004**: Trojan.
        + **1005**: Botnet.
        + **1006**: Backdoor.
        + **1010**: Rootkit.
        + **1011**: Ransomware.
        + **1012**: Hacker tool.
        + **1015**: Web shell.
        + **1016**: Mining.
        + **1017**: Reverse shell.
        + **2001**: Common vulnerability exploit.
        + **2012**: Remote code execution.
        + **2047**: Redis vulnerability exploit.
        + **2048**: Hadoop vulnerability exploit.
        + **2049**: MySQL vulnerability exploit.
        + **3002**: File privilege escalation.
        + **3003**: Process privilege escalation.
        + **3004**: Critical file change.
        + **3005**: File/directory change.
        + **3007**: Abnormal process behavior.
        + **3015**: High-risk command execution.
        + **3018**: Abnormal shell.
        + **3027**: Suspicious crontab task.
        + **3029**: System protection disabled.
        + **3030**: Backup deletion.
        + **3031**: Suspicious registry operations.
        + **3036**: Container image blocking.
        + **4002**: Brute-force attack.
        + **4004**: Abnormal login.
        + **4006**: Invalid accounts.
        + **4014**: Account added.
        + **4020**: Password theft.
        + **6002**: Port scan.
        + **6003**: Server scan.
        + **13001**: Kubernetes event deletion.
        + **13002**: Abnormal pod behavior.
        + **13003**: Enumerating user information.
        + **13004**: Cluster role binding.
        """
        return pulumi.get(self, "event_type")

    @_builtins.property
    @pulumi.getter(name="handleStatus")
    def handle_status(self) -> _builtins.str:
        """
        Specifies the handling status.
        The valid values are as follows:
        + **unhandled**
        + **handled**
        """
        return pulumi.get(self, "handle_status")

    @_builtins.property
    @pulumi.getter(name="handleTime")
    def handle_time(self) -> _builtins.int:
        """
        The handling time.
        """
        return pulumi.get(self, "handle_time")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> _builtins.str:
        """
        The remarke.
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="occurTime")
    def occur_time(self) -> _builtins.int:
        """
        The event occurrence time.
        """
        return pulumi.get(self, "occur_time")

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> _builtins.str:
        """
        The handling method.
        The valid values are as follows:
        + **mark_as_handled**
        + **ignore**
        + **add_to_alarm_whitelist**
        + **add_to_login_whitelist**
        + **isolate_and_kill**
        + **unhandle**
        + **do_not_ignore**
        + **remove_from_alarm_whitelist**
        + **remove_from_login_whitelist**
        + **do_not_isolate_or_kill**
        """
        return pulumi.get(self, "operate_type")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Specifies the host private IP address.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        Specifies the host EIP.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Specifies the threat level.
        The valid values are as follows:
        + **Security**
        + **Low**
        + **Medium**
        + **High**
        + **Critical**
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        The user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetEventLoginWhiteListsDataListResult(dict):
    def __init__(__self__, *,
                 enterprise_project_name: _builtins.str,
                 login_ip: _builtins.str,
                 login_user_name: _builtins.str,
                 private_ip: _builtins.str,
                 remarks: _builtins.str,
                 update_time: _builtins.int):
        """
        :param _builtins.str enterprise_project_name: The enterprise project name.
        :param _builtins.str login_ip: Specifies the login source IP.
        :param _builtins.str login_user_name: Specifies the login user-name.
        :param _builtins.str private_ip: Specifies the private IP of the host.
        :param _builtins.str remarks: The remarks.
        :param _builtins.int update_time: The update time in milliseconds.
        """
        pulumi.set(__self__, "enterprise_project_name", enterprise_project_name)
        pulumi.set(__self__, "login_ip", login_ip)
        pulumi.set(__self__, "login_user_name", login_user_name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> _builtins.str:
        """
        The enterprise project name.
        """
        return pulumi.get(self, "enterprise_project_name")

    @_builtins.property
    @pulumi.getter(name="loginIp")
    def login_ip(self) -> _builtins.str:
        """
        Specifies the login source IP.
        """
        return pulumi.get(self, "login_ip")

    @_builtins.property
    @pulumi.getter(name="loginUserName")
    def login_user_name(self) -> _builtins.str:
        """
        Specifies the login user-name.
        """
        return pulumi.get(self, "login_user_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Specifies the private IP of the host.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The remarks.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.int:
        """
        The update time in milliseconds.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetEventSystemUserWhiteListsDataListResult(dict):
    def __init__(__self__, *,
                 enterprise_project_name: _builtins.str,
                 host_id: _builtins.str,
                 host_name: _builtins.str,
                 private_ip: _builtins.str,
                 public_ip: _builtins.str,
                 remarks: _builtins.str,
                 system_user_name_lists: Sequence[_builtins.str],
                 update_time: _builtins.int):
        """
        :param _builtins.str enterprise_project_name: The enterprise project name.
        :param _builtins.str host_id: Specifies the host ID.
        :param _builtins.str host_name: Specifies the host name.
        :param _builtins.str private_ip: Specifies the private IP of the host.
        :param _builtins.str public_ip: Specifies the public IP of the host.
        :param _builtins.str remarks: The remarks.
        :param Sequence[_builtins.str] system_user_name_lists: The list of system user-names.
        :param _builtins.int update_time: The update time in milliseconds.
        """
        pulumi.set(__self__, "enterprise_project_name", enterprise_project_name)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "system_user_name_lists", system_user_name_lists)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> _builtins.str:
        """
        The enterprise project name.
        """
        return pulumi.get(self, "enterprise_project_name")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        Specifies the host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Specifies the private IP of the host.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        Specifies the public IP of the host.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The remarks.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter(name="systemUserNameLists")
    def system_user_name_lists(self) -> Sequence[_builtins.str]:
        """
        The list of system user-names.
        """
        return pulumi.get(self, "system_user_name_lists")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.int:
        """
        The update time in milliseconds.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetEventUnblockIpsDataListResult(dict):
    def __init__(__self__, *,
                 block_time: _builtins.int,
                 host_id: _builtins.str,
                 host_name: _builtins.str,
                 intercept_num: _builtins.int,
                 intercept_status: _builtins.str,
                 latest_time: _builtins.int,
                 login_type: _builtins.str,
                 src_ip: _builtins.str):
        """
        :param _builtins.int block_time: The start interception time in milliseconds.
        :param _builtins.str host_id: The host ID.
        :param _builtins.str host_name: Specifies the host name.
        :param _builtins.int intercept_num: The number of interceptions.
        :param _builtins.str intercept_status: Specifies interception status.
               The valid values are as follows:
               + **intercepted**: Indicates that it has been intercepted.
               + **canceled**: Indicates that it has been unblocked.
               + **cancelling**: Indicates pending unblock.
        :param _builtins.int latest_time: The most recent interception time in milliseconds.
        :param _builtins.str login_type: The login type.
               The valid values are as follows:
               + **mysql**: Represents the MySQL service.
               + **rdp**: Represents the RDP service.
               + **ssh**: Represents the SSH service.
               + **vsftp**: Represents the VSFTP service.
        :param _builtins.str src_ip: Specifies the IP address of the attack source.
        """
        pulumi.set(__self__, "block_time", block_time)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "intercept_num", intercept_num)
        pulumi.set(__self__, "intercept_status", intercept_status)
        pulumi.set(__self__, "latest_time", latest_time)
        pulumi.set(__self__, "login_type", login_type)
        pulumi.set(__self__, "src_ip", src_ip)

    @_builtins.property
    @pulumi.getter(name="blockTime")
    def block_time(self) -> _builtins.int:
        """
        The start interception time in milliseconds.
        """
        return pulumi.get(self, "block_time")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        The host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="interceptNum")
    def intercept_num(self) -> _builtins.int:
        """
        The number of interceptions.
        """
        return pulumi.get(self, "intercept_num")

    @_builtins.property
    @pulumi.getter(name="interceptStatus")
    def intercept_status(self) -> _builtins.str:
        """
        Specifies interception status.
        The valid values are as follows:
        + **intercepted**: Indicates that it has been intercepted.
        + **canceled**: Indicates that it has been unblocked.
        + **cancelling**: Indicates pending unblock.
        """
        return pulumi.get(self, "intercept_status")

    @_builtins.property
    @pulumi.getter(name="latestTime")
    def latest_time(self) -> _builtins.int:
        """
        The most recent interception time in milliseconds.
        """
        return pulumi.get(self, "latest_time")

    @_builtins.property
    @pulumi.getter(name="loginType")
    def login_type(self) -> _builtins.str:
        """
        The login type.
        The valid values are as follows:
        + **mysql**: Represents the MySQL service.
        + **rdp**: Represents the RDP service.
        + **ssh**: Represents the SSH service.
        + **vsftp**: Represents the VSFTP service.
        """
        return pulumi.get(self, "login_type")

    @_builtins.property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> _builtins.str:
        """
        Specifies the IP address of the attack source.
        """
        return pulumi.get(self, "src_ip")


@pulumi.output_type
class GetHoneypotPortPoliciesDataListResult(dict):
    def __init__(__self__, *,
                 host_num: _builtins.int,
                 is_default: _builtins.bool,
                 os_type: _builtins.str,
                 policy_id: _builtins.str,
                 policy_name: _builtins.str,
                 port_lists: Sequence[_builtins.int],
                 status: _builtins.str):
        """
        :param _builtins.int host_num: The host number.
        :param _builtins.bool is_default: Whether the dynamic port honeypot policy is default policy.
        :param _builtins.str os_type: The OS type.
        :param _builtins.str policy_id: The dynamic port honeypot policy ID.
        :param _builtins.str policy_name: The dynamic port honeypot policy name.
        :param Sequence[_builtins.int] port_lists: The port list.
        :param _builtins.str status: The protection status of the dynamic port honeypot policy.
               The valid values are as follows:
               + **applying**: The protection is taking effect.
               + **success**: The protection has taken effect.
               + **disable**: The protection does not take effect.
        """
        pulumi.set(__self__, "host_num", host_num)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "port_lists", port_lists)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="hostNum")
    def host_num(self) -> _builtins.int:
        """
        The host number.
        """
        return pulumi.get(self, "host_num")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        """
        Whether the dynamic port honeypot policy is default policy.
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The OS type.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        The dynamic port honeypot policy ID.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        The dynamic port honeypot policy name.
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="portLists")
    def port_lists(self) -> Sequence[_builtins.int]:
        """
        The port list.
        """
        return pulumi.get(self, "port_lists")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The protection status of the dynamic port honeypot policy.
        The valid values are as follows:
        + **applying**: The protection is taking effect.
        + **success**: The protection has taken effect.
        + **disable**: The protection does not take effect.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetHostGroupsGroupResult(dict):
    def __init__(__self__, *,
                 host_ids: Sequence[_builtins.str],
                 host_num: _builtins.int,
                 id: _builtins.str,
                 name: _builtins.str,
                 risk_host_num: _builtins.int,
                 unprotect_host_num: _builtins.int):
        """
        :param Sequence[_builtins.str] host_ids: The list of host IDs in the host group.
        :param _builtins.int host_num: Specifies the number of hosts in the host groups to be queried.
        :param _builtins.str id: The ID of the host group.
        :param _builtins.str name: Specifies the name of the host group to be queried. This field will undergo a fuzzy
               matching query, the query result is for all host groups whose names contain this value.
        :param _builtins.int risk_host_num: Specifies the number of risky hosts in the host groups to be queried.
        :param _builtins.int unprotect_host_num: Specifies the number of unprotected hosts in the host groups to be queried.
        """
        pulumi.set(__self__, "host_ids", host_ids)
        pulumi.set(__self__, "host_num", host_num)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "risk_host_num", risk_host_num)
        pulumi.set(__self__, "unprotect_host_num", unprotect_host_num)

    @_builtins.property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> Sequence[_builtins.str]:
        """
        The list of host IDs in the host group.
        """
        return pulumi.get(self, "host_ids")

    @_builtins.property
    @pulumi.getter(name="hostNum")
    def host_num(self) -> _builtins.int:
        """
        Specifies the number of hosts in the host groups to be queried.
        """
        return pulumi.get(self, "host_num")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the host group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the host group to be queried. This field will undergo a fuzzy
        matching query, the query result is for all host groups whose names contain this value.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="riskHostNum")
    def risk_host_num(self) -> _builtins.int:
        """
        Specifies the number of risky hosts in the host groups to be queried.
        """
        return pulumi.get(self, "risk_host_num")

    @_builtins.property
    @pulumi.getter(name="unprotectHostNum")
    def unprotect_host_num(self) -> _builtins.int:
        """
        Specifies the number of unprotected hosts in the host groups to be queried.
        """
        return pulumi.get(self, "unprotect_host_num")


@pulumi.output_type
class GetHostVulnerabilitiesDataListResult(dict):
    def __init__(__self__, *,
                 app_lists: Sequence['outputs.GetHostVulnerabilitiesDataListAppListResult'],
                 app_name: _builtins.str,
                 app_path: _builtins.str,
                 app_version: _builtins.str,
                 cve_lists: Sequence['outputs.GetHostVulnerabilitiesDataListCveListResult'],
                 description: _builtins.str,
                 disabled_operate_types: Sequence['outputs.GetHostVulnerabilitiesDataListDisabledOperateTypeResult'],
                 first_scan_time: _builtins.int,
                 is_affect_business: _builtins.bool,
                 label_lists: Sequence[_builtins.str],
                 repair_cmd: _builtins.str,
                 repair_necessity: _builtins.str,
                 repair_priority: _builtins.str,
                 repair_success_num: _builtins.int,
                 scan_time: _builtins.int,
                 severity_level: _builtins.str,
                 solution_detail: _builtins.str,
                 status: _builtins.str,
                 support_restore: _builtins.bool,
                 type: _builtins.str,
                 url: _builtins.str,
                 version: _builtins.str,
                 vul_id: _builtins.str,
                 vul_name: _builtins.str):
        """
        :param Sequence['GetHostVulnerabilitiesDataListAppListArgs'] app_lists: The list of softwares affected by the vulnerability on the host.
        :param _builtins.str app_name: The software name.
        :param _builtins.str app_path: The path of the application software.
               This field is available only for application vulnerabilities.
        :param _builtins.str app_version: The software version.
        :param Sequence['GetHostVulnerabilitiesDataListCveListArgs'] cve_lists: The CVE list.
        :param _builtins.str description: The vulnerability description.
        :param Sequence['GetHostVulnerabilitiesDataListDisabledOperateTypeArgs'] disabled_operate_types: The list of operation types of vulnerabilities that cannot be performed.
        :param _builtins.int first_scan_time: The first scan time.
        :param _builtins.bool is_affect_business: Whether services are affected.
        :param Sequence[_builtins.str] label_lists: The vulnerability tags list.
        :param _builtins.str repair_cmd: The repair command.
        :param _builtins.str repair_necessity: The repair urgency.
        :param _builtins.str repair_priority: Specifies the fixing priority.
               The valid values are as follows:
               + **Critical**
               + **High**
               + **Medium**
               + **Low**
        :param _builtins.int repair_success_num: The total times that the vulnerability is fixed by HSS on the entire network.
        :param _builtins.int scan_time: The latest scan time.
        :param _builtins.str severity_level: The risk level.
               The valid values are as follows:
               + **Critical**: The CVSS score of the vulnerability is greater than or equal to `9`, corresponding to the high risk
               level on the console.
               + **High**: The CVSS score of the vulnerability is greater than or equal to `7` and less than `9`, corresponding to
               the medium risk level on the console.
               + **Medium**: The CVSS score of the vulnerability is greater than or equal to `4` and less than `7`, corresponding to
               the medium risk level on the console.
               + **Low**: The CVSS score of the vulnerability is less than `4`, corresponding to the low risk level on the console.
        :param _builtins.str solution_detail: The solution of fixed vulnerability.
        :param _builtins.str status: Specifies the vulnerability status.
               The valid values are as follows:
               + **vul_status_unfix**: Indicates not fixed.
               + **vul_status_ignored**: Indicates ignored.
               + **vul_status_verified**: Indicates verification in progress.
               + **vul_status_fixing**: Indicates fixing is in progress.
               + **vul_status_fixed**: Indicates fix succeeded.
               + **vul_status_reboot**: Indicates the issue is fixed and waiting for restart.
               + **vul_status_failed**: Indicates the issue failed to be fixed.
               + **vul_status_fix_after_reboot**: Indicates restart the host and try again.
        :param _builtins.bool support_restore: Whether data can be rolled back to the backup created when the vulnerability was fixed.
        :param _builtins.str type: Specifies the vulnerability type.
               The valid values are as follows:
               + **linux_vul**: Linux vulnerability.
               + **windows_vul**: Windows vulnerability.
               + **web_cms**: Web-CMS vulnerability.
               + **app_vul**: Application vulnerability.
               + **urgent_vul**: Emergency vulnerability.
        :param _builtins.str url: The URL.
        :param _builtins.str version: The host quota.
        :param _builtins.str vul_id: The vulnerability ID.
        :param _builtins.str vul_name: Specifies the vulnerability name.
        """
        pulumi.set(__self__, "app_lists", app_lists)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "app_path", app_path)
        pulumi.set(__self__, "app_version", app_version)
        pulumi.set(__self__, "cve_lists", cve_lists)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "disabled_operate_types", disabled_operate_types)
        pulumi.set(__self__, "first_scan_time", first_scan_time)
        pulumi.set(__self__, "is_affect_business", is_affect_business)
        pulumi.set(__self__, "label_lists", label_lists)
        pulumi.set(__self__, "repair_cmd", repair_cmd)
        pulumi.set(__self__, "repair_necessity", repair_necessity)
        pulumi.set(__self__, "repair_priority", repair_priority)
        pulumi.set(__self__, "repair_success_num", repair_success_num)
        pulumi.set(__self__, "scan_time", scan_time)
        pulumi.set(__self__, "severity_level", severity_level)
        pulumi.set(__self__, "solution_detail", solution_detail)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_restore", support_restore)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vul_id", vul_id)
        pulumi.set(__self__, "vul_name", vul_name)

    @_builtins.property
    @pulumi.getter(name="appLists")
    def app_lists(self) -> Sequence['outputs.GetHostVulnerabilitiesDataListAppListResult']:
        """
        The list of softwares affected by the vulnerability on the host.
        """
        return pulumi.get(self, "app_lists")

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        The software name.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="appPath")
    def app_path(self) -> _builtins.str:
        """
        The path of the application software.
        This field is available only for application vulnerabilities.
        """
        return pulumi.get(self, "app_path")

    @_builtins.property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> _builtins.str:
        """
        The software version.
        """
        return pulumi.get(self, "app_version")

    @_builtins.property
    @pulumi.getter(name="cveLists")
    def cve_lists(self) -> Sequence['outputs.GetHostVulnerabilitiesDataListCveListResult']:
        """
        The CVE list.
        """
        return pulumi.get(self, "cve_lists")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The vulnerability description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="disabledOperateTypes")
    def disabled_operate_types(self) -> Sequence['outputs.GetHostVulnerabilitiesDataListDisabledOperateTypeResult']:
        """
        The list of operation types of vulnerabilities that cannot be performed.
        """
        return pulumi.get(self, "disabled_operate_types")

    @_builtins.property
    @pulumi.getter(name="firstScanTime")
    def first_scan_time(self) -> _builtins.int:
        """
        The first scan time.
        """
        return pulumi.get(self, "first_scan_time")

    @_builtins.property
    @pulumi.getter(name="isAffectBusiness")
    def is_affect_business(self) -> _builtins.bool:
        """
        Whether services are affected.
        """
        return pulumi.get(self, "is_affect_business")

    @_builtins.property
    @pulumi.getter(name="labelLists")
    def label_lists(self) -> Sequence[_builtins.str]:
        """
        The vulnerability tags list.
        """
        return pulumi.get(self, "label_lists")

    @_builtins.property
    @pulumi.getter(name="repairCmd")
    def repair_cmd(self) -> _builtins.str:
        """
        The repair command.
        """
        return pulumi.get(self, "repair_cmd")

    @_builtins.property
    @pulumi.getter(name="repairNecessity")
    def repair_necessity(self) -> _builtins.str:
        """
        The repair urgency.
        """
        return pulumi.get(self, "repair_necessity")

    @_builtins.property
    @pulumi.getter(name="repairPriority")
    def repair_priority(self) -> _builtins.str:
        """
        Specifies the fixing priority.
        The valid values are as follows:
        + **Critical**
        + **High**
        + **Medium**
        + **Low**
        """
        return pulumi.get(self, "repair_priority")

    @_builtins.property
    @pulumi.getter(name="repairSuccessNum")
    def repair_success_num(self) -> _builtins.int:
        """
        The total times that the vulnerability is fixed by HSS on the entire network.
        """
        return pulumi.get(self, "repair_success_num")

    @_builtins.property
    @pulumi.getter(name="scanTime")
    def scan_time(self) -> _builtins.int:
        """
        The latest scan time.
        """
        return pulumi.get(self, "scan_time")

    @_builtins.property
    @pulumi.getter(name="severityLevel")
    def severity_level(self) -> _builtins.str:
        """
        The risk level.
        The valid values are as follows:
        + **Critical**: The CVSS score of the vulnerability is greater than or equal to `9`, corresponding to the high risk
        level on the console.
        + **High**: The CVSS score of the vulnerability is greater than or equal to `7` and less than `9`, corresponding to
        the medium risk level on the console.
        + **Medium**: The CVSS score of the vulnerability is greater than or equal to `4` and less than `7`, corresponding to
        the medium risk level on the console.
        + **Low**: The CVSS score of the vulnerability is less than `4`, corresponding to the low risk level on the console.
        """
        return pulumi.get(self, "severity_level")

    @_builtins.property
    @pulumi.getter(name="solutionDetail")
    def solution_detail(self) -> _builtins.str:
        """
        The solution of fixed vulnerability.
        """
        return pulumi.get(self, "solution_detail")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the vulnerability status.
        The valid values are as follows:
        + **vul_status_unfix**: Indicates not fixed.
        + **vul_status_ignored**: Indicates ignored.
        + **vul_status_verified**: Indicates verification in progress.
        + **vul_status_fixing**: Indicates fixing is in progress.
        + **vul_status_fixed**: Indicates fix succeeded.
        + **vul_status_reboot**: Indicates the issue is fixed and waiting for restart.
        + **vul_status_failed**: Indicates the issue failed to be fixed.
        + **vul_status_fix_after_reboot**: Indicates restart the host and try again.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportRestore")
    def support_restore(self) -> _builtins.bool:
        """
        Whether data can be rolled back to the backup created when the vulnerability was fixed.
        """
        return pulumi.get(self, "support_restore")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the vulnerability type.
        The valid values are as follows:
        + **linux_vul**: Linux vulnerability.
        + **windows_vul**: Windows vulnerability.
        + **web_cms**: Web-CMS vulnerability.
        + **app_vul**: Application vulnerability.
        + **urgent_vul**: Emergency vulnerability.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The URL.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The host quota.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="vulId")
    def vul_id(self) -> _builtins.str:
        """
        The vulnerability ID.
        """
        return pulumi.get(self, "vul_id")

    @_builtins.property
    @pulumi.getter(name="vulName")
    def vul_name(self) -> _builtins.str:
        """
        Specifies the vulnerability name.
        """
        return pulumi.get(self, "vul_name")


@pulumi.output_type
class GetHostVulnerabilitiesDataListAppListResult(dict):
    def __init__(__self__, *,
                 app_name: _builtins.str,
                 app_path: _builtins.str,
                 app_version: _builtins.str,
                 upgrade_version: _builtins.str):
        """
        :param _builtins.str app_name: The software name.
        :param _builtins.str app_path: The path of the application software.
               This field is available only for application vulnerabilities.
        :param _builtins.str app_version: The software version.
        :param _builtins.str upgrade_version: The version that needs to be upgraded to fix vulnerability software.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "app_path", app_path)
        pulumi.set(__self__, "app_version", app_version)
        pulumi.set(__self__, "upgrade_version", upgrade_version)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        The software name.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="appPath")
    def app_path(self) -> _builtins.str:
        """
        The path of the application software.
        This field is available only for application vulnerabilities.
        """
        return pulumi.get(self, "app_path")

    @_builtins.property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> _builtins.str:
        """
        The software version.
        """
        return pulumi.get(self, "app_version")

    @_builtins.property
    @pulumi.getter(name="upgradeVersion")
    def upgrade_version(self) -> _builtins.str:
        """
        The version that needs to be upgraded to fix vulnerability software.
        """
        return pulumi.get(self, "upgrade_version")


@pulumi.output_type
class GetHostVulnerabilitiesDataListCveListResult(dict):
    def __init__(__self__, *,
                 cve_id: _builtins.str,
                 cvss: _builtins.float):
        """
        :param _builtins.str cve_id: The CVE ID.
        :param _builtins.float cvss: The CVSS score.
        """
        pulumi.set(__self__, "cve_id", cve_id)
        pulumi.set(__self__, "cvss", cvss)

    @_builtins.property
    @pulumi.getter(name="cveId")
    def cve_id(self) -> _builtins.str:
        """
        The CVE ID.
        """
        return pulumi.get(self, "cve_id")

    @_builtins.property
    @pulumi.getter
    def cvss(self) -> _builtins.float:
        """
        The CVSS score.
        """
        return pulumi.get(self, "cvss")


@pulumi.output_type
class GetHostVulnerabilitiesDataListDisabledOperateTypeResult(dict):
    def __init__(__self__, *,
                 operate_type: _builtins.str,
                 reason: _builtins.str):
        """
        :param _builtins.str operate_type: The operation type.
               The valid values are as follows:
               + **ignore**
               + **not_ignore**
               + **immediate_repair**
               + **manual_repair**
               + **verify**
               + **add_to_whitelist**
        :param _builtins.str reason: The reason why the operation cannot be performed.
        """
        pulumi.set(__self__, "operate_type", operate_type)
        pulumi.set(__self__, "reason", reason)

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> _builtins.str:
        """
        The operation type.
        The valid values are as follows:
        + **ignore**
        + **not_ignore**
        + **immediate_repair**
        + **manual_repair**
        + **verify**
        + **add_to_whitelist**
        """
        return pulumi.get(self, "operate_type")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        """
        The reason why the operation cannot be performed.
        """
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetHostsHostResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 agent_status: _builtins.str,
                 asset_risk_num: _builtins.int,
                 asset_value: _builtins.str,
                 baseline_risk_num: _builtins.int,
                 detect_result: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 group_id: _builtins.str,
                 id: _builtins.str,
                 intrusion_risk_num: _builtins.int,
                 name: _builtins.str,
                 open_time: _builtins.str,
                 os_type: _builtins.str,
                 policy_group_id: _builtins.str,
                 private_ip: _builtins.str,
                 protect_charging_mode: _builtins.str,
                 protect_status: _builtins.str,
                 protect_version: _builtins.str,
                 public_ip: _builtins.str,
                 quota_id: _builtins.str,
                 status: _builtins.str,
                 vulnerability_risk_num: _builtins.int):
        """
        :param _builtins.str agent_id: The agent ID installed on the host.
        :param _builtins.str agent_status: Specifies the agent status of the hosts to be queried.
               The valid values are as follows:
               + **installed**
               + **not_installed**
               + **online**
               + **offline**
               + **install_failed**
        :param _builtins.int asset_risk_num: The number of asset risks in the host
        :param _builtins.str asset_value: Specifies the asset importance of the hosts to be queried.
               The valid values are as follows:
               + **important**
               + **common**
               + **test**
        :param _builtins.int baseline_risk_num: The number of baseline risks in the host.
        :param _builtins.str detect_result: Specifies the security detection result of the hosts to be queried.
               The valid values are as follows:
               + **undetected**
               + **clean**
               + **risk**
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the hosts belong.
               If omitted, will query the hosts under all enterprise projects.
        :param _builtins.str group_id: Specifies the host group ID of the hosts to be queried.
        :param _builtins.str id: The ID of the host.
        :param _builtins.int intrusion_risk_num: The number of intrusion risks in the host.
        :param _builtins.str name: Specifies the name of the host to be queried.
               This field will undergo a fuzzy matching query, the query result is for all hosts whose names contain this value.
        :param _builtins.str open_time: The time to enable host protection.
        :param _builtins.str os_type: Specifies the operating system type of the hosts to be queried.
               The valid values are as follows:
               + **Linux**
               + **Windows**
        :param _builtins.str policy_group_id: Specifies the policy group ID of the hosts to be queried.
        :param _builtins.str private_ip: The private IP address of the host.
        :param _builtins.str protect_charging_mode: Specifies the charging mode for the hosts protection quota to be queried.
               The valid values are as follows:
               + **prePaid**
               + **postPaid**
        :param _builtins.str protect_status: Specifies the protection status of the hosts to be queried.
               The valid values are as follows:
               + **closed**
               + **opened**
        :param _builtins.str protect_version: Specifies the protection version enabled by the hosts to be queried.
               The valid values are as follows:
               + **hss.version.basic**
               + **hss.version.advanced**
               + **hss.version.enterprise**
               + **hss.version.premium**
               + **hss.version.wtp**
               + **hss.version.container.enterprise**
        :param _builtins.str public_ip: The elastic public IP address of the host.
        :param _builtins.str quota_id: The protection quota ID of the host.
        :param _builtins.str status: Specifies the status of the hosts to be queried.
               The valid values are as follows:
               + **ACTIVE**
               + **SHUTOFF**
               + **ERROR**
        :param _builtins.int vulnerability_risk_num: The number of vulnerability risks in the host.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "agent_status", agent_status)
        pulumi.set(__self__, "asset_risk_num", asset_risk_num)
        pulumi.set(__self__, "asset_value", asset_value)
        pulumi.set(__self__, "baseline_risk_num", baseline_risk_num)
        pulumi.set(__self__, "detect_result", detect_result)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "intrusion_risk_num", intrusion_risk_num)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "open_time", open_time)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "policy_group_id", policy_group_id)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "protect_charging_mode", protect_charging_mode)
        pulumi.set(__self__, "protect_status", protect_status)
        pulumi.set(__self__, "protect_version", protect_version)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "quota_id", quota_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vulnerability_risk_num", vulnerability_risk_num)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        The agent ID installed on the host.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="agentStatus")
    def agent_status(self) -> _builtins.str:
        """
        Specifies the agent status of the hosts to be queried.
        The valid values are as follows:
        + **installed**
        + **not_installed**
        + **online**
        + **offline**
        + **install_failed**
        """
        return pulumi.get(self, "agent_status")

    @_builtins.property
    @pulumi.getter(name="assetRiskNum")
    def asset_risk_num(self) -> _builtins.int:
        """
        The number of asset risks in the host
        """
        return pulumi.get(self, "asset_risk_num")

    @_builtins.property
    @pulumi.getter(name="assetValue")
    def asset_value(self) -> _builtins.str:
        """
        Specifies the asset importance of the hosts to be queried.
        The valid values are as follows:
        + **important**
        + **common**
        + **test**
        """
        return pulumi.get(self, "asset_value")

    @_builtins.property
    @pulumi.getter(name="baselineRiskNum")
    def baseline_risk_num(self) -> _builtins.int:
        """
        The number of baseline risks in the host.
        """
        return pulumi.get(self, "baseline_risk_num")

    @_builtins.property
    @pulumi.getter(name="detectResult")
    def detect_result(self) -> _builtins.str:
        """
        Specifies the security detection result of the hosts to be queried.
        The valid values are as follows:
        + **undetected**
        + **clean**
        + **risk**
        """
        return pulumi.get(self, "detect_result")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the hosts belong.
        If omitted, will query the hosts under all enterprise projects.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        Specifies the host group ID of the hosts to be queried.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the host.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="intrusionRiskNum")
    def intrusion_risk_num(self) -> _builtins.int:
        """
        The number of intrusion risks in the host.
        """
        return pulumi.get(self, "intrusion_risk_num")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the host to be queried.
        This field will undergo a fuzzy matching query, the query result is for all hosts whose names contain this value.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="openTime")
    def open_time(self) -> _builtins.str:
        """
        The time to enable host protection.
        """
        return pulumi.get(self, "open_time")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Specifies the operating system type of the hosts to be queried.
        The valid values are as follows:
        + **Linux**
        + **Windows**
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="policyGroupId")
    def policy_group_id(self) -> _builtins.str:
        """
        Specifies the policy group ID of the hosts to be queried.
        """
        return pulumi.get(self, "policy_group_id")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The private IP address of the host.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="protectChargingMode")
    def protect_charging_mode(self) -> _builtins.str:
        """
        Specifies the charging mode for the hosts protection quota to be queried.
        The valid values are as follows:
        + **prePaid**
        + **postPaid**
        """
        return pulumi.get(self, "protect_charging_mode")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> _builtins.str:
        """
        Specifies the protection status of the hosts to be queried.
        The valid values are as follows:
        + **closed**
        + **opened**
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter(name="protectVersion")
    def protect_version(self) -> _builtins.str:
        """
        Specifies the protection version enabled by the hosts to be queried.
        The valid values are as follows:
        + **hss.version.basic**
        + **hss.version.advanced**
        + **hss.version.enterprise**
        + **hss.version.premium**
        + **hss.version.wtp**
        + **hss.version.container.enterprise**
        """
        return pulumi.get(self, "protect_version")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The elastic public IP address of the host.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="quotaId")
    def quota_id(self) -> _builtins.str:
        """
        The protection quota ID of the host.
        """
        return pulumi.get(self, "quota_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the hosts to be queried.
        The valid values are as follows:
        + **ACTIVE**
        + **SHUTOFF**
        + **ERROR**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vulnerabilityRiskNum")
    def vulnerability_risk_num(self) -> _builtins.int:
        """
        The number of vulnerability risks in the host.
        """
        return pulumi.get(self, "vulnerability_risk_num")


@pulumi.output_type
class GetPolicyGroupsDataListResult(dict):
    def __init__(__self__, *,
                 default_group: _builtins.bool,
                 deletable: _builtins.bool,
                 description: _builtins.str,
                 group_id: _builtins.str,
                 group_name: _builtins.str,
                 host_num: _builtins.int,
                 support_os: _builtins.str,
                 support_version: _builtins.str):
        """
        :param _builtins.bool default_group: Whether a policy group is the default policy group.
        :param _builtins.bool deletable: Whether a policy group can be deleted.
        :param _builtins.str description: The description of the policy group.
        :param _builtins.str group_id: Specifies the policy group ID.
        :param _builtins.str group_name: Specifies the policy group name.
        :param _builtins.int host_num: The number of associated servers.
        :param _builtins.str support_os: The supported OS. The valid value are **Linux** and **Windows**.
        :param _builtins.str support_version: The supported versions. The valid values are as follows:
               + **hss.version.basic**: Indicates policy group of the basic edition.
               + **hss.version.advanced**: Indicates policy group of the professional edition.
               + **hss.version.enterprise**: Indicates policy group of the enterprise edition.
               + **hss.version.premium**: Indicates policy group of the premium edition.
               + **hss.version.wtp**: Indicates policy group of the WTP edition.
               + **hss.version.container.enterprise**: Indicates policy group of the container edition.
        """
        pulumi.set(__self__, "default_group", default_group)
        pulumi.set(__self__, "deletable", deletable)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "host_num", host_num)
        pulumi.set(__self__, "support_os", support_os)
        pulumi.set(__self__, "support_version", support_version)

    @_builtins.property
    @pulumi.getter(name="defaultGroup")
    def default_group(self) -> _builtins.bool:
        """
        Whether a policy group is the default policy group.
        """
        return pulumi.get(self, "default_group")

    @_builtins.property
    @pulumi.getter
    def deletable(self) -> _builtins.bool:
        """
        Whether a policy group can be deleted.
        """
        return pulumi.get(self, "deletable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the policy group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        Specifies the policy group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Specifies the policy group name.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="hostNum")
    def host_num(self) -> _builtins.int:
        """
        The number of associated servers.
        """
        return pulumi.get(self, "host_num")

    @_builtins.property
    @pulumi.getter(name="supportOs")
    def support_os(self) -> _builtins.str:
        """
        The supported OS. The valid value are **Linux** and **Windows**.
        """
        return pulumi.get(self, "support_os")

    @_builtins.property
    @pulumi.getter(name="supportVersion")
    def support_version(self) -> _builtins.str:
        """
        The supported versions. The valid values are as follows:
        + **hss.version.basic**: Indicates policy group of the basic edition.
        + **hss.version.advanced**: Indicates policy group of the professional edition.
        + **hss.version.enterprise**: Indicates policy group of the enterprise edition.
        + **hss.version.premium**: Indicates policy group of the premium edition.
        + **hss.version.wtp**: Indicates policy group of the WTP edition.
        + **hss.version.container.enterprise**: Indicates policy group of the container edition.
        """
        return pulumi.get(self, "support_version")


@pulumi.output_type
class GetProductInfosDataListResult(dict):
    def __init__(__self__, *,
                 charging_mode: _builtins.str,
                 is_auto_renew: _builtins.bool,
                 version_infos: Sequence['outputs.GetProductInfosDataListVersionInfoResult']):
        """
        :param _builtins.str charging_mode: The billing modes. The valid values are as follows:
               + **packet_cycle**: Yearly/Monthly subscription.
               + **on_demand**: Pay-per-use.
        :param _builtins.bool is_auto_renew: Whether to enable automatic renewal.
        :param Sequence['GetProductInfosDataListVersionInfoArgs'] version_infos: The edition information list.
               The version_info structure is documented below.
        """
        pulumi.set(__self__, "charging_mode", charging_mode)
        pulumi.set(__self__, "is_auto_renew", is_auto_renew)
        pulumi.set(__self__, "version_infos", version_infos)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> _builtins.str:
        """
        The billing modes. The valid values are as follows:
        + **packet_cycle**: Yearly/Monthly subscription.
        + **on_demand**: Pay-per-use.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="isAutoRenew")
    def is_auto_renew(self) -> _builtins.bool:
        """
        Whether to enable automatic renewal.
        """
        return pulumi.get(self, "is_auto_renew")

    @_builtins.property
    @pulumi.getter(name="versionInfos")
    def version_infos(self) -> Sequence['outputs.GetProductInfosDataListVersionInfoResult']:
        """
        The edition information list.
        The version_info structure is documented below.
        """
        return pulumi.get(self, "version_infos")


@pulumi.output_type
class GetProductInfosDataListVersionInfoResult(dict):
    def __init__(__self__, *,
                 periods: Sequence['outputs.GetProductInfosDataListVersionInfoPeriodResult'],
                 version: _builtins.str):
        """
        :param Sequence['GetProductInfosDataListVersionInfoPeriodArgs'] periods: The period information list.
               The periods structure is documented below.
        :param _builtins.str version: The HSS edition. The value can be:
               + **hss.version.basic**: Basic edition.
               + **hss.version.advanced**: Professional edition.
               + **hss.version.enterprise**: Enterprise edition.
               + **hss.version.premium**: Premium edition.
               + **hss.version.wtp**: WTP edition.
               + **hss.version.container.enterprise**: Container edition.
               + **hss.version.small.hsp**: Small HSP edition.
               + **hss.version.imagescan**: Image scan edition.
               + **hss.version.antivirus**: Antivirus edition.
        """
        pulumi.set(__self__, "periods", periods)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def periods(self) -> Sequence['outputs.GetProductInfosDataListVersionInfoPeriodResult']:
        """
        The period information list.
        The periods structure is documented below.
        """
        return pulumi.get(self, "periods")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The HSS edition. The value can be:
        + **hss.version.basic**: Basic edition.
        + **hss.version.advanced**: Professional edition.
        + **hss.version.enterprise**: Enterprise edition.
        + **hss.version.premium**: Premium edition.
        + **hss.version.wtp**: WTP edition.
        + **hss.version.container.enterprise**: Container edition.
        + **hss.version.small.hsp**: Small HSP edition.
        + **hss.version.imagescan**: Image scan edition.
        + **hss.version.antivirus**: Antivirus edition.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetProductInfosDataListVersionInfoPeriodResult(dict):
    def __init__(__self__, *,
                 period_unit: _builtins.str,
                 period_vals: _builtins.str):
        """
        :param _builtins.str period_unit: Required duration unit. The valid values are as follows:
               + **year**: Year.
               + **month**: Month.
        :param _builtins.str period_vals: Value string of the required duration. Multiple values are separated by commas (,).
               For example: "1,2,3,4,5,6,7,8,9" for monthly subscription or "1,2,3,5" for yearly subscription.
        """
        pulumi.set(__self__, "period_unit", period_unit)
        pulumi.set(__self__, "period_vals", period_vals)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> _builtins.str:
        """
        Required duration unit. The valid values are as follows:
        + **year**: Year.
        + **month**: Month.
        """
        return pulumi.get(self, "period_unit")

    @_builtins.property
    @pulumi.getter(name="periodVals")
    def period_vals(self) -> _builtins.str:
        """
        Value string of the required duration. Multiple values are separated by commas (,).
        For example: "1,2,3,4,5,6,7,8,9" for monthly subscription or "1,2,3,5" for yearly subscription.
        """
        return pulumi.get(self, "period_vals")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 charging_mode: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 enterprise_project_name: _builtins.str,
                 expire_time: _builtins.str,
                 host_id: _builtins.str,
                 host_name: _builtins.str,
                 id: _builtins.str,
                 shared_quota: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 used_status: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str charging_mode: Specifies the charging mode of the quotas to be queried.
               The valid values are as follows:
               + **prePaid**: The yearly/monthly billing mode.
               + **postPaid**: The pay-per-use billing mode.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the quotas belong.
               For enterprise users, if omitted, will query the quotas under all enterprise projects.
        :param _builtins.str enterprise_project_name: The enterprise project name to which the quota belongs.
        :param _builtins.str expire_time: The expiration time of quota, in RFC3339 format. This field is valid when the quota is a trial quota.
        :param _builtins.str host_id: The host ID for quota binding.
        :param _builtins.str host_name: Specifies the host name for the quota binding to be queried.
        :param _builtins.str id: The ID of quota.
        :param _builtins.str shared_quota: Is it a shared quota. The value can be **shared** or **unshared**.
        :param _builtins.str status: Specifies the status of the quotas to be queried.
               The value can be **normal**, **expired**, or **freeze**.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the HSS quota.
        :param _builtins.str used_status: Specifies the usage status of the quotas to be queried.
               The value can be **idle** or **used**.
        :param _builtins.str version: Specifies the version of the quotas to be queried.
               The valid values are as follows:
               + **hss.version.basic**: Basic version.
               + **hss.version.advanced**: Professional version.
               + **hss.version.enterprise**: Enterprise version.
               + **hss.version.premium**: Ultimate version.
               + **hss.version.wtp**: Web page tamper prevention version.
        """
        pulumi.set(__self__, "charging_mode", charging_mode)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "enterprise_project_name", enterprise_project_name)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "shared_quota", shared_quota)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "used_status", used_status)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> _builtins.str:
        """
        Specifies the charging mode of the quotas to be queried.
        The valid values are as follows:
        + **prePaid**: The yearly/monthly billing mode.
        + **postPaid**: The pay-per-use billing mode.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the quotas belong.
        For enterprise users, if omitted, will query the quotas under all enterprise projects.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> _builtins.str:
        """
        The enterprise project name to which the quota belongs.
        """
        return pulumi.get(self, "enterprise_project_name")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> _builtins.str:
        """
        The expiration time of quota, in RFC3339 format. This field is valid when the quota is a trial quota.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        The host ID for quota binding.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name for the quota binding to be queried.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of quota.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="sharedQuota")
    def shared_quota(self) -> _builtins.str:
        """
        Is it a shared quota. The value can be **shared** or **unshared**.
        """
        return pulumi.get(self, "shared_quota")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the quotas to be queried.
        The value can be **normal**, **expired**, or **freeze**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the HSS quota.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="usedStatus")
    def used_status(self) -> _builtins.str:
        """
        Specifies the usage status of the quotas to be queried.
        The value can be **idle** or **used**.
        """
        return pulumi.get(self, "used_status")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the version of the quotas to be queried.
        The valid values are as follows:
        + **hss.version.basic**: Basic version.
        + **hss.version.advanced**: Professional version.
        + **hss.version.enterprise**: Enterprise version.
        + **hss.version.premium**: Ultimate version.
        + **hss.version.wtp**: Web page tamper prevention version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetRansomwareProtectionPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 bait_protection_status: _builtins.str,
                 count_associated_server: _builtins.int,
                 default_policy: _builtins.int,
                 deploy_mode: _builtins.str,
                 exclude_directory: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 operating_system: _builtins.str,
                 process_whitelists: Sequence['outputs.GetRansomwareProtectionPoliciesPolicyProcessWhitelistResult'],
                 protection_directory: _builtins.str,
                 protection_mode: _builtins.str,
                 protection_type: _builtins.str,
                 runtime_detection_status: _builtins.str):
        """
        :param _builtins.str bait_protection_status: The bait protection enabled status of the ransomware protection policy.
               The value can be **opened** or **closed**.
        :param _builtins.int count_associated_server: The number of hosts associated with the ransomware protection policy.
        :param _builtins.int default_policy: Is it the default policy.
               The value can be `1` or `0`. `1` represents the default policy, `0` represents the non-default policy.
        :param _builtins.str deploy_mode: The dynamic bait protection enabled status of the ransomware protection policy.
               The value can be **opened** or **closed**.
        :param _builtins.str exclude_directory: The exclude directories of the ransomware protection policy, multiple directories separated by
               semicolons.
        :param _builtins.str id: The ID of the ransomware protection policy.
        :param _builtins.str name: Specifies the name of the ransomware protection policy to be queried.
               This field will undergo a fuzzy matching query, the query result is for all ransomware protection policies whose names
               contain this value.
        :param _builtins.str operating_system: Specifies the operating system supported by the ransomware protection policies
               to be queried. The value can be **Windows** or **Linux**.
        :param Sequence['GetRansomwareProtectionPoliciesPolicyProcessWhitelistArgs'] process_whitelists: The process whitelist of the ransomware protection policy.
               The process_whitelist structure is documented below.
        :param _builtins.str protection_directory: The protection directory of the ransomware protection policy, multiple directories separated
               by semicolons.
        :param _builtins.str protection_mode: The protection mode of the ransomware protection policy.
        :param _builtins.str protection_type: The protection file type of the ransomware protection policy, multiple file types separated by
               commas.
        :param _builtins.str runtime_detection_status: The runtime detection enabled status of the ransomware protection policy.
               The value can be **opened** or **closed**.
        """
        pulumi.set(__self__, "bait_protection_status", bait_protection_status)
        pulumi.set(__self__, "count_associated_server", count_associated_server)
        pulumi.set(__self__, "default_policy", default_policy)
        pulumi.set(__self__, "deploy_mode", deploy_mode)
        pulumi.set(__self__, "exclude_directory", exclude_directory)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "process_whitelists", process_whitelists)
        pulumi.set(__self__, "protection_directory", protection_directory)
        pulumi.set(__self__, "protection_mode", protection_mode)
        pulumi.set(__self__, "protection_type", protection_type)
        pulumi.set(__self__, "runtime_detection_status", runtime_detection_status)

    @_builtins.property
    @pulumi.getter(name="baitProtectionStatus")
    def bait_protection_status(self) -> _builtins.str:
        """
        The bait protection enabled status of the ransomware protection policy.
        The value can be **opened** or **closed**.
        """
        return pulumi.get(self, "bait_protection_status")

    @_builtins.property
    @pulumi.getter(name="countAssociatedServer")
    def count_associated_server(self) -> _builtins.int:
        """
        The number of hosts associated with the ransomware protection policy.
        """
        return pulumi.get(self, "count_associated_server")

    @_builtins.property
    @pulumi.getter(name="defaultPolicy")
    def default_policy(self) -> _builtins.int:
        """
        Is it the default policy.
        The value can be `1` or `0`. `1` represents the default policy, `0` represents the non-default policy.
        """
        return pulumi.get(self, "default_policy")

    @_builtins.property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> _builtins.str:
        """
        The dynamic bait protection enabled status of the ransomware protection policy.
        The value can be **opened** or **closed**.
        """
        return pulumi.get(self, "deploy_mode")

    @_builtins.property
    @pulumi.getter(name="excludeDirectory")
    def exclude_directory(self) -> _builtins.str:
        """
        The exclude directories of the ransomware protection policy, multiple directories separated by
        semicolons.
        """
        return pulumi.get(self, "exclude_directory")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the ransomware protection policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the ransomware protection policy to be queried.
        This field will undergo a fuzzy matching query, the query result is for all ransomware protection policies whose names
        contain this value.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> _builtins.str:
        """
        Specifies the operating system supported by the ransomware protection policies
        to be queried. The value can be **Windows** or **Linux**.
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="processWhitelists")
    def process_whitelists(self) -> Sequence['outputs.GetRansomwareProtectionPoliciesPolicyProcessWhitelistResult']:
        """
        The process whitelist of the ransomware protection policy.
        The process_whitelist structure is documented below.
        """
        return pulumi.get(self, "process_whitelists")

    @_builtins.property
    @pulumi.getter(name="protectionDirectory")
    def protection_directory(self) -> _builtins.str:
        """
        The protection directory of the ransomware protection policy, multiple directories separated
        by semicolons.
        """
        return pulumi.get(self, "protection_directory")

    @_builtins.property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> _builtins.str:
        """
        The protection mode of the ransomware protection policy.
        """
        return pulumi.get(self, "protection_mode")

    @_builtins.property
    @pulumi.getter(name="protectionType")
    def protection_type(self) -> _builtins.str:
        """
        The protection file type of the ransomware protection policy, multiple file types separated by
        commas.
        """
        return pulumi.get(self, "protection_type")

    @_builtins.property
    @pulumi.getter(name="runtimeDetectionStatus")
    def runtime_detection_status(self) -> _builtins.str:
        """
        The runtime detection enabled status of the ransomware protection policy.
        The value can be **opened** or **closed**.
        """
        return pulumi.get(self, "runtime_detection_status")


@pulumi.output_type
class GetRansomwareProtectionPoliciesPolicyProcessWhitelistResult(dict):
    def __init__(__self__, *,
                 hash: _builtins.str,
                 path: _builtins.str):
        """
        :param _builtins.str hash: The process hash.
        :param _builtins.str path: The process path.
        """
        pulumi.set(__self__, "hash", hash)
        pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter
    def hash(self) -> _builtins.str:
        """
        The process hash.
        """
        return pulumi.get(self, "hash")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The process path.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetRaspPoliciesDataListResult(dict):
    def __init__(__self__, *,
                 host_num: _builtins.int,
                 os_type: _builtins.str,
                 policy_id: _builtins.str,
                 policy_name: _builtins.str,
                 rule_name: _builtins.str):
        """
        :param _builtins.int host_num: The number of associated hosts.
        :param _builtins.str os_type: Specifies the operating system type.
               The valid values are as follows:
               + **Linux**
               + **Windows**
        :param _builtins.str policy_id: The policy ID.
        :param _builtins.str policy_name: Specifies the policy name. Supports fuzzy match.
        :param _builtins.str rule_name: The names of detection rules, separated by commas(,).
        """
        pulumi.set(__self__, "host_num", host_num)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "rule_name", rule_name)

    @_builtins.property
    @pulumi.getter(name="hostNum")
    def host_num(self) -> _builtins.int:
        """
        The number of associated hosts.
        """
        return pulumi.get(self, "host_num")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Specifies the operating system type.
        The valid values are as follows:
        + **Linux**
        + **Windows**
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        The policy ID.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        Specifies the policy name. Supports fuzzy match.
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> _builtins.str:
        """
        The names of detection rules, separated by commas(,).
        """
        return pulumi.get(self, "rule_name")


@pulumi.output_type
class GetRaspPolicyDetailRuleListResult(dict):
    def __init__(__self__, *,
                 chk_feature_desc: _builtins.str,
                 chk_feature_id: _builtins.int,
                 chk_feature_name: _builtins.str,
                 editable: _builtins.int,
                 enabled: _builtins.int,
                 feature_configure: _builtins.str,
                 optional_protective_action: _builtins.int,
                 protective_action: _builtins.int):
        """
        :param _builtins.str chk_feature_desc: The detection feature rule description.
        :param _builtins.int chk_feature_id: The detection feature rule ID.
        :param _builtins.str chk_feature_name: The detection feature rule name.
        :param _builtins.int editable: Whether the configuration information can be edited.
               The valid values are as follows:
        :param _builtins.int enabled: The enabling status.
               The valid values are as follows:
        :param _builtins.str feature_configure: The detection feature rule configuration information.
        :param _builtins.int optional_protective_action: The available protection action.
               The valid values are as follows:
        :param _builtins.int protective_action: The default protection action.
               The valid values are as follows:
        """
        pulumi.set(__self__, "chk_feature_desc", chk_feature_desc)
        pulumi.set(__self__, "chk_feature_id", chk_feature_id)
        pulumi.set(__self__, "chk_feature_name", chk_feature_name)
        pulumi.set(__self__, "editable", editable)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "feature_configure", feature_configure)
        pulumi.set(__self__, "optional_protective_action", optional_protective_action)
        pulumi.set(__self__, "protective_action", protective_action)

    @_builtins.property
    @pulumi.getter(name="chkFeatureDesc")
    def chk_feature_desc(self) -> _builtins.str:
        """
        The detection feature rule description.
        """
        return pulumi.get(self, "chk_feature_desc")

    @_builtins.property
    @pulumi.getter(name="chkFeatureId")
    def chk_feature_id(self) -> _builtins.int:
        """
        The detection feature rule ID.
        """
        return pulumi.get(self, "chk_feature_id")

    @_builtins.property
    @pulumi.getter(name="chkFeatureName")
    def chk_feature_name(self) -> _builtins.str:
        """
        The detection feature rule name.
        """
        return pulumi.get(self, "chk_feature_name")

    @_builtins.property
    @pulumi.getter
    def editable(self) -> _builtins.int:
        """
        Whether the configuration information can be edited.
        The valid values are as follows:
        """
        return pulumi.get(self, "editable")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.int:
        """
        The enabling status.
        The valid values are as follows:
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="featureConfigure")
    def feature_configure(self) -> _builtins.str:
        """
        The detection feature rule configuration information.
        """
        return pulumi.get(self, "feature_configure")

    @_builtins.property
    @pulumi.getter(name="optionalProtectiveAction")
    def optional_protective_action(self) -> _builtins.int:
        """
        The available protection action.
        The valid values are as follows:
        """
        return pulumi.get(self, "optional_protective_action")

    @_builtins.property
    @pulumi.getter(name="protectiveAction")
    def protective_action(self) -> _builtins.int:
        """
        The default protection action.
        The valid values are as follows:
        """
        return pulumi.get(self, "protective_action")


@pulumi.output_type
class GetRaspRulesDataListResult(dict):
    def __init__(__self__, *,
                 chk_feature_desc: _builtins.str,
                 chk_feature_id: _builtins.int,
                 chk_feature_name: _builtins.str,
                 editable: _builtins.int,
                 feature_configure: _builtins.str,
                 optional_protective_action: _builtins.int,
                 os_type: _builtins.str,
                 protective_action: _builtins.int):
        """
        :param _builtins.str chk_feature_desc: The detection feature rule description.
        :param _builtins.int chk_feature_id: The detection feature rule ID.
        :param _builtins.str chk_feature_name: The detection feature rule name.
        :param _builtins.int editable: Whether the configuration information can be edited.
               The valid values are as follows:
        :param _builtins.str feature_configure: The detection feature rule configuration information.
        :param _builtins.int optional_protective_action: The available protection action.
               The valid values are as follows:
        :param _builtins.str os_type: Specifies the OS type.
               The valid values are as follows:
               + **Linux**
               + **Windows**
        :param _builtins.int protective_action: The default protection action.
               The valid values are as follows:
        """
        pulumi.set(__self__, "chk_feature_desc", chk_feature_desc)
        pulumi.set(__self__, "chk_feature_id", chk_feature_id)
        pulumi.set(__self__, "chk_feature_name", chk_feature_name)
        pulumi.set(__self__, "editable", editable)
        pulumi.set(__self__, "feature_configure", feature_configure)
        pulumi.set(__self__, "optional_protective_action", optional_protective_action)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "protective_action", protective_action)

    @_builtins.property
    @pulumi.getter(name="chkFeatureDesc")
    def chk_feature_desc(self) -> _builtins.str:
        """
        The detection feature rule description.
        """
        return pulumi.get(self, "chk_feature_desc")

    @_builtins.property
    @pulumi.getter(name="chkFeatureId")
    def chk_feature_id(self) -> _builtins.int:
        """
        The detection feature rule ID.
        """
        return pulumi.get(self, "chk_feature_id")

    @_builtins.property
    @pulumi.getter(name="chkFeatureName")
    def chk_feature_name(self) -> _builtins.str:
        """
        The detection feature rule name.
        """
        return pulumi.get(self, "chk_feature_name")

    @_builtins.property
    @pulumi.getter
    def editable(self) -> _builtins.int:
        """
        Whether the configuration information can be edited.
        The valid values are as follows:
        """
        return pulumi.get(self, "editable")

    @_builtins.property
    @pulumi.getter(name="featureConfigure")
    def feature_configure(self) -> _builtins.str:
        """
        The detection feature rule configuration information.
        """
        return pulumi.get(self, "feature_configure")

    @_builtins.property
    @pulumi.getter(name="optionalProtectiveAction")
    def optional_protective_action(self) -> _builtins.int:
        """
        The available protection action.
        The valid values are as follows:
        """
        return pulumi.get(self, "optional_protective_action")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Specifies the OS type.
        The valid values are as follows:
        + **Linux**
        + **Windows**
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="protectiveAction")
    def protective_action(self) -> _builtins.int:
        """
        The default protection action.
        The valid values are as follows:
        """
        return pulumi.get(self, "protective_action")


@pulumi.output_type
class GetRaspServersDataListResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 agent_status: _builtins.str,
                 agent_support_auto_attach: _builtins.bool,
                 agent_version: _builtins.str,
                 auto_attach: _builtins.bool,
                 group_id: _builtins.str,
                 group_name: _builtins.str,
                 host_id: _builtins.str,
                 host_name: _builtins.str,
                 is_friendly_user: _builtins.bool,
                 os_type: _builtins.str,
                 policy_name: _builtins.str,
                 private_ip: _builtins.str,
                 protect_event_num: _builtins.int,
                 protect_status: _builtins.str,
                 public_ip: _builtins.str,
                 rasp_port: _builtins.int,
                 rasp_status: _builtins.str):
        """
        :param _builtins.str agent_id: The agent ID.
        :param _builtins.str agent_status: The agent status.
        :param _builtins.bool agent_support_auto_attach: Whether the agent supports dynamic loading.
        :param _builtins.str agent_version: The agent version.
        :param _builtins.bool auto_attach: Whether dynamic loading is enabled.
        :param _builtins.str group_id: The server group ID.
        :param _builtins.str group_name: The server group name.
        :param _builtins.str host_id: The host ID.
        :param _builtins.str host_name: Specifies the host name.
        :param _builtins.bool is_friendly_user: Whether the user is a friendly user.
        :param _builtins.str os_type: Specifies the operating system type.
               The valid values are as follows:
               + **linux**
               + **windows**
        :param _builtins.str policy_name: The protection policy name.
        :param _builtins.str private_ip: The private IP address.
        :param _builtins.int protect_event_num: The number of protection events.
        :param _builtins.str protect_status: The protection status.
        :param _builtins.str public_ip: The elastic IP address.
        :param _builtins.int rasp_port: The RASP port number.
        :param _builtins.str rasp_status: The application protection status.
               The valid values are as follows:
               + **0**: Protection being enabled.
               + **2**: Protection successful.
               + **4**: Protection failed (installation failed).
               + **6**: Not protected.
               + **8**: Partially protected.
               + **9**: Protection failed.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "agent_status", agent_status)
        pulumi.set(__self__, "agent_support_auto_attach", agent_support_auto_attach)
        pulumi.set(__self__, "agent_version", agent_version)
        pulumi.set(__self__, "auto_attach", auto_attach)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "is_friendly_user", is_friendly_user)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "protect_event_num", protect_event_num)
        pulumi.set(__self__, "protect_status", protect_status)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "rasp_port", rasp_port)
        pulumi.set(__self__, "rasp_status", rasp_status)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        The agent ID.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="agentStatus")
    def agent_status(self) -> _builtins.str:
        """
        The agent status.
        """
        return pulumi.get(self, "agent_status")

    @_builtins.property
    @pulumi.getter(name="agentSupportAutoAttach")
    def agent_support_auto_attach(self) -> _builtins.bool:
        """
        Whether the agent supports dynamic loading.
        """
        return pulumi.get(self, "agent_support_auto_attach")

    @_builtins.property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> _builtins.str:
        """
        The agent version.
        """
        return pulumi.get(self, "agent_version")

    @_builtins.property
    @pulumi.getter(name="autoAttach")
    def auto_attach(self) -> _builtins.bool:
        """
        Whether dynamic loading is enabled.
        """
        return pulumi.get(self, "auto_attach")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        The server group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        The server group name.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        The host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="isFriendlyUser")
    def is_friendly_user(self) -> _builtins.bool:
        """
        Whether the user is a friendly user.
        """
        return pulumi.get(self, "is_friendly_user")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Specifies the operating system type.
        The valid values are as follows:
        + **linux**
        + **windows**
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        The protection policy name.
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The private IP address.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="protectEventNum")
    def protect_event_num(self) -> _builtins.int:
        """
        The number of protection events.
        """
        return pulumi.get(self, "protect_event_num")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> _builtins.str:
        """
        The protection status.
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The elastic IP address.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="raspPort")
    def rasp_port(self) -> _builtins.int:
        """
        The RASP port number.
        """
        return pulumi.get(self, "rasp_port")

    @_builtins.property
    @pulumi.getter(name="raspStatus")
    def rasp_status(self) -> _builtins.str:
        """
        The application protection status.
        The valid values are as follows:
        + **0**: Protection being enabled.
        + **2**: Protection successful.
        + **4**: Protection failed (installation failed).
        + **6**: Not protected.
        + **8**: Partially protected.
        + **9**: Protection failed.
        """
        return pulumi.get(self, "rasp_status")


@pulumi.output_type
class GetResourceQuotasDataListResult(dict):
    def __init__(__self__, *,
                 available_num: _builtins.int,
                 available_resources_lists: Sequence['outputs.GetResourceQuotasDataListAvailableResourcesListResult'],
                 total_num: _builtins.int,
                 used_num: _builtins.int,
                 version: _builtins.str):
        """
        :param _builtins.int available_num: The available quota number.
        :param Sequence['GetResourceQuotasDataListAvailableResourcesListArgs'] available_resources_lists: The list of available resources.
               The available_resources_list structure is documented below.
        :param _builtins.int total_num: The total quota number.
        :param _builtins.int used_num: The used quota number.
        :param _builtins.str version: Specifies the HSS version. The valid values are as follows:
               + **hss.version.null**: No version.
               + **hss.version.basic**: Basic edition.
               + **hss.version.advanced**: Professional edition.
               + **hss.version.enterprise**: Enterprise edition.
               + **hss.version.premium**: Premium edition.
               + **hss.version.wtp**: Web tamper protection edition.
               + **hss.version.container.enterprise**: Container edition.
        """
        pulumi.set(__self__, "available_num", available_num)
        pulumi.set(__self__, "available_resources_lists", available_resources_lists)
        pulumi.set(__self__, "total_num", total_num)
        pulumi.set(__self__, "used_num", used_num)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="availableNum")
    def available_num(self) -> _builtins.int:
        """
        The available quota number.
        """
        return pulumi.get(self, "available_num")

    @_builtins.property
    @pulumi.getter(name="availableResourcesLists")
    def available_resources_lists(self) -> Sequence['outputs.GetResourceQuotasDataListAvailableResourcesListResult']:
        """
        The list of available resources.
        The available_resources_list structure is documented below.
        """
        return pulumi.get(self, "available_resources_lists")

    @_builtins.property
    @pulumi.getter(name="totalNum")
    def total_num(self) -> _builtins.int:
        """
        The total quota number.
        """
        return pulumi.get(self, "total_num")

    @_builtins.property
    @pulumi.getter(name="usedNum")
    def used_num(self) -> _builtins.int:
        """
        The used quota number.
        """
        return pulumi.get(self, "used_num")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the HSS version. The valid values are as follows:
        + **hss.version.null**: No version.
        + **hss.version.basic**: Basic edition.
        + **hss.version.advanced**: Professional edition.
        + **hss.version.enterprise**: Enterprise edition.
        + **hss.version.premium**: Premium edition.
        + **hss.version.wtp**: Web tamper protection edition.
        + **hss.version.container.enterprise**: Container edition.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetResourceQuotasDataListAvailableResourcesListResult(dict):
    def __init__(__self__, *,
                 current_time: _builtins.str,
                 resource_id: _builtins.str,
                 shared_quota: _builtins.str):
        """
        :param _builtins.str current_time: The current time.
        :param _builtins.str resource_id: The resource ID.
        :param _builtins.str shared_quota: Whether the quota is shared. The valid values are:
               + **shared**: The quota is shared.
               + **unshared**: The quota is not shared.
        """
        pulumi.set(__self__, "current_time", current_time)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "shared_quota", shared_quota)

    @_builtins.property
    @pulumi.getter(name="currentTime")
    def current_time(self) -> _builtins.str:
        """
        The current time.
        """
        return pulumi.get(self, "current_time")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="sharedQuota")
    def shared_quota(self) -> _builtins.str:
        """
        Whether the quota is shared. The valid values are:
        + **shared**: The quota is shared.
        + **unshared**: The quota is not shared.
        """
        return pulumi.get(self, "shared_quota")


@pulumi.output_type
class GetSettingLoginCommonIpsDataListResult(dict):
    def __init__(__self__, *,
                 host_id_lists: Sequence[_builtins.str],
                 ip_addr: _builtins.str,
                 total_num: _builtins.int):
        """
        :param Sequence[_builtins.str] host_id_lists: The list of server IDs associated with the IP address.
        :param _builtins.str ip_addr: Specifies the login IP address.
               The IP address can a specify IP or a network segment. e.g. **192.68.78.3** or **192.78.10.0/24**.
        :param _builtins.int total_num: The total number of hosts associated with the IP address.
        """
        pulumi.set(__self__, "host_id_lists", host_id_lists)
        pulumi.set(__self__, "ip_addr", ip_addr)
        pulumi.set(__self__, "total_num", total_num)

    @_builtins.property
    @pulumi.getter(name="hostIdLists")
    def host_id_lists(self) -> Sequence[_builtins.str]:
        """
        The list of server IDs associated with the IP address.
        """
        return pulumi.get(self, "host_id_lists")

    @_builtins.property
    @pulumi.getter(name="ipAddr")
    def ip_addr(self) -> _builtins.str:
        """
        Specifies the login IP address.
        The IP address can a specify IP or a network segment. e.g. **192.68.78.3** or **192.78.10.0/24**.
        """
        return pulumi.get(self, "ip_addr")

    @_builtins.property
    @pulumi.getter(name="totalNum")
    def total_num(self) -> _builtins.int:
        """
        The total number of hosts associated with the IP address.
        """
        return pulumi.get(self, "total_num")


@pulumi.output_type
class GetSettingLoginCommonLocationsDataListResult(dict):
    def __init__(__self__, *,
                 area_code: _builtins.int,
                 host_id_lists: Sequence[_builtins.str],
                 total_num: _builtins.int):
        """
        :param _builtins.int area_code: Specifies the code of countries and cities.
        :param Sequence[_builtins.str] host_id_lists: The list of host IDs.
        :param _builtins.int total_num: The total number of hosts in the common login location.
        """
        pulumi.set(__self__, "area_code", area_code)
        pulumi.set(__self__, "host_id_lists", host_id_lists)
        pulumi.set(__self__, "total_num", total_num)

    @_builtins.property
    @pulumi.getter(name="areaCode")
    def area_code(self) -> _builtins.int:
        """
        Specifies the code of countries and cities.
        """
        return pulumi.get(self, "area_code")

    @_builtins.property
    @pulumi.getter(name="hostIdLists")
    def host_id_lists(self) -> Sequence[_builtins.str]:
        """
        The list of host IDs.
        """
        return pulumi.get(self, "host_id_lists")

    @_builtins.property
    @pulumi.getter(name="totalNum")
    def total_num(self) -> _builtins.int:
        """
        The total number of hosts in the common login location.
        """
        return pulumi.get(self, "total_num")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The tags key
        :param Sequence[_builtins.str] values: The tags value list.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The tags key
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The tags value list.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVulnerabilitiesDataListResult(dict):
    def __init__(__self__, *,
                 cve_lists: Sequence['outputs.GetVulnerabilitiesDataListCveListResult'],
                 description: _builtins.str,
                 fixed_num: _builtins.int,
                 host_id_lists: Sequence[_builtins.str],
                 host_num: _builtins.int,
                 hosts_nums: Sequence['outputs.GetVulnerabilitiesDataListHostsNumResult'],
                 ignored_num: _builtins.int,
                 label_lists: Sequence[_builtins.str],
                 patch_url: _builtins.str,
                 repair_necessity: _builtins.str,
                 repair_priority: _builtins.str,
                 repair_priority_lists: Sequence['outputs.GetVulnerabilitiesDataListRepairPriorityListResult'],
                 repair_success_num: _builtins.int,
                 scan_time: _builtins.int,
                 severity_level: _builtins.str,
                 solution_detail: _builtins.str,
                 type: _builtins.str,
                 unhandle_host_num: _builtins.int,
                 url: _builtins.str,
                 verify_num: _builtins.int,
                 vul_id: _builtins.str,
                 vul_name: _builtins.str):
        """
        :param Sequence['GetVulnerabilitiesDataListCveListArgs'] cve_lists: The CVE list
        :param _builtins.str description: The vulnerability description
        :param _builtins.int fixed_num: The number of repairs.
        :param Sequence[_builtins.str] host_id_lists: The list of servers where the vulnerability can be handled.
        :param _builtins.int host_num: The number of servers corresponding to the fixing priority.
        :param Sequence['GetVulnerabilitiesDataListHostsNumArgs'] hosts_nums: The number of affected servers.
        :param _builtins.int ignored_num: The number of ignored.
        :param Sequence[_builtins.str] label_lists: Specifies the vulnerability tags.
               Multiple labels can be transferred for filtering, separated by commas (,). For example, **test1,test2**.
        :param _builtins.str patch_url: The patch address.
        :param _builtins.str repair_necessity: The necessity of fixing a vulnerability.
               The valid values are as follows:
               + **Critical**: The CVSS score of the vulnerability is greater than or equal to `9`, corresponding to the high risk
               level on the console.
               + **High**: The CVSS score of the vulnerability is greater than or equal to `7` and less than `9`, corresponding to
               the medium risk level on the console.
               + **Medium**: The CVSS score of the vulnerability is greater than or equal to `4` and less than `7`, corresponding to
               the medium risk level on the console.
               + **Low**: The CVSS score of the vulnerability is less than `4`, corresponding to the low risk level on the console.
        :param _builtins.str repair_priority: Specifies the fixing priority.
               The valid values are as follows:
               + **Critical**
               + **High**
               + **Medium**
               + **Low**
        :param Sequence['GetVulnerabilitiesDataListRepairPriorityListArgs'] repair_priority_lists: The number of servers corresponding to each fixing priority.
        :param _builtins.int repair_success_num: The number of successful repairs.
        :param _builtins.int scan_time: The latest scan time.
        :param _builtins.str severity_level: The vulnerability severity.
               The valid values are as follows:
               + **Critical**: The CVSS score of the vulnerability is greater than or equal to `9`, corresponding to the high risk
               level on the console.
               + **High**: The CVSS score of the vulnerability is greater than or equal to `7` and less than `9`, corresponding to
               the medium risk level on the console.
               + **Medium**: The CVSS score of the vulnerability is greater than or equal to `4` and less than `7`, corresponding to
               the medium risk level on the console.
               + **Low**: The CVSS score of the vulnerability is less than 4, corresponding to the low risk level on the console.
        :param _builtins.str solution_detail: The vulnerability fixing guide.
        :param _builtins.str type: Specifies the vulnerability type.
               The valid values are as follows:
               + **linux_vul**: Linux vulnerability.
               + **windows_vul**: Windows vulnerability.
               + **web_cms**: Web-CMS vulnerability.
               + **app_vul**: Application vulnerability.
               + **urgent_vul**: Emergency vulnerability.
        :param _builtins.int unhandle_host_num: The number of unhandled servers, excluding ignored and fixed servers.
        :param _builtins.str url: The vulnerability URL.
        :param _builtins.int verify_num: The number of verifications.
        :param _builtins.str vul_id: Specifies the vulnerability ID.
        :param _builtins.str vul_name: Specifies the vulnerability name.
        """
        pulumi.set(__self__, "cve_lists", cve_lists)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "fixed_num", fixed_num)
        pulumi.set(__self__, "host_id_lists", host_id_lists)
        pulumi.set(__self__, "host_num", host_num)
        pulumi.set(__self__, "hosts_nums", hosts_nums)
        pulumi.set(__self__, "ignored_num", ignored_num)
        pulumi.set(__self__, "label_lists", label_lists)
        pulumi.set(__self__, "patch_url", patch_url)
        pulumi.set(__self__, "repair_necessity", repair_necessity)
        pulumi.set(__self__, "repair_priority", repair_priority)
        pulumi.set(__self__, "repair_priority_lists", repair_priority_lists)
        pulumi.set(__self__, "repair_success_num", repair_success_num)
        pulumi.set(__self__, "scan_time", scan_time)
        pulumi.set(__self__, "severity_level", severity_level)
        pulumi.set(__self__, "solution_detail", solution_detail)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unhandle_host_num", unhandle_host_num)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "verify_num", verify_num)
        pulumi.set(__self__, "vul_id", vul_id)
        pulumi.set(__self__, "vul_name", vul_name)

    @_builtins.property
    @pulumi.getter(name="cveLists")
    def cve_lists(self) -> Sequence['outputs.GetVulnerabilitiesDataListCveListResult']:
        """
        The CVE list
        """
        return pulumi.get(self, "cve_lists")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The vulnerability description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="fixedNum")
    def fixed_num(self) -> _builtins.int:
        """
        The number of repairs.
        """
        return pulumi.get(self, "fixed_num")

    @_builtins.property
    @pulumi.getter(name="hostIdLists")
    def host_id_lists(self) -> Sequence[_builtins.str]:
        """
        The list of servers where the vulnerability can be handled.
        """
        return pulumi.get(self, "host_id_lists")

    @_builtins.property
    @pulumi.getter(name="hostNum")
    def host_num(self) -> _builtins.int:
        """
        The number of servers corresponding to the fixing priority.
        """
        return pulumi.get(self, "host_num")

    @_builtins.property
    @pulumi.getter(name="hostsNums")
    def hosts_nums(self) -> Sequence['outputs.GetVulnerabilitiesDataListHostsNumResult']:
        """
        The number of affected servers.
        """
        return pulumi.get(self, "hosts_nums")

    @_builtins.property
    @pulumi.getter(name="ignoredNum")
    def ignored_num(self) -> _builtins.int:
        """
        The number of ignored.
        """
        return pulumi.get(self, "ignored_num")

    @_builtins.property
    @pulumi.getter(name="labelLists")
    def label_lists(self) -> Sequence[_builtins.str]:
        """
        Specifies the vulnerability tags.
        Multiple labels can be transferred for filtering, separated by commas (,). For example, **test1,test2**.
        """
        return pulumi.get(self, "label_lists")

    @_builtins.property
    @pulumi.getter(name="patchUrl")
    def patch_url(self) -> _builtins.str:
        """
        The patch address.
        """
        return pulumi.get(self, "patch_url")

    @_builtins.property
    @pulumi.getter(name="repairNecessity")
    def repair_necessity(self) -> _builtins.str:
        """
        The necessity of fixing a vulnerability.
        The valid values are as follows:
        + **Critical**: The CVSS score of the vulnerability is greater than or equal to `9`, corresponding to the high risk
        level on the console.
        + **High**: The CVSS score of the vulnerability is greater than or equal to `7` and less than `9`, corresponding to
        the medium risk level on the console.
        + **Medium**: The CVSS score of the vulnerability is greater than or equal to `4` and less than `7`, corresponding to
        the medium risk level on the console.
        + **Low**: The CVSS score of the vulnerability is less than `4`, corresponding to the low risk level on the console.
        """
        return pulumi.get(self, "repair_necessity")

    @_builtins.property
    @pulumi.getter(name="repairPriority")
    def repair_priority(self) -> _builtins.str:
        """
        Specifies the fixing priority.
        The valid values are as follows:
        + **Critical**
        + **High**
        + **Medium**
        + **Low**
        """
        return pulumi.get(self, "repair_priority")

    @_builtins.property
    @pulumi.getter(name="repairPriorityLists")
    def repair_priority_lists(self) -> Sequence['outputs.GetVulnerabilitiesDataListRepairPriorityListResult']:
        """
        The number of servers corresponding to each fixing priority.
        """
        return pulumi.get(self, "repair_priority_lists")

    @_builtins.property
    @pulumi.getter(name="repairSuccessNum")
    def repair_success_num(self) -> _builtins.int:
        """
        The number of successful repairs.
        """
        return pulumi.get(self, "repair_success_num")

    @_builtins.property
    @pulumi.getter(name="scanTime")
    def scan_time(self) -> _builtins.int:
        """
        The latest scan time.
        """
        return pulumi.get(self, "scan_time")

    @_builtins.property
    @pulumi.getter(name="severityLevel")
    def severity_level(self) -> _builtins.str:
        """
        The vulnerability severity.
        The valid values are as follows:
        + **Critical**: The CVSS score of the vulnerability is greater than or equal to `9`, corresponding to the high risk
        level on the console.
        + **High**: The CVSS score of the vulnerability is greater than or equal to `7` and less than `9`, corresponding to
        the medium risk level on the console.
        + **Medium**: The CVSS score of the vulnerability is greater than or equal to `4` and less than `7`, corresponding to
        the medium risk level on the console.
        + **Low**: The CVSS score of the vulnerability is less than 4, corresponding to the low risk level on the console.
        """
        return pulumi.get(self, "severity_level")

    @_builtins.property
    @pulumi.getter(name="solutionDetail")
    def solution_detail(self) -> _builtins.str:
        """
        The vulnerability fixing guide.
        """
        return pulumi.get(self, "solution_detail")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the vulnerability type.
        The valid values are as follows:
        + **linux_vul**: Linux vulnerability.
        + **windows_vul**: Windows vulnerability.
        + **web_cms**: Web-CMS vulnerability.
        + **app_vul**: Application vulnerability.
        + **urgent_vul**: Emergency vulnerability.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="unhandleHostNum")
    def unhandle_host_num(self) -> _builtins.int:
        """
        The number of unhandled servers, excluding ignored and fixed servers.
        """
        return pulumi.get(self, "unhandle_host_num")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The vulnerability URL.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter(name="verifyNum")
    def verify_num(self) -> _builtins.int:
        """
        The number of verifications.
        """
        return pulumi.get(self, "verify_num")

    @_builtins.property
    @pulumi.getter(name="vulId")
    def vul_id(self) -> _builtins.str:
        """
        Specifies the vulnerability ID.
        """
        return pulumi.get(self, "vul_id")

    @_builtins.property
    @pulumi.getter(name="vulName")
    def vul_name(self) -> _builtins.str:
        """
        Specifies the vulnerability name.
        """
        return pulumi.get(self, "vul_name")


@pulumi.output_type
class GetVulnerabilitiesDataListCveListResult(dict):
    def __init__(__self__, *,
                 cve_id: _builtins.str,
                 cvss: _builtins.int):
        """
        :param _builtins.str cve_id: Specifies the CVE ID.
        :param _builtins.int cvss: The CVSS score.
        """
        pulumi.set(__self__, "cve_id", cve_id)
        pulumi.set(__self__, "cvss", cvss)

    @_builtins.property
    @pulumi.getter(name="cveId")
    def cve_id(self) -> _builtins.str:
        """
        Specifies the CVE ID.
        """
        return pulumi.get(self, "cve_id")

    @_builtins.property
    @pulumi.getter
    def cvss(self) -> _builtins.int:
        """
        The CVSS score.
        """
        return pulumi.get(self, "cvss")


@pulumi.output_type
class GetVulnerabilitiesDataListHostsNumResult(dict):
    def __init__(__self__, *,
                 common: _builtins.int,
                 important: _builtins.int,
                 test: _builtins.int):
        """
        :param _builtins.int common: The number of common servers.
        :param _builtins.int important: The number of important servers.
        :param _builtins.int test: The number of test servers.
        """
        pulumi.set(__self__, "common", common)
        pulumi.set(__self__, "important", important)
        pulumi.set(__self__, "test", test)

    @_builtins.property
    @pulumi.getter
    def common(self) -> _builtins.int:
        """
        The number of common servers.
        """
        return pulumi.get(self, "common")

    @_builtins.property
    @pulumi.getter
    def important(self) -> _builtins.int:
        """
        The number of important servers.
        """
        return pulumi.get(self, "important")

    @_builtins.property
    @pulumi.getter
    def test(self) -> _builtins.int:
        """
        The number of test servers.
        """
        return pulumi.get(self, "test")


@pulumi.output_type
class GetVulnerabilitiesDataListRepairPriorityListResult(dict):
    def __init__(__self__, *,
                 host_num: _builtins.int,
                 repair_priority: _builtins.str):
        """
        :param _builtins.int host_num: The number of servers corresponding to the fixing priority.
        :param _builtins.str repair_priority: Specifies the fixing priority.
               The valid values are as follows:
               + **Critical**
               + **High**
               + **Medium**
               + **Low**
        """
        pulumi.set(__self__, "host_num", host_num)
        pulumi.set(__self__, "repair_priority", repair_priority)

    @_builtins.property
    @pulumi.getter(name="hostNum")
    def host_num(self) -> _builtins.int:
        """
        The number of servers corresponding to the fixing priority.
        """
        return pulumi.get(self, "host_num")

    @_builtins.property
    @pulumi.getter(name="repairPriority")
    def repair_priority(self) -> _builtins.str:
        """
        Specifies the fixing priority.
        The valid values are as follows:
        + **Critical**
        + **High**
        + **Medium**
        + **Low**
        """
        return pulumi.get(self, "repair_priority")


@pulumi.output_type
class GetVulnerabilityHandleHistoryDataListResult(dict):
    def __init__(__self__, *,
                 app_name: _builtins.str,
                 app_path: _builtins.str,
                 app_version: _builtins.str,
                 asset_value: _builtins.str,
                 cluster_id: _builtins.str,
                 container_id: _builtins.str,
                 container_name: _builtins.str,
                 cve_lists: Sequence['outputs.GetVulnerabilityHandleHistoryDataListCveListResult'],
                 description: _builtins.str,
                 failed_reason: _builtins.str,
                 handle_time: _builtins.str,
                 handle_type: _builtins.str,
                 host_id: _builtins.str,
                 host_name: _builtins.str,
                 id: _builtins.str,
                 private_ip: _builtins.str,
                 public_ip: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 user_name: _builtins.str,
                 vul_id: _builtins.str,
                 vul_name: _builtins.str):
        """
        :param _builtins.str app_name: The software name.
        :param _builtins.str app_path: The application software path.
        :param _builtins.str app_version: The software version.
        :param _builtins.str asset_value: Specifies the asset importance.
               The valid values are as follows:
               + **important**
               + **common**
               + **test**
        :param _builtins.str cluster_id: Specifies the cluster ID.
        :param _builtins.str container_id: The container ID.
        :param _builtins.str container_name: The container name
        :param Sequence['GetVulnerabilityHandleHistoryDataListCveListArgs'] cve_lists: The CVE list
        :param _builtins.str description: The remarks.
        :param _builtins.str failed_reason: The failure cause.
        :param _builtins.str handle_time: The handling time.
        :param _builtins.str handle_type: The handling type.
        :param _builtins.str host_id: The host ID.
        :param _builtins.str host_name: Specifies the host name.
        :param _builtins.str id: The history record ID.
        :param _builtins.str private_ip: Specifies the server private IP address.
        :param _builtins.str public_ip: Specifies the server EIP.
        :param _builtins.str status: Specifies the vulnerability status.
               The valid values are as follows:
               + **vul_status_unfix**: Indicates not fixed.
               + **vul_status_ignored**: Indicates ignored.
               + **vul_status_verified**: Indicates verification in progress.
               + **vul_status_fixing**: Indicates fixing is in progress.
               + **vul_status_fixed**: Indicates fix succeeded.
               + **vul_status_reboot**: Indicates the issue is fixed and waiting for restart.
               + **vul_status_failed**: Indicates the issue failed to be fixed.
               + **vul_status_fix_after_reboot**: Indicates restart the host and try again.
        :param _builtins.str type: The vulnerability type.
        :param _builtins.str user_name: The user name.
        :param _builtins.str vul_id: Specifies the vulnerability ID.
        :param _builtins.str vul_name: The vulnerability name.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "app_path", app_path)
        pulumi.set(__self__, "app_version", app_version)
        pulumi.set(__self__, "asset_value", asset_value)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "container_id", container_id)
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "cve_lists", cve_lists)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "failed_reason", failed_reason)
        pulumi.set(__self__, "handle_time", handle_time)
        pulumi.set(__self__, "handle_type", handle_type)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "vul_id", vul_id)
        pulumi.set(__self__, "vul_name", vul_name)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        The software name.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="appPath")
    def app_path(self) -> _builtins.str:
        """
        The application software path.
        """
        return pulumi.get(self, "app_path")

    @_builtins.property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> _builtins.str:
        """
        The software version.
        """
        return pulumi.get(self, "app_version")

    @_builtins.property
    @pulumi.getter(name="assetValue")
    def asset_value(self) -> _builtins.str:
        """
        Specifies the asset importance.
        The valid values are as follows:
        + **important**
        + **common**
        + **test**
        """
        return pulumi.get(self, "asset_value")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="containerId")
    def container_id(self) -> _builtins.str:
        """
        The container ID.
        """
        return pulumi.get(self, "container_id")

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> _builtins.str:
        """
        The container name
        """
        return pulumi.get(self, "container_name")

    @_builtins.property
    @pulumi.getter(name="cveLists")
    def cve_lists(self) -> Sequence['outputs.GetVulnerabilityHandleHistoryDataListCveListResult']:
        """
        The CVE list
        """
        return pulumi.get(self, "cve_lists")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The remarks.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="failedReason")
    def failed_reason(self) -> _builtins.str:
        """
        The failure cause.
        """
        return pulumi.get(self, "failed_reason")

    @_builtins.property
    @pulumi.getter(name="handleTime")
    def handle_time(self) -> _builtins.str:
        """
        The handling time.
        """
        return pulumi.get(self, "handle_time")

    @_builtins.property
    @pulumi.getter(name="handleType")
    def handle_type(self) -> _builtins.str:
        """
        The handling type.
        """
        return pulumi.get(self, "handle_type")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        The host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The history record ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Specifies the server private IP address.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        Specifies the server EIP.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the vulnerability status.
        The valid values are as follows:
        + **vul_status_unfix**: Indicates not fixed.
        + **vul_status_ignored**: Indicates ignored.
        + **vul_status_verified**: Indicates verification in progress.
        + **vul_status_fixing**: Indicates fixing is in progress.
        + **vul_status_fixed**: Indicates fix succeeded.
        + **vul_status_reboot**: Indicates the issue is fixed and waiting for restart.
        + **vul_status_failed**: Indicates the issue failed to be fixed.
        + **vul_status_fix_after_reboot**: Indicates restart the host and try again.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The vulnerability type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        The user name.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="vulId")
    def vul_id(self) -> _builtins.str:
        """
        Specifies the vulnerability ID.
        """
        return pulumi.get(self, "vul_id")

    @_builtins.property
    @pulumi.getter(name="vulName")
    def vul_name(self) -> _builtins.str:
        """
        The vulnerability name.
        """
        return pulumi.get(self, "vul_name")


@pulumi.output_type
class GetVulnerabilityHandleHistoryDataListCveListResult(dict):
    def __init__(__self__, *,
                 cve_id: _builtins.str,
                 cvss: _builtins.int,
                 vul_id: _builtins.str):
        """
        :param _builtins.str cve_id: The CVE ID.
        :param _builtins.int cvss: The CVSS score.
        :param _builtins.str vul_id: Specifies the vulnerability ID.
        """
        pulumi.set(__self__, "cve_id", cve_id)
        pulumi.set(__self__, "cvss", cvss)
        pulumi.set(__self__, "vul_id", vul_id)

    @_builtins.property
    @pulumi.getter(name="cveId")
    def cve_id(self) -> _builtins.str:
        """
        The CVE ID.
        """
        return pulumi.get(self, "cve_id")

    @_builtins.property
    @pulumi.getter
    def cvss(self) -> _builtins.int:
        """
        The CVSS score.
        """
        return pulumi.get(self, "cvss")

    @_builtins.property
    @pulumi.getter(name="vulId")
    def vul_id(self) -> _builtins.str:
        """
        Specifies the vulnerability ID.
        """
        return pulumi.get(self, "vul_id")


@pulumi.output_type
class GetVulnerabilityHostsDataListResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 app_path: _builtins.str,
                 asset_value: _builtins.str,
                 cve_id_lists: Sequence[_builtins.str],
                 cve_num: _builtins.int,
                 disabled_operate_types: Sequence['outputs.GetVulnerabilityHostsDataListDisabledOperateTypeResult'],
                 first_scan_time: _builtins.int,
                 group_id: _builtins.str,
                 group_name: _builtins.str,
                 host_id: _builtins.str,
                 host_ip: _builtins.str,
                 host_name: _builtins.str,
                 is_affect_business: _builtins.bool,
                 os_type: _builtins.str,
                 private_ip: _builtins.str,
                 public_ip: _builtins.str,
                 region_name: _builtins.str,
                 repair_cmd: _builtins.str,
                 repair_priority: _builtins.str,
                 scan_time: _builtins.int,
                 severity_level: _builtins.str,
                 status: _builtins.str,
                 support_restore: _builtins.bool,
                 version: _builtins.str):
        """
        :param _builtins.str agent_id: The agent ID.
        :param _builtins.str app_path: The application software path.
        :param _builtins.str asset_value: Specifies the asset importance.
               The valid values are as follows:
               + **important**
               + **common**
               + **test**
        :param Sequence[_builtins.str] cve_id_lists: The list of CVE IDs.
        :param _builtins.int cve_num: The number of CVE vulnerabilities.
        :param Sequence['GetVulnerabilityHostsDataListDisabledOperateTypeArgs'] disabled_operate_types: The list of operation types of vulnerabilities that cannot be performed.
               The disabled_operate_types structure is documented below.
        :param _builtins.int first_scan_time: The first scan time.
        :param _builtins.str group_id: The ID of the server group.
        :param _builtins.str group_name: Specifies the server group name.
        :param _builtins.str host_id: The ID of the host.
        :param _builtins.str host_ip: Specifies the IP address of the host.
        :param _builtins.str host_name: Specifies the name of the host.
        :param _builtins.bool is_affect_business: Specifies whether business are affected.
               The value can be **true** or **false**. Defaults to **false**.
        :param _builtins.str os_type: The operating system type of the host.
        :param _builtins.str private_ip: The private IP address of the host.
        :param _builtins.str public_ip: The public IP address of the host.
        :param _builtins.str region_name: The region where the host is located.
        :param _builtins.str repair_cmd: The command to be executed to fix the vulnerability.
        :param _builtins.str repair_priority: Specifies the repair priority.
               The valid values are as follows:
               + **Critical**
               + **High**
               + **Medium**
               + **Low**
        :param _builtins.int scan_time: The scan time.
        :param _builtins.str severity_level: Specifies the risk level.
               The valid values are as follows:
               + **Critical**
               + **High**
               + **Medium**
               + **Low**
        :param _builtins.str status: Specifies the vulnerability status.
               The valid values are as follows:
               + **vul_status_unfix**: Indicates not fixed.
               + **vul_status_ignored**: Indicates ignored.
               + **vul_status_verified**: Indicates verification in progress.
               + **vul_status_fixing**: Indicates fixing is in progress.
               + **vul_status_fixed**: Indicates fix succeeded.
               + **vul_status_reboot**: Indicates the issue is fixed and waiting for restart.
               + **vul_status_failed**: Indicates the issue failed to be fixed.
               + **vul_status_fix_after_reboot**: Indicates restart the host and try again.
        :param _builtins.bool support_restore: Whether data can be rolled back to the backup created when the vulnerability was fixed.
        :param _builtins.str version: The quota version bound to the host.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "app_path", app_path)
        pulumi.set(__self__, "asset_value", asset_value)
        pulumi.set(__self__, "cve_id_lists", cve_id_lists)
        pulumi.set(__self__, "cve_num", cve_num)
        pulumi.set(__self__, "disabled_operate_types", disabled_operate_types)
        pulumi.set(__self__, "first_scan_time", first_scan_time)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_ip", host_ip)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "is_affect_business", is_affect_business)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "repair_cmd", repair_cmd)
        pulumi.set(__self__, "repair_priority", repair_priority)
        pulumi.set(__self__, "scan_time", scan_time)
        pulumi.set(__self__, "severity_level", severity_level)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_restore", support_restore)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        The agent ID.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="appPath")
    def app_path(self) -> _builtins.str:
        """
        The application software path.
        """
        return pulumi.get(self, "app_path")

    @_builtins.property
    @pulumi.getter(name="assetValue")
    def asset_value(self) -> _builtins.str:
        """
        Specifies the asset importance.
        The valid values are as follows:
        + **important**
        + **common**
        + **test**
        """
        return pulumi.get(self, "asset_value")

    @_builtins.property
    @pulumi.getter(name="cveIdLists")
    def cve_id_lists(self) -> Sequence[_builtins.str]:
        """
        The list of CVE IDs.
        """
        return pulumi.get(self, "cve_id_lists")

    @_builtins.property
    @pulumi.getter(name="cveNum")
    def cve_num(self) -> _builtins.int:
        """
        The number of CVE vulnerabilities.
        """
        return pulumi.get(self, "cve_num")

    @_builtins.property
    @pulumi.getter(name="disabledOperateTypes")
    def disabled_operate_types(self) -> Sequence['outputs.GetVulnerabilityHostsDataListDisabledOperateTypeResult']:
        """
        The list of operation types of vulnerabilities that cannot be performed.
        The disabled_operate_types structure is documented below.
        """
        return pulumi.get(self, "disabled_operate_types")

    @_builtins.property
    @pulumi.getter(name="firstScanTime")
    def first_scan_time(self) -> _builtins.int:
        """
        The first scan time.
        """
        return pulumi.get(self, "first_scan_time")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        The ID of the server group.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Specifies the server group name.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        The ID of the host.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> _builtins.str:
        """
        Specifies the IP address of the host.
        """
        return pulumi.get(self, "host_ip")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the name of the host.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="isAffectBusiness")
    def is_affect_business(self) -> _builtins.bool:
        """
        Specifies whether business are affected.
        The value can be **true** or **false**. Defaults to **false**.
        """
        return pulumi.get(self, "is_affect_business")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The operating system type of the host.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The private IP address of the host.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP address of the host.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="regionName")
    def region_name(self) -> _builtins.str:
        """
        The region where the host is located.
        """
        return pulumi.get(self, "region_name")

    @_builtins.property
    @pulumi.getter(name="repairCmd")
    def repair_cmd(self) -> _builtins.str:
        """
        The command to be executed to fix the vulnerability.
        """
        return pulumi.get(self, "repair_cmd")

    @_builtins.property
    @pulumi.getter(name="repairPriority")
    def repair_priority(self) -> _builtins.str:
        """
        Specifies the repair priority.
        The valid values are as follows:
        + **Critical**
        + **High**
        + **Medium**
        + **Low**
        """
        return pulumi.get(self, "repair_priority")

    @_builtins.property
    @pulumi.getter(name="scanTime")
    def scan_time(self) -> _builtins.int:
        """
        The scan time.
        """
        return pulumi.get(self, "scan_time")

    @_builtins.property
    @pulumi.getter(name="severityLevel")
    def severity_level(self) -> _builtins.str:
        """
        Specifies the risk level.
        The valid values are as follows:
        + **Critical**
        + **High**
        + **Medium**
        + **Low**
        """
        return pulumi.get(self, "severity_level")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the vulnerability status.
        The valid values are as follows:
        + **vul_status_unfix**: Indicates not fixed.
        + **vul_status_ignored**: Indicates ignored.
        + **vul_status_verified**: Indicates verification in progress.
        + **vul_status_fixing**: Indicates fixing is in progress.
        + **vul_status_fixed**: Indicates fix succeeded.
        + **vul_status_reboot**: Indicates the issue is fixed and waiting for restart.
        + **vul_status_failed**: Indicates the issue failed to be fixed.
        + **vul_status_fix_after_reboot**: Indicates restart the host and try again.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportRestore")
    def support_restore(self) -> _builtins.bool:
        """
        Whether data can be rolled back to the backup created when the vulnerability was fixed.
        """
        return pulumi.get(self, "support_restore")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The quota version bound to the host.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetVulnerabilityHostsDataListDisabledOperateTypeResult(dict):
    def __init__(__self__, *,
                 operate_type: _builtins.str,
                 reason: _builtins.str):
        """
        :param _builtins.str operate_type: The operation type.
               The valid values are as follows:
               + **ignore**
               + **not_ignore**
               + **immediate_repair**
               + **manual_repair**
               + **verify**
               + **add_to_whitelist**
        :param _builtins.str reason: The reason why the operation cannot be performed.
        """
        pulumi.set(__self__, "operate_type", operate_type)
        pulumi.set(__self__, "reason", reason)

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> _builtins.str:
        """
        The operation type.
        The valid values are as follows:
        + **ignore**
        + **not_ignore**
        + **immediate_repair**
        + **manual_repair**
        + **verify**
        + **add_to_whitelist**
        """
        return pulumi.get(self, "operate_type")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        """
        The reason why the operation cannot be performed.
        """
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetWebtamperHostsHostResult(dict):
    def __init__(__self__, *,
                 anti_tampering_times: _builtins.int,
                 detect_tampering_times: _builtins.int,
                 group_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 os_bit: _builtins.str,
                 os_type: _builtins.str,
                 private_ip: _builtins.str,
                 protect_status: _builtins.str,
                 public_ip: _builtins.str,
                 rasp_protect_status: _builtins.str):
        """
        :param _builtins.int anti_tampering_times: The number of defended tampering attacks.
        :param _builtins.int detect_tampering_times: The number of detected tampering attacks.
        :param _builtins.str group_name: Specifies the host group name to which the web tamper hosts belong to be queried.
        :param _builtins.str id: The ID of the web tamper host.
        :param _builtins.str name: Specifies the name of the web tamper host to be queried.
               This field will undergo a fuzzy matching query, the query result is for all web tamper hosts whose names contain this
               value.
        :param _builtins.str os_bit: The operating system bits of the web tamper host.
        :param _builtins.str os_type: Specifies the operating system type of the web tamper host to be queried.
               The value can be **linux** or **windows**.
        :param _builtins.str private_ip: Specifies the private IP address of the web tamper host to be queried.
        :param _builtins.str protect_status: Specifies the protection status of the web tamper hosts to be queried.
               The value can be **closed** or **opened**.
        :param _builtins.str public_ip: Specifies the elastic public IP address of the web tamper host to be queried.
        :param _builtins.str rasp_protect_status: Specifies the dynamic protection status of the web tamper hosts to be
               queried. The value can be **closed** or **opened**.
        """
        pulumi.set(__self__, "anti_tampering_times", anti_tampering_times)
        pulumi.set(__self__, "detect_tampering_times", detect_tampering_times)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_bit", os_bit)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "protect_status", protect_status)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "rasp_protect_status", rasp_protect_status)

    @_builtins.property
    @pulumi.getter(name="antiTamperingTimes")
    def anti_tampering_times(self) -> _builtins.int:
        """
        The number of defended tampering attacks.
        """
        return pulumi.get(self, "anti_tampering_times")

    @_builtins.property
    @pulumi.getter(name="detectTamperingTimes")
    def detect_tampering_times(self) -> _builtins.int:
        """
        The number of detected tampering attacks.
        """
        return pulumi.get(self, "detect_tampering_times")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Specifies the host group name to which the web tamper hosts belong to be queried.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the web tamper host.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the web tamper host to be queried.
        This field will undergo a fuzzy matching query, the query result is for all web tamper hosts whose names contain this
        value.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osBit")
    def os_bit(self) -> _builtins.str:
        """
        The operating system bits of the web tamper host.
        """
        return pulumi.get(self, "os_bit")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Specifies the operating system type of the web tamper host to be queried.
        The value can be **linux** or **windows**.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Specifies the private IP address of the web tamper host to be queried.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> _builtins.str:
        """
        Specifies the protection status of the web tamper hosts to be queried.
        The value can be **closed** or **opened**.
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        Specifies the elastic public IP address of the web tamper host to be queried.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="raspProtectStatus")
    def rasp_protect_status(self) -> _builtins.str:
        """
        Specifies the dynamic protection status of the web tamper hosts to be
        queried. The value can be **closed** or **opened**.
        """
        return pulumi.get(self, "rasp_protect_status")


