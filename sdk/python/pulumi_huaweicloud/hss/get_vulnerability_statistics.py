# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetVulnerabilityStatisticsResult',
    'AwaitableGetVulnerabilityStatisticsResult',
    'get_vulnerability_statistics',
    'get_vulnerability_statistics_output',
]

@pulumi.output_type
class GetVulnerabilityStatisticsResult:
    """
    A collection of values returned by getVulnerabilityStatistics.
    """
    def __init__(__self__, all_handle=None, enterprise_project_id=None, existed_vul_hosts=None, id=None, need_urgent_repair=None, region=None, supported=None, today_handle=None, unrepair=None, vul_library_update_time=None):
        if all_handle and not isinstance(all_handle, int):
            raise TypeError("Expected argument 'all_handle' to be a int")
        pulumi.set(__self__, "all_handle", all_handle)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if existed_vul_hosts and not isinstance(existed_vul_hosts, int):
            raise TypeError("Expected argument 'existed_vul_hosts' to be a int")
        pulumi.set(__self__, "existed_vul_hosts", existed_vul_hosts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if need_urgent_repair and not isinstance(need_urgent_repair, int):
            raise TypeError("Expected argument 'need_urgent_repair' to be a int")
        pulumi.set(__self__, "need_urgent_repair", need_urgent_repair)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if supported and not isinstance(supported, int):
            raise TypeError("Expected argument 'supported' to be a int")
        pulumi.set(__self__, "supported", supported)
        if today_handle and not isinstance(today_handle, int):
            raise TypeError("Expected argument 'today_handle' to be a int")
        pulumi.set(__self__, "today_handle", today_handle)
        if unrepair and not isinstance(unrepair, int):
            raise TypeError("Expected argument 'unrepair' to be a int")
        pulumi.set(__self__, "unrepair", unrepair)
        if vul_library_update_time and not isinstance(vul_library_update_time, int):
            raise TypeError("Expected argument 'vul_library_update_time' to be a int")
        pulumi.set(__self__, "vul_library_update_time", vul_library_update_time)

    @_builtins.property
    @pulumi.getter(name="allHandle")
    def all_handle(self) -> _builtins.int:
        """
        The accumulated number of vulnerabilities processed.
        """
        return pulumi.get(self, "all_handle")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="existedVulHosts")
    def existed_vul_hosts(self) -> _builtins.int:
        """
        The number of servers with vulnerabilities.
        """
        return pulumi.get(self, "existed_vul_hosts")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="needUrgentRepair")
    def need_urgent_repair(self) -> _builtins.int:
        """
        The number of vulnerabilities that require urgent repair.
        """
        return pulumi.get(self, "need_urgent_repair")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def supported(self) -> _builtins.int:
        """
        The number of supported vulnerabilities.
        """
        return pulumi.get(self, "supported")

    @_builtins.property
    @pulumi.getter(name="todayHandle")
    def today_handle(self) -> _builtins.int:
        """
        The number of vulnerabilities handled today.
        """
        return pulumi.get(self, "today_handle")

    @_builtins.property
    @pulumi.getter
    def unrepair(self) -> _builtins.int:
        """
        The number of unresolved vulnerabilities.
        """
        return pulumi.get(self, "unrepair")

    @_builtins.property
    @pulumi.getter(name="vulLibraryUpdateTime")
    def vul_library_update_time(self) -> _builtins.int:
        """
        The update time of vulnerability database.
        """
        return pulumi.get(self, "vul_library_update_time")


class AwaitableGetVulnerabilityStatisticsResult(GetVulnerabilityStatisticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVulnerabilityStatisticsResult(
            all_handle=self.all_handle,
            enterprise_project_id=self.enterprise_project_id,
            existed_vul_hosts=self.existed_vul_hosts,
            id=self.id,
            need_urgent_repair=self.need_urgent_repair,
            region=self.region,
            supported=self.supported,
            today_handle=self.today_handle,
            unrepair=self.unrepair,
            vul_library_update_time=self.vul_library_update_time)


def get_vulnerability_statistics(enterprise_project_id: Optional[_builtins.str] = None,
                                 region: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVulnerabilityStatisticsResult:
    """
    Use this data source to get HSS vulnerability statistics within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_vulnerability_statistics()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getVulnerabilityStatistics:getVulnerabilityStatistics', __args__, opts=opts, typ=GetVulnerabilityStatisticsResult).value

    return AwaitableGetVulnerabilityStatisticsResult(
        all_handle=pulumi.get(__ret__, 'all_handle'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        existed_vul_hosts=pulumi.get(__ret__, 'existed_vul_hosts'),
        id=pulumi.get(__ret__, 'id'),
        need_urgent_repair=pulumi.get(__ret__, 'need_urgent_repair'),
        region=pulumi.get(__ret__, 'region'),
        supported=pulumi.get(__ret__, 'supported'),
        today_handle=pulumi.get(__ret__, 'today_handle'),
        unrepair=pulumi.get(__ret__, 'unrepair'),
        vul_library_update_time=pulumi.get(__ret__, 'vul_library_update_time'))
def get_vulnerability_statistics_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVulnerabilityStatisticsResult]:
    """
    Use this data source to get HSS vulnerability statistics within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_vulnerability_statistics()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getVulnerabilityStatistics:getVulnerabilityStatistics', __args__, opts=opts, typ=GetVulnerabilityStatisticsResult)
    return __ret__.apply(lambda __response__: GetVulnerabilityStatisticsResult(
        all_handle=pulumi.get(__response__, 'all_handle'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        existed_vul_hosts=pulumi.get(__response__, 'existed_vul_hosts'),
        id=pulumi.get(__response__, 'id'),
        need_urgent_repair=pulumi.get(__response__, 'need_urgent_repair'),
        region=pulumi.get(__response__, 'region'),
        supported=pulumi.get(__response__, 'supported'),
        today_handle=pulumi.get(__response__, 'today_handle'),
        unrepair=pulumi.get(__response__, 'unrepair'),
        vul_library_update_time=pulumi.get(__response__, 'vul_library_update_time')))
