# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRansomwareProtectionPoliciesResult',
    'AwaitableGetRansomwareProtectionPoliciesResult',
    'get_ransomware_protection_policies',
    'get_ransomware_protection_policies_output',
]

@pulumi.output_type
class GetRansomwareProtectionPoliciesResult:
    """
    A collection of values returned by getRansomwareProtectionPolicies.
    """
    def __init__(__self__, enterprise_project_id=None, id=None, name=None, operating_system=None, policies=None, policy_id=None, region=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operating_system and not isinstance(operating_system, str):
            raise TypeError("Expected argument 'operating_system' to be a str")
        pulumi.set(__self__, "operating_system", operating_system)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of ransomware protection policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[_builtins.str]:
        """
        The operating system supported by the ransomware protection policy.
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetRansomwareProtectionPoliciesPolicyResult']:
        """
        All ransomware protection policies that match the filter parameters.  
        The policies structure is documented below.
        """
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetRansomwareProtectionPoliciesResult(GetRansomwareProtectionPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRansomwareProtectionPoliciesResult(
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            operating_system=self.operating_system,
            policies=self.policies,
            policy_id=self.policy_id,
            region=self.region)


def get_ransomware_protection_policies(enterprise_project_id: Optional[_builtins.str] = None,
                                       name: Optional[_builtins.str] = None,
                                       operating_system: Optional[_builtins.str] = None,
                                       policy_id: Optional[_builtins.str] = None,
                                       region: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRansomwareProtectionPoliciesResult:
    """
    Use this data source to get the list of HSS ransomware protection policies within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_id = config.require_object("policyId")
    test = huaweicloud.hss.get_ransomware_protection_policies(policy_id=policy_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the ransomware
           protection policies belong. For enterprise users, if omitted, will query the ransomware protection policies under all
           enterprise projects.
    :param _builtins.str name: Specifies the name of the ransomware protection policy to be queried.
           This field will undergo a fuzzy matching query, the query result is for all ransomware protection policies whose names
           contain this value.
    :param _builtins.str operating_system: Specifies the operating system supported by the ransomware protection policies
           to be queried. The value can be **Windows** or **Linux**.
    :param _builtins.str policy_id: Specifies the ID of the ransomware protection policy to be queried.
    :param _builtins.str region: Specifies the region in which to query the HSS ransomware protection policies.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['operatingSystem'] = operating_system
    __args__['policyId'] = policy_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getRansomwareProtectionPolicies:getRansomwareProtectionPolicies', __args__, opts=opts, typ=GetRansomwareProtectionPoliciesResult).value

    return AwaitableGetRansomwareProtectionPoliciesResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        operating_system=pulumi.get(__ret__, 'operating_system'),
        policies=pulumi.get(__ret__, 'policies'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        region=pulumi.get(__ret__, 'region'))
def get_ransomware_protection_policies_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              operating_system: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              policy_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRansomwareProtectionPoliciesResult]:
    """
    Use this data source to get the list of HSS ransomware protection policies within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_id = config.require_object("policyId")
    test = huaweicloud.hss.get_ransomware_protection_policies(policy_id=policy_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the ransomware
           protection policies belong. For enterprise users, if omitted, will query the ransomware protection policies under all
           enterprise projects.
    :param _builtins.str name: Specifies the name of the ransomware protection policy to be queried.
           This field will undergo a fuzzy matching query, the query result is for all ransomware protection policies whose names
           contain this value.
    :param _builtins.str operating_system: Specifies the operating system supported by the ransomware protection policies
           to be queried. The value can be **Windows** or **Linux**.
    :param _builtins.str policy_id: Specifies the ID of the ransomware protection policy to be queried.
    :param _builtins.str region: Specifies the region in which to query the HSS ransomware protection policies.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['operatingSystem'] = operating_system
    __args__['policyId'] = policy_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getRansomwareProtectionPolicies:getRansomwareProtectionPolicies', __args__, opts=opts, typ=GetRansomwareProtectionPoliciesResult)
    return __ret__.apply(lambda __response__: GetRansomwareProtectionPoliciesResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        operating_system=pulumi.get(__response__, 'operating_system'),
        policies=pulumi.get(__response__, 'policies'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        region=pulumi.get(__response__, 'region')))
