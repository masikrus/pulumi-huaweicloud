# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['EventLoginWhiteListArgs', 'EventLoginWhiteList']

@pulumi.input_type
class EventLoginWhiteListArgs:
    def __init__(__self__, *,
                 login_ip: pulumi.Input[_builtins.str],
                 login_user_name: pulumi.Input[_builtins.str],
                 private_ip: pulumi.Input[_builtins.str],
                 delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 handle_event: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remarks: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EventLoginWhiteList resource.
        :param pulumi.Input[_builtins.str] login_ip: Specifies the login IP address.
        :param pulumi.Input[_builtins.str] login_user_name: Specifies the login username.
        :param pulumi.Input[_builtins.str] private_ip: Specifies the private IP address of the host.
        :param pulumi.Input[_builtins.bool] delete_all: Specifies whether to delete all login white lists. When set to `true`, all
               login white lists under HSS will be deleted.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
        :param pulumi.Input[_builtins.bool] handle_event: Specifies whether to handle the related alarm events simultaneously.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] remarks: Specifies the remarks of the white list.
        """
        pulumi.set(__self__, "login_ip", login_ip)
        pulumi.set(__self__, "login_user_name", login_user_name)
        pulumi.set(__self__, "private_ip", private_ip)
        if delete_all is not None:
            pulumi.set(__self__, "delete_all", delete_all)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if handle_event is not None:
            pulumi.set(__self__, "handle_event", handle_event)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)

    @_builtins.property
    @pulumi.getter(name="loginIp")
    def login_ip(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the login IP address.
        """
        return pulumi.get(self, "login_ip")

    @login_ip.setter
    def login_ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "login_ip", value)

    @_builtins.property
    @pulumi.getter(name="loginUserName")
    def login_user_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the login username.
        """
        return pulumi.get(self, "login_user_name")

    @login_user_name.setter
    def login_user_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "login_user_name", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the private IP address of the host.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter(name="deleteAll")
    def delete_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete all login white lists. When set to `true`, all
        login white lists under HSS will be deleted.
        """
        return pulumi.get(self, "delete_all")

    @delete_all.setter
    def delete_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_all", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="handleEvent")
    def handle_event(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to handle the related alarm events simultaneously.
        """
        return pulumi.get(self, "handle_event")

    @handle_event.setter
    def handle_event(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "handle_event", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the remarks of the white list.
        """
        return pulumi.get(self, "remarks")

    @remarks.setter
    def remarks(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remarks", value)


@pulumi.input_type
class _EventLoginWhiteListState:
    def __init__(__self__, *,
                 delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 handle_event: Optional[pulumi.Input[_builtins.bool]] = None,
                 login_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 login_user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remarks: Optional[pulumi.Input[_builtins.str]] = None,
                 update_time: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering EventLoginWhiteList resources.
        :param pulumi.Input[_builtins.bool] delete_all: Specifies whether to delete all login white lists. When set to `true`, all
               login white lists under HSS will be deleted.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
        :param pulumi.Input[_builtins.str] enterprise_project_name: The enterprise project name.
        :param pulumi.Input[_builtins.bool] handle_event: Specifies whether to handle the related alarm events simultaneously.
        :param pulumi.Input[_builtins.str] login_ip: Specifies the login IP address.
        :param pulumi.Input[_builtins.str] login_user_name: Specifies the login username.
        :param pulumi.Input[_builtins.str] private_ip: Specifies the private IP address of the host.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] remarks: Specifies the remarks of the white list.
        :param pulumi.Input[_builtins.int] update_time: The update time in milliseconds.
        """
        if delete_all is not None:
            pulumi.set(__self__, "delete_all", delete_all)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if enterprise_project_name is not None:
            pulumi.set(__self__, "enterprise_project_name", enterprise_project_name)
        if handle_event is not None:
            pulumi.set(__self__, "handle_event", handle_event)
        if login_ip is not None:
            pulumi.set(__self__, "login_ip", login_ip)
        if login_user_name is not None:
            pulumi.set(__self__, "login_user_name", login_user_name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="deleteAll")
    def delete_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete all login white lists. When set to `true`, all
        login white lists under HSS will be deleted.
        """
        return pulumi.get(self, "delete_all")

    @delete_all.setter
    def delete_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_all", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The enterprise project name.
        """
        return pulumi.get(self, "enterprise_project_name")

    @enterprise_project_name.setter
    def enterprise_project_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_name", value)

    @_builtins.property
    @pulumi.getter(name="handleEvent")
    def handle_event(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to handle the related alarm events simultaneously.
        """
        return pulumi.get(self, "handle_event")

    @handle_event.setter
    def handle_event(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "handle_event", value)

    @_builtins.property
    @pulumi.getter(name="loginIp")
    def login_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login IP address.
        """
        return pulumi.get(self, "login_ip")

    @login_ip.setter
    def login_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "login_ip", value)

    @_builtins.property
    @pulumi.getter(name="loginUserName")
    def login_user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login username.
        """
        return pulumi.get(self, "login_user_name")

    @login_user_name.setter
    def login_user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "login_user_name", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private IP address of the host.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the remarks of the white list.
        """
        return pulumi.get(self, "remarks")

    @remarks.setter
    def remarks(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remarks", value)

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The update time in milliseconds.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "update_time", value)


@pulumi.type_token("huaweicloud:hss/eventLoginWhiteList:EventLoginWhiteList")
class EventLoginWhiteList(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 handle_event: Optional[pulumi.Input[_builtins.bool]] = None,
                 login_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 login_user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remarks: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an HSS event login white list resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        private_ip = config.require_object("privateIp")
        login_ip = config.require_object("loginIp")
        login_user_name = config.require_object("loginUserName")
        test = huaweicloud.hss.EventLoginWhiteList("test",
            private_ip=private_ip,
            login_ip=login_ip,
            login_user_name=login_user_name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] delete_all: Specifies whether to delete all login white lists. When set to `true`, all
               login white lists under HSS will be deleted.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
        :param pulumi.Input[_builtins.bool] handle_event: Specifies whether to handle the related alarm events simultaneously.
        :param pulumi.Input[_builtins.str] login_ip: Specifies the login IP address.
        :param pulumi.Input[_builtins.str] login_user_name: Specifies the login username.
        :param pulumi.Input[_builtins.str] private_ip: Specifies the private IP address of the host.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] remarks: Specifies the remarks of the white list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventLoginWhiteListArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an HSS event login white list resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        private_ip = config.require_object("privateIp")
        login_ip = config.require_object("loginIp")
        login_user_name = config.require_object("loginUserName")
        test = huaweicloud.hss.EventLoginWhiteList("test",
            private_ip=private_ip,
            login_ip=login_ip,
            login_user_name=login_user_name)
        ```

        :param str resource_name: The name of the resource.
        :param EventLoginWhiteListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventLoginWhiteListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 handle_event: Optional[pulumi.Input[_builtins.bool]] = None,
                 login_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 login_user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remarks: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventLoginWhiteListArgs.__new__(EventLoginWhiteListArgs)

            __props__.__dict__["delete_all"] = delete_all
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["handle_event"] = handle_event
            if login_ip is None and not opts.urn:
                raise TypeError("Missing required property 'login_ip'")
            __props__.__dict__["login_ip"] = login_ip
            if login_user_name is None and not opts.urn:
                raise TypeError("Missing required property 'login_user_name'")
            __props__.__dict__["login_user_name"] = login_user_name
            if private_ip is None and not opts.urn:
                raise TypeError("Missing required property 'private_ip'")
            __props__.__dict__["private_ip"] = private_ip
            __props__.__dict__["region"] = region
            __props__.__dict__["remarks"] = remarks
            __props__.__dict__["enterprise_project_name"] = None
            __props__.__dict__["update_time"] = None
        super(EventLoginWhiteList, __self__).__init__(
            'huaweicloud:hss/eventLoginWhiteList:EventLoginWhiteList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_all: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_name: Optional[pulumi.Input[_builtins.str]] = None,
            handle_event: Optional[pulumi.Input[_builtins.bool]] = None,
            login_ip: Optional[pulumi.Input[_builtins.str]] = None,
            login_user_name: Optional[pulumi.Input[_builtins.str]] = None,
            private_ip: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            remarks: Optional[pulumi.Input[_builtins.str]] = None,
            update_time: Optional[pulumi.Input[_builtins.int]] = None) -> 'EventLoginWhiteList':
        """
        Get an existing EventLoginWhiteList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] delete_all: Specifies whether to delete all login white lists. When set to `true`, all
               login white lists under HSS will be deleted.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.  
               This parameter is valid only when the enterprise project is enabled.
               The default value is **0**, indicating the default enterprise project.
               If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
               If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
               the operation may fail due to insufficient permissions.
        :param pulumi.Input[_builtins.str] enterprise_project_name: The enterprise project name.
        :param pulumi.Input[_builtins.bool] handle_event: Specifies whether to handle the related alarm events simultaneously.
        :param pulumi.Input[_builtins.str] login_ip: Specifies the login IP address.
        :param pulumi.Input[_builtins.str] login_user_name: Specifies the login username.
        :param pulumi.Input[_builtins.str] private_ip: Specifies the private IP address of the host.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] remarks: Specifies the remarks of the white list.
        :param pulumi.Input[_builtins.int] update_time: The update time in milliseconds.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventLoginWhiteListState.__new__(_EventLoginWhiteListState)

        __props__.__dict__["delete_all"] = delete_all
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["enterprise_project_name"] = enterprise_project_name
        __props__.__dict__["handle_event"] = handle_event
        __props__.__dict__["login_ip"] = login_ip
        __props__.__dict__["login_user_name"] = login_user_name
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["region"] = region
        __props__.__dict__["remarks"] = remarks
        __props__.__dict__["update_time"] = update_time
        return EventLoginWhiteList(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="deleteAll")
    def delete_all(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to delete all login white lists. When set to `true`, all
        login white lists under HSS will be deleted.
        """
        return pulumi.get(self, "delete_all")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID.  
        This parameter is valid only when the enterprise project is enabled.
        The default value is **0**, indicating the default enterprise project.
        If it is necessary to operate the hosts under all enterprise projects, the value is **all_granted_eps**.
        If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
        the operation may fail due to insufficient permissions.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> pulumi.Output[_builtins.str]:
        """
        The enterprise project name.
        """
        return pulumi.get(self, "enterprise_project_name")

    @_builtins.property
    @pulumi.getter(name="handleEvent")
    def handle_event(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to handle the related alarm events simultaneously.
        """
        return pulumi.get(self, "handle_event")

    @_builtins.property
    @pulumi.getter(name="loginIp")
    def login_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the login IP address.
        """
        return pulumi.get(self, "login_ip")

    @_builtins.property
    @pulumi.getter(name="loginUserName")
    def login_user_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the login username.
        """
        return pulumi.get(self, "login_user_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the private IP address of the host.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the remarks of the white list.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[_builtins.int]:
        """
        The update time in milliseconds.
        """
        return pulumi.get(self, "update_time")

