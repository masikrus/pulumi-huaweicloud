# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRaspServersResult',
    'AwaitableGetRaspServersResult',
    'get_rasp_servers',
    'get_rasp_servers_output',
]

@pulumi.output_type
class GetRaspServersResult:
    """
    A collection of values returned by getRaspServers.
    """
    def __init__(__self__, app_status=None, app_type=None, data_lists=None, enterprise_project_id=None, host_ip=None, host_name=None, id=None, os_type=None, region=None):
        if app_status and not isinstance(app_status, str):
            raise TypeError("Expected argument 'app_status' to be a str")
        pulumi.set(__self__, "app_status", app_status)
        if app_type and not isinstance(app_type, str):
            raise TypeError("Expected argument 'app_type' to be a str")
        pulumi.set(__self__, "app_type", app_type)
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if host_ip and not isinstance(host_ip, str):
            raise TypeError("Expected argument 'host_ip' to be a str")
        pulumi.set(__self__, "host_ip", host_ip)
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        pulumi.set(__self__, "host_name", host_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        pulumi.set(__self__, "os_type", os_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="appStatus")
    def app_status(self) -> _builtins.str:
        return pulumi.get(self, "app_status")

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "app_type")

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetRaspServersDataListResult']:
        """
        All protection servers that match the filter parameters.
        The data_list structure is documented below.
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_ip")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[_builtins.str]:
        """
        The operating system type.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetRaspServersResult(GetRaspServersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRaspServersResult(
            app_status=self.app_status,
            app_type=self.app_type,
            data_lists=self.data_lists,
            enterprise_project_id=self.enterprise_project_id,
            host_ip=self.host_ip,
            host_name=self.host_name,
            id=self.id,
            os_type=self.os_type,
            region=self.region)


def get_rasp_servers(app_status: Optional[_builtins.str] = None,
                     app_type: Optional[_builtins.str] = None,
                     enterprise_project_id: Optional[_builtins.str] = None,
                     host_ip: Optional[_builtins.str] = None,
                     host_name: Optional[_builtins.str] = None,
                     os_type: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRaspServersResult:
    """
    Use this data source to get the list of protection servers.


    :param _builtins.str app_status: Specifies the application protection status.
           The valid values are as follows:
           + **closed**: Protection disabled.
           + **opened**: Protection enabled.
    :param _builtins.str app_type: Specifies the application type.
           The valid values are as follows:
           + **java**: Java application protection.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str host_ip: Specifies the host IP address.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.str os_type: Specifies the operating system type.
           The valid values are as follows:
           + **linux**
           + **windows**
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['appStatus'] = app_status
    __args__['appType'] = app_type
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostIp'] = host_ip
    __args__['hostName'] = host_name
    __args__['osType'] = os_type
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getRaspServers:getRaspServers', __args__, opts=opts, typ=GetRaspServersResult).value

    return AwaitableGetRaspServersResult(
        app_status=pulumi.get(__ret__, 'app_status'),
        app_type=pulumi.get(__ret__, 'app_type'),
        data_lists=pulumi.get(__ret__, 'data_lists'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        host_ip=pulumi.get(__ret__, 'host_ip'),
        host_name=pulumi.get(__ret__, 'host_name'),
        id=pulumi.get(__ret__, 'id'),
        os_type=pulumi.get(__ret__, 'os_type'),
        region=pulumi.get(__ret__, 'region'))
def get_rasp_servers_output(app_status: Optional[pulumi.Input[_builtins.str]] = None,
                            app_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            host_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            host_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            os_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRaspServersResult]:
    """
    Use this data source to get the list of protection servers.


    :param _builtins.str app_status: Specifies the application protection status.
           The valid values are as follows:
           + **closed**: Protection disabled.
           + **opened**: Protection enabled.
    :param _builtins.str app_type: Specifies the application type.
           The valid values are as follows:
           + **java**: Java application protection.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str host_ip: Specifies the host IP address.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.str os_type: Specifies the operating system type.
           The valid values are as follows:
           + **linux**
           + **windows**
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['appStatus'] = app_status
    __args__['appType'] = app_type
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostIp'] = host_ip
    __args__['hostName'] = host_name
    __args__['osType'] = os_type
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getRaspServers:getRaspServers', __args__, opts=opts, typ=GetRaspServersResult)
    return __ret__.apply(lambda __response__: GetRaspServersResult(
        app_status=pulumi.get(__response__, 'app_status'),
        app_type=pulumi.get(__response__, 'app_type'),
        data_lists=pulumi.get(__response__, 'data_lists'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        host_ip=pulumi.get(__response__, 'host_ip'),
        host_name=pulumi.get(__response__, 'host_name'),
        id=pulumi.get(__response__, 'id'),
        os_type=pulumi.get(__response__, 'os_type'),
        region=pulumi.get(__response__, 'region')))
