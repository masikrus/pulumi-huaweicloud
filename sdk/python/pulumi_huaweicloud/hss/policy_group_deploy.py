# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PolicyGroupDeployArgs', 'PolicyGroupDeploy']

@pulumi.input_type
class PolicyGroupDeployArgs:
    def __init__(__self__, *,
                 target_policy_group_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PolicyGroupDeploy resource.
        :param pulumi.Input[_builtins.str] target_policy_group_id: Specifies the ID of the policy group to be deployed.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project.
               This parameter is valid only when the enterprise project function is enabled.
               For enterprise users, if omitted, default enterprise project will be used.
               If you want to deploy the policy for all hosts under all enterprise projects,
               set this parameter to ***all_granted_eps***.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_id_lists: Specifies the ID list of servers where the policy group needs to be deployed.
        :param pulumi.Input[_builtins.bool] operate_all: Specifies whether to deploy the policy on all hosts.
               If the value is ***true***, not need to configure `host_id_list`.
               If the value is ***false***, configure `host_id_list`.
        :param pulumi.Input[_builtins.str] region: Specifies the region to which the HSS policy group resource belongs.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "target_policy_group_id", target_policy_group_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if host_id_lists is not None:
            pulumi.set(__self__, "host_id_lists", host_id_lists)
        if operate_all is not None:
            pulumi.set(__self__, "operate_all", operate_all)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="targetPolicyGroupId")
    def target_policy_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the policy group to be deployed.
        """
        return pulumi.get(self, "target_policy_group_id")

    @target_policy_group_id.setter
    def target_policy_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_policy_group_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project.
        This parameter is valid only when the enterprise project function is enabled.
        For enterprise users, if omitted, default enterprise project will be used.
        If you want to deploy the policy for all hosts under all enterprise projects,
        set this parameter to ***all_granted_eps***.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="hostIdLists")
    def host_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the ID list of servers where the policy group needs to be deployed.
        """
        return pulumi.get(self, "host_id_lists")

    @host_id_lists.setter
    def host_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_id_lists", value)

    @_builtins.property
    @pulumi.getter(name="operateAll")
    def operate_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to deploy the policy on all hosts.
        If the value is ***true***, not need to configure `host_id_list`.
        If the value is ***false***, configure `host_id_list`.
        """
        return pulumi.get(self, "operate_all")

    @operate_all.setter
    def operate_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operate_all", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region to which the HSS policy group resource belongs.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _PolicyGroupDeployState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_policy_group_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PolicyGroupDeploy resources.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project.
               This parameter is valid only when the enterprise project function is enabled.
               For enterprise users, if omitted, default enterprise project will be used.
               If you want to deploy the policy for all hosts under all enterprise projects,
               set this parameter to ***all_granted_eps***.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_id_lists: Specifies the ID list of servers where the policy group needs to be deployed.
        :param pulumi.Input[_builtins.bool] operate_all: Specifies whether to deploy the policy on all hosts.
               If the value is ***true***, not need to configure `host_id_list`.
               If the value is ***false***, configure `host_id_list`.
        :param pulumi.Input[_builtins.str] region: Specifies the region to which the HSS policy group resource belongs.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_policy_group_id: Specifies the ID of the policy group to be deployed.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if host_id_lists is not None:
            pulumi.set(__self__, "host_id_lists", host_id_lists)
        if operate_all is not None:
            pulumi.set(__self__, "operate_all", operate_all)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if target_policy_group_id is not None:
            pulumi.set(__self__, "target_policy_group_id", target_policy_group_id)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project.
        This parameter is valid only when the enterprise project function is enabled.
        For enterprise users, if omitted, default enterprise project will be used.
        If you want to deploy the policy for all hosts under all enterprise projects,
        set this parameter to ***all_granted_eps***.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="hostIdLists")
    def host_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the ID list of servers where the policy group needs to be deployed.
        """
        return pulumi.get(self, "host_id_lists")

    @host_id_lists.setter
    def host_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_id_lists", value)

    @_builtins.property
    @pulumi.getter(name="operateAll")
    def operate_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to deploy the policy on all hosts.
        If the value is ***true***, not need to configure `host_id_list`.
        If the value is ***false***, configure `host_id_list`.
        """
        return pulumi.get(self, "operate_all")

    @operate_all.setter
    def operate_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operate_all", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region to which the HSS policy group resource belongs.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="targetPolicyGroupId")
    def target_policy_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the policy group to be deployed.
        """
        return pulumi.get(self, "target_policy_group_id")

    @target_policy_group_id.setter
    def target_policy_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_policy_group_id", value)


@pulumi.type_token("huaweicloud:hss/policyGroupDeploy:PolicyGroupDeploy")
class PolicyGroupDeploy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_policy_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an HSS policy group deploy resource within HuaweiCloud.

        > This resource is only a one-time action resource for HSS policy group deploy. Deleting this resource will
        not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        target_policy_group_id = config.require_object("targetPolicyGroupId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        operate_all = config.require_object("operateAll")
        host_id_list = config.require_object("hostIdList")
        test = huaweicloud.hss.PolicyGroupDeploy("test",
            target_policy_group_id=target_policy_group_id,
            enterprise_project_id=enterprise_project_id,
            operate_all=operate_all,
            host_id_lists=host_id_list)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project.
               This parameter is valid only when the enterprise project function is enabled.
               For enterprise users, if omitted, default enterprise project will be used.
               If you want to deploy the policy for all hosts under all enterprise projects,
               set this parameter to ***all_granted_eps***.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_id_lists: Specifies the ID list of servers where the policy group needs to be deployed.
        :param pulumi.Input[_builtins.bool] operate_all: Specifies whether to deploy the policy on all hosts.
               If the value is ***true***, not need to configure `host_id_list`.
               If the value is ***false***, configure `host_id_list`.
        :param pulumi.Input[_builtins.str] region: Specifies the region to which the HSS policy group resource belongs.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_policy_group_id: Specifies the ID of the policy group to be deployed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyGroupDeployArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an HSS policy group deploy resource within HuaweiCloud.

        > This resource is only a one-time action resource for HSS policy group deploy. Deleting this resource will
        not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        target_policy_group_id = config.require_object("targetPolicyGroupId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        operate_all = config.require_object("operateAll")
        host_id_list = config.require_object("hostIdList")
        test = huaweicloud.hss.PolicyGroupDeploy("test",
            target_policy_group_id=target_policy_group_id,
            enterprise_project_id=enterprise_project_id,
            operate_all=operate_all,
            host_id_lists=host_id_list)
        ```

        :param str resource_name: The name of the resource.
        :param PolicyGroupDeployArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyGroupDeployArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_policy_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyGroupDeployArgs.__new__(PolicyGroupDeployArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["host_id_lists"] = host_id_lists
            __props__.__dict__["operate_all"] = operate_all
            __props__.__dict__["region"] = region
            if target_policy_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_policy_group_id'")
            __props__.__dict__["target_policy_group_id"] = target_policy_group_id
        super(PolicyGroupDeploy, __self__).__init__(
            'huaweicloud:hss/policyGroupDeploy:PolicyGroupDeploy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            host_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            operate_all: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            target_policy_group_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'PolicyGroupDeploy':
        """
        Get an existing PolicyGroupDeploy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project.
               This parameter is valid only when the enterprise project function is enabled.
               For enterprise users, if omitted, default enterprise project will be used.
               If you want to deploy the policy for all hosts under all enterprise projects,
               set this parameter to ***all_granted_eps***.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_id_lists: Specifies the ID list of servers where the policy group needs to be deployed.
        :param pulumi.Input[_builtins.bool] operate_all: Specifies whether to deploy the policy on all hosts.
               If the value is ***true***, not need to configure `host_id_list`.
               If the value is ***false***, configure `host_id_list`.
        :param pulumi.Input[_builtins.str] region: Specifies the region to which the HSS policy group resource belongs.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_policy_group_id: Specifies the ID of the policy group to be deployed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyGroupDeployState.__new__(_PolicyGroupDeployState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["host_id_lists"] = host_id_lists
        __props__.__dict__["operate_all"] = operate_all
        __props__.__dict__["region"] = region
        __props__.__dict__["target_policy_group_id"] = target_policy_group_id
        return PolicyGroupDeploy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the enterprise project.
        This parameter is valid only when the enterprise project function is enabled.
        For enterprise users, if omitted, default enterprise project will be used.
        If you want to deploy the policy for all hosts under all enterprise projects,
        set this parameter to ***all_granted_eps***.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="hostIdLists")
    def host_id_lists(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the ID list of servers where the policy group needs to be deployed.
        """
        return pulumi.get(self, "host_id_lists")

    @_builtins.property
    @pulumi.getter(name="operateAll")
    def operate_all(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to deploy the policy on all hosts.
        If the value is ***true***, not need to configure `host_id_list`.
        If the value is ***false***, configure `host_id_list`.
        """
        return pulumi.get(self, "operate_all")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region to which the HSS policy group resource belongs.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="targetPolicyGroupId")
    def target_policy_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the policy group to be deployed.
        """
        return pulumi.get(self, "target_policy_group_id")

