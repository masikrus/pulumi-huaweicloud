# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAssetUsersResult',
    'AwaitableGetAssetUsersResult',
    'get_asset_users',
    'get_asset_users_output',
]

@pulumi.output_type
class GetAssetUsersResult:
    """
    A collection of values returned by getAssetUsers.
    """
    def __init__(__self__, category=None, data_lists=None, enterprise_project_id=None, host_id=None, host_name=None, id=None, login_permission=None, part_match=None, private_ip=None, region=None, root_permission=None, user_group=None, user_name=None):
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        pulumi.set(__self__, "category", category)
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if host_id and not isinstance(host_id, str):
            raise TypeError("Expected argument 'host_id' to be a str")
        pulumi.set(__self__, "host_id", host_id)
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        pulumi.set(__self__, "host_name", host_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if login_permission and not isinstance(login_permission, bool):
            raise TypeError("Expected argument 'login_permission' to be a bool")
        pulumi.set(__self__, "login_permission", login_permission)
        if part_match and not isinstance(part_match, bool):
            raise TypeError("Expected argument 'part_match' to be a bool")
        pulumi.set(__self__, "part_match", part_match)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if root_permission and not isinstance(root_permission, bool):
            raise TypeError("Expected argument 'root_permission' to be a bool")
        pulumi.set(__self__, "root_permission", root_permission)
        if user_group and not isinstance(user_group, str):
            raise TypeError("Expected argument 'user_group' to be a str")
        pulumi.set(__self__, "user_group", user_group)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetAssetUsersDataListResult']:
        """
        The list of account information.
        The data_list structure is documented below.
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[_builtins.str]:
        """
        The host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="loginPermission")
    def login_permission(self) -> Optional[_builtins.bool]:
        """
        Whether the user has the login permission.
        """
        return pulumi.get(self, "login_permission")

    @_builtins.property
    @pulumi.getter(name="partMatch")
    def part_match(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "part_match")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="rootPermission")
    def root_permission(self) -> Optional[_builtins.bool]:
        """
        Whether the user has root permissions.
        """
        return pulumi.get(self, "root_permission")

    @_builtins.property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_group")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        The user name.
        """
        return pulumi.get(self, "user_name")


class AwaitableGetAssetUsersResult(GetAssetUsersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAssetUsersResult(
            category=self.category,
            data_lists=self.data_lists,
            enterprise_project_id=self.enterprise_project_id,
            host_id=self.host_id,
            host_name=self.host_name,
            id=self.id,
            login_permission=self.login_permission,
            part_match=self.part_match,
            private_ip=self.private_ip,
            region=self.region,
            root_permission=self.root_permission,
            user_group=self.user_group,
            user_name=self.user_name)


def get_asset_users(category: Optional[_builtins.str] = None,
                    enterprise_project_id: Optional[_builtins.str] = None,
                    host_id: Optional[_builtins.str] = None,
                    host_name: Optional[_builtins.str] = None,
                    login_permission: Optional[_builtins.bool] = None,
                    part_match: Optional[_builtins.bool] = None,
                    private_ip: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    root_permission: Optional[_builtins.bool] = None,
                    user_group: Optional[_builtins.str] = None,
                    user_name: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAssetUsersResult:
    """
    Use this data source to get the list of HSS asset users within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_asset_users(user_name="daemon")
    ```


    :param _builtins.str category: Specifies the type. The default value is **host**.
           The valid values are as follows:
           + **host**: Host
           + **container**: Container
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           This parameter is valid only when the enterprise project function is enabled.
           The value **all_granted_eps** indicates all enterprise projects.
           If omitted, the default enterprise project will be used.
    :param _builtins.str host_id: Specifies the host ID.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.bool login_permission: Specifies whether the user has the login permission.
    :param _builtins.bool part_match: Specifies whether to use fuzzy matching. The default value is **false**.
    :param _builtins.str private_ip: Specifies the private IP of the server.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.bool root_permission: Specifies whether the user has root permissions.
    :param _builtins.str user_group: Specifies the server user group.
    :param _builtins.str user_name: Specifies the account name.
    """
    __args__ = dict()
    __args__['category'] = category
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostId'] = host_id
    __args__['hostName'] = host_name
    __args__['loginPermission'] = login_permission
    __args__['partMatch'] = part_match
    __args__['privateIp'] = private_ip
    __args__['region'] = region
    __args__['rootPermission'] = root_permission
    __args__['userGroup'] = user_group
    __args__['userName'] = user_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getAssetUsers:getAssetUsers', __args__, opts=opts, typ=GetAssetUsersResult).value

    return AwaitableGetAssetUsersResult(
        category=pulumi.get(__ret__, 'category'),
        data_lists=pulumi.get(__ret__, 'data_lists'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        host_id=pulumi.get(__ret__, 'host_id'),
        host_name=pulumi.get(__ret__, 'host_name'),
        id=pulumi.get(__ret__, 'id'),
        login_permission=pulumi.get(__ret__, 'login_permission'),
        part_match=pulumi.get(__ret__, 'part_match'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        region=pulumi.get(__ret__, 'region'),
        root_permission=pulumi.get(__ret__, 'root_permission'),
        user_group=pulumi.get(__ret__, 'user_group'),
        user_name=pulumi.get(__ret__, 'user_name'))
def get_asset_users_output(category: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           host_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           host_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           login_permission: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                           part_match: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                           private_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           root_permission: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                           user_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           user_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAssetUsersResult]:
    """
    Use this data source to get the list of HSS asset users within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_asset_users(user_name="daemon")
    ```


    :param _builtins.str category: Specifies the type. The default value is **host**.
           The valid values are as follows:
           + **host**: Host
           + **container**: Container
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           This parameter is valid only when the enterprise project function is enabled.
           The value **all_granted_eps** indicates all enterprise projects.
           If omitted, the default enterprise project will be used.
    :param _builtins.str host_id: Specifies the host ID.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.bool login_permission: Specifies whether the user has the login permission.
    :param _builtins.bool part_match: Specifies whether to use fuzzy matching. The default value is **false**.
    :param _builtins.str private_ip: Specifies the private IP of the server.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.bool root_permission: Specifies whether the user has root permissions.
    :param _builtins.str user_group: Specifies the server user group.
    :param _builtins.str user_name: Specifies the account name.
    """
    __args__ = dict()
    __args__['category'] = category
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostId'] = host_id
    __args__['hostName'] = host_name
    __args__['loginPermission'] = login_permission
    __args__['partMatch'] = part_match
    __args__['privateIp'] = private_ip
    __args__['region'] = region
    __args__['rootPermission'] = root_permission
    __args__['userGroup'] = user_group
    __args__['userName'] = user_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getAssetUsers:getAssetUsers', __args__, opts=opts, typ=GetAssetUsersResult)
    return __ret__.apply(lambda __response__: GetAssetUsersResult(
        category=pulumi.get(__response__, 'category'),
        data_lists=pulumi.get(__response__, 'data_lists'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        host_id=pulumi.get(__response__, 'host_id'),
        host_name=pulumi.get(__response__, 'host_name'),
        id=pulumi.get(__response__, 'id'),
        login_permission=pulumi.get(__response__, 'login_permission'),
        part_match=pulumi.get(__response__, 'part_match'),
        private_ip=pulumi.get(__response__, 'private_ip'),
        region=pulumi.get(__response__, 'region'),
        root_permission=pulumi.get(__response__, 'root_permission'),
        user_group=pulumi.get(__response__, 'user_group'),
        user_name=pulumi.get(__response__, 'user_name')))
