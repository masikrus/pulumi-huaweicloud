# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetVulnerabilityHandleHistoryResult',
    'AwaitableGetVulnerabilityHandleHistoryResult',
    'get_vulnerability_handle_history',
    'get_vulnerability_handle_history_output',
]

@pulumi.output_type
class GetVulnerabilityHandleHistoryResult:
    """
    A collection of values returned by getVulnerabilityHandleHistory.
    """
    def __init__(__self__, asset_value=None, cluster_id=None, data_lists=None, enterprise_project_id=None, group_name=None, host_ip=None, host_name=None, id=None, private_ip=None, public_ip=None, region=None, sort_dir=None, sort_key=None, statuses=None, vul_id=None, vul_type=None):
        if asset_value and not isinstance(asset_value, str):
            raise TypeError("Expected argument 'asset_value' to be a str")
        pulumi.set(__self__, "asset_value", asset_value)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        pulumi.set(__self__, "group_name", group_name)
        if host_ip and not isinstance(host_ip, str):
            raise TypeError("Expected argument 'host_ip' to be a str")
        pulumi.set(__self__, "host_ip", host_ip)
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        pulumi.set(__self__, "host_name", host_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if vul_id and not isinstance(vul_id, str):
            raise TypeError("Expected argument 'vul_id' to be a str")
        pulumi.set(__self__, "vul_id", vul_id)
        if vul_type and not isinstance(vul_type, str):
            raise TypeError("Expected argument 'vul_type' to be a str")
        pulumi.set(__self__, "vul_type", vul_type)

    @_builtins.property
    @pulumi.getter(name="assetValue")
    def asset_value(self) -> Optional[_builtins.str]:
        """
        The asset importance.
        """
        return pulumi.get(self, "asset_value")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[_builtins.str]:
        """
        The cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetVulnerabilityHandleHistoryDataListResult']:
        """
        Software vulnerability list
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_ip")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        The server private IP address.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The server EIP.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[_builtins.str]]:
        """
        The vulnerability status.
        """
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="vulId")
    def vul_id(self) -> Optional[_builtins.str]:
        """
        The vulnerability ID.
        """
        return pulumi.get(self, "vul_id")

    @_builtins.property
    @pulumi.getter(name="vulType")
    def vul_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vul_type")


class AwaitableGetVulnerabilityHandleHistoryResult(GetVulnerabilityHandleHistoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVulnerabilityHandleHistoryResult(
            asset_value=self.asset_value,
            cluster_id=self.cluster_id,
            data_lists=self.data_lists,
            enterprise_project_id=self.enterprise_project_id,
            group_name=self.group_name,
            host_ip=self.host_ip,
            host_name=self.host_name,
            id=self.id,
            private_ip=self.private_ip,
            public_ip=self.public_ip,
            region=self.region,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            statuses=self.statuses,
            vul_id=self.vul_id,
            vul_type=self.vul_type)


def get_vulnerability_handle_history(asset_value: Optional[_builtins.str] = None,
                                     cluster_id: Optional[_builtins.str] = None,
                                     enterprise_project_id: Optional[_builtins.str] = None,
                                     group_name: Optional[_builtins.str] = None,
                                     host_ip: Optional[_builtins.str] = None,
                                     host_name: Optional[_builtins.str] = None,
                                     private_ip: Optional[_builtins.str] = None,
                                     public_ip: Optional[_builtins.str] = None,
                                     region: Optional[_builtins.str] = None,
                                     sort_dir: Optional[_builtins.str] = None,
                                     sort_key: Optional[_builtins.str] = None,
                                     statuses: Optional[Sequence[_builtins.str]] = None,
                                     vul_id: Optional[_builtins.str] = None,
                                     vul_type: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVulnerabilityHandleHistoryResult:
    """
    Use this data source to query vulnerabilities handing history.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_vulnerability_handle_history()
    ```


    :param _builtins.str asset_value: Specifies the asset importance.
           The valid values are as follows:
           + **important**
           + **common**
           + **test**
    :param _builtins.str cluster_id: Specifies the cluster ID.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str group_name: Specifies the server group.
    :param _builtins.str host_ip: Specifies the host IP address.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.str private_ip: Specifies the server private IP address.
    :param _builtins.str public_ip: Specifies the server EIP.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies sorting order.
           The valid values are as follows:
           + **asc**: Ascending order.
           + **desc**: Descending order.
           
           If `sort_key` is not empty, the returned results are sorted in ascending or descending order by `sort_key`.
           The default order is descending.
    :param _builtins.str sort_key: Specifies sorting field.
           The valid value is **handle_time**.
    :param Sequence[_builtins.str] statuses: Specifies the vulnerability status.
           The valid values are as follows:
           + **vul_status_unfix**: Indicates not fixed.
           + **vul_status_ignored**: Indicates ignored.
           + **vul_status_verified**: Indicates verification in progress.
           + **vul_status_fixing**: Indicates fixing is in progress.
           + **vul_status_fixed**: Indicates fix succeeded.
           + **vul_status_reboot**: Indicates the issue is fixed and waiting for restart.
           + **vul_status_failed**: Indicates the issue failed to be fixed.
           + **vul_status_fix_after_reboot**: Indicates restart the host and try again.
    :param _builtins.str vul_id: Specifies the vulnerability ID.
    :param _builtins.str vul_type: Specifies the vulnerability type.
           The valid values are as follows:
           + **linux_vul**: Linux vulnerability.
           + **windows_vul**: Windows vulnerability.
           + **web_cms**: Web-CMS vulnerability.
           + **app_vul**: Application vulnerability.
           + **urgent_vul**: Emergency vulnerability.
    """
    __args__ = dict()
    __args__['assetValue'] = asset_value
    __args__['clusterId'] = cluster_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupName'] = group_name
    __args__['hostIp'] = host_ip
    __args__['hostName'] = host_name
    __args__['privateIp'] = private_ip
    __args__['publicIp'] = public_ip
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['statuses'] = statuses
    __args__['vulId'] = vul_id
    __args__['vulType'] = vul_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getVulnerabilityHandleHistory:getVulnerabilityHandleHistory', __args__, opts=opts, typ=GetVulnerabilityHandleHistoryResult).value

    return AwaitableGetVulnerabilityHandleHistoryResult(
        asset_value=pulumi.get(__ret__, 'asset_value'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        data_lists=pulumi.get(__ret__, 'data_lists'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        group_name=pulumi.get(__ret__, 'group_name'),
        host_ip=pulumi.get(__ret__, 'host_ip'),
        host_name=pulumi.get(__ret__, 'host_name'),
        id=pulumi.get(__ret__, 'id'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        public_ip=pulumi.get(__ret__, 'public_ip'),
        region=pulumi.get(__ret__, 'region'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        statuses=pulumi.get(__ret__, 'statuses'),
        vul_id=pulumi.get(__ret__, 'vul_id'),
        vul_type=pulumi.get(__ret__, 'vul_type'))
def get_vulnerability_handle_history_output(asset_value: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            cluster_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            host_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            host_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            private_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            public_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                            vul_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            vul_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVulnerabilityHandleHistoryResult]:
    """
    Use this data source to query vulnerabilities handing history.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.hss.get_vulnerability_handle_history()
    ```


    :param _builtins.str asset_value: Specifies the asset importance.
           The valid values are as follows:
           + **important**
           + **common**
           + **test**
    :param _builtins.str cluster_id: Specifies the cluster ID.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str group_name: Specifies the server group.
    :param _builtins.str host_ip: Specifies the host IP address.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.str private_ip: Specifies the server private IP address.
    :param _builtins.str public_ip: Specifies the server EIP.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies sorting order.
           The valid values are as follows:
           + **asc**: Ascending order.
           + **desc**: Descending order.
           
           If `sort_key` is not empty, the returned results are sorted in ascending or descending order by `sort_key`.
           The default order is descending.
    :param _builtins.str sort_key: Specifies sorting field.
           The valid value is **handle_time**.
    :param Sequence[_builtins.str] statuses: Specifies the vulnerability status.
           The valid values are as follows:
           + **vul_status_unfix**: Indicates not fixed.
           + **vul_status_ignored**: Indicates ignored.
           + **vul_status_verified**: Indicates verification in progress.
           + **vul_status_fixing**: Indicates fixing is in progress.
           + **vul_status_fixed**: Indicates fix succeeded.
           + **vul_status_reboot**: Indicates the issue is fixed and waiting for restart.
           + **vul_status_failed**: Indicates the issue failed to be fixed.
           + **vul_status_fix_after_reboot**: Indicates restart the host and try again.
    :param _builtins.str vul_id: Specifies the vulnerability ID.
    :param _builtins.str vul_type: Specifies the vulnerability type.
           The valid values are as follows:
           + **linux_vul**: Linux vulnerability.
           + **windows_vul**: Windows vulnerability.
           + **web_cms**: Web-CMS vulnerability.
           + **app_vul**: Application vulnerability.
           + **urgent_vul**: Emergency vulnerability.
    """
    __args__ = dict()
    __args__['assetValue'] = asset_value
    __args__['clusterId'] = cluster_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupName'] = group_name
    __args__['hostIp'] = host_ip
    __args__['hostName'] = host_name
    __args__['privateIp'] = private_ip
    __args__['publicIp'] = public_ip
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['statuses'] = statuses
    __args__['vulId'] = vul_id
    __args__['vulType'] = vul_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getVulnerabilityHandleHistory:getVulnerabilityHandleHistory', __args__, opts=opts, typ=GetVulnerabilityHandleHistoryResult)
    return __ret__.apply(lambda __response__: GetVulnerabilityHandleHistoryResult(
        asset_value=pulumi.get(__response__, 'asset_value'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        data_lists=pulumi.get(__response__, 'data_lists'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        group_name=pulumi.get(__response__, 'group_name'),
        host_ip=pulumi.get(__response__, 'host_ip'),
        host_name=pulumi.get(__response__, 'host_name'),
        id=pulumi.get(__response__, 'id'),
        private_ip=pulumi.get(__response__, 'private_ip'),
        public_ip=pulumi.get(__response__, 'public_ip'),
        region=pulumi.get(__response__, 'region'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        statuses=pulumi.get(__response__, 'statuses'),
        vul_id=pulumi.get(__response__, 'vul_id'),
        vul_type=pulumi.get(__response__, 'vul_type')))
