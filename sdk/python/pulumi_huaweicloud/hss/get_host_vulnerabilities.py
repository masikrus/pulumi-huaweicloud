# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetHostVulnerabilitiesResult',
    'AwaitableGetHostVulnerabilitiesResult',
    'get_host_vulnerabilities',
    'get_host_vulnerabilities_output',
]

@pulumi.output_type
class GetHostVulnerabilitiesResult:
    """
    A collection of values returned by getHostVulnerabilities.
    """
    def __init__(__self__, data_lists=None, enterprise_project_id=None, handle_status=None, host_id=None, id=None, region=None, repair_priority=None, status=None, type=None, vul_name=None):
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if handle_status and not isinstance(handle_status, str):
            raise TypeError("Expected argument 'handle_status' to be a str")
        pulumi.set(__self__, "handle_status", handle_status)
        if host_id and not isinstance(host_id, str):
            raise TypeError("Expected argument 'host_id' to be a str")
        pulumi.set(__self__, "host_id", host_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if repair_priority and not isinstance(repair_priority, str):
            raise TypeError("Expected argument 'repair_priority' to be a str")
        pulumi.set(__self__, "repair_priority", repair_priority)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vul_name and not isinstance(vul_name, str):
            raise TypeError("Expected argument 'vul_name' to be a str")
        pulumi.set(__self__, "vul_name", vul_name)

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetHostVulnerabilitiesDataListResult']:
        """
        The list of host vulnerabilities.
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="handleStatus")
    def handle_status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "handle_status")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="repairPriority")
    def repair_priority(self) -> Optional[_builtins.str]:
        """
        The fixing priority.
        """
        return pulumi.get(self, "repair_priority")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The vulnerability status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The vulnerability type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vulName")
    def vul_name(self) -> Optional[_builtins.str]:
        """
        The vulnerability name.
        """
        return pulumi.get(self, "vul_name")


class AwaitableGetHostVulnerabilitiesResult(GetHostVulnerabilitiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHostVulnerabilitiesResult(
            data_lists=self.data_lists,
            enterprise_project_id=self.enterprise_project_id,
            handle_status=self.handle_status,
            host_id=self.host_id,
            id=self.id,
            region=self.region,
            repair_priority=self.repair_priority,
            status=self.status,
            type=self.type,
            vul_name=self.vul_name)


def get_host_vulnerabilities(enterprise_project_id: Optional[_builtins.str] = None,
                             handle_status: Optional[_builtins.str] = None,
                             host_id: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             repair_priority: Optional[_builtins.str] = None,
                             status: Optional[_builtins.str] = None,
                             type: Optional[_builtins.str] = None,
                             vul_name: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHostVulnerabilitiesResult:
    """
    Use this data source to get the list of vulnerabilities for a specified HSS host.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    host_id = config.require_object("hostId")
    test = huaweicloud.hss.get_host_vulnerabilities(host_id=host_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the hosts belong.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str handle_status: Specifies the handling status.
           The valid values are as follows:
           + **unhandled**
           + **handled**
    :param _builtins.str host_id: Specifies the host ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str repair_priority: Specifies the fixing priority.
           The valid values are as follows:
           + **Critical**
           + **High**
           + **Medium**
           + **Low**
    :param _builtins.str status: Specifies the vulnerability status.
           The valid values are as follows:
           + **vul_status_unfix**: Indicates not fixed.
           + **vul_status_ignored**: Indicates ignored.
           + **vul_status_verified**: Indicates verification in progress.
           + **vul_status_fixing**: Indicates fixing is in progress.
           + **vul_status_fixed**: Indicates fix succeeded.
           + **vul_status_reboot**: Indicates the issue is fixed and waiting for restart.
           + **vul_status_failed**: Indicates the issue failed to be fixed.
           + **vul_status_fix_after_reboot**: Indicates restart the host and try again.
    :param _builtins.str type: Specifies the vulnerability type.
           The valid values are as follows:
           + **linux_vul**: Linux vulnerability.
           + **windows_vul**: Windows vulnerability.
           + **web_cms**: Web-CMS vulnerability.
           + **app_vul**: Application vulnerability.
           + **urgent_vul**: Emergency vulnerability.
    :param _builtins.str vul_name: Specifies the vulnerability name.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['handleStatus'] = handle_status
    __args__['hostId'] = host_id
    __args__['region'] = region
    __args__['repairPriority'] = repair_priority
    __args__['status'] = status
    __args__['type'] = type
    __args__['vulName'] = vul_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getHostVulnerabilities:getHostVulnerabilities', __args__, opts=opts, typ=GetHostVulnerabilitiesResult).value

    return AwaitableGetHostVulnerabilitiesResult(
        data_lists=pulumi.get(__ret__, 'data_lists'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        handle_status=pulumi.get(__ret__, 'handle_status'),
        host_id=pulumi.get(__ret__, 'host_id'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        repair_priority=pulumi.get(__ret__, 'repair_priority'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        vul_name=pulumi.get(__ret__, 'vul_name'))
def get_host_vulnerabilities_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    handle_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    host_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    repair_priority: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    vul_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHostVulnerabilitiesResult]:
    """
    Use this data source to get the list of vulnerabilities for a specified HSS host.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    host_id = config.require_object("hostId")
    test = huaweicloud.hss.get_host_vulnerabilities(host_id=host_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the hosts belong.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str handle_status: Specifies the handling status.
           The valid values are as follows:
           + **unhandled**
           + **handled**
    :param _builtins.str host_id: Specifies the host ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str repair_priority: Specifies the fixing priority.
           The valid values are as follows:
           + **Critical**
           + **High**
           + **Medium**
           + **Low**
    :param _builtins.str status: Specifies the vulnerability status.
           The valid values are as follows:
           + **vul_status_unfix**: Indicates not fixed.
           + **vul_status_ignored**: Indicates ignored.
           + **vul_status_verified**: Indicates verification in progress.
           + **vul_status_fixing**: Indicates fixing is in progress.
           + **vul_status_fixed**: Indicates fix succeeded.
           + **vul_status_reboot**: Indicates the issue is fixed and waiting for restart.
           + **vul_status_failed**: Indicates the issue failed to be fixed.
           + **vul_status_fix_after_reboot**: Indicates restart the host and try again.
    :param _builtins.str type: Specifies the vulnerability type.
           The valid values are as follows:
           + **linux_vul**: Linux vulnerability.
           + **windows_vul**: Windows vulnerability.
           + **web_cms**: Web-CMS vulnerability.
           + **app_vul**: Application vulnerability.
           + **urgent_vul**: Emergency vulnerability.
    :param _builtins.str vul_name: Specifies the vulnerability name.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['handleStatus'] = handle_status
    __args__['hostId'] = host_id
    __args__['region'] = region
    __args__['repairPriority'] = repair_priority
    __args__['status'] = status
    __args__['type'] = type
    __args__['vulName'] = vul_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getHostVulnerabilities:getHostVulnerabilities', __args__, opts=opts, typ=GetHostVulnerabilitiesResult)
    return __ret__.apply(lambda __response__: GetHostVulnerabilitiesResult(
        data_lists=pulumi.get(__response__, 'data_lists'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        handle_status=pulumi.get(__response__, 'handle_status'),
        host_id=pulumi.get(__response__, 'host_id'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        repair_priority=pulumi.get(__response__, 'repair_priority'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        vul_name=pulumi.get(__response__, 'vul_name')))
