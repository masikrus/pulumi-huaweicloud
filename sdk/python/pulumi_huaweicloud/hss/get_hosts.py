# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetHostsResult',
    'AwaitableGetHostsResult',
    'get_hosts',
    'get_hosts_output',
]

@pulumi.output_type
class GetHostsResult:
    """
    A collection of values returned by getHosts.
    """
    def __init__(__self__, agent_status=None, asset_value=None, detect_result=None, enterprise_project_id=None, group_id=None, host_id=None, hosts=None, id=None, name=None, os_type=None, policy_group_id=None, protect_charging_mode=None, protect_status=None, protect_version=None, region=None, status=None):
        if agent_status and not isinstance(agent_status, str):
            raise TypeError("Expected argument 'agent_status' to be a str")
        pulumi.set(__self__, "agent_status", agent_status)
        if asset_value and not isinstance(asset_value, str):
            raise TypeError("Expected argument 'asset_value' to be a str")
        pulumi.set(__self__, "asset_value", asset_value)
        if detect_result and not isinstance(detect_result, str):
            raise TypeError("Expected argument 'detect_result' to be a str")
        pulumi.set(__self__, "detect_result", detect_result)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if host_id and not isinstance(host_id, str):
            raise TypeError("Expected argument 'host_id' to be a str")
        pulumi.set(__self__, "host_id", host_id)
        if hosts and not isinstance(hosts, list):
            raise TypeError("Expected argument 'hosts' to be a list")
        pulumi.set(__self__, "hosts", hosts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        pulumi.set(__self__, "os_type", os_type)
        if policy_group_id and not isinstance(policy_group_id, str):
            raise TypeError("Expected argument 'policy_group_id' to be a str")
        pulumi.set(__self__, "policy_group_id", policy_group_id)
        if protect_charging_mode and not isinstance(protect_charging_mode, str):
            raise TypeError("Expected argument 'protect_charging_mode' to be a str")
        pulumi.set(__self__, "protect_charging_mode", protect_charging_mode)
        if protect_status and not isinstance(protect_status, str):
            raise TypeError("Expected argument 'protect_status' to be a str")
        pulumi.set(__self__, "protect_status", protect_status)
        if protect_version and not isinstance(protect_version, str):
            raise TypeError("Expected argument 'protect_version' to be a str")
        pulumi.set(__self__, "protect_version", protect_version)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="agentStatus")
    def agent_status(self) -> Optional[_builtins.str]:
        """
        The agent status of the host.
        """
        return pulumi.get(self, "agent_status")

    @_builtins.property
    @pulumi.getter(name="assetValue")
    def asset_value(self) -> Optional[_builtins.str]:
        """
        The asset importance of the host.
        """
        return pulumi.get(self, "asset_value")

    @_builtins.property
    @pulumi.getter(name="detectResult")
    def detect_result(self) -> Optional[_builtins.str]:
        """
        The security detection result of the host.
        """
        return pulumi.get(self, "detect_result")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project to which the host belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        """
        The host group ID to which the host belongs.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetHostsHostResult']:
        """
        All hosts that match the filter parameters.  
        The hosts structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the host.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[_builtins.str]:
        """
        The operating system type of the host.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="policyGroupId")
    def policy_group_id(self) -> Optional[_builtins.str]:
        """
        The policy group ID to which the host belongs.
        """
        return pulumi.get(self, "policy_group_id")

    @_builtins.property
    @pulumi.getter(name="protectChargingMode")
    def protect_charging_mode(self) -> Optional[_builtins.str]:
        """
        The charging mode for the host protection quota.
        """
        return pulumi.get(self, "protect_charging_mode")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> Optional[_builtins.str]:
        """
        The protection status of the host.
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter(name="protectVersion")
    def protect_version(self) -> Optional[_builtins.str]:
        """
        The protection version enabled by the host.
        """
        return pulumi.get(self, "protect_version")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the host.
        """
        return pulumi.get(self, "status")


class AwaitableGetHostsResult(GetHostsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHostsResult(
            agent_status=self.agent_status,
            asset_value=self.asset_value,
            detect_result=self.detect_result,
            enterprise_project_id=self.enterprise_project_id,
            group_id=self.group_id,
            host_id=self.host_id,
            hosts=self.hosts,
            id=self.id,
            name=self.name,
            os_type=self.os_type,
            policy_group_id=self.policy_group_id,
            protect_charging_mode=self.protect_charging_mode,
            protect_status=self.protect_status,
            protect_version=self.protect_version,
            region=self.region,
            status=self.status)


def get_hosts(agent_status: Optional[_builtins.str] = None,
              asset_value: Optional[_builtins.str] = None,
              detect_result: Optional[_builtins.str] = None,
              enterprise_project_id: Optional[_builtins.str] = None,
              group_id: Optional[_builtins.str] = None,
              host_id: Optional[_builtins.str] = None,
              name: Optional[_builtins.str] = None,
              os_type: Optional[_builtins.str] = None,
              policy_group_id: Optional[_builtins.str] = None,
              protect_charging_mode: Optional[_builtins.str] = None,
              protect_status: Optional[_builtins.str] = None,
              protect_version: Optional[_builtins.str] = None,
              region: Optional[_builtins.str] = None,
              status: Optional[_builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHostsResult:
    """
    Use this data source to get the list of HSS hosts within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    host_id = config.require_object("hostId")
    test = huaweicloud.hss.get_hosts(host_id=host_id)
    ```


    :param _builtins.str agent_status: Specifies the agent status of the hosts to be queried.
           The valid values are as follows:
           + **installed**
           + **not_installed**
           + **online**
           + **offline**
           + **install_failed**
    :param _builtins.str asset_value: Specifies the asset importance of the hosts to be queried.
           The valid values are as follows:
           + **important**
           + **common**
           + **test**
    :param _builtins.str detect_result: Specifies the security detection result of the hosts to be queried.
           The valid values are as follows:
           + **undetected**
           + **clean**
           + **risk**
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the hosts belong.
           If omitted, will query the hosts under all enterprise projects.
    :param _builtins.str group_id: Specifies the host group ID of the hosts to be queried.
    :param _builtins.str host_id: Specifies the ID of the host to be queried.
    :param _builtins.str name: Specifies the name of the host to be queried.
           This field will undergo a fuzzy matching query, the query result is for all hosts whose names contain this value.
    :param _builtins.str os_type: Specifies the operating system type of the hosts to be queried.
           The valid values are as follows:
           + **Linux**
           + **Windows**
    :param _builtins.str policy_group_id: Specifies the policy group ID of the hosts to be queried.
    :param _builtins.str protect_charging_mode: Specifies the charging mode for the hosts protection quota to be queried.
           The valid values are as follows:
           + **prePaid**
           + **postPaid**
    :param _builtins.str protect_status: Specifies the protection status of the hosts to be queried.
           The valid values are as follows:
           + **closed**
           + **opened**
    :param _builtins.str protect_version: Specifies the protection version enabled by the hosts to be queried.
           The valid values are as follows:
           + **hss.version.basic**
           + **hss.version.advanced**
           + **hss.version.enterprise**
           + **hss.version.premium**
           + **hss.version.wtp**
           + **hss.version.container.enterprise**
    :param _builtins.str region: Specifies the region in which to query the HSS hosts.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the hosts to be queried.
           The valid values are as follows:
           + **ACTIVE**
           + **SHUTOFF**
           + **ERROR**
    """
    __args__ = dict()
    __args__['agentStatus'] = agent_status
    __args__['assetValue'] = asset_value
    __args__['detectResult'] = detect_result
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupId'] = group_id
    __args__['hostId'] = host_id
    __args__['name'] = name
    __args__['osType'] = os_type
    __args__['policyGroupId'] = policy_group_id
    __args__['protectChargingMode'] = protect_charging_mode
    __args__['protectStatus'] = protect_status
    __args__['protectVersion'] = protect_version
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getHosts:getHosts', __args__, opts=opts, typ=GetHostsResult).value

    return AwaitableGetHostsResult(
        agent_status=pulumi.get(__ret__, 'agent_status'),
        asset_value=pulumi.get(__ret__, 'asset_value'),
        detect_result=pulumi.get(__ret__, 'detect_result'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        group_id=pulumi.get(__ret__, 'group_id'),
        host_id=pulumi.get(__ret__, 'host_id'),
        hosts=pulumi.get(__ret__, 'hosts'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        os_type=pulumi.get(__ret__, 'os_type'),
        policy_group_id=pulumi.get(__ret__, 'policy_group_id'),
        protect_charging_mode=pulumi.get(__ret__, 'protect_charging_mode'),
        protect_status=pulumi.get(__ret__, 'protect_status'),
        protect_version=pulumi.get(__ret__, 'protect_version'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_hosts_output(agent_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     asset_value: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     detect_result: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     host_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     os_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     policy_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     protect_charging_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     protect_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     protect_version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHostsResult]:
    """
    Use this data source to get the list of HSS hosts within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    host_id = config.require_object("hostId")
    test = huaweicloud.hss.get_hosts(host_id=host_id)
    ```


    :param _builtins.str agent_status: Specifies the agent status of the hosts to be queried.
           The valid values are as follows:
           + **installed**
           + **not_installed**
           + **online**
           + **offline**
           + **install_failed**
    :param _builtins.str asset_value: Specifies the asset importance of the hosts to be queried.
           The valid values are as follows:
           + **important**
           + **common**
           + **test**
    :param _builtins.str detect_result: Specifies the security detection result of the hosts to be queried.
           The valid values are as follows:
           + **undetected**
           + **clean**
           + **risk**
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the hosts belong.
           If omitted, will query the hosts under all enterprise projects.
    :param _builtins.str group_id: Specifies the host group ID of the hosts to be queried.
    :param _builtins.str host_id: Specifies the ID of the host to be queried.
    :param _builtins.str name: Specifies the name of the host to be queried.
           This field will undergo a fuzzy matching query, the query result is for all hosts whose names contain this value.
    :param _builtins.str os_type: Specifies the operating system type of the hosts to be queried.
           The valid values are as follows:
           + **Linux**
           + **Windows**
    :param _builtins.str policy_group_id: Specifies the policy group ID of the hosts to be queried.
    :param _builtins.str protect_charging_mode: Specifies the charging mode for the hosts protection quota to be queried.
           The valid values are as follows:
           + **prePaid**
           + **postPaid**
    :param _builtins.str protect_status: Specifies the protection status of the hosts to be queried.
           The valid values are as follows:
           + **closed**
           + **opened**
    :param _builtins.str protect_version: Specifies the protection version enabled by the hosts to be queried.
           The valid values are as follows:
           + **hss.version.basic**
           + **hss.version.advanced**
           + **hss.version.enterprise**
           + **hss.version.premium**
           + **hss.version.wtp**
           + **hss.version.container.enterprise**
    :param _builtins.str region: Specifies the region in which to query the HSS hosts.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the hosts to be queried.
           The valid values are as follows:
           + **ACTIVE**
           + **SHUTOFF**
           + **ERROR**
    """
    __args__ = dict()
    __args__['agentStatus'] = agent_status
    __args__['assetValue'] = asset_value
    __args__['detectResult'] = detect_result
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupId'] = group_id
    __args__['hostId'] = host_id
    __args__['name'] = name
    __args__['osType'] = os_type
    __args__['policyGroupId'] = policy_group_id
    __args__['protectChargingMode'] = protect_charging_mode
    __args__['protectStatus'] = protect_status
    __args__['protectVersion'] = protect_version
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getHosts:getHosts', __args__, opts=opts, typ=GetHostsResult)
    return __ret__.apply(lambda __response__: GetHostsResult(
        agent_status=pulumi.get(__response__, 'agent_status'),
        asset_value=pulumi.get(__response__, 'asset_value'),
        detect_result=pulumi.get(__response__, 'detect_result'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        group_id=pulumi.get(__response__, 'group_id'),
        host_id=pulumi.get(__response__, 'host_id'),
        hosts=pulumi.get(__response__, 'hosts'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        os_type=pulumi.get(__response__, 'os_type'),
        policy_group_id=pulumi.get(__response__, 'policy_group_id'),
        protect_charging_mode=pulumi.get(__response__, 'protect_charging_mode'),
        protect_status=pulumi.get(__response__, 'protect_status'),
        protect_version=pulumi.get(__response__, 'protect_version'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
