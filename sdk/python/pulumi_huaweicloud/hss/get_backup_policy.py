# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBackupPolicyResult',
    'AwaitableGetBackupPolicyResult',
    'get_backup_policy',
    'get_backup_policy_output',
]

@pulumi.output_type
class GetBackupPolicyResult:
    """
    A collection of values returned by getBackupPolicy.
    """
    def __init__(__self__, enabled=None, enterprise_project_id=None, id=None, name=None, operation_definitions=None, operation_type=None, policy_id=None, region=None, triggers=None):
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operation_definitions and not isinstance(operation_definitions, list):
            raise TypeError("Expected argument 'operation_definitions' to be a list")
        pulumi.set(__self__, "operation_definitions", operation_definitions)
        if operation_type and not isinstance(operation_type, str):
            raise TypeError("Expected argument 'operation_type' to be a str")
        pulumi.set(__self__, "operation_type", operation_type)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if triggers and not isinstance(triggers, list):
            raise TypeError("Expected argument 'triggers' to be a list")
        pulumi.set(__self__, "triggers", triggers)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Indicates whether the backup policy is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The scheduler name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operationDefinitions")
    def operation_definitions(self) -> Sequence['outputs.GetBackupPolicyOperationDefinitionResult']:
        """
        The policy attribute.
        The operation_definition structure is documented below.
        """
        return pulumi.get(self, "operation_definitions")

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> _builtins.str:
        """
        The backup type. Currently, only **backup** is supported.
        """
        return pulumi.get(self, "operation_type")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Sequence['outputs.GetBackupPolicyTriggerResult']:
        """
        The backup policy scheduling rule.
        The trigger structure is documented below.
        """
        return pulumi.get(self, "triggers")


class AwaitableGetBackupPolicyResult(GetBackupPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupPolicyResult(
            enabled=self.enabled,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            operation_definitions=self.operation_definitions,
            operation_type=self.operation_type,
            policy_id=self.policy_id,
            region=self.region,
            triggers=self.triggers)


def get_backup_policy(enterprise_project_id: Optional[_builtins.str] = None,
                      policy_id: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupPolicyResult:
    """
    Use this data source to get the HSS backup policy within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_id = config.require_object("policyId")
    test = huaweicloud.hss.get_backup_policy(policy_id=policy_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project that the server belongs to.
           The value **0** indicates the default enterprise project. To query servers in all enterprise projects, set this parameter
           to **all_granted_eps**. If you have only the permission on an enterprise project, you need to transfer the enterprise
           project ID to query the server in the enterprise project. Otherwise, an error is reported due to insufficient permission.
           
           > An enterprise project can be configured only after the enterprise project function is enabled.
    :param _builtins.str policy_id: Specifies the backup policy ID.
    :param _builtins.str region: Specifies the region in which to query the resource. If omitted, the provider-level
           region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['policyId'] = policy_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getBackupPolicy:getBackupPolicy', __args__, opts=opts, typ=GetBackupPolicyResult).value

    return AwaitableGetBackupPolicyResult(
        enabled=pulumi.get(__ret__, 'enabled'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        operation_definitions=pulumi.get(__ret__, 'operation_definitions'),
        operation_type=pulumi.get(__ret__, 'operation_type'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        region=pulumi.get(__ret__, 'region'),
        triggers=pulumi.get(__ret__, 'triggers'))
def get_backup_policy_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupPolicyResult]:
    """
    Use this data source to get the HSS backup policy within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_id = config.require_object("policyId")
    test = huaweicloud.hss.get_backup_policy(policy_id=policy_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project that the server belongs to.
           The value **0** indicates the default enterprise project. To query servers in all enterprise projects, set this parameter
           to **all_granted_eps**. If you have only the permission on an enterprise project, you need to transfer the enterprise
           project ID to query the server in the enterprise project. Otherwise, an error is reported due to insufficient permission.
           
           > An enterprise project can be configured only after the enterprise project function is enabled.
    :param _builtins.str policy_id: Specifies the backup policy ID.
    :param _builtins.str region: Specifies the region in which to query the resource. If omitted, the provider-level
           region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['policyId'] = policy_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getBackupPolicy:getBackupPolicy', __args__, opts=opts, typ=GetBackupPolicyResult)
    return __ret__.apply(lambda __response__: GetBackupPolicyResult(
        enabled=pulumi.get(__response__, 'enabled'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        operation_definitions=pulumi.get(__response__, 'operation_definitions'),
        operation_type=pulumi.get(__response__, 'operation_type'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        region=pulumi.get(__response__, 'region'),
        triggers=pulumi.get(__response__, 'triggers')))
