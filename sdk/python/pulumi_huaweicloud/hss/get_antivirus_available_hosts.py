# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAntivirusAvailableHostsResult',
    'AwaitableGetAntivirusAvailableHostsResult',
    'get_antivirus_available_hosts',
    'get_antivirus_available_hosts_output',
]

@pulumi.output_type
class GetAntivirusAvailableHostsResult:
    """
    A collection of values returned by getAntivirusAvailableHosts.
    """
    def __init__(__self__, data_lists=None, enterprise_project_id=None, group_id=None, host_id=None, host_name=None, id=None, next_start_time=None, policy_id=None, private_ip=None, public_ip=None, region=None, scan_type=None, start_type=None, total_num=None):
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if host_id and not isinstance(host_id, str):
            raise TypeError("Expected argument 'host_id' to be a str")
        pulumi.set(__self__, "host_id", host_id)
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        pulumi.set(__self__, "host_name", host_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if next_start_time and not isinstance(next_start_time, int):
            raise TypeError("Expected argument 'next_start_time' to be a int")
        pulumi.set(__self__, "next_start_time", next_start_time)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scan_type and not isinstance(scan_type, str):
            raise TypeError("Expected argument 'scan_type' to be a str")
        pulumi.set(__self__, "scan_type", scan_type)
        if start_type and not isinstance(start_type, str):
            raise TypeError("Expected argument 'start_type' to be a str")
        pulumi.set(__self__, "start_type", start_type)
        if total_num and not isinstance(total_num, int):
            raise TypeError("Expected argument 'total_num' to be a int")
        pulumi.set(__self__, "total_num", total_num)

    @_builtins.property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence['outputs.GetAntivirusAvailableHostsDataListResult']:
        """
        The list of available hosts details.
        The data_list structure is documented below.
        """
        return pulumi.get(self, "data_lists")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        """
        The host group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[_builtins.str]:
        """
        The host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        The host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nextStartTime")
    def next_start_time(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "next_start_time")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        The host private IP address.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The host public IP address.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scanType")
    def scan_type(self) -> _builtins.str:
        return pulumi.get(self, "scan_type")

    @_builtins.property
    @pulumi.getter(name="startType")
    def start_type(self) -> _builtins.str:
        return pulumi.get(self, "start_type")

    @_builtins.property
    @pulumi.getter(name="totalNum")
    def total_num(self) -> _builtins.int:
        """
        The total number of available hosts.
        """
        return pulumi.get(self, "total_num")


class AwaitableGetAntivirusAvailableHostsResult(GetAntivirusAvailableHostsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAntivirusAvailableHostsResult(
            data_lists=self.data_lists,
            enterprise_project_id=self.enterprise_project_id,
            group_id=self.group_id,
            host_id=self.host_id,
            host_name=self.host_name,
            id=self.id,
            next_start_time=self.next_start_time,
            policy_id=self.policy_id,
            private_ip=self.private_ip,
            public_ip=self.public_ip,
            region=self.region,
            scan_type=self.scan_type,
            start_type=self.start_type,
            total_num=self.total_num)


def get_antivirus_available_hosts(enterprise_project_id: Optional[_builtins.str] = None,
                                  group_id: Optional[_builtins.str] = None,
                                  host_id: Optional[_builtins.str] = None,
                                  host_name: Optional[_builtins.str] = None,
                                  next_start_time: Optional[_builtins.int] = None,
                                  policy_id: Optional[_builtins.str] = None,
                                  private_ip: Optional[_builtins.str] = None,
                                  public_ip: Optional[_builtins.str] = None,
                                  region: Optional[_builtins.str] = None,
                                  scan_type: Optional[_builtins.str] = None,
                                  start_type: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAntivirusAvailableHostsResult:
    """
    Use this data source to get the list of HSS antivirus available hosts within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scan_type = config.require_object("scanType")
    start_type = config.require_object("startType")
    test = huaweicloud.hss.get_antivirus_available_hosts(scan_type=scan_type,
        start_type=start_type)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str group_id: Specifies the host group ID.
    :param _builtins.str host_id: Specifies the host ID.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.int next_start_time: Specifies the next startup time in milliseconds.
    :param _builtins.str policy_id: Specifies the policy ID.
    :param _builtins.str private_ip: Specifies the host private IP address.
    :param _builtins.str public_ip: Specifies the host public IP address.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str scan_type: Specifies the scan type.  
           The valid values are as follows:
           + **quick**: Quick scan.
           + **full**: Full scan.
           + **custom**: Custom scan.
    :param _builtins.str start_type: Specifies the startup type.  
           The valid values are as follows:
           + **now**
           + **period**
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupId'] = group_id
    __args__['hostId'] = host_id
    __args__['hostName'] = host_name
    __args__['nextStartTime'] = next_start_time
    __args__['policyId'] = policy_id
    __args__['privateIp'] = private_ip
    __args__['publicIp'] = public_ip
    __args__['region'] = region
    __args__['scanType'] = scan_type
    __args__['startType'] = start_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:hss/getAntivirusAvailableHosts:getAntivirusAvailableHosts', __args__, opts=opts, typ=GetAntivirusAvailableHostsResult).value

    return AwaitableGetAntivirusAvailableHostsResult(
        data_lists=pulumi.get(__ret__, 'data_lists'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        group_id=pulumi.get(__ret__, 'group_id'),
        host_id=pulumi.get(__ret__, 'host_id'),
        host_name=pulumi.get(__ret__, 'host_name'),
        id=pulumi.get(__ret__, 'id'),
        next_start_time=pulumi.get(__ret__, 'next_start_time'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        public_ip=pulumi.get(__ret__, 'public_ip'),
        region=pulumi.get(__ret__, 'region'),
        scan_type=pulumi.get(__ret__, 'scan_type'),
        start_type=pulumi.get(__ret__, 'start_type'),
        total_num=pulumi.get(__ret__, 'total_num'))
def get_antivirus_available_hosts_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         host_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         host_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         next_start_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                         policy_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         private_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         public_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         scan_type: Optional[pulumi.Input[_builtins.str]] = None,
                                         start_type: Optional[pulumi.Input[_builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAntivirusAvailableHostsResult]:
    """
    Use this data source to get the list of HSS antivirus available hosts within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scan_type = config.require_object("scanType")
    start_type = config.require_object("startType")
    test = huaweicloud.hss.get_antivirus_available_hosts(scan_type=scan_type,
        start_type=start_type)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.  
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
           If you only have permissions for a specific enterprise project, you need set the enterprise project ID. Otherwise,
           the operation may fail due to insufficient permissions.
    :param _builtins.str group_id: Specifies the host group ID.
    :param _builtins.str host_id: Specifies the host ID.
    :param _builtins.str host_name: Specifies the host name.
    :param _builtins.int next_start_time: Specifies the next startup time in milliseconds.
    :param _builtins.str policy_id: Specifies the policy ID.
    :param _builtins.str private_ip: Specifies the host private IP address.
    :param _builtins.str public_ip: Specifies the host public IP address.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str scan_type: Specifies the scan type.  
           The valid values are as follows:
           + **quick**: Quick scan.
           + **full**: Full scan.
           + **custom**: Custom scan.
    :param _builtins.str start_type: Specifies the startup type.  
           The valid values are as follows:
           + **now**
           + **period**
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['groupId'] = group_id
    __args__['hostId'] = host_id
    __args__['hostName'] = host_name
    __args__['nextStartTime'] = next_start_time
    __args__['policyId'] = policy_id
    __args__['privateIp'] = private_ip
    __args__['publicIp'] = public_ip
    __args__['region'] = region
    __args__['scanType'] = scan_type
    __args__['startType'] = start_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:hss/getAntivirusAvailableHosts:getAntivirusAvailableHosts', __args__, opts=opts, typ=GetAntivirusAvailableHostsResult)
    return __ret__.apply(lambda __response__: GetAntivirusAvailableHostsResult(
        data_lists=pulumi.get(__response__, 'data_lists'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        group_id=pulumi.get(__response__, 'group_id'),
        host_id=pulumi.get(__response__, 'host_id'),
        host_name=pulumi.get(__response__, 'host_name'),
        id=pulumi.get(__response__, 'id'),
        next_start_time=pulumi.get(__response__, 'next_start_time'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        private_ip=pulumi.get(__response__, 'private_ip'),
        public_ip=pulumi.get(__response__, 'public_ip'),
        region=pulumi.get(__response__, 'region'),
        scan_type=pulumi.get(__response__, 'scan_type'),
        start_type=pulumi.get(__response__, 'start_type'),
        total_num=pulumi.get(__response__, 'total_num')))
