# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetAuditDataMaskingRulesRuleResult',
    'GetAuditRiskRulesRuleResult',
    'GetAuditRuleScopesScopeResult',
    'GetAuditSqlInjectionRulesRuleResult',
    'GetAvailabilityZonesAvailabilityZoneResult',
    'GetDatabasesDatabaseResult',
    'GetFlavorsFlavorResult',
    'GetInstancesInstanceResult',
    'GetOperationLogsLogResult',
    'GetRdsDatabasesDatabaseResult',
]

@pulumi.output_type
class GetAuditDataMaskingRulesRuleResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 mask_value: _builtins.str,
                 name: _builtins.str,
                 operate_time: _builtins.str,
                 regex: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: The ID of the privacy data masking rule.
        :param _builtins.str mask_value: The privacy data display substitution value.
        :param _builtins.str name: The name of the privacy data masking rule.
        :param _builtins.str operate_time: The operation time of the privacy data masking rule, in UTC format.
        :param _builtins.str regex: The regular expression of the privacy data masking rule.
        :param _builtins.str status: The status of the privacy data masking rule.
        :param _builtins.str type: The type of the privacy data masking rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mask_value", mask_value)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operate_time", operate_time)
        pulumi.set(__self__, "regex", regex)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the privacy data masking rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maskValue")
    def mask_value(self) -> _builtins.str:
        """
        The privacy data display substitution value.
        """
        return pulumi.get(self, "mask_value")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the privacy data masking rule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operateTime")
    def operate_time(self) -> _builtins.str:
        """
        The operation time of the privacy data masking rule, in UTC format.
        """
        return pulumi.get(self, "operate_time")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> _builtins.str:
        """
        The regular expression of the privacy data masking rule.
        """
        return pulumi.get(self, "regex")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the privacy data masking rule.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the privacy data masking rule.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAuditRiskRulesRuleResult(dict):
    def __init__(__self__, *,
                 feature: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 rank: _builtins.int,
                 risk_level: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str feature: The risk characteristics of the risk rule.
        :param _builtins.str id: The ID of the risk rule.
        :param _builtins.str name: Specifies the name of the risk rule. Supports fuzzy search.
        :param _builtins.int rank: The priority of the risk rule.
        :param _builtins.str risk_level: Specifies  the risk level of the risk rule.
               The valid values are as follows:
               + **LOW**
               + **MEDIUM**
               + **HIGH**
               + **NO_RISK**
        :param _builtins.str status: The status of the risk rule.
        :param _builtins.str type: The type of the risk rule.
        """
        pulumi.set(__self__, "feature", feature)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rank", rank)
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def feature(self) -> _builtins.str:
        """
        The risk characteristics of the risk rule.
        """
        return pulumi.get(self, "feature")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the risk rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the risk rule. Supports fuzzy search.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def rank(self) -> _builtins.int:
        """
        The priority of the risk rule.
        """
        return pulumi.get(self, "rank")

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> _builtins.str:
        """
        Specifies  the risk level of the risk rule.
        The valid values are as follows:
        + **LOW**
        + **MEDIUM**
        + **HIGH**
        + **NO_RISK**
        """
        return pulumi.get(self, "risk_level")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the risk rule.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the risk rule.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAuditRuleScopesScopeResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 all_audit: _builtins.bool,
                 db_ids: _builtins.str,
                 db_names: _builtins.str,
                 db_users: _builtins.str,
                 exception_ips: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 source_ips: _builtins.str,
                 source_ports: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str action: The action of the audit scope.
        :param _builtins.bool all_audit: Whether is full audit.
        :param _builtins.str db_ids: The database IDs associated with the audit scope.
        :param _builtins.str db_names: The database names associated with the audit scope.
        :param _builtins.str db_users: The database accounts associated with the audit scope.
        :param _builtins.str exception_ips: The exception IP addresses of the audit scope.
        :param _builtins.str id: The ID of the audit scope.
        :param _builtins.str name: The name of the audit scope.
        :param _builtins.str source_ips: The source IP addresses of the audit scope.
        :param _builtins.str source_ports: The source ports of the audit scope.
        :param _builtins.str status: The status of the audit scope.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "all_audit", all_audit)
        pulumi.set(__self__, "db_ids", db_ids)
        pulumi.set(__self__, "db_names", db_names)
        pulumi.set(__self__, "db_users", db_users)
        pulumi.set(__self__, "exception_ips", exception_ips)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_ips", source_ips)
        pulumi.set(__self__, "source_ports", source_ports)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        The action of the audit scope.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="allAudit")
    def all_audit(self) -> _builtins.bool:
        """
        Whether is full audit.
        """
        return pulumi.get(self, "all_audit")

    @_builtins.property
    @pulumi.getter(name="dbIds")
    def db_ids(self) -> _builtins.str:
        """
        The database IDs associated with the audit scope.
        """
        return pulumi.get(self, "db_ids")

    @_builtins.property
    @pulumi.getter(name="dbNames")
    def db_names(self) -> _builtins.str:
        """
        The database names associated with the audit scope.
        """
        return pulumi.get(self, "db_names")

    @_builtins.property
    @pulumi.getter(name="dbUsers")
    def db_users(self) -> _builtins.str:
        """
        The database accounts associated with the audit scope.
        """
        return pulumi.get(self, "db_users")

    @_builtins.property
    @pulumi.getter(name="exceptionIps")
    def exception_ips(self) -> _builtins.str:
        """
        The exception IP addresses of the audit scope.
        """
        return pulumi.get(self, "exception_ips")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the audit scope.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the audit scope.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceIps")
    def source_ips(self) -> _builtins.str:
        """
        The source IP addresses of the audit scope.
        """
        return pulumi.get(self, "source_ips")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> _builtins.str:
        """
        The source ports of the audit scope.
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the audit scope.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAuditSqlInjectionRulesRuleResult(dict):
    def __init__(__self__, *,
                 feature: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 rank: _builtins.int,
                 regex: _builtins.str,
                 risk_level: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str feature: The SQL command characteristics of the SQL injection rule.
        :param _builtins.str id: The ID of the SQL injection rule.
        :param _builtins.str name: The name of the SQL injection rule.
        :param _builtins.int rank: The rank of the SQL injection rule.
        :param _builtins.str regex: The regular expression content of the SQL injection rule.
        :param _builtins.str risk_level: The risk level of the SQL injection rule.
        :param _builtins.str status: The status of the SQL injection rule.
        :param _builtins.str type: The type of the SQL injection rule.
        """
        pulumi.set(__self__, "feature", feature)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rank", rank)
        pulumi.set(__self__, "regex", regex)
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def feature(self) -> _builtins.str:
        """
        The SQL command characteristics of the SQL injection rule.
        """
        return pulumi.get(self, "feature")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the SQL injection rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the SQL injection rule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def rank(self) -> _builtins.int:
        """
        The rank of the SQL injection rule.
        """
        return pulumi.get(self, "rank")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> _builtins.str:
        """
        The regular expression content of the SQL injection rule.
        """
        return pulumi.get(self, "regex")

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> _builtins.str:
        """
        The risk level of the SQL injection rule.
        """
        return pulumi.get(self, "risk_level")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the SQL injection rule.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the SQL injection rule.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAvailabilityZonesAvailabilityZoneResult(dict):
    def __init__(__self__, *,
                 alias: _builtins.str,
                 alias_us: _builtins.str,
                 name: _builtins.str,
                 number: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str alias: The alias of the availability zone.
        :param _builtins.str alias_us: The alias in English of the availability zone.
        :param _builtins.str name: The name of the availability zone.
        :param _builtins.int number: The number of the availability zone.
        :param _builtins.str type: The type of the availability zone.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "alias_us", alias_us)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> _builtins.str:
        """
        The alias of the availability zone.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="aliasUs")
    def alias_us(self) -> _builtins.str:
        """
        The alias in English of the availability zone.
        """
        return pulumi.get(self, "alias_us")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the availability zone.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def number(self) -> _builtins.int:
        """
        The number of the availability zone.
        """
        return pulumi.get(self, "number")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the availability zone.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 agent_urls: Sequence[_builtins.str],
                 audit_status: _builtins.str,
                 charset: _builtins.str,
                 db_classification: _builtins.str,
                 id: _builtins.str,
                 instance_name: _builtins.str,
                 ip: _builtins.str,
                 name: _builtins.str,
                 os: _builtins.str,
                 port: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param Sequence[_builtins.str] agent_urls: The unique ID of the agent.
        :param _builtins.str audit_status: The running status of the database.
               The value can be **ACTIVE**, **SHUTOFF** or **ERROR**.
        :param _builtins.str charset: The character set of the database.
        :param _builtins.str db_classification: The classification of the database.
               The value can be **RDS** (RDS database) or **ECS** (self-built database).
        :param _builtins.str id: The ID of the database.
        :param _builtins.str instance_name: The name of the database instance.
        :param _builtins.str ip: The IP address of the database.
        :param _builtins.str name: The name of the database.
        :param _builtins.str os: The operation system of the database.
        :param _builtins.str port: The port of the database.
        :param _builtins.str status: Specifies the status of the database.
               The value can be **ON** or **OFF**.
        :param _builtins.str type: The type of the added database.
               The valid values are as follows:
               + **MYSQL**
               + **ORACLE**
               + **POSTGRESQL**
               + **SQLSERVER**
               + **DAMENG**
               + **TAURUS**
               + **DWS**
               + **KINGBASE**
               + **GAUSSDBOPENGAUSS**
               + **GREENPLUM**
               + **HIGHGO**
               + **SHENTONG**
               + **GBASE8A**
               + **GBASE8S**
               + **GBASEXDM**
               + **MONGODB**
               + **DDS**
        :param _builtins.str version: The version of the database.
        """
        pulumi.set(__self__, "agent_urls", agent_urls)
        pulumi.set(__self__, "audit_status", audit_status)
        pulumi.set(__self__, "charset", charset)
        pulumi.set(__self__, "db_classification", db_classification)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="agentUrls")
    def agent_urls(self) -> Sequence[_builtins.str]:
        """
        The unique ID of the agent.
        """
        return pulumi.get(self, "agent_urls")

    @_builtins.property
    @pulumi.getter(name="auditStatus")
    def audit_status(self) -> _builtins.str:
        """
        The running status of the database.
        The value can be **ACTIVE**, **SHUTOFF** or **ERROR**.
        """
        return pulumi.get(self, "audit_status")

    @_builtins.property
    @pulumi.getter
    def charset(self) -> _builtins.str:
        """
        The character set of the database.
        """
        return pulumi.get(self, "charset")

    @_builtins.property
    @pulumi.getter(name="dbClassification")
    def db_classification(self) -> _builtins.str:
        """
        The classification of the database.
        The value can be **RDS** (RDS database) or **ECS** (self-built database).
        """
        return pulumi.get(self, "db_classification")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the database.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        The name of the database instance.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        The IP address of the database.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the database.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def os(self) -> _builtins.str:
        """
        The operation system of the database.
        """
        return pulumi.get(self, "os")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        The port of the database.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the database.
        The value can be **ON** or **OFF**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the added database.
        The valid values are as follows:
        + **MYSQL**
        + **ORACLE**
        + **POSTGRESQL**
        + **SQLSERVER**
        + **DAMENG**
        + **TAURUS**
        + **DWS**
        + **KINGBASE**
        + **GAUSSDBOPENGAUSS**
        + **GREENPLUM**
        + **HIGHGO**
        + **SHENTONG**
        + **GBASE8A**
        + **GBASE8S**
        + **GBASEXDM**
        + **MONGODB**
        + **DDS**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the database.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[_builtins.str],
                 id: _builtins.str,
                 level: _builtins.str,
                 memory: _builtins.float,
                 proxy: _builtins.int,
                 vcpus: _builtins.int):
        """
        :param Sequence[_builtins.str] availability_zones: Indicates the availability zones which the flavor belongs to
        :param _builtins.str id: Indicates the ID of the flavor.
        :param _builtins.str level: Specifies the level of the flavor. Value options:
               + **entry**: Starter edition.
               + **low**: Basic edition.
               + **medium**: Professional edition.
               + **high**: Premium edition.
        :param _builtins.float memory: Specifies the memory size(GB) in the flavor.
        :param _builtins.int proxy: Specifies the maximum supported database instances.
        :param _builtins.int vcpus: Specifies the number of CPUs.
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "proxy", proxy)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        Indicates the availability zones which the flavor belongs to
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        Specifies the level of the flavor. Value options:
        + **entry**: Starter edition.
        + **low**: Basic edition.
        + **medium**: Professional edition.
        + **high**: Premium edition.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.float:
        """
        Specifies the memory size(GB) in the flavor.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def proxy(self) -> _builtins.int:
        """
        Specifies the maximum supported database instances.
        """
        return pulumi.get(self, "proxy")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        Specifies the number of CPUs.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 charge_model: _builtins.str,
                 config_num: _builtins.int,
                 connect_ip: _builtins.str,
                 connect_ipv6: _builtins.str,
                 cpu: _builtins.int,
                 created_at: _builtins.str,
                 database_limit: _builtins.int,
                 description: _builtins.str,
                 effect: _builtins.int,
                 expired_at: _builtins.str,
                 instance_id: _builtins.str,
                 keep_days: _builtins.str,
                 name: _builtins.str,
                 new_version: _builtins.str,
                 port_id: _builtins.str,
                 ram: _builtins.int,
                 region: _builtins.str,
                 remain_days: _builtins.str,
                 resource_id: _builtins.str,
                 resource_spec_code: _builtins.str,
                 scene: _builtins.str,
                 security_group_id: _builtins.str,
                 specification: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 task: _builtins.str,
                 version: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str availability_zone: The availability zone.
        :param _builtins.str charge_model: The payment mode. Its value can be **Period** (yearly/monthly) or **Demand** (pay-per-use).
        :param _builtins.int config_num: The total number of configured databases.
        :param _builtins.str connect_ip: The connection IP address.
        :param _builtins.str connect_ipv6: The IPv6 address.
        :param _builtins.int cpu: The number of CPUs.
        :param _builtins.str created_at: The creation time.
        :param _builtins.int database_limit: The total number of supported databases.
        :param _builtins.str description: The remark information.
        :param _builtins.int effect: The effects of freezing. Valid values are as follows:
               + **1**: The resource is frozen and can be released.
               + **2**: The resource is frozen and cannot be released.
               + **3**: The resource is frozen and cannot be renewed.
        :param _builtins.str expired_at: The expired time.
        :param _builtins.str instance_id: The instance ID.
        :param _builtins.str keep_days: Days until expiration.
        :param _builtins.str name: The instance name.
        :param _builtins.str new_version: The new version. If a value is returned, the upgrade is required.
        :param _builtins.str port_id: The ID of the port that the EIP is bound to.
        :param _builtins.int ram: The memory size.
        :param _builtins.str region: Specifies the region in which to query the resource.
               If omitted, the provider-level region will be used.
        :param _builtins.str remain_days: Days to expiry.
        :param _builtins.str resource_id: The resource ID.
        :param _builtins.str resource_spec_code: The instance specifications.
        :param _builtins.str scene: The scene information.
        :param _builtins.str security_group_id: The security group ID.
        :param _builtins.str specification: The instance specifications.
        :param _builtins.str status: The instance status. Its value can be:
               + **SHUTOFF**: Disabled.
               + **ACTIVE**: Operations allowed.
               + **DELETING**: No operations allowed.
               + **BUILD**: No operations allowed.
               + **DELETED**: Not displayed.
               + **ERROR**: Only deletion allowed.
               + **HAWAIT**: Waiting for the standby to be created; No operations allowed.
               + **FROZEN**: Only renewal, binding, and unbinding allowed.
               + **UPGRADING**: No operations allowed.
        :param _builtins.str subnet_id: The subnet ID.
        :param _builtins.str task: The task status. Its value can be:
               + **powering-on**: The instance is being started and can be bound or unbound.
               + **powering-off**: The instance is being stopped and can be bound or unbound.
               + **rebooting**: The instance is being restarted and can be bound or unbound.
               + **delete_wait**: The instance is waiting to be deleted and no operations are allowed on the cluster or instance.
               + **NO_TASK**: The instance is not displayed.
        :param _builtins.str version: The current version of the instance.
        :param _builtins.str vpc_id: The VPC ID.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "charge_model", charge_model)
        pulumi.set(__self__, "config_num", config_num)
        pulumi.set(__self__, "connect_ip", connect_ip)
        pulumi.set(__self__, "connect_ipv6", connect_ipv6)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "database_limit", database_limit)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "expired_at", expired_at)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "new_version", new_version)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "remain_days", remain_days)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_spec_code", resource_spec_code)
        pulumi.set(__self__, "scene", scene)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "specification", specification)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "task", task)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The availability zone.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="chargeModel")
    def charge_model(self) -> _builtins.str:
        """
        The payment mode. Its value can be **Period** (yearly/monthly) or **Demand** (pay-per-use).
        """
        return pulumi.get(self, "charge_model")

    @_builtins.property
    @pulumi.getter(name="configNum")
    def config_num(self) -> _builtins.int:
        """
        The total number of configured databases.
        """
        return pulumi.get(self, "config_num")

    @_builtins.property
    @pulumi.getter(name="connectIp")
    def connect_ip(self) -> _builtins.str:
        """
        The connection IP address.
        """
        return pulumi.get(self, "connect_ip")

    @_builtins.property
    @pulumi.getter(name="connectIpv6")
    def connect_ipv6(self) -> _builtins.str:
        """
        The IPv6 address.
        """
        return pulumi.get(self, "connect_ipv6")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.int:
        """
        The number of CPUs.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="databaseLimit")
    def database_limit(self) -> _builtins.int:
        """
        The total number of supported databases.
        """
        return pulumi.get(self, "database_limit")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The remark information.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def effect(self) -> _builtins.int:
        """
        The effects of freezing. Valid values are as follows:
        + **1**: The resource is frozen and can be released.
        + **2**: The resource is frozen and cannot be released.
        + **3**: The resource is frozen and cannot be renewed.
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> _builtins.str:
        """
        The expired time.
        """
        return pulumi.get(self, "expired_at")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.str:
        """
        Days until expiration.
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="newVersion")
    def new_version(self) -> _builtins.str:
        """
        The new version. If a value is returned, the upgrade is required.
        """
        return pulumi.get(self, "new_version")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> _builtins.str:
        """
        The ID of the port that the EIP is bound to.
        """
        return pulumi.get(self, "port_id")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> _builtins.int:
        """
        The memory size.
        """
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Specifies the region in which to query the resource.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="remainDays")
    def remain_days(self) -> _builtins.str:
        """
        Days to expiry.
        """
        return pulumi.get(self, "remain_days")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> _builtins.str:
        """
        The instance specifications.
        """
        return pulumi.get(self, "resource_spec_code")

    @_builtins.property
    @pulumi.getter
    def scene(self) -> _builtins.str:
        """
        The scene information.
        """
        return pulumi.get(self, "scene")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The security group ID.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter
    def specification(self) -> _builtins.str:
        """
        The instance specifications.
        """
        return pulumi.get(self, "specification")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The instance status. Its value can be:
        + **SHUTOFF**: Disabled.
        + **ACTIVE**: Operations allowed.
        + **DELETING**: No operations allowed.
        + **BUILD**: No operations allowed.
        + **DELETED**: Not displayed.
        + **ERROR**: Only deletion allowed.
        + **HAWAIT**: Waiting for the standby to be created; No operations allowed.
        + **FROZEN**: Only renewal, binding, and unbinding allowed.
        + **UPGRADING**: No operations allowed.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def task(self) -> _builtins.str:
        """
        The task status. Its value can be:
        + **powering-on**: The instance is being started and can be bound or unbound.
        + **powering-off**: The instance is being stopped and can be bound or unbound.
        + **rebooting**: The instance is being restarted and can be bound or unbound.
        + **delete_wait**: The instance is waiting to be deleted and no operations are allowed on the cluster or instance.
        + **NO_TASK**: The instance is not displayed.
        """
        return pulumi.get(self, "task")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The current version of the instance.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The VPC ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetOperationLogsLogResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 description: _builtins.str,
                 function: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 result: _builtins.str,
                 time: _builtins.str,
                 user: _builtins.str):
        """
        :param _builtins.str action: The type of the user operation.
               The valid values are as follows:
               + **create**
               + **update**
               + **delete**
               + **operate**
        :param _builtins.str description: The description of the user operation.
        :param _builtins.str function: The function type of the operation record.
        :param _builtins.str id: The ID of the user operation log.
        :param _builtins.str name: The name of the operation object.
        :param _builtins.str result: Specifies the execution result of user operation.
               The value can be **success** or **fail**.
        :param _builtins.str time: The time of the operation record is generated, in UTC format.
        :param _builtins.str user: The name of the operation user.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "function", function)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "result", result)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "user", user)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        The type of the user operation.
        The valid values are as follows:
        + **create**
        + **update**
        + **delete**
        + **operate**
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the user operation.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def function(self) -> _builtins.str:
        """
        The function type of the operation record.
        """
        return pulumi.get(self, "function")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the user operation log.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the operation object.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def result(self) -> _builtins.str:
        """
        Specifies the execution result of user operation.
        The value can be **success** or **fail**.
        """
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.str:
        """
        The time of the operation record is generated, in UTC format.
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter
    def user(self) -> _builtins.str:
        """
        The name of the operation user.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class GetRdsDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 instance_name: _builtins.str,
                 ip: _builtins.str,
                 is_supported: _builtins.bool,
                 name: _builtins.str,
                 port: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str enterprise_project_id: The enterprise project ID to which the RDS instance belongs.
        :param _builtins.str id: The RDS instance ID.
        :param _builtins.str instance_name: The RDS instance name.
        :param _builtins.str ip: The RDS database IP address.
        :param _builtins.bool is_supported: Whether agent-free audit is supported.
        :param _builtins.str name: The RDS database name.
        :param _builtins.str port: The RDS database port.
        :param _builtins.str status: The RDS instance status.
               The valid values are as follows:
               + **BUILD**: The instance is being created.
               + **ACTIVE**: The instance is normal.
               + **FAILED**: The instance is abnormal.
               + **FROZEN**: The instance is frozen.
               + **MODIFYING**: The instance is being scaled out.
               + **REBOOTING**: The instance is being restarted.
               + **RESTORING**: The instance is being restored.
               + **MODIFYING INSTANCE TYPE**: The instance is changing to the active/standby mode.
               + **SWITCHOVER**: The instance is performing an active/standby switchover.
               + **MIGRATING**: The instance is being migrated.
               + **BACKING UP**: The instance is being backed up.
               + **MODIFYING DATABASE PORT**: The database port of the instance is being changed.
               + **STORAGE FULL**: The instance disk is full.
        :param _builtins.str type: Specifies the RDS database type.
               The valid values are as follows:
               + **MYSQL**
               + **POSTGRESQL**
               + **SQLSERVER**
               + **TAURUS**
               + **DWS**
               + **MARIADB**
               + **GAUSSDBOPENGAUSS**
        :param _builtins.str version: The RDS database version.
        """
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "is_supported", is_supported)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID to which the RDS instance belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The RDS instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        The RDS instance name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        The RDS database IP address.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="isSupported")
    def is_supported(self) -> _builtins.bool:
        """
        Whether agent-free audit is supported.
        """
        return pulumi.get(self, "is_supported")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The RDS database name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        The RDS database port.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The RDS instance status.
        The valid values are as follows:
        + **BUILD**: The instance is being created.
        + **ACTIVE**: The instance is normal.
        + **FAILED**: The instance is abnormal.
        + **FROZEN**: The instance is frozen.
        + **MODIFYING**: The instance is being scaled out.
        + **REBOOTING**: The instance is being restarted.
        + **RESTORING**: The instance is being restored.
        + **MODIFYING INSTANCE TYPE**: The instance is changing to the active/standby mode.
        + **SWITCHOVER**: The instance is performing an active/standby switchover.
        + **MIGRATING**: The instance is being migrated.
        + **BACKING UP**: The instance is being backed up.
        + **MODIFYING DATABASE PORT**: The database port of the instance is being changed.
        + **STORAGE FULL**: The instance disk is full.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the RDS database type.
        The valid values are as follows:
        + **MYSQL**
        + **POSTGRESQL**
        + **SQLSERVER**
        + **TAURUS**
        + **DWS**
        + **MARIADB**
        + **GAUSSDBOPENGAUSS**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The RDS database version.
        """
        return pulumi.get(self, "version")


