# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AuditRiskRuleActionArgs', 'AuditRiskRuleAction']

@pulumi.input_type
class AuditRiskRuleActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 risk_ids: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AuditRiskRuleAction resource.
        :param pulumi.Input[_builtins.str] action: Specifies the operation type.
               The value can be **ON** or **OFF**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the audit instance ID to which the risk rule belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] risk_ids: Specifies the risk rule ID.
               Multiple IDs should be separated by commas (,).
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "risk_ids", risk_ids)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operation type.
        The value can be **ON** or **OFF**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the audit instance ID to which the risk rule belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="riskIds")
    def risk_ids(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the risk rule ID.
        Multiple IDs should be separated by commas (,).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "risk_ids")

    @risk_ids.setter
    def risk_ids(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "risk_ids", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AuditRiskRuleActionState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 result: Optional[pulumi.Input[_builtins.str]] = None,
                 risk_ids: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AuditRiskRuleAction resources.
        :param pulumi.Input[_builtins.str] action: Specifies the operation type.
               The value can be **ON** or **OFF**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the audit instance ID to which the risk rule belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] result: The operation execution result.
        :param pulumi.Input[_builtins.str] risk_ids: Specifies the risk rule ID.
               Multiple IDs should be separated by commas (,).
               Changing this parameter will create a new resource.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if risk_ids is not None:
            pulumi.set(__self__, "risk_ids", risk_ids)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operation type.
        The value can be **ON** or **OFF**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the audit instance ID to which the risk rule belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The operation execution result.
        """
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "result", value)

    @_builtins.property
    @pulumi.getter(name="riskIds")
    def risk_ids(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the risk rule ID.
        Multiple IDs should be separated by commas (,).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "risk_ids")

    @risk_ids.setter
    def risk_ids(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "risk_ids", value)


@pulumi.type_token("huaweicloud:dbss/auditRiskRuleAction:AuditRiskRuleAction")
class AuditRiskRuleAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 risk_ids: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a risk rule action resource within HuaweiCloud.

        > This resource is only a one-time action resource for doing API action. Deleting this resource will not clear
          the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        risk_ids = config.require_object("riskIds")
        action = config.require_object("action")
        test = huaweicloud.dbss.AuditRiskRuleAction("test",
            instance_id=instance_id,
            risk_ids=risk_ids,
            action=action)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the operation type.
               The value can be **ON** or **OFF**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the audit instance ID to which the risk rule belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] risk_ids: Specifies the risk rule ID.
               Multiple IDs should be separated by commas (,).
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuditRiskRuleActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a risk rule action resource within HuaweiCloud.

        > This resource is only a one-time action resource for doing API action. Deleting this resource will not clear
          the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        risk_ids = config.require_object("riskIds")
        action = config.require_object("action")
        test = huaweicloud.dbss.AuditRiskRuleAction("test",
            instance_id=instance_id,
            risk_ids=risk_ids,
            action=action)
        ```

        :param str resource_name: The name of the resource.
        :param AuditRiskRuleActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuditRiskRuleActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 risk_ids: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuditRiskRuleActionArgs.__new__(AuditRiskRuleActionArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            if risk_ids is None and not opts.urn:
                raise TypeError("Missing required property 'risk_ids'")
            __props__.__dict__["risk_ids"] = risk_ids
            __props__.__dict__["result"] = None
        super(AuditRiskRuleAction, __self__).__init__(
            'huaweicloud:dbss/auditRiskRuleAction:AuditRiskRuleAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            result: Optional[pulumi.Input[_builtins.str]] = None,
            risk_ids: Optional[pulumi.Input[_builtins.str]] = None) -> 'AuditRiskRuleAction':
        """
        Get an existing AuditRiskRuleAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the operation type.
               The value can be **ON** or **OFF**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the audit instance ID to which the risk rule belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] result: The operation execution result.
        :param pulumi.Input[_builtins.str] risk_ids: Specifies the risk rule ID.
               Multiple IDs should be separated by commas (,).
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuditRiskRuleActionState.__new__(_AuditRiskRuleActionState)

        __props__.__dict__["action"] = action
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["result"] = result
        __props__.__dict__["risk_ids"] = risk_ids
        return AuditRiskRuleAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the operation type.
        The value can be **ON** or **OFF**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the audit instance ID to which the risk rule belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def result(self) -> pulumi.Output[_builtins.str]:
        """
        The operation execution result.
        """
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter(name="riskIds")
    def risk_ids(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the risk rule ID.
        Multiple IDs should be separated by commas (,).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "risk_ids")

