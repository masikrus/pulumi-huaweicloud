# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAuditRiskRulesResult',
    'AwaitableGetAuditRiskRulesResult',
    'get_audit_risk_rules',
    'get_audit_risk_rules_output',
]

@pulumi.output_type
class GetAuditRiskRulesResult:
    """
    A collection of values returned by getAuditRiskRules.
    """
    def __init__(__self__, id=None, instance_id=None, name=None, region=None, risk_level=None, rules=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if risk_level and not isinstance(risk_level, str):
            raise TypeError("Expected argument 'risk_level' to be a str")
        pulumi.set(__self__, "risk_level", risk_level)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the risk rule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[_builtins.str]:
        """
        The risk level of the risk rule.
        """
        return pulumi.get(self, "risk_level")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetAuditRiskRulesRuleResult']:
        """
        The list of the risk rules.
        """
        return pulumi.get(self, "rules")


class AwaitableGetAuditRiskRulesResult(GetAuditRiskRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuditRiskRulesResult(
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region,
            risk_level=self.risk_level,
            rules=self.rules)


def get_audit_risk_rules(instance_id: Optional[_builtins.str] = None,
                         name: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         risk_level: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuditRiskRulesResult:
    """
    Use this data source to get a list of risk rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.dbss.get_audit_risk_rules(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the audit instance ID to which the risk rules belong.
    :param _builtins.str name: Specifies the name of the risk rule. Supports fuzzy search.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str risk_level: Specifies  the risk level of the risk rule.
           The valid values are as follows:
           + **LOW**
           + **MEDIUM**
           + **HIGH**
           + **NO_RISK**
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['riskLevel'] = risk_level
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:dbss/getAuditRiskRules:getAuditRiskRules', __args__, opts=opts, typ=GetAuditRiskRulesResult).value

    return AwaitableGetAuditRiskRulesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        risk_level=pulumi.get(__ret__, 'risk_level'),
        rules=pulumi.get(__ret__, 'rules'))
def get_audit_risk_rules_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                risk_level: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAuditRiskRulesResult]:
    """
    Use this data source to get a list of risk rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.dbss.get_audit_risk_rules(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the audit instance ID to which the risk rules belong.
    :param _builtins.str name: Specifies the name of the risk rule. Supports fuzzy search.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str risk_level: Specifies  the risk level of the risk rule.
           The valid values are as follows:
           + **LOW**
           + **MEDIUM**
           + **HIGH**
           + **NO_RISK**
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['riskLevel'] = risk_level
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:dbss/getAuditRiskRules:getAuditRiskRules', __args__, opts=opts, typ=GetAuditRiskRulesResult)
    return __ret__.apply(lambda __response__: GetAuditRiskRulesResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        risk_level=pulumi.get(__response__, 'risk_level'),
        rules=pulumi.get(__response__, 'rules')))
