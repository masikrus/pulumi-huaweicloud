# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['EcsDatabaseArgs', 'EcsDatabase']

@pulumi.input_type
class EcsDatabaseArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 ip: pulumi.Input[_builtins.str],
                 os: pulumi.Input[_builtins.str],
                 port: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 charset: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 lts_audit_switch: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EcsDatabase resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DBSS instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ip: Specifies the self built database IP address.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] os: Specifies the self built database operation system.
               The valid values are as follows:
               + **LINUX64**
               + **WINDOWS64**
               + **UNIX**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] port: Specifies the self built database port.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the self built database type.
               The valid values are as follows:
               + **MYSQL**
               + **ORACLE**
               + **POSTGRESQL**
               + **SQLSERVER**
               + **DAMENG**
               + **TAURUS**
               + **DWS**
               + **KINGBASE**
               + **GAUSSDBOPENGAUSS**
               + **GREENPLUM**
               + **HIGHGO**
               + **SHENTONG**
               + **GBASE8A**
               + **GBASE8S**
               + **GBASEXDM**
               + **MONGODB**
               + **DDS**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] version: Specifies the self built database version.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charset: Specifies the self built database character set.
               The value can be **GBK** or **UTF8**. Defaults to **UTF8**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_name: Specifies the self built database instance name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] lts_audit_switch: Specifies whether to disable LTS audit.
               The valid values are as follows:
        :param pulumi.Input[_builtins.str] name: Specifies the self built database name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the audit status of the self built database.
               The valid values are as follows:
               + **ON**
               + **OFF**
               
               After a self built database is associated with the DBSS instance, the audit status is **OFF** by default.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if charset is not None:
            pulumi.set(__self__, "charset", charset)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if lts_audit_switch is not None:
            pulumi.set(__self__, "lts_audit_switch", lts_audit_switch)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DBSS instance ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the self built database IP address.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter
    def os(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the self built database operation system.
        The valid values are as follows:
        + **LINUX64**
        + **WINDOWS64**
        + **UNIX**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "os", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the self built database port.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the self built database type.
        The valid values are as follows:
        + **MYSQL**
        + **ORACLE**
        + **POSTGRESQL**
        + **SQLSERVER**
        + **DAMENG**
        + **TAURUS**
        + **DWS**
        + **KINGBASE**
        + **GAUSSDBOPENGAUSS**
        + **GREENPLUM**
        + **HIGHGO**
        + **SHENTONG**
        + **GBASE8A**
        + **GBASE8S**
        + **GBASEXDM**
        + **MONGODB**
        + **DDS**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the self built database version.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter
    def charset(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the self built database character set.
        The value can be **GBK** or **UTF8**. Defaults to **UTF8**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charset")

    @charset.setter
    def charset(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charset", value)

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the self built database instance name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_name", value)

    @_builtins.property
    @pulumi.getter(name="ltsAuditSwitch")
    def lts_audit_switch(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies whether to disable LTS audit.
        The valid values are as follows:
        """
        return pulumi.get(self, "lts_audit_switch")

    @lts_audit_switch.setter
    def lts_audit_switch(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lts_audit_switch", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the self built database name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the audit status of the self built database.
        The valid values are as follows:
        + **ON**
        + **OFF**

        After a self built database is associated with the DBSS instance, the audit status is **OFF** by default.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _EcsDatabaseState:
    def __init__(__self__, *,
                 agent_urls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 audit_status: Optional[pulumi.Input[_builtins.str]] = None,
                 charset: Optional[pulumi.Input[_builtins.str]] = None,
                 db_classification: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 lts_audit_switch: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EcsDatabase resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] agent_urls: The unique ID of the agent.
        :param pulumi.Input[_builtins.str] audit_status: The database running status.
               The value can be **ACTIVE**, **SHUTOFF** or **ERROR**.
        :param pulumi.Input[_builtins.str] charset: Specifies the self built database character set.
               The value can be **GBK** or **UTF8**. Defaults to **UTF8**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] db_classification: The classification of the database.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DBSS instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_name: Specifies the self built database instance name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ip: Specifies the self built database IP address.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] lts_audit_switch: Specifies whether to disable LTS audit.
               The valid values are as follows:
        :param pulumi.Input[_builtins.str] name: Specifies the self built database name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] os: Specifies the self built database operation system.
               The valid values are as follows:
               + **LINUX64**
               + **WINDOWS64**
               + **UNIX**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] port: Specifies the self built database port.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the audit status of the self built database.
               The valid values are as follows:
               + **ON**
               + **OFF**
               
               After a self built database is associated with the DBSS instance, the audit status is **OFF** by default.
        :param pulumi.Input[_builtins.str] type: Specifies the self built database type.
               The valid values are as follows:
               + **MYSQL**
               + **ORACLE**
               + **POSTGRESQL**
               + **SQLSERVER**
               + **DAMENG**
               + **TAURUS**
               + **DWS**
               + **KINGBASE**
               + **GAUSSDBOPENGAUSS**
               + **GREENPLUM**
               + **HIGHGO**
               + **SHENTONG**
               + **GBASE8A**
               + **GBASE8S**
               + **GBASEXDM**
               + **MONGODB**
               + **DDS**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] version: Specifies the self built database version.
               Changing this parameter will create a new resource.
        """
        if agent_urls is not None:
            pulumi.set(__self__, "agent_urls", agent_urls)
        if audit_status is not None:
            pulumi.set(__self__, "audit_status", audit_status)
        if charset is not None:
            pulumi.set(__self__, "charset", charset)
        if db_classification is not None:
            pulumi.set(__self__, "db_classification", db_classification)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if lts_audit_switch is not None:
            pulumi.set(__self__, "lts_audit_switch", lts_audit_switch)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="agentUrls")
    def agent_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The unique ID of the agent.
        """
        return pulumi.get(self, "agent_urls")

    @agent_urls.setter
    def agent_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "agent_urls", value)

    @_builtins.property
    @pulumi.getter(name="auditStatus")
    def audit_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The database running status.
        The value can be **ACTIVE**, **SHUTOFF** or **ERROR**.
        """
        return pulumi.get(self, "audit_status")

    @audit_status.setter
    def audit_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "audit_status", value)

    @_builtins.property
    @pulumi.getter
    def charset(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the self built database character set.
        The value can be **GBK** or **UTF8**. Defaults to **UTF8**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charset")

    @charset.setter
    def charset(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charset", value)

    @_builtins.property
    @pulumi.getter(name="dbClassification")
    def db_classification(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The classification of the database.
        """
        return pulumi.get(self, "db_classification")

    @db_classification.setter
    def db_classification(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "db_classification", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DBSS instance ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the self built database instance name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_name", value)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the self built database IP address.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter(name="ltsAuditSwitch")
    def lts_audit_switch(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies whether to disable LTS audit.
        The valid values are as follows:
        """
        return pulumi.get(self, "lts_audit_switch")

    @lts_audit_switch.setter
    def lts_audit_switch(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lts_audit_switch", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the self built database name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the self built database operation system.
        The valid values are as follows:
        + **LINUX64**
        + **WINDOWS64**
        + **UNIX**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the self built database port.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the audit status of the self built database.
        The valid values are as follows:
        + **ON**
        + **OFF**

        After a self built database is associated with the DBSS instance, the audit status is **OFF** by default.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the self built database type.
        The valid values are as follows:
        + **MYSQL**
        + **ORACLE**
        + **POSTGRESQL**
        + **SQLSERVER**
        + **DAMENG**
        + **TAURUS**
        + **DWS**
        + **KINGBASE**
        + **GAUSSDBOPENGAUSS**
        + **GREENPLUM**
        + **HIGHGO**
        + **SHENTONG**
        + **GBASE8A**
        + **GBASE8S**
        + **GBASEXDM**
        + **MONGODB**
        + **DDS**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the self built database version.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("huaweicloud:dbss/ecsDatabase:EcsDatabase")
class EcsDatabase(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charset: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 lts_audit_switch: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manage the resource of adding self built database to DBSS instance within HuaweiCloud.

        > Before adding the self built database to the DBSS instance, the DBSS instance `status` must be **ACTIVE**.

        ## Import

        The resource can be imported using the related `instance_id` and their `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dbss/ecsDatabase:EcsDatabase test <instance_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response.

        The missing attributes include: `lts_audit_switch`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to align

        with the instance. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_dbss_ecs_database" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              lts_audit_switch,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] charset: Specifies the self built database character set.
               The value can be **GBK** or **UTF8**. Defaults to **UTF8**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DBSS instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_name: Specifies the self built database instance name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ip: Specifies the self built database IP address.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] lts_audit_switch: Specifies whether to disable LTS audit.
               The valid values are as follows:
        :param pulumi.Input[_builtins.str] name: Specifies the self built database name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] os: Specifies the self built database operation system.
               The valid values are as follows:
               + **LINUX64**
               + **WINDOWS64**
               + **UNIX**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] port: Specifies the self built database port.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the audit status of the self built database.
               The valid values are as follows:
               + **ON**
               + **OFF**
               
               After a self built database is associated with the DBSS instance, the audit status is **OFF** by default.
        :param pulumi.Input[_builtins.str] type: Specifies the self built database type.
               The valid values are as follows:
               + **MYSQL**
               + **ORACLE**
               + **POSTGRESQL**
               + **SQLSERVER**
               + **DAMENG**
               + **TAURUS**
               + **DWS**
               + **KINGBASE**
               + **GAUSSDBOPENGAUSS**
               + **GREENPLUM**
               + **HIGHGO**
               + **SHENTONG**
               + **GBASE8A**
               + **GBASE8S**
               + **GBASEXDM**
               + **MONGODB**
               + **DDS**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] version: Specifies the self built database version.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EcsDatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage the resource of adding self built database to DBSS instance within HuaweiCloud.

        > Before adding the self built database to the DBSS instance, the DBSS instance `status` must be **ACTIVE**.

        ## Import

        The resource can be imported using the related `instance_id` and their `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:dbss/ecsDatabase:EcsDatabase test <instance_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response.

        The missing attributes include: `lts_audit_switch`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to align

        with the instance. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_dbss_ecs_database" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              lts_audit_switch,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param EcsDatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EcsDatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charset: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 lts_audit_switch: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EcsDatabaseArgs.__new__(EcsDatabaseArgs)

            __props__.__dict__["charset"] = charset
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["instance_name"] = instance_name
            if ip is None and not opts.urn:
                raise TypeError("Missing required property 'ip'")
            __props__.__dict__["ip"] = ip
            __props__.__dict__["lts_audit_switch"] = lts_audit_switch
            __props__.__dict__["name"] = name
            if os is None and not opts.urn:
                raise TypeError("Missing required property 'os'")
            __props__.__dict__["os"] = os
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            __props__.__dict__["region"] = region
            __props__.__dict__["status"] = status
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["agent_urls"] = None
            __props__.__dict__["audit_status"] = None
            __props__.__dict__["db_classification"] = None
        super(EcsDatabase, __self__).__init__(
            'huaweicloud:dbss/ecsDatabase:EcsDatabase',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agent_urls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            audit_status: Optional[pulumi.Input[_builtins.str]] = None,
            charset: Optional[pulumi.Input[_builtins.str]] = None,
            db_classification: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_name: Optional[pulumi.Input[_builtins.str]] = None,
            ip: Optional[pulumi.Input[_builtins.str]] = None,
            lts_audit_switch: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            os: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'EcsDatabase':
        """
        Get an existing EcsDatabase resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] agent_urls: The unique ID of the agent.
        :param pulumi.Input[_builtins.str] audit_status: The database running status.
               The value can be **ACTIVE**, **SHUTOFF** or **ERROR**.
        :param pulumi.Input[_builtins.str] charset: Specifies the self built database character set.
               The value can be **GBK** or **UTF8**. Defaults to **UTF8**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] db_classification: The classification of the database.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the DBSS instance ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_name: Specifies the self built database instance name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ip: Specifies the self built database IP address.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] lts_audit_switch: Specifies whether to disable LTS audit.
               The valid values are as follows:
        :param pulumi.Input[_builtins.str] name: Specifies the self built database name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] os: Specifies the self built database operation system.
               The valid values are as follows:
               + **LINUX64**
               + **WINDOWS64**
               + **UNIX**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] port: Specifies the self built database port.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the audit status of the self built database.
               The valid values are as follows:
               + **ON**
               + **OFF**
               
               After a self built database is associated with the DBSS instance, the audit status is **OFF** by default.
        :param pulumi.Input[_builtins.str] type: Specifies the self built database type.
               The valid values are as follows:
               + **MYSQL**
               + **ORACLE**
               + **POSTGRESQL**
               + **SQLSERVER**
               + **DAMENG**
               + **TAURUS**
               + **DWS**
               + **KINGBASE**
               + **GAUSSDBOPENGAUSS**
               + **GREENPLUM**
               + **HIGHGO**
               + **SHENTONG**
               + **GBASE8A**
               + **GBASE8S**
               + **GBASEXDM**
               + **MONGODB**
               + **DDS**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] version: Specifies the self built database version.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EcsDatabaseState.__new__(_EcsDatabaseState)

        __props__.__dict__["agent_urls"] = agent_urls
        __props__.__dict__["audit_status"] = audit_status
        __props__.__dict__["charset"] = charset
        __props__.__dict__["db_classification"] = db_classification
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["ip"] = ip
        __props__.__dict__["lts_audit_switch"] = lts_audit_switch
        __props__.__dict__["name"] = name
        __props__.__dict__["os"] = os
        __props__.__dict__["port"] = port
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["version"] = version
        return EcsDatabase(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="agentUrls")
    def agent_urls(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The unique ID of the agent.
        """
        return pulumi.get(self, "agent_urls")

    @_builtins.property
    @pulumi.getter(name="auditStatus")
    def audit_status(self) -> pulumi.Output[_builtins.str]:
        """
        The database running status.
        The value can be **ACTIVE**, **SHUTOFF** or **ERROR**.
        """
        return pulumi.get(self, "audit_status")

    @_builtins.property
    @pulumi.getter
    def charset(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the self built database character set.
        The value can be **GBK** or **UTF8**. Defaults to **UTF8**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charset")

    @_builtins.property
    @pulumi.getter(name="dbClassification")
    def db_classification(self) -> pulumi.Output[_builtins.str]:
        """
        The classification of the database.
        """
        return pulumi.get(self, "db_classification")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DBSS instance ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the self built database instance name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the self built database IP address.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="ltsAuditSwitch")
    def lts_audit_switch(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies whether to disable LTS audit.
        The valid values are as follows:
        """
        return pulumi.get(self, "lts_audit_switch")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the self built database name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def os(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the self built database operation system.
        The valid values are as follows:
        + **LINUX64**
        + **WINDOWS64**
        + **UNIX**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "os")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the self built database port.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the audit status of the self built database.
        The valid values are as follows:
        + **ON**
        + **OFF**

        After a self built database is associated with the DBSS instance, the audit status is **OFF** by default.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the self built database type.
        The valid values are as follows:
        + **MYSQL**
        + **ORACLE**
        + **POSTGRESQL**
        + **SQLSERVER**
        + **DAMENG**
        + **TAURUS**
        + **DWS**
        + **KINGBASE**
        + **GAUSSDBOPENGAUSS**
        + **GREENPLUM**
        + **HIGHGO**
        + **SHENTONG**
        + **GBASE8A**
        + **GBASE8S**
        + **GBASEXDM**
        + **MONGODB**
        + **DDS**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the self built database version.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version")

