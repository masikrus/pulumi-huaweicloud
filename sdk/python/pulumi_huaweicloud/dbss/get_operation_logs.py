# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOperationLogsResult',
    'AwaitableGetOperationLogsResult',
    'get_operation_logs',
    'get_operation_logs_output',
]

@pulumi.output_type
class GetOperationLogsResult:
    """
    A collection of values returned by getOperationLogs.
    """
    def __init__(__self__, end_time=None, id=None, instance_id=None, logs=None, operate_name=None, region=None, result=None, start_time=None, time_range=None, user_name=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if logs and not isinstance(logs, list):
            raise TypeError("Expected argument 'logs' to be a list")
        pulumi.set(__self__, "logs", logs)
        if operate_name and not isinstance(operate_name, str):
            raise TypeError("Expected argument 'operate_name' to be a str")
        pulumi.set(__self__, "operate_name", operate_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if result and not isinstance(result, str):
            raise TypeError("Expected argument 'result' to be a str")
        pulumi.set(__self__, "result", result)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if time_range and not isinstance(time_range, str):
            raise TypeError("Expected argument 'time_range' to be a str")
        pulumi.set(__self__, "time_range", time_range)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def logs(self) -> Sequence['outputs.GetOperationLogsLogResult']:
        """
        The list of the user operation logs.
        """
        return pulumi.get(self, "logs")

    @_builtins.property
    @pulumi.getter(name="operateName")
    def operate_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operate_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def result(self) -> Optional[_builtins.str]:
        """
        The execution result of user operation.
        """
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "time_range")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")


class AwaitableGetOperationLogsResult(GetOperationLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOperationLogsResult(
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            logs=self.logs,
            operate_name=self.operate_name,
            region=self.region,
            result=self.result,
            start_time=self.start_time,
            time_range=self.time_range,
            user_name=self.user_name)


def get_operation_logs(end_time: Optional[_builtins.str] = None,
                       instance_id: Optional[_builtins.str] = None,
                       operate_name: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       result: Optional[_builtins.str] = None,
                       start_time: Optional[_builtins.str] = None,
                       time_range: Optional[_builtins.str] = None,
                       user_name: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOperationLogsResult:
    """
    Use this data source to get a list of user operation logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.dbss.get_operation_logs(instance_id=instance_id)
    ```


    :param _builtins.str end_time: Specifies the end time of the user operation.
           The time format is UTC. e.g. **2024-09-01 09:15:20**.
    :param _builtins.str instance_id: Specifies the audit instance ID to which the user operation logs belong.
    :param _builtins.str operate_name: Specifies the name of the operation object.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str result: Specifies the execution result of user operation.
           The value can be **success** or **fail**.
    :param _builtins.str start_time: Specifies the start time of the user operation.
           The time format is UTC. e.g. **2024-09-01 09:00:10**.
    :param _builtins.str time_range: Specifies the time segment.
           The valid values are as follows:
           + **HALF_HOUR**
           + **HOUR**
           + **THREE_HOUR**
           + **TWELVE_HOUR**
           + **DAY**
           + **WEEK**
           + **MONTH**
           
           > 1.The parameter `start_time` and `end_time` must be used together.
           <br>2. If parameter `time_range`, `start_time` and `end_time` are set at the same time,
           only the parameter `time_range` will take effect.
    :param _builtins.str user_name: Specifies the name of the operation user.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['operateName'] = operate_name
    __args__['region'] = region
    __args__['result'] = result
    __args__['startTime'] = start_time
    __args__['timeRange'] = time_range
    __args__['userName'] = user_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:dbss/getOperationLogs:getOperationLogs', __args__, opts=opts, typ=GetOperationLogsResult).value

    return AwaitableGetOperationLogsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        logs=pulumi.get(__ret__, 'logs'),
        operate_name=pulumi.get(__ret__, 'operate_name'),
        region=pulumi.get(__ret__, 'region'),
        result=pulumi.get(__ret__, 'result'),
        start_time=pulumi.get(__ret__, 'start_time'),
        time_range=pulumi.get(__ret__, 'time_range'),
        user_name=pulumi.get(__ret__, 'user_name'))
def get_operation_logs_output(end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                              operate_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              result: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              time_range: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              user_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOperationLogsResult]:
    """
    Use this data source to get a list of user operation logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.dbss.get_operation_logs(instance_id=instance_id)
    ```


    :param _builtins.str end_time: Specifies the end time of the user operation.
           The time format is UTC. e.g. **2024-09-01 09:15:20**.
    :param _builtins.str instance_id: Specifies the audit instance ID to which the user operation logs belong.
    :param _builtins.str operate_name: Specifies the name of the operation object.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str result: Specifies the execution result of user operation.
           The value can be **success** or **fail**.
    :param _builtins.str start_time: Specifies the start time of the user operation.
           The time format is UTC. e.g. **2024-09-01 09:00:10**.
    :param _builtins.str time_range: Specifies the time segment.
           The valid values are as follows:
           + **HALF_HOUR**
           + **HOUR**
           + **THREE_HOUR**
           + **TWELVE_HOUR**
           + **DAY**
           + **WEEK**
           + **MONTH**
           
           > 1.The parameter `start_time` and `end_time` must be used together.
           <br>2. If parameter `time_range`, `start_time` and `end_time` are set at the same time,
           only the parameter `time_range` will take effect.
    :param _builtins.str user_name: Specifies the name of the operation user.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['operateName'] = operate_name
    __args__['region'] = region
    __args__['result'] = result
    __args__['startTime'] = start_time
    __args__['timeRange'] = time_range
    __args__['userName'] = user_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:dbss/getOperationLogs:getOperationLogs', __args__, opts=opts, typ=GetOperationLogsResult)
    return __ret__.apply(lambda __response__: GetOperationLogsResult(
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        logs=pulumi.get(__response__, 'logs'),
        operate_name=pulumi.get(__response__, 'operate_name'),
        region=pulumi.get(__response__, 'region'),
        result=pulumi.get(__response__, 'result'),
        start_time=pulumi.get(__response__, 'start_time'),
        time_range=pulumi.get(__response__, 'time_range'),
        user_name=pulumi.get(__response__, 'user_name')))
