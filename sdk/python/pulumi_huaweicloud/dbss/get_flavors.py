# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetFlavorsResult',
    'AwaitableGetFlavorsResult',
    'get_flavors',
    'get_flavors_output',
]

@pulumi.output_type
class GetFlavorsResult:
    """
    A collection of values returned by getFlavors.
    """
    def __init__(__self__, availability_zone=None, flavor_id=None, flavors=None, id=None, level=None, memory=None, proxy=None, region=None, vcpus=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if flavor_id and not isinstance(flavor_id, str):
            raise TypeError("Expected argument 'flavor_id' to be a str")
        pulumi.set(__self__, "flavor_id", flavor_id)
        if flavors and not isinstance(flavors, list):
            raise TypeError("Expected argument 'flavors' to be a list")
        pulumi.set(__self__, "flavors", flavors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if level and not isinstance(level, str):
            raise TypeError("Expected argument 'level' to be a str")
        pulumi.set(__self__, "level", level)
        if memory and not isinstance(memory, float):
            raise TypeError("Expected argument 'memory' to be a float")
        pulumi.set(__self__, "memory", memory)
        if proxy and not isinstance(proxy, int):
            raise TypeError("Expected argument 'proxy' to be a int")
        pulumi.set(__self__, "proxy", proxy)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if vcpus and not isinstance(vcpus, int):
            raise TypeError("Expected argument 'vcpus' to be a int")
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetFlavorsFlavorResult']:
        """
        Indicates the list of DBSS flavors.
        The flavors structure is documented below.
        """
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[_builtins.str]:
        """
        Indicates the level of the flavor.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[_builtins.float]:
        """
        Indicates the memory size(GB) in the flavor.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def proxy(self) -> Optional[_builtins.int]:
        """
        Indicates the maximum supported database instances.
        """
        return pulumi.get(self, "proxy")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Optional[_builtins.int]:
        """
        Indicates the number of CPUs.
        """
        return pulumi.get(self, "vcpus")


class AwaitableGetFlavorsResult(GetFlavorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFlavorsResult(
            availability_zone=self.availability_zone,
            flavor_id=self.flavor_id,
            flavors=self.flavors,
            id=self.id,
            level=self.level,
            memory=self.memory,
            proxy=self.proxy,
            region=self.region,
            vcpus=self.vcpus)


def get_flavors(availability_zone: Optional[_builtins.str] = None,
                flavor_id: Optional[_builtins.str] = None,
                level: Optional[_builtins.str] = None,
                memory: Optional[_builtins.float] = None,
                proxy: Optional[_builtins.int] = None,
                region: Optional[_builtins.str] = None,
                vcpus: Optional[_builtins.int] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFlavorsResult:
    """
    Use this data source to get the list of DBSS flavors.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.dbss.get_flavors(level="high")
    ```


    :param _builtins.str availability_zone: Specifies the availability zone which the flavor belongs to.
    :param _builtins.str flavor_id: Specifies the ID of the flavor.
    :param _builtins.str level: Specifies the level of the flavor. Value options:
           + **entry**: Starter edition.
           + **low**: Basic edition.
           + **medium**: Professional edition.
           + **high**: Premium edition.
    :param _builtins.float memory: Specifies the memory size(GB) in the flavor.
    :param _builtins.int proxy: Specifies the maximum supported database instances.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.int vcpus: Specifies the number of CPUs.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['flavorId'] = flavor_id
    __args__['level'] = level
    __args__['memory'] = memory
    __args__['proxy'] = proxy
    __args__['region'] = region
    __args__['vcpus'] = vcpus
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:dbss/getFlavors:getFlavors', __args__, opts=opts, typ=GetFlavorsResult).value

    return AwaitableGetFlavorsResult(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        flavor_id=pulumi.get(__ret__, 'flavor_id'),
        flavors=pulumi.get(__ret__, 'flavors'),
        id=pulumi.get(__ret__, 'id'),
        level=pulumi.get(__ret__, 'level'),
        memory=pulumi.get(__ret__, 'memory'),
        proxy=pulumi.get(__ret__, 'proxy'),
        region=pulumi.get(__ret__, 'region'),
        vcpus=pulumi.get(__ret__, 'vcpus'))
def get_flavors_output(availability_zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       flavor_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       level: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       memory: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                       proxy: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       vcpus: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFlavorsResult]:
    """
    Use this data source to get the list of DBSS flavors.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.dbss.get_flavors(level="high")
    ```


    :param _builtins.str availability_zone: Specifies the availability zone which the flavor belongs to.
    :param _builtins.str flavor_id: Specifies the ID of the flavor.
    :param _builtins.str level: Specifies the level of the flavor. Value options:
           + **entry**: Starter edition.
           + **low**: Basic edition.
           + **medium**: Professional edition.
           + **high**: Premium edition.
    :param _builtins.float memory: Specifies the memory size(GB) in the flavor.
    :param _builtins.int proxy: Specifies the maximum supported database instances.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.int vcpus: Specifies the number of CPUs.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['flavorId'] = flavor_id
    __args__['level'] = level
    __args__['memory'] = memory
    __args__['proxy'] = proxy
    __args__['region'] = region
    __args__['vcpus'] = vcpus
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:dbss/getFlavors:getFlavors', __args__, opts=opts, typ=GetFlavorsResult)
    return __ret__.apply(lambda __response__: GetFlavorsResult(
        availability_zone=pulumi.get(__response__, 'availability_zone'),
        flavor_id=pulumi.get(__response__, 'flavor_id'),
        flavors=pulumi.get(__response__, 'flavors'),
        id=pulumi.get(__response__, 'id'),
        level=pulumi.get(__response__, 'level'),
        memory=pulumi.get(__response__, 'memory'),
        proxy=pulumi.get(__response__, 'proxy'),
        region=pulumi.get(__response__, 'region'),
        vcpus=pulumi.get(__response__, 'vcpus')))
