# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[_builtins.str],
                 cluster_type: pulumi.Input[_builtins.str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 city: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_region: Optional[pulumi.Input[_builtins.str]] = None,
                 country: Optional[pulumi.Input[_builtins.str]] = None,
                 fleet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_provider: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[_builtins.str] category: Specifies the category of the cloud.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_type: Specifies the cluster type.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the annotations of the cluster to register.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] city: Specifies the city code.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster id.
               This can only be used when registering a cluster imported from CCE.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] cluster_labels: Specifies the labels of the cluster to register.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster to register.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_project_id: Specifies the cluster project ID.
               This can only be used when registering a cluster imported from CCE.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_region: Specifies the cluster region.
               This can only be used when registering a cluster imported from CCE.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] country: Specifies the country name.
        :param pulumi.Input[_builtins.str] fleet_id: Specifies ID of the fleet to add the cluster into.
               If left empty, that means registering a cluster **discrete** cluster.
        :param pulumi.Input[_builtins.str] service_provider: Specifies the cloud service provider.
               The value can be: **aws**, **azure**, **aliyun**, **googlecloud**,
               **tencentcloud**, **openshift**, **huaweicloud** and **privatek8s**.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "cluster_type", cluster_type)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_labels is not None:
            pulumi.set(__self__, "cluster_labels", cluster_labels)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_project_id is not None:
            pulumi.set(__self__, "cluster_project_id", cluster_project_id)
        if cluster_region is not None:
            pulumi.set(__self__, "cluster_region", cluster_region)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if fleet_id is not None:
            pulumi.set(__self__, "fleet_id", fleet_id)
        if service_provider is not None:
            pulumi.set(__self__, "service_provider", service_provider)

    @_builtins.property
    @pulumi.getter
    def category(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the category of the cloud.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cluster type.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_type", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the annotations of the cluster to register.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the city code.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "city", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster id.
        This can only be used when registering a cluster imported from CCE.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterLabels")
    def cluster_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the labels of the cluster to register.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_labels")

    @cluster_labels.setter
    def cluster_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cluster_labels", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the cluster to register.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterProjectId")
    def cluster_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster project ID.
        This can only be used when registering a cluster imported from CCE.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_project_id")

    @cluster_project_id.setter
    def cluster_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_project_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterRegion")
    def cluster_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster region.
        This can only be used when registering a cluster imported from CCE.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_region")

    @cluster_region.setter
    def cluster_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_region", value)

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the country name.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "country", value)

    @_builtins.property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies ID of the fleet to add the cluster into.
        If left empty, that means registering a cluster **discrete** cluster.
        """
        return pulumi.get(self, "fleet_id")

    @fleet_id.setter
    def fleet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fleet_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceProvider")
    def service_provider(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cloud service provider.
        The value can be: **aws**, **azure**, **aliyun**, **googlecloud**,
        **tencentcloud**, **openshift**, **huaweicloud** and **privatek8s**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service_provider")

    @service_provider.setter
    def service_provider(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_provider", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 city: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_region: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 country: Optional[pulumi.Input[_builtins.str]] = None,
                 fleet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 manage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 service_provider: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the annotations of the cluster to register.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] category: Specifies the category of the cloud.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] city: Specifies the city code.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster id.
               This can only be used when registering a cluster imported from CCE.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] cluster_labels: Specifies the labels of the cluster to register.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster to register.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_project_id: Specifies the cluster project ID.
               This can only be used when registering a cluster imported from CCE.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_region: Specifies the cluster region.
               This can only be used when registering a cluster imported from CCE.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_type: Specifies the cluster type.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] country: Specifies the country name.
        :param pulumi.Input[_builtins.str] fleet_id: Specifies ID of the fleet to add the cluster into.
               If left empty, that means registering a cluster **discrete** cluster.
        :param pulumi.Input[_builtins.str] manage_type: The cluster manage type. The value can be **grouped** and **discrete**.
        :param pulumi.Input[_builtins.str] service_provider: Specifies the cloud service provider.
               The value can be: **aws**, **azure**, **aliyun**, **googlecloud**,
               **tencentcloud**, **openshift**, **huaweicloud** and **privatek8s**.
               
               Changing this parameter will create a new resource.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_labels is not None:
            pulumi.set(__self__, "cluster_labels", cluster_labels)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_project_id is not None:
            pulumi.set(__self__, "cluster_project_id", cluster_project_id)
        if cluster_region is not None:
            pulumi.set(__self__, "cluster_region", cluster_region)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if fleet_id is not None:
            pulumi.set(__self__, "fleet_id", fleet_id)
        if manage_type is not None:
            pulumi.set(__self__, "manage_type", manage_type)
        if service_provider is not None:
            pulumi.set(__self__, "service_provider", service_provider)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the annotations of the cluster to register.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the category of the cloud.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the city code.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "city", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster id.
        This can only be used when registering a cluster imported from CCE.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterLabels")
    def cluster_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the labels of the cluster to register.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_labels")

    @cluster_labels.setter
    def cluster_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cluster_labels", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the cluster to register.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterProjectId")
    def cluster_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster project ID.
        This can only be used when registering a cluster imported from CCE.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_project_id")

    @cluster_project_id.setter
    def cluster_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_project_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterRegion")
    def cluster_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster region.
        This can only be used when registering a cluster imported from CCE.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_region")

    @cluster_region.setter
    def cluster_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_region", value)

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster type.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_type", value)

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the country name.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "country", value)

    @_builtins.property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies ID of the fleet to add the cluster into.
        If left empty, that means registering a cluster **discrete** cluster.
        """
        return pulumi.get(self, "fleet_id")

    @fleet_id.setter
    def fleet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fleet_id", value)

    @_builtins.property
    @pulumi.getter(name="manageType")
    def manage_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster manage type. The value can be **grouped** and **discrete**.
        """
        return pulumi.get(self, "manage_type")

    @manage_type.setter
    def manage_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "manage_type", value)

    @_builtins.property
    @pulumi.getter(name="serviceProvider")
    def service_provider(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cloud service provider.
        The value can be: **aws**, **azure**, **aliyun**, **googlecloud**,
        **tencentcloud**, **openshift**, **huaweicloud** and **privatek8s**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service_provider")

    @service_provider.setter
    def service_provider(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_provider", value)


@pulumi.type_token("huaweicloud:ucs/cluster:Cluster")
class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 city: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_region: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 country: Optional[pulumi.Input[_builtins.str]] = None,
                 fleet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a UCS cluster resource within HuaweiCloud.

        ## Example Usage

        ### Registering a K8S cluster

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_name = config.require_object("clusterName")
        kubeconfig = config.require_object("kubeconfig")
        test = huaweicloud.ucs.Cluster("test",
            category="attachedcluster",
            cluster_type="privatek8s",
            cluster_name=cluster_name,
            country="CN",
            city="110000",
            annotations={
                "kubeconfig": kubeconfig,
            })
        ```

        ### Registering a CCE cluster

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        fleet_id = config.require_object("fleetId")
        cluster_id = config.require_object("clusterId")
        cluster_region = config.require_object("clusterRegion")
        cluster_project_id = config.require_object("clusterProjectId")
        test = huaweicloud.ucs.Cluster("test",
            category="self",
            cluster_type="cce",
            fleet_id=fleet_id,
            cluster_id=cluster_id,
            cluster_region=cluster_region,
            cluster_project_id=cluster_project_id)
        ```

        ## Import

        The UCS cluster can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ucs/cluster:Cluster test b84c0d09-26cc-11ee-b6b2-0255ac100263
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `annotations`.

        It is generally recommended running `pulumi preview` after importing a cluster.

        You can then decide if changes should be applied to the cluster, or the resource definition

        should be updated to align with the cluster. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_ucs_cluster" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              annotations
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the annotations of the cluster to register.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] category: Specifies the category of the cloud.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] city: Specifies the city code.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster id.
               This can only be used when registering a cluster imported from CCE.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] cluster_labels: Specifies the labels of the cluster to register.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster to register.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_project_id: Specifies the cluster project ID.
               This can only be used when registering a cluster imported from CCE.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_region: Specifies the cluster region.
               This can only be used when registering a cluster imported from CCE.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_type: Specifies the cluster type.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] country: Specifies the country name.
        :param pulumi.Input[_builtins.str] fleet_id: Specifies ID of the fleet to add the cluster into.
               If left empty, that means registering a cluster **discrete** cluster.
        :param pulumi.Input[_builtins.str] service_provider: Specifies the cloud service provider.
               The value can be: **aws**, **azure**, **aliyun**, **googlecloud**,
               **tencentcloud**, **openshift**, **huaweicloud** and **privatek8s**.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a UCS cluster resource within HuaweiCloud.

        ## Example Usage

        ### Registering a K8S cluster

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_name = config.require_object("clusterName")
        kubeconfig = config.require_object("kubeconfig")
        test = huaweicloud.ucs.Cluster("test",
            category="attachedcluster",
            cluster_type="privatek8s",
            cluster_name=cluster_name,
            country="CN",
            city="110000",
            annotations={
                "kubeconfig": kubeconfig,
            })
        ```

        ### Registering a CCE cluster

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        fleet_id = config.require_object("fleetId")
        cluster_id = config.require_object("clusterId")
        cluster_region = config.require_object("clusterRegion")
        cluster_project_id = config.require_object("clusterProjectId")
        test = huaweicloud.ucs.Cluster("test",
            category="self",
            cluster_type="cce",
            fleet_id=fleet_id,
            cluster_id=cluster_id,
            cluster_region=cluster_region,
            cluster_project_id=cluster_project_id)
        ```

        ## Import

        The UCS cluster can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ucs/cluster:Cluster test b84c0d09-26cc-11ee-b6b2-0255ac100263
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `annotations`.

        It is generally recommended running `pulumi preview` after importing a cluster.

        You can then decide if changes should be applied to the cluster, or the resource definition

        should be updated to align with the cluster. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_ucs_cluster" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              annotations
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 city: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_region: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 country: Optional[pulumi.Input[_builtins.str]] = None,
                 fleet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["annotations"] = annotations
            if category is None and not opts.urn:
                raise TypeError("Missing required property 'category'")
            __props__.__dict__["category"] = category
            __props__.__dict__["city"] = city
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["cluster_labels"] = cluster_labels
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["cluster_project_id"] = cluster_project_id
            __props__.__dict__["cluster_region"] = cluster_region
            if cluster_type is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_type'")
            __props__.__dict__["cluster_type"] = cluster_type
            __props__.__dict__["country"] = country
            __props__.__dict__["fleet_id"] = fleet_id
            __props__.__dict__["service_provider"] = service_provider
            __props__.__dict__["manage_type"] = None
        super(Cluster, __self__).__init__(
            'huaweicloud:ucs/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            category: Optional[pulumi.Input[_builtins.str]] = None,
            city: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_region: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
            country: Optional[pulumi.Input[_builtins.str]] = None,
            fleet_id: Optional[pulumi.Input[_builtins.str]] = None,
            manage_type: Optional[pulumi.Input[_builtins.str]] = None,
            service_provider: Optional[pulumi.Input[_builtins.str]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the annotations of the cluster to register.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] category: Specifies the category of the cloud.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] city: Specifies the city code.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster id.
               This can only be used when registering a cluster imported from CCE.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] cluster_labels: Specifies the labels of the cluster to register.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the name of the cluster to register.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_project_id: Specifies the cluster project ID.
               This can only be used when registering a cluster imported from CCE.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_region: Specifies the cluster region.
               This can only be used when registering a cluster imported from CCE.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cluster_type: Specifies the cluster type.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] country: Specifies the country name.
        :param pulumi.Input[_builtins.str] fleet_id: Specifies ID of the fleet to add the cluster into.
               If left empty, that means registering a cluster **discrete** cluster.
        :param pulumi.Input[_builtins.str] manage_type: The cluster manage type. The value can be **grouped** and **discrete**.
        :param pulumi.Input[_builtins.str] service_provider: Specifies the cloud service provider.
               The value can be: **aws**, **azure**, **aliyun**, **googlecloud**,
               **tencentcloud**, **openshift**, **huaweicloud** and **privatek8s**.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["category"] = category
        __props__.__dict__["city"] = city
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_labels"] = cluster_labels
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["cluster_project_id"] = cluster_project_id
        __props__.__dict__["cluster_region"] = cluster_region
        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["country"] = country
        __props__.__dict__["fleet_id"] = fleet_id
        __props__.__dict__["manage_type"] = manage_type
        __props__.__dict__["service_provider"] = service_provider
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Specifies the annotations of the cluster to register.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter
    def category(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the category of the cloud.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def city(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the city code.
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster id.
        This can only be used when registering a cluster imported from CCE.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterLabels")
    def cluster_labels(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the labels of the cluster to register.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_labels")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the cluster to register.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterProjectId")
    def cluster_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster project ID.
        This can only be used when registering a cluster imported from CCE.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_project_id")

    @_builtins.property
    @pulumi.getter(name="clusterRegion")
    def cluster_region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster region.
        This can only be used when registering a cluster imported from CCE.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_region")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster type.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter
    def country(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the country name.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies ID of the fleet to add the cluster into.
        If left empty, that means registering a cluster **discrete** cluster.
        """
        return pulumi.get(self, "fleet_id")

    @_builtins.property
    @pulumi.getter(name="manageType")
    def manage_type(self) -> pulumi.Output[_builtins.str]:
        """
        The cluster manage type. The value can be **grouped** and **discrete**.
        """
        return pulumi.get(self, "manage_type")

    @_builtins.property
    @pulumi.getter(name="serviceProvider")
    def service_provider(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cloud service provider.
        The value can be: **aws**, **azure**, **aliyun**, **googlecloud**,
        **tencentcloud**, **openshift**, **huaweicloud** and **privatek8s**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service_provider")

