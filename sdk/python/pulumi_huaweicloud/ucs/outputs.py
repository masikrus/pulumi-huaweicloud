# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'FleetPermission',
    'PolicyDetail',
]

@pulumi.output_type
class FleetPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyIds":
            suggest = "policy_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 namespaces: Optional[Sequence[_builtins.str]] = None,
                 policy_ids: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] namespaces: Specifies the list of namespaces.
               The elements can be: **\\***, **default**, **kube-system** and **kube-public**.
        :param Sequence[_builtins.str] policy_ids: Specifies the list of policy IDs.
        """
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if policy_ids is not None:
            pulumi.set(__self__, "policy_ids", policy_ids)

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of namespaces.
        The elements can be: **\\***, **default**, **kube-system** and **kube-public**.
        """
        return pulumi.get(self, "namespaces")

    @_builtins.property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of policy IDs.
        """
        return pulumi.get(self, "policy_ids")


@pulumi.output_type
class PolicyDetail(dict):
    def __init__(__self__, *,
                 operations: Optional[Sequence[_builtins.str]] = None,
                 resources: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] operations: Specifies the list of operations.
        :param Sequence[_builtins.str] resources: Specifies the list of resources.
        """
        if operations is not None:
            pulumi.set(__self__, "operations", operations)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def operations(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of operations.
        """
        return pulumi.get(self, "operations")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of resources.
        """
        return pulumi.get(self, "resources")


