# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PolicyArgs', 'Policy']

@pulumi.input_type
class PolicyArgs:
    def __init__(__self__, *,
                 iam_user_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDetailArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Policy resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] iam_user_ids: Specifies the list of IAM user IDs to associate to the policy.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the UCS policy.
               The value can be: **readonly**, **develop**, **admin** and **custom**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the UCS policy.
               The description consists of 0 to 255 characters.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDetailArgs']]] details: Specifies the details of the UCS policy.
               This only works when the type is **custom**.
               The Details structure is documented below.
               
               <a name="Policy_Details"></a>
               The `details` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the UCS policy. The name consists of 1 to 63 characters,
               including lowercase letters, digits and hyphens (-), must start with a letter and end with a letter or digit.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "iam_user_ids", iam_user_ids)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="iamUserIds")
    def iam_user_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the list of IAM user IDs to associate to the policy.
        """
        return pulumi.get(self, "iam_user_ids")

    @iam_user_ids.setter
    def iam_user_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "iam_user_ids", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the UCS policy.
        The value can be: **readonly**, **develop**, **admin** and **custom**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the UCS policy.
        The description consists of 0 to 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDetailArgs']]]]:
        """
        Specifies the details of the UCS policy.
        This only works when the type is **custom**.
        The Details structure is documented below.

        <a name="Policy_Details"></a>
        The `details` block supports:
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDetailArgs']]]]):
        pulumi.set(self, "details", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the UCS policy. The name consists of 1 to 63 characters,
        including lowercase letters, digits and hyphens (-), must start with a letter and end with a letter or digit.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _PolicyState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDetailArgs']]]] = None,
                 iam_user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Policy resources.
        :param pulumi.Input[_builtins.str] created_at: The created time.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the UCS policy.
               The description consists of 0 to 255 characters.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDetailArgs']]] details: Specifies the details of the UCS policy.
               This only works when the type is **custom**.
               The Details structure is documented below.
               
               <a name="Policy_Details"></a>
               The `details` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] iam_user_ids: Specifies the list of IAM user IDs to associate to the policy.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the UCS policy. The name consists of 1 to 63 characters,
               including lowercase letters, digits and hyphens (-), must start with a letter and end with a letter or digit.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the UCS policy.
               The value can be: **readonly**, **develop**, **admin** and **custom**.
        :param pulumi.Input[_builtins.str] updated_at: The updated time.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if iam_user_ids is not None:
            pulumi.set(__self__, "iam_user_ids", iam_user_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The created time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the UCS policy.
        The description consists of 0 to 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDetailArgs']]]]:
        """
        Specifies the details of the UCS policy.
        This only works when the type is **custom**.
        The Details structure is documented below.

        <a name="Policy_Details"></a>
        The `details` block supports:
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDetailArgs']]]]):
        pulumi.set(self, "details", value)

    @_builtins.property
    @pulumi.getter(name="iamUserIds")
    def iam_user_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of IAM user IDs to associate to the policy.
        """
        return pulumi.get(self, "iam_user_ids")

    @iam_user_ids.setter
    def iam_user_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "iam_user_ids", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the UCS policy. The name consists of 1 to 63 characters,
        including lowercase letters, digits and hyphens (-), must start with a letter and end with a letter or digit.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the UCS policy.
        The value can be: **readonly**, **develop**, **admin** and **custom**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The updated time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:ucs/policy:Policy")
class Policy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PolicyDetailArgs', 'PolicyDetailArgsDict']]]]] = None,
                 iam_user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a UCS policy resource within HuaweiCloud.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        user_id1 = config.require_object("userId1")
        user_id2 = config.require_object("userId2")
        test = huaweicloud.ucs.Policy("test",
            name="policy-1",
            iam_user_ids=[
                user_id1,
                user_id2,
            ],
            type="admin",
            description="created by terraform")
        ```

        ### Custom Type Policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        user_id1 = config.require_object("userId1")
        user_id2 = config.require_object("userId2")
        test = huaweicloud.ucs.Policy("test",
            name="policy-1",
            iam_user_ids=[
                user_id1,
                user_id2,
            ],
            type="custom",
            description="created by terraform",
            details=[{
                "operations": ["*"],
                "resources": ["*"],
            }])
        ```

        ## Import

        The UCS policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ucs/policy:Policy test 8b12072c-0c25-11ee-b6b2-0255ac1000de
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the UCS policy.
               The description consists of 0 to 255 characters.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PolicyDetailArgs', 'PolicyDetailArgsDict']]]] details: Specifies the details of the UCS policy.
               This only works when the type is **custom**.
               The Details structure is documented below.
               
               <a name="Policy_Details"></a>
               The `details` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] iam_user_ids: Specifies the list of IAM user IDs to associate to the policy.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the UCS policy. The name consists of 1 to 63 characters,
               including lowercase letters, digits and hyphens (-), must start with a letter and end with a letter or digit.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the UCS policy.
               The value can be: **readonly**, **develop**, **admin** and **custom**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a UCS policy resource within HuaweiCloud.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        user_id1 = config.require_object("userId1")
        user_id2 = config.require_object("userId2")
        test = huaweicloud.ucs.Policy("test",
            name="policy-1",
            iam_user_ids=[
                user_id1,
                user_id2,
            ],
            type="admin",
            description="created by terraform")
        ```

        ### Custom Type Policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        user_id1 = config.require_object("userId1")
        user_id2 = config.require_object("userId2")
        test = huaweicloud.ucs.Policy("test",
            name="policy-1",
            iam_user_ids=[
                user_id1,
                user_id2,
            ],
            type="custom",
            description="created by terraform",
            details=[{
                "operations": ["*"],
                "resources": ["*"],
            }])
        ```

        ## Import

        The UCS policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ucs/policy:Policy test 8b12072c-0c25-11ee-b6b2-0255ac1000de
        ```

        :param str resource_name: The name of the resource.
        :param PolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PolicyDetailArgs', 'PolicyDetailArgsDict']]]]] = None,
                 iam_user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyArgs.__new__(PolicyArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["details"] = details
            if iam_user_ids is None and not opts.urn:
                raise TypeError("Missing required property 'iam_user_ids'")
            __props__.__dict__["iam_user_ids"] = iam_user_ids
            __props__.__dict__["name"] = name
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(Policy, __self__).__init__(
            'huaweicloud:ucs/policy:Policy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PolicyDetailArgs', 'PolicyDetailArgsDict']]]]] = None,
            iam_user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'Policy':
        """
        Get an existing Policy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The created time.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the UCS policy.
               The description consists of 0 to 255 characters.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PolicyDetailArgs', 'PolicyDetailArgsDict']]]] details: Specifies the details of the UCS policy.
               This only works when the type is **custom**.
               The Details structure is documented below.
               
               <a name="Policy_Details"></a>
               The `details` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] iam_user_ids: Specifies the list of IAM user IDs to associate to the policy.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the UCS policy. The name consists of 1 to 63 characters,
               including lowercase letters, digits and hyphens (-), must start with a letter and end with a letter or digit.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the UCS policy.
               The value can be: **readonly**, **develop**, **admin** and **custom**.
        :param pulumi.Input[_builtins.str] updated_at: The updated time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyState.__new__(_PolicyState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["details"] = details
        __props__.__dict__["iam_user_ids"] = iam_user_ids
        __props__.__dict__["name"] = name
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        return Policy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The created time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the UCS policy.
        The description consists of 0 to 255 characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def details(self) -> pulumi.Output[Sequence['outputs.PolicyDetail']]:
        """
        Specifies the details of the UCS policy.
        This only works when the type is **custom**.
        The Details structure is documented below.

        <a name="Policy_Details"></a>
        The `details` block supports:
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="iamUserIds")
    def iam_user_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of IAM user IDs to associate to the policy.
        """
        return pulumi.get(self, "iam_user_ids")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the UCS policy. The name consists of 1 to 63 characters,
        including lowercase letters, digits and hyphens (-), must start with a letter and end with a letter or digit.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the UCS policy.
        The value can be: **readonly**, **develop**, **admin** and **custom**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The updated time.
        """
        return pulumi.get(self, "updated_at")

