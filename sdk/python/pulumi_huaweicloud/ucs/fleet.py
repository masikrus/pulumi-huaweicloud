# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FleetArgs', 'Fleet']

@pulumi.input_type
class FleetArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input['FleetPermissionArgs']]]] = None):
        """
        The set of arguments for constructing a Fleet resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the UCS fleet.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the UCS fleet.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['FleetPermissionArgs']]] permissions: Specifies the permissions of the UCS fleet. The structure is documented below.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the UCS fleet.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the UCS fleet.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FleetPermissionArgs']]]]:
        """
        Specifies the permissions of the UCS fleet. The structure is documented below.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FleetPermissionArgs']]]]):
        pulumi.set(self, "permissions", value)


@pulumi.input_type
class _FleetState:
    def __init__(__self__, *,
                 cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input['FleetPermissionArgs']]]] = None):
        """
        Input properties used for looking up and filtering Fleet resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cluster_ids: Indicates the list of cluster IDs to add to the UCS fleet.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the UCS fleet.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the UCS fleet.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['FleetPermissionArgs']]] permissions: Specifies the permissions of the UCS fleet. The structure is documented below.
        """
        if cluster_ids is not None:
            pulumi.set(__self__, "cluster_ids", cluster_ids)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @_builtins.property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the list of cluster IDs to add to the UCS fleet.
        """
        return pulumi.get(self, "cluster_ids")

    @cluster_ids.setter
    def cluster_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cluster_ids", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the UCS fleet.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the UCS fleet.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FleetPermissionArgs']]]]:
        """
        Specifies the permissions of the UCS fleet. The structure is documented below.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FleetPermissionArgs']]]]):
        pulumi.set(self, "permissions", value)


@pulumi.type_token("huaweicloud:ucs/fleet:Fleet")
class Fleet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FleetPermissionArgs', 'FleetPermissionArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a UCS fleet resource within HuaweiCloud.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.ucs.Fleet("test",
            name="fleet_1",
            description="created by terraform")
        ```

        ### Fleet with Permissions

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id1 = config.require_object("policyId1")
        policy_id2 = config.require_object("policyId2")
        policy_id3 = config.require_object("policyId3")
        test = huaweicloud.ucs.Fleet("test",
            name="fleet_1",
            description="created by terraform",
            permissions=[
                {
                    "namespaces": ["*"],
                    "policy_ids": [policy_id1],
                },
                {
                    "namespaces": [
                        "default",
                        "kube-system",
                    ],
                    "policy_ids": [
                        policy_id2,
                        policy_id3,
                    ],
                },
            ])
        ```

        ## Import

        The UCS fleet can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ucs/fleet:Fleet test dbd042ec-2474-11ee-9d1c-0255ac1000ce
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the UCS fleet.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the UCS fleet.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FleetPermissionArgs', 'FleetPermissionArgsDict']]]] permissions: Specifies the permissions of the UCS fleet. The structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FleetArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a UCS fleet resource within HuaweiCloud.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.ucs.Fleet("test",
            name="fleet_1",
            description="created by terraform")
        ```

        ### Fleet with Permissions

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id1 = config.require_object("policyId1")
        policy_id2 = config.require_object("policyId2")
        policy_id3 = config.require_object("policyId3")
        test = huaweicloud.ucs.Fleet("test",
            name="fleet_1",
            description="created by terraform",
            permissions=[
                {
                    "namespaces": ["*"],
                    "policy_ids": [policy_id1],
                },
                {
                    "namespaces": [
                        "default",
                        "kube-system",
                    ],
                    "policy_ids": [
                        policy_id2,
                        policy_id3,
                    ],
                },
            ])
        ```

        ## Import

        The UCS fleet can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ucs/fleet:Fleet test dbd042ec-2474-11ee-9d1c-0255ac1000ce
        ```

        :param str resource_name: The name of the resource.
        :param FleetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FleetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FleetPermissionArgs', 'FleetPermissionArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FleetArgs.__new__(FleetArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["permissions"] = permissions
            __props__.__dict__["cluster_ids"] = None
        super(Fleet, __self__).__init__(
            'huaweicloud:ucs/fleet:Fleet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FleetPermissionArgs', 'FleetPermissionArgsDict']]]]] = None) -> 'Fleet':
        """
        Get an existing Fleet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cluster_ids: Indicates the list of cluster IDs to add to the UCS fleet.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the UCS fleet.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the UCS fleet.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FleetPermissionArgs', 'FleetPermissionArgsDict']]]] permissions: Specifies the permissions of the UCS fleet. The structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FleetState.__new__(_FleetState)

        __props__.__dict__["cluster_ids"] = cluster_ids
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["permissions"] = permissions
        return Fleet(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Indicates the list of cluster IDs to add to the UCS fleet.
        """
        return pulumi.get(self, "cluster_ids")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the UCS fleet.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the UCS fleet.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Optional[Sequence['outputs.FleetPermission']]]:
        """
        Specifies the permissions of the UCS fleet. The structure is documented below.
        """
        return pulumi.get(self, "permissions")

