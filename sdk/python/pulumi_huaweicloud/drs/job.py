# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['JobArgs', 'Job']

@pulumi.input_type
class JobArgs:
    def __init__(__self__, *,
                 destination_db: pulumi.Input['JobDestinationDbArgs'],
                 direction: pulumi.Input[_builtins.str],
                 engine_type: pulumi.Input[_builtins.str],
                 source_db: pulumi.Input['JobSourceDbArgs'],
                 type: pulumi.Input[_builtins.str],
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_notify: Optional[pulumi.Input['JobAlarmNotifyArgs']] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_db_readnoly: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_days: Optional[pulumi.Input[_builtins.int]] = None,
                 force_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_open_fast_clean: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_sync_re_edit: Optional[pulumi.Input[_builtins.bool]] = None,
                 limit_speeds: Optional[pulumi.Input[Sequence[pulumi.Input['JobLimitSpeedArgs']]]] = None,
                 master_az: Optional[pulumi.Input[_builtins.str]] = None,
                 migrate_definer: Optional[pulumi.Input[_builtins.bool]] = None,
                 migration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 multi_write: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 net_type: Optional[pulumi.Input[_builtins.str]] = None,
                 node_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pause_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_config: Optional[pulumi.Input['JobPolicyConfigArgs']] = None,
                 public_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input['JobPublicIpListArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 slave_az: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 tables: Optional[pulumi.Input[Sequence[pulumi.Input['JobTableArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Job resource.
        :param pulumi.Input['JobDestinationDbArgs'] destination_db: Specifies the destination database configuration.
               The db_info structure of the `destination_db` is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] direction: Specifies the direction of data flow.
               Changing this parameter will create a new resource. The options are as follows:
               + **up**: To the cloud. The destination database must be a database in the current cloud.
               + **down**: Out of the cloud. The source database must be a database in the current cloud.
               + **non-dbs**: self-built database.
        :param pulumi.Input[_builtins.str] engine_type: Specifies the engine type of database. Changing this parameter will
               create a new resource. The options are as follows: **mysql**, **mongodb**, **gaussdbv5**, **taurus**, **gaussdbv5ha**,
               **kafka**, **postgresql**.
        :param pulumi.Input['JobSourceDbArgs'] source_db: Specifies the source database configuration.
               The db_info structure of the `source_db` is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of a task with an EIP bound.
               Valid values are **master** and **slave**.
               + In a primary/standby task, **master** indicates the primary task, and **slave** indicates the standby task.
               + In other cases, the value is fixed to **master**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action of job. The options are as follows:
               + **stop**: Stop the job. Available when job status is **FULL_TRANSFER_STARTED**, **FULL_TRANSFER_COMPLETE** or
               **INCRE_TRANSFER_STARTED**.
               + **restart**: Continue the job. Available when job status is **PAUSING**.
               + **reset**: Retry the job. Available when job status is **FULL_TRANSFER_FAILED** or **INCRE_TRANSFER_FAILED**.
               + **start**: Start the job. Available when job status is **WAITING_FOR_START**.
               
               > It will only take effect when **updating** a job.
        :param pulumi.Input['JobAlarmNotifyArgs'] alarm_notify: Specifies the information body for setting task exception notification.
               Changing this parameter will create a new resource.
               The alarm_notify structure is documented below.
        :param pulumi.Input[_builtins.str] auto_renew: schema: Internal
        :param pulumi.Input[_builtins.str] charging_mode: schema: Internal
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] databases: Specifies the list of the databases which the job migrates or synchronizes. Means to
               transfer database level data. This parameter conflicts with `tables`.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the job, which contain a
               maximum of 256 characters, and certain special characters (including !<>&'"\\\\) are not allowed.
        :param pulumi.Input[_builtins.bool] destination_db_readnoly: Specifies the destination DB instance as read-only helps
               ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
               Read/Write. Changing this parameter will create a new resource.
               
               > This parameter is valid only when MySQL migration and DR and `direction` is set to **up**. The default value is **true**,
               you need to manually set this parameter to **false** in other application scenarios except MySQL migration and DR scenarios.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project id.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] expired_days: Specifies how many days after the task is abnormal, it will automatically
               end. The value ranges from 14 to 100. the default value is `14`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] force_destroy: Specifies whether to forcibly destroy the job even if it is running.
               The default value is **false**.
        :param pulumi.Input[_builtins.bool] is_open_fast_clean: Specifies whether to enable binlog clearing for RDS for MySQL or RDS
               for MariaDB. Defaults to **false**.
               Changing this parameter will create a new resource.
               
               <a name="block--db_info"></a>
               The `db_info` block supports:
        :param pulumi.Input[_builtins.bool] is_sync_re_edit: Specifies whether to start the sync re-edit job. It's valid when `action` is **restart**.
        :param pulumi.Input[Sequence[pulumi.Input['JobLimitSpeedArgs']]] limit_speeds: Specifies the migration speed by setting a time period.
               The default is no speed limit. The maximum length is 3. The limit_speed structure is documented
               below. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] master_az: Specifies the AZ where the primary task is located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] migrate_definer: Specifies whether to migrate the definers of all source database
               objects to the `user` of `destination_db`. The default value is **true**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] migration_type: Specifies migration type.
               Changing this parameter will create a new resource. The default value is **FULL_INCR_TRANS**. The options are as follows:
               + **FULL_TRANS**: Full migration. Suitable for scenarios where services can be interrupted. It migrates all database
               objects and data, in a non-system database, to a destination database at a time.
               + **INCR_TRANS**: Incremental migration. Suitable for migration from an on-premises self-built database to a
               destination cloud database, or from one cloud database to another in a different region.
               + **FULL_INCR_TRANS**:  Full+Incremental migration. This allows to migrate data with minimal downtime. After a full
               migration initializes the destination database, an incremental migration parses logs to ensure data consistency
               between the source and destination databases.
        :param pulumi.Input[_builtins.bool] multi_write: Specifies whether to enable multi write. It is mandatory when `type`
               is **cloudDataGuard**. When the disaster recovery type is dual-active disaster recovery, set `multi_write` to **true**,
               otherwise to **false**. The default value is **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of database.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] net_type: Specifies the network type.
               Changing this parameter will create a new resource. The default value is **eip**. The options are as follows:
               + **eip**: suitable for migration from an on-premises or other cloud database to a destination cloud database.
               An EIP will be automatically bound to the replication instance and released after the replication task is complete.
               + **vpc**: suitable for migration from one cloud database to another.
               + **vpn**: suitable for migration from an on-premises self-built database to a destination cloud database,
               or from one cloud database to another in a different region.
        :param pulumi.Input[_builtins.str] node_type: Specifies the node flavor type. Valid values are **micro**, **small**,
               **medium**, **high**, **xlarge**, **2xlarge**. Default to **high**.
        :param pulumi.Input[_builtins.str] pause_mode: Specifies the stop type of job. It's valid when `action` is **stop**.
               Default value is **target**. The options are as follows:
               + **target**: Stop playback.
               + **all**: Stop log capture and playback.
        :param pulumi.Input[_builtins.int] period: schema: Internal
        :param pulumi.Input[_builtins.str] period_unit: schema: Internal
        :param pulumi.Input['JobPolicyConfigArgs'] policy_config: Specifies the policy information used to configure migration and
               synchronization policies. The policy_config structure is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['JobPublicIpListArgs']]] public_ip_lists: Specifies the public IP list.
               It can be specified when `net_type` is **eip**, and if it's not specified, DRS job will automatically bind a public IP.
               Changing this parameter will create a new resource.
               The public_ip_list structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region which the database belongs when it is a RDS database.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] slave_az: Specifies the AZ where the standby task is located.
               Changing this parameter will create a new resource.
               
               > It takes effect when both `master_az` and `slave_az` are specified. Only MySQL and gaussdbv5ha-to-kafka scenarios
               are supported.
        :param pulumi.Input[_builtins.str] start_time: Specifies the time to start speed limit, this time is UTC time. The start
               time is the whole hour, if there is a minute, it will be ignored, the format is **hh:mm**, and the hour number
               is two digits, for example: 01:00. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['JobTableArgs']]] tables: Specifies the list of the tables which the job migrates or synchronizes. Means to transfer
               table level data. This parameter conflicts with `databases`.
               The tables structure is documented below.
               
               >   1. `databases` and `tables` will only take effect when `type` is **migration** or **sync**.
               <br/>2. When `type` is **migration**, they are not allowed to **update**, if they are empty, means to migrate all objects.
               <br/>3. When `type` is **sync**, exactly one data level of `databases` and `tables` must be specified. It's **not allowed**
               to transfer the data level to another. Only when `status` is **INCRE_TRANSFER_STARTED** or **INCRE_TRANSFER_FAILED**,
               **update** will take effect.
               <br/>4. It's only for synchronization from **MySQL** to **MySQL**, migration from **Redis** to **GeminiDB Redis**,
               migration from cluster **Redis** to **GeminiDB Redis**, and synchronization from **Oracle** to **GaussDB Distributed**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the DRS job.
        """
        pulumi.set(__self__, "destination_db", destination_db)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "engine_type", engine_type)
        pulumi.set(__self__, "source_db", source_db)
        pulumi.set(__self__, "type", type)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if alarm_notify is not None:
            pulumi.set(__self__, "alarm_notify", alarm_notify)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_db_readnoly is not None:
            pulumi.set(__self__, "destination_db_readnoly", destination_db_readnoly)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if expired_days is not None:
            pulumi.set(__self__, "expired_days", expired_days)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if is_open_fast_clean is not None:
            pulumi.set(__self__, "is_open_fast_clean", is_open_fast_clean)
        if is_sync_re_edit is not None:
            pulumi.set(__self__, "is_sync_re_edit", is_sync_re_edit)
        if limit_speeds is not None:
            pulumi.set(__self__, "limit_speeds", limit_speeds)
        if master_az is not None:
            pulumi.set(__self__, "master_az", master_az)
        if migrate_definer is not None:
            pulumi.set(__self__, "migrate_definer", migrate_definer)
        if migration_type is not None:
            pulumi.set(__self__, "migration_type", migration_type)
        if multi_write is not None:
            pulumi.set(__self__, "multi_write", multi_write)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if net_type is not None:
            pulumi.set(__self__, "net_type", net_type)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if pause_mode is not None:
            pulumi.set(__self__, "pause_mode", pause_mode)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if policy_config is not None:
            pulumi.set(__self__, "policy_config", policy_config)
        if public_ip_lists is not None:
            pulumi.set(__self__, "public_ip_lists", public_ip_lists)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if slave_az is not None:
            pulumi.set(__self__, "slave_az", slave_az)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="destinationDb")
    def destination_db(self) -> pulumi.Input['JobDestinationDbArgs']:
        """
        Specifies the destination database configuration.
        The db_info structure of the `destination_db` is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "destination_db")

    @destination_db.setter
    def destination_db(self, value: pulumi.Input['JobDestinationDbArgs']):
        pulumi.set(self, "destination_db", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the direction of data flow.
        Changing this parameter will create a new resource. The options are as follows:
        + **up**: To the cloud. The destination database must be a database in the current cloud.
        + **down**: Out of the cloud. The source database must be a database in the current cloud.
        + **non-dbs**: self-built database.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the engine type of database. Changing this parameter will
        create a new resource. The options are as follows: **mysql**, **mongodb**, **gaussdbv5**, **taurus**, **gaussdbv5ha**,
        **kafka**, **postgresql**.
        """
        return pulumi.get(self, "engine_type")

    @engine_type.setter
    def engine_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "engine_type", value)

    @_builtins.property
    @pulumi.getter(name="sourceDb")
    def source_db(self) -> pulumi.Input['JobSourceDbArgs']:
        """
        Specifies the source database configuration.
        The db_info structure of the `source_db` is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_db")

    @source_db.setter
    def source_db(self, value: pulumi.Input['JobSourceDbArgs']):
        pulumi.set(self, "source_db", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of a task with an EIP bound.
        Valid values are **master** and **slave**.
        + In a primary/standby task, **master** indicates the primary task, and **slave** indicates the standby task.
        + In other cases, the value is fixed to **master**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the action of job. The options are as follows:
        + **stop**: Stop the job. Available when job status is **FULL_TRANSFER_STARTED**, **FULL_TRANSFER_COMPLETE** or
        **INCRE_TRANSFER_STARTED**.
        + **restart**: Continue the job. Available when job status is **PAUSING**.
        + **reset**: Retry the job. Available when job status is **FULL_TRANSFER_FAILED** or **INCRE_TRANSFER_FAILED**.
        + **start**: Start the job. Available when job status is **WAITING_FOR_START**.

        > It will only take effect when **updating** a job.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="alarmNotify")
    def alarm_notify(self) -> Optional[pulumi.Input['JobAlarmNotifyArgs']]:
        """
        Specifies the information body for setting task exception notification.
        Changing this parameter will create a new resource.
        The alarm_notify structure is documented below.
        """
        return pulumi.get(self, "alarm_notify")

    @alarm_notify.setter
    def alarm_notify(self, value: Optional[pulumi.Input['JobAlarmNotifyArgs']]):
        pulumi.set(self, "alarm_notify", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of the databases which the job migrates or synchronizes. Means to
        transfer database level data. This parameter conflicts with `tables`.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "databases", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the job, which contain a
        maximum of 256 characters, and certain special characters (including !<>&'"\\\\) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="destinationDbReadnoly")
    def destination_db_readnoly(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the destination DB instance as read-only helps
        ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
        Read/Write. Changing this parameter will create a new resource.

        > This parameter is valid only when MySQL migration and DR and `direction` is set to **up**. The default value is **true**,
        you need to manually set this parameter to **false** in other application scenarios except MySQL migration and DR scenarios.
        """
        return pulumi.get(self, "destination_db_readnoly")

    @destination_db_readnoly.setter
    def destination_db_readnoly(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "destination_db_readnoly", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project id.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="expiredDays")
    def expired_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies how many days after the task is abnormal, it will automatically
        end. The value ranges from 14 to 100. the default value is `14`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "expired_days")

    @expired_days.setter
    def expired_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "expired_days", value)

    @_builtins.property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to forcibly destroy the job even if it is running.
        The default value is **false**.
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_destroy", value)

    @_builtins.property
    @pulumi.getter(name="isOpenFastClean")
    def is_open_fast_clean(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable binlog clearing for RDS for MySQL or RDS
        for MariaDB. Defaults to **false**.
        Changing this parameter will create a new resource.

        <a name="block--db_info"></a>
        The `db_info` block supports:
        """
        return pulumi.get(self, "is_open_fast_clean")

    @is_open_fast_clean.setter
    def is_open_fast_clean(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_open_fast_clean", value)

    @_builtins.property
    @pulumi.getter(name="isSyncReEdit")
    def is_sync_re_edit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to start the sync re-edit job. It's valid when `action` is **restart**.
        """
        return pulumi.get(self, "is_sync_re_edit")

    @is_sync_re_edit.setter
    def is_sync_re_edit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_sync_re_edit", value)

    @_builtins.property
    @pulumi.getter(name="limitSpeeds")
    def limit_speeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobLimitSpeedArgs']]]]:
        """
        Specifies the migration speed by setting a time period.
        The default is no speed limit. The maximum length is 3. The limit_speed structure is documented
        below. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "limit_speeds")

    @limit_speeds.setter
    def limit_speeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobLimitSpeedArgs']]]]):
        pulumi.set(self, "limit_speeds", value)

    @_builtins.property
    @pulumi.getter(name="masterAz")
    def master_az(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AZ where the primary task is located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "master_az")

    @master_az.setter
    def master_az(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_az", value)

    @_builtins.property
    @pulumi.getter(name="migrateDefiner")
    def migrate_definer(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to migrate the definers of all source database
        objects to the `user` of `destination_db`. The default value is **true**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "migrate_definer")

    @migrate_definer.setter
    def migrate_definer(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "migrate_definer", value)

    @_builtins.property
    @pulumi.getter(name="migrationType")
    def migration_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies migration type.
        Changing this parameter will create a new resource. The default value is **FULL_INCR_TRANS**. The options are as follows:
        + **FULL_TRANS**: Full migration. Suitable for scenarios where services can be interrupted. It migrates all database
        objects and data, in a non-system database, to a destination database at a time.
        + **INCR_TRANS**: Incremental migration. Suitable for migration from an on-premises self-built database to a
        destination cloud database, or from one cloud database to another in a different region.
        + **FULL_INCR_TRANS**:  Full+Incremental migration. This allows to migrate data with minimal downtime. After a full
        migration initializes the destination database, an incremental migration parses logs to ensure data consistency
        between the source and destination databases.
        """
        return pulumi.get(self, "migration_type")

    @migration_type.setter
    def migration_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "migration_type", value)

    @_builtins.property
    @pulumi.getter(name="multiWrite")
    def multi_write(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable multi write. It is mandatory when `type`
        is **cloudDataGuard**. When the disaster recovery type is dual-active disaster recovery, set `multi_write` to **true**,
        otherwise to **false**. The default value is **false**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "multi_write")

    @multi_write.setter
    def multi_write(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "multi_write", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of database.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="netType")
    def net_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network type.
        Changing this parameter will create a new resource. The default value is **eip**. The options are as follows:
        + **eip**: suitable for migration from an on-premises or other cloud database to a destination cloud database.
        An EIP will be automatically bound to the replication instance and released after the replication task is complete.
        + **vpc**: suitable for migration from one cloud database to another.
        + **vpn**: suitable for migration from an on-premises self-built database to a destination cloud database,
        or from one cloud database to another in a different region.
        """
        return pulumi.get(self, "net_type")

    @net_type.setter
    def net_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "net_type", value)

    @_builtins.property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the node flavor type. Valid values are **micro**, **small**,
        **medium**, **high**, **xlarge**, **2xlarge**. Default to **high**.
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node_type", value)

    @_builtins.property
    @pulumi.getter(name="pauseMode")
    def pause_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the stop type of job. It's valid when `action` is **stop**.
        Default value is **target**. The options are as follows:
        + **target**: Stop playback.
        + **all**: Stop log capture and playback.
        """
        return pulumi.get(self, "pause_mode")

    @pause_mode.setter
    def pause_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pause_mode", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter(name="policyConfig")
    def policy_config(self) -> Optional[pulumi.Input['JobPolicyConfigArgs']]:
        """
        Specifies the policy information used to configure migration and
        synchronization policies. The policy_config structure is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_config")

    @policy_config.setter
    def policy_config(self, value: Optional[pulumi.Input['JobPolicyConfigArgs']]):
        pulumi.set(self, "policy_config", value)

    @_builtins.property
    @pulumi.getter(name="publicIpLists")
    def public_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobPublicIpListArgs']]]]:
        """
        Specifies the public IP list.
        It can be specified when `net_type` is **eip**, and if it's not specified, DRS job will automatically bind a public IP.
        Changing this parameter will create a new resource.
        The public_ip_list structure is documented below.
        """
        return pulumi.get(self, "public_ip_lists")

    @public_ip_lists.setter
    def public_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobPublicIpListArgs']]]]):
        pulumi.set(self, "public_ip_lists", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region which the database belongs when it is a RDS database.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="slaveAz")
    def slave_az(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AZ where the standby task is located.
        Changing this parameter will create a new resource.

        > It takes effect when both `master_az` and `slave_az` are specified. Only MySQL and gaussdbv5ha-to-kafka scenarios
        are supported.
        """
        return pulumi.get(self, "slave_az")

    @slave_az.setter
    def slave_az(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slave_az", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time to start speed limit, this time is UTC time. The start
        time is the whole hour, if there is a minute, it will be ignored, the format is **hh:mm**, and the hour number
        is two digits, for example: 01:00. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTableArgs']]]]:
        """
        Specifies the list of the tables which the job migrates or synchronizes. Means to transfer
        table level data. This parameter conflicts with `databases`.
        The tables structure is documented below.

        >   1. `databases` and `tables` will only take effect when `type` is **migration** or **sync**.
        <br/>2. When `type` is **migration**, they are not allowed to **update**, if they are empty, means to migrate all objects.
        <br/>3. When `type` is **sync**, exactly one data level of `databases` and `tables` must be specified. It's **not allowed**
        to transfer the data level to another. Only when `status` is **INCRE_TRANSFER_STARTED** or **INCRE_TRANSFER_FAILED**,
        **update** will take effect.
        <br/>4. It's only for synchronization from **MySQL** to **MySQL**, migration from **Redis** to **GeminiDB Redis**,
        migration from cluster **Redis** to **GeminiDB Redis**, and synchronization from **Oracle** to **GaussDB Distributed**.
        """
        return pulumi.get(self, "tables")

    @tables.setter
    def tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTableArgs']]]]):
        pulumi.set(self, "tables", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the DRS job.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _JobState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_notify: Optional[pulumi.Input['JobAlarmNotifyArgs']] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_db: Optional[pulumi.Input['JobDestinationDbArgs']] = None,
                 destination_db_readnoly: Optional[pulumi.Input[_builtins.bool]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_days: Optional[pulumi.Input[_builtins.int]] = None,
                 force_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_open_fast_clean: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_sync_re_edit: Optional[pulumi.Input[_builtins.bool]] = None,
                 limit_speeds: Optional[pulumi.Input[Sequence[pulumi.Input['JobLimitSpeedArgs']]]] = None,
                 master_az: Optional[pulumi.Input[_builtins.str]] = None,
                 master_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 migrate_definer: Optional[pulumi.Input[_builtins.bool]] = None,
                 migration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 multi_write: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 net_type: Optional[pulumi.Input[_builtins.str]] = None,
                 node_type: Optional[pulumi.Input[_builtins.str]] = None,
                 order_id: Optional[pulumi.Input[_builtins.str]] = None,
                 original_job_direction: Optional[pulumi.Input[_builtins.str]] = None,
                 pause_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_config: Optional[pulumi.Input['JobPolicyConfigArgs']] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 progress: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input['JobPublicIpListArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 slave_az: Optional[pulumi.Input[_builtins.str]] = None,
                 slave_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_db: Optional[pulumi.Input['JobSourceDbArgs']] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tables: Optional[pulumi.Input[Sequence[pulumi.Input['JobTableArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Job resources.
        :param pulumi.Input[_builtins.str] action: Specifies the action of job. The options are as follows:
               + **stop**: Stop the job. Available when job status is **FULL_TRANSFER_STARTED**, **FULL_TRANSFER_COMPLETE** or
               **INCRE_TRANSFER_STARTED**.
               + **restart**: Continue the job. Available when job status is **PAUSING**.
               + **reset**: Retry the job. Available when job status is **FULL_TRANSFER_FAILED** or **INCRE_TRANSFER_FAILED**.
               + **start**: Start the job. Available when job status is **WAITING_FOR_START**.
               
               > It will only take effect when **updating** a job.
        :param pulumi.Input['JobAlarmNotifyArgs'] alarm_notify: Specifies the information body for setting task exception notification.
               Changing this parameter will create a new resource.
               The alarm_notify structure is documented below.
        :param pulumi.Input[_builtins.str] auto_renew: schema: Internal
        :param pulumi.Input[_builtins.str] charging_mode: schema: Internal
        :param pulumi.Input[_builtins.str] created_at: Create time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] databases: Specifies the list of the databases which the job migrates or synchronizes. Means to
               transfer database level data. This parameter conflicts with `tables`.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the job, which contain a
               maximum of 256 characters, and certain special characters (including !<>&'"\\\\) are not allowed.
        :param pulumi.Input['JobDestinationDbArgs'] destination_db: Specifies the destination database configuration.
               The db_info structure of the `destination_db` is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] destination_db_readnoly: Specifies the destination DB instance as read-only helps
               ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
               Read/Write. Changing this parameter will create a new resource.
               
               > This parameter is valid only when MySQL migration and DR and `direction` is set to **up**. The default value is **true**,
               you need to manually set this parameter to **false** in other application scenarios except MySQL migration and DR scenarios.
        :param pulumi.Input[_builtins.str] direction: Specifies the direction of data flow.
               Changing this parameter will create a new resource. The options are as follows:
               + **up**: To the cloud. The destination database must be a database in the current cloud.
               + **down**: Out of the cloud. The source database must be a database in the current cloud.
               + **non-dbs**: self-built database.
        :param pulumi.Input[_builtins.str] engine_type: Specifies the engine type of database. Changing this parameter will
               create a new resource. The options are as follows: **mysql**, **mongodb**, **gaussdbv5**, **taurus**, **gaussdbv5ha**,
               **kafka**, **postgresql**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project id.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] expired_days: Specifies how many days after the task is abnormal, it will automatically
               end. The value ranges from 14 to 100. the default value is `14`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] force_destroy: Specifies whether to forcibly destroy the job even if it is running.
               The default value is **false**.
        :param pulumi.Input[_builtins.bool] is_open_fast_clean: Specifies whether to enable binlog clearing for RDS for MySQL or RDS
               for MariaDB. Defaults to **false**.
               Changing this parameter will create a new resource.
               
               <a name="block--db_info"></a>
               The `db_info` block supports:
        :param pulumi.Input[_builtins.bool] is_sync_re_edit: Specifies whether to start the sync re-edit job. It's valid when `action` is **restart**.
        :param pulumi.Input[Sequence[pulumi.Input['JobLimitSpeedArgs']]] limit_speeds: Specifies the migration speed by setting a time period.
               The default is no speed limit. The maximum length is 3. The limit_speed structure is documented
               below. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] master_az: Specifies the AZ where the primary task is located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] master_job_id: The master job ID which will return if job is dual-AZ.
        :param pulumi.Input[_builtins.bool] migrate_definer: Specifies whether to migrate the definers of all source database
               objects to the `user` of `destination_db`. The default value is **true**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] migration_type: Specifies migration type.
               Changing this parameter will create a new resource. The default value is **FULL_INCR_TRANS**. The options are as follows:
               + **FULL_TRANS**: Full migration. Suitable for scenarios where services can be interrupted. It migrates all database
               objects and data, in a non-system database, to a destination database at a time.
               + **INCR_TRANS**: Incremental migration. Suitable for migration from an on-premises self-built database to a
               destination cloud database, or from one cloud database to another in a different region.
               + **FULL_INCR_TRANS**:  Full+Incremental migration. This allows to migrate data with minimal downtime. After a full
               migration initializes the destination database, an incremental migration parses logs to ensure data consistency
               between the source and destination databases.
        :param pulumi.Input[_builtins.bool] multi_write: Specifies whether to enable multi write. It is mandatory when `type`
               is **cloudDataGuard**. When the disaster recovery type is dual-active disaster recovery, set `multi_write` to **true**,
               otherwise to **false**. The default value is **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of database.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] net_type: Specifies the network type.
               Changing this parameter will create a new resource. The default value is **eip**. The options are as follows:
               + **eip**: suitable for migration from an on-premises or other cloud database to a destination cloud database.
               An EIP will be automatically bound to the replication instance and released after the replication task is complete.
               + **vpc**: suitable for migration from one cloud database to another.
               + **vpn**: suitable for migration from an on-premises self-built database to a destination cloud database,
               or from one cloud database to another in a different region.
        :param pulumi.Input[_builtins.str] node_type: Specifies the node flavor type. Valid values are **micro**, **small**,
               **medium**, **high**, **xlarge**, **2xlarge**. Default to **high**.
        :param pulumi.Input[_builtins.str] order_id: The order ID which will return if `charging_mode` is **prePaid**.
        :param pulumi.Input[_builtins.str] original_job_direction: The original job direction.
        :param pulumi.Input[_builtins.str] pause_mode: Specifies the stop type of job. It's valid when `action` is **stop**.
               Default value is **target**. The options are as follows:
               + **target**: Stop playback.
               + **all**: Stop log capture and playback.
        :param pulumi.Input[_builtins.int] period: schema: Internal
        :param pulumi.Input[_builtins.str] period_unit: schema: Internal
        :param pulumi.Input['JobPolicyConfigArgs'] policy_config: Specifies the policy information used to configure migration and
               synchronization policies. The policy_config structure is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] private_ip: Private IP.
        :param pulumi.Input[_builtins.str] progress: Progress.
        :param pulumi.Input[_builtins.str] public_ip: Specifies public IP.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['JobPublicIpListArgs']]] public_ip_lists: Specifies the public IP list.
               It can be specified when `net_type` is **eip**, and if it's not specified, DRS job will automatically bind a public IP.
               Changing this parameter will create a new resource.
               The public_ip_list structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region which the database belongs when it is a RDS database.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] security_group_id: The security group ID to which the databese instance belongs.
        :param pulumi.Input[_builtins.str] slave_az: Specifies the AZ where the standby task is located.
               Changing this parameter will create a new resource.
               
               > It takes effect when both `master_az` and `slave_az` are specified. Only MySQL and gaussdbv5ha-to-kafka scenarios
               are supported.
        :param pulumi.Input[_builtins.str] slave_job_id: The slave job ID which will return if job is dual-AZ.
        :param pulumi.Input['JobSourceDbArgs'] source_db: Specifies the source database configuration.
               The db_info structure of the `source_db` is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the time to start speed limit, this time is UTC time. The start
               time is the whole hour, if there is a minute, it will be ignored, the format is **hh:mm**, and the hour number
               is two digits, for example: 01:00. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Status.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies subnet ID of database when it is a RDS database.
               It is mandatory when `direction` is **down**. Changing this parameter will create a new resource.
               
               > When `net_type` is **vpc**, if `direction` is **up**, `source_db.vpc_id` and `source_db.subnet_id` is mandatory, if
               `direction` is **down**, `destination_db.vpc_id` and `destination_db.subnet_id` is mandatory.
        :param pulumi.Input[Sequence[pulumi.Input['JobTableArgs']]] tables: Specifies the list of the tables which the job migrates or synchronizes. Means to transfer
               table level data. This parameter conflicts with `databases`.
               The tables structure is documented below.
               
               >   1. `databases` and `tables` will only take effect when `type` is **migration** or **sync**.
               <br/>2. When `type` is **migration**, they are not allowed to **update**, if they are empty, means to migrate all objects.
               <br/>3. When `type` is **sync**, exactly one data level of `databases` and `tables` must be specified. It's **not allowed**
               to transfer the data level to another. Only when `status` is **INCRE_TRANSFER_STARTED** or **INCRE_TRANSFER_FAILED**,
               **update** will take effect.
               <br/>4. It's only for synchronization from **MySQL** to **MySQL**, migration from **Redis** to **GeminiDB Redis**,
               migration from cluster **Redis** to **GeminiDB Redis**, and synchronization from **Oracle** to **GaussDB Distributed**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the DRS job.
        :param pulumi.Input[_builtins.str] type: Specifies the type of a task with an EIP bound.
               Valid values are **master** and **slave**.
               + In a primary/standby task, **master** indicates the primary task, and **slave** indicates the standby task.
               + In other cases, the value is fixed to **master**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Update time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies vpc ID of database.
               Changing this parameter will create a new resource.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if alarm_notify is not None:
            pulumi.set(__self__, "alarm_notify", alarm_notify)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_db is not None:
            pulumi.set(__self__, "destination_db", destination_db)
        if destination_db_readnoly is not None:
            pulumi.set(__self__, "destination_db_readnoly", destination_db_readnoly)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if engine_type is not None:
            pulumi.set(__self__, "engine_type", engine_type)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if expired_days is not None:
            pulumi.set(__self__, "expired_days", expired_days)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if is_open_fast_clean is not None:
            pulumi.set(__self__, "is_open_fast_clean", is_open_fast_clean)
        if is_sync_re_edit is not None:
            pulumi.set(__self__, "is_sync_re_edit", is_sync_re_edit)
        if limit_speeds is not None:
            pulumi.set(__self__, "limit_speeds", limit_speeds)
        if master_az is not None:
            pulumi.set(__self__, "master_az", master_az)
        if master_job_id is not None:
            pulumi.set(__self__, "master_job_id", master_job_id)
        if migrate_definer is not None:
            pulumi.set(__self__, "migrate_definer", migrate_definer)
        if migration_type is not None:
            pulumi.set(__self__, "migration_type", migration_type)
        if multi_write is not None:
            pulumi.set(__self__, "multi_write", multi_write)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if net_type is not None:
            pulumi.set(__self__, "net_type", net_type)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)
        if original_job_direction is not None:
            pulumi.set(__self__, "original_job_direction", original_job_direction)
        if pause_mode is not None:
            pulumi.set(__self__, "pause_mode", pause_mode)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if policy_config is not None:
            pulumi.set(__self__, "policy_config", policy_config)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_lists is not None:
            pulumi.set(__self__, "public_ip_lists", public_ip_lists)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if slave_az is not None:
            pulumi.set(__self__, "slave_az", slave_az)
        if slave_job_id is not None:
            pulumi.set(__self__, "slave_job_id", slave_job_id)
        if source_db is not None:
            pulumi.set(__self__, "source_db", source_db)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the action of job. The options are as follows:
        + **stop**: Stop the job. Available when job status is **FULL_TRANSFER_STARTED**, **FULL_TRANSFER_COMPLETE** or
        **INCRE_TRANSFER_STARTED**.
        + **restart**: Continue the job. Available when job status is **PAUSING**.
        + **reset**: Retry the job. Available when job status is **FULL_TRANSFER_FAILED** or **INCRE_TRANSFER_FAILED**.
        + **start**: Start the job. Available when job status is **WAITING_FOR_START**.

        > It will only take effect when **updating** a job.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="alarmNotify")
    def alarm_notify(self) -> Optional[pulumi.Input['JobAlarmNotifyArgs']]:
        """
        Specifies the information body for setting task exception notification.
        Changing this parameter will create a new resource.
        The alarm_notify structure is documented below.
        """
        return pulumi.get(self, "alarm_notify")

    @alarm_notify.setter
    def alarm_notify(self, value: Optional[pulumi.Input['JobAlarmNotifyArgs']]):
        pulumi.set(self, "alarm_notify", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Create time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of the databases which the job migrates or synchronizes. Means to
        transfer database level data. This parameter conflicts with `tables`.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "databases", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the job, which contain a
        maximum of 256 characters, and certain special characters (including !<>&'"\\\\) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="destinationDb")
    def destination_db(self) -> Optional[pulumi.Input['JobDestinationDbArgs']]:
        """
        Specifies the destination database configuration.
        The db_info structure of the `destination_db` is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "destination_db")

    @destination_db.setter
    def destination_db(self, value: Optional[pulumi.Input['JobDestinationDbArgs']]):
        pulumi.set(self, "destination_db", value)

    @_builtins.property
    @pulumi.getter(name="destinationDbReadnoly")
    def destination_db_readnoly(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the destination DB instance as read-only helps
        ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
        Read/Write. Changing this parameter will create a new resource.

        > This parameter is valid only when MySQL migration and DR and `direction` is set to **up**. The default value is **true**,
        you need to manually set this parameter to **false** in other application scenarios except MySQL migration and DR scenarios.
        """
        return pulumi.get(self, "destination_db_readnoly")

    @destination_db_readnoly.setter
    def destination_db_readnoly(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "destination_db_readnoly", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the direction of data flow.
        Changing this parameter will create a new resource. The options are as follows:
        + **up**: To the cloud. The destination database must be a database in the current cloud.
        + **down**: Out of the cloud. The source database must be a database in the current cloud.
        + **non-dbs**: self-built database.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the engine type of database. Changing this parameter will
        create a new resource. The options are as follows: **mysql**, **mongodb**, **gaussdbv5**, **taurus**, **gaussdbv5ha**,
        **kafka**, **postgresql**.
        """
        return pulumi.get(self, "engine_type")

    @engine_type.setter
    def engine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine_type", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project id.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="expiredDays")
    def expired_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies how many days after the task is abnormal, it will automatically
        end. The value ranges from 14 to 100. the default value is `14`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "expired_days")

    @expired_days.setter
    def expired_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "expired_days", value)

    @_builtins.property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to forcibly destroy the job even if it is running.
        The default value is **false**.
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_destroy", value)

    @_builtins.property
    @pulumi.getter(name="isOpenFastClean")
    def is_open_fast_clean(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable binlog clearing for RDS for MySQL or RDS
        for MariaDB. Defaults to **false**.
        Changing this parameter will create a new resource.

        <a name="block--db_info"></a>
        The `db_info` block supports:
        """
        return pulumi.get(self, "is_open_fast_clean")

    @is_open_fast_clean.setter
    def is_open_fast_clean(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_open_fast_clean", value)

    @_builtins.property
    @pulumi.getter(name="isSyncReEdit")
    def is_sync_re_edit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to start the sync re-edit job. It's valid when `action` is **restart**.
        """
        return pulumi.get(self, "is_sync_re_edit")

    @is_sync_re_edit.setter
    def is_sync_re_edit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_sync_re_edit", value)

    @_builtins.property
    @pulumi.getter(name="limitSpeeds")
    def limit_speeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobLimitSpeedArgs']]]]:
        """
        Specifies the migration speed by setting a time period.
        The default is no speed limit. The maximum length is 3. The limit_speed structure is documented
        below. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "limit_speeds")

    @limit_speeds.setter
    def limit_speeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobLimitSpeedArgs']]]]):
        pulumi.set(self, "limit_speeds", value)

    @_builtins.property
    @pulumi.getter(name="masterAz")
    def master_az(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AZ where the primary task is located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "master_az")

    @master_az.setter
    def master_az(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_az", value)

    @_builtins.property
    @pulumi.getter(name="masterJobId")
    def master_job_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The master job ID which will return if job is dual-AZ.
        """
        return pulumi.get(self, "master_job_id")

    @master_job_id.setter
    def master_job_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_job_id", value)

    @_builtins.property
    @pulumi.getter(name="migrateDefiner")
    def migrate_definer(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to migrate the definers of all source database
        objects to the `user` of `destination_db`. The default value is **true**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "migrate_definer")

    @migrate_definer.setter
    def migrate_definer(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "migrate_definer", value)

    @_builtins.property
    @pulumi.getter(name="migrationType")
    def migration_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies migration type.
        Changing this parameter will create a new resource. The default value is **FULL_INCR_TRANS**. The options are as follows:
        + **FULL_TRANS**: Full migration. Suitable for scenarios where services can be interrupted. It migrates all database
        objects and data, in a non-system database, to a destination database at a time.
        + **INCR_TRANS**: Incremental migration. Suitable for migration from an on-premises self-built database to a
        destination cloud database, or from one cloud database to another in a different region.
        + **FULL_INCR_TRANS**:  Full+Incremental migration. This allows to migrate data with minimal downtime. After a full
        migration initializes the destination database, an incremental migration parses logs to ensure data consistency
        between the source and destination databases.
        """
        return pulumi.get(self, "migration_type")

    @migration_type.setter
    def migration_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "migration_type", value)

    @_builtins.property
    @pulumi.getter(name="multiWrite")
    def multi_write(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable multi write. It is mandatory when `type`
        is **cloudDataGuard**. When the disaster recovery type is dual-active disaster recovery, set `multi_write` to **true**,
        otherwise to **false**. The default value is **false**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "multi_write")

    @multi_write.setter
    def multi_write(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "multi_write", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of database.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="netType")
    def net_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network type.
        Changing this parameter will create a new resource. The default value is **eip**. The options are as follows:
        + **eip**: suitable for migration from an on-premises or other cloud database to a destination cloud database.
        An EIP will be automatically bound to the replication instance and released after the replication task is complete.
        + **vpc**: suitable for migration from one cloud database to another.
        + **vpn**: suitable for migration from an on-premises self-built database to a destination cloud database,
        or from one cloud database to another in a different region.
        """
        return pulumi.get(self, "net_type")

    @net_type.setter
    def net_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "net_type", value)

    @_builtins.property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the node flavor type. Valid values are **micro**, **small**,
        **medium**, **high**, **xlarge**, **2xlarge**. Default to **high**.
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node_type", value)

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The order ID which will return if `charging_mode` is **prePaid**.
        """
        return pulumi.get(self, "order_id")

    @order_id.setter
    def order_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "order_id", value)

    @_builtins.property
    @pulumi.getter(name="originalJobDirection")
    def original_job_direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The original job direction.
        """
        return pulumi.get(self, "original_job_direction")

    @original_job_direction.setter
    def original_job_direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "original_job_direction", value)

    @_builtins.property
    @pulumi.getter(name="pauseMode")
    def pause_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the stop type of job. It's valid when `action` is **stop**.
        Default value is **target**. The options are as follows:
        + **target**: Stop playback.
        + **all**: Stop log capture and playback.
        """
        return pulumi.get(self, "pause_mode")

    @pause_mode.setter
    def pause_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pause_mode", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter(name="policyConfig")
    def policy_config(self) -> Optional[pulumi.Input['JobPolicyConfigArgs']]:
        """
        Specifies the policy information used to configure migration and
        synchronization policies. The policy_config structure is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_config")

    @policy_config.setter
    def policy_config(self, value: Optional[pulumi.Input['JobPolicyConfigArgs']]):
        pulumi.set(self, "policy_config", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private IP.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Progress.
        """
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "progress", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies public IP.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter(name="publicIpLists")
    def public_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobPublicIpListArgs']]]]:
        """
        Specifies the public IP list.
        It can be specified when `net_type` is **eip**, and if it's not specified, DRS job will automatically bind a public IP.
        Changing this parameter will create a new resource.
        The public_ip_list structure is documented below.
        """
        return pulumi.get(self, "public_ip_lists")

    @public_ip_lists.setter
    def public_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobPublicIpListArgs']]]]):
        pulumi.set(self, "public_ip_lists", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region which the database belongs when it is a RDS database.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The security group ID to which the databese instance belongs.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="slaveAz")
    def slave_az(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AZ where the standby task is located.
        Changing this parameter will create a new resource.

        > It takes effect when both `master_az` and `slave_az` are specified. Only MySQL and gaussdbv5ha-to-kafka scenarios
        are supported.
        """
        return pulumi.get(self, "slave_az")

    @slave_az.setter
    def slave_az(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slave_az", value)

    @_builtins.property
    @pulumi.getter(name="slaveJobId")
    def slave_job_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The slave job ID which will return if job is dual-AZ.
        """
        return pulumi.get(self, "slave_job_id")

    @slave_job_id.setter
    def slave_job_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slave_job_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceDb")
    def source_db(self) -> Optional[pulumi.Input['JobSourceDbArgs']]:
        """
        Specifies the source database configuration.
        The db_info structure of the `source_db` is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_db")

    @source_db.setter
    def source_db(self, value: Optional[pulumi.Input['JobSourceDbArgs']]):
        pulumi.set(self, "source_db", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time to start speed limit, this time is UTC time. The start
        time is the whole hour, if there is a minute, it will be ignored, the format is **hh:mm**, and the hour number
        is two digits, for example: 01:00. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies subnet ID of database when it is a RDS database.
        It is mandatory when `direction` is **down**. Changing this parameter will create a new resource.

        > When `net_type` is **vpc**, if `direction` is **up**, `source_db.vpc_id` and `source_db.subnet_id` is mandatory, if
        `direction` is **down**, `destination_db.vpc_id` and `destination_db.subnet_id` is mandatory.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTableArgs']]]]:
        """
        Specifies the list of the tables which the job migrates or synchronizes. Means to transfer
        table level data. This parameter conflicts with `databases`.
        The tables structure is documented below.

        >   1. `databases` and `tables` will only take effect when `type` is **migration** or **sync**.
        <br/>2. When `type` is **migration**, they are not allowed to **update**, if they are empty, means to migrate all objects.
        <br/>3. When `type` is **sync**, exactly one data level of `databases` and `tables` must be specified. It's **not allowed**
        to transfer the data level to another. Only when `status` is **INCRE_TRANSFER_STARTED** or **INCRE_TRANSFER_FAILED**,
        **update** will take effect.
        <br/>4. It's only for synchronization from **MySQL** to **MySQL**, migration from **Redis** to **GeminiDB Redis**,
        migration from cluster **Redis** to **GeminiDB Redis**, and synchronization from **Oracle** to **GaussDB Distributed**.
        """
        return pulumi.get(self, "tables")

    @tables.setter
    def tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTableArgs']]]]):
        pulumi.set(self, "tables", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the DRS job.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of a task with an EIP bound.
        Valid values are **master** and **slave**.
        + In a primary/standby task, **master** indicates the primary task, and **slave** indicates the standby task.
        + In other cases, the value is fixed to **master**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Update time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies vpc ID of database.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:Drs/job:Job")
class Job(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_notify: Optional[pulumi.Input[Union['JobAlarmNotifyArgs', 'JobAlarmNotifyArgsDict']]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_db: Optional[pulumi.Input[Union['JobDestinationDbArgs', 'JobDestinationDbArgsDict']]] = None,
                 destination_db_readnoly: Optional[pulumi.Input[_builtins.bool]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_days: Optional[pulumi.Input[_builtins.int]] = None,
                 force_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_open_fast_clean: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_sync_re_edit: Optional[pulumi.Input[_builtins.bool]] = None,
                 limit_speeds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['JobLimitSpeedArgs', 'JobLimitSpeedArgsDict']]]]] = None,
                 master_az: Optional[pulumi.Input[_builtins.str]] = None,
                 migrate_definer: Optional[pulumi.Input[_builtins.bool]] = None,
                 migration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 multi_write: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 net_type: Optional[pulumi.Input[_builtins.str]] = None,
                 node_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pause_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_config: Optional[pulumi.Input[Union['JobPolicyConfigArgs', 'JobPolicyConfigArgsDict']]] = None,
                 public_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['JobPublicIpListArgs', 'JobPublicIpListArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 slave_az: Optional[pulumi.Input[_builtins.str]] = None,
                 source_db: Optional[pulumi.Input[Union['JobSourceDbArgs', 'JobSourceDbArgsDict']]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 tables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['JobTableArgs', 'JobTableArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages DRS job resource within HuaweiCloud.

        ## Example Usage

        ## Import

        The DRS job can be imported by `id`. e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Drs/job:Job test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `enterprise_project_id`, `force_destroy`,

        `source_db.0.password`, `destination_db.0.password`, `source_db.0.ip`, `destination_db.0.ip`,

        `source_db.0.kafka_security_config.0.trust_store_password`, `destination_db.0.kafka_security_config.0.trust_store_password`,

        `source_db.0.kafka_security_config.0.key_store_password`,`destination_db.0.kafka_security_config.0.key_store_password`,

        `source_db.0.kafka_security_config.0.key_password`, `destination_db.0.kafka_security_config.0.key_password`,

        `action`, `is_sync_re_edit`, `pause_mode`, `auto_renew`, `alarm_notify.0.topic_urn`, `policy_config`, `engine_type`,

        `public_ip_list`, `start_time`.

        It is generally recommended running **pulumi preview** after importing a job. You can then

        decide if changes should be applied to the job, or the resource definition should be updated to align with the job. Also

        you can ignore changes as below.

        hcl

        resource "huaweicloud_drs_job" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              source_db.0.password, destination_db.0.password, action,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action of job. The options are as follows:
               + **stop**: Stop the job. Available when job status is **FULL_TRANSFER_STARTED**, **FULL_TRANSFER_COMPLETE** or
               **INCRE_TRANSFER_STARTED**.
               + **restart**: Continue the job. Available when job status is **PAUSING**.
               + **reset**: Retry the job. Available when job status is **FULL_TRANSFER_FAILED** or **INCRE_TRANSFER_FAILED**.
               + **start**: Start the job. Available when job status is **WAITING_FOR_START**.
               
               > It will only take effect when **updating** a job.
        :param pulumi.Input[Union['JobAlarmNotifyArgs', 'JobAlarmNotifyArgsDict']] alarm_notify: Specifies the information body for setting task exception notification.
               Changing this parameter will create a new resource.
               The alarm_notify structure is documented below.
        :param pulumi.Input[_builtins.str] auto_renew: schema: Internal
        :param pulumi.Input[_builtins.str] charging_mode: schema: Internal
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] databases: Specifies the list of the databases which the job migrates or synchronizes. Means to
               transfer database level data. This parameter conflicts with `tables`.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the job, which contain a
               maximum of 256 characters, and certain special characters (including !<>&'"\\\\) are not allowed.
        :param pulumi.Input[Union['JobDestinationDbArgs', 'JobDestinationDbArgsDict']] destination_db: Specifies the destination database configuration.
               The db_info structure of the `destination_db` is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] destination_db_readnoly: Specifies the destination DB instance as read-only helps
               ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
               Read/Write. Changing this parameter will create a new resource.
               
               > This parameter is valid only when MySQL migration and DR and `direction` is set to **up**. The default value is **true**,
               you need to manually set this parameter to **false** in other application scenarios except MySQL migration and DR scenarios.
        :param pulumi.Input[_builtins.str] direction: Specifies the direction of data flow.
               Changing this parameter will create a new resource. The options are as follows:
               + **up**: To the cloud. The destination database must be a database in the current cloud.
               + **down**: Out of the cloud. The source database must be a database in the current cloud.
               + **non-dbs**: self-built database.
        :param pulumi.Input[_builtins.str] engine_type: Specifies the engine type of database. Changing this parameter will
               create a new resource. The options are as follows: **mysql**, **mongodb**, **gaussdbv5**, **taurus**, **gaussdbv5ha**,
               **kafka**, **postgresql**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project id.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] expired_days: Specifies how many days after the task is abnormal, it will automatically
               end. The value ranges from 14 to 100. the default value is `14`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] force_destroy: Specifies whether to forcibly destroy the job even if it is running.
               The default value is **false**.
        :param pulumi.Input[_builtins.bool] is_open_fast_clean: Specifies whether to enable binlog clearing for RDS for MySQL or RDS
               for MariaDB. Defaults to **false**.
               Changing this parameter will create a new resource.
               
               <a name="block--db_info"></a>
               The `db_info` block supports:
        :param pulumi.Input[_builtins.bool] is_sync_re_edit: Specifies whether to start the sync re-edit job. It's valid when `action` is **restart**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['JobLimitSpeedArgs', 'JobLimitSpeedArgsDict']]]] limit_speeds: Specifies the migration speed by setting a time period.
               The default is no speed limit. The maximum length is 3. The limit_speed structure is documented
               below. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] master_az: Specifies the AZ where the primary task is located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] migrate_definer: Specifies whether to migrate the definers of all source database
               objects to the `user` of `destination_db`. The default value is **true**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] migration_type: Specifies migration type.
               Changing this parameter will create a new resource. The default value is **FULL_INCR_TRANS**. The options are as follows:
               + **FULL_TRANS**: Full migration. Suitable for scenarios where services can be interrupted. It migrates all database
               objects and data, in a non-system database, to a destination database at a time.
               + **INCR_TRANS**: Incremental migration. Suitable for migration from an on-premises self-built database to a
               destination cloud database, or from one cloud database to another in a different region.
               + **FULL_INCR_TRANS**:  Full+Incremental migration. This allows to migrate data with minimal downtime. After a full
               migration initializes the destination database, an incremental migration parses logs to ensure data consistency
               between the source and destination databases.
        :param pulumi.Input[_builtins.bool] multi_write: Specifies whether to enable multi write. It is mandatory when `type`
               is **cloudDataGuard**. When the disaster recovery type is dual-active disaster recovery, set `multi_write` to **true**,
               otherwise to **false**. The default value is **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of database.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] net_type: Specifies the network type.
               Changing this parameter will create a new resource. The default value is **eip**. The options are as follows:
               + **eip**: suitable for migration from an on-premises or other cloud database to a destination cloud database.
               An EIP will be automatically bound to the replication instance and released after the replication task is complete.
               + **vpc**: suitable for migration from one cloud database to another.
               + **vpn**: suitable for migration from an on-premises self-built database to a destination cloud database,
               or from one cloud database to another in a different region.
        :param pulumi.Input[_builtins.str] node_type: Specifies the node flavor type. Valid values are **micro**, **small**,
               **medium**, **high**, **xlarge**, **2xlarge**. Default to **high**.
        :param pulumi.Input[_builtins.str] pause_mode: Specifies the stop type of job. It's valid when `action` is **stop**.
               Default value is **target**. The options are as follows:
               + **target**: Stop playback.
               + **all**: Stop log capture and playback.
        :param pulumi.Input[_builtins.int] period: schema: Internal
        :param pulumi.Input[_builtins.str] period_unit: schema: Internal
        :param pulumi.Input[Union['JobPolicyConfigArgs', 'JobPolicyConfigArgsDict']] policy_config: Specifies the policy information used to configure migration and
               synchronization policies. The policy_config structure is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['JobPublicIpListArgs', 'JobPublicIpListArgsDict']]]] public_ip_lists: Specifies the public IP list.
               It can be specified when `net_type` is **eip**, and if it's not specified, DRS job will automatically bind a public IP.
               Changing this parameter will create a new resource.
               The public_ip_list structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region which the database belongs when it is a RDS database.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] slave_az: Specifies the AZ where the standby task is located.
               Changing this parameter will create a new resource.
               
               > It takes effect when both `master_az` and `slave_az` are specified. Only MySQL and gaussdbv5ha-to-kafka scenarios
               are supported.
        :param pulumi.Input[Union['JobSourceDbArgs', 'JobSourceDbArgsDict']] source_db: Specifies the source database configuration.
               The db_info structure of the `source_db` is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the time to start speed limit, this time is UTC time. The start
               time is the whole hour, if there is a minute, it will be ignored, the format is **hh:mm**, and the hour number
               is two digits, for example: 01:00. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['JobTableArgs', 'JobTableArgsDict']]]] tables: Specifies the list of the tables which the job migrates or synchronizes. Means to transfer
               table level data. This parameter conflicts with `databases`.
               The tables structure is documented below.
               
               >   1. `databases` and `tables` will only take effect when `type` is **migration** or **sync**.
               <br/>2. When `type` is **migration**, they are not allowed to **update**, if they are empty, means to migrate all objects.
               <br/>3. When `type` is **sync**, exactly one data level of `databases` and `tables` must be specified. It's **not allowed**
               to transfer the data level to another. Only when `status` is **INCRE_TRANSFER_STARTED** or **INCRE_TRANSFER_FAILED**,
               **update** will take effect.
               <br/>4. It's only for synchronization from **MySQL** to **MySQL**, migration from **Redis** to **GeminiDB Redis**,
               migration from cluster **Redis** to **GeminiDB Redis**, and synchronization from **Oracle** to **GaussDB Distributed**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the DRS job.
        :param pulumi.Input[_builtins.str] type: Specifies the type of a task with an EIP bound.
               Valid values are **master** and **slave**.
               + In a primary/standby task, **master** indicates the primary task, and **slave** indicates the standby task.
               + In other cases, the value is fixed to **master**.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: JobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages DRS job resource within HuaweiCloud.

        ## Example Usage

        ## Import

        The DRS job can be imported by `id`. e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Drs/job:Job test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `enterprise_project_id`, `force_destroy`,

        `source_db.0.password`, `destination_db.0.password`, `source_db.0.ip`, `destination_db.0.ip`,

        `source_db.0.kafka_security_config.0.trust_store_password`, `destination_db.0.kafka_security_config.0.trust_store_password`,

        `source_db.0.kafka_security_config.0.key_store_password`,`destination_db.0.kafka_security_config.0.key_store_password`,

        `source_db.0.kafka_security_config.0.key_password`, `destination_db.0.kafka_security_config.0.key_password`,

        `action`, `is_sync_re_edit`, `pause_mode`, `auto_renew`, `alarm_notify.0.topic_urn`, `policy_config`, `engine_type`,

        `public_ip_list`, `start_time`.

        It is generally recommended running **pulumi preview** after importing a job. You can then

        decide if changes should be applied to the job, or the resource definition should be updated to align with the job. Also

        you can ignore changes as below.

        hcl

        resource "huaweicloud_drs_job" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              source_db.0.password, destination_db.0.password, action,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param JobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(JobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_notify: Optional[pulumi.Input[Union['JobAlarmNotifyArgs', 'JobAlarmNotifyArgsDict']]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_db: Optional[pulumi.Input[Union['JobDestinationDbArgs', 'JobDestinationDbArgsDict']]] = None,
                 destination_db_readnoly: Optional[pulumi.Input[_builtins.bool]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_days: Optional[pulumi.Input[_builtins.int]] = None,
                 force_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_open_fast_clean: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_sync_re_edit: Optional[pulumi.Input[_builtins.bool]] = None,
                 limit_speeds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['JobLimitSpeedArgs', 'JobLimitSpeedArgsDict']]]]] = None,
                 master_az: Optional[pulumi.Input[_builtins.str]] = None,
                 migrate_definer: Optional[pulumi.Input[_builtins.bool]] = None,
                 migration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 multi_write: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 net_type: Optional[pulumi.Input[_builtins.str]] = None,
                 node_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pause_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_config: Optional[pulumi.Input[Union['JobPolicyConfigArgs', 'JobPolicyConfigArgsDict']]] = None,
                 public_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['JobPublicIpListArgs', 'JobPublicIpListArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 slave_az: Optional[pulumi.Input[_builtins.str]] = None,
                 source_db: Optional[pulumi.Input[Union['JobSourceDbArgs', 'JobSourceDbArgsDict']]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 tables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['JobTableArgs', 'JobTableArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = JobArgs.__new__(JobArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["alarm_notify"] = alarm_notify
            __props__.__dict__["auto_renew"] = auto_renew
            __props__.__dict__["charging_mode"] = charging_mode
            __props__.__dict__["databases"] = databases
            __props__.__dict__["description"] = description
            if destination_db is None and not opts.urn:
                raise TypeError("Missing required property 'destination_db'")
            __props__.__dict__["destination_db"] = destination_db
            __props__.__dict__["destination_db_readnoly"] = destination_db_readnoly
            if direction is None and not opts.urn:
                raise TypeError("Missing required property 'direction'")
            __props__.__dict__["direction"] = direction
            if engine_type is None and not opts.urn:
                raise TypeError("Missing required property 'engine_type'")
            __props__.__dict__["engine_type"] = engine_type
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["expired_days"] = expired_days
            __props__.__dict__["force_destroy"] = force_destroy
            __props__.__dict__["is_open_fast_clean"] = is_open_fast_clean
            __props__.__dict__["is_sync_re_edit"] = is_sync_re_edit
            __props__.__dict__["limit_speeds"] = limit_speeds
            __props__.__dict__["master_az"] = master_az
            __props__.__dict__["migrate_definer"] = migrate_definer
            __props__.__dict__["migration_type"] = migration_type
            __props__.__dict__["multi_write"] = multi_write
            __props__.__dict__["name"] = name
            __props__.__dict__["net_type"] = net_type
            __props__.__dict__["node_type"] = node_type
            __props__.__dict__["pause_mode"] = pause_mode
            __props__.__dict__["period"] = period
            __props__.__dict__["period_unit"] = period_unit
            __props__.__dict__["policy_config"] = policy_config
            __props__.__dict__["public_ip_lists"] = public_ip_lists
            __props__.__dict__["region"] = region
            __props__.__dict__["slave_az"] = slave_az
            if source_db is None and not opts.urn:
                raise TypeError("Missing required property 'source_db'")
            __props__.__dict__["source_db"] = source_db
            __props__.__dict__["start_time"] = start_time
            __props__.__dict__["tables"] = tables
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["master_job_id"] = None
            __props__.__dict__["order_id"] = None
            __props__.__dict__["original_job_direction"] = None
            __props__.__dict__["private_ip"] = None
            __props__.__dict__["progress"] = None
            __props__.__dict__["public_ip"] = None
            __props__.__dict__["security_group_id"] = None
            __props__.__dict__["slave_job_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["subnet_id"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["vpc_id"] = None
        super(Job, __self__).__init__(
            'huaweicloud:Drs/job:Job',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_notify: Optional[pulumi.Input[Union['JobAlarmNotifyArgs', 'JobAlarmNotifyArgsDict']]] = None,
            auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
            charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            databases: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            destination_db: Optional[pulumi.Input[Union['JobDestinationDbArgs', 'JobDestinationDbArgsDict']]] = None,
            destination_db_readnoly: Optional[pulumi.Input[_builtins.bool]] = None,
            direction: Optional[pulumi.Input[_builtins.str]] = None,
            engine_type: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            expired_days: Optional[pulumi.Input[_builtins.int]] = None,
            force_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
            is_open_fast_clean: Optional[pulumi.Input[_builtins.bool]] = None,
            is_sync_re_edit: Optional[pulumi.Input[_builtins.bool]] = None,
            limit_speeds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['JobLimitSpeedArgs', 'JobLimitSpeedArgsDict']]]]] = None,
            master_az: Optional[pulumi.Input[_builtins.str]] = None,
            master_job_id: Optional[pulumi.Input[_builtins.str]] = None,
            migrate_definer: Optional[pulumi.Input[_builtins.bool]] = None,
            migration_type: Optional[pulumi.Input[_builtins.str]] = None,
            multi_write: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            net_type: Optional[pulumi.Input[_builtins.str]] = None,
            node_type: Optional[pulumi.Input[_builtins.str]] = None,
            order_id: Optional[pulumi.Input[_builtins.str]] = None,
            original_job_direction: Optional[pulumi.Input[_builtins.str]] = None,
            pause_mode: Optional[pulumi.Input[_builtins.str]] = None,
            period: Optional[pulumi.Input[_builtins.int]] = None,
            period_unit: Optional[pulumi.Input[_builtins.str]] = None,
            policy_config: Optional[pulumi.Input[Union['JobPolicyConfigArgs', 'JobPolicyConfigArgsDict']]] = None,
            private_ip: Optional[pulumi.Input[_builtins.str]] = None,
            progress: Optional[pulumi.Input[_builtins.str]] = None,
            public_ip: Optional[pulumi.Input[_builtins.str]] = None,
            public_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['JobPublicIpListArgs', 'JobPublicIpListArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            slave_az: Optional[pulumi.Input[_builtins.str]] = None,
            slave_job_id: Optional[pulumi.Input[_builtins.str]] = None,
            source_db: Optional[pulumi.Input[Union['JobSourceDbArgs', 'JobSourceDbArgsDict']]] = None,
            start_time: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            tables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['JobTableArgs', 'JobTableArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Job':
        """
        Get an existing Job resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action of job. The options are as follows:
               + **stop**: Stop the job. Available when job status is **FULL_TRANSFER_STARTED**, **FULL_TRANSFER_COMPLETE** or
               **INCRE_TRANSFER_STARTED**.
               + **restart**: Continue the job. Available when job status is **PAUSING**.
               + **reset**: Retry the job. Available when job status is **FULL_TRANSFER_FAILED** or **INCRE_TRANSFER_FAILED**.
               + **start**: Start the job. Available when job status is **WAITING_FOR_START**.
               
               > It will only take effect when **updating** a job.
        :param pulumi.Input[Union['JobAlarmNotifyArgs', 'JobAlarmNotifyArgsDict']] alarm_notify: Specifies the information body for setting task exception notification.
               Changing this parameter will create a new resource.
               The alarm_notify structure is documented below.
        :param pulumi.Input[_builtins.str] auto_renew: schema: Internal
        :param pulumi.Input[_builtins.str] charging_mode: schema: Internal
        :param pulumi.Input[_builtins.str] created_at: Create time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] databases: Specifies the list of the databases which the job migrates or synchronizes. Means to
               transfer database level data. This parameter conflicts with `tables`.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the job, which contain a
               maximum of 256 characters, and certain special characters (including !<>&'"\\\\) are not allowed.
        :param pulumi.Input[Union['JobDestinationDbArgs', 'JobDestinationDbArgsDict']] destination_db: Specifies the destination database configuration.
               The db_info structure of the `destination_db` is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] destination_db_readnoly: Specifies the destination DB instance as read-only helps
               ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
               Read/Write. Changing this parameter will create a new resource.
               
               > This parameter is valid only when MySQL migration and DR and `direction` is set to **up**. The default value is **true**,
               you need to manually set this parameter to **false** in other application scenarios except MySQL migration and DR scenarios.
        :param pulumi.Input[_builtins.str] direction: Specifies the direction of data flow.
               Changing this parameter will create a new resource. The options are as follows:
               + **up**: To the cloud. The destination database must be a database in the current cloud.
               + **down**: Out of the cloud. The source database must be a database in the current cloud.
               + **non-dbs**: self-built database.
        :param pulumi.Input[_builtins.str] engine_type: Specifies the engine type of database. Changing this parameter will
               create a new resource. The options are as follows: **mysql**, **mongodb**, **gaussdbv5**, **taurus**, **gaussdbv5ha**,
               **kafka**, **postgresql**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project id.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] expired_days: Specifies how many days after the task is abnormal, it will automatically
               end. The value ranges from 14 to 100. the default value is `14`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] force_destroy: Specifies whether to forcibly destroy the job even if it is running.
               The default value is **false**.
        :param pulumi.Input[_builtins.bool] is_open_fast_clean: Specifies whether to enable binlog clearing for RDS for MySQL or RDS
               for MariaDB. Defaults to **false**.
               Changing this parameter will create a new resource.
               
               <a name="block--db_info"></a>
               The `db_info` block supports:
        :param pulumi.Input[_builtins.bool] is_sync_re_edit: Specifies whether to start the sync re-edit job. It's valid when `action` is **restart**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['JobLimitSpeedArgs', 'JobLimitSpeedArgsDict']]]] limit_speeds: Specifies the migration speed by setting a time period.
               The default is no speed limit. The maximum length is 3. The limit_speed structure is documented
               below. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] master_az: Specifies the AZ where the primary task is located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] master_job_id: The master job ID which will return if job is dual-AZ.
        :param pulumi.Input[_builtins.bool] migrate_definer: Specifies whether to migrate the definers of all source database
               objects to the `user` of `destination_db`. The default value is **true**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] migration_type: Specifies migration type.
               Changing this parameter will create a new resource. The default value is **FULL_INCR_TRANS**. The options are as follows:
               + **FULL_TRANS**: Full migration. Suitable for scenarios where services can be interrupted. It migrates all database
               objects and data, in a non-system database, to a destination database at a time.
               + **INCR_TRANS**: Incremental migration. Suitable for migration from an on-premises self-built database to a
               destination cloud database, or from one cloud database to another in a different region.
               + **FULL_INCR_TRANS**:  Full+Incremental migration. This allows to migrate data with minimal downtime. After a full
               migration initializes the destination database, an incremental migration parses logs to ensure data consistency
               between the source and destination databases.
        :param pulumi.Input[_builtins.bool] multi_write: Specifies whether to enable multi write. It is mandatory when `type`
               is **cloudDataGuard**. When the disaster recovery type is dual-active disaster recovery, set `multi_write` to **true**,
               otherwise to **false**. The default value is **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of database.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] net_type: Specifies the network type.
               Changing this parameter will create a new resource. The default value is **eip**. The options are as follows:
               + **eip**: suitable for migration from an on-premises or other cloud database to a destination cloud database.
               An EIP will be automatically bound to the replication instance and released after the replication task is complete.
               + **vpc**: suitable for migration from one cloud database to another.
               + **vpn**: suitable for migration from an on-premises self-built database to a destination cloud database,
               or from one cloud database to another in a different region.
        :param pulumi.Input[_builtins.str] node_type: Specifies the node flavor type. Valid values are **micro**, **small**,
               **medium**, **high**, **xlarge**, **2xlarge**. Default to **high**.
        :param pulumi.Input[_builtins.str] order_id: The order ID which will return if `charging_mode` is **prePaid**.
        :param pulumi.Input[_builtins.str] original_job_direction: The original job direction.
        :param pulumi.Input[_builtins.str] pause_mode: Specifies the stop type of job. It's valid when `action` is **stop**.
               Default value is **target**. The options are as follows:
               + **target**: Stop playback.
               + **all**: Stop log capture and playback.
        :param pulumi.Input[_builtins.int] period: schema: Internal
        :param pulumi.Input[_builtins.str] period_unit: schema: Internal
        :param pulumi.Input[Union['JobPolicyConfigArgs', 'JobPolicyConfigArgsDict']] policy_config: Specifies the policy information used to configure migration and
               synchronization policies. The policy_config structure is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] private_ip: Private IP.
        :param pulumi.Input[_builtins.str] progress: Progress.
        :param pulumi.Input[_builtins.str] public_ip: Specifies public IP.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['JobPublicIpListArgs', 'JobPublicIpListArgsDict']]]] public_ip_lists: Specifies the public IP list.
               It can be specified when `net_type` is **eip**, and if it's not specified, DRS job will automatically bind a public IP.
               Changing this parameter will create a new resource.
               The public_ip_list structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region which the database belongs when it is a RDS database.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] security_group_id: The security group ID to which the databese instance belongs.
        :param pulumi.Input[_builtins.str] slave_az: Specifies the AZ where the standby task is located.
               Changing this parameter will create a new resource.
               
               > It takes effect when both `master_az` and `slave_az` are specified. Only MySQL and gaussdbv5ha-to-kafka scenarios
               are supported.
        :param pulumi.Input[_builtins.str] slave_job_id: The slave job ID which will return if job is dual-AZ.
        :param pulumi.Input[Union['JobSourceDbArgs', 'JobSourceDbArgsDict']] source_db: Specifies the source database configuration.
               The db_info structure of the `source_db` is documented below.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the time to start speed limit, this time is UTC time. The start
               time is the whole hour, if there is a minute, it will be ignored, the format is **hh:mm**, and the hour number
               is two digits, for example: 01:00. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Status.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies subnet ID of database when it is a RDS database.
               It is mandatory when `direction` is **down**. Changing this parameter will create a new resource.
               
               > When `net_type` is **vpc**, if `direction` is **up**, `source_db.vpc_id` and `source_db.subnet_id` is mandatory, if
               `direction` is **down**, `destination_db.vpc_id` and `destination_db.subnet_id` is mandatory.
        :param pulumi.Input[Sequence[pulumi.Input[Union['JobTableArgs', 'JobTableArgsDict']]]] tables: Specifies the list of the tables which the job migrates or synchronizes. Means to transfer
               table level data. This parameter conflicts with `databases`.
               The tables structure is documented below.
               
               >   1. `databases` and `tables` will only take effect when `type` is **migration** or **sync**.
               <br/>2. When `type` is **migration**, they are not allowed to **update**, if they are empty, means to migrate all objects.
               <br/>3. When `type` is **sync**, exactly one data level of `databases` and `tables` must be specified. It's **not allowed**
               to transfer the data level to another. Only when `status` is **INCRE_TRANSFER_STARTED** or **INCRE_TRANSFER_FAILED**,
               **update** will take effect.
               <br/>4. It's only for synchronization from **MySQL** to **MySQL**, migration from **Redis** to **GeminiDB Redis**,
               migration from cluster **Redis** to **GeminiDB Redis**, and synchronization from **Oracle** to **GaussDB Distributed**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the DRS job.
        :param pulumi.Input[_builtins.str] type: Specifies the type of a task with an EIP bound.
               Valid values are **master** and **slave**.
               + In a primary/standby task, **master** indicates the primary task, and **slave** indicates the standby task.
               + In other cases, the value is fixed to **master**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Update time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies vpc ID of database.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _JobState.__new__(_JobState)

        __props__.__dict__["action"] = action
        __props__.__dict__["alarm_notify"] = alarm_notify
        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["databases"] = databases
        __props__.__dict__["description"] = description
        __props__.__dict__["destination_db"] = destination_db
        __props__.__dict__["destination_db_readnoly"] = destination_db_readnoly
        __props__.__dict__["direction"] = direction
        __props__.__dict__["engine_type"] = engine_type
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["expired_days"] = expired_days
        __props__.__dict__["force_destroy"] = force_destroy
        __props__.__dict__["is_open_fast_clean"] = is_open_fast_clean
        __props__.__dict__["is_sync_re_edit"] = is_sync_re_edit
        __props__.__dict__["limit_speeds"] = limit_speeds
        __props__.__dict__["master_az"] = master_az
        __props__.__dict__["master_job_id"] = master_job_id
        __props__.__dict__["migrate_definer"] = migrate_definer
        __props__.__dict__["migration_type"] = migration_type
        __props__.__dict__["multi_write"] = multi_write
        __props__.__dict__["name"] = name
        __props__.__dict__["net_type"] = net_type
        __props__.__dict__["node_type"] = node_type
        __props__.__dict__["order_id"] = order_id
        __props__.__dict__["original_job_direction"] = original_job_direction
        __props__.__dict__["pause_mode"] = pause_mode
        __props__.__dict__["period"] = period
        __props__.__dict__["period_unit"] = period_unit
        __props__.__dict__["policy_config"] = policy_config
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["progress"] = progress
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["public_ip_lists"] = public_ip_lists
        __props__.__dict__["region"] = region
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["slave_az"] = slave_az
        __props__.__dict__["slave_job_id"] = slave_job_id
        __props__.__dict__["source_db"] = source_db
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tables"] = tables
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["vpc_id"] = vpc_id
        return Job(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the action of job. The options are as follows:
        + **stop**: Stop the job. Available when job status is **FULL_TRANSFER_STARTED**, **FULL_TRANSFER_COMPLETE** or
        **INCRE_TRANSFER_STARTED**.
        + **restart**: Continue the job. Available when job status is **PAUSING**.
        + **reset**: Retry the job. Available when job status is **FULL_TRANSFER_FAILED** or **INCRE_TRANSFER_FAILED**.
        + **start**: Start the job. Available when job status is **WAITING_FOR_START**.

        > It will only take effect when **updating** a job.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="alarmNotify")
    def alarm_notify(self) -> pulumi.Output['outputs.JobAlarmNotify']:
        """
        Specifies the information body for setting task exception notification.
        Changing this parameter will create a new resource.
        The alarm_notify structure is documented below.
        """
        return pulumi.get(self, "alarm_notify")

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "auto_renew")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[_builtins.str]:
        """
        schema: Internal
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Create time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the list of the databases which the job migrates or synchronizes. Means to
        transfer database level data. This parameter conflicts with `tables`.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the job, which contain a
        maximum of 256 characters, and certain special characters (including !<>&'"\\\\) are not allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="destinationDb")
    def destination_db(self) -> pulumi.Output['outputs.JobDestinationDb']:
        """
        Specifies the destination database configuration.
        The db_info structure of the `destination_db` is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "destination_db")

    @_builtins.property
    @pulumi.getter(name="destinationDbReadnoly")
    def destination_db_readnoly(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies the destination DB instance as read-only helps
        ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
        Read/Write. Changing this parameter will create a new resource.

        > This parameter is valid only when MySQL migration and DR and `direction` is set to **up**. The default value is **true**,
        you need to manually set this parameter to **false** in other application scenarios except MySQL migration and DR scenarios.
        """
        return pulumi.get(self, "destination_db_readnoly")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the direction of data flow.
        Changing this parameter will create a new resource. The options are as follows:
        + **up**: To the cloud. The destination database must be a database in the current cloud.
        + **down**: Out of the cloud. The source database must be a database in the current cloud.
        + **non-dbs**: self-built database.
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the engine type of database. Changing this parameter will
        create a new resource. The options are as follows: **mysql**, **mongodb**, **gaussdbv5**, **taurus**, **gaussdbv5ha**,
        **kafka**, **postgresql**.
        """
        return pulumi.get(self, "engine_type")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project id.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="expiredDays")
    def expired_days(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies how many days after the task is abnormal, it will automatically
        end. The value ranges from 14 to 100. the default value is `14`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "expired_days")

    @_builtins.property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to forcibly destroy the job even if it is running.
        The default value is **false**.
        """
        return pulumi.get(self, "force_destroy")

    @_builtins.property
    @pulumi.getter(name="isOpenFastClean")
    def is_open_fast_clean(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable binlog clearing for RDS for MySQL or RDS
        for MariaDB. Defaults to **false**.
        Changing this parameter will create a new resource.

        <a name="block--db_info"></a>
        The `db_info` block supports:
        """
        return pulumi.get(self, "is_open_fast_clean")

    @_builtins.property
    @pulumi.getter(name="isSyncReEdit")
    def is_sync_re_edit(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to start the sync re-edit job. It's valid when `action` is **restart**.
        """
        return pulumi.get(self, "is_sync_re_edit")

    @_builtins.property
    @pulumi.getter(name="limitSpeeds")
    def limit_speeds(self) -> pulumi.Output[Optional[Sequence['outputs.JobLimitSpeed']]]:
        """
        Specifies the migration speed by setting a time period.
        The default is no speed limit. The maximum length is 3. The limit_speed structure is documented
        below. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "limit_speeds")

    @_builtins.property
    @pulumi.getter(name="masterAz")
    def master_az(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the AZ where the primary task is located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "master_az")

    @_builtins.property
    @pulumi.getter(name="masterJobId")
    def master_job_id(self) -> pulumi.Output[_builtins.str]:
        """
        The master job ID which will return if job is dual-AZ.
        """
        return pulumi.get(self, "master_job_id")

    @_builtins.property
    @pulumi.getter(name="migrateDefiner")
    def migrate_definer(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to migrate the definers of all source database
        objects to the `user` of `destination_db`. The default value is **true**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "migrate_definer")

    @_builtins.property
    @pulumi.getter(name="migrationType")
    def migration_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies migration type.
        Changing this parameter will create a new resource. The default value is **FULL_INCR_TRANS**. The options are as follows:
        + **FULL_TRANS**: Full migration. Suitable for scenarios where services can be interrupted. It migrates all database
        objects and data, in a non-system database, to a destination database at a time.
        + **INCR_TRANS**: Incremental migration. Suitable for migration from an on-premises self-built database to a
        destination cloud database, or from one cloud database to another in a different region.
        + **FULL_INCR_TRANS**:  Full+Incremental migration. This allows to migrate data with minimal downtime. After a full
        migration initializes the destination database, an incremental migration parses logs to ensure data consistency
        between the source and destination databases.
        """
        return pulumi.get(self, "migration_type")

    @_builtins.property
    @pulumi.getter(name="multiWrite")
    def multi_write(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable multi write. It is mandatory when `type`
        is **cloudDataGuard**. When the disaster recovery type is dual-active disaster recovery, set `multi_write` to **true**,
        otherwise to **false**. The default value is **false**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "multi_write")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of database.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="netType")
    def net_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the network type.
        Changing this parameter will create a new resource. The default value is **eip**. The options are as follows:
        + **eip**: suitable for migration from an on-premises or other cloud database to a destination cloud database.
        An EIP will be automatically bound to the replication instance and released after the replication task is complete.
        + **vpc**: suitable for migration from one cloud database to another.
        + **vpn**: suitable for migration from an on-premises self-built database to a destination cloud database,
        or from one cloud database to another in a different region.
        """
        return pulumi.get(self, "net_type")

    @_builtins.property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the node flavor type. Valid values are **micro**, **small**,
        **medium**, **high**, **xlarge**, **2xlarge**. Default to **high**.
        """
        return pulumi.get(self, "node_type")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> pulumi.Output[_builtins.str]:
        """
        The order ID which will return if `charging_mode` is **prePaid**.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="originalJobDirection")
    def original_job_direction(self) -> pulumi.Output[_builtins.str]:
        """
        The original job direction.
        """
        return pulumi.get(self, "original_job_direction")

    @_builtins.property
    @pulumi.getter(name="pauseMode")
    def pause_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the stop type of job. It's valid when `action` is **stop**.
        Default value is **target**. The options are as follows:
        + **target**: Stop playback.
        + **all**: Stop log capture and playback.
        """
        return pulumi.get(self, "pause_mode")

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "period_unit")

    @_builtins.property
    @pulumi.getter(name="policyConfig")
    def policy_config(self) -> pulumi.Output[Optional['outputs.JobPolicyConfig']]:
        """
        Specifies the policy information used to configure migration and
        synchronization policies. The policy_config structure is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_config")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Private IP.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> pulumi.Output[_builtins.str]:
        """
        Progress.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies public IP.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpLists")
    def public_ip_lists(self) -> pulumi.Output[Optional[Sequence['outputs.JobPublicIpList']]]:
        """
        Specifies the public IP list.
        It can be specified when `net_type` is **eip**, and if it's not specified, DRS job will automatically bind a public IP.
        Changing this parameter will create a new resource.
        The public_ip_list structure is documented below.
        """
        return pulumi.get(self, "public_ip_lists")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region which the database belongs when it is a RDS database.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The security group ID to which the databese instance belongs.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="slaveAz")
    def slave_az(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the AZ where the standby task is located.
        Changing this parameter will create a new resource.

        > It takes effect when both `master_az` and `slave_az` are specified. Only MySQL and gaussdbv5ha-to-kafka scenarios
        are supported.
        """
        return pulumi.get(self, "slave_az")

    @_builtins.property
    @pulumi.getter(name="slaveJobId")
    def slave_job_id(self) -> pulumi.Output[_builtins.str]:
        """
        The slave job ID which will return if job is dual-AZ.
        """
        return pulumi.get(self, "slave_job_id")

    @_builtins.property
    @pulumi.getter(name="sourceDb")
    def source_db(self) -> pulumi.Output['outputs.JobSourceDb']:
        """
        Specifies the source database configuration.
        The db_info structure of the `source_db` is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_db")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the time to start speed limit, this time is UTC time. The start
        time is the whole hour, if there is a minute, it will be ignored, the format is **hh:mm**, and the hour number
        is two digits, for example: 01:00. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies subnet ID of database when it is a RDS database.
        It is mandatory when `direction` is **down**. Changing this parameter will create a new resource.

        > When `net_type` is **vpc**, if `direction` is **up**, `source_db.vpc_id` and `source_db.subnet_id` is mandatory, if
        `direction` is **down**, `destination_db.vpc_id` and `destination_db.subnet_id` is mandatory.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tables(self) -> pulumi.Output[Optional[Sequence['outputs.JobTable']]]:
        """
        Specifies the list of the tables which the job migrates or synchronizes. Means to transfer
        table level data. This parameter conflicts with `databases`.
        The tables structure is documented below.

        >   1. `databases` and `tables` will only take effect when `type` is **migration** or **sync**.
        <br/>2. When `type` is **migration**, they are not allowed to **update**, if they are empty, means to migrate all objects.
        <br/>3. When `type` is **sync**, exactly one data level of `databases` and `tables` must be specified. It's **not allowed**
        to transfer the data level to another. Only when `status` is **INCRE_TRANSFER_STARTED** or **INCRE_TRANSFER_FAILED**,
        **update** will take effect.
        <br/>4. It's only for synchronization from **MySQL** to **MySQL**, migration from **Redis** to **GeminiDB Redis**,
        migration from cluster **Redis** to **GeminiDB Redis**, and synchronization from **Oracle** to **GaussDB Distributed**.
        """
        return pulumi.get(self, "tables")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the DRS job.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of a task with an EIP bound.
        Valid values are **master** and **slave**.
        + In a primary/standby task, **master** indicates the primary task, and **slave** indicates the standby task.
        + In other cases, the value is fixed to **master**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Update time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies vpc ID of database.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

