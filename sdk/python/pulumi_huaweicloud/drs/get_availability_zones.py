# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetAvailabilityZonesResult',
    'AwaitableGetAvailabilityZonesResult',
    'get_availability_zones',
    'get_availability_zones_output',
]

@pulumi.output_type
class GetAvailabilityZonesResult:
    """
    A collection of values returned by getAvailabilityZones.
    """
    def __init__(__self__, direction=None, engine_type=None, id=None, multi_write=None, names=None, node_type=None, region=None, type=None):
        if direction and not isinstance(direction, str):
            raise TypeError("Expected argument 'direction' to be a str")
        pulumi.set(__self__, "direction", direction)
        if engine_type and not isinstance(engine_type, str):
            raise TypeError("Expected argument 'engine_type' to be a str")
        pulumi.set(__self__, "engine_type", engine_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if multi_write and not isinstance(multi_write, bool):
            raise TypeError("Expected argument 'multi_write' to be a bool")
        pulumi.set(__self__, "multi_write", multi_write)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if node_type and not isinstance(node_type, str):
            raise TypeError("Expected argument 'node_type' to be a str")
        pulumi.set(__self__, "node_type", node_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> _builtins.str:
        return pulumi.get(self, "engine_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="multiWrite")
    def multi_write(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "multi_write")

    @_builtins.property
    @pulumi.getter
    def names(self) -> Sequence[_builtins.str]:
        """
        The names of availability zone.
        """
        return pulumi.get(self, "names")

    @_builtins.property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> _builtins.str:
        return pulumi.get(self, "node_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetAvailabilityZonesResult(GetAvailabilityZonesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAvailabilityZonesResult(
            direction=self.direction,
            engine_type=self.engine_type,
            id=self.id,
            multi_write=self.multi_write,
            names=self.names,
            node_type=self.node_type,
            region=self.region,
            type=self.type)


def get_availability_zones(direction: Optional[_builtins.str] = None,
                           engine_type: Optional[_builtins.str] = None,
                           multi_write: Optional[_builtins.bool] = None,
                           node_type: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           type: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAvailabilityZonesResult:
    """
    Use this data source to query availability zones where DRS jobs can be created within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Drs.get_availability_zones(engine_type="mysql",
        type="migration",
        direction="up",
        node_type="high")
    ```


    :param _builtins.str direction: Specifies the direction of data flow.
           
           The options are as follows:
           + **up**: To the cloud. The destination database must be a database in the current cloud.
           + **down**: Out of the cloud. The source database must be a database in the current cloud.
           + **non-dbs**: Self-built database.
    :param _builtins.str engine_type: Specifies the DRS job engine type.
           Please refer to the document [Engine Types](https://support.huaweicloud.com/intl/en-us/api-drs/drs_api_0159.html).
    :param _builtins.bool multi_write: Specifies whether it is dual-AZ disaster recovery.
    :param _builtins.str node_type: Specifies the node type of the job instance.
           
           The options are as follows:
           + **micro**: extremely small specification.
           + **small**: small specification.
           + **medium**: medium specification.
           + **high**: large specification.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the job type.
           
           The options are as follows:
           + **migration**: Online Migration.
           + **sync**: Data Synchronization.
           + **cloudDataGuard**: Disaster Recovery.
    """
    __args__ = dict()
    __args__['direction'] = direction
    __args__['engineType'] = engine_type
    __args__['multiWrite'] = multi_write
    __args__['nodeType'] = node_type
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Drs/getAvailabilityZones:getAvailabilityZones', __args__, opts=opts, typ=GetAvailabilityZonesResult).value

    return AwaitableGetAvailabilityZonesResult(
        direction=pulumi.get(__ret__, 'direction'),
        engine_type=pulumi.get(__ret__, 'engine_type'),
        id=pulumi.get(__ret__, 'id'),
        multi_write=pulumi.get(__ret__, 'multi_write'),
        names=pulumi.get(__ret__, 'names'),
        node_type=pulumi.get(__ret__, 'node_type'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_availability_zones_output(direction: Optional[pulumi.Input[_builtins.str]] = None,
                                  engine_type: Optional[pulumi.Input[_builtins.str]] = None,
                                  multi_write: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                  node_type: Optional[pulumi.Input[_builtins.str]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  type: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAvailabilityZonesResult]:
    """
    Use this data source to query availability zones where DRS jobs can be created within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Drs.get_availability_zones(engine_type="mysql",
        type="migration",
        direction="up",
        node_type="high")
    ```


    :param _builtins.str direction: Specifies the direction of data flow.
           
           The options are as follows:
           + **up**: To the cloud. The destination database must be a database in the current cloud.
           + **down**: Out of the cloud. The source database must be a database in the current cloud.
           + **non-dbs**: Self-built database.
    :param _builtins.str engine_type: Specifies the DRS job engine type.
           Please refer to the document [Engine Types](https://support.huaweicloud.com/intl/en-us/api-drs/drs_api_0159.html).
    :param _builtins.bool multi_write: Specifies whether it is dual-AZ disaster recovery.
    :param _builtins.str node_type: Specifies the node type of the job instance.
           
           The options are as follows:
           + **micro**: extremely small specification.
           + **small**: small specification.
           + **medium**: medium specification.
           + **high**: large specification.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the job type.
           
           The options are as follows:
           + **migration**: Online Migration.
           + **sync**: Data Synchronization.
           + **cloudDataGuard**: Disaster Recovery.
    """
    __args__ = dict()
    __args__['direction'] = direction
    __args__['engineType'] = engine_type
    __args__['multiWrite'] = multi_write
    __args__['nodeType'] = node_type
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Drs/getAvailabilityZones:getAvailabilityZones', __args__, opts=opts, typ=GetAvailabilityZonesResult)
    return __ret__.apply(lambda __response__: GetAvailabilityZonesResult(
        direction=pulumi.get(__response__, 'direction'),
        engine_type=pulumi.get(__response__, 'engine_type'),
        id=pulumi.get(__response__, 'id'),
        multi_write=pulumi.get(__response__, 'multi_write'),
        names=pulumi.get(__response__, 'names'),
        node_type=pulumi.get(__response__, 'node_type'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))
