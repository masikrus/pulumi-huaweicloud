# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetVpcResult',
    'AwaitableGetVpcResult',
    'get_vpc',
    'get_vpc_output',
]

@pulumi.output_type
class GetVpcResult:
    """
    A collection of values returned by getVpc.
    """
    def __init__(__self__, cidr=None, id=None, mode=None, name=None, region=None, subnet_num=None):
        if cidr and not isinstance(cidr, str):
            raise TypeError("Expected argument 'cidr' to be a str")
        pulumi.set(__self__, "cidr", cidr)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if subnet_num and not isinstance(subnet_num, int):
            raise TypeError("Expected argument 'subnet_num' to be a int")
        pulumi.set(__self__, "subnet_num", subnet_num)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        Indicates the IP address range for the VPC.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Indicates the mode of the IEC VPC. Possible values are *SYSTEM* and *CUSTOMER*.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="subnetNum")
    def subnet_num(self) -> _builtins.int:
        """
        Indicates the number of subnets.
        """
        return pulumi.get(self, "subnet_num")


class AwaitableGetVpcResult(GetVpcResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpcResult(
            cidr=self.cidr,
            id=self.id,
            mode=self.mode,
            name=self.name,
            region=self.region,
            subnet_num=self.subnet_num)


def get_vpc(id: Optional[_builtins.str] = None,
            name: Optional[_builtins.str] = None,
            region: Optional[_builtins.str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVpcResult:
    """
    Use this data source to get the details of a specific IEC VPC.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    vpc_name = config.require_object("vpcName")
    my_vpc = huaweicloud.Iec.get_vpc(name=vpc_name)
    ```


    :param _builtins.str id: Specifies the ID of the IEC VPC to retrieve.
    :param _builtins.str name: Specifies the name of the IEC VPC. The name can contain a maximum of 64 characters. Only
           letters, digits, underscores (_), hyphens (-), and periods (.) are allowed.
    :param _builtins.str region: Specifies the region in which to obtain the vpc. If omitted, the provider-level region
           will be used.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Iec/getVpc:getVpc', __args__, opts=opts, typ=GetVpcResult).value

    return AwaitableGetVpcResult(
        cidr=pulumi.get(__ret__, 'cidr'),
        id=pulumi.get(__ret__, 'id'),
        mode=pulumi.get(__ret__, 'mode'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        subnet_num=pulumi.get(__ret__, 'subnet_num'))
def get_vpc_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVpcResult]:
    """
    Use this data source to get the details of a specific IEC VPC.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    vpc_name = config.require_object("vpcName")
    my_vpc = huaweicloud.Iec.get_vpc(name=vpc_name)
    ```


    :param _builtins.str id: Specifies the ID of the IEC VPC to retrieve.
    :param _builtins.str name: Specifies the name of the IEC VPC. The name can contain a maximum of 64 characters. Only
           letters, digits, underscores (_), hyphens (-), and periods (.) are allowed.
    :param _builtins.str region: Specifies the region in which to obtain the vpc. If omitted, the provider-level region
           will be used.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Iec/getVpc:getVpc', __args__, opts=opts, typ=GetVpcResult)
    return __ret__.apply(lambda __response__: GetVpcResult(
        cidr=pulumi.get(__response__, 'cidr'),
        id=pulumi.get(__response__, 'id'),
        mode=pulumi.get(__response__, 'mode'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        subnet_num=pulumi.get(__response__, 'subnet_num')))
