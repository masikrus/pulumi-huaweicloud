# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetFlavorsResult',
    'AwaitableGetFlavorsResult',
    'get_flavors',
    'get_flavors_output',
]

@pulumi.output_type
class GetFlavorsResult:
    """
    A collection of values returned by getFlavors.
    """
    def __init__(__self__, area=None, city=None, flavors=None, id=None, name=None, operator=None, province=None, region=None, site_ids=None):
        if area and not isinstance(area, str):
            raise TypeError("Expected argument 'area' to be a str")
        pulumi.set(__self__, "area", area)
        if city and not isinstance(city, str):
            raise TypeError("Expected argument 'city' to be a str")
        pulumi.set(__self__, "city", city)
        if flavors and not isinstance(flavors, list):
            raise TypeError("Expected argument 'flavors' to be a list")
        pulumi.set(__self__, "flavors", flavors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operator and not isinstance(operator, str):
            raise TypeError("Expected argument 'operator' to be a str")
        pulumi.set(__self__, "operator", operator)
        if province and not isinstance(province, str):
            raise TypeError("Expected argument 'province' to be a str")
        pulumi.set(__self__, "province", province)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if site_ids and not isinstance(site_ids, str):
            raise TypeError("Expected argument 'site_ids' to be a str")
        pulumi.set(__self__, "site_ids", site_ids)

    @_builtins.property
    @pulumi.getter
    def area(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "area")

    @_builtins.property
    @pulumi.getter
    def city(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetFlavorsFlavorResult']:
        """
        An array of one or more flavors. The flavors object structure is documented below.
        """
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the iec flavor.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def province(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "province")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="siteIds")
    def site_ids(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "site_ids")


class AwaitableGetFlavorsResult(GetFlavorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFlavorsResult(
            area=self.area,
            city=self.city,
            flavors=self.flavors,
            id=self.id,
            name=self.name,
            operator=self.operator,
            province=self.province,
            region=self.region,
            site_ids=self.site_ids)


def get_flavors(area: Optional[_builtins.str] = None,
                city: Optional[_builtins.str] = None,
                name: Optional[_builtins.str] = None,
                operator: Optional[_builtins.str] = None,
                province: Optional[_builtins.str] = None,
                region: Optional[_builtins.str] = None,
                site_ids: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFlavorsResult:
    """
    Use this data source to get the available of HuaweiCloud IEC flavors.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    flavor_name = config.get("flavorName")
    if flavor_name is None:
        flavor_name = "c6.large.2"
    iec_flavor_test = huaweicloud.Iec.get_flavors(name=flavor_name)
    ```


    :param _builtins.str area: Specifies the province of the iec instance located.
    :param _builtins.str city: Specifies the province of the iec instance located.
    :param _builtins.str name: Specifies the flavor name, which can be queried with a regular expression.
    :param _builtins.str operator: Specifies the operator supported of the iec instance.
    :param _builtins.str province: Specifies the province of the iec instance located.
    :param _builtins.str region: The region in which to obtain the flavors. If omitted, the provider-level region will be
           used.
    :param _builtins.str site_ids: Specifies the list of edge service site.
    """
    __args__ = dict()
    __args__['area'] = area
    __args__['city'] = city
    __args__['name'] = name
    __args__['operator'] = operator
    __args__['province'] = province
    __args__['region'] = region
    __args__['siteIds'] = site_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Iec/getFlavors:getFlavors', __args__, opts=opts, typ=GetFlavorsResult).value

    return AwaitableGetFlavorsResult(
        area=pulumi.get(__ret__, 'area'),
        city=pulumi.get(__ret__, 'city'),
        flavors=pulumi.get(__ret__, 'flavors'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        operator=pulumi.get(__ret__, 'operator'),
        province=pulumi.get(__ret__, 'province'),
        region=pulumi.get(__ret__, 'region'),
        site_ids=pulumi.get(__ret__, 'site_ids'))
def get_flavors_output(area: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       city: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       operator: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       province: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       site_ids: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFlavorsResult]:
    """
    Use this data source to get the available of HuaweiCloud IEC flavors.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    flavor_name = config.get("flavorName")
    if flavor_name is None:
        flavor_name = "c6.large.2"
    iec_flavor_test = huaweicloud.Iec.get_flavors(name=flavor_name)
    ```


    :param _builtins.str area: Specifies the province of the iec instance located.
    :param _builtins.str city: Specifies the province of the iec instance located.
    :param _builtins.str name: Specifies the flavor name, which can be queried with a regular expression.
    :param _builtins.str operator: Specifies the operator supported of the iec instance.
    :param _builtins.str province: Specifies the province of the iec instance located.
    :param _builtins.str region: The region in which to obtain the flavors. If omitted, the provider-level region will be
           used.
    :param _builtins.str site_ids: Specifies the list of edge service site.
    """
    __args__ = dict()
    __args__['area'] = area
    __args__['city'] = city
    __args__['name'] = name
    __args__['operator'] = operator
    __args__['province'] = province
    __args__['region'] = region
    __args__['siteIds'] = site_ids
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Iec/getFlavors:getFlavors', __args__, opts=opts, typ=GetFlavorsResult)
    return __ret__.apply(lambda __response__: GetFlavorsResult(
        area=pulumi.get(__response__, 'area'),
        city=pulumi.get(__response__, 'city'),
        flavors=pulumi.get(__response__, 'flavors'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        operator=pulumi.get(__response__, 'operator'),
        province=pulumi.get(__response__, 'province'),
        region=pulumi.get(__response__, 'region'),
        site_ids=pulumi.get(__response__, 'site_ids')))
