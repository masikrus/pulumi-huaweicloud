# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetPortResult',
    'AwaitableGetPortResult',
    'get_port',
    'get_port_output',
]

@pulumi.output_type
class GetPortResult:
    """
    A collection of values returned by getPort.
    """
    def __init__(__self__, fixed_ip=None, id=None, mac_address=None, region=None, security_groups=None, site_id=None, status=None, subnet_id=None):
        if fixed_ip and not isinstance(fixed_ip, str):
            raise TypeError("Expected argument 'fixed_ip' to be a str")
        pulumi.set(__self__, "fixed_ip", fixed_ip)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mac_address and not isinstance(mac_address, str):
            raise TypeError("Expected argument 'mac_address' to be a str")
        pulumi.set(__self__, "mac_address", mac_address)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if site_id and not isinstance(site_id, str):
            raise TypeError("Expected argument 'site_id' to be a str")
        pulumi.set(__self__, "site_id", site_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="fixedIp")
    def fixed_ip(self) -> _builtins.str:
        return pulumi.get(self, "fixed_ip")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies a data source ID in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of security group IDs applied on the port.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.str:
        """
        Indicates the ID of the IEC site.
        """
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the status of the port.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "subnet_id")


class AwaitableGetPortResult(GetPortResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPortResult(
            fixed_ip=self.fixed_ip,
            id=self.id,
            mac_address=self.mac_address,
            region=self.region,
            security_groups=self.security_groups,
            site_id=self.site_id,
            status=self.status,
            subnet_id=self.subnet_id)


def get_port(fixed_ip: Optional[_builtins.str] = None,
             id: Optional[_builtins.str] = None,
             mac_address: Optional[_builtins.str] = None,
             region: Optional[_builtins.str] = None,
             subnet_id: Optional[_builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPortResult:
    """
    Use this data source to get the details of a specific IEC subnet port.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    subnet_id = config.require_object("subnetId")
    port1 = huaweicloud.Iec.get_port(subnet_id=subnet_id,
        fixed_ip="192.168.1.123")
    ```


    :param _builtins.str fixed_ip: The IP address of the port.
    :param _builtins.str id: The ID of the port.
    :param _builtins.str mac_address: The MAC address of the port.
    :param _builtins.str region: The region in which to obtain the port. If omitted, the provider-level region will be
           used.
    :param _builtins.str subnet_id: The ID of the subnet which the port belongs to.
    """
    __args__ = dict()
    __args__['fixedIp'] = fixed_ip
    __args__['id'] = id
    __args__['macAddress'] = mac_address
    __args__['region'] = region
    __args__['subnetId'] = subnet_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Iec/getPort:getPort', __args__, opts=opts, typ=GetPortResult).value

    return AwaitableGetPortResult(
        fixed_ip=pulumi.get(__ret__, 'fixed_ip'),
        id=pulumi.get(__ret__, 'id'),
        mac_address=pulumi.get(__ret__, 'mac_address'),
        region=pulumi.get(__ret__, 'region'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        site_id=pulumi.get(__ret__, 'site_id'),
        status=pulumi.get(__ret__, 'status'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'))
def get_port_output(fixed_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    mac_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    subnet_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPortResult]:
    """
    Use this data source to get the details of a specific IEC subnet port.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    subnet_id = config.require_object("subnetId")
    port1 = huaweicloud.Iec.get_port(subnet_id=subnet_id,
        fixed_ip="192.168.1.123")
    ```


    :param _builtins.str fixed_ip: The IP address of the port.
    :param _builtins.str id: The ID of the port.
    :param _builtins.str mac_address: The MAC address of the port.
    :param _builtins.str region: The region in which to obtain the port. If omitted, the provider-level region will be
           used.
    :param _builtins.str subnet_id: The ID of the subnet which the port belongs to.
    """
    __args__ = dict()
    __args__['fixedIp'] = fixed_ip
    __args__['id'] = id
    __args__['macAddress'] = mac_address
    __args__['region'] = region
    __args__['subnetId'] = subnet_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Iec/getPort:getPort', __args__, opts=opts, typ=GetPortResult)
    return __ret__.apply(lambda __response__: GetPortResult(
        fixed_ip=pulumi.get(__response__, 'fixed_ip'),
        id=pulumi.get(__response__, 'id'),
        mac_address=pulumi.get(__response__, 'mac_address'),
        region=pulumi.get(__response__, 'region'),
        security_groups=pulumi.get(__response__, 'security_groups'),
        site_id=pulumi.get(__response__, 'site_id'),
        status=pulumi.get(__response__, 'status'),
        subnet_id=pulumi.get(__response__, 'subnet_id')))
