# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'NetworkAclNetwork',
    'SecurityGroupSecurityGroupRule',
    'ServerCoverageSite',
    'ServerDataDisk',
    'ServerNic',
    'ServerVolumeAttached',
    'GetBandwidthsBandwidthResult',
    'GetEipsEipResult',
    'GetFlavorsFlavorResult',
    'GetImagesImageResult',
    'GetNetwork_aclNetworkResult',
    'GetSecurityGroupSecurityGroupRuleResult',
    'GetServerCoverageSiteResult',
    'GetServerNicResult',
    'GetServerVolumeAttachedResult',
    'GetSitesSiteResult',
    'GetSitesSiteLineResult',
    'GetVpcSubnetsSubnetResult',
]

@pulumi.output_type
class NetworkAclNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkAclNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkAclNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkAclNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str subnet_id: Specifies the id of the iec subnet.
        :param _builtins.str vpc_id: Specifies the id of the iec vpc.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the id of the iec subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the id of the iec vpc.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class SecurityGroupSecurityGroupRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRangeMax":
            suggest = "port_range_max"
        elif key == "portRangeMin":
            suggest = "port_range_min"
        elif key == "remoteGroupId":
            suggest = "remote_group_id"
        elif key == "remoteIpPrefix":
            suggest = "remote_ip_prefix"
        elif key == "securityGroupId":
            suggest = "security_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityGroupSecurityGroupRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityGroupSecurityGroupRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityGroupSecurityGroupRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 ethertype: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 port_range_max: Optional[_builtins.int] = None,
                 port_range_min: Optional[_builtins.int] = None,
                 protocol: Optional[_builtins.str] = None,
                 remote_group_id: Optional[_builtins.str] = None,
                 remote_ip_prefix: Optional[_builtins.str] = None,
                 security_group_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the description of the iec security group. description must be
               0 to 64 characters in length, and does not contain angle brackets (<) and (>). Changing this parameter will creates a
               new iec security group resource.
        :param _builtins.str direction: The direction of the iec security group rules.
        :param _builtins.str ethertype: The layer 3 protocol type.
        :param _builtins.str id: The id of the iec security group rules.
        :param _builtins.int port_range_max: The higher part of the allowed port range.
        :param _builtins.int port_range_min: The lower part of the allowed port range.
        :param _builtins.str protocol: The layer 4 protocol type.
        :param _builtins.str remote_group_id: The remote group id of the iec security group rules.
        :param _builtins.str remote_ip_prefix: The remote CIDR of the iec security group rules.
        :param _builtins.str security_group_id: The id of the iec security group rules.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if ethertype is not None:
            pulumi.set(__self__, "ethertype", ethertype)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_range_max is not None:
            pulumi.set(__self__, "port_range_max", port_range_max)
        if port_range_min is not None:
            pulumi.set(__self__, "port_range_min", port_range_min)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if remote_group_id is not None:
            pulumi.set(__self__, "remote_group_id", remote_group_id)
        if remote_ip_prefix is not None:
            pulumi.set(__self__, "remote_ip_prefix", remote_ip_prefix)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the iec security group. description must be
        0 to 64 characters in length, and does not contain angle brackets (<) and (>). Changing this parameter will creates a
        new iec security group resource.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        The direction of the iec security group rules.
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def ethertype(self) -> Optional[_builtins.str]:
        """
        The layer 3 protocol type.
        """
        return pulumi.get(self, "ethertype")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The id of the iec security group rules.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> Optional[_builtins.int]:
        """
        The higher part of the allowed port range.
        """
        return pulumi.get(self, "port_range_max")

    @_builtins.property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> Optional[_builtins.int]:
        """
        The lower part of the allowed port range.
        """
        return pulumi.get(self, "port_range_min")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        The layer 4 protocol type.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="remoteGroupId")
    def remote_group_id(self) -> Optional[_builtins.str]:
        """
        The remote group id of the iec security group rules.
        """
        return pulumi.get(self, "remote_group_id")

    @_builtins.property
    @pulumi.getter(name="remoteIpPrefix")
    def remote_ip_prefix(self) -> Optional[_builtins.str]:
        """
        The remote CIDR of the iec security group rules.
        """
        return pulumi.get(self, "remote_ip_prefix")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[_builtins.str]:
        """
        The id of the iec security group rules.
        """
        return pulumi.get(self, "security_group_id")


@pulumi.output_type
class ServerCoverageSite(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "siteId":
            suggest = "site_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerCoverageSite. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerCoverageSite.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerCoverageSite.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: _builtins.str,
                 site_id: _builtins.str):
        """
        :param _builtins.str operator: Specifies the operator of the IEC site.
        :param _builtins.str site_id: Specifies the ID of IEC site.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "site_id", site_id)

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        Specifies the operator of the IEC site.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.str:
        """
        Specifies the ID of IEC site.
        """
        return pulumi.get(self, "site_id")


@pulumi.output_type
class ServerDataDisk(dict):
    def __init__(__self__, *,
                 size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int size: Specifies the size of data disk for the IEC server binding. The value range is
               10 to 500 in GB. Changing this parameter creates a new IEC server resource.
        :param _builtins.str type: Specifies the type of data disk for the IEC server binding. Valid value is
               *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the size of data disk for the IEC server binding. The value range is
        10 to 500 in GB. Changing this parameter creates a new IEC server resource.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of data disk for the IEC server binding. Valid value is
        *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServerNic(dict):
    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 mac: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: The IPv4 address of the server on that network.
        :param _builtins.str mac: The MAC address of the NIC on that network.
        :param _builtins.str port: The port ID corresponding to the IP address on that network.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        The IPv4 address of the server on that network.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def mac(self) -> Optional[_builtins.str]:
        """
        The MAC address of the NIC on that network.
        """
        return pulumi.get(self, "mac")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        The port ID corresponding to the IP address on that network.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ServerVolumeAttached(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootIndex":
            suggest = "boot_index"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerVolumeAttached. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerVolumeAttached.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerVolumeAttached.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_index: Optional[_builtins.str] = None,
                 device: Optional[_builtins.str] = None,
                 size: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None,
                 volume_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str boot_index: The volume boot index on that attachment.
        :param _builtins.str device: The device name in the IEC server.
        :param _builtins.int size: The volume size on that attachment.
        :param _builtins.str type: The volume type on that attachment.
        :param _builtins.str volume_id: The volume ID on that attachment.
        """
        if boot_index is not None:
            pulumi.set(__self__, "boot_index", boot_index)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="bootIndex")
    def boot_index(self) -> Optional[_builtins.str]:
        """
        The volume boot index on that attachment.
        """
        return pulumi.get(self, "boot_index")

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[_builtins.str]:
        """
        The device name in the IEC server.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        """
        The volume size on that attachment.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The volume type on that attachment.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[_builtins.str]:
        """
        The volume ID on that attachment.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetBandwidthsBandwidthResult(dict):
    def __init__(__self__, *,
                 charge_mode: _builtins.str,
                 id: _builtins.str,
                 line: _builtins.str,
                 name: _builtins.str,
                 share_type: _builtins.str,
                 size: _builtins.int,
                 status: _builtins.str):
        """
        :param _builtins.str charge_mode: The charging mode of the bandwidth.
        :param _builtins.str id: The ID of the bandwidth.
        :param _builtins.str line: The line name of the bandwidth.
        :param _builtins.str name: The name of the bandwidth.
        :param _builtins.str share_type: Whether the bandwidth is shared or exclusive.
        :param _builtins.int size: The size of the bandwidth.
        :param _builtins.str status: The status of the bandwidth.
        """
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "line", line)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "share_type", share_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        The charging mode of the bandwidth.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the bandwidth.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def line(self) -> _builtins.str:
        """
        The line name of the bandwidth.
        """
        return pulumi.get(self, "line")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the bandwidth.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="shareType")
    def share_type(self) -> _builtins.str:
        """
        Whether the bandwidth is shared or exclusive.
        """
        return pulumi.get(self, "share_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the bandwidth.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the bandwidth.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetEipsEipResult(dict):
    def __init__(__self__, *,
                 bandwidth_id: _builtins.str,
                 bandwidth_name: _builtins.str,
                 bandwidth_share_type: _builtins.str,
                 bandwidth_size: _builtins.int,
                 id: _builtins.str,
                 ip_version: _builtins.int,
                 port_id: _builtins.str,
                 private_ip: _builtins.str,
                 public_ip: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str bandwidth_id: The ID of bandwidth.
        :param _builtins.str bandwidth_name: The name of bandwidth.
        :param _builtins.str bandwidth_share_type: Whether the bandwidth is shared or exclusive.
        :param _builtins.int bandwidth_size: The size of bandwidth.
        :param _builtins.str id: The ID of elastic IP.
        :param _builtins.int ip_version: The version of elastic IP address.
        :param _builtins.str port_id: Specifies the ID of the port.
        :param _builtins.str private_ip: The address of private IP.
        :param _builtins.str public_ip: The address of elastic IP.
        :param _builtins.str status: The status elastic IP.
        """
        pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        pulumi.set(__self__, "bandwidth_share_type", bandwidth_share_type)
        pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> _builtins.str:
        """
        The ID of bandwidth.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> _builtins.str:
        """
        The name of bandwidth.
        """
        return pulumi.get(self, "bandwidth_name")

    @_builtins.property
    @pulumi.getter(name="bandwidthShareType")
    def bandwidth_share_type(self) -> _builtins.str:
        """
        Whether the bandwidth is shared or exclusive.
        """
        return pulumi.get(self, "bandwidth_share_type")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> _builtins.int:
        """
        The size of bandwidth.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of elastic IP.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        The version of elastic IP address.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> _builtins.str:
        """
        Specifies the ID of the port.
        """
        return pulumi.get(self, "port_id")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The address of private IP.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The address of elastic IP.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status elastic IP.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 memory: _builtins.int,
                 name: _builtins.str,
                 vcpus: _builtins.int):
        """
        :param _builtins.str id: The id of the iec flavor.
        :param _builtins.int memory: The memory of the iec flavor.
        :param _builtins.str name: Specifies the flavor name, which can be queried with a regular expression.
        :param _builtins.int vcpus: The vcpus of the iec flavor.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the iec flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        """
        The memory of the iec flavor.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the flavor name, which can be queried with a regular expression.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        The vcpus of the iec flavor.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetImagesImageResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 os_type: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str id: The id of the iec images.
        :param _builtins.str name: Specifies the image Name, which can be queried with a regular expression.
        :param _builtins.str os_type: Specifies the os type of the iec image.
               "Linux", "Windows" and "Other" are supported.
        :param _builtins.str status: The status of the iec images.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the iec images.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the image Name, which can be queried with a regular expression.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Specifies the os type of the iec image.
        "Linux", "Windows" and "Other" are supported.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the iec images.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNetwork_aclNetworkResult(dict):
    def __init__(__self__, *,
                 subnet_id: _builtins.str,
                 vpc_id: _builtins.str):
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetSecurityGroupSecurityGroupRuleResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 direction: _builtins.str,
                 ethertype: _builtins.str,
                 id: _builtins.str,
                 port_range_max: _builtins.int,
                 port_range_min: _builtins.int,
                 protocol: _builtins.str,
                 remote_group_id: _builtins.str,
                 remote_ip_prefix: _builtins.str,
                 security_group_id: _builtins.str):
        """
        :param _builtins.str description: The description for the IEC security group rules.
        :param _builtins.str direction: The direction of the IEC security group rules.
        :param _builtins.str ethertype: The layer 3 protocol type.
        :param _builtins.str id: The ID of the IEC security group rules.
        :param _builtins.int port_range_max: The higher part of the allowed port range.
        :param _builtins.int port_range_min: The lower part of the allowed port range.
        :param _builtins.str protocol: The layer 4 protocol type.
        :param _builtins.str remote_group_id: The remote group id of the IEC security group rules.
        :param _builtins.str remote_ip_prefix: The remote CIDR of the IEC security group rules.
        :param _builtins.str security_group_id: The id of the IEC security group rules.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "ethertype", ethertype)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "port_range_max", port_range_max)
        pulumi.set(__self__, "port_range_min", port_range_min)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "remote_group_id", remote_group_id)
        pulumi.set(__self__, "remote_ip_prefix", remote_ip_prefix)
        pulumi.set(__self__, "security_group_id", security_group_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description for the IEC security group rules.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        The direction of the IEC security group rules.
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def ethertype(self) -> _builtins.str:
        """
        The layer 3 protocol type.
        """
        return pulumi.get(self, "ethertype")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the IEC security group rules.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> _builtins.int:
        """
        The higher part of the allowed port range.
        """
        return pulumi.get(self, "port_range_max")

    @_builtins.property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> _builtins.int:
        """
        The lower part of the allowed port range.
        """
        return pulumi.get(self, "port_range_min")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The layer 4 protocol type.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="remoteGroupId")
    def remote_group_id(self) -> _builtins.str:
        """
        The remote group id of the IEC security group rules.
        """
        return pulumi.get(self, "remote_group_id")

    @_builtins.property
    @pulumi.getter(name="remoteIpPrefix")
    def remote_ip_prefix(self) -> _builtins.str:
        """
        The remote CIDR of the IEC security group rules.
        """
        return pulumi.get(self, "remote_ip_prefix")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The id of the IEC security group rules.
        """
        return pulumi.get(self, "security_group_id")


@pulumi.output_type
class GetServerCoverageSiteResult(dict):
    def __init__(__self__, *,
                 operator: _builtins.str,
                 site_id: _builtins.str,
                 site_info: _builtins.str):
        """
        :param _builtins.str operator: The operator of the IEC site.
        :param _builtins.str site_id: The ID of IEC site.
        :param _builtins.str site_info: The located information of the IEC site. It contains area, province and city.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "site_info", site_info)

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        The operator of the IEC site.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.str:
        """
        The ID of IEC site.
        """
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter(name="siteInfo")
    def site_info(self) -> _builtins.str:
        """
        The located information of the IEC site. It contains area, province and city.
        """
        return pulumi.get(self, "site_info")


@pulumi.output_type
class GetServerNicResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 mac: _builtins.str,
                 port: _builtins.str):
        """
        :param _builtins.str address: The IPv4 address of the server on that network.
        :param _builtins.str mac: The MAC address of the NIC on that network.
        :param _builtins.str port: The port ID corresponding to the IP address on that network.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        The IPv4 address of the server on that network.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def mac(self) -> _builtins.str:
        """
        The MAC address of the NIC on that network.
        """
        return pulumi.get(self, "mac")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        The port ID corresponding to the IP address on that network.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetServerVolumeAttachedResult(dict):
    def __init__(__self__, *,
                 boot_index: _builtins.str,
                 device: _builtins.str,
                 size: _builtins.int,
                 type: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str boot_index: The volume boot index on that attachment.
        :param _builtins.str device: The device name in the IEC server.
        :param _builtins.int size: The volume size on that attachment.
        :param _builtins.str type: The volume type on that attachment.
        :param _builtins.str volume_id: The volume ID on that attachment.
        """
        pulumi.set(__self__, "boot_index", boot_index)
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="bootIndex")
    def boot_index(self) -> _builtins.str:
        """
        The volume boot index on that attachment.
        """
        return pulumi.get(self, "boot_index")

    @_builtins.property
    @pulumi.getter
    def device(self) -> _builtins.str:
        """
        The device name in the IEC server.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The volume size on that attachment.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The volume type on that attachment.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The volume ID on that attachment.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetSitesSiteResult(dict):
    def __init__(__self__, *,
                 area: _builtins.str,
                 city: _builtins.str,
                 id: _builtins.str,
                 lines: Sequence['outputs.GetSitesSiteLineResult'],
                 name: _builtins.str,
                 province: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str area: Specifies the area of the IEC sites located.
        :param _builtins.str city: Specifies the city of the IEC sites located.
        :param _builtins.str id: The ID of the EIP line.
        :param Sequence['GetSitesSiteLineArgs'] lines: An array of one or more EIP lines. The object structure is documented below.
        :param _builtins.str name: The name of the EIP line.
        :param _builtins.str province: Specifies the province of the IEC sites located.
        :param _builtins.str status: The status of the IEC service site.
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lines", lines)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "province", province)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def area(self) -> _builtins.str:
        """
        Specifies the area of the IEC sites located.
        """
        return pulumi.get(self, "area")

    @_builtins.property
    @pulumi.getter
    def city(self) -> _builtins.str:
        """
        Specifies the city of the IEC sites located.
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the EIP line.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lines(self) -> Sequence['outputs.GetSitesSiteLineResult']:
        """
        An array of one or more EIP lines. The object structure is documented below.
        """
        return pulumi.get(self, "lines")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the EIP line.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def province(self) -> _builtins.str:
        """
        Specifies the province of the IEC sites located.
        """
        return pulumi.get(self, "province")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the IEC service site.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSitesSiteLineResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 ip_version: _builtins.str,
                 name: _builtins.str,
                 operator: _builtins.str):
        """
        :param _builtins.str id: The ID of the EIP line.
        :param _builtins.str ip_version: The supported IP version.
        :param _builtins.str name: The name of the EIP line.
        :param _builtins.str operator: The operator information of the EIP line.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operator", operator)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the EIP line.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        """
        The supported IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the EIP line.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        The operator information of the EIP line.
        """
        return pulumi.get(self, "operator")


@pulumi.output_type
class GetVpcSubnetsSubnetResult(dict):
    def __init__(__self__, *,
                 cidr: _builtins.str,
                 dns_lists: Sequence[_builtins.str],
                 gateway_ip: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 site_id: _builtins.str,
                 site_info: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str cidr: Indicates the cidr block of the subnet.
        :param Sequence[_builtins.str] dns_lists: Indicates the DNS server address list of the subnet.
        :param _builtins.str gateway_ip: Indicates the gateway of the subnet.
        :param _builtins.str id: Indicates the ID of the subnet.
        :param _builtins.str name: Indicates the name of the subnet.
        :param _builtins.str site_id: Specifies the ID of the IEC site.
        :param _builtins.str site_info: Indicates the located information of the iec site. It contains area, province and city.
        :param _builtins.str status: Indicates the status of the subnet.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "dns_lists", dns_lists)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "site_info", site_info)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        Indicates the cidr block of the subnet.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="dnsLists")
    def dns_lists(self) -> Sequence[_builtins.str]:
        """
        Indicates the DNS server address list of the subnet.
        """
        return pulumi.get(self, "dns_lists")

    @_builtins.property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> _builtins.str:
        """
        Indicates the gateway of the subnet.
        """
        return pulumi.get(self, "gateway_ip")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the subnet.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of the subnet.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.str:
        """
        Specifies the ID of the IEC site.
        """
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter(name="siteInfo")
    def site_info(self) -> _builtins.str:
        """
        Indicates the located information of the iec site. It contains area, province and city.
        """
        return pulumi.get(self, "site_info")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the status of the subnet.
        """
        return pulumi.get(self, "status")


