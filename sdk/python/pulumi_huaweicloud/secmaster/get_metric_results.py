# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMetricResultsResult',
    'AwaitableGetMetricResultsResult',
    'get_metric_results',
    'get_metric_results_output',
]

@pulumi.output_type
class GetMetricResultsResult:
    """
    A collection of values returned by getMetricResults.
    """
    def __init__(__self__, cache=None, field_ids=None, id=None, interactive_params=None, metric_ids=None, metric_results=None, params=None, region=None, timespan=None, workspace_id=None):
        if cache and not isinstance(cache, str):
            raise TypeError("Expected argument 'cache' to be a str")
        pulumi.set(__self__, "cache", cache)
        if field_ids and not isinstance(field_ids, list):
            raise TypeError("Expected argument 'field_ids' to be a list")
        pulumi.set(__self__, "field_ids", field_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interactive_params and not isinstance(interactive_params, list):
            raise TypeError("Expected argument 'interactive_params' to be a list")
        pulumi.set(__self__, "interactive_params", interactive_params)
        if metric_ids and not isinstance(metric_ids, list):
            raise TypeError("Expected argument 'metric_ids' to be a list")
        pulumi.set(__self__, "metric_ids", metric_ids)
        if metric_results and not isinstance(metric_results, list):
            raise TypeError("Expected argument 'metric_results' to be a list")
        pulumi.set(__self__, "metric_results", metric_results)
        if params and not isinstance(params, list):
            raise TypeError("Expected argument 'params' to be a list")
        pulumi.set(__self__, "params", params)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if timespan and not isinstance(timespan, str):
            raise TypeError("Expected argument 'timespan' to be a str")
        pulumi.set(__self__, "timespan", timespan)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def cache(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cache")

    @_builtins.property
    @pulumi.getter(name="fieldIds")
    def field_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "field_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interactiveParams")
    def interactive_params(self) -> Optional[Sequence[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "interactive_params")

    @_builtins.property
    @pulumi.getter(name="metricIds")
    def metric_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "metric_ids")

    @_builtins.property
    @pulumi.getter(name="metricResults")
    def metric_results(self) -> Sequence['outputs.GetMetricResultsMetricResultResult']:
        """
        The metric results.
        The metric_results structure is documented below.
        """
        return pulumi.get(self, "metric_results")

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[Sequence[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def timespan(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "timespan")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetMetricResultsResult(GetMetricResultsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetricResultsResult(
            cache=self.cache,
            field_ids=self.field_ids,
            id=self.id,
            interactive_params=self.interactive_params,
            metric_ids=self.metric_ids,
            metric_results=self.metric_results,
            params=self.params,
            region=self.region,
            timespan=self.timespan,
            workspace_id=self.workspace_id)


def get_metric_results(cache: Optional[_builtins.str] = None,
                       field_ids: Optional[Sequence[_builtins.str]] = None,
                       interactive_params: Optional[Sequence[Mapping[str, _builtins.str]]] = None,
                       metric_ids: Optional[Sequence[_builtins.str]] = None,
                       params: Optional[Sequence[Mapping[str, _builtins.str]]] = None,
                       region: Optional[_builtins.str] = None,
                       timespan: Optional[_builtins.str] = None,
                       workspace_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetricResultsResult:
    """
    Use this data source to get the list of SecMaster metric results.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    metric_ids = config.require_object("metricIds")
    test = huaweicloud.secmaster.get_metric_results(workspace_id=workspace_id,
        metric_ids=metric_ids)
    ```


    :param _builtins.str cache: Specifies whether the cache is enabled.
    :param Sequence[_builtins.str] field_ids: Specifies the indicator card IDs.
    :param Sequence[Mapping[str, _builtins.str]] interactive_params: Specifies the interactive parameters.
           For details, see [About Metrics](https://support.huaweicloud.com/intl/en-us/api-secmaster/secmaster_03_0028.html)
    :param Sequence[_builtins.str] metric_ids: Specifies the metrics IDs.
    :param Sequence[Mapping[str, _builtins.str]] params: Specifies the parameter list of the metric.
           The number of elements must be the same as that of the metric_ids list.
           For details, see [About Metrics](https://support.huaweicloud.com/intl/en-us/api-secmaster/secmaster_03_0028.html)
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str timespan: Specifies the time range for querying metrics.
           The format is ISO8601, for example, **2007-03-01T13:00:00Z/2008-05-11T15:30:00Z**,
           **2007-03-01T13:00:00Z/P1Y2M10DT2H30M**, or **P1Y2M10DT2H30M/2008-05-11T15:30:00Z**.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['cache'] = cache
    __args__['fieldIds'] = field_ids
    __args__['interactiveParams'] = interactive_params
    __args__['metricIds'] = metric_ids
    __args__['params'] = params
    __args__['region'] = region
    __args__['timespan'] = timespan
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getMetricResults:getMetricResults', __args__, opts=opts, typ=GetMetricResultsResult).value

    return AwaitableGetMetricResultsResult(
        cache=pulumi.get(__ret__, 'cache'),
        field_ids=pulumi.get(__ret__, 'field_ids'),
        id=pulumi.get(__ret__, 'id'),
        interactive_params=pulumi.get(__ret__, 'interactive_params'),
        metric_ids=pulumi.get(__ret__, 'metric_ids'),
        metric_results=pulumi.get(__ret__, 'metric_results'),
        params=pulumi.get(__ret__, 'params'),
        region=pulumi.get(__ret__, 'region'),
        timespan=pulumi.get(__ret__, 'timespan'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_metric_results_output(cache: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              field_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                              interactive_params: Optional[pulumi.Input[Optional[Sequence[Mapping[str, _builtins.str]]]]] = None,
                              metric_ids: Optional[pulumi.Input[Sequence[_builtins.str]]] = None,
                              params: Optional[pulumi.Input[Optional[Sequence[Mapping[str, _builtins.str]]]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              timespan: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMetricResultsResult]:
    """
    Use this data source to get the list of SecMaster metric results.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    metric_ids = config.require_object("metricIds")
    test = huaweicloud.secmaster.get_metric_results(workspace_id=workspace_id,
        metric_ids=metric_ids)
    ```


    :param _builtins.str cache: Specifies whether the cache is enabled.
    :param Sequence[_builtins.str] field_ids: Specifies the indicator card IDs.
    :param Sequence[Mapping[str, _builtins.str]] interactive_params: Specifies the interactive parameters.
           For details, see [About Metrics](https://support.huaweicloud.com/intl/en-us/api-secmaster/secmaster_03_0028.html)
    :param Sequence[_builtins.str] metric_ids: Specifies the metrics IDs.
    :param Sequence[Mapping[str, _builtins.str]] params: Specifies the parameter list of the metric.
           The number of elements must be the same as that of the metric_ids list.
           For details, see [About Metrics](https://support.huaweicloud.com/intl/en-us/api-secmaster/secmaster_03_0028.html)
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str timespan: Specifies the time range for querying metrics.
           The format is ISO8601, for example, **2007-03-01T13:00:00Z/2008-05-11T15:30:00Z**,
           **2007-03-01T13:00:00Z/P1Y2M10DT2H30M**, or **P1Y2M10DT2H30M/2008-05-11T15:30:00Z**.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['cache'] = cache
    __args__['fieldIds'] = field_ids
    __args__['interactiveParams'] = interactive_params
    __args__['metricIds'] = metric_ids
    __args__['params'] = params
    __args__['region'] = region
    __args__['timespan'] = timespan
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getMetricResults:getMetricResults', __args__, opts=opts, typ=GetMetricResultsResult)
    return __ret__.apply(lambda __response__: GetMetricResultsResult(
        cache=pulumi.get(__response__, 'cache'),
        field_ids=pulumi.get(__response__, 'field_ids'),
        id=pulumi.get(__response__, 'id'),
        interactive_params=pulumi.get(__response__, 'interactive_params'),
        metric_ids=pulumi.get(__response__, 'metric_ids'),
        metric_results=pulumi.get(__response__, 'metric_results'),
        params=pulumi.get(__response__, 'params'),
        region=pulumi.get(__response__, 'region'),
        timespan=pulumi.get(__response__, 'timespan'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
