# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSecurityReportsResult',
    'AwaitableGetSecurityReportsResult',
    'get_security_reports',
    'get_security_reports_output',
]

@pulumi.output_type
class GetSecurityReportsResult:
    """
    A collection of values returned by getSecurityReports.
    """
    def __init__(__self__, id=None, region=None, report_period=None, reports=None, status=None, workspace_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if report_period and not isinstance(report_period, str):
            raise TypeError("Expected argument 'report_period' to be a str")
        pulumi.set(__self__, "report_period", report_period)
        if reports and not isinstance(reports, list):
            raise TypeError("Expected argument 'reports' to be a list")
        pulumi.set(__self__, "reports", reports)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="reportPeriod")
    def report_period(self) -> _builtins.str:
        """
        The report period.
        """
        return pulumi.get(self, "report_period")

    @_builtins.property
    @pulumi.getter
    def reports(self) -> Sequence['outputs.GetSecurityReportsReportResult']:
        """
        The list of report details.
        """
        return pulumi.get(self, "reports")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The report status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        The workspace ID.
        """
        return pulumi.get(self, "workspace_id")


class AwaitableGetSecurityReportsResult(GetSecurityReportsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityReportsResult(
            id=self.id,
            region=self.region,
            report_period=self.report_period,
            reports=self.reports,
            status=self.status,
            workspace_id=self.workspace_id)


def get_security_reports(region: Optional[_builtins.str] = None,
                         report_period: Optional[_builtins.str] = None,
                         status: Optional[_builtins.str] = None,
                         workspace_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityReportsResult:
    """
    Use this data source to get the list of SecMaster security reports.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    report_period = config.require_object("reportPeriod")
    status = config.require_object("status")
    test = huaweicloud.secmaster.get_security_reports(workspace_id=workspace_id,
        report_period=report_period,
        status=status)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str report_period: Specifies the report period.
           The value can be **weekly**, **daily**, **monthly** or **annual**.
    :param _builtins.str status: Specifies the report status.
           The value can be **enable** or **disable**.
    :param _builtins.str workspace_id: Specifies the workspace ID to which the reports belong.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['reportPeriod'] = report_period
    __args__['status'] = status
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getSecurityReports:getSecurityReports', __args__, opts=opts, typ=GetSecurityReportsResult).value

    return AwaitableGetSecurityReportsResult(
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        report_period=pulumi.get(__ret__, 'report_period'),
        reports=pulumi.get(__ret__, 'reports'),
        status=pulumi.get(__ret__, 'status'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_security_reports_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                report_period: Optional[pulumi.Input[_builtins.str]] = None,
                                status: Optional[pulumi.Input[_builtins.str]] = None,
                                workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSecurityReportsResult]:
    """
    Use this data source to get the list of SecMaster security reports.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    report_period = config.require_object("reportPeriod")
    status = config.require_object("status")
    test = huaweicloud.secmaster.get_security_reports(workspace_id=workspace_id,
        report_period=report_period,
        status=status)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str report_period: Specifies the report period.
           The value can be **weekly**, **daily**, **monthly** or **annual**.
    :param _builtins.str status: Specifies the report status.
           The value can be **enable** or **disable**.
    :param _builtins.str workspace_id: Specifies the workspace ID to which the reports belong.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['reportPeriod'] = report_period
    __args__['status'] = status
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getSecurityReports:getSecurityReports', __args__, opts=opts, typ=GetSecurityReportsResult)
    return __ret__.apply(lambda __response__: GetSecurityReportsResult(
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        report_period=pulumi.get(__response__, 'report_period'),
        reports=pulumi.get(__response__, 'reports'),
        status=pulumi.get(__response__, 'status'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
