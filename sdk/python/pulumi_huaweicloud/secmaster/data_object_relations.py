# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DataObjectRelationsArgs', 'DataObjectRelations']

@pulumi.input_type
class DataObjectRelationsArgs:
    def __init__(__self__, *,
                 data_class: pulumi.Input[_builtins.str],
                 data_object_id: pulumi.Input[_builtins.str],
                 related_data_class: pulumi.Input[_builtins.str],
                 related_data_object_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 workspace_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataObjectRelations resource.
        :param pulumi.Input[_builtins.str] data_class: Specifies the data class to which the data object belongs.
               The value can be **incidents**, **alerts** and **indicators**.
        :param pulumi.Input[_builtins.str] data_object_id: Specifies the ID of the data object.
        :param pulumi.Input[_builtins.str] related_data_class: Specifies the data class to which the related data object belongs.
               The value can be **incidents**, **alerts** and **indicators**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] related_data_object_ids: Specifies the IDs of related the data objects.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the data object belongs.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "data_class", data_class)
        pulumi.set(__self__, "data_object_id", data_object_id)
        pulumi.set(__self__, "related_data_class", related_data_class)
        pulumi.set(__self__, "related_data_object_ids", related_data_object_ids)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="dataClass")
    def data_class(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the data class to which the data object belongs.
        The value can be **incidents**, **alerts** and **indicators**.
        """
        return pulumi.get(self, "data_class")

    @data_class.setter
    def data_class(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "data_class", value)

    @_builtins.property
    @pulumi.getter(name="dataObjectId")
    def data_object_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the data object.
        """
        return pulumi.get(self, "data_object_id")

    @data_object_id.setter
    def data_object_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "data_object_id", value)

    @_builtins.property
    @pulumi.getter(name="relatedDataClass")
    def related_data_class(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the data class to which the related data object belongs.
        The value can be **incidents**, **alerts** and **indicators**.
        """
        return pulumi.get(self, "related_data_class")

    @related_data_class.setter
    def related_data_class(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "related_data_class", value)

    @_builtins.property
    @pulumi.getter(name="relatedDataObjectIds")
    def related_data_object_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the IDs of related the data objects.
        """
        return pulumi.get(self, "related_data_object_ids")

    @related_data_object_ids.setter
    def related_data_object_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "related_data_object_ids", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workspace to which the data object belongs.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DataObjectRelationsState:
    def __init__(__self__, *,
                 data_class: Optional[pulumi.Input[_builtins.str]] = None,
                 data_object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 related_data_class: Optional[pulumi.Input[_builtins.str]] = None,
                 related_data_object_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataObjectRelations resources.
        :param pulumi.Input[_builtins.str] data_class: Specifies the data class to which the data object belongs.
               The value can be **incidents**, **alerts** and **indicators**.
        :param pulumi.Input[_builtins.str] data_object_id: Specifies the ID of the data object.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] related_data_class: Specifies the data class to which the related data object belongs.
               The value can be **incidents**, **alerts** and **indicators**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] related_data_object_ids: Specifies the IDs of related the data objects.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the data object belongs.
        """
        if data_class is not None:
            pulumi.set(__self__, "data_class", data_class)
        if data_object_id is not None:
            pulumi.set(__self__, "data_object_id", data_object_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if related_data_class is not None:
            pulumi.set(__self__, "related_data_class", related_data_class)
        if related_data_object_ids is not None:
            pulumi.set(__self__, "related_data_object_ids", related_data_object_ids)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="dataClass")
    def data_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data class to which the data object belongs.
        The value can be **incidents**, **alerts** and **indicators**.
        """
        return pulumi.get(self, "data_class")

    @data_class.setter
    def data_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_class", value)

    @_builtins.property
    @pulumi.getter(name="dataObjectId")
    def data_object_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the data object.
        """
        return pulumi.get(self, "data_object_id")

    @data_object_id.setter
    def data_object_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_object_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="relatedDataClass")
    def related_data_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data class to which the related data object belongs.
        The value can be **incidents**, **alerts** and **indicators**.
        """
        return pulumi.get(self, "related_data_class")

    @related_data_class.setter
    def related_data_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_data_class", value)

    @_builtins.property
    @pulumi.getter(name="relatedDataObjectIds")
    def related_data_object_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the IDs of related the data objects.
        """
        return pulumi.get(self, "related_data_object_ids")

    @related_data_object_ids.setter
    def related_data_object_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "related_data_object_ids", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workspace to which the data object belongs.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:secmaster/dataObjectRelations:DataObjectRelations")
class DataObjectRelations(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_class: Optional[pulumi.Input[_builtins.str]] = None,
                 data_object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 related_data_class: Optional[pulumi.Input[_builtins.str]] = None,
                 related_data_object_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SecMaster data object relations resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        data_object_id = config.require_object("dataObjectId")
        related_data_object_ids = config.require_object("relatedDataObjectIds")
        test = huaweicloud.secmaster.DataObjectRelations("test",
            workspace_id=workspace_id,
            data_class="alerts",
            data_object_id=data_object_id,
            related_data_class="incidents",
            related_data_object_ids=related_data_object_ids)
        ```

        ## Import

        The SecMaster data object relations can be imported using `workspace_id`, `data_class`, `data_object_id` and

        `related_data_class` separated by slashs, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/dataObjectRelations:DataObjectRelations test <workspace_id>/<data_class>/<data_object_id>/<related_data_class>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] data_class: Specifies the data class to which the data object belongs.
               The value can be **incidents**, **alerts** and **indicators**.
        :param pulumi.Input[_builtins.str] data_object_id: Specifies the ID of the data object.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] related_data_class: Specifies the data class to which the related data object belongs.
               The value can be **incidents**, **alerts** and **indicators**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] related_data_object_ids: Specifies the IDs of related the data objects.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the data object belongs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataObjectRelationsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SecMaster data object relations resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        data_object_id = config.require_object("dataObjectId")
        related_data_object_ids = config.require_object("relatedDataObjectIds")
        test = huaweicloud.secmaster.DataObjectRelations("test",
            workspace_id=workspace_id,
            data_class="alerts",
            data_object_id=data_object_id,
            related_data_class="incidents",
            related_data_object_ids=related_data_object_ids)
        ```

        ## Import

        The SecMaster data object relations can be imported using `workspace_id`, `data_class`, `data_object_id` and

        `related_data_class` separated by slashs, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/dataObjectRelations:DataObjectRelations test <workspace_id>/<data_class>/<data_object_id>/<related_data_class>
        ```

        :param str resource_name: The name of the resource.
        :param DataObjectRelationsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataObjectRelationsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_class: Optional[pulumi.Input[_builtins.str]] = None,
                 data_object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 related_data_class: Optional[pulumi.Input[_builtins.str]] = None,
                 related_data_object_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataObjectRelationsArgs.__new__(DataObjectRelationsArgs)

            if data_class is None and not opts.urn:
                raise TypeError("Missing required property 'data_class'")
            __props__.__dict__["data_class"] = data_class
            if data_object_id is None and not opts.urn:
                raise TypeError("Missing required property 'data_object_id'")
            __props__.__dict__["data_object_id"] = data_object_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["region"] = region
            if related_data_class is None and not opts.urn:
                raise TypeError("Missing required property 'related_data_class'")
            __props__.__dict__["related_data_class"] = related_data_class
            if related_data_object_ids is None and not opts.urn:
                raise TypeError("Missing required property 'related_data_object_ids'")
            __props__.__dict__["related_data_object_ids"] = related_data_object_ids
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
        super(DataObjectRelations, __self__).__init__(
            'huaweicloud:secmaster/dataObjectRelations:DataObjectRelations',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            data_class: Optional[pulumi.Input[_builtins.str]] = None,
            data_object_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            related_data_class: Optional[pulumi.Input[_builtins.str]] = None,
            related_data_object_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataObjectRelations':
        """
        Get an existing DataObjectRelations resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] data_class: Specifies the data class to which the data object belongs.
               The value can be **incidents**, **alerts** and **indicators**.
        :param pulumi.Input[_builtins.str] data_object_id: Specifies the ID of the data object.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] related_data_class: Specifies the data class to which the related data object belongs.
               The value can be **incidents**, **alerts** and **indicators**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] related_data_object_ids: Specifies the IDs of related the data objects.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the data object belongs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataObjectRelationsState.__new__(_DataObjectRelationsState)

        __props__.__dict__["data_class"] = data_class
        __props__.__dict__["data_object_id"] = data_object_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["region"] = region
        __props__.__dict__["related_data_class"] = related_data_class
        __props__.__dict__["related_data_object_ids"] = related_data_object_ids
        __props__.__dict__["workspace_id"] = workspace_id
        return DataObjectRelations(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dataClass")
    def data_class(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the data class to which the data object belongs.
        The value can be **incidents**, **alerts** and **indicators**.
        """
        return pulumi.get(self, "data_class")

    @_builtins.property
    @pulumi.getter(name="dataObjectId")
    def data_object_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the data object.
        """
        return pulumi.get(self, "data_object_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="relatedDataClass")
    def related_data_class(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the data class to which the related data object belongs.
        The value can be **incidents**, **alerts** and **indicators**.
        """
        return pulumi.get(self, "related_data_class")

    @_builtins.property
    @pulumi.getter(name="relatedDataObjectIds")
    def related_data_object_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the IDs of related the data objects.
        """
        return pulumi.get(self, "related_data_object_ids")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workspace to which the data object belongs.
        """
        return pulumi.get(self, "workspace_id")

