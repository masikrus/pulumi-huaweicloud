# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AlertConvertIncidentIncidentTypeArgs',
    'AlertConvertIncidentIncidentTypeArgsDict',
    'AlertDataSourceArgs',
    'AlertDataSourceArgsDict',
    'AlertRuleQueryPlanArgs',
    'AlertRuleQueryPlanArgsDict',
    'AlertRuleSimulationTriggerArgs',
    'AlertRuleSimulationTriggerArgsDict',
    'AlertRuleTriggerArgs',
    'AlertRuleTriggerArgsDict',
    'AlertTypeArgs',
    'AlertTypeArgsDict',
    'IncidentDataSourceArgs',
    'IncidentDataSourceArgsDict',
    'IncidentTypeArgs',
    'IncidentTypeArgsDict',
    'IndicatorDataSourceArgs',
    'IndicatorDataSourceArgsDict',
    'IndicatorTypeArgs',
    'IndicatorTypeArgsDict',
    'PlaybookRuleConditionArgs',
    'PlaybookRuleConditionArgsDict',
    'PostPaidOrderProductListArgs',
    'PostPaidOrderProductListArgsDict',
    'WorkspaceWorkspaceAgencyListArgs',
    'WorkspaceWorkspaceAgencyListArgsDict',
    'GetAlertsConditionArgs',
    'GetAlertsConditionArgsDict',
    'GetAlertsConditionConditionArgs',
    'GetAlertsConditionConditionArgsDict',
    'GetIncidentsConditionArgs',
    'GetIncidentsConditionArgsDict',
    'GetIncidentsConditionConditionArgs',
    'GetIncidentsConditionConditionArgsDict',
    'GetIndicatorsConditionArgs',
    'GetIndicatorsConditionArgsDict',
    'GetIndicatorsConditionConditionArgs',
    'GetIndicatorsConditionConditionArgsDict',
]

MYPY = False

if not MYPY:
    class AlertConvertIncidentIncidentTypeArgsDict(TypedDict):
        category: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parent incident type.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the incident type ID.
        """
        incident_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the child incident type.

        > Exactly one of `id`, `category` or  `incident_type` must be set.
        """
elif False:
    AlertConvertIncidentIncidentTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertConvertIncidentIncidentTypeArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 incident_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] category: Specifies the parent incident type.
        :param pulumi.Input[_builtins.str] id: Specifies the incident type ID.
        :param pulumi.Input[_builtins.str] incident_type: Specifies the child incident type.
               
               > Exactly one of `id`, `category` or  `incident_type` must be set.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if incident_type is not None:
            pulumi.set(__self__, "incident_type", incident_type)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent incident type.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the incident type ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="incidentType")
    def incident_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the child incident type.

        > Exactly one of `id`, `category` or  `incident_type` must be set.
        """
        return pulumi.get(self, "incident_type")

    @incident_type.setter
    def incident_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "incident_type", value)


if not MYPY:
    class AlertDataSourceArgsDict(TypedDict):
        product_feature: pulumi.Input[_builtins.str]
        """
        Specifies the product feature.

        Changing this parameter will create a new resource.
        """
        product_name: pulumi.Input[_builtins.str]
        """
        Specifies the product name.

        Changing this parameter will create a new resource.
        """
        source_type: pulumi.Input[_builtins.int]
        """
        Specifies the source type.

        Changing this parameter will create a new resource.
        """
elif False:
    AlertDataSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertDataSourceArgs:
    def __init__(__self__, *,
                 product_feature: pulumi.Input[_builtins.str],
                 product_name: pulumi.Input[_builtins.str],
                 source_type: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.str] product_feature: Specifies the product feature.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] product_name: Specifies the product name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] source_type: Specifies the source type.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "product_feature", product_feature)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter(name="productFeature")
    def product_feature(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the product feature.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_feature")

    @product_feature.setter
    def product_feature(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_feature", value)

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the product name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_name", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the source type.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "source_type", value)


if not MYPY:
    class AlertRuleQueryPlanArgsDict(TypedDict):
        query_interval: pulumi.Input[_builtins.int]
        """
        Specifies the query interval.
        + When `query_interval_unit` is **MINUTE**: the value range is `5` to `59`;
        + When `query_interval_unit` is **HOUR**: the value range is `1` to `23`;
        + When `query_interval_unit` is **DAY**: the value range is `1` to `14`;
        """
        query_interval_unit: pulumi.Input[_builtins.str]
        """
        Specifies the query interval unit.
        The value can be: **MINUTE**, **HOUR** and **DAY**.
        """
        time_window: pulumi.Input[_builtins.int]
        """
        Specifies the time window.
        + When `time_window_unit` is **MINUTE**: the value range is `5` to `59`;
        + When `time_window_unit` is **HOUR**: the value range is `1` to `23`;
        + When `time_window_unit` is **DAY**: the value range is `1` to `14`;
        """
        time_window_unit: pulumi.Input[_builtins.str]
        """
        Specifies the time window unit.
        The value can be: **MINUTE**, **HOUR** and **DAY**.
        """
        execution_delay: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the execution delay in minutes.
        """
        overtime_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the overtime interval in minutes.

        <a name="triggers"></a>
        The `triggers` block supports:
        """
elif False:
    AlertRuleQueryPlanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertRuleQueryPlanArgs:
    def __init__(__self__, *,
                 query_interval: pulumi.Input[_builtins.int],
                 query_interval_unit: pulumi.Input[_builtins.str],
                 time_window: pulumi.Input[_builtins.int],
                 time_window_unit: pulumi.Input[_builtins.str],
                 execution_delay: Optional[pulumi.Input[_builtins.int]] = None,
                 overtime_interval: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] query_interval: Specifies the query interval.
               + When `query_interval_unit` is **MINUTE**: the value range is `5` to `59`;
               + When `query_interval_unit` is **HOUR**: the value range is `1` to `23`;
               + When `query_interval_unit` is **DAY**: the value range is `1` to `14`;
        :param pulumi.Input[_builtins.str] query_interval_unit: Specifies the query interval unit.
               The value can be: **MINUTE**, **HOUR** and **DAY**.
        :param pulumi.Input[_builtins.int] time_window: Specifies the time window.
               + When `time_window_unit` is **MINUTE**: the value range is `5` to `59`;
               + When `time_window_unit` is **HOUR**: the value range is `1` to `23`;
               + When `time_window_unit` is **DAY**: the value range is `1` to `14`;
        :param pulumi.Input[_builtins.str] time_window_unit: Specifies the time window unit.
               The value can be: **MINUTE**, **HOUR** and **DAY**.
        :param pulumi.Input[_builtins.int] execution_delay: Specifies the execution delay in minutes.
        :param pulumi.Input[_builtins.int] overtime_interval: Specifies the overtime interval in minutes.
               
               <a name="triggers"></a>
               The `triggers` block supports:
        """
        pulumi.set(__self__, "query_interval", query_interval)
        pulumi.set(__self__, "query_interval_unit", query_interval_unit)
        pulumi.set(__self__, "time_window", time_window)
        pulumi.set(__self__, "time_window_unit", time_window_unit)
        if execution_delay is not None:
            pulumi.set(__self__, "execution_delay", execution_delay)
        if overtime_interval is not None:
            pulumi.set(__self__, "overtime_interval", overtime_interval)

    @_builtins.property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the query interval.
        + When `query_interval_unit` is **MINUTE**: the value range is `5` to `59`;
        + When `query_interval_unit` is **HOUR**: the value range is `1` to `23`;
        + When `query_interval_unit` is **DAY**: the value range is `1` to `14`;
        """
        return pulumi.get(self, "query_interval")

    @query_interval.setter
    def query_interval(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "query_interval", value)

    @_builtins.property
    @pulumi.getter(name="queryIntervalUnit")
    def query_interval_unit(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the query interval unit.
        The value can be: **MINUTE**, **HOUR** and **DAY**.
        """
        return pulumi.get(self, "query_interval_unit")

    @query_interval_unit.setter
    def query_interval_unit(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "query_interval_unit", value)

    @_builtins.property
    @pulumi.getter(name="timeWindow")
    def time_window(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the time window.
        + When `time_window_unit` is **MINUTE**: the value range is `5` to `59`;
        + When `time_window_unit` is **HOUR**: the value range is `1` to `23`;
        + When `time_window_unit` is **DAY**: the value range is `1` to `14`;
        """
        return pulumi.get(self, "time_window")

    @time_window.setter
    def time_window(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "time_window", value)

    @_builtins.property
    @pulumi.getter(name="timeWindowUnit")
    def time_window_unit(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the time window unit.
        The value can be: **MINUTE**, **HOUR** and **DAY**.
        """
        return pulumi.get(self, "time_window_unit")

    @time_window_unit.setter
    def time_window_unit(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "time_window_unit", value)

    @_builtins.property
    @pulumi.getter(name="executionDelay")
    def execution_delay(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the execution delay in minutes.
        """
        return pulumi.get(self, "execution_delay")

    @execution_delay.setter
    def execution_delay(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "execution_delay", value)

    @_builtins.property
    @pulumi.getter(name="overtimeInterval")
    def overtime_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the overtime interval in minutes.

        <a name="triggers"></a>
        The `triggers` block supports:
        """
        return pulumi.get(self, "overtime_interval")

    @overtime_interval.setter
    def overtime_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "overtime_interval", value)


if not MYPY:
    class AlertRuleSimulationTriggerArgsDict(TypedDict):
        accumulated_times: pulumi.Input[_builtins.int]
        """
        Specifies the accumulated times.
        """
        expression: pulumi.Input[_builtins.str]
        """
        Specifies the expression.
        """
        mode: pulumi.Input[_builtins.str]
        """
        Specifies the trigger mode.
        The value can be: **COUNT**.
        """
        operator: pulumi.Input[_builtins.str]
        """
        Specifies the operator.
        The value can be: **EQ**(equal), **NE**(not equal), **GT**(greater than) and **LT**(less than).
        """
        severity: pulumi.Input[_builtins.str]
        """
        Specifies the severity of the trigger.
        The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
elif False:
    AlertRuleSimulationTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertRuleSimulationTriggerArgs:
    def __init__(__self__, *,
                 accumulated_times: pulumi.Input[_builtins.int],
                 expression: pulumi.Input[_builtins.str],
                 mode: pulumi.Input[_builtins.str],
                 operator: pulumi.Input[_builtins.str],
                 severity: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.int] accumulated_times: Specifies the accumulated times.
        :param pulumi.Input[_builtins.str] expression: Specifies the expression.
        :param pulumi.Input[_builtins.str] mode: Specifies the trigger mode.
               The value can be: **COUNT**.
        :param pulumi.Input[_builtins.str] operator: Specifies the operator.
               The value can be: **EQ**(equal), **NE**(not equal), **GT**(greater than) and **LT**(less than).
        :param pulumi.Input[_builtins.str] severity: Specifies the severity of the trigger.
               The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        pulumi.set(__self__, "accumulated_times", accumulated_times)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="accumulatedTimes")
    def accumulated_times(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the accumulated times.
        """
        return pulumi.get(self, "accumulated_times")

    @accumulated_times.setter
    def accumulated_times(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "accumulated_times", value)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the expression.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the trigger mode.
        The value can be: **COUNT**.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter
    def operator(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operator.
        The value can be: **EQ**(equal), **NE**(not equal), **GT**(greater than) and **LT**(less than).
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "operator", value)

    @_builtins.property
    @pulumi.getter
    def severity(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the severity of the trigger.
        The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "severity", value)


if not MYPY:
    class AlertRuleTriggerArgsDict(TypedDict):
        accumulated_times: pulumi.Input[_builtins.int]
        """
        Specifies the accumulated times.
        """
        expression: pulumi.Input[_builtins.str]
        """
        Specifies the expression.
        """
        mode: pulumi.Input[_builtins.str]
        """
        Specifies the trigger mode.
        The value can be: **COUNT**.
        """
        operator: pulumi.Input[_builtins.str]
        """
        Specifies the operator.
        The value can be: **EQ**(equal), **NE**(not equal), **GT**(greater than) and **LT**(less than).
        """
        severity: pulumi.Input[_builtins.str]
        """
        Specifies the severity of the trigger.
        The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
elif False:
    AlertRuleTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertRuleTriggerArgs:
    def __init__(__self__, *,
                 accumulated_times: pulumi.Input[_builtins.int],
                 expression: pulumi.Input[_builtins.str],
                 mode: pulumi.Input[_builtins.str],
                 operator: pulumi.Input[_builtins.str],
                 severity: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.int] accumulated_times: Specifies the accumulated times.
        :param pulumi.Input[_builtins.str] expression: Specifies the expression.
        :param pulumi.Input[_builtins.str] mode: Specifies the trigger mode.
               The value can be: **COUNT**.
        :param pulumi.Input[_builtins.str] operator: Specifies the operator.
               The value can be: **EQ**(equal), **NE**(not equal), **GT**(greater than) and **LT**(less than).
        :param pulumi.Input[_builtins.str] severity: Specifies the severity of the trigger.
               The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        pulumi.set(__self__, "accumulated_times", accumulated_times)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="accumulatedTimes")
    def accumulated_times(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the accumulated times.
        """
        return pulumi.get(self, "accumulated_times")

    @accumulated_times.setter
    def accumulated_times(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "accumulated_times", value)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the expression.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the trigger mode.
        The value can be: **COUNT**.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter
    def operator(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operator.
        The value can be: **EQ**(equal), **NE**(not equal), **GT**(greater than) and **LT**(less than).
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "operator", value)

    @_builtins.property
    @pulumi.getter
    def severity(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the severity of the trigger.
        The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "severity", value)


if not MYPY:
    class AlertTypeArgsDict(TypedDict):
        alert_type: pulumi.Input[_builtins.str]
        """
        Specifies the alert type.

        <a name="Alert_DataSource"></a>
        The `data_source` block supports:
        """
        category: pulumi.Input[_builtins.str]
        """
        Specifies the category.
        """
elif False:
    AlertTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertTypeArgs:
    def __init__(__self__, *,
                 alert_type: pulumi.Input[_builtins.str],
                 category: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] alert_type: Specifies the alert type.
               
               <a name="Alert_DataSource"></a>
               The `data_source` block supports:
        :param pulumi.Input[_builtins.str] category: Specifies the category.
        """
        pulumi.set(__self__, "alert_type", alert_type)
        pulumi.set(__self__, "category", category)

    @_builtins.property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alert type.

        <a name="Alert_DataSource"></a>
        The `data_source` block supports:
        """
        return pulumi.get(self, "alert_type")

    @alert_type.setter
    def alert_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alert_type", value)

    @_builtins.property
    @pulumi.getter
    def category(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "category", value)


if not MYPY:
    class IncidentDataSourceArgsDict(TypedDict):
        product_feature: pulumi.Input[_builtins.str]
        """
        Specifies the product feature.

        Changing this parameter will create a new resource.
        """
        product_name: pulumi.Input[_builtins.str]
        """
        Specifies the product name.

        Changing this parameter will create a new resource.
        """
        source_type: pulumi.Input[_builtins.int]
        """
        Specifies the source type.

        Changing this parameter will create a new resource.
        """
elif False:
    IncidentDataSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IncidentDataSourceArgs:
    def __init__(__self__, *,
                 product_feature: pulumi.Input[_builtins.str],
                 product_name: pulumi.Input[_builtins.str],
                 source_type: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.str] product_feature: Specifies the product feature.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] product_name: Specifies the product name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] source_type: Specifies the source type.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "product_feature", product_feature)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter(name="productFeature")
    def product_feature(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the product feature.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_feature")

    @product_feature.setter
    def product_feature(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_feature", value)

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the product name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_name", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the source type.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "source_type", value)


if not MYPY:
    class IncidentTypeArgsDict(TypedDict):
        category: pulumi.Input[_builtins.str]
        """
        Specifies the category.

        Changing this parameter will create a new resource.
        """
        incident_type: pulumi.Input[_builtins.str]
        """
        Specifies the incident type.

        Changing this parameter will create a new resource.

        <a name="IncidentDataSource"></a>
        The `IncidentDataSource` block supports:
        """
elif False:
    IncidentTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IncidentTypeArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[_builtins.str],
                 incident_type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] category: Specifies the category.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] incident_type: Specifies the incident type.
               
               Changing this parameter will create a new resource.
               
               <a name="IncidentDataSource"></a>
               The `IncidentDataSource` block supports:
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "incident_type", incident_type)

    @_builtins.property
    @pulumi.getter
    def category(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the category.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter(name="incidentType")
    def incident_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the incident type.

        Changing this parameter will create a new resource.

        <a name="IncidentDataSource"></a>
        The `IncidentDataSource` block supports:
        """
        return pulumi.get(self, "incident_type")

    @incident_type.setter
    def incident_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "incident_type", value)


if not MYPY:
    class IndicatorDataSourceArgsDict(TypedDict):
        product_feature: pulumi.Input[_builtins.str]
        """
        Specifies the product feature.
        Changing this parameter will create a new resource.
        """
        product_name: pulumi.Input[_builtins.str]
        """
        Specifies the product name.
        Changing this parameter will create a new resource.
        """
        source_type: pulumi.Input[_builtins.int]
        """
        Specifies the data source type.
        Changing this parameter will create a new resource.
        """
elif False:
    IndicatorDataSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IndicatorDataSourceArgs:
    def __init__(__self__, *,
                 product_feature: pulumi.Input[_builtins.str],
                 product_name: pulumi.Input[_builtins.str],
                 source_type: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.str] product_feature: Specifies the product feature.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] product_name: Specifies the product name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] source_type: Specifies the data source type.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "product_feature", product_feature)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter(name="productFeature")
    def product_feature(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the product feature.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_feature")

    @product_feature.setter
    def product_feature(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_feature", value)

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the product name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_name", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the data source type.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "source_type", value)


if not MYPY:
    class IndicatorTypeArgsDict(TypedDict):
        category: pulumi.Input[_builtins.str]
        """
        Specifies the category.
        """
        id: pulumi.Input[_builtins.str]
        """
        Specifies the indicator type ID.

        <a name="Indicator_DataSource"></a>
        The `data_source` block supports:
        """
        indicator_type: pulumi.Input[_builtins.str]
        """
        Specifies the indicator type.
        """
elif False:
    IndicatorTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IndicatorTypeArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[_builtins.str],
                 id: pulumi.Input[_builtins.str],
                 indicator_type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] category: Specifies the category.
        :param pulumi.Input[_builtins.str] id: Specifies the indicator type ID.
               
               <a name="Indicator_DataSource"></a>
               The `data_source` block supports:
        :param pulumi.Input[_builtins.str] indicator_type: Specifies the indicator type.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "indicator_type", indicator_type)

    @_builtins.property
    @pulumi.getter
    def category(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the indicator type ID.

        <a name="Indicator_DataSource"></a>
        The `data_source` block supports:
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="indicatorType")
    def indicator_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the indicator type.
        """
        return pulumi.get(self, "indicator_type")

    @indicator_type.setter
    def indicator_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "indicator_type", value)


if not MYPY:
    class PlaybookRuleConditionArgsDict(TypedDict):
        datas: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the condition data.
        """
        detail: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the condition detail.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the condition name.
        """
elif False:
    PlaybookRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlaybookRuleConditionArgs:
    def __init__(__self__, *,
                 datas: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 detail: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] datas: Specifies the condition data.
        :param pulumi.Input[_builtins.str] detail: Specifies the condition detail.
        :param pulumi.Input[_builtins.str] name: Specifies the condition name.
        """
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the condition data.
        """
        return pulumi.get(self, "datas")

    @datas.setter
    def datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "datas", value)

    @_builtins.property
    @pulumi.getter
    def detail(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the condition detail.
        """
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "detail", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the condition name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class PostPaidOrderProductListArgsDict(TypedDict):
        cloud_service_type: pulumi.Input[_builtins.str]
        """
        Specifies the cloud service type.
        The fixed value is **hws.service.type.sa**.
        """
        id: pulumi.Input[_builtins.str]
        """
        Specifies the identifier, which must be unique.
        """
        product_id: pulumi.Input[_builtins.str]
        """
        Specifies the offering ID,
        which is obtained from the CBC price inquiry.
        """
        resource_size: pulumi.Input[_builtins.int]
        """
        Specifies the number of quotas.
        """
        resource_spec_code: pulumi.Input[_builtins.str]
        """
        Specifies the resource specifications of the purchased
        product. For example, the resource specification for the basic edition in SecMaster is **secmaster.basic**.
        """
        resource_type: pulumi.Input[_builtins.str]
        """
        Specifies the resource type of the purchased product.
        For example, the resource type for typical scenarios in SecMaster is **hws.resource.type.secmaster.typical**.
        """
        usage_factor: pulumi.Input[_builtins.str]
        """
        Specifies the usage factor.
        """
        usage_measure_id: pulumi.Input[_builtins.int]
        """
        Specifies the usage measurement unit.
        For example, the resources are billed by hour, the usage value is **1**, and the usage measurement unit is hour.
        The options are:

        + **4**: Hours;
        + **10**: GB, The bandwidth usage is measured by traffic (GB);
        + **11**: MB, The bandwidth usage is measured by traffic (MB);
        """
        usage_value: pulumi.Input[_builtins.int]
        """
        Specifies the usage value.
        """
        resource_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the resource ID,
        which is transferred only when the quota is added.
        """
elif False:
    PostPaidOrderProductListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PostPaidOrderProductListArgs:
    def __init__(__self__, *,
                 cloud_service_type: pulumi.Input[_builtins.str],
                 id: pulumi.Input[_builtins.str],
                 product_id: pulumi.Input[_builtins.str],
                 resource_size: pulumi.Input[_builtins.int],
                 resource_spec_code: pulumi.Input[_builtins.str],
                 resource_type: pulumi.Input[_builtins.str],
                 usage_factor: pulumi.Input[_builtins.str],
                 usage_measure_id: pulumi.Input[_builtins.int],
                 usage_value: pulumi.Input[_builtins.int],
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cloud_service_type: Specifies the cloud service type.
               The fixed value is **hws.service.type.sa**.
        :param pulumi.Input[_builtins.str] id: Specifies the identifier, which must be unique.
        :param pulumi.Input[_builtins.str] product_id: Specifies the offering ID,
               which is obtained from the CBC price inquiry.
        :param pulumi.Input[_builtins.int] resource_size: Specifies the number of quotas.
        :param pulumi.Input[_builtins.str] resource_spec_code: Specifies the resource specifications of the purchased
               product. For example, the resource specification for the basic edition in SecMaster is **secmaster.basic**.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the resource type of the purchased product.
               For example, the resource type for typical scenarios in SecMaster is **hws.resource.type.secmaster.typical**.
        :param pulumi.Input[_builtins.str] usage_factor: Specifies the usage factor.
        :param pulumi.Input[_builtins.int] usage_measure_id: Specifies the usage measurement unit.
               For example, the resources are billed by hour, the usage value is **1**, and the usage measurement unit is hour.
               The options are:
               
               + **4**: Hours;
               + **10**: GB, The bandwidth usage is measured by traffic (GB);
               + **11**: MB, The bandwidth usage is measured by traffic (MB);
        :param pulumi.Input[_builtins.int] usage_value: Specifies the usage value.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the resource ID,
               which is transferred only when the quota is added.
        """
        pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "resource_size", resource_size)
        pulumi.set(__self__, "resource_spec_code", resource_spec_code)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "usage_factor", usage_factor)
        pulumi.set(__self__, "usage_measure_id", usage_measure_id)
        pulumi.set(__self__, "usage_value", usage_value)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cloud service type.
        The fixed value is **hws.service.type.sa**.
        """
        return pulumi.get(self, "cloud_service_type")

    @cloud_service_type.setter
    def cloud_service_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cloud_service_type", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the identifier, which must be unique.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the offering ID,
        which is obtained from the CBC price inquiry.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceSize")
    def resource_size(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of quotas.
        """
        return pulumi.get(self, "resource_size")

    @resource_size.setter
    def resource_size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "resource_size", value)

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource specifications of the purchased
        product. For example, the resource specification for the basic edition in SecMaster is **secmaster.basic**.
        """
        return pulumi.get(self, "resource_spec_code")

    @resource_spec_code.setter
    def resource_spec_code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_spec_code", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource type of the purchased product.
        For example, the resource type for typical scenarios in SecMaster is **hws.resource.type.secmaster.typical**.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="usageFactor")
    def usage_factor(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the usage factor.
        """
        return pulumi.get(self, "usage_factor")

    @usage_factor.setter
    def usage_factor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "usage_factor", value)

    @_builtins.property
    @pulumi.getter(name="usageMeasureId")
    def usage_measure_id(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the usage measurement unit.
        For example, the resources are billed by hour, the usage value is **1**, and the usage measurement unit is hour.
        The options are:

        + **4**: Hours;
        + **10**: GB, The bandwidth usage is measured by traffic (GB);
        + **11**: MB, The bandwidth usage is measured by traffic (MB);
        """
        return pulumi.get(self, "usage_measure_id")

    @usage_measure_id.setter
    def usage_measure_id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "usage_measure_id", value)

    @_builtins.property
    @pulumi.getter(name="usageValue")
    def usage_value(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the usage value.
        """
        return pulumi.get(self, "usage_value")

    @usage_value.setter
    def usage_value(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "usage_value", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource ID,
        which is transferred only when the quota is added.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)


if not MYPY:
    class WorkspaceWorkspaceAgencyListArgsDict(TypedDict):
        agency_version: NotRequired[pulumi.Input[_builtins.str]]
        domain_id: NotRequired[pulumi.Input[_builtins.str]]
        domain_name: NotRequired[pulumi.Input[_builtins.str]]
        iam_agency_id: NotRequired[pulumi.Input[_builtins.str]]
        iam_agency_name: NotRequired[pulumi.Input[_builtins.str]]
        id: NotRequired[pulumi.Input[_builtins.str]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        project_id: NotRequired[pulumi.Input[_builtins.str]]
        region_id: NotRequired[pulumi.Input[_builtins.str]]
        resource_spec_codes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        selected: NotRequired[pulumi.Input[_builtins.bool]]
        workspace_attribution: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    WorkspaceWorkspaceAgencyListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceWorkspaceAgencyListArgs:
    def __init__(__self__, *,
                 agency_version: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_agency_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_spec_codes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 selected: Optional[pulumi.Input[_builtins.bool]] = None,
                 workspace_attribution: Optional[pulumi.Input[_builtins.str]] = None):
        if agency_version is not None:
            pulumi.set(__self__, "agency_version", agency_version)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if iam_agency_id is not None:
            pulumi.set(__self__, "iam_agency_id", iam_agency_id)
        if iam_agency_name is not None:
            pulumi.set(__self__, "iam_agency_name", iam_agency_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if resource_spec_codes is not None:
            pulumi.set(__self__, "resource_spec_codes", resource_spec_codes)
        if selected is not None:
            pulumi.set(__self__, "selected", selected)
        if workspace_attribution is not None:
            pulumi.set(__self__, "workspace_attribution", workspace_attribution)

    @_builtins.property
    @pulumi.getter(name="agencyVersion")
    def agency_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "agency_version")

    @agency_version.setter
    def agency_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency_version", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="iamAgencyId")
    def iam_agency_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_agency_id")

    @iam_agency_id.setter
    def iam_agency_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_agency_id", value)

    @_builtins.property
    @pulumi.getter(name="iamAgencyName")
    def iam_agency_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_agency_name")

    @iam_agency_name.setter
    def iam_agency_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_agency_name", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceSpecCodes")
    def resource_spec_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "resource_spec_codes")

    @resource_spec_codes.setter
    def resource_spec_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resource_spec_codes", value)

    @_builtins.property
    @pulumi.getter
    def selected(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "selected")

    @selected.setter
    def selected(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "selected", value)

    @_builtins.property
    @pulumi.getter(name="workspaceAttribution")
    def workspace_attribution(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "workspace_attribution")

    @workspace_attribution.setter
    def workspace_attribution(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_attribution", value)


if not MYPY:
    class GetAlertsConditionArgsDict(TypedDict):
        conditions: NotRequired[Sequence['GetAlertsConditionConditionArgsDict']]
        """
        Specifies the condition expression list.
        The conditions structure is documented below.
        """
        logics: NotRequired[Sequence[_builtins.str]]
        """
        Specifies the expression logic.

        <a name="condition_conditions"></a>
        The `conditions` block supports:
        """
elif False:
    GetAlertsConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAlertsConditionArgs:
    def __init__(__self__, *,
                 conditions: Optional[Sequence['GetAlertsConditionConditionArgs']] = None,
                 logics: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence['GetAlertsConditionConditionArgs'] conditions: Specifies the condition expression list.
               The conditions structure is documented below.
        :param Sequence[_builtins.str] logics: Specifies the expression logic.
               
               <a name="condition_conditions"></a>
               The `conditions` block supports:
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if logics is not None:
            pulumi.set(__self__, "logics", logics)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['GetAlertsConditionConditionArgs']]:
        """
        Specifies the condition expression list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[Sequence['GetAlertsConditionConditionArgs']]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def logics(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the expression logic.

        <a name="condition_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "logics")

    @logics.setter
    def logics(self, value: Optional[Sequence[_builtins.str]]):
        pulumi.set(self, "logics", value)


if not MYPY:
    class GetAlertsConditionConditionArgsDict(TypedDict):
        datas: NotRequired[Sequence[_builtins.str]]
        """
        Specifies the expression content.
        + About `status` expression, e.g. **["handle_status", "!=", "Closed"]**.
        + About `name` expression, e.g. **["title", "contains", "test"]**.
        + About `level` expression, e.g. **["severity", "in", "Tips,Low"]**.
        + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
        + About `type.alert_type` expression, e.g. **["alert_type.alert_type", "=", "xxx"]**.
        + About `first_occurrence_time` expression, e.g. **["first_observed_time", "<=", "2024-08-23T20:09:26Z+0800"]**.
        """
        name: NotRequired[_builtins.str]
        """
        Specifies the expression name.
        """
elif False:
    GetAlertsConditionConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAlertsConditionConditionArgs:
    def __init__(__self__, *,
                 datas: Optional[Sequence[_builtins.str]] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] datas: Specifies the expression content.
               + About `status` expression, e.g. **["handle_status", "!=", "Closed"]**.
               + About `name` expression, e.g. **["title", "contains", "test"]**.
               + About `level` expression, e.g. **["severity", "in", "Tips,Low"]**.
               + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
               + About `type.alert_type` expression, e.g. **["alert_type.alert_type", "=", "xxx"]**.
               + About `first_occurrence_time` expression, e.g. **["first_observed_time", "<=", "2024-08-23T20:09:26Z+0800"]**.
        :param _builtins.str name: Specifies the expression name.
        """
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the expression content.
        + About `status` expression, e.g. **["handle_status", "!=", "Closed"]**.
        + About `name` expression, e.g. **["title", "contains", "test"]**.
        + About `level` expression, e.g. **["severity", "in", "Tips,Low"]**.
        + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
        + About `type.alert_type` expression, e.g. **["alert_type.alert_type", "=", "xxx"]**.
        + About `first_occurrence_time` expression, e.g. **["first_observed_time", "<=", "2024-08-23T20:09:26Z+0800"]**.
        """
        return pulumi.get(self, "datas")

    @datas.setter
    def datas(self, value: Optional[Sequence[_builtins.str]]):
        pulumi.set(self, "datas", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the expression name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[_builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class GetIncidentsConditionArgsDict(TypedDict):
        conditions: NotRequired[Sequence['GetIncidentsConditionConditionArgsDict']]
        """
        Specifies the condition expression list.
        The conditions structure is documented below.
        """
        logics: NotRequired[Sequence[_builtins.str]]
        """
        Specifies the expression logic.

        <a name="condition_conditions"></a>
        The `conditions` block supports:
        """
elif False:
    GetIncidentsConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetIncidentsConditionArgs:
    def __init__(__self__, *,
                 conditions: Optional[Sequence['GetIncidentsConditionConditionArgs']] = None,
                 logics: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence['GetIncidentsConditionConditionArgs'] conditions: Specifies the condition expression list.
               The conditions structure is documented below.
        :param Sequence[_builtins.str] logics: Specifies the expression logic.
               
               <a name="condition_conditions"></a>
               The `conditions` block supports:
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if logics is not None:
            pulumi.set(__self__, "logics", logics)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['GetIncidentsConditionConditionArgs']]:
        """
        Specifies the condition expression list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[Sequence['GetIncidentsConditionConditionArgs']]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def logics(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the expression logic.

        <a name="condition_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "logics")

    @logics.setter
    def logics(self, value: Optional[Sequence[_builtins.str]]):
        pulumi.set(self, "logics", value)


if not MYPY:
    class GetIncidentsConditionConditionArgsDict(TypedDict):
        datas: NotRequired[Sequence[_builtins.str]]
        """
        Specifies the expression content.
        + About `status` expression, e.g. **["handle_status", "!=", "Closed"]**.
        + About `name` expression, e.g. **["title", "contains", "test"]**.
        + About `level` expression, e.g. **["severity", "in", "Tips,Low"]**.
        + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
        + About `incident_type.incident_type` expression, e.g. **["incident_type.incident_type", "=", "xxx"]**.
        + About `first_occurrence_time` expression, e.g. **["first_observed_time", "<=", "2024-08-23T20:09:26Z+0800"]**.
        """
        name: NotRequired[_builtins.str]
        """
        Specifies the expression name.
        """
elif False:
    GetIncidentsConditionConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetIncidentsConditionConditionArgs:
    def __init__(__self__, *,
                 datas: Optional[Sequence[_builtins.str]] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] datas: Specifies the expression content.
               + About `status` expression, e.g. **["handle_status", "!=", "Closed"]**.
               + About `name` expression, e.g. **["title", "contains", "test"]**.
               + About `level` expression, e.g. **["severity", "in", "Tips,Low"]**.
               + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
               + About `incident_type.incident_type` expression, e.g. **["incident_type.incident_type", "=", "xxx"]**.
               + About `first_occurrence_time` expression, e.g. **["first_observed_time", "<=", "2024-08-23T20:09:26Z+0800"]**.
        :param _builtins.str name: Specifies the expression name.
        """
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the expression content.
        + About `status` expression, e.g. **["handle_status", "!=", "Closed"]**.
        + About `name` expression, e.g. **["title", "contains", "test"]**.
        + About `level` expression, e.g. **["severity", "in", "Tips,Low"]**.
        + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
        + About `incident_type.incident_type` expression, e.g. **["incident_type.incident_type", "=", "xxx"]**.
        + About `first_occurrence_time` expression, e.g. **["first_observed_time", "<=", "2024-08-23T20:09:26Z+0800"]**.
        """
        return pulumi.get(self, "datas")

    @datas.setter
    def datas(self, value: Optional[Sequence[_builtins.str]]):
        pulumi.set(self, "datas", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the expression name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[_builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class GetIndicatorsConditionArgsDict(TypedDict):
        conditions: NotRequired[Sequence['GetIndicatorsConditionConditionArgsDict']]
        """
        Specifies the condition expression list.
        The conditions structure is documented below.
        """
        logics: NotRequired[Sequence[_builtins.str]]
        """
        Specifies the expression logic.
        For example, **["conditions.name1", "and", "conditions.name2"]**.

        <a name="condition_conditions"></a>
        The `conditions` block supports:
        """
elif False:
    GetIndicatorsConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetIndicatorsConditionArgs:
    def __init__(__self__, *,
                 conditions: Optional[Sequence['GetIndicatorsConditionConditionArgs']] = None,
                 logics: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence['GetIndicatorsConditionConditionArgs'] conditions: Specifies the condition expression list.
               The conditions structure is documented below.
        :param Sequence[_builtins.str] logics: Specifies the expression logic.
               For example, **["conditions.name1", "and", "conditions.name2"]**.
               
               <a name="condition_conditions"></a>
               The `conditions` block supports:
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if logics is not None:
            pulumi.set(__self__, "logics", logics)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['GetIndicatorsConditionConditionArgs']]:
        """
        Specifies the condition expression list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[Sequence['GetIndicatorsConditionConditionArgs']]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def logics(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the expression logic.
        For example, **["conditions.name1", "and", "conditions.name2"]**.

        <a name="condition_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "logics")

    @logics.setter
    def logics(self, value: Optional[Sequence[_builtins.str]]):
        pulumi.set(self, "logics", value)


if not MYPY:
    class GetIndicatorsConditionConditionArgsDict(TypedDict):
        datas: NotRequired[Sequence[_builtins.str]]
        """
        Specifies the expression content.
        + About `threat_degree` expression, e.g. **["verdict", "=", "Gray"]**.
        + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
        + About `updated_at` expression, e.g. **["update_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
        + About `type.indicator_type` expression, e.g. **["indicator_type.indicator_type", "=", "IPv6"]**.
        + About `first_occurrence_time` expression, e.g. **["first_report_time", ">=", "2024-08-20T14:52:06Z+0800"]**.
        + About `last_occurrence_time` expression, e.g. **["last_report_time", ">=", "2024-08-20T14:52:06Z+0800"]**.
        """
        name: NotRequired[_builtins.str]
        """
        Specifies the expression name.
        """
elif False:
    GetIndicatorsConditionConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetIndicatorsConditionConditionArgs:
    def __init__(__self__, *,
                 datas: Optional[Sequence[_builtins.str]] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] datas: Specifies the expression content.
               + About `threat_degree` expression, e.g. **["verdict", "=", "Gray"]**.
               + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
               + About `updated_at` expression, e.g. **["update_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
               + About `type.indicator_type` expression, e.g. **["indicator_type.indicator_type", "=", "IPv6"]**.
               + About `first_occurrence_time` expression, e.g. **["first_report_time", ">=", "2024-08-20T14:52:06Z+0800"]**.
               + About `last_occurrence_time` expression, e.g. **["last_report_time", ">=", "2024-08-20T14:52:06Z+0800"]**.
        :param _builtins.str name: Specifies the expression name.
        """
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the expression content.
        + About `threat_degree` expression, e.g. **["verdict", "=", "Gray"]**.
        + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
        + About `updated_at` expression, e.g. **["update_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
        + About `type.indicator_type` expression, e.g. **["indicator_type.indicator_type", "=", "IPv6"]**.
        + About `first_occurrence_time` expression, e.g. **["first_report_time", ">=", "2024-08-20T14:52:06Z+0800"]**.
        + About `last_occurrence_time` expression, e.g. **["last_report_time", ">=", "2024-08-20T14:52:06Z+0800"]**.
        """
        return pulumi.get(self, "datas")

    @datas.setter
    def datas(self, value: Optional[Sequence[_builtins.str]]):
        pulumi.set(self, "datas", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the expression name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[_builtins.str]):
        pulumi.set(self, "name", value)


