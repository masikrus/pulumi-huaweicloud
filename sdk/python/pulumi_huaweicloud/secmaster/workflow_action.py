# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['WorkflowActionArgs', 'WorkflowAction']

@pulumi.input_type
class WorkflowActionArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[_builtins.str],
                 command_type: pulumi.Input[_builtins.str],
                 workflow_id: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 action_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 playbook_context: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 simulation_context: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a WorkflowAction resource.
        :param pulumi.Input[_builtins.str] action_type: Sepcifies the action type, e.g. **workflow**.
        :param pulumi.Input[_builtins.str] command_type: Sepcifies the command type.
               The value can be: **ActionInstanceRunCommand**, **ActionInstanceDebugCommand**, **ActionInstanceTerminateCommand**,
               **ActionInstanceRetryCommand**.
        :param pulumi.Input[_builtins.str] workflow_id: Sepcifies the workflow ID.
        :param pulumi.Input[_builtins.str] workspace_id: Sepcifies the workspace ID.
        :param pulumi.Input[_builtins.str] action_instance_id: Sepcifies the action instance ID.
        :param pulumi.Input[_builtins.str] playbook_context: Sepcifies the playbook context.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] simulation_context: Sepcifies the simulation context.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "command_type", command_type)
        pulumi.set(__self__, "workflow_id", workflow_id)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if action_instance_id is not None:
            pulumi.set(__self__, "action_instance_id", action_instance_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if playbook_context is not None:
            pulumi.set(__self__, "playbook_context", playbook_context)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if simulation_context is not None:
            pulumi.set(__self__, "simulation_context", simulation_context)

    @_builtins.property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[_builtins.str]:
        """
        Sepcifies the action type, e.g. **workflow**.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action_type", value)

    @_builtins.property
    @pulumi.getter(name="commandType")
    def command_type(self) -> pulumi.Input[_builtins.str]:
        """
        Sepcifies the command type.
        The value can be: **ActionInstanceRunCommand**, **ActionInstanceDebugCommand**, **ActionInstanceTerminateCommand**,
        **ActionInstanceRetryCommand**.
        """
        return pulumi.get(self, "command_type")

    @command_type.setter
    def command_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "command_type", value)

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Input[_builtins.str]:
        """
        Sepcifies the workflow ID.
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workflow_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Sepcifies the workspace ID.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="actionInstanceId")
    def action_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sepcifies the action instance ID.
        """
        return pulumi.get(self, "action_instance_id")

    @action_instance_id.setter
    def action_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="playbookContext")
    def playbook_context(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sepcifies the playbook context.
        """
        return pulumi.get(self, "playbook_context")

    @playbook_context.setter
    def playbook_context(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "playbook_context", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="simulationContext")
    def simulation_context(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sepcifies the simulation context.
        """
        return pulumi.get(self, "simulation_context")

    @simulation_context.setter
    def simulation_context(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "simulation_context", value)


@pulumi.input_type
class _WorkflowActionState:
    def __init__(__self__, *,
                 action_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 action_type: Optional[pulumi.Input[_builtins.str]] = None,
                 command_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 playbook_context: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 simulation_context: Optional[pulumi.Input[_builtins.str]] = None,
                 workflow_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering WorkflowAction resources.
        :param pulumi.Input[_builtins.str] action_instance_id: Sepcifies the action instance ID.
        :param pulumi.Input[_builtins.str] action_type: Sepcifies the action type, e.g. **workflow**.
        :param pulumi.Input[_builtins.str] command_type: Sepcifies the command type.
               The value can be: **ActionInstanceRunCommand**, **ActionInstanceDebugCommand**, **ActionInstanceTerminateCommand**,
               **ActionInstanceRetryCommand**.
        :param pulumi.Input[_builtins.str] playbook_context: Sepcifies the playbook context.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] simulation_context: Sepcifies the simulation context.
        :param pulumi.Input[_builtins.str] workflow_id: Sepcifies the workflow ID.
        :param pulumi.Input[_builtins.str] workspace_id: Sepcifies the workspace ID.
        """
        if action_instance_id is not None:
            pulumi.set(__self__, "action_instance_id", action_instance_id)
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if command_type is not None:
            pulumi.set(__self__, "command_type", command_type)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if playbook_context is not None:
            pulumi.set(__self__, "playbook_context", playbook_context)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if simulation_context is not None:
            pulumi.set(__self__, "simulation_context", simulation_context)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="actionInstanceId")
    def action_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sepcifies the action instance ID.
        """
        return pulumi.get(self, "action_instance_id")

    @action_instance_id.setter
    def action_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sepcifies the action type, e.g. **workflow**.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action_type", value)

    @_builtins.property
    @pulumi.getter(name="commandType")
    def command_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sepcifies the command type.
        The value can be: **ActionInstanceRunCommand**, **ActionInstanceDebugCommand**, **ActionInstanceTerminateCommand**,
        **ActionInstanceRetryCommand**.
        """
        return pulumi.get(self, "command_type")

    @command_type.setter
    def command_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "command_type", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="playbookContext")
    def playbook_context(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sepcifies the playbook context.
        """
        return pulumi.get(self, "playbook_context")

    @playbook_context.setter
    def playbook_context(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "playbook_context", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="simulationContext")
    def simulation_context(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sepcifies the simulation context.
        """
        return pulumi.get(self, "simulation_context")

    @simulation_context.setter
    def simulation_context(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "simulation_context", value)

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sepcifies the workflow ID.
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workflow_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sepcifies the workspace ID.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:secmaster/workflowAction:WorkflowAction")
class WorkflowAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 action_type: Optional[pulumi.Input[_builtins.str]] = None,
                 command_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 playbook_context: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 simulation_context: Optional[pulumi.Input[_builtins.str]] = None,
                 workflow_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SecMaster workflow action resource within HuaweiCloud.

        > Destroying this resource will not change the status of the workflow action resource.

        ## Example Usage

        ### Basic Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        workflow_id = config.require_object("workflowId")
        test = huaweicloud.secmaster.WorkflowAction("test",
            workspace_id=workspace_id,
            workflow_id=workflow_id,
            command_type="ActionInstanceRunCommand",
            action_type="workflow")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action_instance_id: Sepcifies the action instance ID.
        :param pulumi.Input[_builtins.str] action_type: Sepcifies the action type, e.g. **workflow**.
        :param pulumi.Input[_builtins.str] command_type: Sepcifies the command type.
               The value can be: **ActionInstanceRunCommand**, **ActionInstanceDebugCommand**, **ActionInstanceTerminateCommand**,
               **ActionInstanceRetryCommand**.
        :param pulumi.Input[_builtins.str] playbook_context: Sepcifies the playbook context.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] simulation_context: Sepcifies the simulation context.
        :param pulumi.Input[_builtins.str] workflow_id: Sepcifies the workflow ID.
        :param pulumi.Input[_builtins.str] workspace_id: Sepcifies the workspace ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkflowActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SecMaster workflow action resource within HuaweiCloud.

        > Destroying this resource will not change the status of the workflow action resource.

        ## Example Usage

        ### Basic Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        workflow_id = config.require_object("workflowId")
        test = huaweicloud.secmaster.WorkflowAction("test",
            workspace_id=workspace_id,
            workflow_id=workflow_id,
            command_type="ActionInstanceRunCommand",
            action_type="workflow")
        ```

        :param str resource_name: The name of the resource.
        :param WorkflowActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkflowActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 action_type: Optional[pulumi.Input[_builtins.str]] = None,
                 command_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 playbook_context: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 simulation_context: Optional[pulumi.Input[_builtins.str]] = None,
                 workflow_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkflowActionArgs.__new__(WorkflowActionArgs)

            __props__.__dict__["action_instance_id"] = action_instance_id
            if action_type is None and not opts.urn:
                raise TypeError("Missing required property 'action_type'")
            __props__.__dict__["action_type"] = action_type
            if command_type is None and not opts.urn:
                raise TypeError("Missing required property 'command_type'")
            __props__.__dict__["command_type"] = command_type
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["playbook_context"] = playbook_context
            __props__.__dict__["region"] = region
            __props__.__dict__["simulation_context"] = simulation_context
            if workflow_id is None and not opts.urn:
                raise TypeError("Missing required property 'workflow_id'")
            __props__.__dict__["workflow_id"] = workflow_id
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
        super(WorkflowAction, __self__).__init__(
            'huaweicloud:secmaster/workflowAction:WorkflowAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            action_type: Optional[pulumi.Input[_builtins.str]] = None,
            command_type: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            playbook_context: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            simulation_context: Optional[pulumi.Input[_builtins.str]] = None,
            workflow_id: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'WorkflowAction':
        """
        Get an existing WorkflowAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action_instance_id: Sepcifies the action instance ID.
        :param pulumi.Input[_builtins.str] action_type: Sepcifies the action type, e.g. **workflow**.
        :param pulumi.Input[_builtins.str] command_type: Sepcifies the command type.
               The value can be: **ActionInstanceRunCommand**, **ActionInstanceDebugCommand**, **ActionInstanceTerminateCommand**,
               **ActionInstanceRetryCommand**.
        :param pulumi.Input[_builtins.str] playbook_context: Sepcifies the playbook context.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] simulation_context: Sepcifies the simulation context.
        :param pulumi.Input[_builtins.str] workflow_id: Sepcifies the workflow ID.
        :param pulumi.Input[_builtins.str] workspace_id: Sepcifies the workspace ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkflowActionState.__new__(_WorkflowActionState)

        __props__.__dict__["action_instance_id"] = action_instance_id
        __props__.__dict__["action_type"] = action_type
        __props__.__dict__["command_type"] = command_type
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["playbook_context"] = playbook_context
        __props__.__dict__["region"] = region
        __props__.__dict__["simulation_context"] = simulation_context
        __props__.__dict__["workflow_id"] = workflow_id
        __props__.__dict__["workspace_id"] = workspace_id
        return WorkflowAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="actionInstanceId")
    def action_instance_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Sepcifies the action instance ID.
        """
        return pulumi.get(self, "action_instance_id")

    @_builtins.property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Output[_builtins.str]:
        """
        Sepcifies the action type, e.g. **workflow**.
        """
        return pulumi.get(self, "action_type")

    @_builtins.property
    @pulumi.getter(name="commandType")
    def command_type(self) -> pulumi.Output[_builtins.str]:
        """
        Sepcifies the command type.
        The value can be: **ActionInstanceRunCommand**, **ActionInstanceDebugCommand**, **ActionInstanceTerminateCommand**,
        **ActionInstanceRetryCommand**.
        """
        return pulumi.get(self, "command_type")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="playbookContext")
    def playbook_context(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Sepcifies the playbook context.
        """
        return pulumi.get(self, "playbook_context")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="simulationContext")
    def simulation_context(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Sepcifies the simulation context.
        """
        return pulumi.get(self, "simulation_context")

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Output[_builtins.str]:
        """
        Sepcifies the workflow ID.
        """
        return pulumi.get(self, "workflow_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Sepcifies the workspace ID.
        """
        return pulumi.get(self, "workspace_id")

