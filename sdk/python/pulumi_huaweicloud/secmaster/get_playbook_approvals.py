# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPlaybookApprovalsResult',
    'AwaitableGetPlaybookApprovalsResult',
    'get_playbook_approvals',
    'get_playbook_approvals_output',
]

@pulumi.output_type
class GetPlaybookApprovalsResult:
    """
    A collection of values returned by getPlaybookApprovals.
    """
    def __init__(__self__, approve_type=None, datas=None, id=None, region=None, resource_id=None, workspace_id=None):
        if approve_type and not isinstance(approve_type, str):
            raise TypeError("Expected argument 'approve_type' to be a str")
        pulumi.set(__self__, "approve_type", approve_type)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="approveType")
    def approve_type(self) -> _builtins.str:
        return pulumi.get(self, "approve_type")

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetPlaybookApprovalsDataResult']:
        """
        The list of playbook review result.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetPlaybookApprovalsResult(GetPlaybookApprovalsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlaybookApprovalsResult(
            approve_type=self.approve_type,
            datas=self.datas,
            id=self.id,
            region=self.region,
            resource_id=self.resource_id,
            workspace_id=self.workspace_id)


def get_playbook_approvals(approve_type: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           resource_id: Optional[_builtins.str] = None,
                           workspace_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlaybookApprovalsResult:
    """
    Use this data source to get the list of SecMaster playbook review results.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    resource_id = config.require_object("resourceId")
    approve_type = config.require_object("approveType")
    test = huaweicloud.secmaster.get_playbook_approvals(workspace_id=workspace_id,
        resource_id=resource_id,
        approve_type=approve_type)
    ```


    :param _builtins.str approve_type: Specifies the review type.
           The valid values are as follows:
           + **PLAYBOOK**: Indicates playbook.
           + **AOP_WORKFLOW**: Indicates workflow.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the resource ID.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['approveType'] = approve_type
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getPlaybookApprovals:getPlaybookApprovals', __args__, opts=opts, typ=GetPlaybookApprovalsResult).value

    return AwaitableGetPlaybookApprovalsResult(
        approve_type=pulumi.get(__ret__, 'approve_type'),
        datas=pulumi.get(__ret__, 'datas'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_playbook_approvals_output(approve_type: Optional[pulumi.Input[_builtins.str]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlaybookApprovalsResult]:
    """
    Use this data source to get the list of SecMaster playbook review results.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    resource_id = config.require_object("resourceId")
    approve_type = config.require_object("approveType")
    test = huaweicloud.secmaster.get_playbook_approvals(workspace_id=workspace_id,
        resource_id=resource_id,
        approve_type=approve_type)
    ```


    :param _builtins.str approve_type: Specifies the review type.
           The valid values are as follows:
           + **PLAYBOOK**: Indicates playbook.
           + **AOP_WORKFLOW**: Indicates workflow.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the resource ID.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['approveType'] = approve_type
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getPlaybookApprovals:getPlaybookApprovals', __args__, opts=opts, typ=GetPlaybookApprovalsResult)
    return __ret__.apply(lambda __response__: GetPlaybookApprovalsResult(
        approve_type=pulumi.get(__response__, 'approve_type'),
        datas=pulumi.get(__response__, 'datas'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
