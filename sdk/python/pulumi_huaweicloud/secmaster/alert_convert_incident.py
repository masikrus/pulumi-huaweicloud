# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlertConvertIncidentArgs', 'AlertConvertIncident']

@pulumi.input_type
class AlertConvertIncidentArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 incident_type: pulumi.Input['AlertConvertIncidentIncidentTypeArgs'],
                 workspace_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AlertConvertIncident resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ids: Specifies the IDs of the alerts to be converted into incidents.
        :param pulumi.Input['AlertConvertIncidentIncidentTypeArgs'] incident_type: Specifies the child incident type.
               
               > Exactly one of `id`, `category` or  `incident_type` must be set.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] title: Specifies the converted incident name.
               
               <a name="convert_incident_type"></a>
               The `incident_type` block supports:
        """
        pulumi.set(__self__, "ids", ids)
        pulumi.set(__self__, "incident_type", incident_type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the IDs of the alerts to be converted into incidents.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "ids", value)

    @_builtins.property
    @pulumi.getter(name="incidentType")
    def incident_type(self) -> pulumi.Input['AlertConvertIncidentIncidentTypeArgs']:
        """
        Specifies the child incident type.

        > Exactly one of `id`, `category` or  `incident_type` must be set.
        """
        return pulumi.get(self, "incident_type")

    @incident_type.setter
    def incident_type(self, value: pulumi.Input['AlertConvertIncidentIncidentTypeArgs']):
        pulumi.set(self, "incident_type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workspace.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the converted incident name.

        <a name="convert_incident_type"></a>
        The `incident_type` block supports:
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class _AlertConvertIncidentState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 incident_type: Optional[pulumi.Input['AlertConvertIncidentIncidentTypeArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AlertConvertIncident resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ids: Specifies the IDs of the alerts to be converted into incidents.
        :param pulumi.Input['AlertConvertIncidentIncidentTypeArgs'] incident_type: Specifies the child incident type.
               
               > Exactly one of `id`, `category` or  `incident_type` must be set.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] title: Specifies the converted incident name.
               
               <a name="convert_incident_type"></a>
               The `incident_type` block supports:
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if incident_type is not None:
            pulumi.set(__self__, "incident_type", incident_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the IDs of the alerts to be converted into incidents.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ids", value)

    @_builtins.property
    @pulumi.getter(name="incidentType")
    def incident_type(self) -> Optional[pulumi.Input['AlertConvertIncidentIncidentTypeArgs']]:
        """
        Specifies the child incident type.

        > Exactly one of `id`, `category` or  `incident_type` must be set.
        """
        return pulumi.get(self, "incident_type")

    @incident_type.setter
    def incident_type(self, value: Optional[pulumi.Input['AlertConvertIncidentIncidentTypeArgs']]):
        pulumi.set(self, "incident_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the converted incident name.

        <a name="convert_incident_type"></a>
        The `incident_type` block supports:
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workspace.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:secmaster/alertConvertIncident:AlertConvertIncident")
class AlertConvertIncident(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 incident_type: Optional[pulumi.Input[Union['AlertConvertIncidentIncidentTypeArgs', 'AlertConvertIncidentIncidentTypeArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a resource to convert alert into incident within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        alert_ids = config.require_object("alertIds")
        incident_title = config.require_object("incidentTitle")
        test = huaweicloud.secmaster.AlertConvertIncident("test",
            workspace_id=workspace_id,
            ids=alert_ids,
            title=incident_title,
            incident_type={
                "category": "DDoS",
                "incident_type": "ACK Flood",
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ids: Specifies the IDs of the alerts to be converted into incidents.
        :param pulumi.Input[Union['AlertConvertIncidentIncidentTypeArgs', 'AlertConvertIncidentIncidentTypeArgsDict']] incident_type: Specifies the child incident type.
               
               > Exactly one of `id`, `category` or  `incident_type` must be set.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] title: Specifies the converted incident name.
               
               <a name="convert_incident_type"></a>
               The `incident_type` block supports:
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlertConvertIncidentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a resource to convert alert into incident within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        alert_ids = config.require_object("alertIds")
        incident_title = config.require_object("incidentTitle")
        test = huaweicloud.secmaster.AlertConvertIncident("test",
            workspace_id=workspace_id,
            ids=alert_ids,
            title=incident_title,
            incident_type={
                "category": "DDoS",
                "incident_type": "ACK Flood",
            })
        ```

        :param str resource_name: The name of the resource.
        :param AlertConvertIncidentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlertConvertIncidentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 incident_type: Optional[pulumi.Input[Union['AlertConvertIncidentIncidentTypeArgs', 'AlertConvertIncidentIncidentTypeArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlertConvertIncidentArgs.__new__(AlertConvertIncidentArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if ids is None and not opts.urn:
                raise TypeError("Missing required property 'ids'")
            __props__.__dict__["ids"] = ids
            if incident_type is None and not opts.urn:
                raise TypeError("Missing required property 'incident_type'")
            __props__.__dict__["incident_type"] = incident_type
            __props__.__dict__["region"] = region
            __props__.__dict__["title"] = title
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
        super(AlertConvertIncident, __self__).__init__(
            'huaweicloud:secmaster/alertConvertIncident:AlertConvertIncident',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            incident_type: Optional[pulumi.Input[Union['AlertConvertIncidentIncidentTypeArgs', 'AlertConvertIncidentIncidentTypeArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            title: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AlertConvertIncident':
        """
        Get an existing AlertConvertIncident resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ids: Specifies the IDs of the alerts to be converted into incidents.
        :param pulumi.Input[Union['AlertConvertIncidentIncidentTypeArgs', 'AlertConvertIncidentIncidentTypeArgsDict']] incident_type: Specifies the child incident type.
               
               > Exactly one of `id`, `category` or  `incident_type` must be set.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] title: Specifies the converted incident name.
               
               <a name="convert_incident_type"></a>
               The `incident_type` block supports:
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlertConvertIncidentState.__new__(_AlertConvertIncidentState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["ids"] = ids
        __props__.__dict__["incident_type"] = incident_type
        __props__.__dict__["region"] = region
        __props__.__dict__["title"] = title
        __props__.__dict__["workspace_id"] = workspace_id
        return AlertConvertIncident(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the IDs of the alerts to be converted into incidents.
        """
        return pulumi.get(self, "ids")

    @_builtins.property
    @pulumi.getter(name="incidentType")
    def incident_type(self) -> pulumi.Output['outputs.AlertConvertIncidentIncidentType']:
        """
        Specifies the child incident type.

        > Exactly one of `id`, `category` or  `incident_type` must be set.
        """
        return pulumi.get(self, "incident_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the converted incident name.

        <a name="convert_incident_type"></a>
        The `incident_type` block supports:
        """
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workspace.
        """
        return pulumi.get(self, "workspace_id")

