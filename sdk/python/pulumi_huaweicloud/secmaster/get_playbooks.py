# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPlaybooksResult',
    'AwaitableGetPlaybooksResult',
    'get_playbooks',
    'get_playbooks_output',
]

@pulumi.output_type
class GetPlaybooksResult:
    """
    A collection of values returned by getPlaybooks.
    """
    def __init__(__self__, data_class_name=None, description=None, enabled=None, id=None, name=None, playbooks=None, region=None, workspace_id=None):
        if data_class_name and not isinstance(data_class_name, str):
            raise TypeError("Expected argument 'data_class_name' to be a str")
        pulumi.set(__self__, "data_class_name", data_class_name)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enabled and not isinstance(enabled, str):
            raise TypeError("Expected argument 'enabled' to be a str")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if playbooks and not isinstance(playbooks, list):
            raise TypeError("Expected argument 'playbooks' to be a list")
        pulumi.set(__self__, "playbooks", playbooks)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="dataClassName")
    def data_class_name(self) -> Optional[_builtins.str]:
        """
        The data class name.
        """
        return pulumi.get(self, "data_class_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The playbook description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.str]:
        """
        Whether the playbook is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The playbook name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def playbooks(self) -> Sequence['outputs.GetPlaybooksPlaybookResult']:
        """
        The playbook list.
        """
        return pulumi.get(self, "playbooks")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        The workspace ID to which the playbook belongs.
        """
        return pulumi.get(self, "workspace_id")


class AwaitableGetPlaybooksResult(GetPlaybooksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlaybooksResult(
            data_class_name=self.data_class_name,
            description=self.description,
            enabled=self.enabled,
            id=self.id,
            name=self.name,
            playbooks=self.playbooks,
            region=self.region,
            workspace_id=self.workspace_id)


def get_playbooks(data_class_name: Optional[_builtins.str] = None,
                  description: Optional[_builtins.str] = None,
                  enabled: Optional[_builtins.str] = None,
                  name: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  workspace_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlaybooksResult:
    """
    Use this data source to get the list of SecMaster playbooks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.secmaster.get_playbooks(workspace_id=workspace_id,
        name=name)
    ```


    :param _builtins.str data_class_name: Specifies the data class name.
    :param _builtins.str description: Specifies the playbook description.
    :param _builtins.str enabled: Specifies whether the playbook is enabled. The value can be **true** or **false**.
    :param _builtins.str name: Specifies the playbook name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['dataClassName'] = data_class_name
    __args__['description'] = description
    __args__['enabled'] = enabled
    __args__['name'] = name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getPlaybooks:getPlaybooks', __args__, opts=opts, typ=GetPlaybooksResult).value

    return AwaitableGetPlaybooksResult(
        data_class_name=pulumi.get(__ret__, 'data_class_name'),
        description=pulumi.get(__ret__, 'description'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        playbooks=pulumi.get(__ret__, 'playbooks'),
        region=pulumi.get(__ret__, 'region'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_playbooks_output(data_class_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         enabled: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlaybooksResult]:
    """
    Use this data source to get the list of SecMaster playbooks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.secmaster.get_playbooks(workspace_id=workspace_id,
        name=name)
    ```


    :param _builtins.str data_class_name: Specifies the data class name.
    :param _builtins.str description: Specifies the playbook description.
    :param _builtins.str enabled: Specifies whether the playbook is enabled. The value can be **true** or **false**.
    :param _builtins.str name: Specifies the playbook name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['dataClassName'] = data_class_name
    __args__['description'] = description
    __args__['enabled'] = enabled
    __args__['name'] = name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getPlaybooks:getPlaybooks', __args__, opts=opts, typ=GetPlaybooksResult)
    return __ret__.apply(lambda __response__: GetPlaybooksResult(
        data_class_name=pulumi.get(__response__, 'data_class_name'),
        description=pulumi.get(__response__, 'description'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        playbooks=pulumi.get(__response__, 'playbooks'),
        region=pulumi.get(__response__, 'region'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
