# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IndicatorArgs', 'Indicator']

@pulumi.input_type
class IndicatorArgs:
    def __init__(__self__, *,
                 confidence: pulumi.Input[_builtins.int],
                 data_source: pulumi.Input['IndicatorDataSourceArgs'],
                 first_occurrence_time: pulumi.Input[_builtins.str],
                 granularity: pulumi.Input[_builtins.int],
                 last_occurrence_time: pulumi.Input[_builtins.str],
                 status: pulumi.Input[_builtins.str],
                 threat_degree: pulumi.Input[_builtins.str],
                 type: pulumi.Input['IndicatorTypeArgs'],
                 value: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 invalid: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Indicator resource.
        :param pulumi.Input[_builtins.int] confidence: Specifies the confidence of the indicator.
               The value ranges from `80` to `100`.
        :param pulumi.Input['IndicatorDataSourceArgs'] data_source: Specifies the data source of the indicator.
               The data_source structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] first_occurrence_time: Specifies the first occurrence time of the indicator.
               For example: 2023-04-18T13:00:00.000+08:00
        :param pulumi.Input[_builtins.int] granularity: Specifies the granularity of the indicator.
               The value can be:
               + **1**: First time observed;
               + **2**: In-house data;
               + **3**: To be purchased;
               + **4**: Queried from external networks;
        :param pulumi.Input[_builtins.str] last_occurrence_time: Specifies the last occurrence time of the indicator.
               For example: 2023-04-18T13:00:00.000+08:00
        :param pulumi.Input[_builtins.str] status: Specifies the indicator status.
               The value can be: **Open**, **Closed** and **Revoked**.
        :param pulumi.Input[_builtins.str] threat_degree: Specifies the threat degree.
               The value can be: **Black**, **White** and **Gray**.
        :param pulumi.Input['IndicatorTypeArgs'] type: Specifies the indicator type.
               The type structure is documented below.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the indicator.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the indicator belongs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] invalid: Specifies whether the indicator is invalid.
               
               <a name="Indicator_IndicatorType"></a>
               The `type` block supports:
        :param pulumi.Input[_builtins.str] labels: Specifies the labels of the indicator in comma-separated string.
        :param pulumi.Input[_builtins.str] name: Specifies the indicator name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "confidence", confidence)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "first_occurrence_time", first_occurrence_time)
        pulumi.set(__self__, "granularity", granularity)
        pulumi.set(__self__, "last_occurrence_time", last_occurrence_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "threat_degree", threat_degree)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def confidence(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the confidence of the indicator.
        The value ranges from `80` to `100`.
        """
        return pulumi.get(self, "confidence")

    @confidence.setter
    def confidence(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "confidence", value)

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input['IndicatorDataSourceArgs']:
        """
        Specifies the data source of the indicator.
        The data_source structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input['IndicatorDataSourceArgs']):
        pulumi.set(self, "data_source", value)

    @_builtins.property
    @pulumi.getter(name="firstOccurrenceTime")
    def first_occurrence_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the first occurrence time of the indicator.
        For example: 2023-04-18T13:00:00.000+08:00
        """
        return pulumi.get(self, "first_occurrence_time")

    @first_occurrence_time.setter
    def first_occurrence_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "first_occurrence_time", value)

    @_builtins.property
    @pulumi.getter
    def granularity(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the granularity of the indicator.
        The value can be:
        + **1**: First time observed;
        + **2**: In-house data;
        + **3**: To be purchased;
        + **4**: Queried from external networks;
        """
        return pulumi.get(self, "granularity")

    @granularity.setter
    def granularity(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "granularity", value)

    @_builtins.property
    @pulumi.getter(name="lastOccurrenceTime")
    def last_occurrence_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the last occurrence time of the indicator.
        For example: 2023-04-18T13:00:00.000+08:00
        """
        return pulumi.get(self, "last_occurrence_time")

    @last_occurrence_time.setter
    def last_occurrence_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "last_occurrence_time", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the indicator status.
        The value can be: **Open**, **Closed** and **Revoked**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="threatDegree")
    def threat_degree(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the threat degree.
        The value can be: **Black**, **White** and **Gray**.
        """
        return pulumi.get(self, "threat_degree")

    @threat_degree.setter
    def threat_degree(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "threat_degree", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input['IndicatorTypeArgs']:
        """
        Specifies the indicator type.
        The type structure is documented below.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['IndicatorTypeArgs']):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the indicator.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workspace to which the indicator belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def invalid(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the indicator is invalid.

        <a name="Indicator_IndicatorType"></a>
        The `type` block supports:
        """
        return pulumi.get(self, "invalid")

    @invalid.setter
    def invalid(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "invalid", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the labels of the indicator in comma-separated string.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the indicator name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _IndicatorState:
    def __init__(__self__, *,
                 confidence: Optional[pulumi.Input[_builtins.int]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 data_source: Optional[pulumi.Input['IndicatorDataSourceArgs']] = None,
                 first_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
                 granularity: Optional[pulumi.Input[_builtins.int]] = None,
                 invalid: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[_builtins.str]] = None,
                 last_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 threat_degree: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input['IndicatorTypeArgs']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Indicator resources.
        :param pulumi.Input[_builtins.int] confidence: Specifies the confidence of the indicator.
               The value ranges from `80` to `100`.
        :param pulumi.Input[_builtins.str] created_at: The created time.
        :param pulumi.Input['IndicatorDataSourceArgs'] data_source: Specifies the data source of the indicator.
               The data_source structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] first_occurrence_time: Specifies the first occurrence time of the indicator.
               For example: 2023-04-18T13:00:00.000+08:00
        :param pulumi.Input[_builtins.int] granularity: Specifies the granularity of the indicator.
               The value can be:
               + **1**: First time observed;
               + **2**: In-house data;
               + **3**: To be purchased;
               + **4**: Queried from external networks;
        :param pulumi.Input[_builtins.bool] invalid: Specifies whether the indicator is invalid.
               
               <a name="Indicator_IndicatorType"></a>
               The `type` block supports:
        :param pulumi.Input[_builtins.str] labels: Specifies the labels of the indicator in comma-separated string.
        :param pulumi.Input[_builtins.str] last_occurrence_time: Specifies the last occurrence time of the indicator.
               For example: 2023-04-18T13:00:00.000+08:00
        :param pulumi.Input[_builtins.str] name: Specifies the indicator name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the indicator status.
               The value can be: **Open**, **Closed** and **Revoked**.
        :param pulumi.Input[_builtins.str] threat_degree: Specifies the threat degree.
               The value can be: **Black**, **White** and **Gray**.
        :param pulumi.Input['IndicatorTypeArgs'] type: Specifies the indicator type.
               The type structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: The updated time.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the indicator.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the indicator belongs.
               
               Changing this parameter will create a new resource.
        """
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if first_occurrence_time is not None:
            pulumi.set(__self__, "first_occurrence_time", first_occurrence_time)
        if granularity is not None:
            pulumi.set(__self__, "granularity", granularity)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_occurrence_time is not None:
            pulumi.set(__self__, "last_occurrence_time", last_occurrence_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if threat_degree is not None:
            pulumi.set(__self__, "threat_degree", threat_degree)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def confidence(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the confidence of the indicator.
        The value ranges from `80` to `100`.
        """
        return pulumi.get(self, "confidence")

    @confidence.setter
    def confidence(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "confidence", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The created time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input['IndicatorDataSourceArgs']]:
        """
        Specifies the data source of the indicator.
        The data_source structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input['IndicatorDataSourceArgs']]):
        pulumi.set(self, "data_source", value)

    @_builtins.property
    @pulumi.getter(name="firstOccurrenceTime")
    def first_occurrence_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the first occurrence time of the indicator.
        For example: 2023-04-18T13:00:00.000+08:00
        """
        return pulumi.get(self, "first_occurrence_time")

    @first_occurrence_time.setter
    def first_occurrence_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "first_occurrence_time", value)

    @_builtins.property
    @pulumi.getter
    def granularity(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the granularity of the indicator.
        The value can be:
        + **1**: First time observed;
        + **2**: In-house data;
        + **3**: To be purchased;
        + **4**: Queried from external networks;
        """
        return pulumi.get(self, "granularity")

    @granularity.setter
    def granularity(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "granularity", value)

    @_builtins.property
    @pulumi.getter
    def invalid(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the indicator is invalid.

        <a name="Indicator_IndicatorType"></a>
        The `type` block supports:
        """
        return pulumi.get(self, "invalid")

    @invalid.setter
    def invalid(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "invalid", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the labels of the indicator in comma-separated string.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="lastOccurrenceTime")
    def last_occurrence_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the last occurrence time of the indicator.
        For example: 2023-04-18T13:00:00.000+08:00
        """
        return pulumi.get(self, "last_occurrence_time")

    @last_occurrence_time.setter
    def last_occurrence_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_occurrence_time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the indicator name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the indicator status.
        The value can be: **Open**, **Closed** and **Revoked**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="threatDegree")
    def threat_degree(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the threat degree.
        The value can be: **Black**, **White** and **Gray**.
        """
        return pulumi.get(self, "threat_degree")

    @threat_degree.setter
    def threat_degree(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "threat_degree", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['IndicatorTypeArgs']]:
        """
        Specifies the indicator type.
        The type structure is documented below.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['IndicatorTypeArgs']]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The updated time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of the indicator.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workspace to which the indicator belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:secmaster/indicator:Indicator")
class Indicator(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confidence: Optional[pulumi.Input[_builtins.int]] = None,
                 data_source: Optional[pulumi.Input[Union['IndicatorDataSourceArgs', 'IndicatorDataSourceArgsDict']]] = None,
                 first_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
                 granularity: Optional[pulumi.Input[_builtins.int]] = None,
                 invalid: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[_builtins.str]] = None,
                 last_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 threat_degree: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[Union['IndicatorTypeArgs', 'IndicatorTypeArgsDict']]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SecMaster indicator resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        type_id = config.require_object("typeId")
        test = huaweicloud.secmaster.Indicator("test",
            workspace_id=workspace_id,
            name="demo",
            type={
                "category": "Domain",
                "indicator_type": "Domain",
                "id": type_id,
            },
            data_source={
                "source_type": 1,
                "product_feature": "hss",
                "product_name": "hss",
            },
            status="Open",
            confidence=80,
            first_occurrence_time="2023-10-24T17:23:55.000+08:00",
            last_occurrence_time="2023-10-25T11:15:30.000+08:00",
            threat_degree="Black",
            granularity=1,
            value="test.terraform.com")
        ```

        ## Import

        The indicator can be imported using the workspace ID and the indicator ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/indicator:Indicator test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] confidence: Specifies the confidence of the indicator.
               The value ranges from `80` to `100`.
        :param pulumi.Input[Union['IndicatorDataSourceArgs', 'IndicatorDataSourceArgsDict']] data_source: Specifies the data source of the indicator.
               The data_source structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] first_occurrence_time: Specifies the first occurrence time of the indicator.
               For example: 2023-04-18T13:00:00.000+08:00
        :param pulumi.Input[_builtins.int] granularity: Specifies the granularity of the indicator.
               The value can be:
               + **1**: First time observed;
               + **2**: In-house data;
               + **3**: To be purchased;
               + **4**: Queried from external networks;
        :param pulumi.Input[_builtins.bool] invalid: Specifies whether the indicator is invalid.
               
               <a name="Indicator_IndicatorType"></a>
               The `type` block supports:
        :param pulumi.Input[_builtins.str] labels: Specifies the labels of the indicator in comma-separated string.
        :param pulumi.Input[_builtins.str] last_occurrence_time: Specifies the last occurrence time of the indicator.
               For example: 2023-04-18T13:00:00.000+08:00
        :param pulumi.Input[_builtins.str] name: Specifies the indicator name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the indicator status.
               The value can be: **Open**, **Closed** and **Revoked**.
        :param pulumi.Input[_builtins.str] threat_degree: Specifies the threat degree.
               The value can be: **Black**, **White** and **Gray**.
        :param pulumi.Input[Union['IndicatorTypeArgs', 'IndicatorTypeArgsDict']] type: Specifies the indicator type.
               The type structure is documented below.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the indicator.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the indicator belongs.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IndicatorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SecMaster indicator resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        type_id = config.require_object("typeId")
        test = huaweicloud.secmaster.Indicator("test",
            workspace_id=workspace_id,
            name="demo",
            type={
                "category": "Domain",
                "indicator_type": "Domain",
                "id": type_id,
            },
            data_source={
                "source_type": 1,
                "product_feature": "hss",
                "product_name": "hss",
            },
            status="Open",
            confidence=80,
            first_occurrence_time="2023-10-24T17:23:55.000+08:00",
            last_occurrence_time="2023-10-25T11:15:30.000+08:00",
            threat_degree="Black",
            granularity=1,
            value="test.terraform.com")
        ```

        ## Import

        The indicator can be imported using the workspace ID and the indicator ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/indicator:Indicator test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param IndicatorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IndicatorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confidence: Optional[pulumi.Input[_builtins.int]] = None,
                 data_source: Optional[pulumi.Input[Union['IndicatorDataSourceArgs', 'IndicatorDataSourceArgsDict']]] = None,
                 first_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
                 granularity: Optional[pulumi.Input[_builtins.int]] = None,
                 invalid: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[_builtins.str]] = None,
                 last_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 threat_degree: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[Union['IndicatorTypeArgs', 'IndicatorTypeArgsDict']]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IndicatorArgs.__new__(IndicatorArgs)

            if confidence is None and not opts.urn:
                raise TypeError("Missing required property 'confidence'")
            __props__.__dict__["confidence"] = confidence
            if data_source is None and not opts.urn:
                raise TypeError("Missing required property 'data_source'")
            __props__.__dict__["data_source"] = data_source
            if first_occurrence_time is None and not opts.urn:
                raise TypeError("Missing required property 'first_occurrence_time'")
            __props__.__dict__["first_occurrence_time"] = first_occurrence_time
            if granularity is None and not opts.urn:
                raise TypeError("Missing required property 'granularity'")
            __props__.__dict__["granularity"] = granularity
            __props__.__dict__["invalid"] = invalid
            __props__.__dict__["labels"] = labels
            if last_occurrence_time is None and not opts.urn:
                raise TypeError("Missing required property 'last_occurrence_time'")
            __props__.__dict__["last_occurrence_time"] = last_occurrence_time
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            if threat_degree is None and not opts.urn:
                raise TypeError("Missing required property 'threat_degree'")
            __props__.__dict__["threat_degree"] = threat_degree
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(Indicator, __self__).__init__(
            'huaweicloud:secmaster/indicator:Indicator',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            confidence: Optional[pulumi.Input[_builtins.int]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            data_source: Optional[pulumi.Input[Union['IndicatorDataSourceArgs', 'IndicatorDataSourceArgsDict']]] = None,
            first_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
            granularity: Optional[pulumi.Input[_builtins.int]] = None,
            invalid: Optional[pulumi.Input[_builtins.bool]] = None,
            labels: Optional[pulumi.Input[_builtins.str]] = None,
            last_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            threat_degree: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[Union['IndicatorTypeArgs', 'IndicatorTypeArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            value: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Indicator':
        """
        Get an existing Indicator resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] confidence: Specifies the confidence of the indicator.
               The value ranges from `80` to `100`.
        :param pulumi.Input[_builtins.str] created_at: The created time.
        :param pulumi.Input[Union['IndicatorDataSourceArgs', 'IndicatorDataSourceArgsDict']] data_source: Specifies the data source of the indicator.
               The data_source structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] first_occurrence_time: Specifies the first occurrence time of the indicator.
               For example: 2023-04-18T13:00:00.000+08:00
        :param pulumi.Input[_builtins.int] granularity: Specifies the granularity of the indicator.
               The value can be:
               + **1**: First time observed;
               + **2**: In-house data;
               + **3**: To be purchased;
               + **4**: Queried from external networks;
        :param pulumi.Input[_builtins.bool] invalid: Specifies whether the indicator is invalid.
               
               <a name="Indicator_IndicatorType"></a>
               The `type` block supports:
        :param pulumi.Input[_builtins.str] labels: Specifies the labels of the indicator in comma-separated string.
        :param pulumi.Input[_builtins.str] last_occurrence_time: Specifies the last occurrence time of the indicator.
               For example: 2023-04-18T13:00:00.000+08:00
        :param pulumi.Input[_builtins.str] name: Specifies the indicator name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the indicator status.
               The value can be: **Open**, **Closed** and **Revoked**.
        :param pulumi.Input[_builtins.str] threat_degree: Specifies the threat degree.
               The value can be: **Black**, **White** and **Gray**.
        :param pulumi.Input[Union['IndicatorTypeArgs', 'IndicatorTypeArgsDict']] type: Specifies the indicator type.
               The type structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: The updated time.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the indicator.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the indicator belongs.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IndicatorState.__new__(_IndicatorState)

        __props__.__dict__["confidence"] = confidence
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["data_source"] = data_source
        __props__.__dict__["first_occurrence_time"] = first_occurrence_time
        __props__.__dict__["granularity"] = granularity
        __props__.__dict__["invalid"] = invalid
        __props__.__dict__["labels"] = labels
        __props__.__dict__["last_occurrence_time"] = last_occurrence_time
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["threat_degree"] = threat_degree
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["value"] = value
        __props__.__dict__["workspace_id"] = workspace_id
        return Indicator(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def confidence(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the confidence of the indicator.
        The value ranges from `80` to `100`.
        """
        return pulumi.get(self, "confidence")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The created time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Output['outputs.IndicatorDataSource']:
        """
        Specifies the data source of the indicator.
        The data_source structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "data_source")

    @_builtins.property
    @pulumi.getter(name="firstOccurrenceTime")
    def first_occurrence_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the first occurrence time of the indicator.
        For example: 2023-04-18T13:00:00.000+08:00
        """
        return pulumi.get(self, "first_occurrence_time")

    @_builtins.property
    @pulumi.getter
    def granularity(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the granularity of the indicator.
        The value can be:
        + **1**: First time observed;
        + **2**: In-house data;
        + **3**: To be purchased;
        + **4**: Queried from external networks;
        """
        return pulumi.get(self, "granularity")

    @_builtins.property
    @pulumi.getter
    def invalid(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the indicator is invalid.

        <a name="Indicator_IndicatorType"></a>
        The `type` block supports:
        """
        return pulumi.get(self, "invalid")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the labels of the indicator in comma-separated string.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="lastOccurrenceTime")
    def last_occurrence_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the last occurrence time of the indicator.
        For example: 2023-04-18T13:00:00.000+08:00
        """
        return pulumi.get(self, "last_occurrence_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the indicator name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the indicator status.
        The value can be: **Open**, **Closed** and **Revoked**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="threatDegree")
    def threat_degree(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the threat degree.
        The value can be: **Black**, **White** and **Gray**.
        """
        return pulumi.get(self, "threat_degree")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output['outputs.IndicatorType']:
        """
        Specifies the indicator type.
        The type structure is documented below.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The updated time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the value of the indicator.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workspace to which the indicator belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

