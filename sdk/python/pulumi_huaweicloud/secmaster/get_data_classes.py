# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataClassesResult',
    'AwaitableGetDataClassesResult',
    'get_data_classes',
    'get_data_classes_output',
]

@pulumi.output_type
class GetDataClassesResult:
    """
    A collection of values returned by getDataClasses.
    """
    def __init__(__self__, business_code=None, data_classes=None, description=None, id=None, is_built_in=None, name=None, region=None, workspace_id=None):
        if business_code and not isinstance(business_code, str):
            raise TypeError("Expected argument 'business_code' to be a str")
        pulumi.set(__self__, "business_code", business_code)
        if data_classes and not isinstance(data_classes, list):
            raise TypeError("Expected argument 'data_classes' to be a list")
        pulumi.set(__self__, "data_classes", data_classes)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_built_in and not isinstance(is_built_in, str):
            raise TypeError("Expected argument 'is_built_in' to be a str")
        pulumi.set(__self__, "is_built_in", is_built_in)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="businessCode")
    def business_code(self) -> Optional[_builtins.str]:
        """
        The business code of the data class.
        """
        return pulumi.get(self, "business_code")

    @_builtins.property
    @pulumi.getter(name="dataClasses")
    def data_classes(self) -> Sequence['outputs.GetDataClassesDataClassResult']:
        """
        The data class list.
        """
        return pulumi.get(self, "data_classes")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the data class.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isBuiltIn")
    def is_built_in(self) -> Optional[_builtins.str]:
        """
        Whether the data class is built in SecMaster.
        """
        return pulumi.get(self, "is_built_in")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the data class.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        The workspace ID.
        """
        return pulumi.get(self, "workspace_id")


class AwaitableGetDataClassesResult(GetDataClassesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataClassesResult(
            business_code=self.business_code,
            data_classes=self.data_classes,
            description=self.description,
            id=self.id,
            is_built_in=self.is_built_in,
            name=self.name,
            region=self.region,
            workspace_id=self.workspace_id)


def get_data_classes(business_code: Optional[_builtins.str] = None,
                     description: Optional[_builtins.str] = None,
                     is_built_in: Optional[_builtins.str] = None,
                     name: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     workspace_id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataClassesResult:
    """
    Use this data source to get the list of SecMaster data classes.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.secmaster.get_data_classes(workspace_id=workspace_id)
    ```


    :param _builtins.str business_code: Specifies the business code of the data class. Fuzzy matching is supported.
    :param _builtins.str description: Specifies the data class description. Fuzzy matching is supported.
    :param _builtins.str is_built_in: Specifies whether the data class is built in SecMaster.
           The value can be  **true** or **false**.
    :param _builtins.str name: Specifies the name of the data class. Fuzzy matching is supported.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['businessCode'] = business_code
    __args__['description'] = description
    __args__['isBuiltIn'] = is_built_in
    __args__['name'] = name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getDataClasses:getDataClasses', __args__, opts=opts, typ=GetDataClassesResult).value

    return AwaitableGetDataClassesResult(
        business_code=pulumi.get(__ret__, 'business_code'),
        data_classes=pulumi.get(__ret__, 'data_classes'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        is_built_in=pulumi.get(__ret__, 'is_built_in'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_data_classes_output(business_code: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            is_built_in: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataClassesResult]:
    """
    Use this data source to get the list of SecMaster data classes.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.secmaster.get_data_classes(workspace_id=workspace_id)
    ```


    :param _builtins.str business_code: Specifies the business code of the data class. Fuzzy matching is supported.
    :param _builtins.str description: Specifies the data class description. Fuzzy matching is supported.
    :param _builtins.str is_built_in: Specifies whether the data class is built in SecMaster.
           The value can be  **true** or **false**.
    :param _builtins.str name: Specifies the name of the data class. Fuzzy matching is supported.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['businessCode'] = business_code
    __args__['description'] = description
    __args__['isBuiltIn'] = is_built_in
    __args__['name'] = name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getDataClasses:getDataClasses', __args__, opts=opts, typ=GetDataClassesResult)
    return __ret__.apply(lambda __response__: GetDataClassesResult(
        business_code=pulumi.get(__response__, 'business_code'),
        data_classes=pulumi.get(__response__, 'data_classes'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        is_built_in=pulumi.get(__response__, 'is_built_in'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
