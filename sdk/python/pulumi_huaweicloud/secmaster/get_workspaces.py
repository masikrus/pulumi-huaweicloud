# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetWorkspacesResult',
    'AwaitableGetWorkspacesResult',
    'get_workspaces',
    'get_workspaces_output',
]

@pulumi.output_type
class GetWorkspacesResult:
    """
    A collection of values returned by getWorkspaces.
    """
    def __init__(__self__, create_time_end=None, create_time_start=None, description=None, enterprise_project_id=None, id=None, ids=None, is_view=None, name=None, region=None, view_bind_id=None, view_bind_name=None, workspaces=None):
        if create_time_end and not isinstance(create_time_end, str):
            raise TypeError("Expected argument 'create_time_end' to be a str")
        pulumi.set(__self__, "create_time_end", create_time_end)
        if create_time_start and not isinstance(create_time_start, str):
            raise TypeError("Expected argument 'create_time_start' to be a str")
        pulumi.set(__self__, "create_time_start", create_time_start)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, str):
            raise TypeError("Expected argument 'ids' to be a str")
        pulumi.set(__self__, "ids", ids)
        if is_view and not isinstance(is_view, str):
            raise TypeError("Expected argument 'is_view' to be a str")
        pulumi.set(__self__, "is_view", is_view)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if view_bind_id and not isinstance(view_bind_id, str):
            raise TypeError("Expected argument 'view_bind_id' to be a str")
        pulumi.set(__self__, "view_bind_id", view_bind_id)
        if view_bind_name and not isinstance(view_bind_name, str):
            raise TypeError("Expected argument 'view_bind_name' to be a str")
        pulumi.set(__self__, "view_bind_name", view_bind_name)
        if workspaces and not isinstance(workspaces, list):
            raise TypeError("Expected argument 'workspaces' to be a list")
        pulumi.set(__self__, "workspaces", workspaces)

    @_builtins.property
    @pulumi.getter(name="createTimeEnd")
    def create_time_end(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "create_time_end")

    @_builtins.property
    @pulumi.getter(name="createTimeStart")
    def create_time_start(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "create_time_start")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The workspace description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ids")

    @_builtins.property
    @pulumi.getter(name="isView")
    def is_view(self) -> Optional[_builtins.str]:
        """
        Whether the view is used.
        """
        return pulumi.get(self, "is_view")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The workspace name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="viewBindId")
    def view_bind_id(self) -> Optional[_builtins.str]:
        """
        The space ID bound to the view.
        """
        return pulumi.get(self, "view_bind_id")

    @_builtins.property
    @pulumi.getter(name="viewBindName")
    def view_bind_name(self) -> Optional[_builtins.str]:
        """
        The space name bound to the view.
        """
        return pulumi.get(self, "view_bind_name")

    @_builtins.property
    @pulumi.getter
    def workspaces(self) -> Sequence['outputs.GetWorkspacesWorkspaceResult']:
        """
        The list of workspaces.
        """
        return pulumi.get(self, "workspaces")


class AwaitableGetWorkspacesResult(GetWorkspacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkspacesResult(
            create_time_end=self.create_time_end,
            create_time_start=self.create_time_start,
            description=self.description,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            ids=self.ids,
            is_view=self.is_view,
            name=self.name,
            region=self.region,
            view_bind_id=self.view_bind_id,
            view_bind_name=self.view_bind_name,
            workspaces=self.workspaces)


def get_workspaces(create_time_end: Optional[_builtins.str] = None,
                   create_time_start: Optional[_builtins.str] = None,
                   description: Optional[_builtins.str] = None,
                   enterprise_project_id: Optional[_builtins.str] = None,
                   ids: Optional[_builtins.str] = None,
                   is_view: Optional[_builtins.str] = None,
                   name: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   view_bind_id: Optional[_builtins.str] = None,
                   view_bind_name: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkspacesResult:
    """
    Use this data source to get the list of SecMaster workspaces.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    test = huaweicloud.secmaster.get_workspaces(name=name)
    ```


    :param _builtins.str create_time_end: Specifies the creation end time, for example, 2024-04-2T16:08:09Z+0800.
    :param _builtins.str create_time_start: Specifies the creation start time, for example, 2024-04-26T16:08:09Z+0800.
    :param _builtins.str description: Specifies the workspace description.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str ids: Specifies the workspace IDs, which is separated by commas (,).
    :param _builtins.str is_view: Specifies whether to query the view. The value can be **true** or **false**.
    :param _builtins.str name: Specifies the workspace name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str view_bind_id: Specifies the space ID bound to the view.
    :param _builtins.str view_bind_name: Specifies the space name bound to the view.
    """
    __args__ = dict()
    __args__['createTimeEnd'] = create_time_end
    __args__['createTimeStart'] = create_time_start
    __args__['description'] = description
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['ids'] = ids
    __args__['isView'] = is_view
    __args__['name'] = name
    __args__['region'] = region
    __args__['viewBindId'] = view_bind_id
    __args__['viewBindName'] = view_bind_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getWorkspaces:getWorkspaces', __args__, opts=opts, typ=GetWorkspacesResult).value

    return AwaitableGetWorkspacesResult(
        create_time_end=pulumi.get(__ret__, 'create_time_end'),
        create_time_start=pulumi.get(__ret__, 'create_time_start'),
        description=pulumi.get(__ret__, 'description'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        is_view=pulumi.get(__ret__, 'is_view'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        view_bind_id=pulumi.get(__ret__, 'view_bind_id'),
        view_bind_name=pulumi.get(__ret__, 'view_bind_name'),
        workspaces=pulumi.get(__ret__, 'workspaces'))
def get_workspaces_output(create_time_end: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          create_time_start: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          ids: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          is_view: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          view_bind_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          view_bind_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkspacesResult]:
    """
    Use this data source to get the list of SecMaster workspaces.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    test = huaweicloud.secmaster.get_workspaces(name=name)
    ```


    :param _builtins.str create_time_end: Specifies the creation end time, for example, 2024-04-2T16:08:09Z+0800.
    :param _builtins.str create_time_start: Specifies the creation start time, for example, 2024-04-26T16:08:09Z+0800.
    :param _builtins.str description: Specifies the workspace description.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str ids: Specifies the workspace IDs, which is separated by commas (,).
    :param _builtins.str is_view: Specifies whether to query the view. The value can be **true** or **false**.
    :param _builtins.str name: Specifies the workspace name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str view_bind_id: Specifies the space ID bound to the view.
    :param _builtins.str view_bind_name: Specifies the space name bound to the view.
    """
    __args__ = dict()
    __args__['createTimeEnd'] = create_time_end
    __args__['createTimeStart'] = create_time_start
    __args__['description'] = description
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['ids'] = ids
    __args__['isView'] = is_view
    __args__['name'] = name
    __args__['region'] = region
    __args__['viewBindId'] = view_bind_id
    __args__['viewBindName'] = view_bind_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getWorkspaces:getWorkspaces', __args__, opts=opts, typ=GetWorkspacesResult)
    return __ret__.apply(lambda __response__: GetWorkspacesResult(
        create_time_end=pulumi.get(__response__, 'create_time_end'),
        create_time_start=pulumi.get(__response__, 'create_time_start'),
        description=pulumi.get(__response__, 'description'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        is_view=pulumi.get(__response__, 'is_view'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        view_bind_id=pulumi.get(__response__, 'view_bind_id'),
        view_bind_name=pulumi.get(__response__, 'view_bind_name'),
        workspaces=pulumi.get(__response__, 'workspaces')))
