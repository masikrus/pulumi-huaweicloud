# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPlaybookVersionsResult',
    'AwaitableGetPlaybookVersionsResult',
    'get_playbook_versions',
    'get_playbook_versions_output',
]

@pulumi.output_type
class GetPlaybookVersionsResult:
    """
    A collection of values returned by getPlaybookVersions.
    """
    def __init__(__self__, enabled=None, id=None, playbook_id=None, playbook_versions=None, region=None, status=None, type=None, workspace_id=None):
        if enabled and not isinstance(enabled, str):
            raise TypeError("Expected argument 'enabled' to be a str")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if playbook_id and not isinstance(playbook_id, str):
            raise TypeError("Expected argument 'playbook_id' to be a str")
        pulumi.set(__self__, "playbook_id", playbook_id)
        if playbook_versions and not isinstance(playbook_versions, list):
            raise TypeError("Expected argument 'playbook_versions' to be a list")
        pulumi.set(__self__, "playbook_versions", playbook_versions)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.str]:
        """
        Whether the playbook version is activated.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="playbookId")
    def playbook_id(self) -> _builtins.str:
        """
        The playbook ID.
        """
        return pulumi.get(self, "playbook_id")

    @_builtins.property
    @pulumi.getter(name="playbookVersions")
    def playbook_versions(self) -> Sequence['outputs.GetPlaybookVersionsPlaybookVersionResult']:
        """
        The playbook version list.
        """
        return pulumi.get(self, "playbook_versions")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The playbook version status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The playbook version type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetPlaybookVersionsResult(GetPlaybookVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlaybookVersionsResult(
            enabled=self.enabled,
            id=self.id,
            playbook_id=self.playbook_id,
            playbook_versions=self.playbook_versions,
            region=self.region,
            status=self.status,
            type=self.type,
            workspace_id=self.workspace_id)


def get_playbook_versions(enabled: Optional[_builtins.str] = None,
                          playbook_id: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          status: Optional[_builtins.str] = None,
                          type: Optional[_builtins.str] = None,
                          workspace_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlaybookVersionsResult:
    """
    Use this data source to get the list of SecMaster playbook versions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    playbook_id = config.require_object("playbookId")
    test = huaweicloud.secmaster.get_playbook_versions(workspace_id=workspace_id,
        playbook_id=playbook_id)
    ```


    :param _builtins.str enabled: Specifies whether this version is activated.
           The options are as follows:
           + **0**: indicates false;
           + **1**: indicates true.
    :param _builtins.str playbook_id: Specifies the playbook ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the playbook version status.
           The value can be **EDITING**, **APPROVING**, **UNPASSED** or **PUBLISHED**.
    :param _builtins.str type: Specifies the version type.
           The options are as follows:
           + **0**: indicates draft version;
           + **1**: indicates official version.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['enabled'] = enabled
    __args__['playbookId'] = playbook_id
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getPlaybookVersions:getPlaybookVersions', __args__, opts=opts, typ=GetPlaybookVersionsResult).value

    return AwaitableGetPlaybookVersionsResult(
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        playbook_id=pulumi.get(__ret__, 'playbook_id'),
        playbook_versions=pulumi.get(__ret__, 'playbook_versions'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_playbook_versions_output(enabled: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 playbook_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlaybookVersionsResult]:
    """
    Use this data source to get the list of SecMaster playbook versions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    playbook_id = config.require_object("playbookId")
    test = huaweicloud.secmaster.get_playbook_versions(workspace_id=workspace_id,
        playbook_id=playbook_id)
    ```


    :param _builtins.str enabled: Specifies whether this version is activated.
           The options are as follows:
           + **0**: indicates false;
           + **1**: indicates true.
    :param _builtins.str playbook_id: Specifies the playbook ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the playbook version status.
           The value can be **EDITING**, **APPROVING**, **UNPASSED** or **PUBLISHED**.
    :param _builtins.str type: Specifies the version type.
           The options are as follows:
           + **0**: indicates draft version;
           + **1**: indicates official version.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['enabled'] = enabled
    __args__['playbookId'] = playbook_id
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getPlaybookVersions:getPlaybookVersions', __args__, opts=opts, typ=GetPlaybookVersionsResult)
    return __ret__.apply(lambda __response__: GetPlaybookVersionsResult(
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        playbook_id=pulumi.get(__response__, 'playbook_id'),
        playbook_versions=pulumi.get(__response__, 'playbook_versions'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
