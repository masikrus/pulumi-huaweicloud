# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlertArgs', 'Alert']

@pulumi.input_type
class AlertArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input['AlertDataSourceArgs'],
                 description: pulumi.Input[_builtins.str],
                 first_occurrence_time: pulumi.Input[_builtins.str],
                 severity: pulumi.Input[_builtins.str],
                 stage: pulumi.Input[_builtins.str],
                 status: pulumi.Input[_builtins.str],
                 type: pulumi.Input['AlertTypeArgs'],
                 verification_status: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 close_comment: Optional[pulumi.Input[_builtins.str]] = None,
                 close_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 debugging_data: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[_builtins.str]] = None,
                 last_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Alert resource.
        :param pulumi.Input['AlertDataSourceArgs'] data_source: Specifies the data source configuration.
               The data_source structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the alert.
        :param pulumi.Input[_builtins.str] first_occurrence_time: Specifies the first occurrence time of the indicator.
        :param pulumi.Input[_builtins.str] severity: Specifies the alert severity.
               The value can be: **Tips**, **Low**, **Medium**, **High** and **Fatal**.
        :param pulumi.Input[_builtins.str] stage: Specifies the alert stage.
               The value can be **Preparation**, **Detection and Analysis**, **Containm,Eradication& Recovery**
               and **Post-Incident-Activity**.
        :param pulumi.Input[_builtins.str] status: Specifies the alert status.
               The value can be: **Open**, **Block** and **Closed**.
        :param pulumi.Input['AlertTypeArgs'] type: Specifies the alert type configuration.
               The type structure is documented below.
        :param pulumi.Input[_builtins.str] verification_status: Specifies the alert verification status.
               The value can be: **Unknown**, **Positive** and **False positive**.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the alert belongs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] close_comment: Specifies the close comment.
               
               <a name="Alert_AlertType"></a>
               The `type` block supports:
        :param pulumi.Input[_builtins.str] close_reason: Specifies the close reason.
               The value can be **False detection**, **Resolved**, **Repeated** and **Other**.
        :param pulumi.Input[_builtins.bool] debugging_data: Specifies whether it's a debugging data.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] labels: Specifies the labels of the alert in comma-separated string.
        :param pulumi.Input[_builtins.str] last_occurrence_time: Specifies the last occurrence time of the indicator.
        :param pulumi.Input[_builtins.str] name: Specifies the alert name.
        :param pulumi.Input[_builtins.str] owner: Specifies the owner name of the alert.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "first_occurrence_time", first_occurrence_time)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "verification_status", verification_status)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if close_comment is not None:
            pulumi.set(__self__, "close_comment", close_comment)
        if close_reason is not None:
            pulumi.set(__self__, "close_reason", close_reason)
        if debugging_data is not None:
            pulumi.set(__self__, "debugging_data", debugging_data)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_occurrence_time is not None:
            pulumi.set(__self__, "last_occurrence_time", last_occurrence_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input['AlertDataSourceArgs']:
        """
        Specifies the data source configuration.
        The data_source structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input['AlertDataSourceArgs']):
        pulumi.set(self, "data_source", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the description of the alert.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="firstOccurrenceTime")
    def first_occurrence_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the first occurrence time of the indicator.
        """
        return pulumi.get(self, "first_occurrence_time")

    @first_occurrence_time.setter
    def first_occurrence_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "first_occurrence_time", value)

    @_builtins.property
    @pulumi.getter
    def severity(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alert severity.
        The value can be: **Tips**, **Low**, **Medium**, **High** and **Fatal**.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "severity", value)

    @_builtins.property
    @pulumi.getter
    def stage(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alert stage.
        The value can be **Preparation**, **Detection and Analysis**, **Containm,Eradication& Recovery**
        and **Post-Incident-Activity**.
        """
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "stage", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alert status.
        The value can be: **Open**, **Block** and **Closed**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input['AlertTypeArgs']:
        """
        Specifies the alert type configuration.
        The type structure is documented below.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['AlertTypeArgs']):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="verificationStatus")
    def verification_status(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alert verification status.
        The value can be: **Unknown**, **Positive** and **False positive**.
        """
        return pulumi.get(self, "verification_status")

    @verification_status.setter
    def verification_status(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "verification_status", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workspace to which the alert belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="closeComment")
    def close_comment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the close comment.

        <a name="Alert_AlertType"></a>
        The `type` block supports:
        """
        return pulumi.get(self, "close_comment")

    @close_comment.setter
    def close_comment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "close_comment", value)

    @_builtins.property
    @pulumi.getter(name="closeReason")
    def close_reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the close reason.
        The value can be **False detection**, **Resolved**, **Repeated** and **Other**.
        """
        return pulumi.get(self, "close_reason")

    @close_reason.setter
    def close_reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "close_reason", value)

    @_builtins.property
    @pulumi.getter(name="debuggingData")
    def debugging_data(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it's a debugging data.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "debugging_data")

    @debugging_data.setter
    def debugging_data(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "debugging_data", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the labels of the alert in comma-separated string.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="lastOccurrenceTime")
    def last_occurrence_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the last occurrence time of the indicator.
        """
        return pulumi.get(self, "last_occurrence_time")

    @last_occurrence_time.setter
    def last_occurrence_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_occurrence_time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alert name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the owner name of the alert.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AlertState:
    def __init__(__self__, *,
                 close_comment: Optional[pulumi.Input[_builtins.str]] = None,
                 close_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 data_source: Optional[pulumi.Input['AlertDataSourceArgs']] = None,
                 debugging_data: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 first_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[_builtins.str]] = None,
                 last_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 severity: Optional[pulumi.Input[_builtins.str]] = None,
                 stage: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input['AlertTypeArgs']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 verification_status: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Alert resources.
        :param pulumi.Input[_builtins.str] close_comment: Specifies the close comment.
               
               <a name="Alert_AlertType"></a>
               The `type` block supports:
        :param pulumi.Input[_builtins.str] close_reason: Specifies the close reason.
               The value can be **False detection**, **Resolved**, **Repeated** and **Other**.
        :param pulumi.Input[_builtins.str] created_at: The created time.
        :param pulumi.Input['AlertDataSourceArgs'] data_source: Specifies the data source configuration.
               The data_source structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] debugging_data: Specifies whether it's a debugging data.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the alert.
        :param pulumi.Input[_builtins.str] first_occurrence_time: Specifies the first occurrence time of the indicator.
        :param pulumi.Input[_builtins.str] labels: Specifies the labels of the alert in comma-separated string.
        :param pulumi.Input[_builtins.str] last_occurrence_time: Specifies the last occurrence time of the indicator.
        :param pulumi.Input[_builtins.str] name: Specifies the alert name.
        :param pulumi.Input[_builtins.str] owner: Specifies the owner name of the alert.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] severity: Specifies the alert severity.
               The value can be: **Tips**, **Low**, **Medium**, **High** and **Fatal**.
        :param pulumi.Input[_builtins.str] stage: Specifies the alert stage.
               The value can be **Preparation**, **Detection and Analysis**, **Containm,Eradication& Recovery**
               and **Post-Incident-Activity**.
        :param pulumi.Input[_builtins.str] status: Specifies the alert status.
               The value can be: **Open**, **Block** and **Closed**.
        :param pulumi.Input['AlertTypeArgs'] type: Specifies the alert type configuration.
               The type structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: The updated time.
        :param pulumi.Input[_builtins.str] verification_status: Specifies the alert verification status.
               The value can be: **Unknown**, **Positive** and **False positive**.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the alert belongs.
               
               Changing this parameter will create a new resource.
        """
        if close_comment is not None:
            pulumi.set(__self__, "close_comment", close_comment)
        if close_reason is not None:
            pulumi.set(__self__, "close_reason", close_reason)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if debugging_data is not None:
            pulumi.set(__self__, "debugging_data", debugging_data)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if first_occurrence_time is not None:
            pulumi.set(__self__, "first_occurrence_time", first_occurrence_time)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_occurrence_time is not None:
            pulumi.set(__self__, "last_occurrence_time", last_occurrence_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if stage is not None:
            pulumi.set(__self__, "stage", stage)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if verification_status is not None:
            pulumi.set(__self__, "verification_status", verification_status)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="closeComment")
    def close_comment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the close comment.

        <a name="Alert_AlertType"></a>
        The `type` block supports:
        """
        return pulumi.get(self, "close_comment")

    @close_comment.setter
    def close_comment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "close_comment", value)

    @_builtins.property
    @pulumi.getter(name="closeReason")
    def close_reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the close reason.
        The value can be **False detection**, **Resolved**, **Repeated** and **Other**.
        """
        return pulumi.get(self, "close_reason")

    @close_reason.setter
    def close_reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "close_reason", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The created time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input['AlertDataSourceArgs']]:
        """
        Specifies the data source configuration.
        The data_source structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input['AlertDataSourceArgs']]):
        pulumi.set(self, "data_source", value)

    @_builtins.property
    @pulumi.getter(name="debuggingData")
    def debugging_data(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it's a debugging data.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "debugging_data")

    @debugging_data.setter
    def debugging_data(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "debugging_data", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the alert.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="firstOccurrenceTime")
    def first_occurrence_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the first occurrence time of the indicator.
        """
        return pulumi.get(self, "first_occurrence_time")

    @first_occurrence_time.setter
    def first_occurrence_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "first_occurrence_time", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the labels of the alert in comma-separated string.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="lastOccurrenceTime")
    def last_occurrence_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the last occurrence time of the indicator.
        """
        return pulumi.get(self, "last_occurrence_time")

    @last_occurrence_time.setter
    def last_occurrence_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_occurrence_time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alert name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the owner name of the alert.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alert severity.
        The value can be: **Tips**, **Low**, **Medium**, **High** and **Fatal**.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "severity", value)

    @_builtins.property
    @pulumi.getter
    def stage(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alert stage.
        The value can be **Preparation**, **Detection and Analysis**, **Containm,Eradication& Recovery**
        and **Post-Incident-Activity**.
        """
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stage", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alert status.
        The value can be: **Open**, **Block** and **Closed**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['AlertTypeArgs']]:
        """
        Specifies the alert type configuration.
        The type structure is documented below.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['AlertTypeArgs']]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The updated time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="verificationStatus")
    def verification_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alert verification status.
        The value can be: **Unknown**, **Positive** and **False positive**.
        """
        return pulumi.get(self, "verification_status")

    @verification_status.setter
    def verification_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "verification_status", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workspace to which the alert belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:secmaster/alert:Alert")
class Alert(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 close_comment: Optional[pulumi.Input[_builtins.str]] = None,
                 close_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 data_source: Optional[pulumi.Input[Union['AlertDataSourceArgs', 'AlertDataSourceArgsDict']]] = None,
                 debugging_data: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 first_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[_builtins.str]] = None,
                 last_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 severity: Optional[pulumi.Input[_builtins.str]] = None,
                 stage: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[Union['AlertTypeArgs', 'AlertTypeArgsDict']]] = None,
                 verification_status: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SecMaster alert resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        test = huaweicloud.secmaster.Alert("test",
            workspace_id=workspace_id,
            name="test",
            description="created by terraform",
            type={
                "category": "Abnormal network behavior",
                "alert_type": "Abnormal access frequency of IP address",
            },
            data_source={
                "source_type": 1,
                "product_feature": "hss",
                "product_name": "hss",
            },
            first_occurrence_time="2023-10-26T09:33:55.000+08:00",
            severity="Tips",
            status="Open",
            verification_status="Unknown",
            stage="Preparation")
        ```

        ## Import

        The indicator can be imported using the workspace ID and the alert ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/alert:Alert test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] close_comment: Specifies the close comment.
               
               <a name="Alert_AlertType"></a>
               The `type` block supports:
        :param pulumi.Input[_builtins.str] close_reason: Specifies the close reason.
               The value can be **False detection**, **Resolved**, **Repeated** and **Other**.
        :param pulumi.Input[Union['AlertDataSourceArgs', 'AlertDataSourceArgsDict']] data_source: Specifies the data source configuration.
               The data_source structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] debugging_data: Specifies whether it's a debugging data.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the alert.
        :param pulumi.Input[_builtins.str] first_occurrence_time: Specifies the first occurrence time of the indicator.
        :param pulumi.Input[_builtins.str] labels: Specifies the labels of the alert in comma-separated string.
        :param pulumi.Input[_builtins.str] last_occurrence_time: Specifies the last occurrence time of the indicator.
        :param pulumi.Input[_builtins.str] name: Specifies the alert name.
        :param pulumi.Input[_builtins.str] owner: Specifies the owner name of the alert.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] severity: Specifies the alert severity.
               The value can be: **Tips**, **Low**, **Medium**, **High** and **Fatal**.
        :param pulumi.Input[_builtins.str] stage: Specifies the alert stage.
               The value can be **Preparation**, **Detection and Analysis**, **Containm,Eradication& Recovery**
               and **Post-Incident-Activity**.
        :param pulumi.Input[_builtins.str] status: Specifies the alert status.
               The value can be: **Open**, **Block** and **Closed**.
        :param pulumi.Input[Union['AlertTypeArgs', 'AlertTypeArgsDict']] type: Specifies the alert type configuration.
               The type structure is documented below.
        :param pulumi.Input[_builtins.str] verification_status: Specifies the alert verification status.
               The value can be: **Unknown**, **Positive** and **False positive**.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the alert belongs.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlertArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SecMaster alert resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        test = huaweicloud.secmaster.Alert("test",
            workspace_id=workspace_id,
            name="test",
            description="created by terraform",
            type={
                "category": "Abnormal network behavior",
                "alert_type": "Abnormal access frequency of IP address",
            },
            data_source={
                "source_type": 1,
                "product_feature": "hss",
                "product_name": "hss",
            },
            first_occurrence_time="2023-10-26T09:33:55.000+08:00",
            severity="Tips",
            status="Open",
            verification_status="Unknown",
            stage="Preparation")
        ```

        ## Import

        The indicator can be imported using the workspace ID and the alert ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/alert:Alert test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param AlertArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlertArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 close_comment: Optional[pulumi.Input[_builtins.str]] = None,
                 close_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 data_source: Optional[pulumi.Input[Union['AlertDataSourceArgs', 'AlertDataSourceArgsDict']]] = None,
                 debugging_data: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 first_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[_builtins.str]] = None,
                 last_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 severity: Optional[pulumi.Input[_builtins.str]] = None,
                 stage: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[Union['AlertTypeArgs', 'AlertTypeArgsDict']]] = None,
                 verification_status: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlertArgs.__new__(AlertArgs)

            __props__.__dict__["close_comment"] = close_comment
            __props__.__dict__["close_reason"] = close_reason
            if data_source is None and not opts.urn:
                raise TypeError("Missing required property 'data_source'")
            __props__.__dict__["data_source"] = data_source
            __props__.__dict__["debugging_data"] = debugging_data
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if first_occurrence_time is None and not opts.urn:
                raise TypeError("Missing required property 'first_occurrence_time'")
            __props__.__dict__["first_occurrence_time"] = first_occurrence_time
            __props__.__dict__["labels"] = labels
            __props__.__dict__["last_occurrence_time"] = last_occurrence_time
            __props__.__dict__["name"] = name
            __props__.__dict__["owner"] = owner
            __props__.__dict__["region"] = region
            if severity is None and not opts.urn:
                raise TypeError("Missing required property 'severity'")
            __props__.__dict__["severity"] = severity
            if stage is None and not opts.urn:
                raise TypeError("Missing required property 'stage'")
            __props__.__dict__["stage"] = stage
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if verification_status is None and not opts.urn:
                raise TypeError("Missing required property 'verification_status'")
            __props__.__dict__["verification_status"] = verification_status
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(Alert, __self__).__init__(
            'huaweicloud:secmaster/alert:Alert',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            close_comment: Optional[pulumi.Input[_builtins.str]] = None,
            close_reason: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            data_source: Optional[pulumi.Input[Union['AlertDataSourceArgs', 'AlertDataSourceArgsDict']]] = None,
            debugging_data: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            first_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[_builtins.str]] = None,
            last_occurrence_time: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            owner: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            severity: Optional[pulumi.Input[_builtins.str]] = None,
            stage: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[Union['AlertTypeArgs', 'AlertTypeArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            verification_status: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Alert':
        """
        Get an existing Alert resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] close_comment: Specifies the close comment.
               
               <a name="Alert_AlertType"></a>
               The `type` block supports:
        :param pulumi.Input[_builtins.str] close_reason: Specifies the close reason.
               The value can be **False detection**, **Resolved**, **Repeated** and **Other**.
        :param pulumi.Input[_builtins.str] created_at: The created time.
        :param pulumi.Input[Union['AlertDataSourceArgs', 'AlertDataSourceArgsDict']] data_source: Specifies the data source configuration.
               The data_source structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] debugging_data: Specifies whether it's a debugging data.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the alert.
        :param pulumi.Input[_builtins.str] first_occurrence_time: Specifies the first occurrence time of the indicator.
        :param pulumi.Input[_builtins.str] labels: Specifies the labels of the alert in comma-separated string.
        :param pulumi.Input[_builtins.str] last_occurrence_time: Specifies the last occurrence time of the indicator.
        :param pulumi.Input[_builtins.str] name: Specifies the alert name.
        :param pulumi.Input[_builtins.str] owner: Specifies the owner name of the alert.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] severity: Specifies the alert severity.
               The value can be: **Tips**, **Low**, **Medium**, **High** and **Fatal**.
        :param pulumi.Input[_builtins.str] stage: Specifies the alert stage.
               The value can be **Preparation**, **Detection and Analysis**, **Containm,Eradication& Recovery**
               and **Post-Incident-Activity**.
        :param pulumi.Input[_builtins.str] status: Specifies the alert status.
               The value can be: **Open**, **Block** and **Closed**.
        :param pulumi.Input[Union['AlertTypeArgs', 'AlertTypeArgsDict']] type: Specifies the alert type configuration.
               The type structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: The updated time.
        :param pulumi.Input[_builtins.str] verification_status: Specifies the alert verification status.
               The value can be: **Unknown**, **Positive** and **False positive**.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the alert belongs.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlertState.__new__(_AlertState)

        __props__.__dict__["close_comment"] = close_comment
        __props__.__dict__["close_reason"] = close_reason
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["data_source"] = data_source
        __props__.__dict__["debugging_data"] = debugging_data
        __props__.__dict__["description"] = description
        __props__.__dict__["first_occurrence_time"] = first_occurrence_time
        __props__.__dict__["labels"] = labels
        __props__.__dict__["last_occurrence_time"] = last_occurrence_time
        __props__.__dict__["name"] = name
        __props__.__dict__["owner"] = owner
        __props__.__dict__["region"] = region
        __props__.__dict__["severity"] = severity
        __props__.__dict__["stage"] = stage
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["verification_status"] = verification_status
        __props__.__dict__["workspace_id"] = workspace_id
        return Alert(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="closeComment")
    def close_comment(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the close comment.

        <a name="Alert_AlertType"></a>
        The `type` block supports:
        """
        return pulumi.get(self, "close_comment")

    @_builtins.property
    @pulumi.getter(name="closeReason")
    def close_reason(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the close reason.
        The value can be **False detection**, **Resolved**, **Repeated** and **Other**.
        """
        return pulumi.get(self, "close_reason")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The created time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Output['outputs.AlertDataSource']:
        """
        Specifies the data source configuration.
        The data_source structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "data_source")

    @_builtins.property
    @pulumi.getter(name="debuggingData")
    def debugging_data(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether it's a debugging data.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "debugging_data")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of the alert.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="firstOccurrenceTime")
    def first_occurrence_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the first occurrence time of the indicator.
        """
        return pulumi.get(self, "first_occurrence_time")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the labels of the alert in comma-separated string.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="lastOccurrenceTime")
    def last_occurrence_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the last occurrence time of the indicator.
        """
        return pulumi.get(self, "last_occurrence_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alert name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the owner name of the alert.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alert severity.
        The value can be: **Tips**, **Low**, **Medium**, **High** and **Fatal**.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def stage(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alert stage.
        The value can be **Preparation**, **Detection and Analysis**, **Containm,Eradication& Recovery**
        and **Post-Incident-Activity**.
        """
        return pulumi.get(self, "stage")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alert status.
        The value can be: **Open**, **Block** and **Closed**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output['outputs.AlertType']:
        """
        Specifies the alert type configuration.
        The type structure is documented below.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The updated time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="verificationStatus")
    def verification_status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alert verification status.
        The value can be: **Unknown**, **Positive** and **False positive**.
        """
        return pulumi.get(self, "verification_status")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workspace to which the alert belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

