# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AlertConvertIncidentIncidentType',
    'AlertDataSource',
    'AlertRuleQueryPlan',
    'AlertRuleSimulationTrigger',
    'AlertRuleTrigger',
    'AlertType',
    'IncidentDataSource',
    'IncidentType',
    'IndicatorDataSource',
    'IndicatorType',
    'PlaybookRuleCondition',
    'PostPaidOrderProductList',
    'WorkspaceWorkspaceAgencyList',
    'GetAlertRuleTemplatesTemplateResult',
    'GetAlertRuleTemplatesTemplateQueryPlanResult',
    'GetAlertRuleTemplatesTemplateTriggerResult',
    'GetAlertRuleTemplatesV2RecordResult',
    'GetAlertRuleTemplatesV2RecordScheduleResult',
    'GetAlertRuleTemplatesV2RecordTriggerResult',
    'GetAlertRulesAlertRuleResult',
    'GetAlertRulesAlertRuleQueryPlanResult',
    'GetAlertRulesAlertRuleTriggerResult',
    'GetAlertsAlertResult',
    'GetAlertsAlertDataSourceResult',
    'GetAlertsAlertEnvironmentResult',
    'GetAlertsAlertFileInfoResult',
    'GetAlertsAlertMalwareResult',
    'GetAlertsAlertNetworkListResult',
    'GetAlertsAlertNetworkListDestGeoResult',
    'GetAlertsAlertNetworkListSrcGeoResult',
    'GetAlertsAlertProcessResult',
    'GetAlertsAlertRemediationResult',
    'GetAlertsAlertResourceListResult',
    'GetAlertsAlertTypeResult',
    'GetAlertsAlertUserInfoResult',
    'GetAlertsConditionResult',
    'GetAlertsConditionConditionResult',
    'GetCataloguesDataResult',
    'GetCataloguesSearchDataResult',
    'GetComponentTemplatesRecordResult',
    'GetDataClassFieldsFieldResult',
    'GetDataClassesDataClassResult',
    'GetIncidentsConditionResult',
    'GetIncidentsConditionConditionResult',
    'GetIncidentsIncidentResult',
    'GetIncidentsIncidentDataSourceResult',
    'GetIncidentsIncidentTypeResult',
    'GetIndicatorsConditionResult',
    'GetIndicatorsConditionConditionResult',
    'GetIndicatorsIndicatorResult',
    'GetIndicatorsIndicatorDataSourceResult',
    'GetIndicatorsIndicatorEnvironmentResult',
    'GetIndicatorsIndicatorTypeResult',
    'GetInstallationScriptsRecordResult',
    'GetLayoutWizardDetailDataResult',
    'GetLayoutWizardDetailDataBindingButtonResult',
    'GetLayoutWizardsDataResult',
    'GetLayoutWizardsDataBindingButtonResult',
    'GetMetricResultsMetricResultResult',
    'GetMetricResultsMetricResultDataRowResult',
    'GetPlaybookActionInstancesActionInstanceResult',
    'GetPlaybookActionInstancesActionInstanceActionResult',
    'GetPlaybookActionInstancesActionInstanceInstanceLogResult',
    'GetPlaybookActionsDataResult',
    'GetPlaybookApprovalsDataResult',
    'GetPlaybookAuditLogsAuditLogResult',
    'GetPlaybookInstancesInstanceResult',
    'GetPlaybookInstancesInstanceDataClassResult',
    'GetPlaybookInstancesInstanceDataObjectResult',
    'GetPlaybookInstancesInstancePlaybookResult',
    'GetPlaybookMonitorsDataResult',
    'GetPlaybookMonitorsDataMaxRunTimeInstanceResult',
    'GetPlaybookMonitorsDataMinRunTimeInstanceResult',
    'GetPlaybookStatisticsDataResult',
    'GetPlaybookVersionsPlaybookVersionResult',
    'GetPlaybooksPlaybookResult',
    'GetSecurityReportsReportResult',
    'GetSecurityReportsReportReportRangeResult',
    'GetSecurityReportsReportReportRuleInfoResult',
    'GetSocComponentActionDetailDataResult',
    'GetSocComponentActionsDataResult',
    'GetSocComponentDetailDataResult',
    'GetSocComponentDetailDataComponentVersionResult',
    'GetSocComponentDetailDataComponentVersionConnectionConfigResult',
    'GetSocComponentDetailDataOperateHistoryResult',
    'GetSocComponentsDataResult',
    'GetSocComponentsDataComponentVersionResult',
    'GetSocComponentsDataComponentVersionConnectionConfigResult',
    'GetSocComponentsDataOperateHistoryResult',
    'GetVpcEndpointServicesRecordResult',
    'GetWorkflowInstanceDataclassResult',
    'GetWorkflowInstancePlaybookResult',
    'GetWorkflowInstanceWorkflowResult',
    'GetWorkflowInstancesInstanceResult',
    'GetWorkflowInstancesInstanceDataclassResult',
    'GetWorkflowInstancesInstancePlaybookResult',
    'GetWorkflowInstancesInstanceWorkflowResult',
    'GetWorkflowVersionsDataResult',
    'GetWorkflowsWorkflowResult',
    'GetWorkspacesWorkspaceResult',
]

@pulumi.output_type
class AlertConvertIncidentIncidentType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "incidentType":
            suggest = "incident_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertConvertIncidentIncidentType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertConvertIncidentIncidentType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertConvertIncidentIncidentType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 incident_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str category: Specifies the parent incident type.
        :param _builtins.str id: Specifies the incident type ID.
        :param _builtins.str incident_type: Specifies the child incident type.
               
               > Exactly one of `id`, `category` or  `incident_type` must be set.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if incident_type is not None:
            pulumi.set(__self__, "incident_type", incident_type)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[_builtins.str]:
        """
        Specifies the parent incident type.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the incident type ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="incidentType")
    def incident_type(self) -> Optional[_builtins.str]:
        """
        Specifies the child incident type.

        > Exactly one of `id`, `category` or  `incident_type` must be set.
        """
        return pulumi.get(self, "incident_type")


@pulumi.output_type
class AlertDataSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productFeature":
            suggest = "product_feature"
        elif key == "productName":
            suggest = "product_name"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertDataSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertDataSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertDataSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 product_feature: _builtins.str,
                 product_name: _builtins.str,
                 source_type: _builtins.int):
        """
        :param _builtins.str product_feature: Specifies the product feature.
               
               Changing this parameter will create a new resource.
        :param _builtins.str product_name: Specifies the product name.
               
               Changing this parameter will create a new resource.
        :param _builtins.int source_type: Specifies the source type.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "product_feature", product_feature)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter(name="productFeature")
    def product_feature(self) -> _builtins.str:
        """
        Specifies the product feature.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_feature")

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> _builtins.str:
        """
        Specifies the product name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_name")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> _builtins.int:
        """
        Specifies the source type.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class AlertRuleQueryPlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryInterval":
            suggest = "query_interval"
        elif key == "queryIntervalUnit":
            suggest = "query_interval_unit"
        elif key == "timeWindow":
            suggest = "time_window"
        elif key == "timeWindowUnit":
            suggest = "time_window_unit"
        elif key == "executionDelay":
            suggest = "execution_delay"
        elif key == "overtimeInterval":
            suggest = "overtime_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertRuleQueryPlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertRuleQueryPlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertRuleQueryPlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query_interval: _builtins.int,
                 query_interval_unit: _builtins.str,
                 time_window: _builtins.int,
                 time_window_unit: _builtins.str,
                 execution_delay: Optional[_builtins.int] = None,
                 overtime_interval: Optional[_builtins.int] = None):
        """
        :param _builtins.int query_interval: Specifies the query interval.
               + When `query_interval_unit` is **MINUTE**: the value range is `5` to `59`;
               + When `query_interval_unit` is **HOUR**: the value range is `1` to `23`;
               + When `query_interval_unit` is **DAY**: the value range is `1` to `14`;
        :param _builtins.str query_interval_unit: Specifies the query interval unit.
               The value can be: **MINUTE**, **HOUR** and **DAY**.
        :param _builtins.int time_window: Specifies the time window.
               + When `time_window_unit` is **MINUTE**: the value range is `5` to `59`;
               + When `time_window_unit` is **HOUR**: the value range is `1` to `23`;
               + When `time_window_unit` is **DAY**: the value range is `1` to `14`;
        :param _builtins.str time_window_unit: Specifies the time window unit.
               The value can be: **MINUTE**, **HOUR** and **DAY**.
        :param _builtins.int execution_delay: Specifies the execution delay in minutes.
        :param _builtins.int overtime_interval: Specifies the overtime interval in minutes.
               
               <a name="triggers"></a>
               The `triggers` block supports:
        """
        pulumi.set(__self__, "query_interval", query_interval)
        pulumi.set(__self__, "query_interval_unit", query_interval_unit)
        pulumi.set(__self__, "time_window", time_window)
        pulumi.set(__self__, "time_window_unit", time_window_unit)
        if execution_delay is not None:
            pulumi.set(__self__, "execution_delay", execution_delay)
        if overtime_interval is not None:
            pulumi.set(__self__, "overtime_interval", overtime_interval)

    @_builtins.property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> _builtins.int:
        """
        Specifies the query interval.
        + When `query_interval_unit` is **MINUTE**: the value range is `5` to `59`;
        + When `query_interval_unit` is **HOUR**: the value range is `1` to `23`;
        + When `query_interval_unit` is **DAY**: the value range is `1` to `14`;
        """
        return pulumi.get(self, "query_interval")

    @_builtins.property
    @pulumi.getter(name="queryIntervalUnit")
    def query_interval_unit(self) -> _builtins.str:
        """
        Specifies the query interval unit.
        The value can be: **MINUTE**, **HOUR** and **DAY**.
        """
        return pulumi.get(self, "query_interval_unit")

    @_builtins.property
    @pulumi.getter(name="timeWindow")
    def time_window(self) -> _builtins.int:
        """
        Specifies the time window.
        + When `time_window_unit` is **MINUTE**: the value range is `5` to `59`;
        + When `time_window_unit` is **HOUR**: the value range is `1` to `23`;
        + When `time_window_unit` is **DAY**: the value range is `1` to `14`;
        """
        return pulumi.get(self, "time_window")

    @_builtins.property
    @pulumi.getter(name="timeWindowUnit")
    def time_window_unit(self) -> _builtins.str:
        """
        Specifies the time window unit.
        The value can be: **MINUTE**, **HOUR** and **DAY**.
        """
        return pulumi.get(self, "time_window_unit")

    @_builtins.property
    @pulumi.getter(name="executionDelay")
    def execution_delay(self) -> Optional[_builtins.int]:
        """
        Specifies the execution delay in minutes.
        """
        return pulumi.get(self, "execution_delay")

    @_builtins.property
    @pulumi.getter(name="overtimeInterval")
    def overtime_interval(self) -> Optional[_builtins.int]:
        """
        Specifies the overtime interval in minutes.

        <a name="triggers"></a>
        The `triggers` block supports:
        """
        return pulumi.get(self, "overtime_interval")


@pulumi.output_type
class AlertRuleSimulationTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accumulatedTimes":
            suggest = "accumulated_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertRuleSimulationTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertRuleSimulationTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertRuleSimulationTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accumulated_times: _builtins.int,
                 expression: _builtins.str,
                 mode: _builtins.str,
                 operator: _builtins.str,
                 severity: _builtins.str):
        """
        :param _builtins.int accumulated_times: Specifies the accumulated times.
        :param _builtins.str expression: Specifies the expression.
        :param _builtins.str mode: Specifies the trigger mode.
               The value can be: **COUNT**.
        :param _builtins.str operator: Specifies the operator.
               The value can be: **EQ**(equal), **NE**(not equal), **GT**(greater than) and **LT**(less than).
        :param _builtins.str severity: Specifies the severity of the trigger.
               The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        pulumi.set(__self__, "accumulated_times", accumulated_times)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="accumulatedTimes")
    def accumulated_times(self) -> _builtins.int:
        """
        Specifies the accumulated times.
        """
        return pulumi.get(self, "accumulated_times")

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        """
        Specifies the expression.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Specifies the trigger mode.
        The value can be: **COUNT**.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        Specifies the operator.
        The value can be: **EQ**(equal), **NE**(not equal), **GT**(greater than) and **LT**(less than).
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Specifies the severity of the trigger.
        The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class AlertRuleTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accumulatedTimes":
            suggest = "accumulated_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertRuleTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertRuleTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertRuleTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accumulated_times: _builtins.int,
                 expression: _builtins.str,
                 mode: _builtins.str,
                 operator: _builtins.str,
                 severity: _builtins.str):
        """
        :param _builtins.int accumulated_times: Specifies the accumulated times.
        :param _builtins.str expression: Specifies the expression.
        :param _builtins.str mode: Specifies the trigger mode.
               The value can be: **COUNT**.
        :param _builtins.str operator: Specifies the operator.
               The value can be: **EQ**(equal), **NE**(not equal), **GT**(greater than) and **LT**(less than).
        :param _builtins.str severity: Specifies the severity of the trigger.
               The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        pulumi.set(__self__, "accumulated_times", accumulated_times)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="accumulatedTimes")
    def accumulated_times(self) -> _builtins.int:
        """
        Specifies the accumulated times.
        """
        return pulumi.get(self, "accumulated_times")

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        """
        Specifies the expression.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Specifies the trigger mode.
        The value can be: **COUNT**.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        Specifies the operator.
        The value can be: **EQ**(equal), **NE**(not equal), **GT**(greater than) and **LT**(less than).
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Specifies the severity of the trigger.
        The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class AlertType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertType":
            suggest = "alert_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_type: _builtins.str,
                 category: _builtins.str):
        """
        :param _builtins.str alert_type: Specifies the alert type.
               
               <a name="Alert_DataSource"></a>
               The `data_source` block supports:
        :param _builtins.str category: Specifies the category.
        """
        pulumi.set(__self__, "alert_type", alert_type)
        pulumi.set(__self__, "category", category)

    @_builtins.property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> _builtins.str:
        """
        Specifies the alert type.

        <a name="Alert_DataSource"></a>
        The `data_source` block supports:
        """
        return pulumi.get(self, "alert_type")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Specifies the category.
        """
        return pulumi.get(self, "category")


@pulumi.output_type
class IncidentDataSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productFeature":
            suggest = "product_feature"
        elif key == "productName":
            suggest = "product_name"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IncidentDataSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IncidentDataSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IncidentDataSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 product_feature: _builtins.str,
                 product_name: _builtins.str,
                 source_type: _builtins.int):
        """
        :param _builtins.str product_feature: Specifies the product feature.
               
               Changing this parameter will create a new resource.
        :param _builtins.str product_name: Specifies the product name.
               
               Changing this parameter will create a new resource.
        :param _builtins.int source_type: Specifies the source type.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "product_feature", product_feature)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter(name="productFeature")
    def product_feature(self) -> _builtins.str:
        """
        Specifies the product feature.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_feature")

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> _builtins.str:
        """
        Specifies the product name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_name")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> _builtins.int:
        """
        Specifies the source type.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class IncidentType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "incidentType":
            suggest = "incident_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IncidentType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IncidentType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IncidentType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: _builtins.str,
                 incident_type: _builtins.str):
        """
        :param _builtins.str category: Specifies the category.
               
               Changing this parameter will create a new resource.
        :param _builtins.str incident_type: Specifies the incident type.
               
               Changing this parameter will create a new resource.
               
               <a name="IncidentDataSource"></a>
               The `IncidentDataSource` block supports:
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "incident_type", incident_type)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Specifies the category.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="incidentType")
    def incident_type(self) -> _builtins.str:
        """
        Specifies the incident type.

        Changing this parameter will create a new resource.

        <a name="IncidentDataSource"></a>
        The `IncidentDataSource` block supports:
        """
        return pulumi.get(self, "incident_type")


@pulumi.output_type
class IndicatorDataSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productFeature":
            suggest = "product_feature"
        elif key == "productName":
            suggest = "product_name"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndicatorDataSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndicatorDataSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndicatorDataSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 product_feature: _builtins.str,
                 product_name: _builtins.str,
                 source_type: _builtins.int):
        """
        :param _builtins.str product_feature: Specifies the product feature.
               Changing this parameter will create a new resource.
        :param _builtins.str product_name: Specifies the product name.
               Changing this parameter will create a new resource.
        :param _builtins.int source_type: Specifies the data source type.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "product_feature", product_feature)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter(name="productFeature")
    def product_feature(self) -> _builtins.str:
        """
        Specifies the product feature.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_feature")

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> _builtins.str:
        """
        Specifies the product name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "product_name")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> _builtins.int:
        """
        Specifies the data source type.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class IndicatorType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indicatorType":
            suggest = "indicator_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndicatorType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndicatorType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndicatorType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: _builtins.str,
                 id: _builtins.str,
                 indicator_type: _builtins.str):
        """
        :param _builtins.str category: Specifies the category.
        :param _builtins.str id: Specifies the indicator type ID.
               
               <a name="Indicator_DataSource"></a>
               The `data_source` block supports:
        :param _builtins.str indicator_type: Specifies the indicator type.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "indicator_type", indicator_type)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Specifies the category.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the indicator type ID.

        <a name="Indicator_DataSource"></a>
        The `data_source` block supports:
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="indicatorType")
    def indicator_type(self) -> _builtins.str:
        """
        Specifies the indicator type.
        """
        return pulumi.get(self, "indicator_type")


@pulumi.output_type
class PlaybookRuleCondition(dict):
    def __init__(__self__, *,
                 datas: Optional[Sequence[_builtins.str]] = None,
                 detail: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] datas: Specifies the condition data.
        :param _builtins.str detail: Specifies the condition detail.
        :param _builtins.str name: Specifies the condition name.
        """
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the condition data.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter
    def detail(self) -> Optional[_builtins.str]:
        """
        Specifies the condition detail.
        """
        return pulumi.get(self, "detail")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the condition name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PostPaidOrderProductList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudServiceType":
            suggest = "cloud_service_type"
        elif key == "productId":
            suggest = "product_id"
        elif key == "resourceSize":
            suggest = "resource_size"
        elif key == "resourceSpecCode":
            suggest = "resource_spec_code"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "usageFactor":
            suggest = "usage_factor"
        elif key == "usageMeasureId":
            suggest = "usage_measure_id"
        elif key == "usageValue":
            suggest = "usage_value"
        elif key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PostPaidOrderProductList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PostPaidOrderProductList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PostPaidOrderProductList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_service_type: _builtins.str,
                 id: _builtins.str,
                 product_id: _builtins.str,
                 resource_size: _builtins.int,
                 resource_spec_code: _builtins.str,
                 resource_type: _builtins.str,
                 usage_factor: _builtins.str,
                 usage_measure_id: _builtins.int,
                 usage_value: _builtins.int,
                 resource_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str cloud_service_type: Specifies the cloud service type.
               The fixed value is **hws.service.type.sa**.
        :param _builtins.str id: Specifies the identifier, which must be unique.
        :param _builtins.str product_id: Specifies the offering ID,
               which is obtained from the CBC price inquiry.
        :param _builtins.int resource_size: Specifies the number of quotas.
        :param _builtins.str resource_spec_code: Specifies the resource specifications of the purchased
               product. For example, the resource specification for the basic edition in SecMaster is **secmaster.basic**.
        :param _builtins.str resource_type: Specifies the resource type of the purchased product.
               For example, the resource type for typical scenarios in SecMaster is **hws.resource.type.secmaster.typical**.
        :param _builtins.str usage_factor: Specifies the usage factor.
        :param _builtins.int usage_measure_id: Specifies the usage measurement unit.
               For example, the resources are billed by hour, the usage value is **1**, and the usage measurement unit is hour.
               The options are:
               
               + **4**: Hours;
               + **10**: GB, The bandwidth usage is measured by traffic (GB);
               + **11**: MB, The bandwidth usage is measured by traffic (MB);
        :param _builtins.int usage_value: Specifies the usage value.
        :param _builtins.str resource_id: Specifies the resource ID,
               which is transferred only when the quota is added.
        """
        pulumi.set(__self__, "cloud_service_type", cloud_service_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "resource_size", resource_size)
        pulumi.set(__self__, "resource_spec_code", resource_spec_code)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "usage_factor", usage_factor)
        pulumi.set(__self__, "usage_measure_id", usage_measure_id)
        pulumi.set(__self__, "usage_value", usage_value)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @_builtins.property
    @pulumi.getter(name="cloudServiceType")
    def cloud_service_type(self) -> _builtins.str:
        """
        Specifies the cloud service type.
        The fixed value is **hws.service.type.sa**.
        """
        return pulumi.get(self, "cloud_service_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the identifier, which must be unique.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        Specifies the offering ID,
        which is obtained from the CBC price inquiry.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="resourceSize")
    def resource_size(self) -> _builtins.int:
        """
        Specifies the number of quotas.
        """
        return pulumi.get(self, "resource_size")

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> _builtins.str:
        """
        Specifies the resource specifications of the purchased
        product. For example, the resource specification for the basic edition in SecMaster is **secmaster.basic**.
        """
        return pulumi.get(self, "resource_spec_code")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Specifies the resource type of the purchased product.
        For example, the resource type for typical scenarios in SecMaster is **hws.resource.type.secmaster.typical**.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="usageFactor")
    def usage_factor(self) -> _builtins.str:
        """
        Specifies the usage factor.
        """
        return pulumi.get(self, "usage_factor")

    @_builtins.property
    @pulumi.getter(name="usageMeasureId")
    def usage_measure_id(self) -> _builtins.int:
        """
        Specifies the usage measurement unit.
        For example, the resources are billed by hour, the usage value is **1**, and the usage measurement unit is hour.
        The options are:

        + **4**: Hours;
        + **10**: GB, The bandwidth usage is measured by traffic (GB);
        + **11**: MB, The bandwidth usage is measured by traffic (MB);
        """
        return pulumi.get(self, "usage_measure_id")

    @_builtins.property
    @pulumi.getter(name="usageValue")
    def usage_value(self) -> _builtins.int:
        """
        Specifies the usage value.
        """
        return pulumi.get(self, "usage_value")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        Specifies the resource ID,
        which is transferred only when the quota is added.
        """
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class WorkspaceWorkspaceAgencyList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agencyVersion":
            suggest = "agency_version"
        elif key == "domainId":
            suggest = "domain_id"
        elif key == "domainName":
            suggest = "domain_name"
        elif key == "iamAgencyId":
            suggest = "iam_agency_id"
        elif key == "iamAgencyName":
            suggest = "iam_agency_name"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "regionId":
            suggest = "region_id"
        elif key == "resourceSpecCodes":
            suggest = "resource_spec_codes"
        elif key == "workspaceAttribution":
            suggest = "workspace_attribution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceWorkspaceAgencyList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceWorkspaceAgencyList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceWorkspaceAgencyList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agency_version: Optional[_builtins.str] = None,
                 domain_id: Optional[_builtins.str] = None,
                 domain_name: Optional[_builtins.str] = None,
                 iam_agency_id: Optional[_builtins.str] = None,
                 iam_agency_name: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 project_id: Optional[_builtins.str] = None,
                 region_id: Optional[_builtins.str] = None,
                 resource_spec_codes: Optional[Sequence[_builtins.str]] = None,
                 selected: Optional[_builtins.bool] = None,
                 workspace_attribution: Optional[_builtins.str] = None):
        if agency_version is not None:
            pulumi.set(__self__, "agency_version", agency_version)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if iam_agency_id is not None:
            pulumi.set(__self__, "iam_agency_id", iam_agency_id)
        if iam_agency_name is not None:
            pulumi.set(__self__, "iam_agency_name", iam_agency_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if resource_spec_codes is not None:
            pulumi.set(__self__, "resource_spec_codes", resource_spec_codes)
        if selected is not None:
            pulumi.set(__self__, "selected", selected)
        if workspace_attribution is not None:
            pulumi.set(__self__, "workspace_attribution", workspace_attribution)

    @_builtins.property
    @pulumi.getter(name="agencyVersion")
    def agency_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "agency_version")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="iamAgencyId")
    def iam_agency_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "iam_agency_id")

    @_builtins.property
    @pulumi.getter(name="iamAgencyName")
    def iam_agency_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "iam_agency_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceSpecCodes")
    def resource_spec_codes(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "resource_spec_codes")

    @_builtins.property
    @pulumi.getter
    def selected(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "selected")

    @_builtins.property
    @pulumi.getter(name="workspaceAttribution")
    def workspace_attribution(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "workspace_attribution")


@pulumi.output_type
class GetAlertRuleTemplatesTemplateResult(dict):
    def __init__(__self__, *,
                 custom_properties: Mapping[str, _builtins.str],
                 data_source: _builtins.str,
                 event_grouping: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str,
                 query: _builtins.str,
                 query_plans: Sequence['outputs.GetAlertRuleTemplatesTemplateQueryPlanResult'],
                 query_type: _builtins.str,
                 severity: _builtins.str,
                 triggers: Sequence['outputs.GetAlertRuleTemplatesTemplateTriggerResult'],
                 updated_at: _builtins.str,
                 version: _builtins.str):
        """
        :param Mapping[str, _builtins.str] custom_properties: The custom extension information.
        :param _builtins.str data_source: The data source.
        :param _builtins.bool event_grouping: Whether to put events in a group.
        :param _builtins.str id: The alert rule template ID.
        :param _builtins.str name: The alert rule template name.
        :param _builtins.str query: The query rule of the alert rule template.
        :param Sequence['GetAlertRuleTemplatesTemplateQueryPlanArgs'] query_plans: The query plan of the alert rule template.
        :param _builtins.str query_type: The query type of the alert rule template.
        :param _builtins.str severity: Specifies the list of the severity.
               The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        :param Sequence['GetAlertRuleTemplatesTemplateTriggerArgs'] triggers: The alert triggering rules.
        :param _builtins.str updated_at: The update time.
        :param _builtins.str version: The version.
        """
        pulumi.set(__self__, "custom_properties", custom_properties)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "event_grouping", event_grouping)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "query_plans", query_plans)
        pulumi.set(__self__, "query_type", query_type)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "triggers", triggers)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Mapping[str, _builtins.str]:
        """
        The custom extension information.
        """
        return pulumi.get(self, "custom_properties")

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> _builtins.str:
        """
        The data source.
        """
        return pulumi.get(self, "data_source")

    @_builtins.property
    @pulumi.getter(name="eventGrouping")
    def event_grouping(self) -> _builtins.bool:
        """
        Whether to put events in a group.
        """
        return pulumi.get(self, "event_grouping")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The alert rule template ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The alert rule template name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def query(self) -> _builtins.str:
        """
        The query rule of the alert rule template.
        """
        return pulumi.get(self, "query")

    @_builtins.property
    @pulumi.getter(name="queryPlans")
    def query_plans(self) -> Sequence['outputs.GetAlertRuleTemplatesTemplateQueryPlanResult']:
        """
        The query plan of the alert rule template.
        """
        return pulumi.get(self, "query_plans")

    @_builtins.property
    @pulumi.getter(name="queryType")
    def query_type(self) -> _builtins.str:
        """
        The query type of the alert rule template.
        """
        return pulumi.get(self, "query_type")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Specifies the list of the severity.
        The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Sequence['outputs.GetAlertRuleTemplatesTemplateTriggerResult']:
        """
        The alert triggering rules.
        """
        return pulumi.get(self, "triggers")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetAlertRuleTemplatesTemplateQueryPlanResult(dict):
    def __init__(__self__, *,
                 execution_delay: _builtins.int,
                 overtime_interval: _builtins.int,
                 query_interval: _builtins.int,
                 query_interval_unit: _builtins.str,
                 time_window: _builtins.int,
                 time_window_unit: _builtins.str):
        """
        :param _builtins.int execution_delay: The execution delay in minutes.
        :param _builtins.int overtime_interval: The overtime interval in minutes.
        :param _builtins.int query_interval: The query interval.
        :param _builtins.str query_interval_unit: The query interval unit.
        :param _builtins.int time_window: The time window.
        :param _builtins.str time_window_unit: The time window unit.
        """
        pulumi.set(__self__, "execution_delay", execution_delay)
        pulumi.set(__self__, "overtime_interval", overtime_interval)
        pulumi.set(__self__, "query_interval", query_interval)
        pulumi.set(__self__, "query_interval_unit", query_interval_unit)
        pulumi.set(__self__, "time_window", time_window)
        pulumi.set(__self__, "time_window_unit", time_window_unit)

    @_builtins.property
    @pulumi.getter(name="executionDelay")
    def execution_delay(self) -> _builtins.int:
        """
        The execution delay in minutes.
        """
        return pulumi.get(self, "execution_delay")

    @_builtins.property
    @pulumi.getter(name="overtimeInterval")
    def overtime_interval(self) -> _builtins.int:
        """
        The overtime interval in minutes.
        """
        return pulumi.get(self, "overtime_interval")

    @_builtins.property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> _builtins.int:
        """
        The query interval.
        """
        return pulumi.get(self, "query_interval")

    @_builtins.property
    @pulumi.getter(name="queryIntervalUnit")
    def query_interval_unit(self) -> _builtins.str:
        """
        The query interval unit.
        """
        return pulumi.get(self, "query_interval_unit")

    @_builtins.property
    @pulumi.getter(name="timeWindow")
    def time_window(self) -> _builtins.int:
        """
        The time window.
        """
        return pulumi.get(self, "time_window")

    @_builtins.property
    @pulumi.getter(name="timeWindowUnit")
    def time_window_unit(self) -> _builtins.str:
        """
        The time window unit.
        """
        return pulumi.get(self, "time_window_unit")


@pulumi.output_type
class GetAlertRuleTemplatesTemplateTriggerResult(dict):
    def __init__(__self__, *,
                 accumulated_times: _builtins.int,
                 expression: _builtins.str,
                 mode: _builtins.str,
                 operator: _builtins.str,
                 severity: _builtins.str):
        """
        :param _builtins.int accumulated_times: The accumulated times.
        :param _builtins.str expression: The expression.
        :param _builtins.str mode: The mode.
        :param _builtins.str operator: The operator.
               + **EQ**: equal,
               + **NE**: not equal,
               + **GT**: greater than,
               + **LT**: less than.
        :param _builtins.str severity: Specifies the list of the severity.
               The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        pulumi.set(__self__, "accumulated_times", accumulated_times)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="accumulatedTimes")
    def accumulated_times(self) -> _builtins.int:
        """
        The accumulated times.
        """
        return pulumi.get(self, "accumulated_times")

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        """
        The expression.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        The mode.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        The operator.
        + **EQ**: equal,
        + **NE**: not equal,
        + **GT**: greater than,
        + **LT**: less than.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Specifies the list of the severity.
        The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetAlertRuleTemplatesV2RecordResult(dict):
    def __init__(__self__, *,
                 accumulated_times: _builtins.int,
                 alert_description: _builtins.str,
                 alert_name: _builtins.str,
                 alert_remediation: _builtins.str,
                 alert_type: Mapping[str, _builtins.str],
                 create_by: _builtins.str,
                 create_time: _builtins.int,
                 custom_properties: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 event_grouping: _builtins.bool,
                 job_mode: _builtins.str,
                 process_status: _builtins.str,
                 query: _builtins.str,
                 query_type: _builtins.str,
                 schedules: Sequence['outputs.GetAlertRuleTemplatesV2RecordScheduleResult'],
                 severity: _builtins.str,
                 simulation: _builtins.bool,
                 status: _builtins.str,
                 suppression: _builtins.bool,
                 table_name: _builtins.str,
                 template_id: _builtins.str,
                 template_name: _builtins.str,
                 triggers: Sequence['outputs.GetAlertRuleTemplatesV2RecordTriggerResult'],
                 update_by: _builtins.str,
                 update_time: _builtins.int,
                 update_time_by_user: _builtins.int):
        """
        :param _builtins.int accumulated_times: The cumulative number of times.
        :param _builtins.str alert_description: The alert description.
        :param _builtins.str alert_name: The query type of the alert rule template.
        :param _builtins.str alert_remediation: The custom extension information.
        :param Mapping[str, _builtins.str] alert_type: The alert type.
        :param _builtins.str create_by: The user ID.
        :param _builtins.int create_time: The creation time.
        :param Mapping[str, _builtins.str] custom_properties: The custom properties.
        :param _builtins.str description: The alert rule template description.
        :param _builtins.bool event_grouping: Whether to put events in a group.
        :param _builtins.str job_mode: The mode corresponding to alert rule template.
        :param _builtins.str process_status: The process status.
               The value can be **COMPLETED**, **CREATING**, **UPDATING**, **ENABLING**, **DISABLING**, **DELETING**,
               **CREATE_FAILED**, **UPDATE_FAILED**, **ENABLE_FAILED**, **DISABLE_FAILED**, **DELETE_FAILED** or **RECOVERING**.
        :param _builtins.str query: The query statement.
        :param _builtins.str query_type: The query type.
               The value can be **SQL** or **CBSL**.
        :param Sequence['GetAlertRuleTemplatesV2RecordScheduleArgs'] schedules: The alert rule schedule.
        :param _builtins.str severity: Specifies the alert level.
               The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** or **FATAL**.
        :param _builtins.bool simulation: Whether simulation alert.
        :param _builtins.str status: The alert rule template status.
        :param _builtins.bool suppression: Whether alert suppression.
        :param _builtins.str table_name: The table name.
        :param _builtins.str template_id: The alert rule template ID.
        :param _builtins.str template_name: Specifies the alert rule template name.
        :param Sequence['GetAlertRuleTemplatesV2RecordTriggerArgs'] triggers: The alert trigger rules information.
        :param _builtins.str update_by: The user ID which update the alert rule template.
        :param _builtins.int update_time: The update time.
        :param _builtins.int update_time_by_user: The update time which the user update the alert rule template.
        """
        pulumi.set(__self__, "accumulated_times", accumulated_times)
        pulumi.set(__self__, "alert_description", alert_description)
        pulumi.set(__self__, "alert_name", alert_name)
        pulumi.set(__self__, "alert_remediation", alert_remediation)
        pulumi.set(__self__, "alert_type", alert_type)
        pulumi.set(__self__, "create_by", create_by)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "custom_properties", custom_properties)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "event_grouping", event_grouping)
        pulumi.set(__self__, "job_mode", job_mode)
        pulumi.set(__self__, "process_status", process_status)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "query_type", query_type)
        pulumi.set(__self__, "schedules", schedules)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "simulation", simulation)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "suppression", suppression)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "template_id", template_id)
        pulumi.set(__self__, "template_name", template_name)
        pulumi.set(__self__, "triggers", triggers)
        pulumi.set(__self__, "update_by", update_by)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "update_time_by_user", update_time_by_user)

    @_builtins.property
    @pulumi.getter(name="accumulatedTimes")
    def accumulated_times(self) -> _builtins.int:
        """
        The cumulative number of times.
        """
        return pulumi.get(self, "accumulated_times")

    @_builtins.property
    @pulumi.getter(name="alertDescription")
    def alert_description(self) -> _builtins.str:
        """
        The alert description.
        """
        return pulumi.get(self, "alert_description")

    @_builtins.property
    @pulumi.getter(name="alertName")
    def alert_name(self) -> _builtins.str:
        """
        The query type of the alert rule template.
        """
        return pulumi.get(self, "alert_name")

    @_builtins.property
    @pulumi.getter(name="alertRemediation")
    def alert_remediation(self) -> _builtins.str:
        """
        The custom extension information.
        """
        return pulumi.get(self, "alert_remediation")

    @_builtins.property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> Mapping[str, _builtins.str]:
        """
        The alert type.
        """
        return pulumi.get(self, "alert_type")

    @_builtins.property
    @pulumi.getter(name="createBy")
    def create_by(self) -> _builtins.str:
        """
        The user ID.
        """
        return pulumi.get(self, "create_by")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.int:
        """
        The creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Mapping[str, _builtins.str]:
        """
        The custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The alert rule template description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="eventGrouping")
    def event_grouping(self) -> _builtins.bool:
        """
        Whether to put events in a group.
        """
        return pulumi.get(self, "event_grouping")

    @_builtins.property
    @pulumi.getter(name="jobMode")
    def job_mode(self) -> _builtins.str:
        """
        The mode corresponding to alert rule template.
        """
        return pulumi.get(self, "job_mode")

    @_builtins.property
    @pulumi.getter(name="processStatus")
    def process_status(self) -> _builtins.str:
        """
        The process status.
        The value can be **COMPLETED**, **CREATING**, **UPDATING**, **ENABLING**, **DISABLING**, **DELETING**,
        **CREATE_FAILED**, **UPDATE_FAILED**, **ENABLE_FAILED**, **DISABLE_FAILED**, **DELETE_FAILED** or **RECOVERING**.
        """
        return pulumi.get(self, "process_status")

    @_builtins.property
    @pulumi.getter
    def query(self) -> _builtins.str:
        """
        The query statement.
        """
        return pulumi.get(self, "query")

    @_builtins.property
    @pulumi.getter(name="queryType")
    def query_type(self) -> _builtins.str:
        """
        The query type.
        The value can be **SQL** or **CBSL**.
        """
        return pulumi.get(self, "query_type")

    @_builtins.property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetAlertRuleTemplatesV2RecordScheduleResult']:
        """
        The alert rule schedule.
        """
        return pulumi.get(self, "schedules")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Specifies the alert level.
        The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** or **FATAL**.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def simulation(self) -> _builtins.bool:
        """
        Whether simulation alert.
        """
        return pulumi.get(self, "simulation")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The alert rule template status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def suppression(self) -> _builtins.bool:
        """
        Whether alert suppression.
        """
        return pulumi.get(self, "suppression")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> _builtins.str:
        """
        The table name.
        """
        return pulumi.get(self, "table_name")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> _builtins.str:
        """
        The alert rule template ID.
        """
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> _builtins.str:
        """
        Specifies the alert rule template name.
        """
        return pulumi.get(self, "template_name")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Sequence['outputs.GetAlertRuleTemplatesV2RecordTriggerResult']:
        """
        The alert trigger rules information.
        """
        return pulumi.get(self, "triggers")

    @_builtins.property
    @pulumi.getter(name="updateBy")
    def update_by(self) -> _builtins.str:
        """
        The user ID which update the alert rule template.
        """
        return pulumi.get(self, "update_by")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.int:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="updateTimeByUser")
    def update_time_by_user(self) -> _builtins.int:
        """
        The update time which the user update the alert rule template.
        """
        return pulumi.get(self, "update_time_by_user")


@pulumi.output_type
class GetAlertRuleTemplatesV2RecordScheduleResult(dict):
    def __init__(__self__, *,
                 delay_interval: _builtins.int,
                 frequency_interval: _builtins.int,
                 frequency_unit: _builtins.str,
                 overtime_interval: _builtins.int,
                 period_interval: _builtins.int,
                 period_unit: _builtins.str):
        """
        :param _builtins.int delay_interval: The delay interval.
        :param _builtins.int frequency_interval: The scheduling interval.
        :param _builtins.str frequency_unit: The scheduling interval unit.
               The value can be **MINUTE**, **HOUR** or **DAY**.
        :param _builtins.int overtime_interval: The overtime interval.
        :param _builtins.int period_interval: The time window interval.
        :param _builtins.str period_unit: The time window unit.
               The value can be **MINUTE**, **HOUR** or **DAY**.
        """
        pulumi.set(__self__, "delay_interval", delay_interval)
        pulumi.set(__self__, "frequency_interval", frequency_interval)
        pulumi.set(__self__, "frequency_unit", frequency_unit)
        pulumi.set(__self__, "overtime_interval", overtime_interval)
        pulumi.set(__self__, "period_interval", period_interval)
        pulumi.set(__self__, "period_unit", period_unit)

    @_builtins.property
    @pulumi.getter(name="delayInterval")
    def delay_interval(self) -> _builtins.int:
        """
        The delay interval.
        """
        return pulumi.get(self, "delay_interval")

    @_builtins.property
    @pulumi.getter(name="frequencyInterval")
    def frequency_interval(self) -> _builtins.int:
        """
        The scheduling interval.
        """
        return pulumi.get(self, "frequency_interval")

    @_builtins.property
    @pulumi.getter(name="frequencyUnit")
    def frequency_unit(self) -> _builtins.str:
        """
        The scheduling interval unit.
        The value can be **MINUTE**, **HOUR** or **DAY**.
        """
        return pulumi.get(self, "frequency_unit")

    @_builtins.property
    @pulumi.getter(name="overtimeInterval")
    def overtime_interval(self) -> _builtins.int:
        """
        The overtime interval.
        """
        return pulumi.get(self, "overtime_interval")

    @_builtins.property
    @pulumi.getter(name="periodInterval")
    def period_interval(self) -> _builtins.int:
        """
        The time window interval.
        """
        return pulumi.get(self, "period_interval")

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> _builtins.str:
        """
        The time window unit.
        The value can be **MINUTE**, **HOUR** or **DAY**.
        """
        return pulumi.get(self, "period_unit")


@pulumi.output_type
class GetAlertRuleTemplatesV2RecordTriggerResult(dict):
    def __init__(__self__, *,
                 accumulated_times: _builtins.int,
                 expression: _builtins.str,
                 job_id: _builtins.str,
                 mode: _builtins.str,
                 operator: _builtins.str,
                 severity: _builtins.str):
        """
        :param _builtins.int accumulated_times: The cumulative number of times.
        :param _builtins.str expression: The expression.
        :param _builtins.str job_id: The  job ID.
        :param _builtins.str mode: The mode.
        :param _builtins.str operator: The operator type.
               The valid values are as follows:
               + **EQ**: equal,
               + **NE**: not equal,
               + **GT**: greater than,
               + **LT**: less than.
        :param _builtins.str severity: Specifies the alert level.
               The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** or **FATAL**.
        """
        pulumi.set(__self__, "accumulated_times", accumulated_times)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="accumulatedTimes")
    def accumulated_times(self) -> _builtins.int:
        """
        The cumulative number of times.
        """
        return pulumi.get(self, "accumulated_times")

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        """
        The expression.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        """
        The  job ID.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        The mode.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        The operator type.
        The valid values are as follows:
        + **EQ**: equal,
        + **NE**: not equal,
        + **GT**: greater than,
        + **LT**: less than.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Specifies the alert level.
        The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** or **FATAL**.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetAlertRulesAlertRuleResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 custom_properties: Mapping[str, _builtins.str],
                 deleted_at: _builtins.str,
                 event_grouping: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str,
                 pipeline_id: _builtins.str,
                 pipeline_name: _builtins.str,
                 query_plans: Sequence['outputs.GetAlertRulesAlertRuleQueryPlanResult'],
                 query_rule: _builtins.str,
                 query_type: _builtins.str,
                 severity: _builtins.str,
                 status: _builtins.str,
                 triggers: Sequence['outputs.GetAlertRulesAlertRuleTriggerResult'],
                 updated_at: _builtins.str,
                 updated_by: _builtins.str):
        """
        :param _builtins.str created_at: The creation time.
        :param _builtins.str created_by: The creator.
        :param Mapping[str, _builtins.str] custom_properties: The custom extension information.
        :param _builtins.str deleted_at: The deletion time.
        :param _builtins.bool event_grouping: Whether to put events in a group.
        :param _builtins.str id: The alert rule ID.
        :param _builtins.str name: Specifies the alert rule name. Fuzzy match is supported.
        :param _builtins.str pipeline_id: Specifies the pipeline ID.
        :param _builtins.str pipeline_name: The data pipeline name.
        :param Sequence['GetAlertRulesAlertRuleQueryPlanArgs'] query_plans: The query plan of the alert rule.
        :param _builtins.str query_rule: The query rule of the alert rule.
        :param _builtins.str query_type: The query type of the alert rule.
        :param _builtins.str severity: Specifies the list of the severity.
               The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        :param _builtins.str status: Specifies the list of the status. The value can be **ENABLED** and **DISABLED**.
        :param Sequence['GetAlertRulesAlertRuleTriggerArgs'] triggers: The alert triggering rules.
        :param _builtins.str updated_at: The update time.
        :param _builtins.str updated_by: The updater.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "custom_properties", custom_properties)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "event_grouping", event_grouping)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "pipeline_name", pipeline_name)
        pulumi.set(__self__, "query_plans", query_plans)
        pulumi.set(__self__, "query_rule", query_rule)
        pulumi.set(__self__, "query_type", query_type)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "triggers", triggers)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The creator.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Mapping[str, _builtins.str]:
        """
        The custom extension information.
        """
        return pulumi.get(self, "custom_properties")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> _builtins.str:
        """
        The deletion time.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="eventGrouping")
    def event_grouping(self) -> _builtins.bool:
        """
        Whether to put events in a group.
        """
        return pulumi.get(self, "event_grouping")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The alert rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the alert rule name. Fuzzy match is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> _builtins.str:
        """
        Specifies the pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter(name="pipelineName")
    def pipeline_name(self) -> _builtins.str:
        """
        The data pipeline name.
        """
        return pulumi.get(self, "pipeline_name")

    @_builtins.property
    @pulumi.getter(name="queryPlans")
    def query_plans(self) -> Sequence['outputs.GetAlertRulesAlertRuleQueryPlanResult']:
        """
        The query plan of the alert rule.
        """
        return pulumi.get(self, "query_plans")

    @_builtins.property
    @pulumi.getter(name="queryRule")
    def query_rule(self) -> _builtins.str:
        """
        The query rule of the alert rule.
        """
        return pulumi.get(self, "query_rule")

    @_builtins.property
    @pulumi.getter(name="queryType")
    def query_type(self) -> _builtins.str:
        """
        The query type of the alert rule.
        """
        return pulumi.get(self, "query_type")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Specifies the list of the severity.
        The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the list of the status. The value can be **ENABLED** and **DISABLED**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Sequence['outputs.GetAlertRulesAlertRuleTriggerResult']:
        """
        The alert triggering rules.
        """
        return pulumi.get(self, "triggers")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        """
        The updater.
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetAlertRulesAlertRuleQueryPlanResult(dict):
    def __init__(__self__, *,
                 execution_delay: _builtins.int,
                 overtime_interval: _builtins.int,
                 query_interval: _builtins.int,
                 query_interval_unit: _builtins.str,
                 time_window: _builtins.int,
                 time_window_unit: _builtins.str):
        """
        :param _builtins.int execution_delay: The execution delay in minutes.
        :param _builtins.int overtime_interval: The overtime interval in minutes.
        :param _builtins.int query_interval: The query interval.
        :param _builtins.str query_interval_unit: The query interval unit.
        :param _builtins.int time_window: The time window.
        :param _builtins.str time_window_unit: The time window unit.
        """
        pulumi.set(__self__, "execution_delay", execution_delay)
        pulumi.set(__self__, "overtime_interval", overtime_interval)
        pulumi.set(__self__, "query_interval", query_interval)
        pulumi.set(__self__, "query_interval_unit", query_interval_unit)
        pulumi.set(__self__, "time_window", time_window)
        pulumi.set(__self__, "time_window_unit", time_window_unit)

    @_builtins.property
    @pulumi.getter(name="executionDelay")
    def execution_delay(self) -> _builtins.int:
        """
        The execution delay in minutes.
        """
        return pulumi.get(self, "execution_delay")

    @_builtins.property
    @pulumi.getter(name="overtimeInterval")
    def overtime_interval(self) -> _builtins.int:
        """
        The overtime interval in minutes.
        """
        return pulumi.get(self, "overtime_interval")

    @_builtins.property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> _builtins.int:
        """
        The query interval.
        """
        return pulumi.get(self, "query_interval")

    @_builtins.property
    @pulumi.getter(name="queryIntervalUnit")
    def query_interval_unit(self) -> _builtins.str:
        """
        The query interval unit.
        """
        return pulumi.get(self, "query_interval_unit")

    @_builtins.property
    @pulumi.getter(name="timeWindow")
    def time_window(self) -> _builtins.int:
        """
        The time window.
        """
        return pulumi.get(self, "time_window")

    @_builtins.property
    @pulumi.getter(name="timeWindowUnit")
    def time_window_unit(self) -> _builtins.str:
        """
        The time window unit.
        """
        return pulumi.get(self, "time_window_unit")


@pulumi.output_type
class GetAlertRulesAlertRuleTriggerResult(dict):
    def __init__(__self__, *,
                 accumulated_times: _builtins.int,
                 expression: _builtins.str,
                 mode: _builtins.str,
                 operator: _builtins.str,
                 severity: _builtins.str):
        """
        :param _builtins.int accumulated_times: The accumulated times.
        :param _builtins.str expression: The expression.
        :param _builtins.str mode: The mode.
        :param _builtins.str operator: The operator.
               + **EQ**: equal,
               + **NE**: not equal,
               + **GT**: greater than,
               + **LT**: less than.
        :param _builtins.str severity: Specifies the list of the severity.
               The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        pulumi.set(__self__, "accumulated_times", accumulated_times)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="accumulatedTimes")
    def accumulated_times(self) -> _builtins.int:
        """
        The accumulated times.
        """
        return pulumi.get(self, "accumulated_times")

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        """
        The expression.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        The mode.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        The operator.
        + **EQ**: equal,
        + **NE**: not equal,
        + **GT**: greater than,
        + **LT**: less than.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Specifies the list of the severity.
        The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetAlertsAlertResult(dict):
    def __init__(__self__, *,
                 arrive_time: _builtins.str,
                 close_comment: _builtins.str,
                 close_reason: _builtins.str,
                 count: _builtins.int,
                 created_at: _builtins.str,
                 creator: _builtins.str,
                 data_class_id: _builtins.str,
                 data_sources: Sequence['outputs.GetAlertsAlertDataSourceResult'],
                 debugging_data: _builtins.str,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 environments: Sequence['outputs.GetAlertsAlertEnvironmentResult'],
                 file_infos: Sequence['outputs.GetAlertsAlertFileInfoResult'],
                 first_occurrence_time: _builtins.str,
                 id: _builtins.str,
                 labels: _builtins.str,
                 last_occurrence_time: _builtins.str,
                 level: _builtins.str,
                 malwares: Sequence['outputs.GetAlertsAlertMalwareResult'],
                 name: _builtins.str,
                 network_lists: Sequence['outputs.GetAlertsAlertNetworkListResult'],
                 owner: _builtins.str,
                 planned_closure_time: _builtins.str,
                 processes: Sequence['outputs.GetAlertsAlertProcessResult'],
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 remediations: Sequence['outputs.GetAlertsAlertRemediationResult'],
                 resource_lists: Sequence['outputs.GetAlertsAlertResourceListResult'],
                 stage: _builtins.str,
                 status: _builtins.str,
                 types: Sequence['outputs.GetAlertsAlertTypeResult'],
                 updated_at: _builtins.str,
                 user_infos: Sequence['outputs.GetAlertsAlertUserInfoResult'],
                 verification_status: _builtins.str,
                 version: _builtins.str,
                 workspace_id: _builtins.str):
        """
        :param _builtins.str arrive_time: The data receiving time.
        :param _builtins.str close_comment: The close comment.
        :param _builtins.str close_reason: The close reason.
        :param _builtins.int count: The times of the alert occurrences.
        :param _builtins.str created_at: The creation time.
        :param _builtins.str creator: The creator name.
        :param _builtins.str data_class_id: The data class ID.
        :param Sequence['GetAlertsAlertDataSourceArgs'] data_sources: The data source configuration.
               The data_source structure is documented below.
        :param _builtins.str debugging_data: Whether it's debugging data.
        :param _builtins.str description: The alert description.
        :param _builtins.str domain_id: The ID of the account to which the resource belongs.
        :param Sequence['GetAlertsAlertEnvironmentArgs'] environments: The coordinates of the environment where the alert was generated.
               The environment structure is documented below.
        :param Sequence['GetAlertsAlertFileInfoArgs'] file_infos: The file information.
               The file_info structure is documented below.
        :param _builtins.str first_occurrence_time: The first occurrence time of the alert.
        :param _builtins.str id: The resource ID.
        :param _builtins.str labels: The labels.
        :param _builtins.str last_occurrence_time: The last occurrence time of the alert.
        :param _builtins.str level: The alert level.
        :param Sequence['GetAlertsAlertMalwareArgs'] malwares: The malware information.
               The malware structure is documented below.
        :param _builtins.str name: Specifies the expression name.
        :param Sequence['GetAlertsAlertNetworkListArgs'] network_lists: The network information.
               The network_list structure is documented below.
        :param _builtins.str owner: The owner name.
        :param _builtins.str planned_closure_time: The planned closure time of the alert.
        :param Sequence['GetAlertsAlertProcessArgs'] processes: The process information.
               The process structure is documented below.
        :param _builtins.str project_id: The ID of the account to which the resource belongs.
        :param _builtins.str region_id: The region ID.
        :param Sequence['GetAlertsAlertRemediationArgs'] remediations: The remedy measure.
               The remediation structure is documented below.
        :param Sequence['GetAlertsAlertResourceListArgs'] resource_lists: The affected resources.
               The resource_list structure is documented below.
        :param _builtins.str stage: The stage of the alert.
        :param _builtins.str status: The alert status.
        :param Sequence['GetAlertsAlertTypeArgs'] types: The resource type.
        :param _builtins.str updated_at: The update time.
        :param Sequence['GetAlertsAlertUserInfoArgs'] user_infos: The user information.
               The user_info structure is documented below.
        :param _builtins.str verification_status: The verification status.
        :param _builtins.str version: The version of the data source of an alert.
        :param _builtins.str workspace_id: Specifies the ID of the workspace to which the alert belongs.
        """
        pulumi.set(__self__, "arrive_time", arrive_time)
        pulumi.set(__self__, "close_comment", close_comment)
        pulumi.set(__self__, "close_reason", close_reason)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "data_class_id", data_class_id)
        pulumi.set(__self__, "data_sources", data_sources)
        pulumi.set(__self__, "debugging_data", debugging_data)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "file_infos", file_infos)
        pulumi.set(__self__, "first_occurrence_time", first_occurrence_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "last_occurrence_time", last_occurrence_time)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "malwares", malwares)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_lists", network_lists)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "planned_closure_time", planned_closure_time)
        pulumi.set(__self__, "processes", processes)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "remediations", remediations)
        pulumi.set(__self__, "resource_lists", resource_lists)
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "types", types)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "user_infos", user_infos)
        pulumi.set(__self__, "verification_status", verification_status)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="arriveTime")
    def arrive_time(self) -> _builtins.str:
        """
        The data receiving time.
        """
        return pulumi.get(self, "arrive_time")

    @_builtins.property
    @pulumi.getter(name="closeComment")
    def close_comment(self) -> _builtins.str:
        """
        The close comment.
        """
        return pulumi.get(self, "close_comment")

    @_builtins.property
    @pulumi.getter(name="closeReason")
    def close_reason(self) -> _builtins.str:
        """
        The close reason.
        """
        return pulumi.get(self, "close_reason")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        The times of the alert occurrences.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        The creator name.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter(name="dataClassId")
    def data_class_id(self) -> _builtins.str:
        """
        The data class ID.
        """
        return pulumi.get(self, "data_class_id")

    @_builtins.property
    @pulumi.getter(name="dataSources")
    def data_sources(self) -> Sequence['outputs.GetAlertsAlertDataSourceResult']:
        """
        The data source configuration.
        The data_source structure is documented below.
        """
        return pulumi.get(self, "data_sources")

    @_builtins.property
    @pulumi.getter(name="debuggingData")
    def debugging_data(self) -> _builtins.str:
        """
        Whether it's debugging data.
        """
        return pulumi.get(self, "debugging_data")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The alert description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The ID of the account to which the resource belongs.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetAlertsAlertEnvironmentResult']:
        """
        The coordinates of the environment where the alert was generated.
        The environment structure is documented below.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fileInfos")
    def file_infos(self) -> Sequence['outputs.GetAlertsAlertFileInfoResult']:
        """
        The file information.
        The file_info structure is documented below.
        """
        return pulumi.get(self, "file_infos")

    @_builtins.property
    @pulumi.getter(name="firstOccurrenceTime")
    def first_occurrence_time(self) -> _builtins.str:
        """
        The first occurrence time of the alert.
        """
        return pulumi.get(self, "first_occurrence_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> _builtins.str:
        """
        The labels.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="lastOccurrenceTime")
    def last_occurrence_time(self) -> _builtins.str:
        """
        The last occurrence time of the alert.
        """
        return pulumi.get(self, "last_occurrence_time")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The alert level.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def malwares(self) -> Sequence['outputs.GetAlertsAlertMalwareResult']:
        """
        The malware information.
        The malware structure is documented below.
        """
        return pulumi.get(self, "malwares")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the expression name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkLists")
    def network_lists(self) -> Sequence['outputs.GetAlertsAlertNetworkListResult']:
        """
        The network information.
        The network_list structure is documented below.
        """
        return pulumi.get(self, "network_lists")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        The owner name.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="plannedClosureTime")
    def planned_closure_time(self) -> _builtins.str:
        """
        The planned closure time of the alert.
        """
        return pulumi.get(self, "planned_closure_time")

    @_builtins.property
    @pulumi.getter
    def processes(self) -> Sequence['outputs.GetAlertsAlertProcessResult']:
        """
        The process information.
        The process structure is documented below.
        """
        return pulumi.get(self, "processes")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The ID of the account to which the resource belongs.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def remediations(self) -> Sequence['outputs.GetAlertsAlertRemediationResult']:
        """
        The remedy measure.
        The remediation structure is documented below.
        """
        return pulumi.get(self, "remediations")

    @_builtins.property
    @pulumi.getter(name="resourceLists")
    def resource_lists(self) -> Sequence['outputs.GetAlertsAlertResourceListResult']:
        """
        The affected resources.
        The resource_list structure is documented below.
        """
        return pulumi.get(self, "resource_lists")

    @_builtins.property
    @pulumi.getter
    def stage(self) -> _builtins.str:
        """
        The stage of the alert.
        """
        return pulumi.get(self, "stage")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The alert status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def types(self) -> Sequence['outputs.GetAlertsAlertTypeResult']:
        """
        The resource type.
        """
        return pulumi.get(self, "types")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userInfos")
    def user_infos(self) -> Sequence['outputs.GetAlertsAlertUserInfoResult']:
        """
        The user information.
        The user_info structure is documented below.
        """
        return pulumi.get(self, "user_infos")

    @_builtins.property
    @pulumi.getter(name="verificationStatus")
    def verification_status(self) -> _builtins.str:
        """
        The verification status.
        """
        return pulumi.get(self, "verification_status")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the data source of an alert.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        Specifies the ID of the workspace to which the alert belongs.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetAlertsAlertDataSourceResult(dict):
    def __init__(__self__, *,
                 product_feature: _builtins.str,
                 product_name: _builtins.str,
                 source_type: _builtins.int):
        """
        :param _builtins.str product_feature: The product feature.
        :param _builtins.str product_name: The product name.
        :param _builtins.int source_type: The source type.
        """
        pulumi.set(__self__, "product_feature", product_feature)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter(name="productFeature")
    def product_feature(self) -> _builtins.str:
        """
        The product feature.
        """
        return pulumi.get(self, "product_feature")

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> _builtins.str:
        """
        The product name.
        """
        return pulumi.get(self, "product_name")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> _builtins.int:
        """
        The source type.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetAlertsAlertEnvironmentResult(dict):
    def __init__(__self__, *,
                 cross_workspace_id: _builtins.str,
                 domain_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 vendor_type: _builtins.str):
        """
        :param _builtins.str cross_workspace_id: The ID of the source workspace for the data delivery.
        :param _builtins.str domain_id: The ID of the account to which the resource belongs.
        :param _builtins.str project_id: The ID of the account to which the resource belongs.
        :param _builtins.str region_id: The region ID.
        :param _builtins.str vendor_type: The environment provider. The value can be **HWCP**, **HWC**, **AWS**, **Azure**, or **GCP**.
        """
        pulumi.set(__self__, "cross_workspace_id", cross_workspace_id)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "vendor_type", vendor_type)

    @_builtins.property
    @pulumi.getter(name="crossWorkspaceId")
    def cross_workspace_id(self) -> _builtins.str:
        """
        The ID of the source workspace for the data delivery.
        """
        return pulumi.get(self, "cross_workspace_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The ID of the account to which the resource belongs.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The ID of the account to which the resource belongs.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="vendorType")
    def vendor_type(self) -> _builtins.str:
        """
        The environment provider. The value can be **HWCP**, **HWC**, **AWS**, **Azure**, or **GCP**.
        """
        return pulumi.get(self, "vendor_type")


@pulumi.output_type
class GetAlertsAlertFileInfoResult(dict):
    def __init__(__self__, *,
                 file_attr: _builtins.str,
                 file_content: _builtins.str,
                 file_hash: _builtins.str,
                 file_md5: _builtins.str,
                 file_new_path: _builtins.str,
                 file_path: _builtins.str,
                 file_sha256: _builtins.str):
        """
        :param _builtins.str file_attr: The file attribute.
        :param _builtins.str file_content: The file content.
        :param _builtins.str file_hash: The file hash value.
        :param _builtins.str file_md5: The file MD5 value.
        :param _builtins.str file_new_path: The file new path.
        :param _builtins.str file_path: The file path.
        :param _builtins.str file_sha256: The file SHA256 value.
        """
        pulumi.set(__self__, "file_attr", file_attr)
        pulumi.set(__self__, "file_content", file_content)
        pulumi.set(__self__, "file_hash", file_hash)
        pulumi.set(__self__, "file_md5", file_md5)
        pulumi.set(__self__, "file_new_path", file_new_path)
        pulumi.set(__self__, "file_path", file_path)
        pulumi.set(__self__, "file_sha256", file_sha256)

    @_builtins.property
    @pulumi.getter(name="fileAttr")
    def file_attr(self) -> _builtins.str:
        """
        The file attribute.
        """
        return pulumi.get(self, "file_attr")

    @_builtins.property
    @pulumi.getter(name="fileContent")
    def file_content(self) -> _builtins.str:
        """
        The file content.
        """
        return pulumi.get(self, "file_content")

    @_builtins.property
    @pulumi.getter(name="fileHash")
    def file_hash(self) -> _builtins.str:
        """
        The file hash value.
        """
        return pulumi.get(self, "file_hash")

    @_builtins.property
    @pulumi.getter(name="fileMd5")
    def file_md5(self) -> _builtins.str:
        """
        The file MD5 value.
        """
        return pulumi.get(self, "file_md5")

    @_builtins.property
    @pulumi.getter(name="fileNewPath")
    def file_new_path(self) -> _builtins.str:
        """
        The file new path.
        """
        return pulumi.get(self, "file_new_path")

    @_builtins.property
    @pulumi.getter(name="filePath")
    def file_path(self) -> _builtins.str:
        """
        The file path.
        """
        return pulumi.get(self, "file_path")

    @_builtins.property
    @pulumi.getter(name="fileSha256")
    def file_sha256(self) -> _builtins.str:
        """
        The file SHA256 value.
        """
        return pulumi.get(self, "file_sha256")


@pulumi.output_type
class GetAlertsAlertMalwareResult(dict):
    def __init__(__self__, *,
                 malware_class: _builtins.str,
                 malware_family: _builtins.str):
        """
        :param _builtins.str malware_class: The malware category.
        :param _builtins.str malware_family: The malicious family.
        """
        pulumi.set(__self__, "malware_class", malware_class)
        pulumi.set(__self__, "malware_family", malware_family)

    @_builtins.property
    @pulumi.getter(name="malwareClass")
    def malware_class(self) -> _builtins.str:
        """
        The malware category.
        """
        return pulumi.get(self, "malware_class")

    @_builtins.property
    @pulumi.getter(name="malwareFamily")
    def malware_family(self) -> _builtins.str:
        """
        The malicious family.
        """
        return pulumi.get(self, "malware_family")


@pulumi.output_type
class GetAlertsAlertNetworkListResult(dict):
    def __init__(__self__, *,
                 dest_domain: _builtins.str,
                 dest_geos: Sequence['outputs.GetAlertsAlertNetworkListDestGeoResult'],
                 dest_ip: _builtins.str,
                 dest_port: _builtins.str,
                 direction: _builtins.str,
                 protocol: _builtins.str,
                 src_domain: _builtins.str,
                 src_geos: Sequence['outputs.GetAlertsAlertNetworkListSrcGeoResult'],
                 src_ip: _builtins.str,
                 src_port: _builtins.str):
        """
        :param _builtins.str dest_domain: The destination domain name.
        :param Sequence['GetAlertsAlertNetworkListDestGeoArgs'] dest_geos: The geographical location of the destination IP address.
               The dest_geo structure is documented below.
        :param _builtins.str dest_ip: The destination IP address.
        :param _builtins.str dest_port: The destination port.
        :param _builtins.str direction: The direction. The value can be **IN** or **OUT**.
        :param _builtins.str protocol: The protocol.
        :param _builtins.str src_domain: The source domain name.
        :param Sequence['GetAlertsAlertNetworkListSrcGeoArgs'] src_geos: The geographical location of the source IP address.
               The src_geo structure is documented below.
        :param _builtins.str src_ip: The source IP address.
        :param _builtins.str src_port: The source port.
        """
        pulumi.set(__self__, "dest_domain", dest_domain)
        pulumi.set(__self__, "dest_geos", dest_geos)
        pulumi.set(__self__, "dest_ip", dest_ip)
        pulumi.set(__self__, "dest_port", dest_port)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "src_domain", src_domain)
        pulumi.set(__self__, "src_geos", src_geos)
        pulumi.set(__self__, "src_ip", src_ip)
        pulumi.set(__self__, "src_port", src_port)

    @_builtins.property
    @pulumi.getter(name="destDomain")
    def dest_domain(self) -> _builtins.str:
        """
        The destination domain name.
        """
        return pulumi.get(self, "dest_domain")

    @_builtins.property
    @pulumi.getter(name="destGeos")
    def dest_geos(self) -> Sequence['outputs.GetAlertsAlertNetworkListDestGeoResult']:
        """
        The geographical location of the destination IP address.
        The dest_geo structure is documented below.
        """
        return pulumi.get(self, "dest_geos")

    @_builtins.property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> _builtins.str:
        """
        The destination IP address.
        """
        return pulumi.get(self, "dest_ip")

    @_builtins.property
    @pulumi.getter(name="destPort")
    def dest_port(self) -> _builtins.str:
        """
        The destination port.
        """
        return pulumi.get(self, "dest_port")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        The direction. The value can be **IN** or **OUT**.
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="srcDomain")
    def src_domain(self) -> _builtins.str:
        """
        The source domain name.
        """
        return pulumi.get(self, "src_domain")

    @_builtins.property
    @pulumi.getter(name="srcGeos")
    def src_geos(self) -> Sequence['outputs.GetAlertsAlertNetworkListSrcGeoResult']:
        """
        The geographical location of the source IP address.
        The src_geo structure is documented below.
        """
        return pulumi.get(self, "src_geos")

    @_builtins.property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> _builtins.str:
        """
        The source IP address.
        """
        return pulumi.get(self, "src_ip")

    @_builtins.property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> _builtins.str:
        """
        The source port.
        """
        return pulumi.get(self, "src_port")


@pulumi.output_type
class GetAlertsAlertNetworkListDestGeoResult(dict):
    def __init__(__self__, *,
                 city_code: _builtins.str,
                 country_code: _builtins.str,
                 latitude: _builtins.float,
                 longitude: _builtins.float):
        """
        :param _builtins.str city_code: The city code.
        :param _builtins.str country_code: The country code.
        :param _builtins.float latitude: The latitude of the geographical location.
        :param _builtins.float longitude: The longitude of geographical location.
        """
        pulumi.set(__self__, "city_code", city_code)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)

    @_builtins.property
    @pulumi.getter(name="cityCode")
    def city_code(self) -> _builtins.str:
        """
        The city code.
        """
        return pulumi.get(self, "city_code")

    @_builtins.property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> _builtins.str:
        """
        The country code.
        """
        return pulumi.get(self, "country_code")

    @_builtins.property
    @pulumi.getter
    def latitude(self) -> _builtins.float:
        """
        The latitude of the geographical location.
        """
        return pulumi.get(self, "latitude")

    @_builtins.property
    @pulumi.getter
    def longitude(self) -> _builtins.float:
        """
        The longitude of geographical location.
        """
        return pulumi.get(self, "longitude")


@pulumi.output_type
class GetAlertsAlertNetworkListSrcGeoResult(dict):
    def __init__(__self__, *,
                 city_code: _builtins.str,
                 country_code: _builtins.str,
                 latitude: _builtins.float,
                 longitude: _builtins.float):
        """
        :param _builtins.str city_code: The city code.
        :param _builtins.str country_code: The country code.
        :param _builtins.float latitude: The latitude of the geographical location.
        :param _builtins.float longitude: The longitude of geographical location.
        """
        pulumi.set(__self__, "city_code", city_code)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)

    @_builtins.property
    @pulumi.getter(name="cityCode")
    def city_code(self) -> _builtins.str:
        """
        The city code.
        """
        return pulumi.get(self, "city_code")

    @_builtins.property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> _builtins.str:
        """
        The country code.
        """
        return pulumi.get(self, "country_code")

    @_builtins.property
    @pulumi.getter
    def latitude(self) -> _builtins.float:
        """
        The latitude of the geographical location.
        """
        return pulumi.get(self, "latitude")

    @_builtins.property
    @pulumi.getter
    def longitude(self) -> _builtins.float:
        """
        The longitude of geographical location.
        """
        return pulumi.get(self, "longitude")


@pulumi.output_type
class GetAlertsAlertProcessResult(dict):
    def __init__(__self__, *,
                 process_child_cmdline: _builtins.str,
                 process_child_name: _builtins.str,
                 process_child_path: _builtins.str,
                 process_child_pid: _builtins.int,
                 process_child_uid: _builtins.int,
                 process_cmdline: _builtins.str,
                 process_launche_time: _builtins.str,
                 process_name: _builtins.str,
                 process_parent_cmdline: _builtins.str,
                 process_parent_name: _builtins.str,
                 process_parent_path: _builtins.str,
                 process_parent_pid: _builtins.int,
                 process_parent_uid: _builtins.int,
                 process_path: _builtins.str,
                 process_pid: _builtins.int,
                 process_terminate_time: _builtins.str,
                 process_uid: _builtins.int):
        """
        :param _builtins.str process_child_cmdline: The subprocess command line.
        :param _builtins.str process_child_name: The subprocess name.
        :param _builtins.str process_child_path: The subprocess execution file path.
        :param _builtins.int process_child_pid: The subprocess ID.
        :param _builtins.int process_child_uid: The subprocess user ID.
        :param _builtins.str process_cmdline: The process command line.
        :param _builtins.str process_launche_time: The process start time.
        :param _builtins.str process_name: The process name.
        :param _builtins.str process_parent_cmdline: The parent process command line.
        :param _builtins.str process_parent_name: The parent process name.
        :param _builtins.str process_parent_path: The parent process execution file path.
        :param _builtins.int process_parent_pid: The parent process ID.
        :param _builtins.int process_parent_uid: The parent process user ID.
        :param _builtins.str process_path: The process execution file path.
        :param _builtins.int process_pid: The process ID.
        :param _builtins.str process_terminate_time: The process end time.
        :param _builtins.int process_uid: The process user ID.
        """
        pulumi.set(__self__, "process_child_cmdline", process_child_cmdline)
        pulumi.set(__self__, "process_child_name", process_child_name)
        pulumi.set(__self__, "process_child_path", process_child_path)
        pulumi.set(__self__, "process_child_pid", process_child_pid)
        pulumi.set(__self__, "process_child_uid", process_child_uid)
        pulumi.set(__self__, "process_cmdline", process_cmdline)
        pulumi.set(__self__, "process_launche_time", process_launche_time)
        pulumi.set(__self__, "process_name", process_name)
        pulumi.set(__self__, "process_parent_cmdline", process_parent_cmdline)
        pulumi.set(__self__, "process_parent_name", process_parent_name)
        pulumi.set(__self__, "process_parent_path", process_parent_path)
        pulumi.set(__self__, "process_parent_pid", process_parent_pid)
        pulumi.set(__self__, "process_parent_uid", process_parent_uid)
        pulumi.set(__self__, "process_path", process_path)
        pulumi.set(__self__, "process_pid", process_pid)
        pulumi.set(__self__, "process_terminate_time", process_terminate_time)
        pulumi.set(__self__, "process_uid", process_uid)

    @_builtins.property
    @pulumi.getter(name="processChildCmdline")
    def process_child_cmdline(self) -> _builtins.str:
        """
        The subprocess command line.
        """
        return pulumi.get(self, "process_child_cmdline")

    @_builtins.property
    @pulumi.getter(name="processChildName")
    def process_child_name(self) -> _builtins.str:
        """
        The subprocess name.
        """
        return pulumi.get(self, "process_child_name")

    @_builtins.property
    @pulumi.getter(name="processChildPath")
    def process_child_path(self) -> _builtins.str:
        """
        The subprocess execution file path.
        """
        return pulumi.get(self, "process_child_path")

    @_builtins.property
    @pulumi.getter(name="processChildPid")
    def process_child_pid(self) -> _builtins.int:
        """
        The subprocess ID.
        """
        return pulumi.get(self, "process_child_pid")

    @_builtins.property
    @pulumi.getter(name="processChildUid")
    def process_child_uid(self) -> _builtins.int:
        """
        The subprocess user ID.
        """
        return pulumi.get(self, "process_child_uid")

    @_builtins.property
    @pulumi.getter(name="processCmdline")
    def process_cmdline(self) -> _builtins.str:
        """
        The process command line.
        """
        return pulumi.get(self, "process_cmdline")

    @_builtins.property
    @pulumi.getter(name="processLauncheTime")
    def process_launche_time(self) -> _builtins.str:
        """
        The process start time.
        """
        return pulumi.get(self, "process_launche_time")

    @_builtins.property
    @pulumi.getter(name="processName")
    def process_name(self) -> _builtins.str:
        """
        The process name.
        """
        return pulumi.get(self, "process_name")

    @_builtins.property
    @pulumi.getter(name="processParentCmdline")
    def process_parent_cmdline(self) -> _builtins.str:
        """
        The parent process command line.
        """
        return pulumi.get(self, "process_parent_cmdline")

    @_builtins.property
    @pulumi.getter(name="processParentName")
    def process_parent_name(self) -> _builtins.str:
        """
        The parent process name.
        """
        return pulumi.get(self, "process_parent_name")

    @_builtins.property
    @pulumi.getter(name="processParentPath")
    def process_parent_path(self) -> _builtins.str:
        """
        The parent process execution file path.
        """
        return pulumi.get(self, "process_parent_path")

    @_builtins.property
    @pulumi.getter(name="processParentPid")
    def process_parent_pid(self) -> _builtins.int:
        """
        The parent process ID.
        """
        return pulumi.get(self, "process_parent_pid")

    @_builtins.property
    @pulumi.getter(name="processParentUid")
    def process_parent_uid(self) -> _builtins.int:
        """
        The parent process user ID.
        """
        return pulumi.get(self, "process_parent_uid")

    @_builtins.property
    @pulumi.getter(name="processPath")
    def process_path(self) -> _builtins.str:
        """
        The process execution file path.
        """
        return pulumi.get(self, "process_path")

    @_builtins.property
    @pulumi.getter(name="processPid")
    def process_pid(self) -> _builtins.int:
        """
        The process ID.
        """
        return pulumi.get(self, "process_pid")

    @_builtins.property
    @pulumi.getter(name="processTerminateTime")
    def process_terminate_time(self) -> _builtins.str:
        """
        The process end time.
        """
        return pulumi.get(self, "process_terminate_time")

    @_builtins.property
    @pulumi.getter(name="processUid")
    def process_uid(self) -> _builtins.int:
        """
        The process user ID.
        """
        return pulumi.get(self, "process_uid")


@pulumi.output_type
class GetAlertsAlertRemediationResult(dict):
    def __init__(__self__, *,
                 recommendation: _builtins.str,
                 url: _builtins.str):
        """
        :param _builtins.str recommendation: The recommended solution.
        :param _builtins.str url: The link to the general fix information for the incident.
        """
        pulumi.set(__self__, "recommendation", recommendation)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def recommendation(self) -> _builtins.str:
        """
        The recommended solution.
        """
        return pulumi.get(self, "recommendation")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The link to the general fix information for the incident.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetAlertsAlertResourceListResult(dict):
    def __init__(__self__, *,
                 domain_id: _builtins.str,
                 ep_id: _builtins.str,
                 ep_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 provider: _builtins.str,
                 region_id: _builtins.str,
                 tags: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str domain_id: The ID of the account to which the resource belongs.
        :param _builtins.str ep_id: The enterprise project ID.
        :param _builtins.str ep_name: The enterprise project name.
        :param _builtins.str id: The resource ID.
        :param _builtins.str name: Specifies the expression name.
        :param _builtins.str project_id: The ID of the account to which the resource belongs.
        :param _builtins.str provider: The cloud service name, which is the same as the provider field in the RMS service.
        :param _builtins.str region_id: The region ID.
        :param _builtins.str tags: The resource tags.
        :param _builtins.str type: The resource type.
        """
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "ep_id", ep_id)
        pulumi.set(__self__, "ep_name", ep_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The ID of the account to which the resource belongs.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="epId")
    def ep_id(self) -> _builtins.str:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "ep_id")

    @_builtins.property
    @pulumi.getter(name="epName")
    def ep_name(self) -> _builtins.str:
        """
        The enterprise project name.
        """
        return pulumi.get(self, "ep_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the expression name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The ID of the account to which the resource belongs.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def provider(self) -> _builtins.str:
        """
        The cloud service name, which is the same as the provider field in the RMS service.
        """
        return pulumi.get(self, "provider")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> _builtins.str:
        """
        The resource tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlertsAlertTypeResult(dict):
    def __init__(__self__, *,
                 alert_type: _builtins.str,
                 category: _builtins.str):
        """
        :param _builtins.str alert_type: The alert type.
        :param _builtins.str category: The category.
        """
        pulumi.set(__self__, "alert_type", alert_type)
        pulumi.set(__self__, "category", category)

    @_builtins.property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> _builtins.str:
        """
        The alert type.
        """
        return pulumi.get(self, "alert_type")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        The category.
        """
        return pulumi.get(self, "category")


@pulumi.output_type
class GetAlertsAlertUserInfoResult(dict):
    def __init__(__self__, *,
                 user_id: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str user_id: The user ID.
        :param _builtins.str user_name: The user name.
        """
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        The user ID.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        The user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetAlertsConditionResult(dict):
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.GetAlertsConditionConditionResult']] = None,
                 logics: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence['GetAlertsConditionConditionArgs'] conditions: Specifies the condition expression list.
               The conditions structure is documented below.
        :param Sequence[_builtins.str] logics: Specifies the expression logic.
               
               <a name="condition_conditions"></a>
               The `conditions` block supports:
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if logics is not None:
            pulumi.set(__self__, "logics", logics)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.GetAlertsConditionConditionResult']]:
        """
        Specifies the condition expression list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def logics(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the expression logic.

        <a name="condition_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "logics")


@pulumi.output_type
class GetAlertsConditionConditionResult(dict):
    def __init__(__self__, *,
                 datas: Optional[Sequence[_builtins.str]] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] datas: Specifies the expression content.
               + About `status` expression, e.g. **["handle_status", "!=", "Closed"]**.
               + About `name` expression, e.g. **["title", "contains", "test"]**.
               + About `level` expression, e.g. **["severity", "in", "Tips,Low"]**.
               + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
               + About `type.alert_type` expression, e.g. **["alert_type.alert_type", "=", "xxx"]**.
               + About `first_occurrence_time` expression, e.g. **["first_observed_time", "<=", "2024-08-23T20:09:26Z+0800"]**.
        :param _builtins.str name: Specifies the expression name.
        """
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the expression content.
        + About `status` expression, e.g. **["handle_status", "!=", "Closed"]**.
        + About `name` expression, e.g. **["title", "contains", "test"]**.
        + About `level` expression, e.g. **["severity", "in", "Tips,Low"]**.
        + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
        + About `type.alert_type` expression, e.g. **["alert_type.alert_type", "=", "xxx"]**.
        + About `first_occurrence_time` expression, e.g. **["first_observed_time", "<=", "2024-08-23T20:09:26Z+0800"]**.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the expression name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCataloguesDataResult(dict):
    def __init__(__self__, *,
                 catalogue_address: _builtins.str,
                 catalogue_status: _builtins.bool,
                 id: _builtins.str,
                 is_card_area: _builtins.bool,
                 is_display: _builtins.bool,
                 is_landing_page: _builtins.bool,
                 is_navigation: _builtins.bool,
                 layout_id: _builtins.str,
                 layout_name: _builtins.str,
                 parent_alisa_en: _builtins.str,
                 parent_alisa_zh: _builtins.str,
                 parent_catalogue: _builtins.str,
                 publisher_name: _builtins.str,
                 second_alias_en: _builtins.str,
                 second_alias_zh: _builtins.str,
                 second_catalogue: _builtins.str):
        """
        :param _builtins.str catalogue_address: The address of the catalogue.
        :param _builtins.bool catalogue_status: Whether the catalogue is built-in.
        :param _builtins.str id: The unique identifier of the catalogue.
        :param _builtins.bool is_card_area: Whether to display the card area.
        :param _builtins.bool is_display: Whether to display the catalogue.
        :param _builtins.bool is_landing_page: Whether it is a landing page.
        :param _builtins.bool is_navigation: Whether to display the breadcrumb navigation.
        :param _builtins.str layout_id: The ID of the layout associated with the catalogue.
        :param _builtins.str layout_name: The name of the layout associated with the catalogue.
        :param _builtins.str parent_alisa_en: The English alias of the parent catalogue.
        :param _builtins.str parent_alisa_zh: The Chinese alias of the parent catalogue.
        :param _builtins.str parent_catalogue: The name of the parent (first-level) catalogue.
        :param _builtins.str publisher_name: The name of the publisher.
        :param _builtins.str second_alias_en: The English alias of the second-level catalogue.
        :param _builtins.str second_alias_zh: The Chinese alias of the second-level catalogue.
        :param _builtins.str second_catalogue: The name of the second-level catalogue.
        """
        pulumi.set(__self__, "catalogue_address", catalogue_address)
        pulumi.set(__self__, "catalogue_status", catalogue_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_card_area", is_card_area)
        pulumi.set(__self__, "is_display", is_display)
        pulumi.set(__self__, "is_landing_page", is_landing_page)
        pulumi.set(__self__, "is_navigation", is_navigation)
        pulumi.set(__self__, "layout_id", layout_id)
        pulumi.set(__self__, "layout_name", layout_name)
        pulumi.set(__self__, "parent_alisa_en", parent_alisa_en)
        pulumi.set(__self__, "parent_alisa_zh", parent_alisa_zh)
        pulumi.set(__self__, "parent_catalogue", parent_catalogue)
        pulumi.set(__self__, "publisher_name", publisher_name)
        pulumi.set(__self__, "second_alias_en", second_alias_en)
        pulumi.set(__self__, "second_alias_zh", second_alias_zh)
        pulumi.set(__self__, "second_catalogue", second_catalogue)

    @_builtins.property
    @pulumi.getter(name="catalogueAddress")
    def catalogue_address(self) -> _builtins.str:
        """
        The address of the catalogue.
        """
        return pulumi.get(self, "catalogue_address")

    @_builtins.property
    @pulumi.getter(name="catalogueStatus")
    def catalogue_status(self) -> _builtins.bool:
        """
        Whether the catalogue is built-in.
        """
        return pulumi.get(self, "catalogue_status")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique identifier of the catalogue.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCardArea")
    def is_card_area(self) -> _builtins.bool:
        """
        Whether to display the card area.
        """
        return pulumi.get(self, "is_card_area")

    @_builtins.property
    @pulumi.getter(name="isDisplay")
    def is_display(self) -> _builtins.bool:
        """
        Whether to display the catalogue.
        """
        return pulumi.get(self, "is_display")

    @_builtins.property
    @pulumi.getter(name="isLandingPage")
    def is_landing_page(self) -> _builtins.bool:
        """
        Whether it is a landing page.
        """
        return pulumi.get(self, "is_landing_page")

    @_builtins.property
    @pulumi.getter(name="isNavigation")
    def is_navigation(self) -> _builtins.bool:
        """
        Whether to display the breadcrumb navigation.
        """
        return pulumi.get(self, "is_navigation")

    @_builtins.property
    @pulumi.getter(name="layoutId")
    def layout_id(self) -> _builtins.str:
        """
        The ID of the layout associated with the catalogue.
        """
        return pulumi.get(self, "layout_id")

    @_builtins.property
    @pulumi.getter(name="layoutName")
    def layout_name(self) -> _builtins.str:
        """
        The name of the layout associated with the catalogue.
        """
        return pulumi.get(self, "layout_name")

    @_builtins.property
    @pulumi.getter(name="parentAlisaEn")
    def parent_alisa_en(self) -> _builtins.str:
        """
        The English alias of the parent catalogue.
        """
        return pulumi.get(self, "parent_alisa_en")

    @_builtins.property
    @pulumi.getter(name="parentAlisaZh")
    def parent_alisa_zh(self) -> _builtins.str:
        """
        The Chinese alias of the parent catalogue.
        """
        return pulumi.get(self, "parent_alisa_zh")

    @_builtins.property
    @pulumi.getter(name="parentCatalogue")
    def parent_catalogue(self) -> _builtins.str:
        """
        The name of the parent (first-level) catalogue.
        """
        return pulumi.get(self, "parent_catalogue")

    @_builtins.property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> _builtins.str:
        """
        The name of the publisher.
        """
        return pulumi.get(self, "publisher_name")

    @_builtins.property
    @pulumi.getter(name="secondAliasEn")
    def second_alias_en(self) -> _builtins.str:
        """
        The English alias of the second-level catalogue.
        """
        return pulumi.get(self, "second_alias_en")

    @_builtins.property
    @pulumi.getter(name="secondAliasZh")
    def second_alias_zh(self) -> _builtins.str:
        """
        The Chinese alias of the second-level catalogue.
        """
        return pulumi.get(self, "second_alias_zh")

    @_builtins.property
    @pulumi.getter(name="secondCatalogue")
    def second_catalogue(self) -> _builtins.str:
        """
        The name of the second-level catalogue.
        """
        return pulumi.get(self, "second_catalogue")


@pulumi.output_type
class GetCataloguesSearchDataResult(dict):
    def __init__(__self__, *,
                 catalogue_address: _builtins.str,
                 catalogue_status: _builtins.bool,
                 id: _builtins.str,
                 is_card_area: _builtins.bool,
                 is_display: _builtins.bool,
                 is_landing_page: _builtins.bool,
                 is_navigation: _builtins.bool,
                 layout_id: _builtins.str,
                 layout_name: _builtins.str,
                 parent_alias_en: _builtins.str,
                 parent_alias_zh: _builtins.str,
                 parent_catalogue: _builtins.str,
                 publisher_name: _builtins.str,
                 second_alias_en: _builtins.str,
                 second_alias_zh: _builtins.str,
                 second_catalogue: _builtins.str):
        """
        :param _builtins.str catalogue_address: The address of the catalogue.
        :param _builtins.bool catalogue_status: Specifies the status of the catalogue. Defaults to **false**.
        :param _builtins.str id: The ID of the catalogue.
        :param _builtins.bool is_card_area: Whether to display the card area.
        :param _builtins.bool is_display: Whether to display the catalogue.
        :param _builtins.bool is_landing_page: Whether it is a landing page.
        :param _builtins.bool is_navigation: Whether to display navigation.
        :param _builtins.str layout_id: The ID of the layout.
        :param _builtins.str layout_name: Specifies the layout name.
        :param _builtins.str parent_alias_en: The English alias of the parent catalogue.
        :param _builtins.str parent_alias_zh: The Chinese alias of the parent catalogue.
        :param _builtins.str parent_catalogue: Specifies the parent catalogue name.
        :param _builtins.str publisher_name: Specifies the publisher name.
        :param _builtins.str second_alias_en: The English alias of the second-level catalogue.
        :param _builtins.str second_alias_zh: The Chinese alias of the second-level catalogue.
        :param _builtins.str second_catalogue: Specifies the second-level catalogue name.
        """
        pulumi.set(__self__, "catalogue_address", catalogue_address)
        pulumi.set(__self__, "catalogue_status", catalogue_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_card_area", is_card_area)
        pulumi.set(__self__, "is_display", is_display)
        pulumi.set(__self__, "is_landing_page", is_landing_page)
        pulumi.set(__self__, "is_navigation", is_navigation)
        pulumi.set(__self__, "layout_id", layout_id)
        pulumi.set(__self__, "layout_name", layout_name)
        pulumi.set(__self__, "parent_alias_en", parent_alias_en)
        pulumi.set(__self__, "parent_alias_zh", parent_alias_zh)
        pulumi.set(__self__, "parent_catalogue", parent_catalogue)
        pulumi.set(__self__, "publisher_name", publisher_name)
        pulumi.set(__self__, "second_alias_en", second_alias_en)
        pulumi.set(__self__, "second_alias_zh", second_alias_zh)
        pulumi.set(__self__, "second_catalogue", second_catalogue)

    @_builtins.property
    @pulumi.getter(name="catalogueAddress")
    def catalogue_address(self) -> _builtins.str:
        """
        The address of the catalogue.
        """
        return pulumi.get(self, "catalogue_address")

    @_builtins.property
    @pulumi.getter(name="catalogueStatus")
    def catalogue_status(self) -> _builtins.bool:
        """
        Specifies the status of the catalogue. Defaults to **false**.
        """
        return pulumi.get(self, "catalogue_status")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the catalogue.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCardArea")
    def is_card_area(self) -> _builtins.bool:
        """
        Whether to display the card area.
        """
        return pulumi.get(self, "is_card_area")

    @_builtins.property
    @pulumi.getter(name="isDisplay")
    def is_display(self) -> _builtins.bool:
        """
        Whether to display the catalogue.
        """
        return pulumi.get(self, "is_display")

    @_builtins.property
    @pulumi.getter(name="isLandingPage")
    def is_landing_page(self) -> _builtins.bool:
        """
        Whether it is a landing page.
        """
        return pulumi.get(self, "is_landing_page")

    @_builtins.property
    @pulumi.getter(name="isNavigation")
    def is_navigation(self) -> _builtins.bool:
        """
        Whether to display navigation.
        """
        return pulumi.get(self, "is_navigation")

    @_builtins.property
    @pulumi.getter(name="layoutId")
    def layout_id(self) -> _builtins.str:
        """
        The ID of the layout.
        """
        return pulumi.get(self, "layout_id")

    @_builtins.property
    @pulumi.getter(name="layoutName")
    def layout_name(self) -> _builtins.str:
        """
        Specifies the layout name.
        """
        return pulumi.get(self, "layout_name")

    @_builtins.property
    @pulumi.getter(name="parentAliasEn")
    def parent_alias_en(self) -> _builtins.str:
        """
        The English alias of the parent catalogue.
        """
        return pulumi.get(self, "parent_alias_en")

    @_builtins.property
    @pulumi.getter(name="parentAliasZh")
    def parent_alias_zh(self) -> _builtins.str:
        """
        The Chinese alias of the parent catalogue.
        """
        return pulumi.get(self, "parent_alias_zh")

    @_builtins.property
    @pulumi.getter(name="parentCatalogue")
    def parent_catalogue(self) -> _builtins.str:
        """
        Specifies the parent catalogue name.
        """
        return pulumi.get(self, "parent_catalogue")

    @_builtins.property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> _builtins.str:
        """
        Specifies the publisher name.
        """
        return pulumi.get(self, "publisher_name")

    @_builtins.property
    @pulumi.getter(name="secondAliasEn")
    def second_alias_en(self) -> _builtins.str:
        """
        The English alias of the second-level catalogue.
        """
        return pulumi.get(self, "second_alias_en")

    @_builtins.property
    @pulumi.getter(name="secondAliasZh")
    def second_alias_zh(self) -> _builtins.str:
        """
        The Chinese alias of the second-level catalogue.
        """
        return pulumi.get(self, "second_alias_zh")

    @_builtins.property
    @pulumi.getter(name="secondCatalogue")
    def second_catalogue(self) -> _builtins.str:
        """
        Specifies the second-level catalogue name.
        """
        return pulumi.get(self, "second_catalogue")


@pulumi.output_type
class GetComponentTemplatesRecordResult(dict):
    def __init__(__self__, *,
                 component_id: _builtins.str,
                 component_name: _builtins.str,
                 file_name: _builtins.str,
                 file_path: _builtins.str,
                 file_type: _builtins.str,
                 param: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str component_id: Specifies the component ID.
        :param _builtins.str component_name: The component name.
        :param _builtins.str file_name: The file name.
        :param _builtins.str file_path: The file path.
        :param _builtins.str file_type: Specifies the file type. The valid values are **JVM**, **LOG4J2**, and **YML**.
        :param _builtins.str param: The param.
        :param _builtins.str version: The version.
        """
        pulumi.set(__self__, "component_id", component_id)
        pulumi.set(__self__, "component_name", component_name)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "file_path", file_path)
        pulumi.set(__self__, "file_type", file_type)
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> _builtins.str:
        """
        Specifies the component ID.
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter(name="componentName")
    def component_name(self) -> _builtins.str:
        """
        The component name.
        """
        return pulumi.get(self, "component_name")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> _builtins.str:
        """
        The file name.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter(name="filePath")
    def file_path(self) -> _builtins.str:
        """
        The file path.
        """
        return pulumi.get(self, "file_path")

    @_builtins.property
    @pulumi.getter(name="fileType")
    def file_type(self) -> _builtins.str:
        """
        Specifies the file type. The valid values are **JVM**, **LOG4J2**, and **YML**.
        """
        return pulumi.get(self, "file_type")

    @_builtins.property
    @pulumi.getter
    def param(self) -> _builtins.str:
        """
        The param.
        """
        return pulumi.get(self, "param")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDataClassFieldsFieldResult(dict):
    def __init__(__self__, *,
                 business_code: _builtins.str,
                 business_id: _builtins.str,
                 business_type: _builtins.str,
                 case_sensitive: _builtins.bool,
                 creatabled: _builtins.bool,
                 created_at: _builtins.str,
                 creator: _builtins.str,
                 creator_id: _builtins.str,
                 data_class_name: _builtins.str,
                 default_value: _builtins.str,
                 description: _builtins.str,
                 display_type: _builtins.str,
                 editabled: _builtins.bool,
                 extra_json: _builtins.str,
                 field_key: _builtins.str,
                 field_tooltip: _builtins.str,
                 id: _builtins.str,
                 io_type: _builtins.str,
                 is_built_in: _builtins.bool,
                 json_schema: _builtins.str,
                 maintainabled: _builtins.bool,
                 mapping: _builtins.bool,
                 modifier: _builtins.str,
                 modifier_id: _builtins.str,
                 name: _builtins.str,
                 read_only: _builtins.bool,
                 required: _builtins.bool,
                 searchabled: _builtins.bool,
                 subscribed_version: _builtins.str,
                 target_api: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 used_by: _builtins.str,
                 visible: _builtins.bool):
        """
        :param _builtins.str business_code: The business code of the field.
        :param _builtins.str business_id: The ID of associated service.
        :param _builtins.str business_type: The associated service.
        :param _builtins.bool case_sensitive: Whether the field is case sensitive.
        :param _builtins.bool creatabled: Whether the field can be created.
        :param _builtins.str created_at: The create time.
        :param _builtins.str creator: The creator.
        :param _builtins.str creator_id: The creator ID.
        :param _builtins.str data_class_name: The data class name.
        :param _builtins.str default_value: The default value.
        :param _builtins.str description: The field description.
        :param _builtins.str display_type: The display type.
        :param _builtins.bool editabled: Whether the field can be edited.
        :param _builtins.str extra_json: The additional JSON.
        :param _builtins.str field_key: The field key.
        :param _builtins.str field_tooltip: The tool tip.
        :param _builtins.str id: The field ID.
        :param _builtins.str io_type: The input and output types.
        :param _builtins.bool is_built_in: Specifies whether it is built in SecMaster. The value can be **true** or **false**.
        :param _builtins.str json_schema: The JSON mode.
        :param _builtins.bool maintainabled: Whether the field can be maintained.
        :param _builtins.bool mapping: Specifies whether to display in other places other the classification and mapping module.
        :param _builtins.str modifier: The modifier.
        :param _builtins.str modifier_id: The modifier ID.
        :param _builtins.str name: Specifies the field name.
        :param _builtins.bool read_only: Whether the field is read-only.
        :param _builtins.bool required: Whether the field is required.
        :param _builtins.bool searchabled: Whether the field is searchable mode.
        :param _builtins.str subscribed_version: The subscribed version.
        :param _builtins.str target_api: The target API.
        :param _builtins.str type: The field type, such as **short text**, **radio** and **grid**.
        :param _builtins.str updated_at: The update time.
        :param _builtins.str used_by: Which services are used by.
        :param _builtins.bool visible: Whether the field is visible.
        """
        pulumi.set(__self__, "business_code", business_code)
        pulumi.set(__self__, "business_id", business_id)
        pulumi.set(__self__, "business_type", business_type)
        pulumi.set(__self__, "case_sensitive", case_sensitive)
        pulumi.set(__self__, "creatabled", creatabled)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "creator_id", creator_id)
        pulumi.set(__self__, "data_class_name", data_class_name)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_type", display_type)
        pulumi.set(__self__, "editabled", editabled)
        pulumi.set(__self__, "extra_json", extra_json)
        pulumi.set(__self__, "field_key", field_key)
        pulumi.set(__self__, "field_tooltip", field_tooltip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "io_type", io_type)
        pulumi.set(__self__, "is_built_in", is_built_in)
        pulumi.set(__self__, "json_schema", json_schema)
        pulumi.set(__self__, "maintainabled", maintainabled)
        pulumi.set(__self__, "mapping", mapping)
        pulumi.set(__self__, "modifier", modifier)
        pulumi.set(__self__, "modifier_id", modifier_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "searchabled", searchabled)
        pulumi.set(__self__, "subscribed_version", subscribed_version)
        pulumi.set(__self__, "target_api", target_api)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "used_by", used_by)
        pulumi.set(__self__, "visible", visible)

    @_builtins.property
    @pulumi.getter(name="businessCode")
    def business_code(self) -> _builtins.str:
        """
        The business code of the field.
        """
        return pulumi.get(self, "business_code")

    @_builtins.property
    @pulumi.getter(name="businessId")
    def business_id(self) -> _builtins.str:
        """
        The ID of associated service.
        """
        return pulumi.get(self, "business_id")

    @_builtins.property
    @pulumi.getter(name="businessType")
    def business_type(self) -> _builtins.str:
        """
        The associated service.
        """
        return pulumi.get(self, "business_type")

    @_builtins.property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> _builtins.bool:
        """
        Whether the field is case sensitive.
        """
        return pulumi.get(self, "case_sensitive")

    @_builtins.property
    @pulumi.getter
    def creatabled(self) -> _builtins.bool:
        """
        Whether the field can be created.
        """
        return pulumi.get(self, "creatabled")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The create time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        The creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> _builtins.str:
        """
        The creator ID.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter(name="dataClassName")
    def data_class_name(self) -> _builtins.str:
        """
        The data class name.
        """
        return pulumi.get(self, "data_class_name")

    @_builtins.property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> _builtins.str:
        """
        The default value.
        """
        return pulumi.get(self, "default_value")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The field description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayType")
    def display_type(self) -> _builtins.str:
        """
        The display type.
        """
        return pulumi.get(self, "display_type")

    @_builtins.property
    @pulumi.getter
    def editabled(self) -> _builtins.bool:
        """
        Whether the field can be edited.
        """
        return pulumi.get(self, "editabled")

    @_builtins.property
    @pulumi.getter(name="extraJson")
    def extra_json(self) -> _builtins.str:
        """
        The additional JSON.
        """
        return pulumi.get(self, "extra_json")

    @_builtins.property
    @pulumi.getter(name="fieldKey")
    def field_key(self) -> _builtins.str:
        """
        The field key.
        """
        return pulumi.get(self, "field_key")

    @_builtins.property
    @pulumi.getter(name="fieldTooltip")
    def field_tooltip(self) -> _builtins.str:
        """
        The tool tip.
        """
        return pulumi.get(self, "field_tooltip")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The field ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ioType")
    def io_type(self) -> _builtins.str:
        """
        The input and output types.
        """
        return pulumi.get(self, "io_type")

    @_builtins.property
    @pulumi.getter(name="isBuiltIn")
    def is_built_in(self) -> _builtins.bool:
        """
        Specifies whether it is built in SecMaster. The value can be **true** or **false**.
        """
        return pulumi.get(self, "is_built_in")

    @_builtins.property
    @pulumi.getter(name="jsonSchema")
    def json_schema(self) -> _builtins.str:
        """
        The JSON mode.
        """
        return pulumi.get(self, "json_schema")

    @_builtins.property
    @pulumi.getter
    def maintainabled(self) -> _builtins.bool:
        """
        Whether the field can be maintained.
        """
        return pulumi.get(self, "maintainabled")

    @_builtins.property
    @pulumi.getter
    def mapping(self) -> _builtins.bool:
        """
        Specifies whether to display in other places other the classification and mapping module.
        """
        return pulumi.get(self, "mapping")

    @_builtins.property
    @pulumi.getter
    def modifier(self) -> _builtins.str:
        """
        The modifier.
        """
        return pulumi.get(self, "modifier")

    @_builtins.property
    @pulumi.getter(name="modifierId")
    def modifier_id(self) -> _builtins.str:
        """
        The modifier ID.
        """
        return pulumi.get(self, "modifier_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the field name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> _builtins.bool:
        """
        Whether the field is read-only.
        """
        return pulumi.get(self, "read_only")

    @_builtins.property
    @pulumi.getter
    def required(self) -> _builtins.bool:
        """
        Whether the field is required.
        """
        return pulumi.get(self, "required")

    @_builtins.property
    @pulumi.getter
    def searchabled(self) -> _builtins.bool:
        """
        Whether the field is searchable mode.
        """
        return pulumi.get(self, "searchabled")

    @_builtins.property
    @pulumi.getter(name="subscribedVersion")
    def subscribed_version(self) -> _builtins.str:
        """
        The subscribed version.
        """
        return pulumi.get(self, "subscribed_version")

    @_builtins.property
    @pulumi.getter(name="targetApi")
    def target_api(self) -> _builtins.str:
        """
        The target API.
        """
        return pulumi.get(self, "target_api")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The field type, such as **short text**, **radio** and **grid**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="usedBy")
    def used_by(self) -> _builtins.str:
        """
        Which services are used by.
        """
        return pulumi.get(self, "used_by")

    @_builtins.property
    @pulumi.getter
    def visible(self) -> _builtins.bool:
        """
        Whether the field is visible.
        """
        return pulumi.get(self, "visible")


@pulumi.output_type
class GetDataClassesDataClassResult(dict):
    def __init__(__self__, *,
                 business_code: _builtins.str,
                 created_at: _builtins.str,
                 creator: _builtins.str,
                 creator_id: _builtins.str,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 id: _builtins.str,
                 is_built_in: _builtins.bool,
                 modifier: _builtins.str,
                 modifier_id: _builtins.str,
                 name: _builtins.str,
                 parent_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 subscribed_version: _builtins.str,
                 type_num: _builtins.int,
                 updated_at: _builtins.str,
                 workspace_id: _builtins.str):
        """
        :param _builtins.str business_code: Specifies the business code of the data class. Fuzzy matching is supported.
        :param _builtins.str created_at: The creation time.
        :param _builtins.str creator: The creator.
        :param _builtins.str creator_id: The creator ID.
        :param _builtins.str description: Specifies the data class description. Fuzzy matching is supported.
        :param _builtins.str domain_id: The domain ID.
        :param _builtins.str id: The ID of the data class.
        :param _builtins.bool is_built_in: Specifies whether the data class is built in SecMaster.
               The value can be  **true** or **false**.
        :param _builtins.str modifier: The modifier.
        :param _builtins.str modifier_id: The modifier ID.
        :param _builtins.str name: Specifies the name of the data class. Fuzzy matching is supported.
        :param _builtins.str parent_id: The parent data class ID.
        :param _builtins.str project_id: The project ID.
        :param _builtins.str region_id: The region ID.
        :param _builtins.str subscribed_version: The subscribed version of the data class.
        :param _builtins.int type_num: The quantity of sub-type data classes.
        :param _builtins.str updated_at: The update time.
        :param _builtins.str workspace_id: Specifies the workspace ID.
        """
        pulumi.set(__self__, "business_code", business_code)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "creator_id", creator_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_built_in", is_built_in)
        pulumi.set(__self__, "modifier", modifier)
        pulumi.set(__self__, "modifier_id", modifier_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "subscribed_version", subscribed_version)
        pulumi.set(__self__, "type_num", type_num)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="businessCode")
    def business_code(self) -> _builtins.str:
        """
        Specifies the business code of the data class. Fuzzy matching is supported.
        """
        return pulumi.get(self, "business_code")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        The creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> _builtins.str:
        """
        The creator ID.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the data class description. Fuzzy matching is supported.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the data class.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isBuiltIn")
    def is_built_in(self) -> _builtins.bool:
        """
        Specifies whether the data class is built in SecMaster.
        The value can be  **true** or **false**.
        """
        return pulumi.get(self, "is_built_in")

    @_builtins.property
    @pulumi.getter
    def modifier(self) -> _builtins.str:
        """
        The modifier.
        """
        return pulumi.get(self, "modifier")

    @_builtins.property
    @pulumi.getter(name="modifierId")
    def modifier_id(self) -> _builtins.str:
        """
        The modifier ID.
        """
        return pulumi.get(self, "modifier_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the data class. Fuzzy matching is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        """
        The parent data class ID.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="subscribedVersion")
    def subscribed_version(self) -> _builtins.str:
        """
        The subscribed version of the data class.
        """
        return pulumi.get(self, "subscribed_version")

    @_builtins.property
    @pulumi.getter(name="typeNum")
    def type_num(self) -> _builtins.int:
        """
        The quantity of sub-type data classes.
        """
        return pulumi.get(self, "type_num")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        Specifies the workspace ID.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetIncidentsConditionResult(dict):
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.GetIncidentsConditionConditionResult']] = None,
                 logics: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence['GetIncidentsConditionConditionArgs'] conditions: Specifies the condition expression list.
               The conditions structure is documented below.
        :param Sequence[_builtins.str] logics: Specifies the expression logic.
               
               <a name="condition_conditions"></a>
               The `conditions` block supports:
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if logics is not None:
            pulumi.set(__self__, "logics", logics)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.GetIncidentsConditionConditionResult']]:
        """
        Specifies the condition expression list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def logics(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the expression logic.

        <a name="condition_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "logics")


@pulumi.output_type
class GetIncidentsConditionConditionResult(dict):
    def __init__(__self__, *,
                 datas: Optional[Sequence[_builtins.str]] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] datas: Specifies the expression content.
               + About `status` expression, e.g. **["handle_status", "!=", "Closed"]**.
               + About `name` expression, e.g. **["title", "contains", "test"]**.
               + About `level` expression, e.g. **["severity", "in", "Tips,Low"]**.
               + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
               + About `incident_type.incident_type` expression, e.g. **["incident_type.incident_type", "=", "xxx"]**.
               + About `first_occurrence_time` expression, e.g. **["first_observed_time", "<=", "2024-08-23T20:09:26Z+0800"]**.
        :param _builtins.str name: Specifies the expression name.
        """
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the expression content.
        + About `status` expression, e.g. **["handle_status", "!=", "Closed"]**.
        + About `name` expression, e.g. **["title", "contains", "test"]**.
        + About `level` expression, e.g. **["severity", "in", "Tips,Low"]**.
        + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
        + About `incident_type.incident_type` expression, e.g. **["incident_type.incident_type", "=", "xxx"]**.
        + About `first_occurrence_time` expression, e.g. **["first_observed_time", "<=", "2024-08-23T20:09:26Z+0800"]**.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the expression name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIncidentsIncidentResult(dict):
    def __init__(__self__, *,
                 arrive_time: _builtins.str,
                 close_comment: _builtins.str,
                 close_reason: _builtins.str,
                 count: _builtins.int,
                 created_at: _builtins.str,
                 creator: _builtins.str,
                 data_sources: Sequence['outputs.GetIncidentsIncidentDataSourceResult'],
                 debugging_data: _builtins.str,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 first_occurrence_time: _builtins.str,
                 id: _builtins.str,
                 ipdrr_phase: _builtins.str,
                 labels: _builtins.str,
                 last_occurrence_time: _builtins.str,
                 level: _builtins.str,
                 name: _builtins.str,
                 owner: _builtins.str,
                 planned_closure_time: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 stage: _builtins.str,
                 status: _builtins.str,
                 types: Sequence['outputs.GetIncidentsIncidentTypeResult'],
                 updated_at: _builtins.str,
                 verification_status: _builtins.str,
                 version: _builtins.str,
                 workspace_id: _builtins.str):
        """
        :param _builtins.str arrive_time: The data receiving time.
        :param _builtins.str close_comment: The close comment.
        :param _builtins.str close_reason: The close reason.
        :param _builtins.int count: The times of the incident occurrences.
        :param _builtins.str created_at: The creation time.
        :param _builtins.str creator: The name creator name.
        :param Sequence['GetIncidentsIncidentDataSourceArgs'] data_sources: The data source configuration.
               The data_source structure is documented below.
        :param _builtins.str debugging_data: Whether it's a debugging data.
        :param _builtins.str description: The incident description.
        :param _builtins.str domain_id: The ID of the account (domain_id) to whom the data is delivered and hosted.
        :param _builtins.str first_occurrence_time: The first occurrence time of the incident.
        :param _builtins.str id: The incident ID.
        :param _builtins.str ipdrr_phase: The handling phase No.
        :param _builtins.str labels: The labels.
        :param _builtins.str last_occurrence_time: The last occurrence time of the incident.
        :param _builtins.str level: The incident level.
        :param _builtins.str name: Specifies the expression name.
        :param _builtins.str owner: The user name of the owner.
        :param _builtins.str planned_closure_time: The planned closure time of the incident.
        :param _builtins.str project_id: The ID of project where the account to whom the data is delivered and hosted belongs to.
        :param _builtins.str region_id: The ID of the region where the account to whom the data is delivered and hosted belongs to.
        :param _builtins.str stage: The stage of the incident.
        :param _builtins.str status: The incident status.
        :param Sequence['GetIncidentsIncidentTypeArgs'] types: The incident type configuration.
               The type structure is documented below.
        :param _builtins.str updated_at: The update time.
        :param _builtins.str verification_status: The verification status.
        :param _builtins.str version: The version of the data source of an incident.
        :param _builtins.str workspace_id: Specifies the ID of the workspace to which the incident belongs.
        """
        pulumi.set(__self__, "arrive_time", arrive_time)
        pulumi.set(__self__, "close_comment", close_comment)
        pulumi.set(__self__, "close_reason", close_reason)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "data_sources", data_sources)
        pulumi.set(__self__, "debugging_data", debugging_data)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "first_occurrence_time", first_occurrence_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipdrr_phase", ipdrr_phase)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "last_occurrence_time", last_occurrence_time)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "planned_closure_time", planned_closure_time)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "types", types)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "verification_status", verification_status)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="arriveTime")
    def arrive_time(self) -> _builtins.str:
        """
        The data receiving time.
        """
        return pulumi.get(self, "arrive_time")

    @_builtins.property
    @pulumi.getter(name="closeComment")
    def close_comment(self) -> _builtins.str:
        """
        The close comment.
        """
        return pulumi.get(self, "close_comment")

    @_builtins.property
    @pulumi.getter(name="closeReason")
    def close_reason(self) -> _builtins.str:
        """
        The close reason.
        """
        return pulumi.get(self, "close_reason")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        The times of the incident occurrences.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        The name creator name.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter(name="dataSources")
    def data_sources(self) -> Sequence['outputs.GetIncidentsIncidentDataSourceResult']:
        """
        The data source configuration.
        The data_source structure is documented below.
        """
        return pulumi.get(self, "data_sources")

    @_builtins.property
    @pulumi.getter(name="debuggingData")
    def debugging_data(self) -> _builtins.str:
        """
        Whether it's a debugging data.
        """
        return pulumi.get(self, "debugging_data")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The incident description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The ID of the account (domain_id) to whom the data is delivered and hosted.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="firstOccurrenceTime")
    def first_occurrence_time(self) -> _builtins.str:
        """
        The first occurrence time of the incident.
        """
        return pulumi.get(self, "first_occurrence_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The incident ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipdrrPhase")
    def ipdrr_phase(self) -> _builtins.str:
        """
        The handling phase No.
        """
        return pulumi.get(self, "ipdrr_phase")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> _builtins.str:
        """
        The labels.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="lastOccurrenceTime")
    def last_occurrence_time(self) -> _builtins.str:
        """
        The last occurrence time of the incident.
        """
        return pulumi.get(self, "last_occurrence_time")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The incident level.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the expression name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        The user name of the owner.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="plannedClosureTime")
    def planned_closure_time(self) -> _builtins.str:
        """
        The planned closure time of the incident.
        """
        return pulumi.get(self, "planned_closure_time")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The ID of project where the account to whom the data is delivered and hosted belongs to.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The ID of the region where the account to whom the data is delivered and hosted belongs to.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def stage(self) -> _builtins.str:
        """
        The stage of the incident.
        """
        return pulumi.get(self, "stage")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The incident status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def types(self) -> Sequence['outputs.GetIncidentsIncidentTypeResult']:
        """
        The incident type configuration.
        The type structure is documented below.
        """
        return pulumi.get(self, "types")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="verificationStatus")
    def verification_status(self) -> _builtins.str:
        """
        The verification status.
        """
        return pulumi.get(self, "verification_status")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the data source of an incident.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        Specifies the ID of the workspace to which the incident belongs.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetIncidentsIncidentDataSourceResult(dict):
    def __init__(__self__, *,
                 product_feature: _builtins.str,
                 product_name: _builtins.str,
                 source_type: _builtins.int):
        """
        :param _builtins.str product_feature: The product feature.
        :param _builtins.str product_name: The product name.
        :param _builtins.int source_type: The source type.
        """
        pulumi.set(__self__, "product_feature", product_feature)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter(name="productFeature")
    def product_feature(self) -> _builtins.str:
        """
        The product feature.
        """
        return pulumi.get(self, "product_feature")

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> _builtins.str:
        """
        The product name.
        """
        return pulumi.get(self, "product_name")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> _builtins.int:
        """
        The source type.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetIncidentsIncidentTypeResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 incident_type: _builtins.str):
        """
        :param _builtins.str category: The category.
        :param _builtins.str incident_type: The incident type.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "incident_type", incident_type)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        The category.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="incidentType")
    def incident_type(self) -> _builtins.str:
        """
        The incident type.
        """
        return pulumi.get(self, "incident_type")


@pulumi.output_type
class GetIndicatorsConditionResult(dict):
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.GetIndicatorsConditionConditionResult']] = None,
                 logics: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence['GetIndicatorsConditionConditionArgs'] conditions: Specifies the condition expression list.
               The conditions structure is documented below.
        :param Sequence[_builtins.str] logics: Specifies the expression logic.
               For example, **["conditions.name1", "and", "conditions.name2"]**.
               
               <a name="condition_conditions"></a>
               The `conditions` block supports:
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if logics is not None:
            pulumi.set(__self__, "logics", logics)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.GetIndicatorsConditionConditionResult']]:
        """
        Specifies the condition expression list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def logics(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the expression logic.
        For example, **["conditions.name1", "and", "conditions.name2"]**.

        <a name="condition_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "logics")


@pulumi.output_type
class GetIndicatorsConditionConditionResult(dict):
    def __init__(__self__, *,
                 datas: Optional[Sequence[_builtins.str]] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] datas: Specifies the expression content.
               + About `threat_degree` expression, e.g. **["verdict", "=", "Gray"]**.
               + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
               + About `updated_at` expression, e.g. **["update_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
               + About `type.indicator_type` expression, e.g. **["indicator_type.indicator_type", "=", "IPv6"]**.
               + About `first_occurrence_time` expression, e.g. **["first_report_time", ">=", "2024-08-20T14:52:06Z+0800"]**.
               + About `last_occurrence_time` expression, e.g. **["last_report_time", ">=", "2024-08-20T14:52:06Z+0800"]**.
        :param _builtins.str name: Specifies the expression name.
        """
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the expression content.
        + About `threat_degree` expression, e.g. **["verdict", "=", "Gray"]**.
        + About `created_at` expression, e.g. **["create_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
        + About `updated_at` expression, e.g. **["update_time", ">=", "2024-08-15T19:18:38Z+0800"]**.
        + About `type.indicator_type` expression, e.g. **["indicator_type.indicator_type", "=", "IPv6"]**.
        + About `first_occurrence_time` expression, e.g. **["first_report_time", ">=", "2024-08-20T14:52:06Z+0800"]**.
        + About `last_occurrence_time` expression, e.g. **["last_report_time", ">=", "2024-08-20T14:52:06Z+0800"]**.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the expression name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIndicatorsIndicatorResult(dict):
    def __init__(__self__, *,
                 confidence: _builtins.int,
                 created_at: _builtins.str,
                 data_class_id: _builtins.str,
                 data_sources: Sequence['outputs.GetIndicatorsIndicatorDataSourceResult'],
                 environments: Sequence['outputs.GetIndicatorsIndicatorEnvironmentResult'],
                 first_occurrence_time: _builtins.str,
                 granularity: _builtins.int,
                 id: _builtins.str,
                 is_deleted: _builtins.bool,
                 last_occurrence_time: _builtins.str,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 revoked: _builtins.bool,
                 status: _builtins.str,
                 threat_degree: _builtins.str,
                 types: Sequence['outputs.GetIndicatorsIndicatorTypeResult'],
                 updated_at: _builtins.str,
                 value: _builtins.str,
                 workspace_id: _builtins.str):
        """
        :param _builtins.int confidence: The confidence. The value range is `80` to `100`.
        :param _builtins.str created_at: The creation time.
        :param _builtins.str data_class_id: Specifies the data class ID.
        :param Sequence['GetIndicatorsIndicatorDataSourceArgs'] data_sources: The data source configuration.
               The data_source structure is documented below.
        :param Sequence['GetIndicatorsIndicatorEnvironmentArgs'] environments: The coordinates of the environment where the indicator was generated.
               The environment structure is documented below.
        :param _builtins.str first_occurrence_time: The first occurred time of the indicator.
        :param _builtins.int granularity: The confidentiality level.
               + **1**: First discovery.
               + **2**: Self-produced data.
               + **3**: Purchase required.
               + **4**: Direct query from the external network.
        :param _builtins.str id: The indicator type ID.
        :param _builtins.bool is_deleted: Whether the indicator is deleted.
        :param _builtins.str last_occurrence_time: The last occurred time of the indicator.
        :param _builtins.str name: Specifies the expression name.
        :param _builtins.str project_id: The project ID.
        :param _builtins.bool revoked: Whether the indicator is discard.
        :param _builtins.str status: The status.
        :param _builtins.str threat_degree: The threat degree.
        :param Sequence['GetIndicatorsIndicatorTypeArgs'] types: The indicator type.
               The type structure is documented below.
        :param _builtins.str updated_at: The update time.
        :param _builtins.str value: The value. Such as **ip**, **url**, **domain** etc.
        :param _builtins.str workspace_id: Specifies the ID of the workspace to which the indicator belongs.
        """
        pulumi.set(__self__, "confidence", confidence)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "data_class_id", data_class_id)
        pulumi.set(__self__, "data_sources", data_sources)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "first_occurrence_time", first_occurrence_time)
        pulumi.set(__self__, "granularity", granularity)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_deleted", is_deleted)
        pulumi.set(__self__, "last_occurrence_time", last_occurrence_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "revoked", revoked)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "threat_degree", threat_degree)
        pulumi.set(__self__, "types", types)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def confidence(self) -> _builtins.int:
        """
        The confidence. The value range is `80` to `100`.
        """
        return pulumi.get(self, "confidence")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataClassId")
    def data_class_id(self) -> _builtins.str:
        """
        Specifies the data class ID.
        """
        return pulumi.get(self, "data_class_id")

    @_builtins.property
    @pulumi.getter(name="dataSources")
    def data_sources(self) -> Sequence['outputs.GetIndicatorsIndicatorDataSourceResult']:
        """
        The data source configuration.
        The data_source structure is documented below.
        """
        return pulumi.get(self, "data_sources")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetIndicatorsIndicatorEnvironmentResult']:
        """
        The coordinates of the environment where the indicator was generated.
        The environment structure is documented below.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="firstOccurrenceTime")
    def first_occurrence_time(self) -> _builtins.str:
        """
        The first occurred time of the indicator.
        """
        return pulumi.get(self, "first_occurrence_time")

    @_builtins.property
    @pulumi.getter
    def granularity(self) -> _builtins.int:
        """
        The confidentiality level.
        + **1**: First discovery.
        + **2**: Self-produced data.
        + **3**: Purchase required.
        + **4**: Direct query from the external network.
        """
        return pulumi.get(self, "granularity")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The indicator type ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDeleted")
    def is_deleted(self) -> _builtins.bool:
        """
        Whether the indicator is deleted.
        """
        return pulumi.get(self, "is_deleted")

    @_builtins.property
    @pulumi.getter(name="lastOccurrenceTime")
    def last_occurrence_time(self) -> _builtins.str:
        """
        The last occurred time of the indicator.
        """
        return pulumi.get(self, "last_occurrence_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the expression name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def revoked(self) -> _builtins.bool:
        """
        Whether the indicator is discard.
        """
        return pulumi.get(self, "revoked")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="threatDegree")
    def threat_degree(self) -> _builtins.str:
        """
        The threat degree.
        """
        return pulumi.get(self, "threat_degree")

    @_builtins.property
    @pulumi.getter
    def types(self) -> Sequence['outputs.GetIndicatorsIndicatorTypeResult']:
        """
        The indicator type.
        The type structure is documented below.
        """
        return pulumi.get(self, "types")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value. Such as **ip**, **url**, **domain** etc.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        Specifies the ID of the workspace to which the indicator belongs.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetIndicatorsIndicatorDataSourceResult(dict):
    def __init__(__self__, *,
                 domain_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 source_type: _builtins.int):
        """
        :param _builtins.str domain_id: The domain ID.
        :param _builtins.str project_id: The project ID.
        :param _builtins.str region_id: The region ID.
        :param _builtins.int source_type: The data source type.
        """
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> _builtins.int:
        """
        The data source type.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetIndicatorsIndicatorEnvironmentResult(dict):
    def __init__(__self__, *,
                 domain_id: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 vendor_type: _builtins.str):
        """
        :param _builtins.str domain_id: The domain ID.
        :param _builtins.str project_id: The project ID.
        :param _builtins.str region_id: The region ID.
        :param _builtins.str vendor_type: The environment provider. Such as **HWCP**, **HWC**, **AWS** or **Azure**.
        """
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "vendor_type", vendor_type)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="vendorType")
    def vendor_type(self) -> _builtins.str:
        """
        The environment provider. Such as **HWCP**, **HWC**, **AWS** or **Azure**.
        """
        return pulumi.get(self, "vendor_type")


@pulumi.output_type
class GetIndicatorsIndicatorTypeResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 indicator_type: _builtins.str):
        """
        :param _builtins.str id: The indicator type ID.
        :param _builtins.str indicator_type: The indicator type.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "indicator_type", indicator_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The indicator type ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="indicatorType")
    def indicator_type(self) -> _builtins.str:
        """
        The indicator type.
        """
        return pulumi.get(self, "indicator_type")


@pulumi.output_type
class GetInstallationScriptsRecordResult(dict):
    def __init__(__self__, *,
                 commands: _builtins.str,
                 os_type: _builtins.str):
        """
        :param _builtins.str commands: The installation commands for the specified operating system.
        :param _builtins.str os_type: The operating system type.
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "os_type", os_type)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> _builtins.str:
        """
        The installation commands for the specified operating system.
        """
        return pulumi.get(self, "commands")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The operating system type.
        """
        return pulumi.get(self, "os_type")


@pulumi.output_type
class GetLayoutWizardDetailDataResult(dict):
    def __init__(__self__, *,
                 binding_buttons: Sequence['outputs.GetLayoutWizardDetailDataBindingButtonResult'],
                 boa_version: _builtins.str,
                 create_time: _builtins.str,
                 creator_id: _builtins.str,
                 description: _builtins.str,
                 en_description: _builtins.str,
                 en_name: _builtins.str,
                 id: _builtins.str,
                 is_binding: _builtins.bool,
                 is_built_in: _builtins.bool,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 update_time: _builtins.str,
                 version: _builtins.str,
                 wizard_json: _builtins.str,
                 workspace_id: _builtins.str):
        """
        :param Sequence['GetLayoutWizardDetailDataBindingButtonArgs'] binding_buttons: The binding button information.
               The binding_button structure is documented below.
        :param _builtins.str boa_version: The BOA base version.
        :param _builtins.str create_time: The creation time.
        :param _builtins.str creator_id: The creator ID.
        :param _builtins.str description: The layout wizard description.
        :param _builtins.str en_description: The layout wizard English description.
        :param _builtins.str en_name: The layout wizard English name.
        :param _builtins.str id: The layout wizard ID.
        :param _builtins.bool is_binding: Whether bound the button.
        :param _builtins.bool is_built_in: Whether the page is a system page.
        :param _builtins.str name: The layout wizard name.
        :param _builtins.str project_id: The project ID.
        :param _builtins.str update_time: The update time.
        :param _builtins.str version: The SecMaster version.
        :param _builtins.str wizard_json: The layout wizard related information.
        :param _builtins.str workspace_id: Specifies the workspace ID.
        """
        pulumi.set(__self__, "binding_buttons", binding_buttons)
        pulumi.set(__self__, "boa_version", boa_version)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_id", creator_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "en_description", en_description)
        pulumi.set(__self__, "en_name", en_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_binding", is_binding)
        pulumi.set(__self__, "is_built_in", is_built_in)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "wizard_json", wizard_json)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="bindingButtons")
    def binding_buttons(self) -> Sequence['outputs.GetLayoutWizardDetailDataBindingButtonResult']:
        """
        The binding button information.
        The binding_button structure is documented below.
        """
        return pulumi.get(self, "binding_buttons")

    @_builtins.property
    @pulumi.getter(name="boaVersion")
    def boa_version(self) -> _builtins.str:
        """
        The BOA base version.
        """
        return pulumi.get(self, "boa_version")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> _builtins.str:
        """
        The creator ID.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The layout wizard description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enDescription")
    def en_description(self) -> _builtins.str:
        """
        The layout wizard English description.
        """
        return pulumi.get(self, "en_description")

    @_builtins.property
    @pulumi.getter(name="enName")
    def en_name(self) -> _builtins.str:
        """
        The layout wizard English name.
        """
        return pulumi.get(self, "en_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The layout wizard ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isBinding")
    def is_binding(self) -> _builtins.bool:
        """
        Whether bound the button.
        """
        return pulumi.get(self, "is_binding")

    @_builtins.property
    @pulumi.getter(name="isBuiltIn")
    def is_built_in(self) -> _builtins.bool:
        """
        Whether the page is a system page.
        """
        return pulumi.get(self, "is_built_in")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The layout wizard name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The SecMaster version.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="wizardJson")
    def wizard_json(self) -> _builtins.str:
        """
        The layout wizard related information.
        """
        return pulumi.get(self, "wizard_json")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        Specifies the workspace ID.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetLayoutWizardDetailDataBindingButtonResult(dict):
    def __init__(__self__, *,
                 button_id: _builtins.str,
                 button_name: _builtins.str):
        """
        :param _builtins.str button_id: The button ID.
        :param _builtins.str button_name: The button name.
        """
        pulumi.set(__self__, "button_id", button_id)
        pulumi.set(__self__, "button_name", button_name)

    @_builtins.property
    @pulumi.getter(name="buttonId")
    def button_id(self) -> _builtins.str:
        """
        The button ID.
        """
        return pulumi.get(self, "button_id")

    @_builtins.property
    @pulumi.getter(name="buttonName")
    def button_name(self) -> _builtins.str:
        """
        The button name.
        """
        return pulumi.get(self, "button_name")


@pulumi.output_type
class GetLayoutWizardsDataResult(dict):
    def __init__(__self__, *,
                 binding_buttons: Sequence['outputs.GetLayoutWizardsDataBindingButtonResult'],
                 boa_version: _builtins.str,
                 create_time: _builtins.str,
                 creator_id: _builtins.str,
                 description: _builtins.str,
                 en_description: _builtins.str,
                 en_name: _builtins.str,
                 id: _builtins.str,
                 is_binding: _builtins.bool,
                 is_built_in: _builtins.bool,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 update_time: _builtins.str,
                 version: _builtins.str,
                 wizard_json: _builtins.str,
                 workspace_id: _builtins.str):
        """
        :param Sequence['GetLayoutWizardsDataBindingButtonArgs'] binding_buttons: The binding button information.
               The binding_button structure is documented below.
        :param _builtins.str boa_version: The BOA base version.
        :param _builtins.str create_time: The creation time.
        :param _builtins.str creator_id: The creator ID.
        :param _builtins.str description: The layout wizard description.
        :param _builtins.str en_description: The layout wizard English description.
        :param _builtins.str en_name: The layout wizard English name.
        :param _builtins.str id: The layout wizard ID.
        :param _builtins.bool is_binding: Whether bound the button.
        :param _builtins.bool is_built_in: Whether the page is a system page.
        :param _builtins.str name: The layout wizard name.
        :param _builtins.str project_id: The project ID.
        :param _builtins.str update_time: The update time.
        :param _builtins.str version: The Secmaster version.
        :param _builtins.str wizard_json: The layout wizard related information.
        :param _builtins.str workspace_id: Specifies the workspace ID.
        """
        pulumi.set(__self__, "binding_buttons", binding_buttons)
        pulumi.set(__self__, "boa_version", boa_version)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_id", creator_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "en_description", en_description)
        pulumi.set(__self__, "en_name", en_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_binding", is_binding)
        pulumi.set(__self__, "is_built_in", is_built_in)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "wizard_json", wizard_json)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="bindingButtons")
    def binding_buttons(self) -> Sequence['outputs.GetLayoutWizardsDataBindingButtonResult']:
        """
        The binding button information.
        The binding_button structure is documented below.
        """
        return pulumi.get(self, "binding_buttons")

    @_builtins.property
    @pulumi.getter(name="boaVersion")
    def boa_version(self) -> _builtins.str:
        """
        The BOA base version.
        """
        return pulumi.get(self, "boa_version")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> _builtins.str:
        """
        The creator ID.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The layout wizard description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enDescription")
    def en_description(self) -> _builtins.str:
        """
        The layout wizard English description.
        """
        return pulumi.get(self, "en_description")

    @_builtins.property
    @pulumi.getter(name="enName")
    def en_name(self) -> _builtins.str:
        """
        The layout wizard English name.
        """
        return pulumi.get(self, "en_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The layout wizard ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isBinding")
    def is_binding(self) -> _builtins.bool:
        """
        Whether bound the button.
        """
        return pulumi.get(self, "is_binding")

    @_builtins.property
    @pulumi.getter(name="isBuiltIn")
    def is_built_in(self) -> _builtins.bool:
        """
        Whether the page is a system page.
        """
        return pulumi.get(self, "is_built_in")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The layout wizard name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The Secmaster version.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="wizardJson")
    def wizard_json(self) -> _builtins.str:
        """
        The layout wizard related information.
        """
        return pulumi.get(self, "wizard_json")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        Specifies the workspace ID.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetLayoutWizardsDataBindingButtonResult(dict):
    def __init__(__self__, *,
                 button_id: _builtins.str,
                 button_name: _builtins.str):
        """
        :param _builtins.str button_id: The button ID.
        :param _builtins.str button_name: The button name.
        """
        pulumi.set(__self__, "button_id", button_id)
        pulumi.set(__self__, "button_name", button_name)

    @_builtins.property
    @pulumi.getter(name="buttonId")
    def button_id(self) -> _builtins.str:
        """
        The button ID.
        """
        return pulumi.get(self, "button_id")

    @_builtins.property
    @pulumi.getter(name="buttonName")
    def button_name(self) -> _builtins.str:
        """
        The button name.
        """
        return pulumi.get(self, "button_name")


@pulumi.output_type
class GetMetricResultsMetricResultResult(dict):
    def __init__(__self__, *,
                 data_rows: Sequence['outputs.GetMetricResultsMetricResultDataRowResult'],
                 id: _builtins.str,
                 labels: Sequence[_builtins.str]):
        """
        :param Sequence['GetMetricResultsMetricResultDataRowArgs'] data_rows: All statistical data of the metric.
               The data_rows structure is documented below.
        :param _builtins.str id: The metric ID.
        :param Sequence[_builtins.str] labels: The statistical labels of the metric.
               The value in the label corresponds to the value in a piece of `data_row` one-to-one.
        """
        pulumi.set(__self__, "data_rows", data_rows)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)

    @_builtins.property
    @pulumi.getter(name="dataRows")
    def data_rows(self) -> Sequence['outputs.GetMetricResultsMetricResultDataRowResult']:
        """
        All statistical data of the metric.
        The data_rows structure is documented below.
        """
        return pulumi.get(self, "data_rows")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The metric ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Sequence[_builtins.str]:
        """
        The statistical labels of the metric.
        The value in the label corresponds to the value in a piece of `data_row` one-to-one.
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class GetMetricResultsMetricResultDataRowResult(dict):
    def __init__(__self__, *,
                 data_rows: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] data_rows: A piece of data in the metric results.
        """
        pulumi.set(__self__, "data_rows", data_rows)

    @_builtins.property
    @pulumi.getter(name="dataRows")
    def data_rows(self) -> Sequence[_builtins.str]:
        """
        A piece of data in the metric results.
        """
        return pulumi.get(self, "data_rows")


@pulumi.output_type
class GetPlaybookActionInstancesActionInstanceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetPlaybookActionInstancesActionInstanceActionResult'],
                 instance_logs: Sequence['outputs.GetPlaybookActionInstancesActionInstanceInstanceLogResult']):
        """
        :param Sequence['GetPlaybookActionInstancesActionInstanceActionArgs'] actions: The action information of the playbook action instance.
        :param Sequence['GetPlaybookActionInstancesActionInstanceInstanceLogArgs'] instance_logs: The log information of the playbook action instance.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "instance_logs", instance_logs)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetPlaybookActionInstancesActionInstanceActionResult']:
        """
        The action information of the playbook action instance.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="instanceLogs")
    def instance_logs(self) -> Sequence['outputs.GetPlaybookActionInstancesActionInstanceInstanceLogResult']:
        """
        The log information of the playbook action instance.
        """
        return pulumi.get(self, "instance_logs")


@pulumi.output_type
class GetPlaybookActionInstancesActionInstanceActionResult(dict):
    def __init__(__self__, *,
                 action_id: _builtins.str,
                 action_type: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 playbook_id: _builtins.str,
                 playbook_version_id: _builtins.str):
        """
        :param _builtins.str action_id: The workflow ID that the log printed.
        :param _builtins.str action_type: The workflow type of the action.
        :param _builtins.str description: The description of the action.
        :param _builtins.str id: The action ID.
        :param _builtins.str name: The workflow name of the action.
        :param _builtins.str playbook_id: The playbook ID associated with the action.
        :param _builtins.str playbook_version_id: The playbook version ID associated with the action.
        """
        pulumi.set(__self__, "action_id", action_id)
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "playbook_id", playbook_id)
        pulumi.set(__self__, "playbook_version_id", playbook_version_id)

    @_builtins.property
    @pulumi.getter(name="actionId")
    def action_id(self) -> _builtins.str:
        """
        The workflow ID that the log printed.
        """
        return pulumi.get(self, "action_id")

    @_builtins.property
    @pulumi.getter(name="actionType")
    def action_type(self) -> _builtins.str:
        """
        The workflow type of the action.
        """
        return pulumi.get(self, "action_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the action.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The action ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The workflow name of the action.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="playbookId")
    def playbook_id(self) -> _builtins.str:
        """
        The playbook ID associated with the action.
        """
        return pulumi.get(self, "playbook_id")

    @_builtins.property
    @pulumi.getter(name="playbookVersionId")
    def playbook_version_id(self) -> _builtins.str:
        """
        The playbook version ID associated with the action.
        """
        return pulumi.get(self, "playbook_version_id")


@pulumi.output_type
class GetPlaybookActionInstancesActionInstanceInstanceLogResult(dict):
    def __init__(__self__, *,
                 action_id: _builtins.str,
                 action_name: _builtins.str,
                 end_time: _builtins.str,
                 error_msg: _builtins.str,
                 input: _builtins.str,
                 instance_id: _builtins.str,
                 instance_type: _builtins.str,
                 log_level: _builtins.str,
                 output: _builtins.str,
                 parent_instance_id: _builtins.str,
                 start_time: _builtins.str,
                 status: _builtins.str,
                 trigger_type: _builtins.str):
        """
        :param _builtins.str action_id: The workflow ID that the log printed.
        :param _builtins.str action_name: The workflow name that the log printed.
        :param _builtins.str end_time: The end time that the log printed.
        :param _builtins.str error_msg: The error message that the log printed.
        :param _builtins.str input: The input information that the log printed.
        :param _builtins.str instance_id: The instance ID that the log printed.
        :param _builtins.str instance_type: The instance type that the log printed.
               The value can be **AOP_WORKFLOW**, **SCRIPT** or **PLAYBOOK**.
        :param _builtins.str log_level: The log level.
        :param _builtins.str output: The output information that the log printed.
        :param _builtins.str parent_instance_id: The parent instance ID that the log printed.
        :param _builtins.str start_time: The start time that the log printed.
        :param _builtins.str status: The instance status that the log printed.
        :param _builtins.str trigger_type: The triggering type that the log printed.
        """
        pulumi.set(__self__, "action_id", action_id)
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "error_msg", error_msg)
        pulumi.set(__self__, "input", input)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "log_level", log_level)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "parent_instance_id", parent_instance_id)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="actionId")
    def action_id(self) -> _builtins.str:
        """
        The workflow ID that the log printed.
        """
        return pulumi.get(self, "action_id")

    @_builtins.property
    @pulumi.getter(name="actionName")
    def action_name(self) -> _builtins.str:
        """
        The workflow name that the log printed.
        """
        return pulumi.get(self, "action_name")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        The end time that the log printed.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="errorMsg")
    def error_msg(self) -> _builtins.str:
        """
        The error message that the log printed.
        """
        return pulumi.get(self, "error_msg")

    @_builtins.property
    @pulumi.getter
    def input(self) -> _builtins.str:
        """
        The input information that the log printed.
        """
        return pulumi.get(self, "input")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The instance ID that the log printed.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        """
        The instance type that the log printed.
        The value can be **AOP_WORKFLOW**, **SCRIPT** or **PLAYBOOK**.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> _builtins.str:
        """
        The log level.
        """
        return pulumi.get(self, "log_level")

    @_builtins.property
    @pulumi.getter
    def output(self) -> _builtins.str:
        """
        The output information that the log printed.
        """
        return pulumi.get(self, "output")

    @_builtins.property
    @pulumi.getter(name="parentInstanceId")
    def parent_instance_id(self) -> _builtins.str:
        """
        The parent instance ID that the log printed.
        """
        return pulumi.get(self, "parent_instance_id")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        The start time that the log printed.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The instance status that the log printed.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        The triggering type that the log printed.
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetPlaybookActionsDataResult(dict):
    def __init__(__self__, *,
                 action_id: _builtins.str,
                 action_type: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 playbook_id: _builtins.str,
                 playbook_version_id: _builtins.str,
                 project_id: _builtins.str):
        """
        :param _builtins.str action_id: The workflow ID.
        :param _builtins.str action_type: The workflow action type.
        :param _builtins.str description: The workflow action description.
        :param _builtins.str id: The playbook workflow action ID.
        :param _builtins.str name: The workflow name.
        :param _builtins.str playbook_id: The playbook ID.
        :param _builtins.str playbook_version_id: The playbook version ID.
        :param _builtins.str project_id: The project ID.
        """
        pulumi.set(__self__, "action_id", action_id)
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "playbook_id", playbook_id)
        pulumi.set(__self__, "playbook_version_id", playbook_version_id)
        pulumi.set(__self__, "project_id", project_id)

    @_builtins.property
    @pulumi.getter(name="actionId")
    def action_id(self) -> _builtins.str:
        """
        The workflow ID.
        """
        return pulumi.get(self, "action_id")

    @_builtins.property
    @pulumi.getter(name="actionType")
    def action_type(self) -> _builtins.str:
        """
        The workflow action type.
        """
        return pulumi.get(self, "action_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The workflow action description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The playbook workflow action ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The workflow name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="playbookId")
    def playbook_id(self) -> _builtins.str:
        """
        The playbook ID.
        """
        return pulumi.get(self, "playbook_id")

    @_builtins.property
    @pulumi.getter(name="playbookVersionId")
    def playbook_version_id(self) -> _builtins.str:
        """
        The playbook version ID.
        """
        return pulumi.get(self, "playbook_version_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetPlaybookApprovalsDataResult(dict):
    def __init__(__self__, *,
                 content: _builtins.str,
                 create_time: _builtins.str,
                 id: _builtins.str,
                 resource_id: _builtins.str,
                 result: _builtins.str,
                 type: _builtins.str,
                 update_time: _builtins.str,
                 user_id: _builtins.str):
        """
        :param _builtins.str content: The review content.
        :param _builtins.str create_time: The creation time of the playbook review.
        :param _builtins.str id: The approval ID.
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str result: The review result.
               The valid values are as follows:
               + **PASS**: Indicates review pass.
               + **UN_PASS**: Indicates review not pass.
        :param _builtins.str type: The resource type.
        :param _builtins.str update_time: The update time of the playbook review.
        :param _builtins.str user_id: The reviewer ID.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "result", result)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        The review content.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time of the playbook review.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The approval ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def result(self) -> _builtins.str:
        """
        The review result.
        The valid values are as follows:
        + **PASS**: Indicates review pass.
        + **UN_PASS**: Indicates review not pass.
        """
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        The update time of the playbook review.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        The reviewer ID.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetPlaybookAuditLogsAuditLogResult(dict):
    def __init__(__self__, *,
                 action_id: _builtins.str,
                 action_name: _builtins.str,
                 end_time: _builtins.str,
                 error_msg: _builtins.str,
                 input: _builtins.str,
                 instance_id: _builtins.str,
                 instance_type: _builtins.str,
                 log_level: _builtins.str,
                 output: _builtins.str,
                 parent_instance_id: _builtins.str,
                 start_time: _builtins.str,
                 status: _builtins.str,
                 trigger_type: _builtins.str):
        """
        :param _builtins.str action_id: Specifies the workflow ID.
        :param _builtins.str action_name: Specifies the workflow name.
        :param _builtins.str end_time: Specifies the end time.
               For example, **2024-09-26T15:04:05.000Z+0800**.
        :param _builtins.str error_msg: Specifies the error message.
        :param _builtins.str input: Specifies the input information.
        :param _builtins.str instance_id: Specifies the instance ID.
        :param _builtins.str instance_type: Specifies the instance type. The value can be **AOP_WORKFLOW**, **SCRIPT**, or **PLAYBOOK**.
        :param _builtins.str log_level: Specifies the log level. The value can be **DEBUG**, **INFO**, **WARN** or **ERROR**.
        :param _builtins.str output: Specifies the output information.
        :param _builtins.str parent_instance_id: Specifies the instance ID of the parent node.
        :param _builtins.str start_time: Specifies the start time.
               For example, **2024-09-26T15:04:05.000Z+0800**.
        :param _builtins.str status: Specifies the status.
               The value can be **RUNNING**, **FINISHED**, **FAILED**, **RETRYING**, or **TERMINATED**.
        :param _builtins.str trigger_type: Specifies the triggering type. The valid values are as follows:
               + **TIMER**: indicates scheduled triggering.
               + **EVENT**: indicates event triggering.
        """
        pulumi.set(__self__, "action_id", action_id)
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "error_msg", error_msg)
        pulumi.set(__self__, "input", input)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "log_level", log_level)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "parent_instance_id", parent_instance_id)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="actionId")
    def action_id(self) -> _builtins.str:
        """
        Specifies the workflow ID.
        """
        return pulumi.get(self, "action_id")

    @_builtins.property
    @pulumi.getter(name="actionName")
    def action_name(self) -> _builtins.str:
        """
        Specifies the workflow name.
        """
        return pulumi.get(self, "action_name")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Specifies the end time.
        For example, **2024-09-26T15:04:05.000Z+0800**.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="errorMsg")
    def error_msg(self) -> _builtins.str:
        """
        Specifies the error message.
        """
        return pulumi.get(self, "error_msg")

    @_builtins.property
    @pulumi.getter
    def input(self) -> _builtins.str:
        """
        Specifies the input information.
        """
        return pulumi.get(self, "input")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        """
        Specifies the instance type. The value can be **AOP_WORKFLOW**, **SCRIPT**, or **PLAYBOOK**.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> _builtins.str:
        """
        Specifies the log level. The value can be **DEBUG**, **INFO**, **WARN** or **ERROR**.
        """
        return pulumi.get(self, "log_level")

    @_builtins.property
    @pulumi.getter
    def output(self) -> _builtins.str:
        """
        Specifies the output information.
        """
        return pulumi.get(self, "output")

    @_builtins.property
    @pulumi.getter(name="parentInstanceId")
    def parent_instance_id(self) -> _builtins.str:
        """
        Specifies the instance ID of the parent node.
        """
        return pulumi.get(self, "parent_instance_id")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the start time.
        For example, **2024-09-26T15:04:05.000Z+0800**.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status.
        The value can be **RUNNING**, **FINISHED**, **FAILED**, **RETRYING**, or **TERMINATED**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Specifies the triggering type. The valid values are as follows:
        + **TIMER**: indicates scheduled triggering.
        + **EVENT**: indicates event triggering.
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetPlaybookInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 data_classes: Sequence['outputs.GetPlaybookInstancesInstanceDataClassResult'],
                 data_objects: Sequence['outputs.GetPlaybookInstancesInstanceDataObjectResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 playbooks: Sequence['outputs.GetPlaybookInstancesInstancePlaybookResult'],
                 project_id: _builtins.str,
                 status: _builtins.str,
                 trigger_type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the data object.
        :param Sequence['GetPlaybookInstancesInstanceDataClassArgs'] data_classes: The data class of the instance.
        :param Sequence['GetPlaybookInstancesInstanceDataObjectArgs'] data_objects: The data object of the instance.
        :param _builtins.str id: The data class ID of the instance.
        :param _builtins.str name: The data class name of the instance.
        :param Sequence['GetPlaybookInstancesInstancePlaybookArgs'] playbooks: The playbook information of the instance.
        :param _builtins.str project_id: The project ID of the data object.
        :param _builtins.str status: Specifies the playbook instance status.
               The value can be **RUNNING**, **FINISHED**, **FAILED**, **TERMINATING** or **TERMINATED**.
        :param _builtins.str trigger_type: Specifies the triggering type.
               + **TIMER**: indicates scheduled triggering,
               + **EVENT**: indicates event triggering.
        :param _builtins.str updated_at: The update time of the data object.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "data_classes", data_classes)
        pulumi.set(__self__, "data_objects", data_objects)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "playbooks", playbooks)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trigger_type", trigger_type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the data object.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataClasses")
    def data_classes(self) -> Sequence['outputs.GetPlaybookInstancesInstanceDataClassResult']:
        """
        The data class of the instance.
        """
        return pulumi.get(self, "data_classes")

    @_builtins.property
    @pulumi.getter(name="dataObjects")
    def data_objects(self) -> Sequence['outputs.GetPlaybookInstancesInstanceDataObjectResult']:
        """
        The data object of the instance.
        """
        return pulumi.get(self, "data_objects")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The data class ID of the instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The data class name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def playbooks(self) -> Sequence['outputs.GetPlaybookInstancesInstancePlaybookResult']:
        """
        The playbook information of the instance.
        """
        return pulumi.get(self, "playbooks")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID of the data object.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the playbook instance status.
        The value can be **RUNNING**, **FINISHED**, **FAILED**, **TERMINATING** or **TERMINATED**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Specifies the triggering type.
        + **TIMER**: indicates scheduled triggering,
        + **EVENT**: indicates event triggering.
        """
        return pulumi.get(self, "trigger_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the data object.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetPlaybookInstancesInstanceDataClassResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: The data class ID of the instance.
        :param _builtins.str name: The data class name of the instance.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The data class ID of the instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The data class name of the instance.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPlaybookInstancesInstanceDataObjectResult(dict):
    def __init__(__self__, *,
                 content: _builtins.str,
                 created_at: _builtins.str,
                 data_class_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str content: The data content of the data object.
        :param _builtins.str created_at: The creation time of the data object.
        :param _builtins.str data_class_id: The data class ID of the data object.
        :param _builtins.str id: The data class ID of the instance.
        :param _builtins.str name: The data class name of the instance.
        :param _builtins.str project_id: The project ID of the data object.
        :param _builtins.str updated_at: The update time of the data object.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "data_class_id", data_class_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        The data content of the data object.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the data object.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataClassId")
    def data_class_id(self) -> _builtins.str:
        """
        The data class ID of the data object.
        """
        return pulumi.get(self, "data_class_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The data class ID of the instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The data class name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID of the data object.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the data object.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetPlaybookInstancesInstancePlaybookResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 version: _builtins.str,
                 version_id: _builtins.str):
        """
        :param _builtins.str id: The data class ID of the instance.
        :param _builtins.str name: The data class name of the instance.
        :param _builtins.str version: The playbook version.
        :param _builtins.str version_id: The playbook version ID.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_id", version_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The data class ID of the instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The data class name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The playbook version.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> _builtins.str:
        """
        The playbook version ID.
        """
        return pulumi.get(self, "version_id")


@pulumi.output_type
class GetPlaybookMonitorsDataResult(dict):
    def __init__(__self__, *,
                 average_run_time: _builtins.float,
                 event_instance_run_num: _builtins.int,
                 fail_instance_num: _builtins.int,
                 max_run_time_instances: Sequence['outputs.GetPlaybookMonitorsDataMaxRunTimeInstanceResult'],
                 min_run_time_instances: Sequence['outputs.GetPlaybookMonitorsDataMinRunTimeInstanceResult'],
                 running_instance_num: _builtins.int,
                 schedule_instance_run_num: _builtins.int,
                 success_instance_num: _builtins.int,
                 terminate_instance_num: _builtins.int,
                 total_instance_num: _builtins.int,
                 total_instance_run_num: _builtins.int):
        """
        :param _builtins.float average_run_time: The average duration.
        :param _builtins.int event_instance_run_num: The time-triggered executions.
        :param _builtins.int fail_instance_num: The number of failed instances.
        :param Sequence['GetPlaybookMonitorsDataMaxRunTimeInstanceArgs'] max_run_time_instances: The workflow with the longest running duration.
        :param Sequence['GetPlaybookMonitorsDataMinRunTimeInstanceArgs'] min_run_time_instances: The workflow with the shortest running duration.
        :param _builtins.int running_instance_num: The number of running instances.
        :param _builtins.int schedule_instance_run_num: The number of scheduled trigger executions.
        :param _builtins.int success_instance_num: The number of successful instances.
        :param _builtins.int terminate_instance_num: The number of terminated instances.
        :param _builtins.int total_instance_num: The total number of playbook instances.
        :param _builtins.int total_instance_run_num: The total running times.
        """
        pulumi.set(__self__, "average_run_time", average_run_time)
        pulumi.set(__self__, "event_instance_run_num", event_instance_run_num)
        pulumi.set(__self__, "fail_instance_num", fail_instance_num)
        pulumi.set(__self__, "max_run_time_instances", max_run_time_instances)
        pulumi.set(__self__, "min_run_time_instances", min_run_time_instances)
        pulumi.set(__self__, "running_instance_num", running_instance_num)
        pulumi.set(__self__, "schedule_instance_run_num", schedule_instance_run_num)
        pulumi.set(__self__, "success_instance_num", success_instance_num)
        pulumi.set(__self__, "terminate_instance_num", terminate_instance_num)
        pulumi.set(__self__, "total_instance_num", total_instance_num)
        pulumi.set(__self__, "total_instance_run_num", total_instance_run_num)

    @_builtins.property
    @pulumi.getter(name="averageRunTime")
    def average_run_time(self) -> _builtins.float:
        """
        The average duration.
        """
        return pulumi.get(self, "average_run_time")

    @_builtins.property
    @pulumi.getter(name="eventInstanceRunNum")
    def event_instance_run_num(self) -> _builtins.int:
        """
        The time-triggered executions.
        """
        return pulumi.get(self, "event_instance_run_num")

    @_builtins.property
    @pulumi.getter(name="failInstanceNum")
    def fail_instance_num(self) -> _builtins.int:
        """
        The number of failed instances.
        """
        return pulumi.get(self, "fail_instance_num")

    @_builtins.property
    @pulumi.getter(name="maxRunTimeInstances")
    def max_run_time_instances(self) -> Sequence['outputs.GetPlaybookMonitorsDataMaxRunTimeInstanceResult']:
        """
        The workflow with the longest running duration.
        """
        return pulumi.get(self, "max_run_time_instances")

    @_builtins.property
    @pulumi.getter(name="minRunTimeInstances")
    def min_run_time_instances(self) -> Sequence['outputs.GetPlaybookMonitorsDataMinRunTimeInstanceResult']:
        """
        The workflow with the shortest running duration.
        """
        return pulumi.get(self, "min_run_time_instances")

    @_builtins.property
    @pulumi.getter(name="runningInstanceNum")
    def running_instance_num(self) -> _builtins.int:
        """
        The number of running instances.
        """
        return pulumi.get(self, "running_instance_num")

    @_builtins.property
    @pulumi.getter(name="scheduleInstanceRunNum")
    def schedule_instance_run_num(self) -> _builtins.int:
        """
        The number of scheduled trigger executions.
        """
        return pulumi.get(self, "schedule_instance_run_num")

    @_builtins.property
    @pulumi.getter(name="successInstanceNum")
    def success_instance_num(self) -> _builtins.int:
        """
        The number of successful instances.
        """
        return pulumi.get(self, "success_instance_num")

    @_builtins.property
    @pulumi.getter(name="terminateInstanceNum")
    def terminate_instance_num(self) -> _builtins.int:
        """
        The number of terminated instances.
        """
        return pulumi.get(self, "terminate_instance_num")

    @_builtins.property
    @pulumi.getter(name="totalInstanceNum")
    def total_instance_num(self) -> _builtins.int:
        """
        The total number of playbook instances.
        """
        return pulumi.get(self, "total_instance_num")

    @_builtins.property
    @pulumi.getter(name="totalInstanceRunNum")
    def total_instance_run_num(self) -> _builtins.int:
        """
        The total running times.
        """
        return pulumi.get(self, "total_instance_run_num")


@pulumi.output_type
class GetPlaybookMonitorsDataMaxRunTimeInstanceResult(dict):
    def __init__(__self__, *,
                 playbook_instance_id: _builtins.str,
                 playbook_instance_name: _builtins.str,
                 playbook_instance_run_time: _builtins.float):
        """
        :param _builtins.str playbook_instance_id: The playbook instance ID.
        :param _builtins.str playbook_instance_name: The playbook instance name.
        :param _builtins.float playbook_instance_run_time: The playbook instance running time.
        """
        pulumi.set(__self__, "playbook_instance_id", playbook_instance_id)
        pulumi.set(__self__, "playbook_instance_name", playbook_instance_name)
        pulumi.set(__self__, "playbook_instance_run_time", playbook_instance_run_time)

    @_builtins.property
    @pulumi.getter(name="playbookInstanceId")
    def playbook_instance_id(self) -> _builtins.str:
        """
        The playbook instance ID.
        """
        return pulumi.get(self, "playbook_instance_id")

    @_builtins.property
    @pulumi.getter(name="playbookInstanceName")
    def playbook_instance_name(self) -> _builtins.str:
        """
        The playbook instance name.
        """
        return pulumi.get(self, "playbook_instance_name")

    @_builtins.property
    @pulumi.getter(name="playbookInstanceRunTime")
    def playbook_instance_run_time(self) -> _builtins.float:
        """
        The playbook instance running time.
        """
        return pulumi.get(self, "playbook_instance_run_time")


@pulumi.output_type
class GetPlaybookMonitorsDataMinRunTimeInstanceResult(dict):
    def __init__(__self__, *,
                 playbook_instance_id: _builtins.str,
                 playbook_instance_name: _builtins.str,
                 playbook_instance_run_time: _builtins.float):
        """
        :param _builtins.str playbook_instance_id: The playbook instance ID.
        :param _builtins.str playbook_instance_name: The playbook instance name.
        :param _builtins.float playbook_instance_run_time: The playbook instance running time.
        """
        pulumi.set(__self__, "playbook_instance_id", playbook_instance_id)
        pulumi.set(__self__, "playbook_instance_name", playbook_instance_name)
        pulumi.set(__self__, "playbook_instance_run_time", playbook_instance_run_time)

    @_builtins.property
    @pulumi.getter(name="playbookInstanceId")
    def playbook_instance_id(self) -> _builtins.str:
        """
        The playbook instance ID.
        """
        return pulumi.get(self, "playbook_instance_id")

    @_builtins.property
    @pulumi.getter(name="playbookInstanceName")
    def playbook_instance_name(self) -> _builtins.str:
        """
        The playbook instance name.
        """
        return pulumi.get(self, "playbook_instance_name")

    @_builtins.property
    @pulumi.getter(name="playbookInstanceRunTime")
    def playbook_instance_run_time(self) -> _builtins.float:
        """
        The playbook instance running time.
        """
        return pulumi.get(self, "playbook_instance_run_time")


@pulumi.output_type
class GetPlaybookStatisticsDataResult(dict):
    def __init__(__self__, *,
                 disabled_num: _builtins.int,
                 enabled_num: _builtins.int,
                 unapproved_num: _builtins.int):
        """
        :param _builtins.int disabled_num: The number of playbooks that are not enabled.
        :param _builtins.int enabled_num: The number of enabled playbooks.
        :param _builtins.int unapproved_num: The number of unapproved playbooks.
        """
        pulumi.set(__self__, "disabled_num", disabled_num)
        pulumi.set(__self__, "enabled_num", enabled_num)
        pulumi.set(__self__, "unapproved_num", unapproved_num)

    @_builtins.property
    @pulumi.getter(name="disabledNum")
    def disabled_num(self) -> _builtins.int:
        """
        The number of playbooks that are not enabled.
        """
        return pulumi.get(self, "disabled_num")

    @_builtins.property
    @pulumi.getter(name="enabledNum")
    def enabled_num(self) -> _builtins.int:
        """
        The number of enabled playbooks.
        """
        return pulumi.get(self, "enabled_num")

    @_builtins.property
    @pulumi.getter(name="unapprovedNum")
    def unapproved_num(self) -> _builtins.int:
        """
        The number of unapproved playbooks.
        """
        return pulumi.get(self, "unapproved_num")


@pulumi.output_type
class GetPlaybookVersionsPlaybookVersionResult(dict):
    def __init__(__self__, *,
                 action_strategy: _builtins.str,
                 approve_name: _builtins.str,
                 created_at: _builtins.str,
                 creator_id: _builtins.str,
                 data_class_id: _builtins.str,
                 data_class_name: _builtins.str,
                 data_object_delete: _builtins.bool,
                 data_object_update: _builtins.bool,
                 dataobject_create: _builtins.bool,
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 modifier_id: _builtins.str,
                 playbook_id: _builtins.str,
                 project_id: _builtins.str,
                 rule_enabled: _builtins.bool,
                 rule_id: _builtins.str,
                 status: _builtins.str,
                 trigger_type: _builtins.str,
                 type: _builtins.int,
                 updated_at: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str action_strategy: The execution policy.
        :param _builtins.str approve_name: The reviewer.
        :param _builtins.str created_at: The creation time.
        :param _builtins.str creator_id: The creator ID.
        :param _builtins.str data_class_id: The data class ID.
        :param _builtins.str data_class_name: The data class name.
        :param _builtins.bool data_object_delete: Whether to trigger a playbook when a data object is deleted.
        :param _builtins.bool data_object_update: Whether to trigger a playbook when a data object is updated.
        :param _builtins.bool dataobject_create: Whether to trigger a playbook when a data object is created.
        :param _builtins.str description: The description.
        :param _builtins.bool enabled: Specifies whether this version is activated.
               The options are as follows:
               + **0**: indicates false;
               + **1**: indicates true.
        :param _builtins.str id: The playbook version ID.
        :param _builtins.str modifier_id: The ID of the user who updated the information.
        :param _builtins.str playbook_id: Specifies the playbook ID.
        :param _builtins.str project_id: The project ID.
        :param _builtins.bool rule_enabled: Whether the filtering rule is enabled.
        :param _builtins.str rule_id: The rule ID.
        :param _builtins.str status: Specifies the playbook version status.
               The value can be **EDITING**, **APPROVING**, **UNPASSED** or **PUBLISHED**.
        :param _builtins.str trigger_type: The triggering type.
        :param _builtins.int type: Specifies the version type.
               The options are as follows:
               + **0**: indicates draft version;
               + **1**: indicates official version.
        :param _builtins.str updated_at: The update time.
        :param _builtins.str version: The playbook version.
        """
        pulumi.set(__self__, "action_strategy", action_strategy)
        pulumi.set(__self__, "approve_name", approve_name)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "creator_id", creator_id)
        pulumi.set(__self__, "data_class_id", data_class_id)
        pulumi.set(__self__, "data_class_name", data_class_name)
        pulumi.set(__self__, "data_object_delete", data_object_delete)
        pulumi.set(__self__, "data_object_update", data_object_update)
        pulumi.set(__self__, "dataobject_create", dataobject_create)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modifier_id", modifier_id)
        pulumi.set(__self__, "playbook_id", playbook_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "rule_enabled", rule_enabled)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trigger_type", trigger_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="actionStrategy")
    def action_strategy(self) -> _builtins.str:
        """
        The execution policy.
        """
        return pulumi.get(self, "action_strategy")

    @_builtins.property
    @pulumi.getter(name="approveName")
    def approve_name(self) -> _builtins.str:
        """
        The reviewer.
        """
        return pulumi.get(self, "approve_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> _builtins.str:
        """
        The creator ID.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter(name="dataClassId")
    def data_class_id(self) -> _builtins.str:
        """
        The data class ID.
        """
        return pulumi.get(self, "data_class_id")

    @_builtins.property
    @pulumi.getter(name="dataClassName")
    def data_class_name(self) -> _builtins.str:
        """
        The data class name.
        """
        return pulumi.get(self, "data_class_name")

    @_builtins.property
    @pulumi.getter(name="dataObjectDelete")
    def data_object_delete(self) -> _builtins.bool:
        """
        Whether to trigger a playbook when a data object is deleted.
        """
        return pulumi.get(self, "data_object_delete")

    @_builtins.property
    @pulumi.getter(name="dataObjectUpdate")
    def data_object_update(self) -> _builtins.bool:
        """
        Whether to trigger a playbook when a data object is updated.
        """
        return pulumi.get(self, "data_object_update")

    @_builtins.property
    @pulumi.getter(name="dataobjectCreate")
    def dataobject_create(self) -> _builtins.bool:
        """
        Whether to trigger a playbook when a data object is created.
        """
        return pulumi.get(self, "dataobject_create")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Specifies whether this version is activated.
        The options are as follows:
        + **0**: indicates false;
        + **1**: indicates true.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The playbook version ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="modifierId")
    def modifier_id(self) -> _builtins.str:
        """
        The ID of the user who updated the information.
        """
        return pulumi.get(self, "modifier_id")

    @_builtins.property
    @pulumi.getter(name="playbookId")
    def playbook_id(self) -> _builtins.str:
        """
        Specifies the playbook ID.
        """
        return pulumi.get(self, "playbook_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="ruleEnabled")
    def rule_enabled(self) -> _builtins.bool:
        """
        Whether the filtering rule is enabled.
        """
        return pulumi.get(self, "rule_enabled")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> _builtins.str:
        """
        The rule ID.
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the playbook version status.
        The value can be **EDITING**, **APPROVING**, **UNPASSED** or **PUBLISHED**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        The triggering type.
        """
        return pulumi.get(self, "trigger_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.int:
        """
        Specifies the version type.
        The options are as follows:
        + **0**: indicates draft version;
        + **1**: indicates official version.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The playbook version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPlaybooksPlaybookResult(dict):
    def __init__(__self__, *,
                 approve_role: _builtins.str,
                 created_at: _builtins.str,
                 data_class_id: _builtins.str,
                 data_class_name: _builtins.str,
                 description: _builtins.str,
                 edit_role: _builtins.str,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str,
                 owner_id: _builtins.str,
                 project_id: _builtins.str,
                 reject_version_id: _builtins.str,
                 unaudited_version_id: _builtins.str,
                 updated_at: _builtins.str,
                 user_role: _builtins.str,
                 version: _builtins.str,
                 version_id: _builtins.str,
                 workspace_id: _builtins.str):
        """
        :param _builtins.str approve_role: The approval role of the playbook.
        :param _builtins.str created_at: The playbook creation time.
        :param _builtins.str data_class_id: The data class ID.
        :param _builtins.str data_class_name: Specifies the data class name.
        :param _builtins.str description: Specifies the playbook description.
        :param _builtins.str edit_role: The edit role of the playbook.
        :param _builtins.bool enabled: Specifies whether the playbook is enabled. The value can be **true** or **false**.
        :param _builtins.str id: The playbook ID.
        :param _builtins.str name: Specifies the playbook name.
        :param _builtins.str owner_id: The owner ID.
        :param _builtins.str project_id: The project ID.
        :param _builtins.str reject_version_id: The ID of the rejected playbook version.
        :param _builtins.str unaudited_version_id: The ID of the playbook version to be reviewed.
        :param _builtins.str updated_at: The playbook update time.
        :param _builtins.str user_role: The user role of the playbook.
        :param _builtins.str version: The version.
        :param _builtins.str version_id: The playbook version ID.
        :param _builtins.str workspace_id: Specifies the workspace ID.
        """
        pulumi.set(__self__, "approve_role", approve_role)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "data_class_id", data_class_id)
        pulumi.set(__self__, "data_class_name", data_class_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "edit_role", edit_role)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "reject_version_id", reject_version_id)
        pulumi.set(__self__, "unaudited_version_id", unaudited_version_id)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "user_role", user_role)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_id", version_id)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="approveRole")
    def approve_role(self) -> _builtins.str:
        """
        The approval role of the playbook.
        """
        return pulumi.get(self, "approve_role")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The playbook creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataClassId")
    def data_class_id(self) -> _builtins.str:
        """
        The data class ID.
        """
        return pulumi.get(self, "data_class_id")

    @_builtins.property
    @pulumi.getter(name="dataClassName")
    def data_class_name(self) -> _builtins.str:
        """
        Specifies the data class name.
        """
        return pulumi.get(self, "data_class_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the playbook description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="editRole")
    def edit_role(self) -> _builtins.str:
        """
        The edit role of the playbook.
        """
        return pulumi.get(self, "edit_role")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Specifies whether the playbook is enabled. The value can be **true** or **false**.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The playbook ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the playbook name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> _builtins.str:
        """
        The owner ID.
        """
        return pulumi.get(self, "owner_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="rejectVersionId")
    def reject_version_id(self) -> _builtins.str:
        """
        The ID of the rejected playbook version.
        """
        return pulumi.get(self, "reject_version_id")

    @_builtins.property
    @pulumi.getter(name="unauditedVersionId")
    def unaudited_version_id(self) -> _builtins.str:
        """
        The ID of the playbook version to be reviewed.
        """
        return pulumi.get(self, "unaudited_version_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The playbook update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userRole")
    def user_role(self) -> _builtins.str:
        """
        The user role of the playbook.
        """
        return pulumi.get(self, "user_role")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> _builtins.str:
        """
        The playbook version ID.
        """
        return pulumi.get(self, "version_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        Specifies the workspace ID.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetSecurityReportsReportResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 is_generated: _builtins.bool,
                 language: _builtins.str,
                 layout_id: _builtins.str,
                 notification_task: _builtins.str,
                 report_name: _builtins.str,
                 report_period: _builtins.str,
                 report_ranges: Sequence['outputs.GetSecurityReportsReportReportRangeResult'],
                 report_rule_infos: Sequence['outputs.GetSecurityReportsReportReportRuleInfoResult'],
                 status: _builtins.str):
        """
        :param _builtins.str id: The report sending rule ID.
        :param _builtins.bool is_generated: Whether the report has been generated.
        :param _builtins.str language: The language.
        :param _builtins.str layout_id: The layout ID.
        :param _builtins.str notification_task: The notification task ID.
        :param _builtins.str report_name: The report name.
        :param _builtins.str report_period: Specifies the report period.
               The value can be **weekly**, **daily**, **monthly** or **annual**.
        :param Sequence['GetSecurityReportsReportReportRangeArgs'] report_ranges: The data range.
        :param Sequence['GetSecurityReportsReportReportRuleInfoArgs'] report_rule_infos: The report rules.
        :param _builtins.str status: Specifies the report status.
               The value can be **enable** or **disable**.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_generated", is_generated)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "layout_id", layout_id)
        pulumi.set(__self__, "notification_task", notification_task)
        pulumi.set(__self__, "report_name", report_name)
        pulumi.set(__self__, "report_period", report_period)
        pulumi.set(__self__, "report_ranges", report_ranges)
        pulumi.set(__self__, "report_rule_infos", report_rule_infos)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The report sending rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isGenerated")
    def is_generated(self) -> _builtins.bool:
        """
        Whether the report has been generated.
        """
        return pulumi.get(self, "is_generated")

    @_builtins.property
    @pulumi.getter
    def language(self) -> _builtins.str:
        """
        The language.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter(name="layoutId")
    def layout_id(self) -> _builtins.str:
        """
        The layout ID.
        """
        return pulumi.get(self, "layout_id")

    @_builtins.property
    @pulumi.getter(name="notificationTask")
    def notification_task(self) -> _builtins.str:
        """
        The notification task ID.
        """
        return pulumi.get(self, "notification_task")

    @_builtins.property
    @pulumi.getter(name="reportName")
    def report_name(self) -> _builtins.str:
        """
        The report name.
        """
        return pulumi.get(self, "report_name")

    @_builtins.property
    @pulumi.getter(name="reportPeriod")
    def report_period(self) -> _builtins.str:
        """
        Specifies the report period.
        The value can be **weekly**, **daily**, **monthly** or **annual**.
        """
        return pulumi.get(self, "report_period")

    @_builtins.property
    @pulumi.getter(name="reportRanges")
    def report_ranges(self) -> Sequence['outputs.GetSecurityReportsReportReportRangeResult']:
        """
        The data range.
        """
        return pulumi.get(self, "report_ranges")

    @_builtins.property
    @pulumi.getter(name="reportRuleInfos")
    def report_rule_infos(self) -> Sequence['outputs.GetSecurityReportsReportReportRuleInfoResult']:
        """
        The report rules.
        """
        return pulumi.get(self, "report_rule_infos")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the report status.
        The value can be **enable** or **disable**.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSecurityReportsReportReportRangeResult(dict):
    def __init__(__self__, *,
                 end: _builtins.str,
                 start: _builtins.str):
        """
        :param _builtins.str end: The end time.
        :param _builtins.str start: The start time.
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @_builtins.property
    @pulumi.getter
    def end(self) -> _builtins.str:
        """
        The end time.
        """
        return pulumi.get(self, "end")

    @_builtins.property
    @pulumi.getter
    def start(self) -> _builtins.str:
        """
        The start time.
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetSecurityReportsReportReportRuleInfoResult(dict):
    def __init__(__self__, *,
                 cycle: _builtins.str,
                 email_content: _builtins.str,
                 email_title: _builtins.str,
                 email_to: _builtins.str,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 project_id: _builtins.str,
                 report_file_type: _builtins.str,
                 rule: _builtins.str,
                 start_time: _builtins.str,
                 workspace_id: _builtins.str):
        """
        :param _builtins.str cycle: The data cycle.
        :param _builtins.str email_content: The email content.
        :param _builtins.str email_title: The email title.
        :param _builtins.str email_to: The recipient email.
        :param _builtins.str end_time: The report data cycle end time.
        :param _builtins.str id: The report sending rule ID.
        :param _builtins.str project_id: The tenant ID.
        :param _builtins.str report_file_type: The report type.
        :param _builtins.str rule: The cron expression.
        :param _builtins.str start_time: The report data cycle start time.
        :param _builtins.str workspace_id: Specifies the workspace ID to which the reports belong.
        """
        pulumi.set(__self__, "cycle", cycle)
        pulumi.set(__self__, "email_content", email_content)
        pulumi.set(__self__, "email_title", email_title)
        pulumi.set(__self__, "email_to", email_to)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "report_file_type", report_file_type)
        pulumi.set(__self__, "rule", rule)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def cycle(self) -> _builtins.str:
        """
        The data cycle.
        """
        return pulumi.get(self, "cycle")

    @_builtins.property
    @pulumi.getter(name="emailContent")
    def email_content(self) -> _builtins.str:
        """
        The email content.
        """
        return pulumi.get(self, "email_content")

    @_builtins.property
    @pulumi.getter(name="emailTitle")
    def email_title(self) -> _builtins.str:
        """
        The email title.
        """
        return pulumi.get(self, "email_title")

    @_builtins.property
    @pulumi.getter(name="emailTo")
    def email_to(self) -> _builtins.str:
        """
        The recipient email.
        """
        return pulumi.get(self, "email_to")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        The report data cycle end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The report sending rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The tenant ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="reportFileType")
    def report_file_type(self) -> _builtins.str:
        """
        The report type.
        """
        return pulumi.get(self, "report_file_type")

    @_builtins.property
    @pulumi.getter
    def rule(self) -> _builtins.str:
        """
        The cron expression.
        """
        return pulumi.get(self, "rule")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        The report data cycle start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        Specifies the workspace ID to which the reports belong.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetSocComponentActionDetailDataResult(dict):
    def __init__(__self__, *,
                 action_desc: _builtins.str,
                 action_enable: _builtins.str,
                 action_name: _builtins.str,
                 action_type: _builtins.str,
                 action_version_id: _builtins.str,
                 action_version_name: _builtins.str,
                 action_version_number: _builtins.str,
                 can_update: _builtins.bool,
                 create_time: _builtins.str,
                 creator_name: _builtins.str,
                 id: _builtins.str):
        """
        :param _builtins.str action_desc: The plugin execution function description.
        :param _builtins.str action_enable: The enable or disable status.
        :param _builtins.str action_name: The plugin execution function name.
        :param _builtins.str action_type: The action type. The value can be **action**, **connector**, or **manager**.
        :param _builtins.str action_version_id: The plugin execution function version ID.
        :param _builtins.str action_version_name: The user defined action version alias.
        :param _builtins.str action_version_number: The internally generated action version number will only increment.
        :param _builtins.bool can_update: Is it upgradable. The value can be **true** or **false**.
        :param _builtins.str create_time: The creation time.
        :param _builtins.str creator_name: The creator name.
        :param _builtins.str id: The plugin execution function ID.
        """
        pulumi.set(__self__, "action_desc", action_desc)
        pulumi.set(__self__, "action_enable", action_enable)
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "action_version_id", action_version_id)
        pulumi.set(__self__, "action_version_name", action_version_name)
        pulumi.set(__self__, "action_version_number", action_version_number)
        pulumi.set(__self__, "can_update", can_update)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_name", creator_name)
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="actionDesc")
    def action_desc(self) -> _builtins.str:
        """
        The plugin execution function description.
        """
        return pulumi.get(self, "action_desc")

    @_builtins.property
    @pulumi.getter(name="actionEnable")
    def action_enable(self) -> _builtins.str:
        """
        The enable or disable status.
        """
        return pulumi.get(self, "action_enable")

    @_builtins.property
    @pulumi.getter(name="actionName")
    def action_name(self) -> _builtins.str:
        """
        The plugin execution function name.
        """
        return pulumi.get(self, "action_name")

    @_builtins.property
    @pulumi.getter(name="actionType")
    def action_type(self) -> _builtins.str:
        """
        The action type. The value can be **action**, **connector**, or **manager**.
        """
        return pulumi.get(self, "action_type")

    @_builtins.property
    @pulumi.getter(name="actionVersionId")
    def action_version_id(self) -> _builtins.str:
        """
        The plugin execution function version ID.
        """
        return pulumi.get(self, "action_version_id")

    @_builtins.property
    @pulumi.getter(name="actionVersionName")
    def action_version_name(self) -> _builtins.str:
        """
        The user defined action version alias.
        """
        return pulumi.get(self, "action_version_name")

    @_builtins.property
    @pulumi.getter(name="actionVersionNumber")
    def action_version_number(self) -> _builtins.str:
        """
        The internally generated action version number will only increment.
        """
        return pulumi.get(self, "action_version_number")

    @_builtins.property
    @pulumi.getter(name="canUpdate")
    def can_update(self) -> _builtins.bool:
        """
        Is it upgradable. The value can be **true** or **false**.
        """
        return pulumi.get(self, "can_update")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> _builtins.str:
        """
        The creator name.
        """
        return pulumi.get(self, "creator_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The plugin execution function ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSocComponentActionsDataResult(dict):
    def __init__(__self__, *,
                 action_desc: _builtins.str,
                 action_enable: _builtins.str,
                 action_name: _builtins.str,
                 action_type: _builtins.str,
                 action_version_id: _builtins.str,
                 action_version_name: _builtins.str,
                 action_version_number: _builtins.str,
                 can_update: _builtins.bool,
                 create_time: _builtins.str,
                 creator_name: _builtins.str,
                 id: _builtins.str):
        """
        :param _builtins.str action_desc: The plugin execution function description.
        :param _builtins.str action_enable: The enable or disable status.
        :param _builtins.str action_name: The plugin execution function name.
        :param _builtins.str action_type: The action type. The value can be **action**, **connector**, or **manager**.
        :param _builtins.str action_version_id: The plugin execution function version ID.
        :param _builtins.str action_version_name: The user defined action version alias.
        :param _builtins.str action_version_number: The internally generated action version number will only increment.
        :param _builtins.bool can_update: Is it upgradable. The value can be **true** or **false**.
        :param _builtins.str create_time: The creation time.
        :param _builtins.str creator_name: The creator name.
        :param _builtins.str id: The plugin execution function ID.
        """
        pulumi.set(__self__, "action_desc", action_desc)
        pulumi.set(__self__, "action_enable", action_enable)
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "action_version_id", action_version_id)
        pulumi.set(__self__, "action_version_name", action_version_name)
        pulumi.set(__self__, "action_version_number", action_version_number)
        pulumi.set(__self__, "can_update", can_update)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_name", creator_name)
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="actionDesc")
    def action_desc(self) -> _builtins.str:
        """
        The plugin execution function description.
        """
        return pulumi.get(self, "action_desc")

    @_builtins.property
    @pulumi.getter(name="actionEnable")
    def action_enable(self) -> _builtins.str:
        """
        The enable or disable status.
        """
        return pulumi.get(self, "action_enable")

    @_builtins.property
    @pulumi.getter(name="actionName")
    def action_name(self) -> _builtins.str:
        """
        The plugin execution function name.
        """
        return pulumi.get(self, "action_name")

    @_builtins.property
    @pulumi.getter(name="actionType")
    def action_type(self) -> _builtins.str:
        """
        The action type. The value can be **action**, **connector**, or **manager**.
        """
        return pulumi.get(self, "action_type")

    @_builtins.property
    @pulumi.getter(name="actionVersionId")
    def action_version_id(self) -> _builtins.str:
        """
        The plugin execution function version ID.
        """
        return pulumi.get(self, "action_version_id")

    @_builtins.property
    @pulumi.getter(name="actionVersionName")
    def action_version_name(self) -> _builtins.str:
        """
        The user defined action version alias.
        """
        return pulumi.get(self, "action_version_name")

    @_builtins.property
    @pulumi.getter(name="actionVersionNumber")
    def action_version_number(self) -> _builtins.str:
        """
        The internally generated action version number will only increment.
        """
        return pulumi.get(self, "action_version_number")

    @_builtins.property
    @pulumi.getter(name="canUpdate")
    def can_update(self) -> _builtins.bool:
        """
        Is it upgradable. The value can be **true** or **false**.
        """
        return pulumi.get(self, "can_update")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> _builtins.str:
        """
        The creator name.
        """
        return pulumi.get(self, "creator_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The plugin execution function ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSocComponentDetailDataResult(dict):
    def __init__(__self__, *,
                 alliance_id: _builtins.str,
                 alliance_name: _builtins.str,
                 component_type: _builtins.str,
                 component_versions: Sequence['outputs.GetSocComponentDetailDataComponentVersionResult'],
                 create_time: _builtins.str,
                 creator_name: _builtins.str,
                 description: _builtins.str,
                 dev_language: _builtins.str,
                 dev_language_version: _builtins.str,
                 id: _builtins.str,
                 label: _builtins.str,
                 logo: _builtins.str,
                 name: _builtins.str,
                 operate_histories: Sequence['outputs.GetSocComponentDetailDataOperateHistoryResult'],
                 update_time: _builtins.str):
        """
        :param _builtins.str alliance_id: The alliance ID.
        :param _builtins.str alliance_name: The alliance name.
        :param _builtins.str component_type: The plugin type.  
               The valid values are as follows:
               + **subscribe**: Subscription.
               + **custom**: Custom development.
               + **system**: System built-in.
        :param Sequence['GetSocComponentDetailDataComponentVersionArgs'] component_versions: The plugin version information, compatible with previous Java versions with plugin granularity.
        :param _builtins.str create_time: The creation time.
        :param _builtins.str creator_name: The creator name.
        :param _builtins.str description: The description.
        :param _builtins.str dev_language: The dev language.
        :param _builtins.str dev_language_version: The dev language version.
        :param _builtins.str id: The ID.
        :param _builtins.str label: The label.
        :param _builtins.str logo: The market head icon.
        :param _builtins.str name: The connection config name.
        :param Sequence['GetSocComponentDetailDataOperateHistoryArgs'] operate_histories: The plugin operation history.
        :param _builtins.str update_time: The update time.
        """
        pulumi.set(__self__, "alliance_id", alliance_id)
        pulumi.set(__self__, "alliance_name", alliance_name)
        pulumi.set(__self__, "component_type", component_type)
        pulumi.set(__self__, "component_versions", component_versions)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_name", creator_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dev_language", dev_language)
        pulumi.set(__self__, "dev_language_version", dev_language_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "logo", logo)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operate_histories", operate_histories)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="allianceId")
    def alliance_id(self) -> _builtins.str:
        """
        The alliance ID.
        """
        return pulumi.get(self, "alliance_id")

    @_builtins.property
    @pulumi.getter(name="allianceName")
    def alliance_name(self) -> _builtins.str:
        """
        The alliance name.
        """
        return pulumi.get(self, "alliance_name")

    @_builtins.property
    @pulumi.getter(name="componentType")
    def component_type(self) -> _builtins.str:
        """
        The plugin type.  
        The valid values are as follows:
        + **subscribe**: Subscription.
        + **custom**: Custom development.
        + **system**: System built-in.
        """
        return pulumi.get(self, "component_type")

    @_builtins.property
    @pulumi.getter(name="componentVersions")
    def component_versions(self) -> Sequence['outputs.GetSocComponentDetailDataComponentVersionResult']:
        """
        The plugin version information, compatible with previous Java versions with plugin granularity.
        """
        return pulumi.get(self, "component_versions")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> _builtins.str:
        """
        The creator name.
        """
        return pulumi.get(self, "creator_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="devLanguage")
    def dev_language(self) -> _builtins.str:
        """
        The dev language.
        """
        return pulumi.get(self, "dev_language")

    @_builtins.property
    @pulumi.getter(name="devLanguageVersion")
    def dev_language_version(self) -> _builtins.str:
        """
        The dev language version.
        """
        return pulumi.get(self, "dev_language_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        """
        The label.
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter
    def logo(self) -> _builtins.str:
        """
        The market head icon.
        """
        return pulumi.get(self, "logo")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The connection config name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operateHistories")
    def operate_histories(self) -> Sequence['outputs.GetSocComponentDetailDataOperateHistoryResult']:
        """
        The plugin operation history.
        """
        return pulumi.get(self, "operate_histories")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetSocComponentDetailDataComponentVersionResult(dict):
    def __init__(__self__, *,
                 component_attachment_id: _builtins.str,
                 connection_configs: Sequence['outputs.GetSocComponentDetailDataComponentVersionConnectionConfigResult'],
                 id: _builtins.str,
                 package_name: _builtins.str,
                 status: _builtins.str,
                 sub_version_id: _builtins.str,
                 version_desc: _builtins.str,
                 version_num: _builtins.str):
        """
        :param _builtins.str component_attachment_id: The component attachment ID.
        :param Sequence['GetSocComponentDetailDataComponentVersionConnectionConfigArgs'] connection_configs: The operational connection configuration list.
        :param _builtins.str id: The ID.
        :param _builtins.str package_name: The package name.
        :param _builtins.str status: The status.
        :param _builtins.str sub_version_id: The sub-version ID.
        :param _builtins.str version_desc: The version description.
        :param _builtins.str version_num: The version.
        """
        pulumi.set(__self__, "component_attachment_id", component_attachment_id)
        pulumi.set(__self__, "connection_configs", connection_configs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "package_name", package_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_version_id", sub_version_id)
        pulumi.set(__self__, "version_desc", version_desc)
        pulumi.set(__self__, "version_num", version_num)

    @_builtins.property
    @pulumi.getter(name="componentAttachmentId")
    def component_attachment_id(self) -> _builtins.str:
        """
        The component attachment ID.
        """
        return pulumi.get(self, "component_attachment_id")

    @_builtins.property
    @pulumi.getter(name="connectionConfigs")
    def connection_configs(self) -> Sequence['outputs.GetSocComponentDetailDataComponentVersionConnectionConfigResult']:
        """
        The operational connection configuration list.
        """
        return pulumi.get(self, "connection_configs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="packageName")
    def package_name(self) -> _builtins.str:
        """
        The package name.
        """
        return pulumi.get(self, "package_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subVersionId")
    def sub_version_id(self) -> _builtins.str:
        """
        The sub-version ID.
        """
        return pulumi.get(self, "sub_version_id")

    @_builtins.property
    @pulumi.getter(name="versionDesc")
    def version_desc(self) -> _builtins.str:
        """
        The version description.
        """
        return pulumi.get(self, "version_desc")

    @_builtins.property
    @pulumi.getter(name="versionNum")
    def version_num(self) -> _builtins.str:
        """
        The version.
        """
        return pulumi.get(self, "version_num")


@pulumi.output_type
class GetSocComponentDetailDataComponentVersionConnectionConfigResult(dict):
    def __init__(__self__, *,
                 default_value: _builtins.str,
                 description: _builtins.str,
                 key: _builtins.str,
                 name: _builtins.str,
                 readonly: _builtins.bool,
                 required: _builtins.bool,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str default_value: The default value.
        :param _builtins.str description: The description.
        :param _builtins.str key: The key.
        :param _builtins.str name: The connection config name.
        :param _builtins.bool readonly: The readonly.
        :param _builtins.bool required: Is it required.
        :param _builtins.str type: The type.
        :param _builtins.str value: The value.
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "readonly", readonly)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> _builtins.str:
        """
        The default value.
        """
        return pulumi.get(self, "default_value")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The connection config name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> _builtins.bool:
        """
        The readonly.
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter
    def required(self) -> _builtins.bool:
        """
        Is it required.
        """
        return pulumi.get(self, "required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSocComponentDetailDataOperateHistoryResult(dict):
    def __init__(__self__, *,
                 operate_name: _builtins.str,
                 operate_time: _builtins.str):
        """
        :param _builtins.str operate_name: The operation name.
        :param _builtins.str operate_time: The operating time.
        """
        pulumi.set(__self__, "operate_name", operate_name)
        pulumi.set(__self__, "operate_time", operate_time)

    @_builtins.property
    @pulumi.getter(name="operateName")
    def operate_name(self) -> _builtins.str:
        """
        The operation name.
        """
        return pulumi.get(self, "operate_name")

    @_builtins.property
    @pulumi.getter(name="operateTime")
    def operate_time(self) -> _builtins.str:
        """
        The operating time.
        """
        return pulumi.get(self, "operate_time")


@pulumi.output_type
class GetSocComponentsDataResult(dict):
    def __init__(__self__, *,
                 alliance_id: _builtins.str,
                 alliance_name: _builtins.str,
                 component_type: _builtins.str,
                 component_versions: Sequence['outputs.GetSocComponentsDataComponentVersionResult'],
                 create_time: _builtins.str,
                 creator_name: _builtins.str,
                 description: _builtins.str,
                 dev_language: _builtins.str,
                 dev_language_version: _builtins.str,
                 id: _builtins.str,
                 label: _builtins.str,
                 logo: _builtins.str,
                 name: _builtins.str,
                 operate_histories: Sequence['outputs.GetSocComponentsDataOperateHistoryResult'],
                 update_time: _builtins.str):
        """
        :param _builtins.str alliance_id: The alliance ID.
        :param _builtins.str alliance_name: The alliance name.
        :param _builtins.str component_type: The plugin type.  
               The valid values are as follows:
               + **subscribe**: Subscription.
               + **custom**: Custom development.
               + **system**: System built-in.
        :param Sequence['GetSocComponentsDataComponentVersionArgs'] component_versions: The plugin version information, compatible with previous Java versions with plugin granularity.
        :param _builtins.str create_time: The creation time.
        :param _builtins.str creator_name: The creator name.
        :param _builtins.str description: The description.
        :param _builtins.str dev_language: The dev language.
        :param _builtins.str dev_language_version: The dev language version.
        :param _builtins.str id: The ID.
        :param _builtins.str label: The label.
        :param _builtins.str logo: The market head icon.
        :param _builtins.str name: The connection config name.
        :param Sequence['GetSocComponentsDataOperateHistoryArgs'] operate_histories: The plugin operation history.
        :param _builtins.str update_time: The update time.
        """
        pulumi.set(__self__, "alliance_id", alliance_id)
        pulumi.set(__self__, "alliance_name", alliance_name)
        pulumi.set(__self__, "component_type", component_type)
        pulumi.set(__self__, "component_versions", component_versions)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_name", creator_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dev_language", dev_language)
        pulumi.set(__self__, "dev_language_version", dev_language_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "logo", logo)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operate_histories", operate_histories)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="allianceId")
    def alliance_id(self) -> _builtins.str:
        """
        The alliance ID.
        """
        return pulumi.get(self, "alliance_id")

    @_builtins.property
    @pulumi.getter(name="allianceName")
    def alliance_name(self) -> _builtins.str:
        """
        The alliance name.
        """
        return pulumi.get(self, "alliance_name")

    @_builtins.property
    @pulumi.getter(name="componentType")
    def component_type(self) -> _builtins.str:
        """
        The plugin type.  
        The valid values are as follows:
        + **subscribe**: Subscription.
        + **custom**: Custom development.
        + **system**: System built-in.
        """
        return pulumi.get(self, "component_type")

    @_builtins.property
    @pulumi.getter(name="componentVersions")
    def component_versions(self) -> Sequence['outputs.GetSocComponentsDataComponentVersionResult']:
        """
        The plugin version information, compatible with previous Java versions with plugin granularity.
        """
        return pulumi.get(self, "component_versions")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> _builtins.str:
        """
        The creator name.
        """
        return pulumi.get(self, "creator_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="devLanguage")
    def dev_language(self) -> _builtins.str:
        """
        The dev language.
        """
        return pulumi.get(self, "dev_language")

    @_builtins.property
    @pulumi.getter(name="devLanguageVersion")
    def dev_language_version(self) -> _builtins.str:
        """
        The dev language version.
        """
        return pulumi.get(self, "dev_language_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        """
        The label.
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter
    def logo(self) -> _builtins.str:
        """
        The market head icon.
        """
        return pulumi.get(self, "logo")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The connection config name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operateHistories")
    def operate_histories(self) -> Sequence['outputs.GetSocComponentsDataOperateHistoryResult']:
        """
        The plugin operation history.
        """
        return pulumi.get(self, "operate_histories")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetSocComponentsDataComponentVersionResult(dict):
    def __init__(__self__, *,
                 component_attachment_id: _builtins.str,
                 connection_configs: Sequence['outputs.GetSocComponentsDataComponentVersionConnectionConfigResult'],
                 id: _builtins.str,
                 package_name: _builtins.str,
                 status: _builtins.str,
                 sub_version_id: _builtins.str,
                 version_desc: _builtins.str,
                 version_num: _builtins.str):
        """
        :param _builtins.str component_attachment_id: The component attachment ID.
        :param Sequence['GetSocComponentsDataComponentVersionConnectionConfigArgs'] connection_configs: The operational connection configuration list.
        :param _builtins.str id: The ID.
        :param _builtins.str package_name: The package name.
        :param _builtins.str status: The status.
        :param _builtins.str sub_version_id: The sub-version ID.
        :param _builtins.str version_desc: The version description.
        :param _builtins.str version_num: The version.
        """
        pulumi.set(__self__, "component_attachment_id", component_attachment_id)
        pulumi.set(__self__, "connection_configs", connection_configs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "package_name", package_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_version_id", sub_version_id)
        pulumi.set(__self__, "version_desc", version_desc)
        pulumi.set(__self__, "version_num", version_num)

    @_builtins.property
    @pulumi.getter(name="componentAttachmentId")
    def component_attachment_id(self) -> _builtins.str:
        """
        The component attachment ID.
        """
        return pulumi.get(self, "component_attachment_id")

    @_builtins.property
    @pulumi.getter(name="connectionConfigs")
    def connection_configs(self) -> Sequence['outputs.GetSocComponentsDataComponentVersionConnectionConfigResult']:
        """
        The operational connection configuration list.
        """
        return pulumi.get(self, "connection_configs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="packageName")
    def package_name(self) -> _builtins.str:
        """
        The package name.
        """
        return pulumi.get(self, "package_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subVersionId")
    def sub_version_id(self) -> _builtins.str:
        """
        The sub-version ID.
        """
        return pulumi.get(self, "sub_version_id")

    @_builtins.property
    @pulumi.getter(name="versionDesc")
    def version_desc(self) -> _builtins.str:
        """
        The version description.
        """
        return pulumi.get(self, "version_desc")

    @_builtins.property
    @pulumi.getter(name="versionNum")
    def version_num(self) -> _builtins.str:
        """
        The version.
        """
        return pulumi.get(self, "version_num")


@pulumi.output_type
class GetSocComponentsDataComponentVersionConnectionConfigResult(dict):
    def __init__(__self__, *,
                 default_value: _builtins.str,
                 description: _builtins.str,
                 key: _builtins.str,
                 name: _builtins.str,
                 readonly: _builtins.bool,
                 required: _builtins.bool,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str default_value: The default value.
        :param _builtins.str description: The description.
        :param _builtins.str key: The key.
        :param _builtins.str name: The connection config name.
        :param _builtins.bool readonly: The readonly.
        :param _builtins.bool required: Is it required.
        :param _builtins.str type: The type.
        :param _builtins.str value: The value.
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "readonly", readonly)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> _builtins.str:
        """
        The default value.
        """
        return pulumi.get(self, "default_value")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The connection config name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> _builtins.bool:
        """
        The readonly.
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter
    def required(self) -> _builtins.bool:
        """
        Is it required.
        """
        return pulumi.get(self, "required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSocComponentsDataOperateHistoryResult(dict):
    def __init__(__self__, *,
                 operate_name: _builtins.str,
                 operate_time: _builtins.str):
        """
        :param _builtins.str operate_name: The operation name.
        :param _builtins.str operate_time: The operating time.
        """
        pulumi.set(__self__, "operate_name", operate_name)
        pulumi.set(__self__, "operate_time", operate_time)

    @_builtins.property
    @pulumi.getter(name="operateName")
    def operate_name(self) -> _builtins.str:
        """
        The operation name.
        """
        return pulumi.get(self, "operate_name")

    @_builtins.property
    @pulumi.getter(name="operateTime")
    def operate_time(self) -> _builtins.str:
        """
        The operating time.
        """
        return pulumi.get(self, "operate_time")


@pulumi.output_type
class GetVpcEndpointServicesRecordResult(dict):
    def __init__(__self__, *,
                 deprecated: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.bool deprecated: Whether the service is deprecated.
        :param _builtins.str id: The unique identifier of the service (UUID).
        :param _builtins.str name: The name of the tenant to which the service belongs.
        :param _builtins.str type: The type of VPC service. Valid values are:
               + **MANAGE**: Management channel.
               + **DATA**: Data channel.
        """
        pulumi.set(__self__, "deprecated", deprecated)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def deprecated(self) -> _builtins.bool:
        """
        Whether the service is deprecated.
        """
        return pulumi.get(self, "deprecated")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique identifier of the service (UUID).
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the tenant to which the service belongs.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of VPC service. Valid values are:
        + **MANAGE**: Management channel.
        + **DATA**: Data channel.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkflowInstanceDataclassResult(dict):
    def __init__(__self__, *,
                 en_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str en_name: The playbook English name.
        :param _builtins.str id: The playbook ID.
        :param _builtins.str name: The playbook name.
        """
        pulumi.set(__self__, "en_name", en_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="enName")
    def en_name(self) -> _builtins.str:
        """
        The playbook English name.
        """
        return pulumi.get(self, "en_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The playbook ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The playbook name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWorkflowInstancePlaybookResult(dict):
    def __init__(__self__, *,
                 en_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str en_name: The playbook English name.
        :param _builtins.str id: The playbook ID.
        :param _builtins.str name: The playbook name.
        """
        pulumi.set(__self__, "en_name", en_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="enName")
    def en_name(self) -> _builtins.str:
        """
        The playbook English name.
        """
        return pulumi.get(self, "en_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The playbook ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The playbook name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWorkflowInstanceWorkflowResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 name_en: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str id: The playbook ID.
        :param _builtins.str name: The playbook name.
        :param _builtins.str name_en: The workflow English name.
        :param _builtins.str version: The workflow version.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_en", name_en)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The playbook ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The playbook name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> _builtins.str:
        """
        The workflow English name.
        """
        return pulumi.get(self, "name_en")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The workflow version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetWorkflowInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 dataclasses: Sequence['outputs.GetWorkflowInstancesInstanceDataclassResult'],
                 dataobject_id: _builtins.str,
                 defense_id: _builtins.str,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 playbooks: Sequence['outputs.GetWorkflowInstancesInstancePlaybookResult'],
                 retry_count: _builtins.int,
                 start_time: _builtins.str,
                 status: _builtins.str,
                 trigger_type: _builtins.str,
                 workflows: Sequence['outputs.GetWorkflowInstancesInstanceWorkflowResult']):
        """
        :param Sequence['GetWorkflowInstancesInstanceDataclassArgs'] dataclasses: The data class of the instance.
        :param _builtins.str dataobject_id: The data object ID.
        :param _builtins.str defense_id: The defense ID.
        :param _builtins.str end_time: The end time.
        :param _builtins.str id: Specifies the workflow instance ID.
        :param _builtins.str name: Specifies the workflow instance name.
        :param Sequence['GetWorkflowInstancesInstancePlaybookArgs'] playbooks: The playbook information of the instance.
        :param _builtins.int retry_count: The workflow instance retry count.
        :param _builtins.str start_time: The start time.
        :param _builtins.str status: Specifies the workflow status.
               The valid values are as follows:
               + **CREATED**
               + **RUNNING**
               + **FINISHED**
               + **RETRYING**
               + **TERMINATING**
               + **TERMINATED**
               + **FAILED**
        :param _builtins.str trigger_type: Specifies the workflow trigger mode.
               The valid values are as follows:
               + **TIMER**: Indicates scheduled triggering.
               + **EVENT**: Indicates event triggering.
        :param Sequence['GetWorkflowInstancesInstanceWorkflowArgs'] workflows: The workflow information of the instance.
        """
        pulumi.set(__self__, "dataclasses", dataclasses)
        pulumi.set(__self__, "dataobject_id", dataobject_id)
        pulumi.set(__self__, "defense_id", defense_id)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "playbooks", playbooks)
        pulumi.set(__self__, "retry_count", retry_count)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trigger_type", trigger_type)
        pulumi.set(__self__, "workflows", workflows)

    @_builtins.property
    @pulumi.getter
    def dataclasses(self) -> Sequence['outputs.GetWorkflowInstancesInstanceDataclassResult']:
        """
        The data class of the instance.
        """
        return pulumi.get(self, "dataclasses")

    @_builtins.property
    @pulumi.getter(name="dataobjectId")
    def dataobject_id(self) -> _builtins.str:
        """
        The data object ID.
        """
        return pulumi.get(self, "dataobject_id")

    @_builtins.property
    @pulumi.getter(name="defenseId")
    def defense_id(self) -> _builtins.str:
        """
        The defense ID.
        """
        return pulumi.get(self, "defense_id")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        The end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the workflow instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the workflow instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def playbooks(self) -> Sequence['outputs.GetWorkflowInstancesInstancePlaybookResult']:
        """
        The playbook information of the instance.
        """
        return pulumi.get(self, "playbooks")

    @_builtins.property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> _builtins.int:
        """
        The workflow instance retry count.
        """
        return pulumi.get(self, "retry_count")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        The start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the workflow status.
        The valid values are as follows:
        + **CREATED**
        + **RUNNING**
        + **FINISHED**
        + **RETRYING**
        + **TERMINATING**
        + **TERMINATED**
        + **FAILED**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Specifies the workflow trigger mode.
        The valid values are as follows:
        + **TIMER**: Indicates scheduled triggering.
        + **EVENT**: Indicates event triggering.
        """
        return pulumi.get(self, "trigger_type")

    @_builtins.property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.GetWorkflowInstancesInstanceWorkflowResult']:
        """
        The workflow information of the instance.
        """
        return pulumi.get(self, "workflows")


@pulumi.output_type
class GetWorkflowInstancesInstanceDataclassResult(dict):
    def __init__(__self__, *,
                 en_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str en_name: The playbook English name.
        :param _builtins.str id: Specifies the workflow instance ID.
        :param _builtins.str name: Specifies the workflow instance name.
        """
        pulumi.set(__self__, "en_name", en_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="enName")
    def en_name(self) -> _builtins.str:
        """
        The playbook English name.
        """
        return pulumi.get(self, "en_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the workflow instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the workflow instance name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWorkflowInstancesInstancePlaybookResult(dict):
    def __init__(__self__, *,
                 en_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str en_name: The playbook English name.
        :param _builtins.str id: Specifies the workflow instance ID.
        :param _builtins.str name: Specifies the workflow instance name.
        """
        pulumi.set(__self__, "en_name", en_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="enName")
    def en_name(self) -> _builtins.str:
        """
        The playbook English name.
        """
        return pulumi.get(self, "en_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the workflow instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the workflow instance name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWorkflowInstancesInstanceWorkflowResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 name_en: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str id: Specifies the workflow instance ID.
        :param _builtins.str name: Specifies the workflow instance name.
        :param _builtins.str name_en: The workflow English name.
        :param _builtins.str version: The workflow version.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_en", name_en)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the workflow instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the workflow instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> _builtins.str:
        """
        The workflow English name.
        """
        return pulumi.get(self, "name_en")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The workflow version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetWorkflowVersionsDataResult(dict):
    def __init__(__self__, *,
                 aop_type: _builtins.str,
                 creator_id: _builtins.str,
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str,
                 owner_id: _builtins.str,
                 project_id: _builtins.str,
                 status: _builtins.str,
                 taskconfig: _builtins.str,
                 taskflow: _builtins.str,
                 taskflow_type: _builtins.str,
                 version: _builtins.str,
                 workflow_id: _builtins.str):
        """
        :param _builtins.str aop_type: The workflow type.
               The value can be **NORMAL**, **SURVEY**, **HEMOSTASIS** or **EASE**.
        :param _builtins.str creator_id: The workflow version creator.
        :param _builtins.str description: The workflow version description.
        :param _builtins.bool enabled: Whether the workflow version enabled.
        :param _builtins.str id: The workflow version ID.
        :param _builtins.str name: The workflow name.
        :param _builtins.str owner_id: The workflow owner ID.
        :param _builtins.str project_id: The project ID.
        :param _builtins.str status: Specifies the workflow version status.
               The value can be **pending_submit**, **pending_approval**, **not_activated**, **activated** or **rejected**.
               
               activated,pending_approval,not_activated，pending_submit，rejected
        :param _builtins.str taskconfig: The workflow topology diagram parameter configuration.
        :param _builtins.str taskflow: The workflow topology diagram Base64 encoding.
        :param _builtins.str taskflow_type: The workflow topology diagram type.
        :param _builtins.str version: The workflow version number.
        :param _builtins.str workflow_id: Specifies the workflow ID.
        """
        pulumi.set(__self__, "aop_type", aop_type)
        pulumi.set(__self__, "creator_id", creator_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "taskconfig", taskconfig)
        pulumi.set(__self__, "taskflow", taskflow)
        pulumi.set(__self__, "taskflow_type", taskflow_type)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "workflow_id", workflow_id)

    @_builtins.property
    @pulumi.getter(name="aopType")
    def aop_type(self) -> _builtins.str:
        """
        The workflow type.
        The value can be **NORMAL**, **SURVEY**, **HEMOSTASIS** or **EASE**.
        """
        return pulumi.get(self, "aop_type")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> _builtins.str:
        """
        The workflow version creator.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The workflow version description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether the workflow version enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The workflow version ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The workflow name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> _builtins.str:
        """
        The workflow owner ID.
        """
        return pulumi.get(self, "owner_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the workflow version status.
        The value can be **pending_submit**, **pending_approval**, **not_activated**, **activated** or **rejected**.

        activated,pending_approval,not_activated，pending_submit，rejected
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def taskconfig(self) -> _builtins.str:
        """
        The workflow topology diagram parameter configuration.
        """
        return pulumi.get(self, "taskconfig")

    @_builtins.property
    @pulumi.getter
    def taskflow(self) -> _builtins.str:
        """
        The workflow topology diagram Base64 encoding.
        """
        return pulumi.get(self, "taskflow")

    @_builtins.property
    @pulumi.getter(name="taskflowType")
    def taskflow_type(self) -> _builtins.str:
        """
        The workflow topology diagram type.
        """
        return pulumi.get(self, "taskflow_type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The workflow version number.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> _builtins.str:
        """
        Specifies the workflow ID.
        """
        return pulumi.get(self, "workflow_id")


@pulumi.output_type
class GetWorkflowsWorkflowResult(dict):
    def __init__(__self__, *,
                 approve_role: _builtins.str,
                 current_approval_version_id: _builtins.str,
                 current_rejected_version_id: _builtins.str,
                 data_class_id: _builtins.str,
                 description: _builtins.str,
                 edit_role: _builtins.str,
                 enabled: _builtins.bool,
                 engine_type: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 use_role: _builtins.str,
                 version_id: _builtins.str,
                 workspace_id: _builtins.str):
        """
        :param _builtins.str approve_role: The approval role.
        :param _builtins.str current_approval_version_id: The version to be approved currently.
        :param _builtins.str current_rejected_version_id: The version that has been rejected currently.
        :param _builtins.str data_class_id: Specifies the data class ID.
        :param _builtins.str description: Specifies the workflow description.
        :param _builtins.str edit_role: The edit role.
        :param _builtins.bool enabled: Specifies whether the version is enabled. The value can be **true** and **false**.
        :param _builtins.str engine_type: The type of engine.
        :param _builtins.str id: The workflow ID.
        :param _builtins.str name: Specifies the workflow name.
        :param _builtins.str type: Specifies the workflow type.
               The value can be **NORMAL**, **SURVEY**, **HEMOSTASIS** and **EASE**.
        :param _builtins.str use_role: The user role.
        :param _builtins.str version_id: The workflow version ID.
        :param _builtins.str workspace_id: Specifies the workspace ID.
        """
        pulumi.set(__self__, "approve_role", approve_role)
        pulumi.set(__self__, "current_approval_version_id", current_approval_version_id)
        pulumi.set(__self__, "current_rejected_version_id", current_rejected_version_id)
        pulumi.set(__self__, "data_class_id", data_class_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "edit_role", edit_role)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "engine_type", engine_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "use_role", use_role)
        pulumi.set(__self__, "version_id", version_id)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="approveRole")
    def approve_role(self) -> _builtins.str:
        """
        The approval role.
        """
        return pulumi.get(self, "approve_role")

    @_builtins.property
    @pulumi.getter(name="currentApprovalVersionId")
    def current_approval_version_id(self) -> _builtins.str:
        """
        The version to be approved currently.
        """
        return pulumi.get(self, "current_approval_version_id")

    @_builtins.property
    @pulumi.getter(name="currentRejectedVersionId")
    def current_rejected_version_id(self) -> _builtins.str:
        """
        The version that has been rejected currently.
        """
        return pulumi.get(self, "current_rejected_version_id")

    @_builtins.property
    @pulumi.getter(name="dataClassId")
    def data_class_id(self) -> _builtins.str:
        """
        Specifies the data class ID.
        """
        return pulumi.get(self, "data_class_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the workflow description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="editRole")
    def edit_role(self) -> _builtins.str:
        """
        The edit role.
        """
        return pulumi.get(self, "edit_role")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Specifies whether the version is enabled. The value can be **true** and **false**.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> _builtins.str:
        """
        The type of engine.
        """
        return pulumi.get(self, "engine_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The workflow ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the workflow name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the workflow type.
        The value can be **NORMAL**, **SURVEY**, **HEMOSTASIS** and **EASE**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="useRole")
    def use_role(self) -> _builtins.str:
        """
        The user role.
        """
        return pulumi.get(self, "use_role")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> _builtins.str:
        """
        The workflow version ID.
        """
        return pulumi.get(self, "version_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        Specifies the workspace ID.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetWorkspacesWorkspaceResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 enterprise_project_name: _builtins.str,
                 id: _builtins.str,
                 is_view: _builtins.bool,
                 name: _builtins.str,
                 updated_at: _builtins.str,
                 view_bind_id: _builtins.str,
                 view_bind_name: _builtins.str):
        """
        :param _builtins.str created_at: The creation time.
        :param _builtins.str description: Specifies the workspace description.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.str enterprise_project_name: The enterprise project name.
        :param _builtins.str id: The workspace ID.
        :param _builtins.bool is_view: Specifies whether to query the view. The value can be **true** or **false**.
        :param _builtins.str name: Specifies the workspace name.
        :param _builtins.str updated_at: The update time.
        :param _builtins.str view_bind_id: Specifies the space ID bound to the view.
        :param _builtins.str view_bind_name: Specifies the space name bound to the view.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "enterprise_project_name", enterprise_project_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_view", is_view)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "view_bind_id", view_bind_id)
        pulumi.set(__self__, "view_bind_name", view_bind_name)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the workspace description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> _builtins.str:
        """
        The enterprise project name.
        """
        return pulumi.get(self, "enterprise_project_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The workspace ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isView")
    def is_view(self) -> _builtins.bool:
        """
        Specifies whether to query the view. The value can be **true** or **false**.
        """
        return pulumi.get(self, "is_view")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the workspace name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="viewBindId")
    def view_bind_id(self) -> _builtins.str:
        """
        Specifies the space ID bound to the view.
        """
        return pulumi.get(self, "view_bind_id")

    @_builtins.property
    @pulumi.getter(name="viewBindName")
    def view_bind_name(self) -> _builtins.str:
        """
        Specifies the space name bound to the view.
        """
        return pulumi.get(self, "view_bind_name")


