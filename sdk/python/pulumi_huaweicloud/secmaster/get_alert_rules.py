# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAlertRulesResult',
    'AwaitableGetAlertRulesResult',
    'get_alert_rules',
    'get_alert_rules_output',
]

@pulumi.output_type
class GetAlertRulesResult:
    """
    A collection of values returned by getAlertRules.
    """
    def __init__(__self__, alert_rules=None, id=None, name=None, pipeline_id=None, region=None, rule_id=None, severities=None, statuses=None, workspace_id=None):
        if alert_rules and not isinstance(alert_rules, list):
            raise TypeError("Expected argument 'alert_rules' to be a list")
        pulumi.set(__self__, "alert_rules", alert_rules)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pipeline_id and not isinstance(pipeline_id, str):
            raise TypeError("Expected argument 'pipeline_id' to be a str")
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if severities and not isinstance(severities, list):
            raise TypeError("Expected argument 'severities' to be a list")
        pulumi.set(__self__, "severities", severities)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="alertRules")
    def alert_rules(self) -> Sequence['outputs.GetAlertRulesAlertRuleResult']:
        """
        The alert rules.
        """
        return pulumi.get(self, "alert_rules")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The alert rule name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[_builtins.str]:
        """
        The pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def severities(self) -> Optional[Sequence[_builtins.str]]:
        """
        The severity.
        """
        return pulumi.get(self, "severities")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[_builtins.str]]:
        """
        The status.
        """
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetAlertRulesResult(GetAlertRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlertRulesResult(
            alert_rules=self.alert_rules,
            id=self.id,
            name=self.name,
            pipeline_id=self.pipeline_id,
            region=self.region,
            rule_id=self.rule_id,
            severities=self.severities,
            statuses=self.statuses,
            workspace_id=self.workspace_id)


def get_alert_rules(name: Optional[_builtins.str] = None,
                    pipeline_id: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    rule_id: Optional[_builtins.str] = None,
                    severities: Optional[Sequence[_builtins.str]] = None,
                    statuses: Optional[Sequence[_builtins.str]] = None,
                    workspace_id: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlertRulesResult:
    """
    Use this data source to get the list of SecMaster alert rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    rule_id = config.require_object("ruleId")
    test = huaweicloud.secmaster.get_alert_rules(workspace_id=workspace_id,
        rule_id=rule_id)
    ```


    :param _builtins.str name: Specifies the alert rule name. Fuzzy match is supported.
    :param _builtins.str pipeline_id: Specifies the pipeline ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the alert rule ID.
    :param Sequence[_builtins.str] severities: Specifies the list of the severity.
           The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
    :param Sequence[_builtins.str] statuses: Specifies the list of the status. The value can be **ENABLED** and **DISABLED**.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['pipelineId'] = pipeline_id
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['severities'] = severities
    __args__['statuses'] = statuses
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getAlertRules:getAlertRules', __args__, opts=opts, typ=GetAlertRulesResult).value

    return AwaitableGetAlertRulesResult(
        alert_rules=pulumi.get(__ret__, 'alert_rules'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        pipeline_id=pulumi.get(__ret__, 'pipeline_id'),
        region=pulumi.get(__ret__, 'region'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        severities=pulumi.get(__ret__, 'severities'),
        statuses=pulumi.get(__ret__, 'statuses'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_alert_rules_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           pipeline_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           rule_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           severities: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                           statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                           workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAlertRulesResult]:
    """
    Use this data source to get the list of SecMaster alert rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    rule_id = config.require_object("ruleId")
    test = huaweicloud.secmaster.get_alert_rules(workspace_id=workspace_id,
        rule_id=rule_id)
    ```


    :param _builtins.str name: Specifies the alert rule name. Fuzzy match is supported.
    :param _builtins.str pipeline_id: Specifies the pipeline ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the alert rule ID.
    :param Sequence[_builtins.str] severities: Specifies the list of the severity.
           The value can be **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
    :param Sequence[_builtins.str] statuses: Specifies the list of the status. The value can be **ENABLED** and **DISABLED**.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['pipelineId'] = pipeline_id
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['severities'] = severities
    __args__['statuses'] = statuses
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getAlertRules:getAlertRules', __args__, opts=opts, typ=GetAlertRulesResult)
    return __ret__.apply(lambda __response__: GetAlertRulesResult(
        alert_rules=pulumi.get(__response__, 'alert_rules'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        pipeline_id=pulumi.get(__response__, 'pipeline_id'),
        region=pulumi.get(__response__, 'region'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        severities=pulumi.get(__response__, 'severities'),
        statuses=pulumi.get(__response__, 'statuses'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
