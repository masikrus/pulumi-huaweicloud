# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlertRuleSimulationArgs', 'AlertRuleSimulation']

@pulumi.input_type
class AlertRuleSimulationArgs:
    def __init__(__self__, *,
                 from_time: pulumi.Input[_builtins.str],
                 pipeline_id: pulumi.Input[_builtins.str],
                 query_rule: pulumi.Input[_builtins.str],
                 query_type: pulumi.Input[_builtins.str],
                 to_time: pulumi.Input[_builtins.str],
                 triggers: pulumi.Input[Sequence[pulumi.Input['AlertRuleSimulationTriggerArgs']]],
                 workspace_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 event_grouping: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AlertRuleSimulation resource.
        :param pulumi.Input[_builtins.str] from_time: Specifies the start time of the alert rule simulation.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID of the alert rule.
        :param pulumi.Input[_builtins.str] query_rule: Specifies the query rule of the alert rule.
        :param pulumi.Input[_builtins.str] query_type: Specifies the query type of the alert rule.
               The value can be: **SQL**.
        :param pulumi.Input[_builtins.str] to_time: Specifies the end time of the alert rule simulation.
        :param pulumi.Input[Sequence[pulumi.Input['AlertRuleSimulationTriggerArgs']]] triggers: Specifies the triggers of the alert rule.
               The triggers structure is documented below.
               
               <a name="triggers"></a>
               The `triggers` block supports:
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the alert rule belongs.
        :param pulumi.Input[_builtins.bool] event_grouping: Specifies whether to put events in a group.
               The value can be:
               + **true**: one alarm for all query results;
               + **false**: one alarm for each query result;
               
               Default to **true**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "from_time", from_time)
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "query_rule", query_rule)
        pulumi.set(__self__, "query_type", query_type)
        pulumi.set(__self__, "to_time", to_time)
        pulumi.set(__self__, "triggers", triggers)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if event_grouping is not None:
            pulumi.set(__self__, "event_grouping", event_grouping)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="fromTime")
    def from_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the start time of the alert rule simulation.
        """
        return pulumi.get(self, "from_time")

    @from_time.setter
    def from_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "from_time", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the pipeline ID of the alert rule.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter(name="queryRule")
    def query_rule(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the query rule of the alert rule.
        """
        return pulumi.get(self, "query_rule")

    @query_rule.setter
    def query_rule(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "query_rule", value)

    @_builtins.property
    @pulumi.getter(name="queryType")
    def query_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the query type of the alert rule.
        The value can be: **SQL**.
        """
        return pulumi.get(self, "query_type")

    @query_type.setter
    def query_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "query_type", value)

    @_builtins.property
    @pulumi.getter(name="toTime")
    def to_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the end time of the alert rule simulation.
        """
        return pulumi.get(self, "to_time")

    @to_time.setter
    def to_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "to_time", value)

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> pulumi.Input[Sequence[pulumi.Input['AlertRuleSimulationTriggerArgs']]]:
        """
        Specifies the triggers of the alert rule.
        The triggers structure is documented below.

        <a name="triggers"></a>
        The `triggers` block supports:
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: pulumi.Input[Sequence[pulumi.Input['AlertRuleSimulationTriggerArgs']]]):
        pulumi.set(self, "triggers", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workspace to which the alert rule belongs.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="eventGrouping")
    def event_grouping(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to put events in a group.
        The value can be:
        + **true**: one alarm for all query results;
        + **false**: one alarm for each query result;

        Default to **true**.
        """
        return pulumi.get(self, "event_grouping")

    @event_grouping.setter
    def event_grouping(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "event_grouping", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AlertRuleSimulationState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 event_grouping: Optional[pulumi.Input[_builtins.bool]] = None,
                 from_time: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 query_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 query_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 to_time: Optional[pulumi.Input[_builtins.str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleSimulationTriggerArgs']]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AlertRuleSimulation resources.
        :param pulumi.Input[_builtins.bool] event_grouping: Specifies whether to put events in a group.
               The value can be:
               + **true**: one alarm for all query results;
               + **false**: one alarm for each query result;
               
               Default to **true**.
        :param pulumi.Input[_builtins.str] from_time: Specifies the start time of the alert rule simulation.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID of the alert rule.
        :param pulumi.Input[_builtins.str] query_rule: Specifies the query rule of the alert rule.
        :param pulumi.Input[_builtins.str] query_type: Specifies the query type of the alert rule.
               The value can be: **SQL**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] to_time: Specifies the end time of the alert rule simulation.
        :param pulumi.Input[Sequence[pulumi.Input['AlertRuleSimulationTriggerArgs']]] triggers: Specifies the triggers of the alert rule.
               The triggers structure is documented below.
               
               <a name="triggers"></a>
               The `triggers` block supports:
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the alert rule belongs.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if event_grouping is not None:
            pulumi.set(__self__, "event_grouping", event_grouping)
        if from_time is not None:
            pulumi.set(__self__, "from_time", from_time)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if query_rule is not None:
            pulumi.set(__self__, "query_rule", query_rule)
        if query_type is not None:
            pulumi.set(__self__, "query_type", query_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if to_time is not None:
            pulumi.set(__self__, "to_time", to_time)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="eventGrouping")
    def event_grouping(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to put events in a group.
        The value can be:
        + **true**: one alarm for all query results;
        + **false**: one alarm for each query result;

        Default to **true**.
        """
        return pulumi.get(self, "event_grouping")

    @event_grouping.setter
    def event_grouping(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "event_grouping", value)

    @_builtins.property
    @pulumi.getter(name="fromTime")
    def from_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the start time of the alert rule simulation.
        """
        return pulumi.get(self, "from_time")

    @from_time.setter
    def from_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "from_time", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline ID of the alert rule.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter(name="queryRule")
    def query_rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the query rule of the alert rule.
        """
        return pulumi.get(self, "query_rule")

    @query_rule.setter
    def query_rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "query_rule", value)

    @_builtins.property
    @pulumi.getter(name="queryType")
    def query_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the query type of the alert rule.
        The value can be: **SQL**.
        """
        return pulumi.get(self, "query_type")

    @query_type.setter
    def query_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "query_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="toTime")
    def to_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the end time of the alert rule simulation.
        """
        return pulumi.get(self, "to_time")

    @to_time.setter
    def to_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "to_time", value)

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleSimulationTriggerArgs']]]]:
        """
        Specifies the triggers of the alert rule.
        The triggers structure is documented below.

        <a name="triggers"></a>
        The `triggers` block supports:
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleSimulationTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workspace to which the alert rule belongs.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:secmaster/alertRuleSimulation:AlertRuleSimulation")
class AlertRuleSimulation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 event_grouping: Optional[pulumi.Input[_builtins.bool]] = None,
                 from_time: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 query_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 query_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 to_time: Optional[pulumi.Input[_builtins.str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlertRuleSimulationTriggerArgs', 'AlertRuleSimulationTriggerArgsDict']]]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SecMaster alert rule simulation resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        pipeline_id = config.require_object("pipelineId")
        query_rule = config.require_object("queryRule")
        test = huaweicloud.secmaster.AlertRuleSimulation("test",
            workspace_id=workspace_id,
            pipeline_id=pipeline_id,
            query_rule=query_rule,
            query_type="SQL",
            from_time="2025-01-16 19:04:05",
            to_time="2025-01-16 19:06:05",
            event_grouping=False,
            triggers=[{
                "mode": "COUNT",
                "operator": "GT",
                "expression": "5",
                "severity": "MEDIUM",
                "accumulated_times": 1,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] event_grouping: Specifies whether to put events in a group.
               The value can be:
               + **true**: one alarm for all query results;
               + **false**: one alarm for each query result;
               
               Default to **true**.
        :param pulumi.Input[_builtins.str] from_time: Specifies the start time of the alert rule simulation.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID of the alert rule.
        :param pulumi.Input[_builtins.str] query_rule: Specifies the query rule of the alert rule.
        :param pulumi.Input[_builtins.str] query_type: Specifies the query type of the alert rule.
               The value can be: **SQL**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] to_time: Specifies the end time of the alert rule simulation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AlertRuleSimulationTriggerArgs', 'AlertRuleSimulationTriggerArgsDict']]]] triggers: Specifies the triggers of the alert rule.
               The triggers structure is documented below.
               
               <a name="triggers"></a>
               The `triggers` block supports:
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the alert rule belongs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlertRuleSimulationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SecMaster alert rule simulation resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        pipeline_id = config.require_object("pipelineId")
        query_rule = config.require_object("queryRule")
        test = huaweicloud.secmaster.AlertRuleSimulation("test",
            workspace_id=workspace_id,
            pipeline_id=pipeline_id,
            query_rule=query_rule,
            query_type="SQL",
            from_time="2025-01-16 19:04:05",
            to_time="2025-01-16 19:06:05",
            event_grouping=False,
            triggers=[{
                "mode": "COUNT",
                "operator": "GT",
                "expression": "5",
                "severity": "MEDIUM",
                "accumulated_times": 1,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param AlertRuleSimulationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlertRuleSimulationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 event_grouping: Optional[pulumi.Input[_builtins.bool]] = None,
                 from_time: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 query_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 query_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 to_time: Optional[pulumi.Input[_builtins.str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlertRuleSimulationTriggerArgs', 'AlertRuleSimulationTriggerArgsDict']]]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlertRuleSimulationArgs.__new__(AlertRuleSimulationArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["event_grouping"] = event_grouping
            if from_time is None and not opts.urn:
                raise TypeError("Missing required property 'from_time'")
            __props__.__dict__["from_time"] = from_time
            if pipeline_id is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_id'")
            __props__.__dict__["pipeline_id"] = pipeline_id
            if query_rule is None and not opts.urn:
                raise TypeError("Missing required property 'query_rule'")
            __props__.__dict__["query_rule"] = query_rule
            if query_type is None and not opts.urn:
                raise TypeError("Missing required property 'query_type'")
            __props__.__dict__["query_type"] = query_type
            __props__.__dict__["region"] = region
            if to_time is None and not opts.urn:
                raise TypeError("Missing required property 'to_time'")
            __props__.__dict__["to_time"] = to_time
            if triggers is None and not opts.urn:
                raise TypeError("Missing required property 'triggers'")
            __props__.__dict__["triggers"] = triggers
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
        super(AlertRuleSimulation, __self__).__init__(
            'huaweicloud:secmaster/alertRuleSimulation:AlertRuleSimulation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            event_grouping: Optional[pulumi.Input[_builtins.bool]] = None,
            from_time: Optional[pulumi.Input[_builtins.str]] = None,
            pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
            query_rule: Optional[pulumi.Input[_builtins.str]] = None,
            query_type: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            to_time: Optional[pulumi.Input[_builtins.str]] = None,
            triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlertRuleSimulationTriggerArgs', 'AlertRuleSimulationTriggerArgsDict']]]]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AlertRuleSimulation':
        """
        Get an existing AlertRuleSimulation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] event_grouping: Specifies whether to put events in a group.
               The value can be:
               + **true**: one alarm for all query results;
               + **false**: one alarm for each query result;
               
               Default to **true**.
        :param pulumi.Input[_builtins.str] from_time: Specifies the start time of the alert rule simulation.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID of the alert rule.
        :param pulumi.Input[_builtins.str] query_rule: Specifies the query rule of the alert rule.
        :param pulumi.Input[_builtins.str] query_type: Specifies the query type of the alert rule.
               The value can be: **SQL**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] to_time: Specifies the end time of the alert rule simulation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AlertRuleSimulationTriggerArgs', 'AlertRuleSimulationTriggerArgsDict']]]] triggers: Specifies the triggers of the alert rule.
               The triggers structure is documented below.
               
               <a name="triggers"></a>
               The `triggers` block supports:
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the alert rule belongs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlertRuleSimulationState.__new__(_AlertRuleSimulationState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["event_grouping"] = event_grouping
        __props__.__dict__["from_time"] = from_time
        __props__.__dict__["pipeline_id"] = pipeline_id
        __props__.__dict__["query_rule"] = query_rule
        __props__.__dict__["query_type"] = query_type
        __props__.__dict__["region"] = region
        __props__.__dict__["to_time"] = to_time
        __props__.__dict__["triggers"] = triggers
        __props__.__dict__["workspace_id"] = workspace_id
        return AlertRuleSimulation(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="eventGrouping")
    def event_grouping(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to put events in a group.
        The value can be:
        + **true**: one alarm for all query results;
        + **false**: one alarm for each query result;

        Default to **true**.
        """
        return pulumi.get(self, "event_grouping")

    @_builtins.property
    @pulumi.getter(name="fromTime")
    def from_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the start time of the alert rule simulation.
        """
        return pulumi.get(self, "from_time")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the pipeline ID of the alert rule.
        """
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter(name="queryRule")
    def query_rule(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the query rule of the alert rule.
        """
        return pulumi.get(self, "query_rule")

    @_builtins.property
    @pulumi.getter(name="queryType")
    def query_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the query type of the alert rule.
        The value can be: **SQL**.
        """
        return pulumi.get(self, "query_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="toTime")
    def to_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the end time of the alert rule simulation.
        """
        return pulumi.get(self, "to_time")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Sequence['outputs.AlertRuleSimulationTrigger']]:
        """
        Specifies the triggers of the alert rule.
        The triggers structure is documented below.

        <a name="triggers"></a>
        The `triggers` block supports:
        """
        return pulumi.get(self, "triggers")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workspace to which the alert rule belongs.
        """
        return pulumi.get(self, "workspace_id")

