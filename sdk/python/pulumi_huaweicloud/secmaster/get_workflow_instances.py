# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetWorkflowInstancesResult',
    'AwaitableGetWorkflowInstancesResult',
    'get_workflow_instances',
    'get_workflow_instances_output',
]

@pulumi.output_type
class GetWorkflowInstancesResult:
    """
    A collection of values returned by getWorkflowInstances.
    """
    def __init__(__self__, dataclass_id=None, defence_id=None, from_date=None, id=None, instances=None, name=None, playbook_id=None, region=None, sort_dir=None, sort_key=None, status=None, to_date=None, trigger_type=None, workflow_id=None, workspace_id=None):
        if dataclass_id and not isinstance(dataclass_id, str):
            raise TypeError("Expected argument 'dataclass_id' to be a str")
        pulumi.set(__self__, "dataclass_id", dataclass_id)
        if defence_id and not isinstance(defence_id, str):
            raise TypeError("Expected argument 'defence_id' to be a str")
        pulumi.set(__self__, "defence_id", defence_id)
        if from_date and not isinstance(from_date, str):
            raise TypeError("Expected argument 'from_date' to be a str")
        pulumi.set(__self__, "from_date", from_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if playbook_id and not isinstance(playbook_id, str):
            raise TypeError("Expected argument 'playbook_id' to be a str")
        pulumi.set(__self__, "playbook_id", playbook_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if to_date and not isinstance(to_date, str):
            raise TypeError("Expected argument 'to_date' to be a str")
        pulumi.set(__self__, "to_date", to_date)
        if trigger_type and not isinstance(trigger_type, str):
            raise TypeError("Expected argument 'trigger_type' to be a str")
        pulumi.set(__self__, "trigger_type", trigger_type)
        if workflow_id and not isinstance(workflow_id, str):
            raise TypeError("Expected argument 'workflow_id' to be a str")
        pulumi.set(__self__, "workflow_id", workflow_id)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="dataclassId")
    def dataclass_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dataclass_id")

    @_builtins.property
    @pulumi.getter(name="defenceId")
    def defence_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "defence_id")

    @_builtins.property
    @pulumi.getter(name="fromDate")
    def from_date(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "from_date")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The playbook ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetWorkflowInstancesInstanceResult']:
        """
        The list of the workflow instances.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The playbook name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="playbookId")
    def playbook_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "playbook_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The workflow instance status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="toDate")
    def to_date(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "to_date")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[_builtins.str]:
        """
        The workflow trigger mode.
        """
        return pulumi.get(self, "trigger_type")

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "workflow_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetWorkflowInstancesResult(GetWorkflowInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkflowInstancesResult(
            dataclass_id=self.dataclass_id,
            defence_id=self.defence_id,
            from_date=self.from_date,
            id=self.id,
            instances=self.instances,
            name=self.name,
            playbook_id=self.playbook_id,
            region=self.region,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            status=self.status,
            to_date=self.to_date,
            trigger_type=self.trigger_type,
            workflow_id=self.workflow_id,
            workspace_id=self.workspace_id)


def get_workflow_instances(dataclass_id: Optional[_builtins.str] = None,
                           defence_id: Optional[_builtins.str] = None,
                           from_date: Optional[_builtins.str] = None,
                           id: Optional[_builtins.str] = None,
                           name: Optional[_builtins.str] = None,
                           playbook_id: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           sort_dir: Optional[_builtins.str] = None,
                           sort_key: Optional[_builtins.str] = None,
                           status: Optional[_builtins.str] = None,
                           to_date: Optional[_builtins.str] = None,
                           trigger_type: Optional[_builtins.str] = None,
                           workflow_id: Optional[_builtins.str] = None,
                           workspace_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkflowInstancesResult:
    """
    Use this data source to get the list of SecMaster workflow instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.secmaster.get_workflow_instances(workspace_id=workspace_id)
    ```


    :param _builtins.str dataclass_id: Specifies the data class ID.
    :param _builtins.str defence_id: Specifies the defence ID.
    :param _builtins.str from_date: Specifies the search start time.
           The time is RFC3339 format. e.g. **2024-08-27T11:00:00.000Z+0800**.
    :param _builtins.str id: Specifies the workflow instance ID.
    :param _builtins.str name: Specifies the workflow instance name.
    :param _builtins.str playbook_id: Specifies the playbook ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies sorting order.
           The valid values are as follows:
           + **ASC**: Ascending order.
           + **DESC**: Descending order.
    :param _builtins.str sort_key: Specifies sorting field.
           The value can be **start_time** or **end_time**.
    :param _builtins.str status: Specifies the workflow status.
           The valid values are as follows:
           + **CREATED**
           + **RUNNING**
           + **FINISHED**
           + **RETRYING**
           + **TERMINATING**
           + **TERMINATED**
           + **FAILED**
    :param _builtins.str to_date: Specifies the search end time.
           The time is RFC3339 format. e.g. **2024-08-27T11:00:00.000Z+0800**.
    :param _builtins.str trigger_type: Specifies the workflow trigger mode.
           The valid values are as follows:
           + **TIMER**: Indicates scheduled triggering.
           + **EVENT**: Indicates event triggering.
    :param _builtins.str workflow_id: Specifies the workflow ID.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['dataclassId'] = dataclass_id
    __args__['defenceId'] = defence_id
    __args__['fromDate'] = from_date
    __args__['id'] = id
    __args__['name'] = name
    __args__['playbookId'] = playbook_id
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['status'] = status
    __args__['toDate'] = to_date
    __args__['triggerType'] = trigger_type
    __args__['workflowId'] = workflow_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getWorkflowInstances:getWorkflowInstances', __args__, opts=opts, typ=GetWorkflowInstancesResult).value

    return AwaitableGetWorkflowInstancesResult(
        dataclass_id=pulumi.get(__ret__, 'dataclass_id'),
        defence_id=pulumi.get(__ret__, 'defence_id'),
        from_date=pulumi.get(__ret__, 'from_date'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        name=pulumi.get(__ret__, 'name'),
        playbook_id=pulumi.get(__ret__, 'playbook_id'),
        region=pulumi.get(__ret__, 'region'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        status=pulumi.get(__ret__, 'status'),
        to_date=pulumi.get(__ret__, 'to_date'),
        trigger_type=pulumi.get(__ret__, 'trigger_type'),
        workflow_id=pulumi.get(__ret__, 'workflow_id'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_workflow_instances_output(dataclass_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  defence_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  from_date: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  playbook_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  to_date: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  trigger_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  workflow_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkflowInstancesResult]:
    """
    Use this data source to get the list of SecMaster workflow instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.secmaster.get_workflow_instances(workspace_id=workspace_id)
    ```


    :param _builtins.str dataclass_id: Specifies the data class ID.
    :param _builtins.str defence_id: Specifies the defence ID.
    :param _builtins.str from_date: Specifies the search start time.
           The time is RFC3339 format. e.g. **2024-08-27T11:00:00.000Z+0800**.
    :param _builtins.str id: Specifies the workflow instance ID.
    :param _builtins.str name: Specifies the workflow instance name.
    :param _builtins.str playbook_id: Specifies the playbook ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies sorting order.
           The valid values are as follows:
           + **ASC**: Ascending order.
           + **DESC**: Descending order.
    :param _builtins.str sort_key: Specifies sorting field.
           The value can be **start_time** or **end_time**.
    :param _builtins.str status: Specifies the workflow status.
           The valid values are as follows:
           + **CREATED**
           + **RUNNING**
           + **FINISHED**
           + **RETRYING**
           + **TERMINATING**
           + **TERMINATED**
           + **FAILED**
    :param _builtins.str to_date: Specifies the search end time.
           The time is RFC3339 format. e.g. **2024-08-27T11:00:00.000Z+0800**.
    :param _builtins.str trigger_type: Specifies the workflow trigger mode.
           The valid values are as follows:
           + **TIMER**: Indicates scheduled triggering.
           + **EVENT**: Indicates event triggering.
    :param _builtins.str workflow_id: Specifies the workflow ID.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['dataclassId'] = dataclass_id
    __args__['defenceId'] = defence_id
    __args__['fromDate'] = from_date
    __args__['id'] = id
    __args__['name'] = name
    __args__['playbookId'] = playbook_id
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['status'] = status
    __args__['toDate'] = to_date
    __args__['triggerType'] = trigger_type
    __args__['workflowId'] = workflow_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getWorkflowInstances:getWorkflowInstances', __args__, opts=opts, typ=GetWorkflowInstancesResult)
    return __ret__.apply(lambda __response__: GetWorkflowInstancesResult(
        dataclass_id=pulumi.get(__response__, 'dataclass_id'),
        defence_id=pulumi.get(__response__, 'defence_id'),
        from_date=pulumi.get(__response__, 'from_date'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        name=pulumi.get(__response__, 'name'),
        playbook_id=pulumi.get(__response__, 'playbook_id'),
        region=pulumi.get(__response__, 'region'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        status=pulumi.get(__response__, 'status'),
        to_date=pulumi.get(__response__, 'to_date'),
        trigger_type=pulumi.get(__response__, 'trigger_type'),
        workflow_id=pulumi.get(__response__, 'workflow_id'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
