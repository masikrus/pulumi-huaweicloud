# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlertRuleArgs', 'AlertRule']

@pulumi.input_type
class AlertRuleArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[_builtins.str],
                 pipeline_id: pulumi.Input[_builtins.str],
                 query_plan: pulumi.Input['AlertRuleQueryPlanArgs'],
                 query_rule: pulumi.Input[_builtins.str],
                 query_type: pulumi.Input[_builtins.str],
                 severity: pulumi.Input[_builtins.str],
                 status: pulumi.Input[_builtins.str],
                 triggers: pulumi.Input[Sequence[pulumi.Input['AlertRuleTriggerArgs']]],
                 type: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]],
                 workspace_id: pulumi.Input[_builtins.str],
                 custom_information: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 debugging_alarm: Optional[pulumi.Input[_builtins.bool]] = None,
                 event_grouping: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 suppression: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a AlertRule resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the alert rule.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID of the alert rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input['AlertRuleQueryPlanArgs'] query_plan: Specifies the query plan of the alert rule.
               The query_plan structure is documented below.
        :param pulumi.Input[_builtins.str] query_rule: Specifies the query rule of the alert rule.
        :param pulumi.Input[_builtins.str] query_type: Specifies the query type of the alert rule.
               The value can be: **SQL**.
        :param pulumi.Input[_builtins.str] severity: Specifies the severity of the trigger.
               The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the alert rule.
               The value can be **ENABLED** and **DISABLED**. Defaults to **ENABLED**.
        :param pulumi.Input[Sequence[pulumi.Input['AlertRuleTriggerArgs']]] triggers: Specifies the triggers of the alert rule.
               The triggers structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] type: Specifies the type of the alert rule.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the alert rule belongs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] custom_information: Specifies the custom information of the alert rule.
        :param pulumi.Input[_builtins.bool] debugging_alarm: Specifies whether to generate debugging alarms.
               Defaults to **true**.
        :param pulumi.Input[_builtins.bool] event_grouping: Specifies whether to put events in a group.
               The value can be:
               + **true**: one alarm for all query results;
               + **false**: one alarm for each query result;
               
               Default to **true**.
        :param pulumi.Input[_builtins.str] name: Specifies the alert rule name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] suppression: Specifies whether to stop the query when an alarm is generated.
               
               <a name="query_plan"></a>
               The `query_plan` block supports:
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "query_plan", query_plan)
        pulumi.set(__self__, "query_rule", query_rule)
        pulumi.set(__self__, "query_type", query_type)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "triggers", triggers)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if custom_information is not None:
            pulumi.set(__self__, "custom_information", custom_information)
        if debugging_alarm is not None:
            pulumi.set(__self__, "debugging_alarm", debugging_alarm)
        if event_grouping is not None:
            pulumi.set(__self__, "event_grouping", event_grouping)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if suppression is not None:
            pulumi.set(__self__, "suppression", suppression)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the description of the alert rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the pipeline ID of the alert rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter(name="queryPlan")
    def query_plan(self) -> pulumi.Input['AlertRuleQueryPlanArgs']:
        """
        Specifies the query plan of the alert rule.
        The query_plan structure is documented below.
        """
        return pulumi.get(self, "query_plan")

    @query_plan.setter
    def query_plan(self, value: pulumi.Input['AlertRuleQueryPlanArgs']):
        pulumi.set(self, "query_plan", value)

    @_builtins.property
    @pulumi.getter(name="queryRule")
    def query_rule(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the query rule of the alert rule.
        """
        return pulumi.get(self, "query_rule")

    @query_rule.setter
    def query_rule(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "query_rule", value)

    @_builtins.property
    @pulumi.getter(name="queryType")
    def query_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the query type of the alert rule.
        The value can be: **SQL**.
        """
        return pulumi.get(self, "query_type")

    @query_type.setter
    def query_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "query_type", value)

    @_builtins.property
    @pulumi.getter
    def severity(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the severity of the trigger.
        The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "severity", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the status of the alert rule.
        The value can be **ENABLED** and **DISABLED**. Defaults to **ENABLED**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> pulumi.Input[Sequence[pulumi.Input['AlertRuleTriggerArgs']]]:
        """
        Specifies the triggers of the alert rule.
        The triggers structure is documented below.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: pulumi.Input[Sequence[pulumi.Input['AlertRuleTriggerArgs']]]):
        pulumi.set(self, "triggers", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]:
        """
        Specifies the type of the alert rule.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workspace to which the alert rule belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="customInformation")
    def custom_information(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the custom information of the alert rule.
        """
        return pulumi.get(self, "custom_information")

    @custom_information.setter
    def custom_information(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_information", value)

    @_builtins.property
    @pulumi.getter(name="debuggingAlarm")
    def debugging_alarm(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to generate debugging alarms.
        Defaults to **true**.
        """
        return pulumi.get(self, "debugging_alarm")

    @debugging_alarm.setter
    def debugging_alarm(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "debugging_alarm", value)

    @_builtins.property
    @pulumi.getter(name="eventGrouping")
    def event_grouping(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to put events in a group.
        The value can be:
        + **true**: one alarm for all query results;
        + **false**: one alarm for each query result;

        Default to **true**.
        """
        return pulumi.get(self, "event_grouping")

    @event_grouping.setter
    def event_grouping(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "event_grouping", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alert rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def suppression(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to stop the query when an alarm is generated.

        <a name="query_plan"></a>
        The `query_plan` block supports:
        """
        return pulumi.get(self, "suppression")

    @suppression.setter
    def suppression(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "suppression", value)


@pulumi.input_type
class _AlertRuleState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_information: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 debugging_alarm: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 event_grouping: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 query_plan: Optional[pulumi.Input['AlertRuleQueryPlanArgs']] = None,
                 query_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 query_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 severity: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 suppression: Optional[pulumi.Input[_builtins.bool]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleTriggerArgs']]]] = None,
                 type: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AlertRule resources.
        :param pulumi.Input[_builtins.str] created_at: The created time.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] custom_information: Specifies the custom information of the alert rule.
        :param pulumi.Input[_builtins.bool] debugging_alarm: Specifies whether to generate debugging alarms.
               Defaults to **true**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the alert rule.
        :param pulumi.Input[_builtins.bool] event_grouping: Specifies whether to put events in a group.
               The value can be:
               + **true**: one alarm for all query results;
               + **false**: one alarm for each query result;
               
               Default to **true**.
        :param pulumi.Input[_builtins.str] name: Specifies the alert rule name.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID of the alert rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input['AlertRuleQueryPlanArgs'] query_plan: Specifies the query plan of the alert rule.
               The query_plan structure is documented below.
        :param pulumi.Input[_builtins.str] query_rule: Specifies the query rule of the alert rule.
        :param pulumi.Input[_builtins.str] query_type: Specifies the query type of the alert rule.
               The value can be: **SQL**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] severity: Specifies the severity of the trigger.
               The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the alert rule.
               The value can be **ENABLED** and **DISABLED**. Defaults to **ENABLED**.
        :param pulumi.Input[_builtins.bool] suppression: Specifies whether to stop the query when an alarm is generated.
               
               <a name="query_plan"></a>
               The `query_plan` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['AlertRuleTriggerArgs']]] triggers: Specifies the triggers of the alert rule.
               The triggers structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] type: Specifies the type of the alert rule.
        :param pulumi.Input[_builtins.str] updated_at: The updated time.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the alert rule belongs.
               
               Changing this parameter will create a new resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if custom_information is not None:
            pulumi.set(__self__, "custom_information", custom_information)
        if debugging_alarm is not None:
            pulumi.set(__self__, "debugging_alarm", debugging_alarm)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if event_grouping is not None:
            pulumi.set(__self__, "event_grouping", event_grouping)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if query_plan is not None:
            pulumi.set(__self__, "query_plan", query_plan)
        if query_rule is not None:
            pulumi.set(__self__, "query_rule", query_rule)
        if query_type is not None:
            pulumi.set(__self__, "query_type", query_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if suppression is not None:
            pulumi.set(__self__, "suppression", suppression)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The created time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="customInformation")
    def custom_information(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the custom information of the alert rule.
        """
        return pulumi.get(self, "custom_information")

    @custom_information.setter
    def custom_information(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_information", value)

    @_builtins.property
    @pulumi.getter(name="debuggingAlarm")
    def debugging_alarm(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to generate debugging alarms.
        Defaults to **true**.
        """
        return pulumi.get(self, "debugging_alarm")

    @debugging_alarm.setter
    def debugging_alarm(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "debugging_alarm", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the alert rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="eventGrouping")
    def event_grouping(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to put events in a group.
        The value can be:
        + **true**: one alarm for all query results;
        + **false**: one alarm for each query result;

        Default to **true**.
        """
        return pulumi.get(self, "event_grouping")

    @event_grouping.setter
    def event_grouping(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "event_grouping", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alert rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline ID of the alert rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter(name="queryPlan")
    def query_plan(self) -> Optional[pulumi.Input['AlertRuleQueryPlanArgs']]:
        """
        Specifies the query plan of the alert rule.
        The query_plan structure is documented below.
        """
        return pulumi.get(self, "query_plan")

    @query_plan.setter
    def query_plan(self, value: Optional[pulumi.Input['AlertRuleQueryPlanArgs']]):
        pulumi.set(self, "query_plan", value)

    @_builtins.property
    @pulumi.getter(name="queryRule")
    def query_rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the query rule of the alert rule.
        """
        return pulumi.get(self, "query_rule")

    @query_rule.setter
    def query_rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "query_rule", value)

    @_builtins.property
    @pulumi.getter(name="queryType")
    def query_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the query type of the alert rule.
        The value can be: **SQL**.
        """
        return pulumi.get(self, "query_type")

    @query_type.setter
    def query_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "query_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the severity of the trigger.
        The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "severity", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the status of the alert rule.
        The value can be **ENABLED** and **DISABLED**. Defaults to **ENABLED**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def suppression(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to stop the query when an alarm is generated.

        <a name="query_plan"></a>
        The `query_plan` block supports:
        """
        return pulumi.get(self, "suppression")

    @suppression.setter
    def suppression(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "suppression", value)

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleTriggerArgs']]]]:
        """
        Specifies the triggers of the alert rule.
        The triggers structure is documented below.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the type of the alert rule.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The updated time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workspace to which the alert rule belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:secmaster/alertRule:AlertRule")
class AlertRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_information: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 debugging_alarm: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 event_grouping: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 query_plan: Optional[pulumi.Input[Union['AlertRuleQueryPlanArgs', 'AlertRuleQueryPlanArgsDict']]] = None,
                 query_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 query_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 severity: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 suppression: Optional[pulumi.Input[_builtins.bool]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlertRuleTriggerArgs', 'AlertRuleTriggerArgsDict']]]]] = None,
                 type: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SecMaster alert rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        pipeline_id = config.require_object("pipelineId")
        test = huaweicloud.secmaster.AlertRule("test",
            workspace_id=workspace_id,
            pipeline_id=pipeline_id,
            name="test",
            description="this is a test rule created by terraform",
            status="ENABLED",
            severity="TIPS",
            type={
                "name": "DNS protocol attacks",
                "category": "DDoS attacks",
            },
            triggers=[{
                "mode": "COUNT",
                "operator": "GT",
                "expression": "5",
                "severity": "MEDIUM",
                "accumulated_times": 1,
            }],
            query_rule="* | select status, count(*) as count group by status",
            query_type="SQL",
            query_plan={
                "query_interval": 1,
                "query_interval_unit": "HOUR",
                "time_window": 1,
                "time_window_unit": "HOUR",
            })
        ```

        ## Import

        The alert rule can be imported using theworkspace ID and the alert rule, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/alertRule:AlertRule test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] custom_information: Specifies the custom information of the alert rule.
        :param pulumi.Input[_builtins.bool] debugging_alarm: Specifies whether to generate debugging alarms.
               Defaults to **true**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the alert rule.
        :param pulumi.Input[_builtins.bool] event_grouping: Specifies whether to put events in a group.
               The value can be:
               + **true**: one alarm for all query results;
               + **false**: one alarm for each query result;
               
               Default to **true**.
        :param pulumi.Input[_builtins.str] name: Specifies the alert rule name.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID of the alert rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['AlertRuleQueryPlanArgs', 'AlertRuleQueryPlanArgsDict']] query_plan: Specifies the query plan of the alert rule.
               The query_plan structure is documented below.
        :param pulumi.Input[_builtins.str] query_rule: Specifies the query rule of the alert rule.
        :param pulumi.Input[_builtins.str] query_type: Specifies the query type of the alert rule.
               The value can be: **SQL**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] severity: Specifies the severity of the trigger.
               The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the alert rule.
               The value can be **ENABLED** and **DISABLED**. Defaults to **ENABLED**.
        :param pulumi.Input[_builtins.bool] suppression: Specifies whether to stop the query when an alarm is generated.
               
               <a name="query_plan"></a>
               The `query_plan` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['AlertRuleTriggerArgs', 'AlertRuleTriggerArgsDict']]]] triggers: Specifies the triggers of the alert rule.
               The triggers structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] type: Specifies the type of the alert rule.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the alert rule belongs.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlertRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SecMaster alert rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        pipeline_id = config.require_object("pipelineId")
        test = huaweicloud.secmaster.AlertRule("test",
            workspace_id=workspace_id,
            pipeline_id=pipeline_id,
            name="test",
            description="this is a test rule created by terraform",
            status="ENABLED",
            severity="TIPS",
            type={
                "name": "DNS protocol attacks",
                "category": "DDoS attacks",
            },
            triggers=[{
                "mode": "COUNT",
                "operator": "GT",
                "expression": "5",
                "severity": "MEDIUM",
                "accumulated_times": 1,
            }],
            query_rule="* | select status, count(*) as count group by status",
            query_type="SQL",
            query_plan={
                "query_interval": 1,
                "query_interval_unit": "HOUR",
                "time_window": 1,
                "time_window_unit": "HOUR",
            })
        ```

        ## Import

        The alert rule can be imported using theworkspace ID and the alert rule, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/alertRule:AlertRule test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param AlertRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlertRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_information: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 debugging_alarm: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 event_grouping: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 query_plan: Optional[pulumi.Input[Union['AlertRuleQueryPlanArgs', 'AlertRuleQueryPlanArgsDict']]] = None,
                 query_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 query_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 severity: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 suppression: Optional[pulumi.Input[_builtins.bool]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlertRuleTriggerArgs', 'AlertRuleTriggerArgsDict']]]]] = None,
                 type: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlertRuleArgs.__new__(AlertRuleArgs)

            __props__.__dict__["custom_information"] = custom_information
            __props__.__dict__["debugging_alarm"] = debugging_alarm
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["event_grouping"] = event_grouping
            __props__.__dict__["name"] = name
            if pipeline_id is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_id'")
            __props__.__dict__["pipeline_id"] = pipeline_id
            if query_plan is None and not opts.urn:
                raise TypeError("Missing required property 'query_plan'")
            __props__.__dict__["query_plan"] = query_plan
            if query_rule is None and not opts.urn:
                raise TypeError("Missing required property 'query_rule'")
            __props__.__dict__["query_rule"] = query_rule
            if query_type is None and not opts.urn:
                raise TypeError("Missing required property 'query_type'")
            __props__.__dict__["query_type"] = query_type
            __props__.__dict__["region"] = region
            if severity is None and not opts.urn:
                raise TypeError("Missing required property 'severity'")
            __props__.__dict__["severity"] = severity
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["suppression"] = suppression
            if triggers is None and not opts.urn:
                raise TypeError("Missing required property 'triggers'")
            __props__.__dict__["triggers"] = triggers
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(AlertRule, __self__).__init__(
            'huaweicloud:secmaster/alertRule:AlertRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            custom_information: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            debugging_alarm: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            event_grouping: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
            query_plan: Optional[pulumi.Input[Union['AlertRuleQueryPlanArgs', 'AlertRuleQueryPlanArgsDict']]] = None,
            query_rule: Optional[pulumi.Input[_builtins.str]] = None,
            query_type: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            severity: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            suppression: Optional[pulumi.Input[_builtins.bool]] = None,
            triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlertRuleTriggerArgs', 'AlertRuleTriggerArgsDict']]]]] = None,
            type: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AlertRule':
        """
        Get an existing AlertRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The created time.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] custom_information: Specifies the custom information of the alert rule.
        :param pulumi.Input[_builtins.bool] debugging_alarm: Specifies whether to generate debugging alarms.
               Defaults to **true**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the alert rule.
        :param pulumi.Input[_builtins.bool] event_grouping: Specifies whether to put events in a group.
               The value can be:
               + **true**: one alarm for all query results;
               + **false**: one alarm for each query result;
               
               Default to **true**.
        :param pulumi.Input[_builtins.str] name: Specifies the alert rule name.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID of the alert rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['AlertRuleQueryPlanArgs', 'AlertRuleQueryPlanArgsDict']] query_plan: Specifies the query plan of the alert rule.
               The query_plan structure is documented below.
        :param pulumi.Input[_builtins.str] query_rule: Specifies the query rule of the alert rule.
        :param pulumi.Input[_builtins.str] query_type: Specifies the query type of the alert rule.
               The value can be: **SQL**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] severity: Specifies the severity of the trigger.
               The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the alert rule.
               The value can be **ENABLED** and **DISABLED**. Defaults to **ENABLED**.
        :param pulumi.Input[_builtins.bool] suppression: Specifies whether to stop the query when an alarm is generated.
               
               <a name="query_plan"></a>
               The `query_plan` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['AlertRuleTriggerArgs', 'AlertRuleTriggerArgsDict']]]] triggers: Specifies the triggers of the alert rule.
               The triggers structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] type: Specifies the type of the alert rule.
        :param pulumi.Input[_builtins.str] updated_at: The updated time.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the alert rule belongs.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlertRuleState.__new__(_AlertRuleState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["custom_information"] = custom_information
        __props__.__dict__["debugging_alarm"] = debugging_alarm
        __props__.__dict__["description"] = description
        __props__.__dict__["event_grouping"] = event_grouping
        __props__.__dict__["name"] = name
        __props__.__dict__["pipeline_id"] = pipeline_id
        __props__.__dict__["query_plan"] = query_plan
        __props__.__dict__["query_rule"] = query_rule
        __props__.__dict__["query_type"] = query_type
        __props__.__dict__["region"] = region
        __props__.__dict__["severity"] = severity
        __props__.__dict__["status"] = status
        __props__.__dict__["suppression"] = suppression
        __props__.__dict__["triggers"] = triggers
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["workspace_id"] = workspace_id
        return AlertRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The created time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="customInformation")
    def custom_information(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the custom information of the alert rule.
        """
        return pulumi.get(self, "custom_information")

    @_builtins.property
    @pulumi.getter(name="debuggingAlarm")
    def debugging_alarm(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to generate debugging alarms.
        Defaults to **true**.
        """
        return pulumi.get(self, "debugging_alarm")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of the alert rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="eventGrouping")
    def event_grouping(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to put events in a group.
        The value can be:
        + **true**: one alarm for all query results;
        + **false**: one alarm for each query result;

        Default to **true**.
        """
        return pulumi.get(self, "event_grouping")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alert rule name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the pipeline ID of the alert rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter(name="queryPlan")
    def query_plan(self) -> pulumi.Output['outputs.AlertRuleQueryPlan']:
        """
        Specifies the query plan of the alert rule.
        The query_plan structure is documented below.
        """
        return pulumi.get(self, "query_plan")

    @_builtins.property
    @pulumi.getter(name="queryRule")
    def query_rule(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the query rule of the alert rule.
        """
        return pulumi.get(self, "query_rule")

    @_builtins.property
    @pulumi.getter(name="queryType")
    def query_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the query type of the alert rule.
        The value can be: **SQL**.
        """
        return pulumi.get(self, "query_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the severity of the trigger.
        The value can be: **TIPS**, **LOW**, **MEDIUM**, **HIGH** and **FATAL**.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the status of the alert rule.
        The value can be **ENABLED** and **DISABLED**. Defaults to **ENABLED**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def suppression(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to stop the query when an alarm is generated.

        <a name="query_plan"></a>
        The `query_plan` block supports:
        """
        return pulumi.get(self, "suppression")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Sequence['outputs.AlertRuleTrigger']]:
        """
        Specifies the triggers of the alert rule.
        The triggers structure is documented below.
        """
        return pulumi.get(self, "triggers")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the type of the alert rule.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The updated time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workspace to which the alert rule belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

