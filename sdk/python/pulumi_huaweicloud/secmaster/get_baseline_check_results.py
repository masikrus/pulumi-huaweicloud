# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetBaselineCheckResultsResult',
    'AwaitableGetBaselineCheckResultsResult',
    'get_baseline_check_results',
    'get_baseline_check_results_output',
]

@pulumi.output_type
class GetBaselineCheckResultsResult:
    """
    A collection of values returned by getBaselineCheckResults.
    """
    def __init__(__self__, baseline_check_results=None, condition=None, from_date=None, id=None, region=None, to_date=None, workspace_id=None):
        if baseline_check_results and not isinstance(baseline_check_results, list):
            raise TypeError("Expected argument 'baseline_check_results' to be a list")
        pulumi.set(__self__, "baseline_check_results", baseline_check_results)
        if condition and not isinstance(condition, dict):
            raise TypeError("Expected argument 'condition' to be a dict")
        pulumi.set(__self__, "condition", condition)
        if from_date and not isinstance(from_date, str):
            raise TypeError("Expected argument 'from_date' to be a str")
        pulumi.set(__self__, "from_date", from_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if to_date and not isinstance(to_date, str):
            raise TypeError("Expected argument 'to_date' to be a str")
        pulumi.set(__self__, "to_date", to_date)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="baselineCheckResults")
    def baseline_check_results(self) -> Sequence[_builtins.str]:
        """
        The list of baseline check result.
        """
        return pulumi.get(self, "baseline_check_results")

    @_builtins.property
    @pulumi.getter
    def condition(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter(name="fromDate")
    def from_date(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "from_date")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="toDate")
    def to_date(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "to_date")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetBaselineCheckResultsResult(GetBaselineCheckResultsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBaselineCheckResultsResult(
            baseline_check_results=self.baseline_check_results,
            condition=self.condition,
            from_date=self.from_date,
            id=self.id,
            region=self.region,
            to_date=self.to_date,
            workspace_id=self.workspace_id)


def get_baseline_check_results(condition: Optional[Mapping[str, _builtins.str]] = None,
                               from_date: Optional[_builtins.str] = None,
                               region: Optional[_builtins.str] = None,
                               to_date: Optional[_builtins.str] = None,
                               workspace_id: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBaselineCheckResultsResult:
    """
    Use this data source to get the list of SecMaster baseline check results.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    from_date = config.require_object("fromDate")
    to_date = config.require_object("toDate")
    test = huaweicloud.secmaster.get_baseline_check_results(workspace_id=workspace_id,
        from_date=from_date,
        to_date=to_date)
    ```


    :param Mapping[str, _builtins.str] condition: Specifies the condition expression.
    :param _builtins.str from_date: Specifies the start time of the baseline check.
           For example: **2024-08-12T14:00:00.000+08:00**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str to_date: Specifies the end time of the baseline check.
           For example: **2024-08-12T14:00:00.000+08:00**.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['condition'] = condition
    __args__['fromDate'] = from_date
    __args__['region'] = region
    __args__['toDate'] = to_date
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getBaselineCheckResults:getBaselineCheckResults', __args__, opts=opts, typ=GetBaselineCheckResultsResult).value

    return AwaitableGetBaselineCheckResultsResult(
        baseline_check_results=pulumi.get(__ret__, 'baseline_check_results'),
        condition=pulumi.get(__ret__, 'condition'),
        from_date=pulumi.get(__ret__, 'from_date'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        to_date=pulumi.get(__ret__, 'to_date'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_baseline_check_results_output(condition: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                                      from_date: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      to_date: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBaselineCheckResultsResult]:
    """
    Use this data source to get the list of SecMaster baseline check results.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    from_date = config.require_object("fromDate")
    to_date = config.require_object("toDate")
    test = huaweicloud.secmaster.get_baseline_check_results(workspace_id=workspace_id,
        from_date=from_date,
        to_date=to_date)
    ```


    :param Mapping[str, _builtins.str] condition: Specifies the condition expression.
    :param _builtins.str from_date: Specifies the start time of the baseline check.
           For example: **2024-08-12T14:00:00.000+08:00**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str to_date: Specifies the end time of the baseline check.
           For example: **2024-08-12T14:00:00.000+08:00**.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['condition'] = condition
    __args__['fromDate'] = from_date
    __args__['region'] = region
    __args__['toDate'] = to_date
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getBaselineCheckResults:getBaselineCheckResults', __args__, opts=opts, typ=GetBaselineCheckResultsResult)
    return __ret__.apply(lambda __response__: GetBaselineCheckResultsResult(
        baseline_check_results=pulumi.get(__response__, 'baseline_check_results'),
        condition=pulumi.get(__response__, 'condition'),
        from_date=pulumi.get(__response__, 'from_date'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        to_date=pulumi.get(__response__, 'to_date'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
