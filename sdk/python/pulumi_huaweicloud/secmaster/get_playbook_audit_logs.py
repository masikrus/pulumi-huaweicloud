# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPlaybookAuditLogsResult',
    'AwaitableGetPlaybookAuditLogsResult',
    'get_playbook_audit_logs',
    'get_playbook_audit_logs_output',
]

@pulumi.output_type
class GetPlaybookAuditLogsResult:
    """
    A collection of values returned by getPlaybookAuditLogs.
    """
    def __init__(__self__, action_id=None, action_name=None, audit_logs=None, end_time=None, error_msg=None, id=None, input=None, instance_id=None, instance_type=None, log_level=None, output=None, parent_instance_id=None, region=None, start_time=None, status=None, trigger_type=None, workspace_id=None):
        if action_id and not isinstance(action_id, str):
            raise TypeError("Expected argument 'action_id' to be a str")
        pulumi.set(__self__, "action_id", action_id)
        if action_name and not isinstance(action_name, str):
            raise TypeError("Expected argument 'action_name' to be a str")
        pulumi.set(__self__, "action_name", action_name)
        if audit_logs and not isinstance(audit_logs, list):
            raise TypeError("Expected argument 'audit_logs' to be a list")
        pulumi.set(__self__, "audit_logs", audit_logs)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if error_msg and not isinstance(error_msg, str):
            raise TypeError("Expected argument 'error_msg' to be a str")
        pulumi.set(__self__, "error_msg", error_msg)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if input and not isinstance(input, str):
            raise TypeError("Expected argument 'input' to be a str")
        pulumi.set(__self__, "input", input)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        pulumi.set(__self__, "instance_type", instance_type)
        if log_level and not isinstance(log_level, str):
            raise TypeError("Expected argument 'log_level' to be a str")
        pulumi.set(__self__, "log_level", log_level)
        if output and not isinstance(output, str):
            raise TypeError("Expected argument 'output' to be a str")
        pulumi.set(__self__, "output", output)
        if parent_instance_id and not isinstance(parent_instance_id, str):
            raise TypeError("Expected argument 'parent_instance_id' to be a str")
        pulumi.set(__self__, "parent_instance_id", parent_instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if trigger_type and not isinstance(trigger_type, str):
            raise TypeError("Expected argument 'trigger_type' to be a str")
        pulumi.set(__self__, "trigger_type", trigger_type)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="actionId")
    def action_id(self) -> Optional[_builtins.str]:
        """
        The workflow ID.
        """
        return pulumi.get(self, "action_id")

    @_builtins.property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[_builtins.str]:
        """
        The workflow name.
        """
        return pulumi.get(self, "action_name")

    @_builtins.property
    @pulumi.getter(name="auditLogs")
    def audit_logs(self) -> Sequence['outputs.GetPlaybookAuditLogsAuditLogResult']:
        """
        The audit log list.
        """
        return pulumi.get(self, "audit_logs")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        The end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="errorMsg")
    def error_msg(self) -> Optional[_builtins.str]:
        """
        The error message.
        """
        return pulumi.get(self, "error_msg")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def input(self) -> Optional[_builtins.str]:
        """
        The input information.
        """
        return pulumi.get(self, "input")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        The instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[_builtins.str]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[_builtins.str]:
        """
        The log level.
        """
        return pulumi.get(self, "log_level")

    @_builtins.property
    @pulumi.getter
    def output(self) -> Optional[_builtins.str]:
        """
        The output information.
        """
        return pulumi.get(self, "output")

    @_builtins.property
    @pulumi.getter(name="parentInstanceId")
    def parent_instance_id(self) -> Optional[_builtins.str]:
        """
        The instance ID of the parent node.
        """
        return pulumi.get(self, "parent_instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        """
        The start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[_builtins.str]:
        """
        The triggering type.
        """
        return pulumi.get(self, "trigger_type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetPlaybookAuditLogsResult(GetPlaybookAuditLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlaybookAuditLogsResult(
            action_id=self.action_id,
            action_name=self.action_name,
            audit_logs=self.audit_logs,
            end_time=self.end_time,
            error_msg=self.error_msg,
            id=self.id,
            input=self.input,
            instance_id=self.instance_id,
            instance_type=self.instance_type,
            log_level=self.log_level,
            output=self.output,
            parent_instance_id=self.parent_instance_id,
            region=self.region,
            start_time=self.start_time,
            status=self.status,
            trigger_type=self.trigger_type,
            workspace_id=self.workspace_id)


def get_playbook_audit_logs(action_id: Optional[_builtins.str] = None,
                            action_name: Optional[_builtins.str] = None,
                            end_time: Optional[_builtins.str] = None,
                            error_msg: Optional[_builtins.str] = None,
                            input: Optional[_builtins.str] = None,
                            instance_id: Optional[_builtins.str] = None,
                            instance_type: Optional[_builtins.str] = None,
                            log_level: Optional[_builtins.str] = None,
                            output: Optional[_builtins.str] = None,
                            parent_instance_id: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            start_time: Optional[_builtins.str] = None,
                            status: Optional[_builtins.str] = None,
                            trigger_type: Optional[_builtins.str] = None,
                            workspace_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlaybookAuditLogsResult:
    """
    Use this data source to get the list of SecMaster playbook audit logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.secmaster.get_playbook_audit_logs(workspace_id=workspace_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str action_id: Specifies the workflow ID.
    :param _builtins.str action_name: Specifies the workflow name.
    :param _builtins.str end_time: Specifies the end time.
           For example, **2024-09-26T15:04:05.000Z+0800**.
    :param _builtins.str error_msg: Specifies the error message.
    :param _builtins.str input: Specifies the input information.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str instance_type: Specifies the instance type. The value can be **AOP_WORKFLOW**, **SCRIPT**, or **PLAYBOOK**.
    :param _builtins.str log_level: Specifies the log level. The value can be **DEBUG**, **INFO**, **WARN** or **ERROR**.
    :param _builtins.str output: Specifies the output information.
    :param _builtins.str parent_instance_id: Specifies the instance ID of the parent node.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time.
           For example, **2024-09-26T15:04:05.000Z+0800**.
    :param _builtins.str status: Specifies the status.
           The value can be **RUNNING**, **FINISHED**, **FAILED**, **RETRYING**, or **TERMINATED**.
    :param _builtins.str trigger_type: Specifies the triggering type. The valid values are as follows:
           + **TIMER**: indicates scheduled triggering.
           + **EVENT**: indicates event triggering.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['actionId'] = action_id
    __args__['actionName'] = action_name
    __args__['endTime'] = end_time
    __args__['errorMsg'] = error_msg
    __args__['input'] = input
    __args__['instanceId'] = instance_id
    __args__['instanceType'] = instance_type
    __args__['logLevel'] = log_level
    __args__['output'] = output
    __args__['parentInstanceId'] = parent_instance_id
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['status'] = status
    __args__['triggerType'] = trigger_type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getPlaybookAuditLogs:getPlaybookAuditLogs', __args__, opts=opts, typ=GetPlaybookAuditLogsResult).value

    return AwaitableGetPlaybookAuditLogsResult(
        action_id=pulumi.get(__ret__, 'action_id'),
        action_name=pulumi.get(__ret__, 'action_name'),
        audit_logs=pulumi.get(__ret__, 'audit_logs'),
        end_time=pulumi.get(__ret__, 'end_time'),
        error_msg=pulumi.get(__ret__, 'error_msg'),
        id=pulumi.get(__ret__, 'id'),
        input=pulumi.get(__ret__, 'input'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instance_type=pulumi.get(__ret__, 'instance_type'),
        log_level=pulumi.get(__ret__, 'log_level'),
        output=pulumi.get(__ret__, 'output'),
        parent_instance_id=pulumi.get(__ret__, 'parent_instance_id'),
        region=pulumi.get(__ret__, 'region'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'),
        trigger_type=pulumi.get(__ret__, 'trigger_type'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_playbook_audit_logs_output(action_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   action_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   error_msg: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   input: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   instance_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   log_level: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   output: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   parent_instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   trigger_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlaybookAuditLogsResult]:
    """
    Use this data source to get the list of SecMaster playbook audit logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.secmaster.get_playbook_audit_logs(workspace_id=workspace_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str action_id: Specifies the workflow ID.
    :param _builtins.str action_name: Specifies the workflow name.
    :param _builtins.str end_time: Specifies the end time.
           For example, **2024-09-26T15:04:05.000Z+0800**.
    :param _builtins.str error_msg: Specifies the error message.
    :param _builtins.str input: Specifies the input information.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str instance_type: Specifies the instance type. The value can be **AOP_WORKFLOW**, **SCRIPT**, or **PLAYBOOK**.
    :param _builtins.str log_level: Specifies the log level. The value can be **DEBUG**, **INFO**, **WARN** or **ERROR**.
    :param _builtins.str output: Specifies the output information.
    :param _builtins.str parent_instance_id: Specifies the instance ID of the parent node.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time.
           For example, **2024-09-26T15:04:05.000Z+0800**.
    :param _builtins.str status: Specifies the status.
           The value can be **RUNNING**, **FINISHED**, **FAILED**, **RETRYING**, or **TERMINATED**.
    :param _builtins.str trigger_type: Specifies the triggering type. The valid values are as follows:
           + **TIMER**: indicates scheduled triggering.
           + **EVENT**: indicates event triggering.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['actionId'] = action_id
    __args__['actionName'] = action_name
    __args__['endTime'] = end_time
    __args__['errorMsg'] = error_msg
    __args__['input'] = input
    __args__['instanceId'] = instance_id
    __args__['instanceType'] = instance_type
    __args__['logLevel'] = log_level
    __args__['output'] = output
    __args__['parentInstanceId'] = parent_instance_id
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['status'] = status
    __args__['triggerType'] = trigger_type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getPlaybookAuditLogs:getPlaybookAuditLogs', __args__, opts=opts, typ=GetPlaybookAuditLogsResult)
    return __ret__.apply(lambda __response__: GetPlaybookAuditLogsResult(
        action_id=pulumi.get(__response__, 'action_id'),
        action_name=pulumi.get(__response__, 'action_name'),
        audit_logs=pulumi.get(__response__, 'audit_logs'),
        end_time=pulumi.get(__response__, 'end_time'),
        error_msg=pulumi.get(__response__, 'error_msg'),
        id=pulumi.get(__response__, 'id'),
        input=pulumi.get(__response__, 'input'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        instance_type=pulumi.get(__response__, 'instance_type'),
        log_level=pulumi.get(__response__, 'log_level'),
        output=pulumi.get(__response__, 'output'),
        parent_instance_id=pulumi.get(__response__, 'parent_instance_id'),
        region=pulumi.get(__response__, 'region'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status'),
        trigger_type=pulumi.get(__response__, 'trigger_type'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
