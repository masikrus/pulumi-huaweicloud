# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetSubscriptionResourceResult',
    'AwaitableGetSubscriptionResourceResult',
    'get_subscription_resource',
    'get_subscription_resource_output',
]

@pulumi.output_type
class GetSubscriptionResourceResult:
    """
    A collection of values returned by getSubscriptionResource.
    """
    def __init__(__self__, create_time=None, id=None, index_shards_unused=None, index_shards_upper_limit=None, index_storage_upper_limit=None, partition_upper_limit=None, partitions_unused=None, region=None, sku=None, sku_attribute=None, step=None, unit=None, unused_amount=None, update_time=None, upper_limit=None, used_amount=None, version=None, workspace_id=None):
        if create_time and not isinstance(create_time, int):
            raise TypeError("Expected argument 'create_time' to be a int")
        pulumi.set(__self__, "create_time", create_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if index_shards_unused and not isinstance(index_shards_unused, int):
            raise TypeError("Expected argument 'index_shards_unused' to be a int")
        pulumi.set(__self__, "index_shards_unused", index_shards_unused)
        if index_shards_upper_limit and not isinstance(index_shards_upper_limit, int):
            raise TypeError("Expected argument 'index_shards_upper_limit' to be a int")
        pulumi.set(__self__, "index_shards_upper_limit", index_shards_upper_limit)
        if index_storage_upper_limit and not isinstance(index_storage_upper_limit, int):
            raise TypeError("Expected argument 'index_storage_upper_limit' to be a int")
        pulumi.set(__self__, "index_storage_upper_limit", index_storage_upper_limit)
        if partition_upper_limit and not isinstance(partition_upper_limit, int):
            raise TypeError("Expected argument 'partition_upper_limit' to be a int")
        pulumi.set(__self__, "partition_upper_limit", partition_upper_limit)
        if partitions_unused and not isinstance(partitions_unused, int):
            raise TypeError("Expected argument 'partitions_unused' to be a int")
        pulumi.set(__self__, "partitions_unused", partitions_unused)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sku and not isinstance(sku, str):
            raise TypeError("Expected argument 'sku' to be a str")
        pulumi.set(__self__, "sku", sku)
        if sku_attribute and not isinstance(sku_attribute, str):
            raise TypeError("Expected argument 'sku_attribute' to be a str")
        pulumi.set(__self__, "sku_attribute", sku_attribute)
        if step and not isinstance(step, float):
            raise TypeError("Expected argument 'step' to be a float")
        pulumi.set(__self__, "step", step)
        if unit and not isinstance(unit, str):
            raise TypeError("Expected argument 'unit' to be a str")
        pulumi.set(__self__, "unit", unit)
        if unused_amount and not isinstance(unused_amount, float):
            raise TypeError("Expected argument 'unused_amount' to be a float")
        pulumi.set(__self__, "unused_amount", unused_amount)
        if update_time and not isinstance(update_time, int):
            raise TypeError("Expected argument 'update_time' to be a int")
        pulumi.set(__self__, "update_time", update_time)
        if upper_limit and not isinstance(upper_limit, float):
            raise TypeError("Expected argument 'upper_limit' to be a float")
        pulumi.set(__self__, "upper_limit", upper_limit)
        if used_amount and not isinstance(used_amount, float):
            raise TypeError("Expected argument 'used_amount' to be a float")
        pulumi.set(__self__, "used_amount", used_amount)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.int:
        """
        The creation time in milliseconds timestamp.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="indexShardsUnused")
    def index_shards_unused(self) -> _builtins.int:
        """
        The number of unused index shards.
        """
        return pulumi.get(self, "index_shards_unused")

    @_builtins.property
    @pulumi.getter(name="indexShardsUpperLimit")
    def index_shards_upper_limit(self) -> _builtins.int:
        """
        The upper limit of index shards.
        """
        return pulumi.get(self, "index_shards_upper_limit")

    @_builtins.property
    @pulumi.getter(name="indexStorageUpperLimit")
    def index_storage_upper_limit(self) -> _builtins.int:
        """
        The upper limit of index storage.
        """
        return pulumi.get(self, "index_storage_upper_limit")

    @_builtins.property
    @pulumi.getter(name="partitionUpperLimit")
    def partition_upper_limit(self) -> _builtins.int:
        """
        The upper limit of partitions.
        """
        return pulumi.get(self, "partition_upper_limit")

    @_builtins.property
    @pulumi.getter(name="partitionsUnused")
    def partitions_unused(self) -> _builtins.int:
        """
        The number of unused partitions.
        """
        return pulumi.get(self, "partitions_unused")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sku(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sku")

    @_builtins.property
    @pulumi.getter(name="skuAttribute")
    def sku_attribute(self) -> _builtins.str:
        """
        The SKU attribute of the subscription resource.
        """
        return pulumi.get(self, "sku_attribute")

    @_builtins.property
    @pulumi.getter
    def step(self) -> _builtins.float:
        """
        The step of the quota.
        """
        return pulumi.get(self, "step")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit of the resource quota (e.g., GB, count, shard, etc.).
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter(name="unusedAmount")
    def unused_amount(self) -> _builtins.float:
        """
        The amount of unused resource.
        """
        return pulumi.get(self, "unused_amount")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.int:
        """
        The update time in milliseconds timestamp.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="upperLimit")
    def upper_limit(self) -> _builtins.float:
        """
        The upper limit of the resource.
        """
        return pulumi.get(self, "upper_limit")

    @_builtins.property
    @pulumi.getter(name="usedAmount")
    def used_amount(self) -> _builtins.float:
        """
        The amount of used resource.
        """
        return pulumi.get(self, "used_amount")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version number.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetSubscriptionResourceResult(GetSubscriptionResourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubscriptionResourceResult(
            create_time=self.create_time,
            id=self.id,
            index_shards_unused=self.index_shards_unused,
            index_shards_upper_limit=self.index_shards_upper_limit,
            index_storage_upper_limit=self.index_storage_upper_limit,
            partition_upper_limit=self.partition_upper_limit,
            partitions_unused=self.partitions_unused,
            region=self.region,
            sku=self.sku,
            sku_attribute=self.sku_attribute,
            step=self.step,
            unit=self.unit,
            unused_amount=self.unused_amount,
            update_time=self.update_time,
            upper_limit=self.upper_limit,
            used_amount=self.used_amount,
            version=self.version,
            workspace_id=self.workspace_id)


def get_subscription_resource(region: Optional[_builtins.str] = None,
                              sku: Optional[_builtins.str] = None,
                              workspace_id: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubscriptionResourceResult:
    """
    Use this data source to get the subscription resource of SecMaster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.secmaster.get_subscription_resource(workspace_id=workspace_id,
        sku="FLOW_DATA_BANDWIDTH")
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sku: Specifies the SKU type of the subscription resource.
           The valid values are **FLOW_DATA_BANDWIDTH**, **CSS_CAPACITY**, **PAIMON_CAPACITY**, **OBS_CAPACITY**,
           **JOB_CAPACITY**, **AD_HOC_COUNT**.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['sku'] = sku
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getSubscriptionResource:getSubscriptionResource', __args__, opts=opts, typ=GetSubscriptionResourceResult).value

    return AwaitableGetSubscriptionResourceResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        id=pulumi.get(__ret__, 'id'),
        index_shards_unused=pulumi.get(__ret__, 'index_shards_unused'),
        index_shards_upper_limit=pulumi.get(__ret__, 'index_shards_upper_limit'),
        index_storage_upper_limit=pulumi.get(__ret__, 'index_storage_upper_limit'),
        partition_upper_limit=pulumi.get(__ret__, 'partition_upper_limit'),
        partitions_unused=pulumi.get(__ret__, 'partitions_unused'),
        region=pulumi.get(__ret__, 'region'),
        sku=pulumi.get(__ret__, 'sku'),
        sku_attribute=pulumi.get(__ret__, 'sku_attribute'),
        step=pulumi.get(__ret__, 'step'),
        unit=pulumi.get(__ret__, 'unit'),
        unused_amount=pulumi.get(__ret__, 'unused_amount'),
        update_time=pulumi.get(__ret__, 'update_time'),
        upper_limit=pulumi.get(__ret__, 'upper_limit'),
        used_amount=pulumi.get(__ret__, 'used_amount'),
        version=pulumi.get(__ret__, 'version'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_subscription_resource_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     sku: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSubscriptionResourceResult]:
    """
    Use this data source to get the subscription resource of SecMaster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.secmaster.get_subscription_resource(workspace_id=workspace_id,
        sku="FLOW_DATA_BANDWIDTH")
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sku: Specifies the SKU type of the subscription resource.
           The valid values are **FLOW_DATA_BANDWIDTH**, **CSS_CAPACITY**, **PAIMON_CAPACITY**, **OBS_CAPACITY**,
           **JOB_CAPACITY**, **AD_HOC_COUNT**.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['sku'] = sku
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getSubscriptionResource:getSubscriptionResource', __args__, opts=opts, typ=GetSubscriptionResourceResult)
    return __ret__.apply(lambda __response__: GetSubscriptionResourceResult(
        create_time=pulumi.get(__response__, 'create_time'),
        id=pulumi.get(__response__, 'id'),
        index_shards_unused=pulumi.get(__response__, 'index_shards_unused'),
        index_shards_upper_limit=pulumi.get(__response__, 'index_shards_upper_limit'),
        index_storage_upper_limit=pulumi.get(__response__, 'index_storage_upper_limit'),
        partition_upper_limit=pulumi.get(__response__, 'partition_upper_limit'),
        partitions_unused=pulumi.get(__response__, 'partitions_unused'),
        region=pulumi.get(__response__, 'region'),
        sku=pulumi.get(__response__, 'sku'),
        sku_attribute=pulumi.get(__response__, 'sku_attribute'),
        step=pulumi.get(__response__, 'step'),
        unit=pulumi.get(__response__, 'unit'),
        unused_amount=pulumi.get(__response__, 'unused_amount'),
        update_time=pulumi.get(__response__, 'update_time'),
        upper_limit=pulumi.get(__response__, 'upper_limit'),
        used_amount=pulumi.get(__response__, 'used_amount'),
        version=pulumi.get(__response__, 'version'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
