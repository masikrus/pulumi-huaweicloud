# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPlaybookMonitorsResult',
    'AwaitableGetPlaybookMonitorsResult',
    'get_playbook_monitors',
    'get_playbook_monitors_output',
]

@pulumi.output_type
class GetPlaybookMonitorsResult:
    """
    A collection of values returned by getPlaybookMonitors.
    """
    def __init__(__self__, datas=None, end_time=None, id=None, playbook_id=None, region=None, start_time=None, version_query_type=None, workspace_id=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if playbook_id and not isinstance(playbook_id, str):
            raise TypeError("Expected argument 'playbook_id' to be a str")
        pulumi.set(__self__, "playbook_id", playbook_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if version_query_type and not isinstance(version_query_type, str):
            raise TypeError("Expected argument 'version_query_type' to be a str")
        pulumi.set(__self__, "version_query_type", version_query_type)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetPlaybookMonitorsDataResult']:
        """
        The playbook running monitor details.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="playbookId")
    def playbook_id(self) -> _builtins.str:
        return pulumi.get(self, "playbook_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="versionQueryType")
    def version_query_type(self) -> _builtins.str:
        return pulumi.get(self, "version_query_type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetPlaybookMonitorsResult(GetPlaybookMonitorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlaybookMonitorsResult(
            datas=self.datas,
            end_time=self.end_time,
            id=self.id,
            playbook_id=self.playbook_id,
            region=self.region,
            start_time=self.start_time,
            version_query_type=self.version_query_type,
            workspace_id=self.workspace_id)


def get_playbook_monitors(end_time: Optional[_builtins.str] = None,
                          playbook_id: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          start_time: Optional[_builtins.str] = None,
                          version_query_type: Optional[_builtins.str] = None,
                          workspace_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlaybookMonitorsResult:
    """
    Use this data source to get the list of SecMaster playbook monitor details.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    playbook_id = config.require_object("playbookId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    version_query_type = config.require_object("versionQueryType")
    test = huaweicloud.secmaster.get_playbook_monitors(workspace_id=workspace_id,
        playbook_id=playbook_id,
        start_time=start_time,
        end_time=end_time,
        version_query_type=version_query_type)
    ```


    :param _builtins.str end_time: Specifies the end time.
           For example, **2021-01-30T23:00:00Z+0800**.
    :param _builtins.str playbook_id: Specifies the playbook ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time.
           For example, **2021-01-30T23:00:00Z+0800**.
    :param _builtins.str version_query_type: Specifies the playbook version type.
           The value can be **ALL**, **VALID**, or **DELETED**.
    :param _builtins.str workspace_id: Specifies the workspace ID to which the playbook belongs.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['playbookId'] = playbook_id
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['versionQueryType'] = version_query_type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getPlaybookMonitors:getPlaybookMonitors', __args__, opts=opts, typ=GetPlaybookMonitorsResult).value

    return AwaitableGetPlaybookMonitorsResult(
        datas=pulumi.get(__ret__, 'datas'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        playbook_id=pulumi.get(__ret__, 'playbook_id'),
        region=pulumi.get(__ret__, 'region'),
        start_time=pulumi.get(__ret__, 'start_time'),
        version_query_type=pulumi.get(__ret__, 'version_query_type'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_playbook_monitors_output(end_time: Optional[pulumi.Input[_builtins.str]] = None,
                                 playbook_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                                 version_query_type: Optional[pulumi.Input[_builtins.str]] = None,
                                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlaybookMonitorsResult]:
    """
    Use this data source to get the list of SecMaster playbook monitor details.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    playbook_id = config.require_object("playbookId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    version_query_type = config.require_object("versionQueryType")
    test = huaweicloud.secmaster.get_playbook_monitors(workspace_id=workspace_id,
        playbook_id=playbook_id,
        start_time=start_time,
        end_time=end_time,
        version_query_type=version_query_type)
    ```


    :param _builtins.str end_time: Specifies the end time.
           For example, **2021-01-30T23:00:00Z+0800**.
    :param _builtins.str playbook_id: Specifies the playbook ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time.
           For example, **2021-01-30T23:00:00Z+0800**.
    :param _builtins.str version_query_type: Specifies the playbook version type.
           The value can be **ALL**, **VALID**, or **DELETED**.
    :param _builtins.str workspace_id: Specifies the workspace ID to which the playbook belongs.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['playbookId'] = playbook_id
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['versionQueryType'] = version_query_type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getPlaybookMonitors:getPlaybookMonitors', __args__, opts=opts, typ=GetPlaybookMonitorsResult)
    return __ret__.apply(lambda __response__: GetPlaybookMonitorsResult(
        datas=pulumi.get(__response__, 'datas'),
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        playbook_id=pulumi.get(__response__, 'playbook_id'),
        region=pulumi.get(__response__, 'region'),
        start_time=pulumi.get(__response__, 'start_time'),
        version_query_type=pulumi.get(__response__, 'version_query_type'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
