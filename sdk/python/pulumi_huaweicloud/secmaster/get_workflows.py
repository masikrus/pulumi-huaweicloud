# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetWorkflowsResult',
    'AwaitableGetWorkflowsResult',
    'get_workflows',
    'get_workflows_output',
]

@pulumi.output_type
class GetWorkflowsResult:
    """
    A collection of values returned by getWorkflows.
    """
    def __init__(__self__, data_class_id=None, data_class_name=None, description=None, enabled=None, id=None, last_version=None, name=None, region=None, type=None, workflows=None, workspace_id=None):
        if data_class_id and not isinstance(data_class_id, str):
            raise TypeError("Expected argument 'data_class_id' to be a str")
        pulumi.set(__self__, "data_class_id", data_class_id)
        if data_class_name and not isinstance(data_class_name, str):
            raise TypeError("Expected argument 'data_class_name' to be a str")
        pulumi.set(__self__, "data_class_name", data_class_name)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enabled and not isinstance(enabled, str):
            raise TypeError("Expected argument 'enabled' to be a str")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_version and not isinstance(last_version, str):
            raise TypeError("Expected argument 'last_version' to be a str")
        pulumi.set(__self__, "last_version", last_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if workflows and not isinstance(workflows, list):
            raise TypeError("Expected argument 'workflows' to be a list")
        pulumi.set(__self__, "workflows", workflows)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="dataClassId")
    def data_class_id(self) -> Optional[_builtins.str]:
        """
        The ID of the data class.
        """
        return pulumi.get(self, "data_class_id")

    @_builtins.property
    @pulumi.getter(name="dataClassName")
    def data_class_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "data_class_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The workflow description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.str]:
        """
        Whether the version is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastVersion")
    def last_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The workflow name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The workflow type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.GetWorkflowsWorkflowResult']:
        """
        The workflow list.
        """
        return pulumi.get(self, "workflows")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        The workspace ID.
        """
        return pulumi.get(self, "workspace_id")


class AwaitableGetWorkflowsResult(GetWorkflowsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkflowsResult(
            data_class_id=self.data_class_id,
            data_class_name=self.data_class_name,
            description=self.description,
            enabled=self.enabled,
            id=self.id,
            last_version=self.last_version,
            name=self.name,
            region=self.region,
            type=self.type,
            workflows=self.workflows,
            workspace_id=self.workspace_id)


def get_workflows(data_class_id: Optional[_builtins.str] = None,
                  data_class_name: Optional[_builtins.str] = None,
                  description: Optional[_builtins.str] = None,
                  enabled: Optional[_builtins.str] = None,
                  last_version: Optional[_builtins.str] = None,
                  name: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  type: Optional[_builtins.str] = None,
                  workspace_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkflowsResult:
    """
    Use this data source to get the list of SecMaster workflows.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.secmaster.get_workflows(workspace_id=workspace_id)
    ```


    :param _builtins.str data_class_id: Specifies the data class ID.
    :param _builtins.str data_class_name: Specifies the data class name.
    :param _builtins.str description: Specifies the workflow description.
    :param _builtins.str enabled: Specifies whether the version is enabled. The value can be **true** and **false**.
    :param _builtins.str last_version: Specifies whether the version is the latest. The value can be **true** and **false**.
    :param _builtins.str name: Specifies the workflow name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the workflow type.
           The value can be **NORMAL**, **SURVEY**, **HEMOSTASIS** and **EASE**.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['dataClassId'] = data_class_id
    __args__['dataClassName'] = data_class_name
    __args__['description'] = description
    __args__['enabled'] = enabled
    __args__['lastVersion'] = last_version
    __args__['name'] = name
    __args__['region'] = region
    __args__['type'] = type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getWorkflows:getWorkflows', __args__, opts=opts, typ=GetWorkflowsResult).value

    return AwaitableGetWorkflowsResult(
        data_class_id=pulumi.get(__ret__, 'data_class_id'),
        data_class_name=pulumi.get(__ret__, 'data_class_name'),
        description=pulumi.get(__ret__, 'description'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        last_version=pulumi.get(__ret__, 'last_version'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'),
        workflows=pulumi.get(__ret__, 'workflows'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_workflows_output(data_class_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         data_class_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         enabled: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         last_version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkflowsResult]:
    """
    Use this data source to get the list of SecMaster workflows.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.secmaster.get_workflows(workspace_id=workspace_id)
    ```


    :param _builtins.str data_class_id: Specifies the data class ID.
    :param _builtins.str data_class_name: Specifies the data class name.
    :param _builtins.str description: Specifies the workflow description.
    :param _builtins.str enabled: Specifies whether the version is enabled. The value can be **true** and **false**.
    :param _builtins.str last_version: Specifies whether the version is the latest. The value can be **true** and **false**.
    :param _builtins.str name: Specifies the workflow name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the workflow type.
           The value can be **NORMAL**, **SURVEY**, **HEMOSTASIS** and **EASE**.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['dataClassId'] = data_class_id
    __args__['dataClassName'] = data_class_name
    __args__['description'] = description
    __args__['enabled'] = enabled
    __args__['lastVersion'] = last_version
    __args__['name'] = name
    __args__['region'] = region
    __args__['type'] = type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getWorkflows:getWorkflows', __args__, opts=opts, typ=GetWorkflowsResult)
    return __ret__.apply(lambda __response__: GetWorkflowsResult(
        data_class_id=pulumi.get(__response__, 'data_class_id'),
        data_class_name=pulumi.get(__response__, 'data_class_name'),
        description=pulumi.get(__response__, 'description'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        last_version=pulumi.get(__response__, 'last_version'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type'),
        workflows=pulumi.get(__response__, 'workflows'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
