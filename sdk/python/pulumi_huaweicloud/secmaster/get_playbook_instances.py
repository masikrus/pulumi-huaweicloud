# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPlaybookInstancesResult',
    'AwaitableGetPlaybookInstancesResult',
    'get_playbook_instances',
    'get_playbook_instances_output',
]

@pulumi.output_type
class GetPlaybookInstancesResult:
    """
    A collection of values returned by getPlaybookInstances.
    """
    def __init__(__self__, data_class_name=None, data_object_name=None, from_date=None, id=None, instances=None, region=None, status=None, to_date=None, trigger_type=None, workspace_id=None):
        if data_class_name and not isinstance(data_class_name, str):
            raise TypeError("Expected argument 'data_class_name' to be a str")
        pulumi.set(__self__, "data_class_name", data_class_name)
        if data_object_name and not isinstance(data_object_name, str):
            raise TypeError("Expected argument 'data_object_name' to be a str")
        pulumi.set(__self__, "data_object_name", data_object_name)
        if from_date and not isinstance(from_date, str):
            raise TypeError("Expected argument 'from_date' to be a str")
        pulumi.set(__self__, "from_date", from_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if to_date and not isinstance(to_date, str):
            raise TypeError("Expected argument 'to_date' to be a str")
        pulumi.set(__self__, "to_date", to_date)
        if trigger_type and not isinstance(trigger_type, str):
            raise TypeError("Expected argument 'trigger_type' to be a str")
        pulumi.set(__self__, "trigger_type", trigger_type)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="dataClassName")
    def data_class_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "data_class_name")

    @_builtins.property
    @pulumi.getter(name="dataObjectName")
    def data_object_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "data_object_name")

    @_builtins.property
    @pulumi.getter(name="fromDate")
    def from_date(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "from_date")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetPlaybookInstancesInstanceResult']:
        """
        The playbook instance list.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The playbook instance status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="toDate")
    def to_date(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "to_date")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[_builtins.str]:
        """
        The triggering type.
        """
        return pulumi.get(self, "trigger_type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetPlaybookInstancesResult(GetPlaybookInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlaybookInstancesResult(
            data_class_name=self.data_class_name,
            data_object_name=self.data_object_name,
            from_date=self.from_date,
            id=self.id,
            instances=self.instances,
            region=self.region,
            status=self.status,
            to_date=self.to_date,
            trigger_type=self.trigger_type,
            workspace_id=self.workspace_id)


def get_playbook_instances(data_class_name: Optional[_builtins.str] = None,
                           data_object_name: Optional[_builtins.str] = None,
                           from_date: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           status: Optional[_builtins.str] = None,
                           to_date: Optional[_builtins.str] = None,
                           trigger_type: Optional[_builtins.str] = None,
                           workspace_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlaybookInstancesResult:
    """
    Use this data source to get the list of SecMaster playbook instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.secmaster.get_playbook_instances(workspace_id=workspace_id)
    ```


    :param _builtins.str data_class_name: Specifies the data class name.
    :param _builtins.str data_object_name: Specifies the data object name.
    :param _builtins.str from_date: Specifies the search start time.
           The supported time formats are as follows:
           + **2023-04-27T13:00:00.000+08:00**
           + **2024-08-27T11:00:00.000Z+0800**
           + **2024-08-27T11:00:00Z+0800**
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the playbook instance status.
           The value can be **RUNNING**, **FINISHED**, **FAILED**, **TERMINATING** or **TERMINATED**.
    :param _builtins.str to_date: Specifies the search end time.
           The supported time formats are as follows:
           + **2023-04-27T13:00:00.000+08:00**
           + **2024-08-27T11:00:00.000Z+0800**
           + **2024-08-27T11:00:00Z+0800**
    :param _builtins.str trigger_type: Specifies the triggering type.
           + **TIMER**: indicates scheduled triggering,
           + **EVENT**: indicates event triggering.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['dataClassName'] = data_class_name
    __args__['dataObjectName'] = data_object_name
    __args__['fromDate'] = from_date
    __args__['region'] = region
    __args__['status'] = status
    __args__['toDate'] = to_date
    __args__['triggerType'] = trigger_type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getPlaybookInstances:getPlaybookInstances', __args__, opts=opts, typ=GetPlaybookInstancesResult).value

    return AwaitableGetPlaybookInstancesResult(
        data_class_name=pulumi.get(__ret__, 'data_class_name'),
        data_object_name=pulumi.get(__ret__, 'data_object_name'),
        from_date=pulumi.get(__ret__, 'from_date'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        to_date=pulumi.get(__ret__, 'to_date'),
        trigger_type=pulumi.get(__ret__, 'trigger_type'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_playbook_instances_output(data_class_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  data_object_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  from_date: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  to_date: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  trigger_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlaybookInstancesResult]:
    """
    Use this data source to get the list of SecMaster playbook instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.secmaster.get_playbook_instances(workspace_id=workspace_id)
    ```


    :param _builtins.str data_class_name: Specifies the data class name.
    :param _builtins.str data_object_name: Specifies the data object name.
    :param _builtins.str from_date: Specifies the search start time.
           The supported time formats are as follows:
           + **2023-04-27T13:00:00.000+08:00**
           + **2024-08-27T11:00:00.000Z+0800**
           + **2024-08-27T11:00:00Z+0800**
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the playbook instance status.
           The value can be **RUNNING**, **FINISHED**, **FAILED**, **TERMINATING** or **TERMINATED**.
    :param _builtins.str to_date: Specifies the search end time.
           The supported time formats are as follows:
           + **2023-04-27T13:00:00.000+08:00**
           + **2024-08-27T11:00:00.000Z+0800**
           + **2024-08-27T11:00:00Z+0800**
    :param _builtins.str trigger_type: Specifies the triggering type.
           + **TIMER**: indicates scheduled triggering,
           + **EVENT**: indicates event triggering.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['dataClassName'] = data_class_name
    __args__['dataObjectName'] = data_object_name
    __args__['fromDate'] = from_date
    __args__['region'] = region
    __args__['status'] = status
    __args__['toDate'] = to_date
    __args__['triggerType'] = trigger_type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getPlaybookInstances:getPlaybookInstances', __args__, opts=opts, typ=GetPlaybookInstancesResult)
    return __ret__.apply(lambda __response__: GetPlaybookInstancesResult(
        data_class_name=pulumi.get(__response__, 'data_class_name'),
        data_object_name=pulumi.get(__response__, 'data_object_name'),
        from_date=pulumi.get(__response__, 'from_date'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        to_date=pulumi.get(__response__, 'to_date'),
        trigger_type=pulumi.get(__response__, 'trigger_type'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
