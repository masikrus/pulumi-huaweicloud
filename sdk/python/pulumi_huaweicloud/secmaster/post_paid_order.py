# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PostPaidOrderArgs', 'PostPaidOrder']

@pulumi.input_type
class PostPaidOrderArgs:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 limit: Optional[pulumi.Input[_builtins.int]] = None,
                 operate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 product_lists: Optional[pulumi.Input[Sequence[pulumi.Input['PostPaidOrderProductListArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a PostPaidOrder resource.
        :param pulumi.Input[_builtins.str] operate_type: Specifies the operate type.
               The value can be: **create** and **addition**.
        :param pulumi.Input[Sequence[pulumi.Input['PostPaidOrderProductListArgs']]] product_lists: Specifies the product list.
               The object structure is documented below.
               
               <a name="product_list"></a>
               The `product_list` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of the resource in key/pair format.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if operate_type is not None:
            pulumi.set(__self__, "operate_type", operate_type)
        if product_lists is not None:
            pulumi.set(__self__, "product_lists", product_lists)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "limit", value)

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operate type.
        The value can be: **create** and **addition**.
        """
        return pulumi.get(self, "operate_type")

    @operate_type.setter
    def operate_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operate_type", value)

    @_builtins.property
    @pulumi.getter(name="productLists")
    def product_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PostPaidOrderProductListArgs']]]]:
        """
        Specifies the product list.
        The object structure is documented below.

        <a name="product_list"></a>
        The `product_list` block supports:
        """
        return pulumi.get(self, "product_lists")

    @product_lists.setter
    def product_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PostPaidOrderProductListArgs']]]]):
        pulumi.set(self, "product_lists", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the tags of the resource in key/pair format.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _PostPaidOrderState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 limit: Optional[pulumi.Input[_builtins.int]] = None,
                 operate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 product_lists: Optional[pulumi.Input[Sequence[pulumi.Input['PostPaidOrderProductListArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering PostPaidOrder resources.
        :param pulumi.Input[_builtins.str] operate_type: Specifies the operate type.
               The value can be: **create** and **addition**.
        :param pulumi.Input[Sequence[pulumi.Input['PostPaidOrderProductListArgs']]] product_lists: Specifies the product list.
               The object structure is documented below.
               
               <a name="product_list"></a>
               The `product_list` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of the resource in key/pair format.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if operate_type is not None:
            pulumi.set(__self__, "operate_type", operate_type)
        if product_lists is not None:
            pulumi.set(__self__, "product_lists", product_lists)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "limit", value)

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operate type.
        The value can be: **create** and **addition**.
        """
        return pulumi.get(self, "operate_type")

    @operate_type.setter
    def operate_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operate_type", value)

    @_builtins.property
    @pulumi.getter(name="productLists")
    def product_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PostPaidOrderProductListArgs']]]]:
        """
        Specifies the product list.
        The object structure is documented below.

        <a name="product_list"></a>
        The `product_list` block supports:
        """
        return pulumi.get(self, "product_lists")

    @product_lists.setter
    def product_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PostPaidOrderProductListArgs']]]]):
        pulumi.set(self, "product_lists", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the tags of the resource in key/pair format.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("huaweicloud:secmaster/postPaidOrder:PostPaidOrder")
class PostPaidOrder(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 limit: Optional[pulumi.Input[_builtins.int]] = None,
                 operate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 product_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PostPaidOrderProductListArgs', 'PostPaidOrderProductListArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a SecMaster post paid order resource within HuaweiCloud.

        > Destroying this resource will not change the status of the post paid order resource.

        ## Example Usage

        ### Basic Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.secmaster.PostPaidOrder("test", product_lists=[{
            "id": "CA696738-FD15-47C1-A389-CD0B34415055",
            "product_id": "OFFI908269345109094402",
            "cloud_service_type": "hws.service.type.sa",
            "resource_type": "hws.resource.type.secmaster.typical",
            "resource_spec_code": "secmaster.professional",
            "usage_measure_id": 4,
            "usage_value": 1,
            "resource_size": 4,
            "usage_factor": "duration",
        }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] operate_type: Specifies the operate type.
               The value can be: **create** and **addition**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PostPaidOrderProductListArgs', 'PostPaidOrderProductListArgsDict']]]] product_lists: Specifies the product list.
               The object structure is documented below.
               
               <a name="product_list"></a>
               The `product_list` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of the resource in key/pair format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PostPaidOrderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SecMaster post paid order resource within HuaweiCloud.

        > Destroying this resource will not change the status of the post paid order resource.

        ## Example Usage

        ### Basic Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.secmaster.PostPaidOrder("test", product_lists=[{
            "id": "CA696738-FD15-47C1-A389-CD0B34415055",
            "product_id": "OFFI908269345109094402",
            "cloud_service_type": "hws.service.type.sa",
            "resource_type": "hws.resource.type.secmaster.typical",
            "resource_spec_code": "secmaster.professional",
            "usage_measure_id": 4,
            "usage_value": 1,
            "resource_size": 4,
            "usage_factor": "duration",
        }])
        ```

        :param str resource_name: The name of the resource.
        :param PostPaidOrderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PostPaidOrderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 limit: Optional[pulumi.Input[_builtins.int]] = None,
                 operate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 product_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PostPaidOrderProductListArgs', 'PostPaidOrderProductListArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PostPaidOrderArgs.__new__(PostPaidOrderArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["limit"] = limit
            __props__.__dict__["operate_type"] = operate_type
            __props__.__dict__["product_lists"] = product_lists
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
        super(PostPaidOrder, __self__).__init__(
            'huaweicloud:secmaster/postPaidOrder:PostPaidOrder',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            limit: Optional[pulumi.Input[_builtins.int]] = None,
            operate_type: Optional[pulumi.Input[_builtins.str]] = None,
            product_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PostPaidOrderProductListArgs', 'PostPaidOrderProductListArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'PostPaidOrder':
        """
        Get an existing PostPaidOrder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] operate_type: Specifies the operate type.
               The value can be: **create** and **addition**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PostPaidOrderProductListArgs', 'PostPaidOrderProductListArgsDict']]]] product_lists: Specifies the product list.
               The object structure is documented below.
               
               <a name="product_list"></a>
               The `product_list` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of the resource in key/pair format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PostPaidOrderState.__new__(_PostPaidOrderState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["limit"] = limit
        __props__.__dict__["operate_type"] = operate_type
        __props__.__dict__["product_lists"] = product_lists
        __props__.__dict__["region"] = region
        __props__.__dict__["tags"] = tags
        return PostPaidOrder(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the operate type.
        The value can be: **create** and **addition**.
        """
        return pulumi.get(self, "operate_type")

    @_builtins.property
    @pulumi.getter(name="productLists")
    def product_lists(self) -> pulumi.Output[Optional[Sequence['outputs.PostPaidOrderProductList']]]:
        """
        Specifies the product list.
        The object structure is documented below.

        <a name="product_list"></a>
        The `product_list` block supports:
        """
        return pulumi.get(self, "product_lists")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the tags of the resource in key/pair format.
        """
        return pulumi.get(self, "tags")

