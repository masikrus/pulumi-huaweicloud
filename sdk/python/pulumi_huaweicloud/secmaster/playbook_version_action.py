# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PlaybookVersionActionArgs', 'PlaybookVersionAction']

@pulumi.input_type
class PlaybookVersionActionArgs:
    def __init__(__self__, *,
                 version_id: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PlaybookVersionAction resource.
        :param pulumi.Input[_builtins.str] version_id: Specifies the playbook version ID.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the playbook version belongs.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether the playbook version is enabled.
               The value can be **true**(enable version) or **false**(disable version).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the playbook version status. The value can only be **APPROVING**.
        """
        pulumi.set(__self__, "version_id", version_id)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the playbook version ID.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workspace to which the playbook version belongs.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the playbook version is enabled.
        The value can be **true**(enable version) or **false**(disable version).
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the playbook version status. The value can only be **APPROVING**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _PlaybookVersionActionState:
    def __init__(__self__, *,
                 action_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 approve_name: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 creator_id: Optional[pulumi.Input[_builtins.str]] = None,
                 data_class_id: Optional[pulumi.Input[_builtins.str]] = None,
                 data_class_name: Optional[pulumi.Input[_builtins.str]] = None,
                 data_object_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 data_object_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 data_object_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 modifier_id: Optional[pulumi.Input[_builtins.str]] = None,
                 playbook_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_type: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.int]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PlaybookVersionAction resources.
        :param pulumi.Input[_builtins.str] action_strategy: The execution policy.
        :param pulumi.Input[_builtins.str] approve_name: The reviewer.
        :param pulumi.Input[_builtins.str] created_at: The creation time.
        :param pulumi.Input[_builtins.str] creator_id: The creator ID.
        :param pulumi.Input[_builtins.str] data_class_id: The data class ID.
        :param pulumi.Input[_builtins.str] data_class_name: The data class name.
        :param pulumi.Input[_builtins.bool] data_object_create: Whether to trigger a playbook when a data object is created.
        :param pulumi.Input[_builtins.bool] data_object_delete: Whether to trigger a playbook when a data object is deleted.
        :param pulumi.Input[_builtins.bool] data_object_update: Whether to trigger a playbook when a data object is updated.
        :param pulumi.Input[_builtins.str] description: The description.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether the playbook version is enabled.
               The value can be **true**(enable version) or **false**(disable version).
        :param pulumi.Input[_builtins.str] modifier_id: The ID of the user who updated the information.
        :param pulumi.Input[_builtins.str] playbook_id: The playbook ID.
        :param pulumi.Input[_builtins.str] project_id: The project ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] rule_enabled: Whether the filtering rule is enabled.
        :param pulumi.Input[_builtins.str] rule_id: The rule ID.
        :param pulumi.Input[_builtins.str] status: Specifies the playbook version status. The value can only be **APPROVING**.
        :param pulumi.Input[_builtins.str] trigger_type: The triggering type.
        :param pulumi.Input[_builtins.int] type: The playbook version type.
        :param pulumi.Input[_builtins.str] updated_at: The update time.
        :param pulumi.Input[_builtins.str] version: The playbook version.
        :param pulumi.Input[_builtins.str] version_id: Specifies the playbook version ID.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the playbook version belongs.
        """
        if action_strategy is not None:
            pulumi.set(__self__, "action_strategy", action_strategy)
        if approve_name is not None:
            pulumi.set(__self__, "approve_name", approve_name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if creator_id is not None:
            pulumi.set(__self__, "creator_id", creator_id)
        if data_class_id is not None:
            pulumi.set(__self__, "data_class_id", data_class_id)
        if data_class_name is not None:
            pulumi.set(__self__, "data_class_name", data_class_name)
        if data_object_create is not None:
            pulumi.set(__self__, "data_object_create", data_object_create)
        if data_object_delete is not None:
            pulumi.set(__self__, "data_object_delete", data_object_delete)
        if data_object_update is not None:
            pulumi.set(__self__, "data_object_update", data_object_update)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if modifier_id is not None:
            pulumi.set(__self__, "modifier_id", modifier_id)
        if playbook_id is not None:
            pulumi.set(__self__, "playbook_id", playbook_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rule_enabled is not None:
            pulumi.set(__self__, "rule_enabled", rule_enabled)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="actionStrategy")
    def action_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The execution policy.
        """
        return pulumi.get(self, "action_strategy")

    @action_strategy.setter
    def action_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action_strategy", value)

    @_builtins.property
    @pulumi.getter(name="approveName")
    def approve_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The reviewer.
        """
        return pulumi.get(self, "approve_name")

    @approve_name.setter
    def approve_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "approve_name", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creator ID.
        """
        return pulumi.get(self, "creator_id")

    @creator_id.setter
    def creator_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creator_id", value)

    @_builtins.property
    @pulumi.getter(name="dataClassId")
    def data_class_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The data class ID.
        """
        return pulumi.get(self, "data_class_id")

    @data_class_id.setter
    def data_class_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_class_id", value)

    @_builtins.property
    @pulumi.getter(name="dataClassName")
    def data_class_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The data class name.
        """
        return pulumi.get(self, "data_class_name")

    @data_class_name.setter
    def data_class_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_class_name", value)

    @_builtins.property
    @pulumi.getter(name="dataObjectCreate")
    def data_object_create(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to trigger a playbook when a data object is created.
        """
        return pulumi.get(self, "data_object_create")

    @data_object_create.setter
    def data_object_create(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "data_object_create", value)

    @_builtins.property
    @pulumi.getter(name="dataObjectDelete")
    def data_object_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to trigger a playbook when a data object is deleted.
        """
        return pulumi.get(self, "data_object_delete")

    @data_object_delete.setter
    def data_object_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "data_object_delete", value)

    @_builtins.property
    @pulumi.getter(name="dataObjectUpdate")
    def data_object_update(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to trigger a playbook when a data object is updated.
        """
        return pulumi.get(self, "data_object_update")

    @data_object_update.setter
    def data_object_update(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "data_object_update", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the playbook version is enabled.
        The value can be **true**(enable version) or **false**(disable version).
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="modifierId")
    def modifier_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the user who updated the information.
        """
        return pulumi.get(self, "modifier_id")

    @modifier_id.setter
    def modifier_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modifier_id", value)

    @_builtins.property
    @pulumi.getter(name="playbookId")
    def playbook_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The playbook ID.
        """
        return pulumi.get(self, "playbook_id")

    @playbook_id.setter
    def playbook_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "playbook_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="ruleEnabled")
    def rule_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the filtering rule is enabled.
        """
        return pulumi.get(self, "rule_enabled")

    @rule_enabled.setter
    def rule_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "rule_enabled", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The rule ID.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the playbook version status. The value can only be **APPROVING**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The triggering type.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_type", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The playbook version type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The playbook version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the playbook version ID.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workspace to which the playbook version belongs.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:secmaster/playbookVersionAction:PlaybookVersionAction")
class PlaybookVersionAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SecMaster playbook version action resource within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        ## Example Usage

        ### Submit draft version example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        version_id = config.require_object("versionId")
        submit = huaweicloud.secmaster.PlaybookVersionAction("submit",
            workspace_id=workspace_id,
            version_id=version_id,
            status="APPROVING")
        ```

        ### Enable or disable version example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        version_id = config.require_object("versionId")
        enabled = config.require_object("enabled")
        enabled_playbook_version_action = huaweicloud.secmaster.PlaybookVersionAction("enabled",
            workspace_id=workspace_id,
            version_id=version_id,
            enabled=enabled)
        ```

        ### More Examples

        For more detailed associated usage see [playbook instructions](https://www.terraform.io/examples/secmaster/playbook/README.md)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether the playbook version is enabled.
               The value can be **true**(enable version) or **false**(disable version).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the playbook version status. The value can only be **APPROVING**.
        :param pulumi.Input[_builtins.str] version_id: Specifies the playbook version ID.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the playbook version belongs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PlaybookVersionActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SecMaster playbook version action resource within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        ## Example Usage

        ### Submit draft version example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        version_id = config.require_object("versionId")
        submit = huaweicloud.secmaster.PlaybookVersionAction("submit",
            workspace_id=workspace_id,
            version_id=version_id,
            status="APPROVING")
        ```

        ### Enable or disable version example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        version_id = config.require_object("versionId")
        enabled = config.require_object("enabled")
        enabled_playbook_version_action = huaweicloud.secmaster.PlaybookVersionAction("enabled",
            workspace_id=workspace_id,
            version_id=version_id,
            enabled=enabled)
        ```

        ### More Examples

        For more detailed associated usage see [playbook instructions](https://www.terraform.io/examples/secmaster/playbook/README.md)

        :param str resource_name: The name of the resource.
        :param PlaybookVersionActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PlaybookVersionActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PlaybookVersionActionArgs.__new__(PlaybookVersionActionArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["region"] = region
            __props__.__dict__["status"] = status
            if version_id is None and not opts.urn:
                raise TypeError("Missing required property 'version_id'")
            __props__.__dict__["version_id"] = version_id
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["action_strategy"] = None
            __props__.__dict__["approve_name"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["creator_id"] = None
            __props__.__dict__["data_class_id"] = None
            __props__.__dict__["data_class_name"] = None
            __props__.__dict__["data_object_create"] = None
            __props__.__dict__["data_object_delete"] = None
            __props__.__dict__["data_object_update"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["modifier_id"] = None
            __props__.__dict__["playbook_id"] = None
            __props__.__dict__["project_id"] = None
            __props__.__dict__["rule_enabled"] = None
            __props__.__dict__["rule_id"] = None
            __props__.__dict__["trigger_type"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["version"] = None
        super(PlaybookVersionAction, __self__).__init__(
            'huaweicloud:secmaster/playbookVersionAction:PlaybookVersionAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_strategy: Optional[pulumi.Input[_builtins.str]] = None,
            approve_name: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            creator_id: Optional[pulumi.Input[_builtins.str]] = None,
            data_class_id: Optional[pulumi.Input[_builtins.str]] = None,
            data_class_name: Optional[pulumi.Input[_builtins.str]] = None,
            data_object_create: Optional[pulumi.Input[_builtins.bool]] = None,
            data_object_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            data_object_update: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            modifier_id: Optional[pulumi.Input[_builtins.str]] = None,
            playbook_id: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            rule_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            trigger_type: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.int]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            version_id: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'PlaybookVersionAction':
        """
        Get an existing PlaybookVersionAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action_strategy: The execution policy.
        :param pulumi.Input[_builtins.str] approve_name: The reviewer.
        :param pulumi.Input[_builtins.str] created_at: The creation time.
        :param pulumi.Input[_builtins.str] creator_id: The creator ID.
        :param pulumi.Input[_builtins.str] data_class_id: The data class ID.
        :param pulumi.Input[_builtins.str] data_class_name: The data class name.
        :param pulumi.Input[_builtins.bool] data_object_create: Whether to trigger a playbook when a data object is created.
        :param pulumi.Input[_builtins.bool] data_object_delete: Whether to trigger a playbook when a data object is deleted.
        :param pulumi.Input[_builtins.bool] data_object_update: Whether to trigger a playbook when a data object is updated.
        :param pulumi.Input[_builtins.str] description: The description.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether the playbook version is enabled.
               The value can be **true**(enable version) or **false**(disable version).
        :param pulumi.Input[_builtins.str] modifier_id: The ID of the user who updated the information.
        :param pulumi.Input[_builtins.str] playbook_id: The playbook ID.
        :param pulumi.Input[_builtins.str] project_id: The project ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] rule_enabled: Whether the filtering rule is enabled.
        :param pulumi.Input[_builtins.str] rule_id: The rule ID.
        :param pulumi.Input[_builtins.str] status: Specifies the playbook version status. The value can only be **APPROVING**.
        :param pulumi.Input[_builtins.str] trigger_type: The triggering type.
        :param pulumi.Input[_builtins.int] type: The playbook version type.
        :param pulumi.Input[_builtins.str] updated_at: The update time.
        :param pulumi.Input[_builtins.str] version: The playbook version.
        :param pulumi.Input[_builtins.str] version_id: Specifies the playbook version ID.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the playbook version belongs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PlaybookVersionActionState.__new__(_PlaybookVersionActionState)

        __props__.__dict__["action_strategy"] = action_strategy
        __props__.__dict__["approve_name"] = approve_name
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["creator_id"] = creator_id
        __props__.__dict__["data_class_id"] = data_class_id
        __props__.__dict__["data_class_name"] = data_class_name
        __props__.__dict__["data_object_create"] = data_object_create
        __props__.__dict__["data_object_delete"] = data_object_delete
        __props__.__dict__["data_object_update"] = data_object_update
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["modifier_id"] = modifier_id
        __props__.__dict__["playbook_id"] = playbook_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["rule_enabled"] = rule_enabled
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["status"] = status
        __props__.__dict__["trigger_type"] = trigger_type
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["version"] = version
        __props__.__dict__["version_id"] = version_id
        __props__.__dict__["workspace_id"] = workspace_id
        return PlaybookVersionAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="actionStrategy")
    def action_strategy(self) -> pulumi.Output[_builtins.str]:
        """
        The execution policy.
        """
        return pulumi.get(self, "action_strategy")

    @_builtins.property
    @pulumi.getter(name="approveName")
    def approve_name(self) -> pulumi.Output[_builtins.str]:
        """
        The reviewer.
        """
        return pulumi.get(self, "approve_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> pulumi.Output[_builtins.str]:
        """
        The creator ID.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter(name="dataClassId")
    def data_class_id(self) -> pulumi.Output[_builtins.str]:
        """
        The data class ID.
        """
        return pulumi.get(self, "data_class_id")

    @_builtins.property
    @pulumi.getter(name="dataClassName")
    def data_class_name(self) -> pulumi.Output[_builtins.str]:
        """
        The data class name.
        """
        return pulumi.get(self, "data_class_name")

    @_builtins.property
    @pulumi.getter(name="dataObjectCreate")
    def data_object_create(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to trigger a playbook when a data object is created.
        """
        return pulumi.get(self, "data_object_create")

    @_builtins.property
    @pulumi.getter(name="dataObjectDelete")
    def data_object_delete(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to trigger a playbook when a data object is deleted.
        """
        return pulumi.get(self, "data_object_delete")

    @_builtins.property
    @pulumi.getter(name="dataObjectUpdate")
    def data_object_update(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to trigger a playbook when a data object is updated.
        """
        return pulumi.get(self, "data_object_update")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the playbook version is enabled.
        The value can be **true**(enable version) or **false**(disable version).
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="modifierId")
    def modifier_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the user who updated the information.
        """
        return pulumi.get(self, "modifier_id")

    @_builtins.property
    @pulumi.getter(name="playbookId")
    def playbook_id(self) -> pulumi.Output[_builtins.str]:
        """
        The playbook ID.
        """
        return pulumi.get(self, "playbook_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleEnabled")
    def rule_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the filtering rule is enabled.
        """
        return pulumi.get(self, "rule_enabled")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[_builtins.str]:
        """
        The rule ID.
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the playbook version status. The value can only be **APPROVING**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> pulumi.Output[_builtins.str]:
        """
        The triggering type.
        """
        return pulumi.get(self, "trigger_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.int]:
        """
        The playbook version type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        The playbook version.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the playbook version ID.
        """
        return pulumi.get(self, "version_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workspace to which the playbook version belongs.
        """
        return pulumi.get(self, "workspace_id")

