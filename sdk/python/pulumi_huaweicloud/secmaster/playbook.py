# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PlaybookArgs', 'Playbook']

@pulumi.input_type
class PlaybookArgs:
    def __init__(__self__, *,
                 workspace_id: pulumi.Input[_builtins.str],
                 active_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Playbook resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the playbook belongs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] active_version_id: schema: Deprecated; Specifies the active version ID.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the playbook.
        :param pulumi.Input[_builtins.bool] enabled: schema: Deprecated; Specifies whether to enable the playbook.
        :param pulumi.Input[_builtins.str] name: Specifies the playbook name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "workspace_id", workspace_id)
        if active_version_id is not None:
            pulumi.set(__self__, "active_version_id", active_version_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workspace to which the playbook belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="activeVersionId")
    def active_version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Deprecated; Specifies the active version ID.
        """
        return pulumi.get(self, "active_version_id")

    @active_version_id.setter
    def active_version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "active_version_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the playbook.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        schema: Deprecated; Specifies whether to enable the playbook.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the playbook name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _PlaybookState:
    def __init__(__self__, *,
                 active_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 approve_role: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 dataclass_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dataclass_name: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 edit_role: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reject_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 unaudited_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 user_role: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Playbook resources.
        :param pulumi.Input[_builtins.str] active_version_id: schema: Deprecated; Specifies the active version ID.
        :param pulumi.Input[_builtins.str] approve_role: Indicates the approve role of the playbook.
        :param pulumi.Input[_builtins.str] created_at: Indicates the created time of the playbook.
        :param pulumi.Input[_builtins.str] dataclass_id: Indicates the data class ID.
        :param pulumi.Input[_builtins.str] dataclass_name: Indicates the data class name.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the playbook.
        :param pulumi.Input[_builtins.str] edit_role: Indicates the edit role.
        :param pulumi.Input[_builtins.bool] enabled: schema: Deprecated; Specifies whether to enable the playbook.
        :param pulumi.Input[_builtins.str] name: Specifies the playbook name.
        :param pulumi.Input[_builtins.str] owner_id: Indicates the owner ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] reject_version_id: Indicates the rejected version ID.
        :param pulumi.Input[_builtins.str] unaudited_version_id: Indicates the unaudited version ID.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the updated time of the playbook.
        :param pulumi.Input[_builtins.str] user_role: Indicates the user role.
        :param pulumi.Input[_builtins.str] version: Indicates the version.
        :param pulumi.Input[_builtins.str] version_id: Indicates the version ID.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the playbook belongs.
               
               Changing this parameter will create a new resource.
        """
        if active_version_id is not None:
            pulumi.set(__self__, "active_version_id", active_version_id)
        if approve_role is not None:
            pulumi.set(__self__, "approve_role", approve_role)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dataclass_id is not None:
            pulumi.set(__self__, "dataclass_id", dataclass_id)
        if dataclass_name is not None:
            pulumi.set(__self__, "dataclass_name", dataclass_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edit_role is not None:
            pulumi.set(__self__, "edit_role", edit_role)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if reject_version_id is not None:
            pulumi.set(__self__, "reject_version_id", reject_version_id)
        if unaudited_version_id is not None:
            pulumi.set(__self__, "unaudited_version_id", unaudited_version_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if user_role is not None:
            pulumi.set(__self__, "user_role", user_role)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="activeVersionId")
    def active_version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Deprecated; Specifies the active version ID.
        """
        return pulumi.get(self, "active_version_id")

    @active_version_id.setter
    def active_version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "active_version_id", value)

    @_builtins.property
    @pulumi.getter(name="approveRole")
    def approve_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the approve role of the playbook.
        """
        return pulumi.get(self, "approve_role")

    @approve_role.setter
    def approve_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "approve_role", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the created time of the playbook.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="dataclassId")
    def dataclass_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the data class ID.
        """
        return pulumi.get(self, "dataclass_id")

    @dataclass_id.setter
    def dataclass_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dataclass_id", value)

    @_builtins.property
    @pulumi.getter(name="dataclassName")
    def dataclass_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the data class name.
        """
        return pulumi.get(self, "dataclass_name")

    @dataclass_name.setter
    def dataclass_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dataclass_name", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the playbook.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="editRole")
    def edit_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the edit role.
        """
        return pulumi.get(self, "edit_role")

    @edit_role.setter
    def edit_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "edit_role", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        schema: Deprecated; Specifies whether to enable the playbook.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the playbook name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the owner ID.
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="rejectVersionId")
    def reject_version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the rejected version ID.
        """
        return pulumi.get(self, "reject_version_id")

    @reject_version_id.setter
    def reject_version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reject_version_id", value)

    @_builtins.property
    @pulumi.getter(name="unauditedVersionId")
    def unaudited_version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the unaudited version ID.
        """
        return pulumi.get(self, "unaudited_version_id")

    @unaudited_version_id.setter
    def unaudited_version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "unaudited_version_id", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the updated time of the playbook.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="userRole")
    def user_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the user role.
        """
        return pulumi.get(self, "user_role")

    @user_role.setter
    def user_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_role", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the version ID.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workspace to which the playbook belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:secmaster/playbook:Playbook")
class Playbook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SecMaster playbook resource within HuaweiCloud.

        ## Example Usage

        ### Basic Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        test = huaweicloud.secmaster.Playbook("test",
            workspace_id=workspace_id,
            name=name,
            description="created by terraform")
        ```

        ### More Examples

        For more detailed associated usage see [playbook instructions](https://www.terraform.io/examples/secmaster/playbook/README.md)

        ## Import

        The playbook can be imported using the workspace ID and the playbook ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/playbook:Playbook test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] active_version_id: schema: Deprecated; Specifies the active version ID.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the playbook.
        :param pulumi.Input[_builtins.bool] enabled: schema: Deprecated; Specifies whether to enable the playbook.
        :param pulumi.Input[_builtins.str] name: Specifies the playbook name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the playbook belongs.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PlaybookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SecMaster playbook resource within HuaweiCloud.

        ## Example Usage

        ### Basic Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        test = huaweicloud.secmaster.Playbook("test",
            workspace_id=workspace_id,
            name=name,
            description="created by terraform")
        ```

        ### More Examples

        For more detailed associated usage see [playbook instructions](https://www.terraform.io/examples/secmaster/playbook/README.md)

        ## Import

        The playbook can be imported using the workspace ID and the playbook ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/playbook:Playbook test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param PlaybookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PlaybookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PlaybookArgs.__new__(PlaybookArgs)

            __props__.__dict__["active_version_id"] = active_version_id
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["approve_role"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["dataclass_id"] = None
            __props__.__dict__["dataclass_name"] = None
            __props__.__dict__["edit_role"] = None
            __props__.__dict__["owner_id"] = None
            __props__.__dict__["reject_version_id"] = None
            __props__.__dict__["unaudited_version_id"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["user_role"] = None
            __props__.__dict__["version"] = None
            __props__.__dict__["version_id"] = None
        super(Playbook, __self__).__init__(
            'huaweicloud:secmaster/playbook:Playbook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_version_id: Optional[pulumi.Input[_builtins.str]] = None,
            approve_role: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            dataclass_id: Optional[pulumi.Input[_builtins.str]] = None,
            dataclass_name: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            edit_role: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            owner_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            reject_version_id: Optional[pulumi.Input[_builtins.str]] = None,
            unaudited_version_id: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            user_role: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            version_id: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Playbook':
        """
        Get an existing Playbook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] active_version_id: schema: Deprecated; Specifies the active version ID.
        :param pulumi.Input[_builtins.str] approve_role: Indicates the approve role of the playbook.
        :param pulumi.Input[_builtins.str] created_at: Indicates the created time of the playbook.
        :param pulumi.Input[_builtins.str] dataclass_id: Indicates the data class ID.
        :param pulumi.Input[_builtins.str] dataclass_name: Indicates the data class name.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the playbook.
        :param pulumi.Input[_builtins.str] edit_role: Indicates the edit role.
        :param pulumi.Input[_builtins.bool] enabled: schema: Deprecated; Specifies whether to enable the playbook.
        :param pulumi.Input[_builtins.str] name: Specifies the playbook name.
        :param pulumi.Input[_builtins.str] owner_id: Indicates the owner ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] reject_version_id: Indicates the rejected version ID.
        :param pulumi.Input[_builtins.str] unaudited_version_id: Indicates the unaudited version ID.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the updated time of the playbook.
        :param pulumi.Input[_builtins.str] user_role: Indicates the user role.
        :param pulumi.Input[_builtins.str] version: Indicates the version.
        :param pulumi.Input[_builtins.str] version_id: Indicates the version ID.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the playbook belongs.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PlaybookState.__new__(_PlaybookState)

        __props__.__dict__["active_version_id"] = active_version_id
        __props__.__dict__["approve_role"] = approve_role
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["dataclass_id"] = dataclass_id
        __props__.__dict__["dataclass_name"] = dataclass_name
        __props__.__dict__["description"] = description
        __props__.__dict__["edit_role"] = edit_role
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["region"] = region
        __props__.__dict__["reject_version_id"] = reject_version_id
        __props__.__dict__["unaudited_version_id"] = unaudited_version_id
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["user_role"] = user_role
        __props__.__dict__["version"] = version
        __props__.__dict__["version_id"] = version_id
        __props__.__dict__["workspace_id"] = workspace_id
        return Playbook(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="activeVersionId")
    def active_version_id(self) -> pulumi.Output[_builtins.str]:
        """
        schema: Deprecated; Specifies the active version ID.
        """
        return pulumi.get(self, "active_version_id")

    @_builtins.property
    @pulumi.getter(name="approveRole")
    def approve_role(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the approve role of the playbook.
        """
        return pulumi.get(self, "approve_role")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the created time of the playbook.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataclassId")
    def dataclass_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the data class ID.
        """
        return pulumi.get(self, "dataclass_id")

    @_builtins.property
    @pulumi.getter(name="dataclassName")
    def dataclass_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the data class name.
        """
        return pulumi.get(self, "dataclass_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the playbook.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="editRole")
    def edit_role(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the edit role.
        """
        return pulumi.get(self, "edit_role")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        schema: Deprecated; Specifies whether to enable the playbook.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the playbook name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the owner ID.
        """
        return pulumi.get(self, "owner_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="rejectVersionId")
    def reject_version_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the rejected version ID.
        """
        return pulumi.get(self, "reject_version_id")

    @_builtins.property
    @pulumi.getter(name="unauditedVersionId")
    def unaudited_version_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the unaudited version ID.
        """
        return pulumi.get(self, "unaudited_version_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the updated time of the playbook.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userRole")
    def user_role(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the user role.
        """
        return pulumi.get(self, "user_role")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the version.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the version ID.
        """
        return pulumi.get(self, "version_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workspace to which the playbook belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

