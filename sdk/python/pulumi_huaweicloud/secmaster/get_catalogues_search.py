# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCataloguesSearchResult',
    'AwaitableGetCataloguesSearchResult',
    'get_catalogues_search',
    'get_catalogues_search_output',
]

@pulumi.output_type
class GetCataloguesSearchResult:
    """
    A collection of values returned by getCataloguesSearch.
    """
    def __init__(__self__, analysis_version=None, catalogue_status=None, datas=None, id=None, layout_name=None, parent_catalogue=None, publisher_name=None, region=None, second_catalogue=None, workspace_id=None):
        if analysis_version and not isinstance(analysis_version, str):
            raise TypeError("Expected argument 'analysis_version' to be a str")
        pulumi.set(__self__, "analysis_version", analysis_version)
        if catalogue_status and not isinstance(catalogue_status, bool):
            raise TypeError("Expected argument 'catalogue_status' to be a bool")
        pulumi.set(__self__, "catalogue_status", catalogue_status)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if layout_name and not isinstance(layout_name, str):
            raise TypeError("Expected argument 'layout_name' to be a str")
        pulumi.set(__self__, "layout_name", layout_name)
        if parent_catalogue and not isinstance(parent_catalogue, str):
            raise TypeError("Expected argument 'parent_catalogue' to be a str")
        pulumi.set(__self__, "parent_catalogue", parent_catalogue)
        if publisher_name and not isinstance(publisher_name, str):
            raise TypeError("Expected argument 'publisher_name' to be a str")
        pulumi.set(__self__, "publisher_name", publisher_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if second_catalogue and not isinstance(second_catalogue, str):
            raise TypeError("Expected argument 'second_catalogue' to be a str")
        pulumi.set(__self__, "second_catalogue", second_catalogue)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="analysisVersion")
    def analysis_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "analysis_version")

    @_builtins.property
    @pulumi.getter(name="catalogueStatus")
    def catalogue_status(self) -> Optional[_builtins.bool]:
        """
        The status of the catalogue (builtin/custom).
        """
        return pulumi.get(self, "catalogue_status")

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetCataloguesSearchDataResult']:
        """
        The list of catalogues that match the query criteria.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="layoutName")
    def layout_name(self) -> Optional[_builtins.str]:
        """
        The name of the layout.
        """
        return pulumi.get(self, "layout_name")

    @_builtins.property
    @pulumi.getter(name="parentCatalogue")
    def parent_catalogue(self) -> Optional[_builtins.str]:
        """
        The name of the parent catalogue.
        """
        return pulumi.get(self, "parent_catalogue")

    @_builtins.property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> Optional[_builtins.str]:
        """
        The name of the publisher.
        """
        return pulumi.get(self, "publisher_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secondCatalogue")
    def second_catalogue(self) -> Optional[_builtins.str]:
        """
        The name of the second-level catalogue.
        """
        return pulumi.get(self, "second_catalogue")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetCataloguesSearchResult(GetCataloguesSearchResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCataloguesSearchResult(
            analysis_version=self.analysis_version,
            catalogue_status=self.catalogue_status,
            datas=self.datas,
            id=self.id,
            layout_name=self.layout_name,
            parent_catalogue=self.parent_catalogue,
            publisher_name=self.publisher_name,
            region=self.region,
            second_catalogue=self.second_catalogue,
            workspace_id=self.workspace_id)


def get_catalogues_search(analysis_version: Optional[_builtins.str] = None,
                          catalogue_status: Optional[_builtins.bool] = None,
                          layout_name: Optional[_builtins.str] = None,
                          parent_catalogue: Optional[_builtins.str] = None,
                          publisher_name: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          second_catalogue: Optional[_builtins.str] = None,
                          workspace_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCataloguesSearchResult:
    """
    Use this data source to query the SecMaster catalogues within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    example = huaweicloud.secmaster.get_catalogues_search(workspace_id=workspace_id)
    ```


    :param _builtins.str analysis_version: Specifies the analysis version.
    :param _builtins.bool catalogue_status: Specifies the status of the catalogue. Defaults to **false**.
    :param _builtins.str layout_name: Specifies the layout name.
    :param _builtins.str parent_catalogue: Specifies the parent catalogue name.
    :param _builtins.str publisher_name: Specifies the publisher name.
    :param _builtins.str region: Specifies the region in which to query the catalogues.
           If omitted, the provider-level region will be used.
    :param _builtins.str second_catalogue: Specifies the second-level catalogue name.
    :param _builtins.str workspace_id: Specifies the ID of the workspace to query catalogues.
    """
    __args__ = dict()
    __args__['analysisVersion'] = analysis_version
    __args__['catalogueStatus'] = catalogue_status
    __args__['layoutName'] = layout_name
    __args__['parentCatalogue'] = parent_catalogue
    __args__['publisherName'] = publisher_name
    __args__['region'] = region
    __args__['secondCatalogue'] = second_catalogue
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getCataloguesSearch:getCataloguesSearch', __args__, opts=opts, typ=GetCataloguesSearchResult).value

    return AwaitableGetCataloguesSearchResult(
        analysis_version=pulumi.get(__ret__, 'analysis_version'),
        catalogue_status=pulumi.get(__ret__, 'catalogue_status'),
        datas=pulumi.get(__ret__, 'datas'),
        id=pulumi.get(__ret__, 'id'),
        layout_name=pulumi.get(__ret__, 'layout_name'),
        parent_catalogue=pulumi.get(__ret__, 'parent_catalogue'),
        publisher_name=pulumi.get(__ret__, 'publisher_name'),
        region=pulumi.get(__ret__, 'region'),
        second_catalogue=pulumi.get(__ret__, 'second_catalogue'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_catalogues_search_output(analysis_version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 catalogue_status: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                 layout_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 parent_catalogue: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 publisher_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 second_catalogue: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCataloguesSearchResult]:
    """
    Use this data source to query the SecMaster catalogues within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    example = huaweicloud.secmaster.get_catalogues_search(workspace_id=workspace_id)
    ```


    :param _builtins.str analysis_version: Specifies the analysis version.
    :param _builtins.bool catalogue_status: Specifies the status of the catalogue. Defaults to **false**.
    :param _builtins.str layout_name: Specifies the layout name.
    :param _builtins.str parent_catalogue: Specifies the parent catalogue name.
    :param _builtins.str publisher_name: Specifies the publisher name.
    :param _builtins.str region: Specifies the region in which to query the catalogues.
           If omitted, the provider-level region will be used.
    :param _builtins.str second_catalogue: Specifies the second-level catalogue name.
    :param _builtins.str workspace_id: Specifies the ID of the workspace to query catalogues.
    """
    __args__ = dict()
    __args__['analysisVersion'] = analysis_version
    __args__['catalogueStatus'] = catalogue_status
    __args__['layoutName'] = layout_name
    __args__['parentCatalogue'] = parent_catalogue
    __args__['publisherName'] = publisher_name
    __args__['region'] = region
    __args__['secondCatalogue'] = second_catalogue
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getCataloguesSearch:getCataloguesSearch', __args__, opts=opts, typ=GetCataloguesSearchResult)
    return __ret__.apply(lambda __response__: GetCataloguesSearchResult(
        analysis_version=pulumi.get(__response__, 'analysis_version'),
        catalogue_status=pulumi.get(__response__, 'catalogue_status'),
        datas=pulumi.get(__response__, 'datas'),
        id=pulumi.get(__response__, 'id'),
        layout_name=pulumi.get(__response__, 'layout_name'),
        parent_catalogue=pulumi.get(__response__, 'parent_catalogue'),
        publisher_name=pulumi.get(__response__, 'publisher_name'),
        region=pulumi.get(__response__, 'region'),
        second_catalogue=pulumi.get(__response__, 'second_catalogue'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
