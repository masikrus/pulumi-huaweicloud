# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PlaybookRuleArgs', 'PlaybookRule']

@pulumi.input_type
class PlaybookRuleArgs:
    def __init__(__self__, *,
                 version_id: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['PlaybookRuleConditionArgs']]]] = None,
                 cron: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 end_type: Optional[pulumi.Input[_builtins.str]] = None,
                 execution_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expression_type: Optional[pulumi.Input[_builtins.str]] = None,
                 logics: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 only_once: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repeat_range: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule_type: Optional[pulumi.Input[_builtins.str]] = None,
                 start_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PlaybookRule resource.
        :param pulumi.Input[_builtins.str] version_id: Specifies playbook version ID of the rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the playbook rule belongs.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['PlaybookRuleConditionArgs']]] conditions: Specifies the conditions of the rule.
               Required for event triggered playbooks.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] cron: Specifies the cron expression.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] end_time: Specifies the playbook end time.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] end_type: Specifies the playbook end type.
               The value can be: **FOREVER** and **CUSTOM**. Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] execution_type: Specifies the execution type.
               The value can be **PARALLEL**. Required for timer triggered playbooks.
               
               <a name="PlaybookRule_ConditionItem"></a>
               The `conditions` block supports:
        :param pulumi.Input[_builtins.str] expression_type: Specifies the expression type of the rule.
               Required for event triggered playbooks.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] logics: Specifies the logics of the rule.
               Required for event triggered playbooks.
        :param pulumi.Input[_builtins.bool] only_once: Specifies the repeat range.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repeat_range: Specifies the repeat range.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] schedule_type: Specifies the schedule type.
               The value can be **second**, **hour** and **day** **week**. Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] start_type: Specifies the playbook start type.
               The value can be: **IMMEDIATELY** and **CUSTOM**. Required for timer triggered playbooks.
        """
        pulumi.set(__self__, "version_id", version_id)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if cron is not None:
            pulumi.set(__self__, "cron", cron)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if end_type is not None:
            pulumi.set(__self__, "end_type", end_type)
        if execution_type is not None:
            pulumi.set(__self__, "execution_type", execution_type)
        if expression_type is not None:
            pulumi.set(__self__, "expression_type", expression_type)
        if logics is not None:
            pulumi.set(__self__, "logics", logics)
        if only_once is not None:
            pulumi.set(__self__, "only_once", only_once)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if repeat_range is not None:
            pulumi.set(__self__, "repeat_range", repeat_range)
        if schedule_type is not None:
            pulumi.set(__self__, "schedule_type", schedule_type)
        if start_type is not None:
            pulumi.set(__self__, "start_type", start_type)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies playbook version ID of the rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workspace to which the playbook rule belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PlaybookRuleConditionArgs']]]]:
        """
        Specifies the conditions of the rule.
        Required for event triggered playbooks.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PlaybookRuleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def cron(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cron expression.
        Required for timer triggered playbooks.
        """
        return pulumi.get(self, "cron")

    @cron.setter
    def cron(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cron", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the playbook end time.
        Required for timer triggered playbooks.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="endType")
    def end_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the playbook end type.
        The value can be: **FOREVER** and **CUSTOM**. Required for timer triggered playbooks.
        """
        return pulumi.get(self, "end_type")

    @end_type.setter
    def end_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_type", value)

    @_builtins.property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the execution type.
        The value can be **PARALLEL**. Required for timer triggered playbooks.

        <a name="PlaybookRule_ConditionItem"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "execution_type")

    @execution_type.setter
    def execution_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "execution_type", value)

    @_builtins.property
    @pulumi.getter(name="expressionType")
    def expression_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the expression type of the rule.
        Required for event triggered playbooks.
        """
        return pulumi.get(self, "expression_type")

    @expression_type.setter
    def expression_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expression_type", value)

    @_builtins.property
    @pulumi.getter
    def logics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the logics of the rule.
        Required for event triggered playbooks.
        """
        return pulumi.get(self, "logics")

    @logics.setter
    def logics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "logics", value)

    @_builtins.property
    @pulumi.getter(name="onlyOnce")
    def only_once(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the repeat range.
        Required for timer triggered playbooks.
        """
        return pulumi.get(self, "only_once")

    @only_once.setter
    def only_once(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "only_once", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="repeatRange")
    def repeat_range(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the repeat range.
        Required for timer triggered playbooks.
        """
        return pulumi.get(self, "repeat_range")

    @repeat_range.setter
    def repeat_range(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repeat_range", value)

    @_builtins.property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the schedule type.
        The value can be **second**, **hour** and **day** **week**. Required for timer triggered playbooks.
        """
        return pulumi.get(self, "schedule_type")

    @schedule_type.setter
    def schedule_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schedule_type", value)

    @_builtins.property
    @pulumi.getter(name="startType")
    def start_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the playbook start type.
        The value can be: **IMMEDIATELY** and **CUSTOM**. Required for timer triggered playbooks.
        """
        return pulumi.get(self, "start_type")

    @start_type.setter
    def start_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_type", value)


@pulumi.input_type
class _PlaybookRuleState:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['PlaybookRuleConditionArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 cron: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 end_type: Optional[pulumi.Input[_builtins.str]] = None,
                 execution_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expression_type: Optional[pulumi.Input[_builtins.str]] = None,
                 logics: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 only_once: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repeat_range: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule_type: Optional[pulumi.Input[_builtins.str]] = None,
                 start_type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PlaybookRule resources.
        :param pulumi.Input[Sequence[pulumi.Input['PlaybookRuleConditionArgs']]] conditions: Specifies the conditions of the rule.
               Required for event triggered playbooks.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: Indicates the created time of the playbook rule.
        :param pulumi.Input[_builtins.str] cron: Specifies the cron expression.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] end_time: Specifies the playbook end time.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] end_type: Specifies the playbook end type.
               The value can be: **FOREVER** and **CUSTOM**. Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] execution_type: Specifies the execution type.
               The value can be **PARALLEL**. Required for timer triggered playbooks.
               
               <a name="PlaybookRule_ConditionItem"></a>
               The `conditions` block supports:
        :param pulumi.Input[_builtins.str] expression_type: Specifies the expression type of the rule.
               Required for event triggered playbooks.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] logics: Specifies the logics of the rule.
               Required for event triggered playbooks.
        :param pulumi.Input[_builtins.bool] only_once: Specifies the repeat range.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repeat_range: Specifies the repeat range.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] schedule_type: Specifies the schedule type.
               The value can be **second**, **hour** and **day** **week**. Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] start_type: Specifies the playbook start type.
               The value can be: **IMMEDIATELY** and **CUSTOM**. Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the updated time of the playbook rule.
        :param pulumi.Input[_builtins.str] version_id: Specifies playbook version ID of the rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the playbook rule belongs.
               
               Changing this parameter will create a new resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if cron is not None:
            pulumi.set(__self__, "cron", cron)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if end_type is not None:
            pulumi.set(__self__, "end_type", end_type)
        if execution_type is not None:
            pulumi.set(__self__, "execution_type", execution_type)
        if expression_type is not None:
            pulumi.set(__self__, "expression_type", expression_type)
        if logics is not None:
            pulumi.set(__self__, "logics", logics)
        if only_once is not None:
            pulumi.set(__self__, "only_once", only_once)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if repeat_range is not None:
            pulumi.set(__self__, "repeat_range", repeat_range)
        if schedule_type is not None:
            pulumi.set(__self__, "schedule_type", schedule_type)
        if start_type is not None:
            pulumi.set(__self__, "start_type", start_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PlaybookRuleConditionArgs']]]]:
        """
        Specifies the conditions of the rule.
        Required for event triggered playbooks.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PlaybookRuleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the created time of the playbook rule.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def cron(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cron expression.
        Required for timer triggered playbooks.
        """
        return pulumi.get(self, "cron")

    @cron.setter
    def cron(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cron", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the playbook end time.
        Required for timer triggered playbooks.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="endType")
    def end_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the playbook end type.
        The value can be: **FOREVER** and **CUSTOM**. Required for timer triggered playbooks.
        """
        return pulumi.get(self, "end_type")

    @end_type.setter
    def end_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_type", value)

    @_builtins.property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the execution type.
        The value can be **PARALLEL**. Required for timer triggered playbooks.

        <a name="PlaybookRule_ConditionItem"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "execution_type")

    @execution_type.setter
    def execution_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "execution_type", value)

    @_builtins.property
    @pulumi.getter(name="expressionType")
    def expression_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the expression type of the rule.
        Required for event triggered playbooks.
        """
        return pulumi.get(self, "expression_type")

    @expression_type.setter
    def expression_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expression_type", value)

    @_builtins.property
    @pulumi.getter
    def logics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the logics of the rule.
        Required for event triggered playbooks.
        """
        return pulumi.get(self, "logics")

    @logics.setter
    def logics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "logics", value)

    @_builtins.property
    @pulumi.getter(name="onlyOnce")
    def only_once(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the repeat range.
        Required for timer triggered playbooks.
        """
        return pulumi.get(self, "only_once")

    @only_once.setter
    def only_once(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "only_once", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="repeatRange")
    def repeat_range(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the repeat range.
        Required for timer triggered playbooks.
        """
        return pulumi.get(self, "repeat_range")

    @repeat_range.setter
    def repeat_range(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repeat_range", value)

    @_builtins.property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the schedule type.
        The value can be **second**, **hour** and **day** **week**. Required for timer triggered playbooks.
        """
        return pulumi.get(self, "schedule_type")

    @schedule_type.setter
    def schedule_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schedule_type", value)

    @_builtins.property
    @pulumi.getter(name="startType")
    def start_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the playbook start type.
        The value can be: **IMMEDIATELY** and **CUSTOM**. Required for timer triggered playbooks.
        """
        return pulumi.get(self, "start_type")

    @start_type.setter
    def start_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the updated time of the playbook rule.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies playbook version ID of the rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workspace to which the playbook rule belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:secmaster/playbookRule:PlaybookRule")
class PlaybookRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PlaybookRuleConditionArgs', 'PlaybookRuleConditionArgsDict']]]]] = None,
                 cron: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 end_type: Optional[pulumi.Input[_builtins.str]] = None,
                 execution_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expression_type: Optional[pulumi.Input[_builtins.str]] = None,
                 logics: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 only_once: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repeat_range: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule_type: Optional[pulumi.Input[_builtins.str]] = None,
                 start_type: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SecMaster playbook rule resource within HuaweiCloud.

        ## Example Usage

        ### Basic Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        version_id = config.require_object("versionId")
        test = huaweicloud.secmaster.PlaybookRule("test",
            workspace_id=workspace_id,
            version_id=version_id,
            expression_type="common",
            conditions=[{
                "name": "condition_0",
                "detail": "123",
                "datas": [
                    "waf.alarm.level",
                    ">",
                    "3",
                ],
            }],
            logics=["condition_0"])
        ```

        ### More Examples

        For more detailed associated usage see [playbook instructions](https://www.terraform.io/examples/secmaster/playbook/README.md)

        ## Import

        The playbook rule can be imported using  workspace ID, the playbook version ID and the playbook rule ID,

        separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/playbookRule:PlaybookRule test <workspace_id>/<playbook_version_id>/<playbook_rule_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PlaybookRuleConditionArgs', 'PlaybookRuleConditionArgsDict']]]] conditions: Specifies the conditions of the rule.
               Required for event triggered playbooks.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] cron: Specifies the cron expression.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] end_time: Specifies the playbook end time.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] end_type: Specifies the playbook end type.
               The value can be: **FOREVER** and **CUSTOM**. Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] execution_type: Specifies the execution type.
               The value can be **PARALLEL**. Required for timer triggered playbooks.
               
               <a name="PlaybookRule_ConditionItem"></a>
               The `conditions` block supports:
        :param pulumi.Input[_builtins.str] expression_type: Specifies the expression type of the rule.
               Required for event triggered playbooks.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] logics: Specifies the logics of the rule.
               Required for event triggered playbooks.
        :param pulumi.Input[_builtins.bool] only_once: Specifies the repeat range.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repeat_range: Specifies the repeat range.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] schedule_type: Specifies the schedule type.
               The value can be **second**, **hour** and **day** **week**. Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] start_type: Specifies the playbook start type.
               The value can be: **IMMEDIATELY** and **CUSTOM**. Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] version_id: Specifies playbook version ID of the rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the playbook rule belongs.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PlaybookRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SecMaster playbook rule resource within HuaweiCloud.

        ## Example Usage

        ### Basic Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        version_id = config.require_object("versionId")
        test = huaweicloud.secmaster.PlaybookRule("test",
            workspace_id=workspace_id,
            version_id=version_id,
            expression_type="common",
            conditions=[{
                "name": "condition_0",
                "detail": "123",
                "datas": [
                    "waf.alarm.level",
                    ">",
                    "3",
                ],
            }],
            logics=["condition_0"])
        ```

        ### More Examples

        For more detailed associated usage see [playbook instructions](https://www.terraform.io/examples/secmaster/playbook/README.md)

        ## Import

        The playbook rule can be imported using  workspace ID, the playbook version ID and the playbook rule ID,

        separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/playbookRule:PlaybookRule test <workspace_id>/<playbook_version_id>/<playbook_rule_id>
        ```

        :param str resource_name: The name of the resource.
        :param PlaybookRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PlaybookRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PlaybookRuleConditionArgs', 'PlaybookRuleConditionArgsDict']]]]] = None,
                 cron: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 end_type: Optional[pulumi.Input[_builtins.str]] = None,
                 execution_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expression_type: Optional[pulumi.Input[_builtins.str]] = None,
                 logics: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 only_once: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repeat_range: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule_type: Optional[pulumi.Input[_builtins.str]] = None,
                 start_type: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PlaybookRuleArgs.__new__(PlaybookRuleArgs)

            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["cron"] = cron
            __props__.__dict__["end_time"] = end_time
            __props__.__dict__["end_type"] = end_type
            __props__.__dict__["execution_type"] = execution_type
            __props__.__dict__["expression_type"] = expression_type
            __props__.__dict__["logics"] = logics
            __props__.__dict__["only_once"] = only_once
            __props__.__dict__["region"] = region
            __props__.__dict__["repeat_range"] = repeat_range
            __props__.__dict__["schedule_type"] = schedule_type
            __props__.__dict__["start_type"] = start_type
            if version_id is None and not opts.urn:
                raise TypeError("Missing required property 'version_id'")
            __props__.__dict__["version_id"] = version_id
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(PlaybookRule, __self__).__init__(
            'huaweicloud:secmaster/playbookRule:PlaybookRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PlaybookRuleConditionArgs', 'PlaybookRuleConditionArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            cron: Optional[pulumi.Input[_builtins.str]] = None,
            end_time: Optional[pulumi.Input[_builtins.str]] = None,
            end_type: Optional[pulumi.Input[_builtins.str]] = None,
            execution_type: Optional[pulumi.Input[_builtins.str]] = None,
            expression_type: Optional[pulumi.Input[_builtins.str]] = None,
            logics: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            only_once: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            repeat_range: Optional[pulumi.Input[_builtins.str]] = None,
            schedule_type: Optional[pulumi.Input[_builtins.str]] = None,
            start_type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            version_id: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'PlaybookRule':
        """
        Get an existing PlaybookRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PlaybookRuleConditionArgs', 'PlaybookRuleConditionArgsDict']]]] conditions: Specifies the conditions of the rule.
               Required for event triggered playbooks.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: Indicates the created time of the playbook rule.
        :param pulumi.Input[_builtins.str] cron: Specifies the cron expression.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] end_time: Specifies the playbook end time.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] end_type: Specifies the playbook end type.
               The value can be: **FOREVER** and **CUSTOM**. Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] execution_type: Specifies the execution type.
               The value can be **PARALLEL**. Required for timer triggered playbooks.
               
               <a name="PlaybookRule_ConditionItem"></a>
               The `conditions` block supports:
        :param pulumi.Input[_builtins.str] expression_type: Specifies the expression type of the rule.
               Required for event triggered playbooks.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] logics: Specifies the logics of the rule.
               Required for event triggered playbooks.
        :param pulumi.Input[_builtins.bool] only_once: Specifies the repeat range.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] repeat_range: Specifies the repeat range.
               Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] schedule_type: Specifies the schedule type.
               The value can be **second**, **hour** and **day** **week**. Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] start_type: Specifies the playbook start type.
               The value can be: **IMMEDIATELY** and **CUSTOM**. Required for timer triggered playbooks.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the updated time of the playbook rule.
        :param pulumi.Input[_builtins.str] version_id: Specifies playbook version ID of the rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the playbook rule belongs.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PlaybookRuleState.__new__(_PlaybookRuleState)

        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["cron"] = cron
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["end_type"] = end_type
        __props__.__dict__["execution_type"] = execution_type
        __props__.__dict__["expression_type"] = expression_type
        __props__.__dict__["logics"] = logics
        __props__.__dict__["only_once"] = only_once
        __props__.__dict__["region"] = region
        __props__.__dict__["repeat_range"] = repeat_range
        __props__.__dict__["schedule_type"] = schedule_type
        __props__.__dict__["start_type"] = start_type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["version_id"] = version_id
        __props__.__dict__["workspace_id"] = workspace_id
        return PlaybookRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Sequence['outputs.PlaybookRuleCondition']]:
        """
        Specifies the conditions of the rule.
        Required for event triggered playbooks.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the created time of the playbook rule.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def cron(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cron expression.
        Required for timer triggered playbooks.
        """
        return pulumi.get(self, "cron")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the playbook end time.
        Required for timer triggered playbooks.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="endType")
    def end_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the playbook end type.
        The value can be: **FOREVER** and **CUSTOM**. Required for timer triggered playbooks.
        """
        return pulumi.get(self, "end_type")

    @_builtins.property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the execution type.
        The value can be **PARALLEL**. Required for timer triggered playbooks.

        <a name="PlaybookRule_ConditionItem"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "execution_type")

    @_builtins.property
    @pulumi.getter(name="expressionType")
    def expression_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the expression type of the rule.
        Required for event triggered playbooks.
        """
        return pulumi.get(self, "expression_type")

    @_builtins.property
    @pulumi.getter
    def logics(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the logics of the rule.
        Required for event triggered playbooks.
        """
        return pulumi.get(self, "logics")

    @_builtins.property
    @pulumi.getter(name="onlyOnce")
    def only_once(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies the repeat range.
        Required for timer triggered playbooks.
        """
        return pulumi.get(self, "only_once")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="repeatRange")
    def repeat_range(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the repeat range.
        Required for timer triggered playbooks.
        """
        return pulumi.get(self, "repeat_range")

    @_builtins.property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the schedule type.
        The value can be **second**, **hour** and **day** **week**. Required for timer triggered playbooks.
        """
        return pulumi.get(self, "schedule_type")

    @_builtins.property
    @pulumi.getter(name="startType")
    def start_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the playbook start type.
        The value can be: **IMMEDIATELY** and **CUSTOM**. Required for timer triggered playbooks.
        """
        return pulumi.get(self, "start_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the updated time of the playbook rule.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies playbook version ID of the rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workspace to which the playbook rule belongs.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

