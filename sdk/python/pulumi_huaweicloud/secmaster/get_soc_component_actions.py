# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSocComponentActionsResult',
    'AwaitableGetSocComponentActionsResult',
    'get_soc_component_actions',
    'get_soc_component_actions_output',
]

@pulumi.output_type
class GetSocComponentActionsResult:
    """
    A collection of values returned by getSocComponentActions.
    """
    def __init__(__self__, component_id=None, datas=None, enabled=None, id=None, region=None, workspace_id=None):
        if component_id and not isinstance(component_id, str):
            raise TypeError("Expected argument 'component_id' to be a str")
        pulumi.set(__self__, "component_id", component_id)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> _builtins.str:
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetSocComponentActionsDataResult']:
        """
        The soc component actions list.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetSocComponentActionsResult(GetSocComponentActionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSocComponentActionsResult(
            component_id=self.component_id,
            datas=self.datas,
            enabled=self.enabled,
            id=self.id,
            region=self.region,
            workspace_id=self.workspace_id)


def get_soc_component_actions(component_id: Optional[_builtins.str] = None,
                              enabled: Optional[_builtins.bool] = None,
                              region: Optional[_builtins.str] = None,
                              workspace_id: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSocComponentActionsResult:
    """
    Use this data source to get the list of SecMaster soc component actions within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    component_id = config.require_object("componentId")
    test = huaweicloud.secmaster.get_soc_component_actions(workspace_id=workspace_id,
        component_id=component_id)
    ```


    :param _builtins.str component_id: Specifies the component ID.
    :param _builtins.bool enabled: Specifies whether to enable or not. The value can be **true** or **false**.
           Defaults to **false**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['componentId'] = component_id
    __args__['enabled'] = enabled
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getSocComponentActions:getSocComponentActions', __args__, opts=opts, typ=GetSocComponentActionsResult).value

    return AwaitableGetSocComponentActionsResult(
        component_id=pulumi.get(__ret__, 'component_id'),
        datas=pulumi.get(__ret__, 'datas'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_soc_component_actions_output(component_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     enabled: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSocComponentActionsResult]:
    """
    Use this data source to get the list of SecMaster soc component actions within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    component_id = config.require_object("componentId")
    test = huaweicloud.secmaster.get_soc_component_actions(workspace_id=workspace_id,
        component_id=component_id)
    ```


    :param _builtins.str component_id: Specifies the component ID.
    :param _builtins.bool enabled: Specifies whether to enable or not. The value can be **true** or **false**.
           Defaults to **false**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['componentId'] = component_id
    __args__['enabled'] = enabled
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getSocComponentActions:getSocComponentActions', __args__, opts=opts, typ=GetSocComponentActionsResult)
    return __ret__.apply(lambda __response__: GetSocComponentActionsResult(
        component_id=pulumi.get(__response__, 'component_id'),
        datas=pulumi.get(__response__, 'datas'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
