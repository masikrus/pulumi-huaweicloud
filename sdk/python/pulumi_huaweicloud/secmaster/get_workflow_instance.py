# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetWorkflowInstanceResult',
    'AwaitableGetWorkflowInstanceResult',
    'get_workflow_instance',
    'get_workflow_instance_output',
]

@pulumi.output_type
class GetWorkflowInstanceResult:
    """
    A collection of values returned by getWorkflowInstance.
    """
    def __init__(__self__, dataclasses=None, dataobject_id=None, defense_id=None, end_time=None, id=None, instance_id=None, name=None, playbooks=None, region=None, retry_count=None, start_time=None, status=None, trigger_type=None, workflow_instance_id=None, workflows=None, workspace_id=None):
        if dataclasses and not isinstance(dataclasses, list):
            raise TypeError("Expected argument 'dataclasses' to be a list")
        pulumi.set(__self__, "dataclasses", dataclasses)
        if dataobject_id and not isinstance(dataobject_id, str):
            raise TypeError("Expected argument 'dataobject_id' to be a str")
        pulumi.set(__self__, "dataobject_id", dataobject_id)
        if defense_id and not isinstance(defense_id, str):
            raise TypeError("Expected argument 'defense_id' to be a str")
        pulumi.set(__self__, "defense_id", defense_id)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if playbooks and not isinstance(playbooks, list):
            raise TypeError("Expected argument 'playbooks' to be a list")
        pulumi.set(__self__, "playbooks", playbooks)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if retry_count and not isinstance(retry_count, int):
            raise TypeError("Expected argument 'retry_count' to be a int")
        pulumi.set(__self__, "retry_count", retry_count)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if trigger_type and not isinstance(trigger_type, str):
            raise TypeError("Expected argument 'trigger_type' to be a str")
        pulumi.set(__self__, "trigger_type", trigger_type)
        if workflow_instance_id and not isinstance(workflow_instance_id, str):
            raise TypeError("Expected argument 'workflow_instance_id' to be a str")
        pulumi.set(__self__, "workflow_instance_id", workflow_instance_id)
        if workflows and not isinstance(workflows, list):
            raise TypeError("Expected argument 'workflows' to be a list")
        pulumi.set(__self__, "workflows", workflows)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def dataclasses(self) -> Sequence['outputs.GetWorkflowInstanceDataclassResult']:
        """
        The data class information of the instance.
        """
        return pulumi.get(self, "dataclasses")

    @_builtins.property
    @pulumi.getter(name="dataobjectId")
    def dataobject_id(self) -> _builtins.str:
        """
        The data object ID.
        """
        return pulumi.get(self, "dataobject_id")

    @_builtins.property
    @pulumi.getter(name="defenseId")
    def defense_id(self) -> _builtins.str:
        """
        The defense ID.
        """
        return pulumi.get(self, "defense_id")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        The end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The playbook name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def playbooks(self) -> Sequence['outputs.GetWorkflowInstancePlaybookResult']:
        """
        The playbook information of the instance.
        """
        return pulumi.get(self, "playbooks")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> _builtins.int:
        """
        The workflow instance retry count.
        """
        return pulumi.get(self, "retry_count")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        The start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The workflow instance status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        The workflow trigger mode.
        """
        return pulumi.get(self, "trigger_type")

    @_builtins.property
    @pulumi.getter(name="workflowInstanceId")
    def workflow_instance_id(self) -> _builtins.str:
        """
        The workflow instance ID.
        """
        return pulumi.get(self, "workflow_instance_id")

    @_builtins.property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.GetWorkflowInstanceWorkflowResult']:
        """
        The workflow information of the instance.
        """
        return pulumi.get(self, "workflows")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetWorkflowInstanceResult(GetWorkflowInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkflowInstanceResult(
            dataclasses=self.dataclasses,
            dataobject_id=self.dataobject_id,
            defense_id=self.defense_id,
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            playbooks=self.playbooks,
            region=self.region,
            retry_count=self.retry_count,
            start_time=self.start_time,
            status=self.status,
            trigger_type=self.trigger_type,
            workflow_instance_id=self.workflow_instance_id,
            workflows=self.workflows,
            workspace_id=self.workspace_id)


def get_workflow_instance(instance_id: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          workspace_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkflowInstanceResult:
    """
    Use this data source to query a specfice workflow instance detail.


    :param _builtins.str instance_id: Specifies the workflow instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getWorkflowInstance:getWorkflowInstance', __args__, opts=opts, typ=GetWorkflowInstanceResult).value

    return AwaitableGetWorkflowInstanceResult(
        dataclasses=pulumi.get(__ret__, 'dataclasses'),
        dataobject_id=pulumi.get(__ret__, 'dataobject_id'),
        defense_id=pulumi.get(__ret__, 'defense_id'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        playbooks=pulumi.get(__ret__, 'playbooks'),
        region=pulumi.get(__ret__, 'region'),
        retry_count=pulumi.get(__ret__, 'retry_count'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'),
        trigger_type=pulumi.get(__ret__, 'trigger_type'),
        workflow_instance_id=pulumi.get(__ret__, 'workflow_instance_id'),
        workflows=pulumi.get(__ret__, 'workflows'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_workflow_instance_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkflowInstanceResult]:
    """
    Use this data source to query a specfice workflow instance detail.


    :param _builtins.str instance_id: Specifies the workflow instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getWorkflowInstance:getWorkflowInstance', __args__, opts=opts, typ=GetWorkflowInstanceResult)
    return __ret__.apply(lambda __response__: GetWorkflowInstanceResult(
        dataclasses=pulumi.get(__response__, 'dataclasses'),
        dataobject_id=pulumi.get(__response__, 'dataobject_id'),
        defense_id=pulumi.get(__response__, 'defense_id'),
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        playbooks=pulumi.get(__response__, 'playbooks'),
        region=pulumi.get(__response__, 'region'),
        retry_count=pulumi.get(__response__, 'retry_count'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status'),
        trigger_type=pulumi.get(__response__, 'trigger_type'),
        workflow_instance_id=pulumi.get(__response__, 'workflow_instance_id'),
        workflows=pulumi.get(__response__, 'workflows'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
