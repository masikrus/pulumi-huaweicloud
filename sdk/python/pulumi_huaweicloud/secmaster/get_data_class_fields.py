# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataClassFieldsResult',
    'AwaitableGetDataClassFieldsResult',
    'get_data_class_fields',
    'get_data_class_fields_output',
]

@pulumi.output_type
class GetDataClassFieldsResult:
    """
    A collection of values returned by getDataClassFields.
    """
    def __init__(__self__, data_class_id=None, fields=None, id=None, is_built_in=None, mapping=None, name=None, region=None, workspace_id=None):
        if data_class_id and not isinstance(data_class_id, str):
            raise TypeError("Expected argument 'data_class_id' to be a str")
        pulumi.set(__self__, "data_class_id", data_class_id)
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_built_in and not isinstance(is_built_in, str):
            raise TypeError("Expected argument 'is_built_in' to be a str")
        pulumi.set(__self__, "is_built_in", is_built_in)
        if mapping and not isinstance(mapping, str):
            raise TypeError("Expected argument 'mapping' to be a str")
        pulumi.set(__self__, "mapping", mapping)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="dataClassId")
    def data_class_id(self) -> _builtins.str:
        return pulumi.get(self, "data_class_id")

    @_builtins.property
    @pulumi.getter
    def fields(self) -> Sequence['outputs.GetDataClassFieldsFieldResult']:
        """
        The field list.
        """
        return pulumi.get(self, "fields")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isBuiltIn")
    def is_built_in(self) -> Optional[_builtins.str]:
        """
        Whether the field is built in SecMaster.
        """
        return pulumi.get(self, "is_built_in")

    @_builtins.property
    @pulumi.getter
    def mapping(self) -> Optional[_builtins.str]:
        """
        Whether to display in other places other the classification and mapping module.
        """
        return pulumi.get(self, "mapping")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The field name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetDataClassFieldsResult(GetDataClassFieldsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataClassFieldsResult(
            data_class_id=self.data_class_id,
            fields=self.fields,
            id=self.id,
            is_built_in=self.is_built_in,
            mapping=self.mapping,
            name=self.name,
            region=self.region,
            workspace_id=self.workspace_id)


def get_data_class_fields(data_class_id: Optional[_builtins.str] = None,
                          is_built_in: Optional[_builtins.str] = None,
                          mapping: Optional[_builtins.str] = None,
                          name: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          workspace_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataClassFieldsResult:
    """
    Use this data source to get the list of SecMaster data class fields.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    data_class_id = config.require_object("dataClassId")
    test = huaweicloud.secmaster.get_data_class_fields(workspace_id=workspace_id,
        data_class_id=data_class_id)
    ```


    :param _builtins.str data_class_id: Specifies the data class ID.
    :param _builtins.str is_built_in: Specifies whether it is built in SecMaster. The value can be **true** or **false**.
    :param _builtins.str mapping: Specifies whether to display in other places other the classification and mapping module.
    :param _builtins.str name: Specifies the field name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['dataClassId'] = data_class_id
    __args__['isBuiltIn'] = is_built_in
    __args__['mapping'] = mapping
    __args__['name'] = name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getDataClassFields:getDataClassFields', __args__, opts=opts, typ=GetDataClassFieldsResult).value

    return AwaitableGetDataClassFieldsResult(
        data_class_id=pulumi.get(__ret__, 'data_class_id'),
        fields=pulumi.get(__ret__, 'fields'),
        id=pulumi.get(__ret__, 'id'),
        is_built_in=pulumi.get(__ret__, 'is_built_in'),
        mapping=pulumi.get(__ret__, 'mapping'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_data_class_fields_output(data_class_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 is_built_in: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 mapping: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataClassFieldsResult]:
    """
    Use this data source to get the list of SecMaster data class fields.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    data_class_id = config.require_object("dataClassId")
    test = huaweicloud.secmaster.get_data_class_fields(workspace_id=workspace_id,
        data_class_id=data_class_id)
    ```


    :param _builtins.str data_class_id: Specifies the data class ID.
    :param _builtins.str is_built_in: Specifies whether it is built in SecMaster. The value can be **true** or **false**.
    :param _builtins.str mapping: Specifies whether to display in other places other the classification and mapping module.
    :param _builtins.str name: Specifies the field name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['dataClassId'] = data_class_id
    __args__['isBuiltIn'] = is_built_in
    __args__['mapping'] = mapping
    __args__['name'] = name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getDataClassFields:getDataClassFields', __args__, opts=opts, typ=GetDataClassFieldsResult)
    return __ret__.apply(lambda __response__: GetDataClassFieldsResult(
        data_class_id=pulumi.get(__response__, 'data_class_id'),
        fields=pulumi.get(__response__, 'fields'),
        id=pulumi.get(__response__, 'id'),
        is_built_in=pulumi.get(__response__, 'is_built_in'),
        mapping=pulumi.get(__response__, 'mapping'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
