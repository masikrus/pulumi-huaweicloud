# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetIncidentsResult',
    'AwaitableGetIncidentsResult',
    'get_incidents',
    'get_incidents_output',
]

@pulumi.output_type
class GetIncidentsResult:
    """
    A collection of values returned by getIncidents.
    """
    def __init__(__self__, condition=None, from_date=None, id=None, incidents=None, region=None, to_date=None, workspace_id=None):
        if condition and not isinstance(condition, dict):
            raise TypeError("Expected argument 'condition' to be a dict")
        pulumi.set(__self__, "condition", condition)
        if from_date and not isinstance(from_date, str):
            raise TypeError("Expected argument 'from_date' to be a str")
        pulumi.set(__self__, "from_date", from_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if incidents and not isinstance(incidents, list):
            raise TypeError("Expected argument 'incidents' to be a list")
        pulumi.set(__self__, "incidents", incidents)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if to_date and not isinstance(to_date, str):
            raise TypeError("Expected argument 'to_date' to be a str")
        pulumi.set(__self__, "to_date", to_date)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> Optional['outputs.GetIncidentsConditionResult']:
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter(name="fromDate")
    def from_date(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "from_date")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def incidents(self) -> Sequence['outputs.GetIncidentsIncidentResult']:
        """
        The incident list.
        The incidents structure is documented below.
        """
        return pulumi.get(self, "incidents")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="toDate")
    def to_date(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "to_date")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        The ID of the current workspace.
        """
        return pulumi.get(self, "workspace_id")


class AwaitableGetIncidentsResult(GetIncidentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIncidentsResult(
            condition=self.condition,
            from_date=self.from_date,
            id=self.id,
            incidents=self.incidents,
            region=self.region,
            to_date=self.to_date,
            workspace_id=self.workspace_id)


def get_incidents(condition: Optional[Union['GetIncidentsConditionArgs', 'GetIncidentsConditionArgsDict']] = None,
                  from_date: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  to_date: Optional[_builtins.str] = None,
                  workspace_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIncidentsResult:
    """
    Use this data source to get the list of SecMaster incidents.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    from_date = config.require_object("fromDate")
    to_date = config.require_object("toDate")
    test = huaweicloud.secmaster.get_incidents(workspace_id=workspace_id,
        from_date=from_date,
        to_date=to_date,
        condition={
            "conditions": [{
                "name": "severity",
                "datas": [
                    "severity",
                    "=",
                    "Tips",
                ],
            }],
            "logics": ["severity"],
        })
    ```


    :param Union['GetIncidentsConditionArgs', 'GetIncidentsConditionArgsDict'] condition: Specifies the search condition expression.
           The condition structure is documented below.
           
           <a name="condition"></a>
           The `condition` block supports:
    :param _builtins.str from_date: Specifies the search start time. For example: **2023-04-18T13:00:00.000+08:00**.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str to_date: Specifies the search end time. For example: **2023-04-18T13:00:00.000+08:00**.
    :param _builtins.str workspace_id: Specifies the ID of the workspace to which the incident belongs.
    """
    __args__ = dict()
    __args__['condition'] = condition
    __args__['fromDate'] = from_date
    __args__['region'] = region
    __args__['toDate'] = to_date
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getIncidents:getIncidents', __args__, opts=opts, typ=GetIncidentsResult).value

    return AwaitableGetIncidentsResult(
        condition=pulumi.get(__ret__, 'condition'),
        from_date=pulumi.get(__ret__, 'from_date'),
        id=pulumi.get(__ret__, 'id'),
        incidents=pulumi.get(__ret__, 'incidents'),
        region=pulumi.get(__ret__, 'region'),
        to_date=pulumi.get(__ret__, 'to_date'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_incidents_output(condition: Optional[pulumi.Input[Optional[Union['GetIncidentsConditionArgs', 'GetIncidentsConditionArgsDict']]]] = None,
                         from_date: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         to_date: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIncidentsResult]:
    """
    Use this data source to get the list of SecMaster incidents.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    from_date = config.require_object("fromDate")
    to_date = config.require_object("toDate")
    test = huaweicloud.secmaster.get_incidents(workspace_id=workspace_id,
        from_date=from_date,
        to_date=to_date,
        condition={
            "conditions": [{
                "name": "severity",
                "datas": [
                    "severity",
                    "=",
                    "Tips",
                ],
            }],
            "logics": ["severity"],
        })
    ```


    :param Union['GetIncidentsConditionArgs', 'GetIncidentsConditionArgsDict'] condition: Specifies the search condition expression.
           The condition structure is documented below.
           
           <a name="condition"></a>
           The `condition` block supports:
    :param _builtins.str from_date: Specifies the search start time. For example: **2023-04-18T13:00:00.000+08:00**.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str to_date: Specifies the search end time. For example: **2023-04-18T13:00:00.000+08:00**.
    :param _builtins.str workspace_id: Specifies the ID of the workspace to which the incident belongs.
    """
    __args__ = dict()
    __args__['condition'] = condition
    __args__['fromDate'] = from_date
    __args__['region'] = region
    __args__['toDate'] = to_date
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getIncidents:getIncidents', __args__, opts=opts, typ=GetIncidentsResult)
    return __ret__.apply(lambda __response__: GetIncidentsResult(
        condition=pulumi.get(__response__, 'condition'),
        from_date=pulumi.get(__response__, 'from_date'),
        id=pulumi.get(__response__, 'id'),
        incidents=pulumi.get(__response__, 'incidents'),
        region=pulumi.get(__response__, 'region'),
        to_date=pulumi.get(__response__, 'to_date'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
