# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CatalogueArgs', 'Catalogue']

@pulumi.input_type
class CatalogueArgs:
    def __init__(__self__, *,
                 workspace_id: pulumi.Input[_builtins.str],
                 catalogue_address: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 layout_id: Optional[pulumi.Input[_builtins.str]] = None,
                 layout_name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_alias_en: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_alias_zh: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_catalogue: Optional[pulumi.Input[_builtins.str]] = None,
                 publisher_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 second_alias_en: Optional[pulumi.Input[_builtins.str]] = None,
                 second_alias_zh: Optional[pulumi.Input[_builtins.str]] = None,
                 second_catalogue: Optional[pulumi.Input[_builtins.str]] = None,
                 second_catalogue_code: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Catalogue resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the catalogue belongs.
        :param pulumi.Input[_builtins.str] catalogue_address: Specifies the address of the directory.
        :param pulumi.Input[_builtins.str] layout_id: Specifies the ID of the layout.
        :param pulumi.Input[_builtins.str] layout_name: Specifies the name of the layout.
        :param pulumi.Input[_builtins.str] parent_alias_en: Specifies the English alias of the first-level directory.
        :param pulumi.Input[_builtins.str] parent_alias_zh: Specifies the Chinese alias of the first-level directory.
        :param pulumi.Input[_builtins.str] parent_catalogue: Specifies the name of the first-level directory.
        :param pulumi.Input[_builtins.str] publisher_name: Specifies the name of the publisher.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] second_alias_en: Specifies the English alias of the second-level directory.
        :param pulumi.Input[_builtins.str] second_alias_zh: Specifies the Chinese alias of the second-level directory.
        :param pulumi.Input[_builtins.str] second_catalogue: Specifies the name of the second-level directory.
        :param pulumi.Input[_builtins.str] second_catalogue_code: Specifies the code of the second-level directory.
               This field is not returned in the API response body.
        """
        pulumi.set(__self__, "workspace_id", workspace_id)
        if catalogue_address is not None:
            pulumi.set(__self__, "catalogue_address", catalogue_address)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if layout_id is not None:
            pulumi.set(__self__, "layout_id", layout_id)
        if layout_name is not None:
            pulumi.set(__self__, "layout_name", layout_name)
        if parent_alias_en is not None:
            pulumi.set(__self__, "parent_alias_en", parent_alias_en)
        if parent_alias_zh is not None:
            pulumi.set(__self__, "parent_alias_zh", parent_alias_zh)
        if parent_catalogue is not None:
            pulumi.set(__self__, "parent_catalogue", parent_catalogue)
        if publisher_name is not None:
            pulumi.set(__self__, "publisher_name", publisher_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if second_alias_en is not None:
            pulumi.set(__self__, "second_alias_en", second_alias_en)
        if second_alias_zh is not None:
            pulumi.set(__self__, "second_alias_zh", second_alias_zh)
        if second_catalogue is not None:
            pulumi.set(__self__, "second_catalogue", second_catalogue)
        if second_catalogue_code is not None:
            pulumi.set(__self__, "second_catalogue_code", second_catalogue_code)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workspace to which the catalogue belongs.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="catalogueAddress")
    def catalogue_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the address of the directory.
        """
        return pulumi.get(self, "catalogue_address")

    @catalogue_address.setter
    def catalogue_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalogue_address", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="layoutId")
    def layout_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the layout.
        """
        return pulumi.get(self, "layout_id")

    @layout_id.setter
    def layout_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "layout_id", value)

    @_builtins.property
    @pulumi.getter(name="layoutName")
    def layout_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the layout.
        """
        return pulumi.get(self, "layout_name")

    @layout_name.setter
    def layout_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "layout_name", value)

    @_builtins.property
    @pulumi.getter(name="parentAliasEn")
    def parent_alias_en(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the English alias of the first-level directory.
        """
        return pulumi.get(self, "parent_alias_en")

    @parent_alias_en.setter
    def parent_alias_en(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_alias_en", value)

    @_builtins.property
    @pulumi.getter(name="parentAliasZh")
    def parent_alias_zh(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Chinese alias of the first-level directory.
        """
        return pulumi.get(self, "parent_alias_zh")

    @parent_alias_zh.setter
    def parent_alias_zh(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_alias_zh", value)

    @_builtins.property
    @pulumi.getter(name="parentCatalogue")
    def parent_catalogue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the first-level directory.
        """
        return pulumi.get(self, "parent_catalogue")

    @parent_catalogue.setter
    def parent_catalogue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_catalogue", value)

    @_builtins.property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the publisher.
        """
        return pulumi.get(self, "publisher_name")

    @publisher_name.setter
    def publisher_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "publisher_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secondAliasEn")
    def second_alias_en(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the English alias of the second-level directory.
        """
        return pulumi.get(self, "second_alias_en")

    @second_alias_en.setter
    def second_alias_en(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "second_alias_en", value)

    @_builtins.property
    @pulumi.getter(name="secondAliasZh")
    def second_alias_zh(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Chinese alias of the second-level directory.
        """
        return pulumi.get(self, "second_alias_zh")

    @second_alias_zh.setter
    def second_alias_zh(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "second_alias_zh", value)

    @_builtins.property
    @pulumi.getter(name="secondCatalogue")
    def second_catalogue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the second-level directory.
        """
        return pulumi.get(self, "second_catalogue")

    @second_catalogue.setter
    def second_catalogue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "second_catalogue", value)

    @_builtins.property
    @pulumi.getter(name="secondCatalogueCode")
    def second_catalogue_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the code of the second-level directory.
        This field is not returned in the API response body.
        """
        return pulumi.get(self, "second_catalogue_code")

    @second_catalogue_code.setter
    def second_catalogue_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "second_catalogue_code", value)


@pulumi.input_type
class _CatalogueState:
    def __init__(__self__, *,
                 catalogue_address: Optional[pulumi.Input[_builtins.str]] = None,
                 catalogue_status: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_card_area: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_display: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_landing_page: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_navigation: Optional[pulumi.Input[_builtins.bool]] = None,
                 layout_id: Optional[pulumi.Input[_builtins.str]] = None,
                 layout_name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_alias_en: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_alias_zh: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_catalogue: Optional[pulumi.Input[_builtins.str]] = None,
                 publisher_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 second_alias_en: Optional[pulumi.Input[_builtins.str]] = None,
                 second_alias_zh: Optional[pulumi.Input[_builtins.str]] = None,
                 second_catalogue: Optional[pulumi.Input[_builtins.str]] = None,
                 second_catalogue_code: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Catalogue resources.
        :param pulumi.Input[_builtins.str] catalogue_address: Specifies the address of the directory.
        :param pulumi.Input[_builtins.bool] catalogue_status: The flag indicating whether it is a built-in directory.
        :param pulumi.Input[_builtins.bool] is_card_area: The flag indicating whether to display the card area.
        :param pulumi.Input[_builtins.bool] is_display: The flag indicating whether to display the directory.
        :param pulumi.Input[_builtins.bool] is_landing_page: The flag indicating whether it is a landing page.
        :param pulumi.Input[_builtins.bool] is_navigation: The flag indicating whether to display the breadcrumb navigation.
        :param pulumi.Input[_builtins.str] layout_id: Specifies the ID of the layout.
        :param pulumi.Input[_builtins.str] layout_name: Specifies the name of the layout.
        :param pulumi.Input[_builtins.str] parent_alias_en: Specifies the English alias of the first-level directory.
        :param pulumi.Input[_builtins.str] parent_alias_zh: Specifies the Chinese alias of the first-level directory.
        :param pulumi.Input[_builtins.str] parent_catalogue: Specifies the name of the first-level directory.
        :param pulumi.Input[_builtins.str] publisher_name: Specifies the name of the publisher.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] second_alias_en: Specifies the English alias of the second-level directory.
        :param pulumi.Input[_builtins.str] second_alias_zh: Specifies the Chinese alias of the second-level directory.
        :param pulumi.Input[_builtins.str] second_catalogue: Specifies the name of the second-level directory.
        :param pulumi.Input[_builtins.str] second_catalogue_code: Specifies the code of the second-level directory.
               This field is not returned in the API response body.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the catalogue belongs.
        """
        if catalogue_address is not None:
            pulumi.set(__self__, "catalogue_address", catalogue_address)
        if catalogue_status is not None:
            pulumi.set(__self__, "catalogue_status", catalogue_status)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if is_card_area is not None:
            pulumi.set(__self__, "is_card_area", is_card_area)
        if is_display is not None:
            pulumi.set(__self__, "is_display", is_display)
        if is_landing_page is not None:
            pulumi.set(__self__, "is_landing_page", is_landing_page)
        if is_navigation is not None:
            pulumi.set(__self__, "is_navigation", is_navigation)
        if layout_id is not None:
            pulumi.set(__self__, "layout_id", layout_id)
        if layout_name is not None:
            pulumi.set(__self__, "layout_name", layout_name)
        if parent_alias_en is not None:
            pulumi.set(__self__, "parent_alias_en", parent_alias_en)
        if parent_alias_zh is not None:
            pulumi.set(__self__, "parent_alias_zh", parent_alias_zh)
        if parent_catalogue is not None:
            pulumi.set(__self__, "parent_catalogue", parent_catalogue)
        if publisher_name is not None:
            pulumi.set(__self__, "publisher_name", publisher_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if second_alias_en is not None:
            pulumi.set(__self__, "second_alias_en", second_alias_en)
        if second_alias_zh is not None:
            pulumi.set(__self__, "second_alias_zh", second_alias_zh)
        if second_catalogue is not None:
            pulumi.set(__self__, "second_catalogue", second_catalogue)
        if second_catalogue_code is not None:
            pulumi.set(__self__, "second_catalogue_code", second_catalogue_code)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="catalogueAddress")
    def catalogue_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the address of the directory.
        """
        return pulumi.get(self, "catalogue_address")

    @catalogue_address.setter
    def catalogue_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalogue_address", value)

    @_builtins.property
    @pulumi.getter(name="catalogueStatus")
    def catalogue_status(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The flag indicating whether it is a built-in directory.
        """
        return pulumi.get(self, "catalogue_status")

    @catalogue_status.setter
    def catalogue_status(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "catalogue_status", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="isCardArea")
    def is_card_area(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The flag indicating whether to display the card area.
        """
        return pulumi.get(self, "is_card_area")

    @is_card_area.setter
    def is_card_area(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_card_area", value)

    @_builtins.property
    @pulumi.getter(name="isDisplay")
    def is_display(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The flag indicating whether to display the directory.
        """
        return pulumi.get(self, "is_display")

    @is_display.setter
    def is_display(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_display", value)

    @_builtins.property
    @pulumi.getter(name="isLandingPage")
    def is_landing_page(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The flag indicating whether it is a landing page.
        """
        return pulumi.get(self, "is_landing_page")

    @is_landing_page.setter
    def is_landing_page(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_landing_page", value)

    @_builtins.property
    @pulumi.getter(name="isNavigation")
    def is_navigation(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The flag indicating whether to display the breadcrumb navigation.
        """
        return pulumi.get(self, "is_navigation")

    @is_navigation.setter
    def is_navigation(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_navigation", value)

    @_builtins.property
    @pulumi.getter(name="layoutId")
    def layout_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the layout.
        """
        return pulumi.get(self, "layout_id")

    @layout_id.setter
    def layout_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "layout_id", value)

    @_builtins.property
    @pulumi.getter(name="layoutName")
    def layout_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the layout.
        """
        return pulumi.get(self, "layout_name")

    @layout_name.setter
    def layout_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "layout_name", value)

    @_builtins.property
    @pulumi.getter(name="parentAliasEn")
    def parent_alias_en(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the English alias of the first-level directory.
        """
        return pulumi.get(self, "parent_alias_en")

    @parent_alias_en.setter
    def parent_alias_en(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_alias_en", value)

    @_builtins.property
    @pulumi.getter(name="parentAliasZh")
    def parent_alias_zh(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Chinese alias of the first-level directory.
        """
        return pulumi.get(self, "parent_alias_zh")

    @parent_alias_zh.setter
    def parent_alias_zh(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_alias_zh", value)

    @_builtins.property
    @pulumi.getter(name="parentCatalogue")
    def parent_catalogue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the first-level directory.
        """
        return pulumi.get(self, "parent_catalogue")

    @parent_catalogue.setter
    def parent_catalogue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_catalogue", value)

    @_builtins.property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the publisher.
        """
        return pulumi.get(self, "publisher_name")

    @publisher_name.setter
    def publisher_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "publisher_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secondAliasEn")
    def second_alias_en(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the English alias of the second-level directory.
        """
        return pulumi.get(self, "second_alias_en")

    @second_alias_en.setter
    def second_alias_en(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "second_alias_en", value)

    @_builtins.property
    @pulumi.getter(name="secondAliasZh")
    def second_alias_zh(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Chinese alias of the second-level directory.
        """
        return pulumi.get(self, "second_alias_zh")

    @second_alias_zh.setter
    def second_alias_zh(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "second_alias_zh", value)

    @_builtins.property
    @pulumi.getter(name="secondCatalogue")
    def second_catalogue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the second-level directory.
        """
        return pulumi.get(self, "second_catalogue")

    @second_catalogue.setter
    def second_catalogue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "second_catalogue", value)

    @_builtins.property
    @pulumi.getter(name="secondCatalogueCode")
    def second_catalogue_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the code of the second-level directory.
        This field is not returned in the API response body.
        """
        return pulumi.get(self, "second_catalogue_code")

    @second_catalogue_code.setter
    def second_catalogue_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "second_catalogue_code", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workspace to which the catalogue belongs.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:secmaster/catalogue:Catalogue")
class Catalogue(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalogue_address: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 layout_id: Optional[pulumi.Input[_builtins.str]] = None,
                 layout_name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_alias_en: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_alias_zh: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_catalogue: Optional[pulumi.Input[_builtins.str]] = None,
                 publisher_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 second_alias_en: Optional[pulumi.Input[_builtins.str]] = None,
                 second_alias_zh: Optional[pulumi.Input[_builtins.str]] = None,
                 second_catalogue: Optional[pulumi.Input[_builtins.str]] = None,
                 second_catalogue_code: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SecMaster catalogue resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        layout_id = config.require_object("layoutId")
        catalogue_address = config.require_object("catalogueAddress")
        second_catalogue_code = config.require_object("secondCatalogueCode")
        test = huaweicloud.secmaster.Catalogue("test",
            workspace_id=workspace_id,
            layout_id=layout_id,
            catalogue_address=catalogue_address,
            second_catalogue_code=second_catalogue_code,
            parent_catalogue="first-level-dir",
            parent_alias_en="first-level-dir-en",
            parent_alias_zh="一级目录",
            second_catalogue="second-level-dir",
            second_alias_en="second-level-dir-en",
            second_alias_zh="二级目录")
        ```

        ## Import

        The catalogue can be imported using the workspace ID and the catalogue ID, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/catalogue:Catalogue test <workspace_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `second_catalogue_code`.

        It is generally recommended running `pulumi preview` after importing a catalogue.

        You can then decide if changes should be applied to the catalogue, or the resource definition should be updated to

        align with the catalogue. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_secmaster_catalogue" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              second_catalogue_code,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] catalogue_address: Specifies the address of the directory.
        :param pulumi.Input[_builtins.str] layout_id: Specifies the ID of the layout.
        :param pulumi.Input[_builtins.str] layout_name: Specifies the name of the layout.
        :param pulumi.Input[_builtins.str] parent_alias_en: Specifies the English alias of the first-level directory.
        :param pulumi.Input[_builtins.str] parent_alias_zh: Specifies the Chinese alias of the first-level directory.
        :param pulumi.Input[_builtins.str] parent_catalogue: Specifies the name of the first-level directory.
        :param pulumi.Input[_builtins.str] publisher_name: Specifies the name of the publisher.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] second_alias_en: Specifies the English alias of the second-level directory.
        :param pulumi.Input[_builtins.str] second_alias_zh: Specifies the Chinese alias of the second-level directory.
        :param pulumi.Input[_builtins.str] second_catalogue: Specifies the name of the second-level directory.
        :param pulumi.Input[_builtins.str] second_catalogue_code: Specifies the code of the second-level directory.
               This field is not returned in the API response body.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the catalogue belongs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CatalogueArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SecMaster catalogue resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        layout_id = config.require_object("layoutId")
        catalogue_address = config.require_object("catalogueAddress")
        second_catalogue_code = config.require_object("secondCatalogueCode")
        test = huaweicloud.secmaster.Catalogue("test",
            workspace_id=workspace_id,
            layout_id=layout_id,
            catalogue_address=catalogue_address,
            second_catalogue_code=second_catalogue_code,
            parent_catalogue="first-level-dir",
            parent_alias_en="first-level-dir-en",
            parent_alias_zh="一级目录",
            second_catalogue="second-level-dir",
            second_alias_en="second-level-dir-en",
            second_alias_zh="二级目录")
        ```

        ## Import

        The catalogue can be imported using the workspace ID and the catalogue ID, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:secmaster/catalogue:Catalogue test <workspace_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `second_catalogue_code`.

        It is generally recommended running `pulumi preview` after importing a catalogue.

        You can then decide if changes should be applied to the catalogue, or the resource definition should be updated to

        align with the catalogue. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_secmaster_catalogue" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              second_catalogue_code,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param CatalogueArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CatalogueArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalogue_address: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 layout_id: Optional[pulumi.Input[_builtins.str]] = None,
                 layout_name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_alias_en: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_alias_zh: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_catalogue: Optional[pulumi.Input[_builtins.str]] = None,
                 publisher_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 second_alias_en: Optional[pulumi.Input[_builtins.str]] = None,
                 second_alias_zh: Optional[pulumi.Input[_builtins.str]] = None,
                 second_catalogue: Optional[pulumi.Input[_builtins.str]] = None,
                 second_catalogue_code: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CatalogueArgs.__new__(CatalogueArgs)

            __props__.__dict__["catalogue_address"] = catalogue_address
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["layout_id"] = layout_id
            __props__.__dict__["layout_name"] = layout_name
            __props__.__dict__["parent_alias_en"] = parent_alias_en
            __props__.__dict__["parent_alias_zh"] = parent_alias_zh
            __props__.__dict__["parent_catalogue"] = parent_catalogue
            __props__.__dict__["publisher_name"] = publisher_name
            __props__.__dict__["region"] = region
            __props__.__dict__["second_alias_en"] = second_alias_en
            __props__.__dict__["second_alias_zh"] = second_alias_zh
            __props__.__dict__["second_catalogue"] = second_catalogue
            __props__.__dict__["second_catalogue_code"] = second_catalogue_code
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["catalogue_status"] = None
            __props__.__dict__["is_card_area"] = None
            __props__.__dict__["is_display"] = None
            __props__.__dict__["is_landing_page"] = None
            __props__.__dict__["is_navigation"] = None
        super(Catalogue, __self__).__init__(
            'huaweicloud:secmaster/catalogue:Catalogue',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            catalogue_address: Optional[pulumi.Input[_builtins.str]] = None,
            catalogue_status: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            is_card_area: Optional[pulumi.Input[_builtins.bool]] = None,
            is_display: Optional[pulumi.Input[_builtins.bool]] = None,
            is_landing_page: Optional[pulumi.Input[_builtins.bool]] = None,
            is_navigation: Optional[pulumi.Input[_builtins.bool]] = None,
            layout_id: Optional[pulumi.Input[_builtins.str]] = None,
            layout_name: Optional[pulumi.Input[_builtins.str]] = None,
            parent_alias_en: Optional[pulumi.Input[_builtins.str]] = None,
            parent_alias_zh: Optional[pulumi.Input[_builtins.str]] = None,
            parent_catalogue: Optional[pulumi.Input[_builtins.str]] = None,
            publisher_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            second_alias_en: Optional[pulumi.Input[_builtins.str]] = None,
            second_alias_zh: Optional[pulumi.Input[_builtins.str]] = None,
            second_catalogue: Optional[pulumi.Input[_builtins.str]] = None,
            second_catalogue_code: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Catalogue':
        """
        Get an existing Catalogue resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] catalogue_address: Specifies the address of the directory.
        :param pulumi.Input[_builtins.bool] catalogue_status: The flag indicating whether it is a built-in directory.
        :param pulumi.Input[_builtins.bool] is_card_area: The flag indicating whether to display the card area.
        :param pulumi.Input[_builtins.bool] is_display: The flag indicating whether to display the directory.
        :param pulumi.Input[_builtins.bool] is_landing_page: The flag indicating whether it is a landing page.
        :param pulumi.Input[_builtins.bool] is_navigation: The flag indicating whether to display the breadcrumb navigation.
        :param pulumi.Input[_builtins.str] layout_id: Specifies the ID of the layout.
        :param pulumi.Input[_builtins.str] layout_name: Specifies the name of the layout.
        :param pulumi.Input[_builtins.str] parent_alias_en: Specifies the English alias of the first-level directory.
        :param pulumi.Input[_builtins.str] parent_alias_zh: Specifies the Chinese alias of the first-level directory.
        :param pulumi.Input[_builtins.str] parent_catalogue: Specifies the name of the first-level directory.
        :param pulumi.Input[_builtins.str] publisher_name: Specifies the name of the publisher.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] second_alias_en: Specifies the English alias of the second-level directory.
        :param pulumi.Input[_builtins.str] second_alias_zh: Specifies the Chinese alias of the second-level directory.
        :param pulumi.Input[_builtins.str] second_catalogue: Specifies the name of the second-level directory.
        :param pulumi.Input[_builtins.str] second_catalogue_code: Specifies the code of the second-level directory.
               This field is not returned in the API response body.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the catalogue belongs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CatalogueState.__new__(_CatalogueState)

        __props__.__dict__["catalogue_address"] = catalogue_address
        __props__.__dict__["catalogue_status"] = catalogue_status
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["is_card_area"] = is_card_area
        __props__.__dict__["is_display"] = is_display
        __props__.__dict__["is_landing_page"] = is_landing_page
        __props__.__dict__["is_navigation"] = is_navigation
        __props__.__dict__["layout_id"] = layout_id
        __props__.__dict__["layout_name"] = layout_name
        __props__.__dict__["parent_alias_en"] = parent_alias_en
        __props__.__dict__["parent_alias_zh"] = parent_alias_zh
        __props__.__dict__["parent_catalogue"] = parent_catalogue
        __props__.__dict__["publisher_name"] = publisher_name
        __props__.__dict__["region"] = region
        __props__.__dict__["second_alias_en"] = second_alias_en
        __props__.__dict__["second_alias_zh"] = second_alias_zh
        __props__.__dict__["second_catalogue"] = second_catalogue
        __props__.__dict__["second_catalogue_code"] = second_catalogue_code
        __props__.__dict__["workspace_id"] = workspace_id
        return Catalogue(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="catalogueAddress")
    def catalogue_address(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the address of the directory.
        """
        return pulumi.get(self, "catalogue_address")

    @_builtins.property
    @pulumi.getter(name="catalogueStatus")
    def catalogue_status(self) -> pulumi.Output[_builtins.bool]:
        """
        The flag indicating whether it is a built-in directory.
        """
        return pulumi.get(self, "catalogue_status")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="isCardArea")
    def is_card_area(self) -> pulumi.Output[_builtins.bool]:
        """
        The flag indicating whether to display the card area.
        """
        return pulumi.get(self, "is_card_area")

    @_builtins.property
    @pulumi.getter(name="isDisplay")
    def is_display(self) -> pulumi.Output[_builtins.bool]:
        """
        The flag indicating whether to display the directory.
        """
        return pulumi.get(self, "is_display")

    @_builtins.property
    @pulumi.getter(name="isLandingPage")
    def is_landing_page(self) -> pulumi.Output[_builtins.bool]:
        """
        The flag indicating whether it is a landing page.
        """
        return pulumi.get(self, "is_landing_page")

    @_builtins.property
    @pulumi.getter(name="isNavigation")
    def is_navigation(self) -> pulumi.Output[_builtins.bool]:
        """
        The flag indicating whether to display the breadcrumb navigation.
        """
        return pulumi.get(self, "is_navigation")

    @_builtins.property
    @pulumi.getter(name="layoutId")
    def layout_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the layout.
        """
        return pulumi.get(self, "layout_id")

    @_builtins.property
    @pulumi.getter(name="layoutName")
    def layout_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the layout.
        """
        return pulumi.get(self, "layout_name")

    @_builtins.property
    @pulumi.getter(name="parentAliasEn")
    def parent_alias_en(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the English alias of the first-level directory.
        """
        return pulumi.get(self, "parent_alias_en")

    @_builtins.property
    @pulumi.getter(name="parentAliasZh")
    def parent_alias_zh(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the Chinese alias of the first-level directory.
        """
        return pulumi.get(self, "parent_alias_zh")

    @_builtins.property
    @pulumi.getter(name="parentCatalogue")
    def parent_catalogue(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the first-level directory.
        """
        return pulumi.get(self, "parent_catalogue")

    @_builtins.property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the publisher.
        """
        return pulumi.get(self, "publisher_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secondAliasEn")
    def second_alias_en(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the English alias of the second-level directory.
        """
        return pulumi.get(self, "second_alias_en")

    @_builtins.property
    @pulumi.getter(name="secondAliasZh")
    def second_alias_zh(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the Chinese alias of the second-level directory.
        """
        return pulumi.get(self, "second_alias_zh")

    @_builtins.property
    @pulumi.getter(name="secondCatalogue")
    def second_catalogue(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the second-level directory.
        """
        return pulumi.get(self, "second_catalogue")

    @_builtins.property
    @pulumi.getter(name="secondCatalogueCode")
    def second_catalogue_code(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the code of the second-level directory.
        This field is not returned in the API response body.
        """
        return pulumi.get(self, "second_catalogue_code")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workspace to which the catalogue belongs.
        """
        return pulumi.get(self, "workspace_id")

