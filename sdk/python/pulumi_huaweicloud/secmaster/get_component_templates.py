# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetComponentTemplatesResult',
    'AwaitableGetComponentTemplatesResult',
    'get_component_templates',
    'get_component_templates_output',
]

@pulumi.output_type
class GetComponentTemplatesResult:
    """
    A collection of values returned by getComponentTemplates.
    """
    def __init__(__self__, component_id=None, file_type=None, id=None, records=None, region=None, sort_dir=None, sort_key=None, workspace_id=None):
        if component_id and not isinstance(component_id, str):
            raise TypeError("Expected argument 'component_id' to be a str")
        pulumi.set(__self__, "component_id", component_id)
        if file_type and not isinstance(file_type, str):
            raise TypeError("Expected argument 'file_type' to be a str")
        pulumi.set(__self__, "file_type", file_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> _builtins.str:
        """
        The component ID.
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[_builtins.str]:
        """
        The configuration file type. Can be used to identify the type of configuration file.
        The valid values are **JVM**, **LOG4J2**, and **YML**.
        """
        return pulumi.get(self, "file_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetComponentTemplatesRecordResult']:
        """
        The component templates list.
        """
        return pulumi.get(self, "records")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetComponentTemplatesResult(GetComponentTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComponentTemplatesResult(
            component_id=self.component_id,
            file_type=self.file_type,
            id=self.id,
            records=self.records,
            region=self.region,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            workspace_id=self.workspace_id)


def get_component_templates(component_id: Optional[_builtins.str] = None,
                            file_type: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            sort_dir: Optional[_builtins.str] = None,
                            sort_key: Optional[_builtins.str] = None,
                            workspace_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComponentTemplatesResult:
    """
    Use this data source to get the list of SecMaster component templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    component_id = config.require_object("componentId")
    test = huaweicloud.secmaster.get_component_templates(workspace_id=workspace_id,
        component_id=component_id)
    ```


    :param _builtins.str component_id: Specifies the component ID.
    :param _builtins.str file_type: Specifies the file type. The valid values are **JVM**, **LOG4J2**, and **YML**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sorting order. Supported values are **ASC** and **DESC**.
    :param _builtins.str sort_key: Specifies the attribute fields for sorting.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['componentId'] = component_id
    __args__['fileType'] = file_type
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:secmaster/getComponentTemplates:getComponentTemplates', __args__, opts=opts, typ=GetComponentTemplatesResult).value

    return AwaitableGetComponentTemplatesResult(
        component_id=pulumi.get(__ret__, 'component_id'),
        file_type=pulumi.get(__ret__, 'file_type'),
        id=pulumi.get(__ret__, 'id'),
        records=pulumi.get(__ret__, 'records'),
        region=pulumi.get(__ret__, 'region'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_component_templates_output(component_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   file_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetComponentTemplatesResult]:
    """
    Use this data source to get the list of SecMaster component templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    component_id = config.require_object("componentId")
    test = huaweicloud.secmaster.get_component_templates(workspace_id=workspace_id,
        component_id=component_id)
    ```


    :param _builtins.str component_id: Specifies the component ID.
    :param _builtins.str file_type: Specifies the file type. The valid values are **JVM**, **LOG4J2**, and **YML**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sorting order. Supported values are **ASC** and **DESC**.
    :param _builtins.str sort_key: Specifies the attribute fields for sorting.
    :param _builtins.str workspace_id: Specifies the workspace ID.
    """
    __args__ = dict()
    __args__['componentId'] = component_id
    __args__['fileType'] = file_type
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:secmaster/getComponentTemplates:getComponentTemplates', __args__, opts=opts, typ=GetComponentTemplatesResult)
    return __ret__.apply(lambda __response__: GetComponentTemplatesResult(
        component_id=pulumi.get(__response__, 'component_id'),
        file_type=pulumi.get(__response__, 'file_type'),
        id=pulumi.get(__response__, 'id'),
        records=pulumi.get(__response__, 'records'),
        region=pulumi.get(__response__, 'region'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
