# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['BlackWhiteListArgs', 'BlackWhiteList']

@pulumi.input_type
class BlackWhiteListArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 ips: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 type: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BlackWhiteList resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AAD instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ips: Specifies the IP address list.
        :param pulumi.Input[_builtins.str] type: Specifies the rule type. Valid values are **black** and **white**.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "type", type)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the AAD instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def ips(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the IP address list.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "ips", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the rule type. Valid values are **black** and **white**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)


@pulumi.input_type
class _BlackWhiteListState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BlackWhiteList resources.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AAD instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ips: Specifies the IP address list.
        :param pulumi.Input[_builtins.str] type: Specifies the rule type. Valid values are **black** and **white**.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AAD instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the IP address list.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ips", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rule type. Valid values are **black** and **white**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:AdvancedAntiDDos/blackWhiteList:BlackWhiteList")
class BlackWhiteList(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a black white list resource of Advanced Anti-DDos service within HuaweiCloud.

        ## Example Usage

        ### Add whitelist

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        white_test = huaweicloud.advancedantiddos.BlackWhiteList("white_test",
            instance_id=instance_id,
            type="white",
            ips=[
                "11.1.2.114",
                "11.1.2.115",
            ])
        ```

        ### Add blacklist

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        black_test = huaweicloud.advancedantiddos.BlackWhiteList("black_test",
            instance_id=instance_id,
            type="black",
            ips=[
                "11.1.2.112",
                "11.1.2.113",
            ])
        ```

        ## Import

        The AAD black white list resource can be imported using the `instance_id` and `type`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:AdvancedAntiDDos/blackWhiteList:BlackWhiteList test <instance_id>/<type>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AAD instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ips: Specifies the IP address list.
        :param pulumi.Input[_builtins.str] type: Specifies the rule type. Valid values are **black** and **white**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BlackWhiteListArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a black white list resource of Advanced Anti-DDos service within HuaweiCloud.

        ## Example Usage

        ### Add whitelist

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        white_test = huaweicloud.advancedantiddos.BlackWhiteList("white_test",
            instance_id=instance_id,
            type="white",
            ips=[
                "11.1.2.114",
                "11.1.2.115",
            ])
        ```

        ### Add blacklist

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        black_test = huaweicloud.advancedantiddos.BlackWhiteList("black_test",
            instance_id=instance_id,
            type="black",
            ips=[
                "11.1.2.112",
                "11.1.2.113",
            ])
        ```

        ## Import

        The AAD black white list resource can be imported using the `instance_id` and `type`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:AdvancedAntiDDos/blackWhiteList:BlackWhiteList test <instance_id>/<type>
        ```

        :param str resource_name: The name of the resource.
        :param BlackWhiteListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BlackWhiteListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BlackWhiteListArgs.__new__(BlackWhiteListArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if ips is None and not opts.urn:
                raise TypeError("Missing required property 'ips'")
            __props__.__dict__["ips"] = ips
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(BlackWhiteList, __self__).__init__(
            'huaweicloud:AdvancedAntiDDos/blackWhiteList:BlackWhiteList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'BlackWhiteList':
        """
        Get an existing BlackWhiteList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AAD instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ips: Specifies the IP address list.
        :param pulumi.Input[_builtins.str] type: Specifies the rule type. Valid values are **black** and **white**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BlackWhiteListState.__new__(_BlackWhiteListState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["ips"] = ips
        __props__.__dict__["type"] = type
        return BlackWhiteList(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the AAD instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def ips(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the IP address list.
        """
        return pulumi.get(self, "ips")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the rule type. Valid values are **black** and **white**.
        """
        return pulumi.get(self, "type")

