# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGeoipRulesResult',
    'AwaitableGetGeoipRulesResult',
    'get_geoip_rules',
    'get_geoip_rules_output',
]

@pulumi.output_type
class GetGeoipRulesResult:
    """
    A collection of values returned by getGeoipRules.
    """
    def __init__(__self__, domain_name=None, id=None, items=None, overseas_type=None):
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if overseas_type and not isinstance(overseas_type, str):
            raise TypeError("Expected argument 'overseas_type' to be a str")
        pulumi.set(__self__, "overseas_type", overseas_type)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetGeoipRulesItemResult']:
        """
        The list of Geo IP rules.
        The items structure is documented below.
        """
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter(name="overseasType")
    def overseas_type(self) -> _builtins.str:
        """
        The protection region.
        """
        return pulumi.get(self, "overseas_type")


class AwaitableGetGeoipRulesResult(GetGeoipRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGeoipRulesResult(
            domain_name=self.domain_name,
            id=self.id,
            items=self.items,
            overseas_type=self.overseas_type)


def get_geoip_rules(domain_name: Optional[_builtins.str] = None,
                    overseas_type: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGeoipRulesResult:
    """
    Use this data source to get the list of Geo IP rules within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_name = config.require_object("domainName")
    test = huaweicloud.AdvancedAntiDDos.get_geoip_rules(domain_name=domain_name,
        overseas_type="0")
    ```


    :param _builtins.str domain_name: Specifies the domain name to query.
    :param _builtins.str overseas_type: Specifies the protection region.
    """
    __args__ = dict()
    __args__['domainName'] = domain_name
    __args__['overseasType'] = overseas_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:AdvancedAntiDDos/getGeoipRules:getGeoipRules', __args__, opts=opts, typ=GetGeoipRulesResult).value

    return AwaitableGetGeoipRulesResult(
        domain_name=pulumi.get(__ret__, 'domain_name'),
        id=pulumi.get(__ret__, 'id'),
        items=pulumi.get(__ret__, 'items'),
        overseas_type=pulumi.get(__ret__, 'overseas_type'))
def get_geoip_rules_output(domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                           overseas_type: Optional[pulumi.Input[_builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGeoipRulesResult]:
    """
    Use this data source to get the list of Geo IP rules within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_name = config.require_object("domainName")
    test = huaweicloud.AdvancedAntiDDos.get_geoip_rules(domain_name=domain_name,
        overseas_type="0")
    ```


    :param _builtins.str domain_name: Specifies the domain name to query.
    :param _builtins.str overseas_type: Specifies the protection region.
    """
    __args__ = dict()
    __args__['domainName'] = domain_name
    __args__['overseasType'] = overseas_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:AdvancedAntiDDos/getGeoipRules:getGeoipRules', __args__, opts=opts, typ=GetGeoipRulesResult)
    return __ret__.apply(lambda __response__: GetGeoipRulesResult(
        domain_name=pulumi.get(__response__, 'domain_name'),
        id=pulumi.get(__response__, 'id'),
        items=pulumi.get(__response__, 'items'),
        overseas_type=pulumi.get(__response__, 'overseas_type')))
