# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ChangeSpecificationUpgradeData',
    'GetAttackEventsEventResult',
    'GetAttackEventsEventBackendResult',
    'GetBandwidthCurveCurveResult',
    'GetBlackWhiteListsIpResult',
    'GetCustomRulesItemResult',
    'GetCustomRulesItemActionResult',
    'GetCustomRulesItemConditionResult',
    'GetDdosAttackProtectionInfoFlowBpResult',
    'GetDdosAttackProtectionInfoFlowPpResult',
    'GetDomainCertificateCertInfoResult',
    'GetDomainsItemResult',
    'GetFlowBlockIpResult',
    'GetFrequencyControlRulesItemResult',
    'GetFrequencyControlRulesItemActionResult',
    'GetFrequencyControlRulesItemActionDetailResult',
    'GetFrequencyControlRulesItemActionDetailResponseResult',
    'GetFrequencyControlRulesItemConditionResult',
    'GetFrequencyControlRulesItemTagConditionResult',
    'GetGeoipRulesItemResult',
    'GetInstanceDomainsDomainResult',
    'GetInstancesItemResult',
    'GetInstancesItemIpResult',
    'GetPolicyBlackWhiteListsBlackResult',
    'GetPolicyBlackWhiteListsWhiteResult',
    'GetQpsCurveCurveResult',
    'GetUnblockRecordsUnblockRecordResult',
    'GetWebProtectionPoliciesOptionResult',
]

@pulumi.output_type
class ChangeSpecificationUpgradeData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicBandwidth":
            suggest = "basic_bandwidth"
        elif key == "bindDomainNum":
            suggest = "bind_domain_num"
        elif key == "elasticBandwidth":
            suggest = "elastic_bandwidth"
        elif key == "portNum":
            suggest = "port_num"
        elif key == "serviceBandwidth":
            suggest = "service_bandwidth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChangeSpecificationUpgradeData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChangeSpecificationUpgradeData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChangeSpecificationUpgradeData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 basic_bandwidth: Optional[_builtins.str] = None,
                 bind_domain_num: Optional[_builtins.int] = None,
                 elastic_bandwidth: Optional[_builtins.str] = None,
                 port_num: Optional[_builtins.int] = None,
                 service_bandwidth: Optional[_builtins.int] = None):
        """
        :param _builtins.str basic_bandwidth: Specifies the basic bandwidth (Gbps).
        :param _builtins.int bind_domain_num: Specifies the bind domain number.
        :param _builtins.str elastic_bandwidth: Specifies the elastic bandwidth (Gbps).
        :param _builtins.int port_num: Specifies the port number.
        :param _builtins.int service_bandwidth: Specifies the service bandwidth (Mbps).
        """
        if basic_bandwidth is not None:
            pulumi.set(__self__, "basic_bandwidth", basic_bandwidth)
        if bind_domain_num is not None:
            pulumi.set(__self__, "bind_domain_num", bind_domain_num)
        if elastic_bandwidth is not None:
            pulumi.set(__self__, "elastic_bandwidth", elastic_bandwidth)
        if port_num is not None:
            pulumi.set(__self__, "port_num", port_num)
        if service_bandwidth is not None:
            pulumi.set(__self__, "service_bandwidth", service_bandwidth)

    @_builtins.property
    @pulumi.getter(name="basicBandwidth")
    def basic_bandwidth(self) -> Optional[_builtins.str]:
        """
        Specifies the basic bandwidth (Gbps).
        """
        return pulumi.get(self, "basic_bandwidth")

    @_builtins.property
    @pulumi.getter(name="bindDomainNum")
    def bind_domain_num(self) -> Optional[_builtins.int]:
        """
        Specifies the bind domain number.
        """
        return pulumi.get(self, "bind_domain_num")

    @_builtins.property
    @pulumi.getter(name="elasticBandwidth")
    def elastic_bandwidth(self) -> Optional[_builtins.str]:
        """
        Specifies the elastic bandwidth (Gbps).
        """
        return pulumi.get(self, "elastic_bandwidth")

    @_builtins.property
    @pulumi.getter(name="portNum")
    def port_num(self) -> Optional[_builtins.int]:
        """
        Specifies the port number.
        """
        return pulumi.get(self, "port_num")

    @_builtins.property
    @pulumi.getter(name="serviceBandwidth")
    def service_bandwidth(self) -> Optional[_builtins.int]:
        """
        Specifies the service bandwidth (Mbps).
        """
        return pulumi.get(self, "service_bandwidth")


@pulumi.output_type
class GetAttackEventsEventResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 backends: Sequence['outputs.GetAttackEventsEventBackendResult'],
                 domain: _builtins.str,
                 id: _builtins.str,
                 sip: _builtins.str,
                 time: _builtins.int,
                 type: _builtins.str,
                 url: _builtins.str):
        """
        :param _builtins.str action: The defense action.
        :param Sequence['GetAttackEventsEventBackendArgs'] backends: The current backend information.  
               The backend structure is documented below.
        :param _builtins.str domain: The attack target domain.
        :param _builtins.str id: The event ID.
        :param _builtins.str sip: Specifies the attack source IP.
        :param _builtins.int time: The attack time.
        :param _builtins.str type: The attack type.
        :param _builtins.str url: The attack URL.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "backends", backends)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "sip", sip)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        The defense action.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def backends(self) -> Sequence['outputs.GetAttackEventsEventBackendResult']:
        """
        The current backend information.  
        The backend structure is documented below.
        """
        return pulumi.get(self, "backends")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        """
        The attack target domain.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The event ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def sip(self) -> _builtins.str:
        """
        Specifies the attack source IP.
        """
        return pulumi.get(self, "sip")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.int:
        """
        The attack time.
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The attack type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The attack URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetAttackEventsEventBackendResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 port: _builtins.int,
                 protocol: _builtins.str):
        """
        :param _builtins.str host: The current backend host value.
        :param _builtins.int port: The current backend port.
        :param _builtins.str protocol: The current backend protocol.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        The current backend host value.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The current backend port.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The current backend protocol.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetBandwidthCurveCurveResult(dict):
    def __init__(__self__, *,
                 in_: _builtins.int,
                 out: _builtins.int,
                 time: _builtins.int):
        """
        :param _builtins.int in_: The ingress bandwidth.
        :param _builtins.int out: The egress bandwidth.
        :param _builtins.int time: The timestamp.
        """
        pulumi.set(__self__, "in_", in_)
        pulumi.set(__self__, "out", out)
        pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter(name="in")
    def in_(self) -> _builtins.int:
        """
        The ingress bandwidth.
        """
        return pulumi.get(self, "in_")

    @_builtins.property
    @pulumi.getter
    def out(self) -> _builtins.int:
        """
        The egress bandwidth.
        """
        return pulumi.get(self, "out")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.int:
        """
        The timestamp.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetBlackWhiteListsIpResult(dict):
    def __init__(__self__, *,
                 desc: _builtins.str,
                 ip: _builtins.str):
        """
        :param _builtins.str desc: The description.
        :param _builtins.str ip: The black white IP address.
        """
        pulumi.set(__self__, "desc", desc)
        pulumi.set(__self__, "ip", ip)

    @_builtins.property
    @pulumi.getter
    def desc(self) -> _builtins.str:
        """
        The description.
        """
        return pulumi.get(self, "desc")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        The black white IP address.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetCustomRulesItemResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetCustomRulesItemActionResult'],
                 conditions: Sequence['outputs.GetCustomRulesItemConditionResult'],
                 domain_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 overseas_type: _builtins.int,
                 priority: _builtins.int,
                 start: _builtins.int,
                 terminal: _builtins.int,
                 time: _builtins.bool):
        """
        :param Sequence['GetCustomRulesItemActionArgs'] actions: The action.  
               The action structure is documented below. .
        :param Sequence['GetCustomRulesItemConditionArgs'] conditions: The conditions.  
               The conditions structure is documented below. .
        :param _builtins.str domain_name: Specifies the domain name.
        :param _builtins.str id: The ID.
        :param _builtins.str name: The name.
        :param _builtins.int overseas_type: Specifies protection zone.  
               The valid values are as follows:
               + **0**: Mainland.
               + **1**: Overseas.
        :param _builtins.int priority: The priority of executing this rule. The smaller the value, the higher the priority.
               Value range `0` to `1,000`.
        :param _builtins.int start: The start timestamp (in seconds) when the precise protection rule takes effect.
        :param _builtins.int terminal: The end timestamp (in seconds) when the precise protection rule takes effect.
        :param _builtins.bool time: The precise protection rule effective time.  
               The valid values are as follows:
               + **true**: custom effective time.
               + **false**: take effect immediately.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "overseas_type", overseas_type)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "start", start)
        pulumi.set(__self__, "terminal", terminal)
        pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetCustomRulesItemActionResult']:
        """
        The action.  
        The action structure is documented below. .
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetCustomRulesItemConditionResult']:
        """
        The conditions.  
        The conditions structure is documented below. .
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        Specifies the domain name.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="overseasType")
    def overseas_type(self) -> _builtins.int:
        """
        Specifies protection zone.  
        The valid values are as follows:
        + **0**: Mainland.
        + **1**: Overseas.
        """
        return pulumi.get(self, "overseas_type")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        The priority of executing this rule. The smaller the value, the higher the priority.
        Value range `0` to `1,000`.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def start(self) -> _builtins.int:
        """
        The start timestamp (in seconds) when the precise protection rule takes effect.
        """
        return pulumi.get(self, "start")

    @_builtins.property
    @pulumi.getter
    def terminal(self) -> _builtins.int:
        """
        The end timestamp (in seconds) when the precise protection rule takes effect.
        """
        return pulumi.get(self, "terminal")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.bool:
        """
        The precise protection rule effective time.  
        The valid values are as follows:
        + **true**: custom effective time.
        + **false**: take effect immediately.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetCustomRulesItemActionResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str):
        """
        :param _builtins.str category: The protection action.  
               The valid values are as follows:
               + **block**: Intercept.
               + **pass**: Allow.
               + **log**: Log only.
        """
        pulumi.set(__self__, "category", category)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        The protection action.  
        The valid values are as follows:
        + **block**: Intercept.
        + **pass**: Allow.
        + **log**: Log only.
        """
        return pulumi.get(self, "category")


@pulumi.output_type
class GetCustomRulesItemConditionResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 contents: Sequence[_builtins.str],
                 index: _builtins.str,
                 logic_operation: _builtins.str):
        """
        :param _builtins.str category: The protection action.  
               The valid values are as follows:
               + **block**: Intercept.
               + **pass**: Allow.
               + **log**: Log only.
        :param Sequence[_builtins.str] contents: The condition list logic matching content.  
               Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListWafCustomRuleV2.html)
               for values.
        :param _builtins.str index: The sub-field.  
               Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListWafCustomRuleV2.html)
               for values.
        :param _builtins.str logic_operation: The condition list matching logic.  
               Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListWafCustomRuleV2.html)
               for values.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "logic_operation", logic_operation)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        The protection action.  
        The valid values are as follows:
        + **block**: Intercept.
        + **pass**: Allow.
        + **log**: Log only.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def contents(self) -> Sequence[_builtins.str]:
        """
        The condition list logic matching content.  
        Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListWafCustomRuleV2.html)
        for values.
        """
        return pulumi.get(self, "contents")

    @_builtins.property
    @pulumi.getter
    def index(self) -> _builtins.str:
        """
        The sub-field.  
        Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListWafCustomRuleV2.html)
        for values.
        """
        return pulumi.get(self, "index")

    @_builtins.property
    @pulumi.getter(name="logicOperation")
    def logic_operation(self) -> _builtins.str:
        """
        The condition list matching logic.  
        Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListWafCustomRuleV2.html)
        for values.
        """
        return pulumi.get(self, "logic_operation")


@pulumi.output_type
class GetDdosAttackProtectionInfoFlowBpResult(dict):
    def __init__(__self__, *,
                 attack_bps: _builtins.int,
                 normal_bps: _builtins.int,
                 utime: _builtins.int):
        """
        :param _builtins.int attack_bps: The attack traffic.
        :param _builtins.int normal_bps: The normal traffic.
        :param _builtins.int utime: The data time.
        """
        pulumi.set(__self__, "attack_bps", attack_bps)
        pulumi.set(__self__, "normal_bps", normal_bps)
        pulumi.set(__self__, "utime", utime)

    @_builtins.property
    @pulumi.getter(name="attackBps")
    def attack_bps(self) -> _builtins.int:
        """
        The attack traffic.
        """
        return pulumi.get(self, "attack_bps")

    @_builtins.property
    @pulumi.getter(name="normalBps")
    def normal_bps(self) -> _builtins.int:
        """
        The normal traffic.
        """
        return pulumi.get(self, "normal_bps")

    @_builtins.property
    @pulumi.getter
    def utime(self) -> _builtins.int:
        """
        The data time.
        """
        return pulumi.get(self, "utime")


@pulumi.output_type
class GetDdosAttackProtectionInfoFlowPpResult(dict):
    def __init__(__self__, *,
                 attack_pps: _builtins.int,
                 normal_pps: _builtins.int,
                 utime: _builtins.int):
        """
        :param _builtins.int attack_pps: The attack packet rate.
        :param _builtins.int normal_pps: The normal packet rate.
        :param _builtins.int utime: The data time.
        """
        pulumi.set(__self__, "attack_pps", attack_pps)
        pulumi.set(__self__, "normal_pps", normal_pps)
        pulumi.set(__self__, "utime", utime)

    @_builtins.property
    @pulumi.getter(name="attackPps")
    def attack_pps(self) -> _builtins.int:
        """
        The attack packet rate.
        """
        return pulumi.get(self, "attack_pps")

    @_builtins.property
    @pulumi.getter(name="normalPps")
    def normal_pps(self) -> _builtins.int:
        """
        The normal packet rate.
        """
        return pulumi.get(self, "normal_pps")

    @_builtins.property
    @pulumi.getter
    def utime(self) -> _builtins.int:
        """
        The data time.
        """
        return pulumi.get(self, "utime")


@pulumi.output_type
class GetDomainCertificateCertInfoResult(dict):
    def __init__(__self__, *,
                 apply_domain: _builtins.str,
                 cert_name: _builtins.str,
                 expire_status: _builtins.int,
                 expire_time: _builtins.int,
                 id: _builtins.str):
        """
        :param _builtins.str apply_domain: The domain name that the certificate applies to.
        :param _builtins.str cert_name: The certificate name.
        :param _builtins.int expire_status: The certificate expiration status.
        :param _builtins.int expire_time: The certificate expiration time.
        :param _builtins.str id: The certificate ID.
        """
        pulumi.set(__self__, "apply_domain", apply_domain)
        pulumi.set(__self__, "cert_name", cert_name)
        pulumi.set(__self__, "expire_status", expire_status)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="applyDomain")
    def apply_domain(self) -> _builtins.str:
        """
        The domain name that the certificate applies to.
        """
        return pulumi.get(self, "apply_domain")

    @_builtins.property
    @pulumi.getter(name="certName")
    def cert_name(self) -> _builtins.str:
        """
        The certificate name.
        """
        return pulumi.get(self, "cert_name")

    @_builtins.property
    @pulumi.getter(name="expireStatus")
    def expire_status(self) -> _builtins.int:
        """
        The certificate expiration status.
        """
        return pulumi.get(self, "expire_status")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> _builtins.int:
        """
        The certificate expiration time.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The certificate ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDomainsItemResult(dict):
    def __init__(__self__, *,
                 cname: _builtins.str,
                 domain_id: _builtins.str,
                 domain_name: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 protocols: Sequence[_builtins.str],
                 real_server_type: _builtins.int,
                 real_servers: _builtins.str,
                 waf_status: _builtins.int):
        """
        :param _builtins.str cname: The domain cname.
        :param _builtins.str domain_id: The domain ID.
        :param _builtins.str domain_name: The domain name.
        :param _builtins.str enterprise_project_id: The enterprise project ID.
        :param Sequence[_builtins.str] protocols: The domain protocol.
        :param _builtins.int real_server_type: The type of real server.
        :param _builtins.str real_servers: The real servers.
        :param _builtins.int waf_status: The WAF status.
        """
        pulumi.set(__self__, "cname", cname)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "real_server_type", real_server_type)
        pulumi.set(__self__, "real_servers", real_servers)
        pulumi.set(__self__, "waf_status", waf_status)

    @_builtins.property
    @pulumi.getter
    def cname(self) -> _builtins.str:
        """
        The domain cname.
        """
        return pulumi.get(self, "cname")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        The domain name.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Sequence[_builtins.str]:
        """
        The domain protocol.
        """
        return pulumi.get(self, "protocols")

    @_builtins.property
    @pulumi.getter(name="realServerType")
    def real_server_type(self) -> _builtins.int:
        """
        The type of real server.
        """
        return pulumi.get(self, "real_server_type")

    @_builtins.property
    @pulumi.getter(name="realServers")
    def real_servers(self) -> _builtins.str:
        """
        The real servers.
        """
        return pulumi.get(self, "real_servers")

    @_builtins.property
    @pulumi.getter(name="wafStatus")
    def waf_status(self) -> _builtins.int:
        """
        The WAF status.
        """
        return pulumi.get(self, "waf_status")


@pulumi.output_type
class GetFlowBlockIpResult(dict):
    def __init__(__self__, *,
                 data_center: _builtins.str,
                 foreign_switch_status: _builtins.int,
                 ip: _builtins.str,
                 ip_id: _builtins.str,
                 isp: _builtins.str,
                 udp_switch_status: _builtins.int):
        """
        :param _builtins.str data_center: The data center.
        :param _builtins.int foreign_switch_status: The overseas region ban status. `0` represents closed, `1` represents open.
        :param _builtins.str ip: The IP.
        :param _builtins.str ip_id: The IP ID.
        :param _builtins.str isp: The isp.
        :param _builtins.int udp_switch_status: The UDP protocol disabled. `0` represents closed, `1` represents open.
        """
        pulumi.set(__self__, "data_center", data_center)
        pulumi.set(__self__, "foreign_switch_status", foreign_switch_status)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip_id", ip_id)
        pulumi.set(__self__, "isp", isp)
        pulumi.set(__self__, "udp_switch_status", udp_switch_status)

    @_builtins.property
    @pulumi.getter(name="dataCenter")
    def data_center(self) -> _builtins.str:
        """
        The data center.
        """
        return pulumi.get(self, "data_center")

    @_builtins.property
    @pulumi.getter(name="foreignSwitchStatus")
    def foreign_switch_status(self) -> _builtins.int:
        """
        The overseas region ban status. `0` represents closed, `1` represents open.
        """
        return pulumi.get(self, "foreign_switch_status")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        The IP.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="ipId")
    def ip_id(self) -> _builtins.str:
        """
        The IP ID.
        """
        return pulumi.get(self, "ip_id")

    @_builtins.property
    @pulumi.getter
    def isp(self) -> _builtins.str:
        """
        The isp.
        """
        return pulumi.get(self, "isp")

    @_builtins.property
    @pulumi.getter(name="udpSwitchStatus")
    def udp_switch_status(self) -> _builtins.int:
        """
        The UDP protocol disabled. `0` represents closed, `1` represents open.
        """
        return pulumi.get(self, "udp_switch_status")


@pulumi.output_type
class GetFrequencyControlRulesItemResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetFrequencyControlRulesItemActionResult'],
                 captcha_lock_time: _builtins.int,
                 conditions: Sequence['outputs.GetFrequencyControlRulesItemConditionResult'],
                 domain_aggregation: _builtins.bool,
                 grayscale_time: _builtins.bool,
                 id: _builtins.str,
                 limit_num: _builtins.str,
                 limit_period: _builtins.str,
                 lock_time: _builtins.str,
                 mode: _builtins.str,
                 name: _builtins.str,
                 producer: _builtins.int,
                 region_aggregation: _builtins.bool,
                 tag_conditions: Sequence['outputs.GetFrequencyControlRulesItemTagConditionResult'],
                 tag_index: _builtins.str,
                 tag_type: _builtins.str,
                 unlock_num: _builtins.int,
                 url: _builtins.str):
        """
        :param Sequence['GetFrequencyControlRulesItemActionArgs'] actions: The action to take when the request count limit is reached.  
               The action structure is documented below. .
        :param _builtins.int captcha_lock_time: The lock verification time.
        :param Sequence['GetFrequencyControlRulesItemConditionArgs'] conditions: The list of conditions for the CC rule.  
               The conditions structure is documented below.
        :param _builtins.bool domain_aggregation: The domain aggregation statistics.
        :param _builtins.bool grayscale_time: Whether it takes effect in gray release.
        :param _builtins.str id: The ID.
        :param _builtins.str limit_num: The rate limit count, unit is times. Value range `1` to `2,147,483,647`.
        :param _builtins.str limit_period: The rate limiting period in seconds. Value range `1` to `3,600`.
        :param _builtins.str lock_time: The block duration in seconds. Value range `0` to `65,535`.
        :param _builtins.str mode: The CC rule protection mode.  
               The valid values are as follows:
               + **0**: For standard (old version; only supports domain-level path limits).
               + **1**: for advanced (new version; supports path, IP, Cookie, Header, Params field restrictions).
        :param _builtins.str name: The rule name.
        :param _builtins.int producer: Indicates if the rule was generated by intelligent CC.
        :param _builtins.bool region_aggregation: The global count.
        :param Sequence['GetFrequencyControlRulesItemTagConditionArgs'] tag_conditions: The user identifier, when rate limiting mode is other.  
               The tag_condition structure is documented below. .
        :param _builtins.str tag_index: The user identifier, when rate limiting mode is cookie or header.
        :param _builtins.str tag_type: The rate limiting.  
               Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListFrequencyControlRuleV2.html)
               for values.
        :param _builtins.int unlock_num: The pass frequency, in times, with a range of `0` to `2,147,483,647`.
        :param _builtins.str url: URL the rule applies to.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "captcha_lock_time", captcha_lock_time)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "domain_aggregation", domain_aggregation)
        pulumi.set(__self__, "grayscale_time", grayscale_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "limit_num", limit_num)
        pulumi.set(__self__, "limit_period", limit_period)
        pulumi.set(__self__, "lock_time", lock_time)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "producer", producer)
        pulumi.set(__self__, "region_aggregation", region_aggregation)
        pulumi.set(__self__, "tag_conditions", tag_conditions)
        pulumi.set(__self__, "tag_index", tag_index)
        pulumi.set(__self__, "tag_type", tag_type)
        pulumi.set(__self__, "unlock_num", unlock_num)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetFrequencyControlRulesItemActionResult']:
        """
        The action to take when the request count limit is reached.  
        The action structure is documented below. .
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="captchaLockTime")
    def captcha_lock_time(self) -> _builtins.int:
        """
        The lock verification time.
        """
        return pulumi.get(self, "captcha_lock_time")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetFrequencyControlRulesItemConditionResult']:
        """
        The list of conditions for the CC rule.  
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="domainAggregation")
    def domain_aggregation(self) -> _builtins.bool:
        """
        The domain aggregation statistics.
        """
        return pulumi.get(self, "domain_aggregation")

    @_builtins.property
    @pulumi.getter(name="grayscaleTime")
    def grayscale_time(self) -> _builtins.bool:
        """
        Whether it takes effect in gray release.
        """
        return pulumi.get(self, "grayscale_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="limitNum")
    def limit_num(self) -> _builtins.str:
        """
        The rate limit count, unit is times. Value range `1` to `2,147,483,647`.
        """
        return pulumi.get(self, "limit_num")

    @_builtins.property
    @pulumi.getter(name="limitPeriod")
    def limit_period(self) -> _builtins.str:
        """
        The rate limiting period in seconds. Value range `1` to `3,600`.
        """
        return pulumi.get(self, "limit_period")

    @_builtins.property
    @pulumi.getter(name="lockTime")
    def lock_time(self) -> _builtins.str:
        """
        The block duration in seconds. Value range `0` to `65,535`.
        """
        return pulumi.get(self, "lock_time")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        The CC rule protection mode.  
        The valid values are as follows:
        + **0**: For standard (old version; only supports domain-level path limits).
        + **1**: for advanced (new version; supports path, IP, Cookie, Header, Params field restrictions).
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The rule name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def producer(self) -> _builtins.int:
        """
        Indicates if the rule was generated by intelligent CC.
        """
        return pulumi.get(self, "producer")

    @_builtins.property
    @pulumi.getter(name="regionAggregation")
    def region_aggregation(self) -> _builtins.bool:
        """
        The global count.
        """
        return pulumi.get(self, "region_aggregation")

    @_builtins.property
    @pulumi.getter(name="tagConditions")
    def tag_conditions(self) -> Sequence['outputs.GetFrequencyControlRulesItemTagConditionResult']:
        """
        The user identifier, when rate limiting mode is other.  
        The tag_condition structure is documented below. .
        """
        return pulumi.get(self, "tag_conditions")

    @_builtins.property
    @pulumi.getter(name="tagIndex")
    def tag_index(self) -> _builtins.str:
        """
        The user identifier, when rate limiting mode is cookie or header.
        """
        return pulumi.get(self, "tag_index")

    @_builtins.property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> _builtins.str:
        """
        The rate limiting.  
        Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListFrequencyControlRuleV2.html)
        for values.
        """
        return pulumi.get(self, "tag_type")

    @_builtins.property
    @pulumi.getter(name="unlockNum")
    def unlock_num(self) -> _builtins.int:
        """
        The pass frequency, in times, with a range of `0` to `2,147,483,647`.
        """
        return pulumi.get(self, "unlock_num")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        URL the rule applies to.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetFrequencyControlRulesItemActionResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 details: Sequence['outputs.GetFrequencyControlRulesItemActionDetailResult']):
        """
        :param _builtins.str category: The field type.  
               The valid values are as follows:
               + **url**: URL.
               + **ip**: IPv4.
               + **ipv6**: IPv6.
               + **params**: Params.
               + **cookie**: Cookie.
               + **header**: Header.
               + **response_code**: Response code.
        :param Sequence['GetFrequencyControlRulesItemActionDetailArgs'] details: The block page information.  
               The detail structure is documented below.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "details", details)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        The field type.  
        The valid values are as follows:
        + **url**: URL.
        + **ip**: IPv4.
        + **ipv6**: IPv6.
        + **params**: Params.
        + **cookie**: Cookie.
        + **header**: Header.
        + **response_code**: Response code.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetFrequencyControlRulesItemActionDetailResult']:
        """
        The block page information.  
        The detail structure is documented below.
        """
        return pulumi.get(self, "details")


@pulumi.output_type
class GetFrequencyControlRulesItemActionDetailResult(dict):
    def __init__(__self__, *,
                 responses: Sequence['outputs.GetFrequencyControlRulesItemActionDetailResponseResult']):
        """
        :param Sequence['GetFrequencyControlRulesItemActionDetailResponseArgs'] responses: The response.  
               The response structure is documented below.
        """
        pulumi.set(__self__, "responses", responses)

    @_builtins.property
    @pulumi.getter
    def responses(self) -> Sequence['outputs.GetFrequencyControlRulesItemActionDetailResponseResult']:
        """
        The response.  
        The response structure is documented below.
        """
        return pulumi.get(self, "responses")


@pulumi.output_type
class GetFrequencyControlRulesItemActionDetailResponseResult(dict):
    def __init__(__self__, *,
                 content: _builtins.str,
                 content_type: _builtins.str):
        """
        :param _builtins.str content: The page content.
        :param _builtins.str content_type: The page type.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        The page content.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> _builtins.str:
        """
        The page type.
        """
        return pulumi.get(self, "content_type")


@pulumi.output_type
class GetFrequencyControlRulesItemConditionResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 contents: Sequence[_builtins.str],
                 index: _builtins.str,
                 logic_operation: _builtins.str):
        """
        :param _builtins.str category: The field type.  
               The valid values are as follows:
               + **url**: URL.
               + **ip**: IPv4.
               + **ipv6**: IPv6.
               + **params**: Params.
               + **cookie**: Cookie.
               + **header**: Header.
               + **response_code**: Response code.
        :param Sequence[_builtins.str] contents: The condition list logic matching content.  
               Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListFrequencyControlRuleV2.html)
               for values.
        :param _builtins.str index: The sub-field.  
               Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListFrequencyControlRuleV2.html)
               for values.
        :param _builtins.str logic_operation: The condition list matching logic.  
               Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListFrequencyControlRuleV2.html)
               for values.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "logic_operation", logic_operation)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        The field type.  
        The valid values are as follows:
        + **url**: URL.
        + **ip**: IPv4.
        + **ipv6**: IPv6.
        + **params**: Params.
        + **cookie**: Cookie.
        + **header**: Header.
        + **response_code**: Response code.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def contents(self) -> Sequence[_builtins.str]:
        """
        The condition list logic matching content.  
        Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListFrequencyControlRuleV2.html)
        for values.
        """
        return pulumi.get(self, "contents")

    @_builtins.property
    @pulumi.getter
    def index(self) -> _builtins.str:
        """
        The sub-field.  
        Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListFrequencyControlRuleV2.html)
        for values.
        """
        return pulumi.get(self, "index")

    @_builtins.property
    @pulumi.getter(name="logicOperation")
    def logic_operation(self) -> _builtins.str:
        """
        The condition list matching logic.  
        Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListFrequencyControlRuleV2.html)
        for values.
        """
        return pulumi.get(self, "logic_operation")


@pulumi.output_type
class GetFrequencyControlRulesItemTagConditionResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 contents: Sequence[_builtins.str]):
        """
        :param _builtins.str category: The field type.  
               The valid values are as follows:
               + **url**: URL.
               + **ip**: IPv4.
               + **ipv6**: IPv6.
               + **params**: Params.
               + **cookie**: Cookie.
               + **header**: Header.
               + **response_code**: Response code.
        :param Sequence[_builtins.str] contents: The condition list logic matching content.  
               Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListFrequencyControlRuleV2.html)
               for values.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "contents", contents)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        The field type.  
        The valid values are as follows:
        + **url**: URL.
        + **ip**: IPv4.
        + **ipv6**: IPv6.
        + **params**: Params.
        + **cookie**: Cookie.
        + **header**: Header.
        + **response_code**: Response code.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def contents(self) -> Sequence[_builtins.str]:
        """
        The condition list logic matching content.  
        Please refer to the document link [reference](https://support.huaweicloud.com/api-aad/ListFrequencyControlRuleV2.html)
        for values.
        """
        return pulumi.get(self, "contents")


@pulumi.output_type
class GetGeoipRulesItemResult(dict):
    def __init__(__self__, *,
                 geoip: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 overseas_type: _builtins.int,
                 timestamp: _builtins.int,
                 white: _builtins.int):
        """
        :param _builtins.str geoip: The geographical location code.
        :param _builtins.str id: The ID of the rule.
        :param _builtins.str name: The name of the rule.
        :param _builtins.int overseas_type: Specifies the protection region.
        :param _builtins.int timestamp: The creation timestamp of the rule.
        :param _builtins.int white: The protection action. The options are as follows:
        """
        pulumi.set(__self__, "geoip", geoip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "overseas_type", overseas_type)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "white", white)

    @_builtins.property
    @pulumi.getter
    def geoip(self) -> _builtins.str:
        """
        The geographical location code.
        """
        return pulumi.get(self, "geoip")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the rule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="overseasType")
    def overseas_type(self) -> _builtins.int:
        """
        Specifies the protection region.
        """
        return pulumi.get(self, "overseas_type")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> _builtins.int:
        """
        The creation timestamp of the rule.
        """
        return pulumi.get(self, "timestamp")

    @_builtins.property
    @pulumi.getter
    def white(self) -> _builtins.int:
        """
        The protection action. The options are as follows:
        """
        return pulumi.get(self, "white")


@pulumi.output_type
class GetInstanceDomainsDomainResult(dict):
    def __init__(__self__, *,
                 cc_status: _builtins.int,
                 cert_name: _builtins.str,
                 cname: _builtins.str,
                 domain_id: _builtins.str,
                 domain_name: _builtins.str,
                 domain_status: _builtins.str,
                 https_cert_status: _builtins.int,
                 protocol_types: Sequence[_builtins.str],
                 real_server_type: _builtins.int,
                 real_servers: _builtins.str,
                 waf_status: _builtins.int):
        """
        :param _builtins.int cc_status: The CC protection status.
        :param _builtins.str cert_name: The certificate name.
        :param _builtins.str cname: The domain CNAME.
        :param _builtins.str domain_id: The domain ID.
        :param _builtins.str domain_name: The domain name.
        :param _builtins.str domain_status: The domain status. `0` represents normal, `1` represents freeze.
        :param _builtins.int https_cert_status: The certificate status. `1` represents uploaded, `2` represents not uploaded.
        :param Sequence[_builtins.str] protocol_types: The domain protocol list.
        :param _builtins.int real_server_type: The real server type.
        :param _builtins.str real_servers: The real servers.
        :param _builtins.int waf_status: The WAF protection status.
        """
        pulumi.set(__self__, "cc_status", cc_status)
        pulumi.set(__self__, "cert_name", cert_name)
        pulumi.set(__self__, "cname", cname)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "domain_status", domain_status)
        pulumi.set(__self__, "https_cert_status", https_cert_status)
        pulumi.set(__self__, "protocol_types", protocol_types)
        pulumi.set(__self__, "real_server_type", real_server_type)
        pulumi.set(__self__, "real_servers", real_servers)
        pulumi.set(__self__, "waf_status", waf_status)

    @_builtins.property
    @pulumi.getter(name="ccStatus")
    def cc_status(self) -> _builtins.int:
        """
        The CC protection status.
        """
        return pulumi.get(self, "cc_status")

    @_builtins.property
    @pulumi.getter(name="certName")
    def cert_name(self) -> _builtins.str:
        """
        The certificate name.
        """
        return pulumi.get(self, "cert_name")

    @_builtins.property
    @pulumi.getter
    def cname(self) -> _builtins.str:
        """
        The domain CNAME.
        """
        return pulumi.get(self, "cname")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        The domain name.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="domainStatus")
    def domain_status(self) -> _builtins.str:
        """
        The domain status. `0` represents normal, `1` represents freeze.
        """
        return pulumi.get(self, "domain_status")

    @_builtins.property
    @pulumi.getter(name="httpsCertStatus")
    def https_cert_status(self) -> _builtins.int:
        """
        The certificate status. `1` represents uploaded, `2` represents not uploaded.
        """
        return pulumi.get(self, "https_cert_status")

    @_builtins.property
    @pulumi.getter(name="protocolTypes")
    def protocol_types(self) -> Sequence[_builtins.str]:
        """
        The domain protocol list.
        """
        return pulumi.get(self, "protocol_types")

    @_builtins.property
    @pulumi.getter(name="realServerType")
    def real_server_type(self) -> _builtins.int:
        """
        The real server type.
        """
        return pulumi.get(self, "real_server_type")

    @_builtins.property
    @pulumi.getter(name="realServers")
    def real_servers(self) -> _builtins.str:
        """
        The real servers.
        """
        return pulumi.get(self, "real_servers")

    @_builtins.property
    @pulumi.getter(name="wafStatus")
    def waf_status(self) -> _builtins.int:
        """
        The WAF protection status.
        """
        return pulumi.get(self, "waf_status")


@pulumi.output_type
class GetInstancesItemResult(dict):
    def __init__(__self__, *,
                 enterprise_project_id: _builtins.str,
                 expire_time: _builtins.int,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 instance_status: _builtins.int,
                 ips: Sequence['outputs.GetInstancesItemIpResult'],
                 overseas_type: _builtins.int,
                 service_bandwidth: _builtins.int):
        """
        :param _builtins.str enterprise_project_id: The enterprise project ID of the AAD instance.
        :param _builtins.int expire_time: The expiration time of the AAD instance.
        :param _builtins.str instance_id: The AAD instance ID.
        :param _builtins.str instance_name: The name of the AAD instance.
        :param _builtins.int instance_status: The AAD instance status.
        :param Sequence['GetInstancesItemIpArgs'] ips: The list of the AAD instance IPs.
               The ips structure is documented below.
        :param _builtins.int overseas_type: The AAD instance type, `0`-mainland China, `1`-overseas.
        :param _builtins.int service_bandwidth: The service bandwidth of the AAD instance.
        """
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_status", instance_status)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "overseas_type", overseas_type)
        pulumi.set(__self__, "service_bandwidth", service_bandwidth)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID of the AAD instance.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> _builtins.int:
        """
        The expiration time of the AAD instance.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The AAD instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        The name of the AAD instance.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> _builtins.int:
        """
        The AAD instance status.
        """
        return pulumi.get(self, "instance_status")

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Sequence['outputs.GetInstancesItemIpResult']:
        """
        The list of the AAD instance IPs.
        The ips structure is documented below.
        """
        return pulumi.get(self, "ips")

    @_builtins.property
    @pulumi.getter(name="overseasType")
    def overseas_type(self) -> _builtins.int:
        """
        The AAD instance type, `0`-mainland China, `1`-overseas.
        """
        return pulumi.get(self, "overseas_type")

    @_builtins.property
    @pulumi.getter(name="serviceBandwidth")
    def service_bandwidth(self) -> _builtins.int:
        """
        The service bandwidth of the AAD instance.
        """
        return pulumi.get(self, "service_bandwidth")


@pulumi.output_type
class GetInstancesItemIpResult(dict):
    def __init__(__self__, *,
                 basic_bandwidth: _builtins.int,
                 elastic_bandwidth: _builtins.int,
                 ip: _builtins.str,
                 ip_id: _builtins.str,
                 ip_status: _builtins.int):
        """
        :param _builtins.int basic_bandwidth: The basic bandwidth of the AAD instance.
        :param _builtins.int elastic_bandwidth: The elastic bandwidth of the AAD instance.
        :param _builtins.str ip: The IP of the AAD instance.
        :param _builtins.str ip_id: The IP ID of the AAD instance.
        :param _builtins.int ip_status: The IP status of the AAD instance.
        """
        pulumi.set(__self__, "basic_bandwidth", basic_bandwidth)
        pulumi.set(__self__, "elastic_bandwidth", elastic_bandwidth)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip_id", ip_id)
        pulumi.set(__self__, "ip_status", ip_status)

    @_builtins.property
    @pulumi.getter(name="basicBandwidth")
    def basic_bandwidth(self) -> _builtins.int:
        """
        The basic bandwidth of the AAD instance.
        """
        return pulumi.get(self, "basic_bandwidth")

    @_builtins.property
    @pulumi.getter(name="elasticBandwidth")
    def elastic_bandwidth(self) -> _builtins.int:
        """
        The elastic bandwidth of the AAD instance.
        """
        return pulumi.get(self, "elastic_bandwidth")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        The IP of the AAD instance.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="ipId")
    def ip_id(self) -> _builtins.str:
        """
        The IP ID of the AAD instance.
        """
        return pulumi.get(self, "ip_id")

    @_builtins.property
    @pulumi.getter(name="ipStatus")
    def ip_status(self) -> _builtins.int:
        """
        The IP status of the AAD instance.
        """
        return pulumi.get(self, "ip_status")


@pulumi.output_type
class GetPolicyBlackWhiteListsBlackResult(dict):
    def __init__(__self__, *,
                 domain_id: _builtins.str,
                 id: _builtins.str,
                 ip: _builtins.str,
                 type: _builtins.int):
        """
        :param _builtins.str domain_id: The domain ID.
        :param _builtins.str id: The ID.
        :param _builtins.str ip: The IP address.
        :param _builtins.int type: The type. `0` indicates blacklist, and `1` indicates whitelist.
        """
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        The IP address.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.int:
        """
        The type. `0` indicates blacklist, and `1` indicates whitelist.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPolicyBlackWhiteListsWhiteResult(dict):
    def __init__(__self__, *,
                 domain_id: _builtins.str,
                 id: _builtins.str,
                 ip: _builtins.str,
                 type: _builtins.int):
        """
        :param _builtins.str domain_id: The domain ID.
        :param _builtins.str id: The ID.
        :param _builtins.str ip: The IP address.
        :param _builtins.int type: The type. `0` indicates blacklist, and `1` indicates whitelist.
        """
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        The IP address.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.int:
        """
        The type. `0` indicates blacklist, and `1` indicates whitelist.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetQpsCurveCurveResult(dict):
    def __init__(__self__, *,
                 attack: _builtins.int,
                 basic: _builtins.int,
                 cc: _builtins.int,
                 custom_custom: _builtins.int,
                 time: _builtins.int,
                 total: _builtins.int):
        """
        :param _builtins.int attack: The number of attack requests.
        :param _builtins.int basic: The number of requests processed by web basic protection.
        :param _builtins.int cc: The number of requests processed by CC attack protection.
        :param _builtins.int custom_custom: The number of requests processed by precise protection.
        :param _builtins.int time: The timestamp of the QPS curve.
        :param _builtins.int total: The total number of requests.
        """
        pulumi.set(__self__, "attack", attack)
        pulumi.set(__self__, "basic", basic)
        pulumi.set(__self__, "cc", cc)
        pulumi.set(__self__, "custom_custom", custom_custom)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "total", total)

    @_builtins.property
    @pulumi.getter
    def attack(self) -> _builtins.int:
        """
        The number of attack requests.
        """
        return pulumi.get(self, "attack")

    @_builtins.property
    @pulumi.getter
    def basic(self) -> _builtins.int:
        """
        The number of requests processed by web basic protection.
        """
        return pulumi.get(self, "basic")

    @_builtins.property
    @pulumi.getter
    def cc(self) -> _builtins.int:
        """
        The number of requests processed by CC attack protection.
        """
        return pulumi.get(self, "cc")

    @_builtins.property
    @pulumi.getter(name="customCustom")
    def custom_custom(self) -> _builtins.int:
        """
        The number of requests processed by precise protection.
        """
        return pulumi.get(self, "custom_custom")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.int:
        """
        The timestamp of the QPS curve.
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter
    def total(self) -> _builtins.int:
        """
        The total number of requests.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetUnblockRecordsUnblockRecordResult(dict):
    def __init__(__self__, *,
                 block_id: _builtins.int,
                 blocking_time: _builtins.int,
                 executor: _builtins.str,
                 ip: _builtins.str,
                 sort_time: _builtins.int,
                 status: _builtins.str,
                 unblock_type: _builtins.str,
                 unblocking_time: _builtins.int):
        """
        :param _builtins.int block_id: The block id.
        :param _builtins.int blocking_time: The blocking time, the value is a timestamp.
        :param _builtins.str executor: The executor.
        :param _builtins.str ip: The IP address.
        :param _builtins.int sort_time: The sort time, the value is a timestamp.
        :param _builtins.str status: The unblock status. The valid values are as follows:
               + **unblocking**: Indicates unblocking status.
               + **success**: Indicates successful status.
               + **failed**: Indicates failed status.
        :param _builtins.str unblock_type: The unblock type. The valid values are as follows:
               + **manual**: Indicates manual unblock.
               + **automatic**: Indicates automatic unblock.
        :param _builtins.int unblocking_time: The unblocking time, the value is a timestamp.
        """
        pulumi.set(__self__, "block_id", block_id)
        pulumi.set(__self__, "blocking_time", blocking_time)
        pulumi.set(__self__, "executor", executor)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "sort_time", sort_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "unblock_type", unblock_type)
        pulumi.set(__self__, "unblocking_time", unblocking_time)

    @_builtins.property
    @pulumi.getter(name="blockId")
    def block_id(self) -> _builtins.int:
        """
        The block id.
        """
        return pulumi.get(self, "block_id")

    @_builtins.property
    @pulumi.getter(name="blockingTime")
    def blocking_time(self) -> _builtins.int:
        """
        The blocking time, the value is a timestamp.
        """
        return pulumi.get(self, "blocking_time")

    @_builtins.property
    @pulumi.getter
    def executor(self) -> _builtins.str:
        """
        The executor.
        """
        return pulumi.get(self, "executor")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        The IP address.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="sortTime")
    def sort_time(self) -> _builtins.int:
        """
        The sort time, the value is a timestamp.
        """
        return pulumi.get(self, "sort_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The unblock status. The valid values are as follows:
        + **unblocking**: Indicates unblocking status.
        + **success**: Indicates successful status.
        + **failed**: Indicates failed status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="unblockType")
    def unblock_type(self) -> _builtins.str:
        """
        The unblock type. The valid values are as follows:
        + **manual**: Indicates manual unblock.
        + **automatic**: Indicates automatic unblock.
        """
        return pulumi.get(self, "unblock_type")

    @_builtins.property
    @pulumi.getter(name="unblockingTime")
    def unblocking_time(self) -> _builtins.int:
        """
        The unblocking time, the value is a timestamp.
        """
        return pulumi.get(self, "unblocking_time")


@pulumi.output_type
class GetWebProtectionPoliciesOptionResult(dict):
    def __init__(__self__, *,
                 cc: _builtins.bool,
                 custom: _builtins.bool,
                 geoip: _builtins.bool,
                 modulex_enabled: _builtins.bool,
                 whiteblackip: _builtins.bool):
        """
        :param _builtins.bool cc: Whether to enable CC (frequency control).
        :param _builtins.bool custom: Whether to enable precise access protection.
        :param _builtins.bool geoip: Whether to enable regional ban protection.
        :param _builtins.bool modulex_enabled: Whether to enable intelligent CC protection.
        :param _builtins.bool whiteblackip: Whether to enable blacklist and whitelist protection.
        """
        pulumi.set(__self__, "cc", cc)
        pulumi.set(__self__, "custom", custom)
        pulumi.set(__self__, "geoip", geoip)
        pulumi.set(__self__, "modulex_enabled", modulex_enabled)
        pulumi.set(__self__, "whiteblackip", whiteblackip)

    @_builtins.property
    @pulumi.getter
    def cc(self) -> _builtins.bool:
        """
        Whether to enable CC (frequency control).
        """
        return pulumi.get(self, "cc")

    @_builtins.property
    @pulumi.getter
    def custom(self) -> _builtins.bool:
        """
        Whether to enable precise access protection.
        """
        return pulumi.get(self, "custom")

    @_builtins.property
    @pulumi.getter
    def geoip(self) -> _builtins.bool:
        """
        Whether to enable regional ban protection.
        """
        return pulumi.get(self, "geoip")

    @_builtins.property
    @pulumi.getter(name="modulexEnabled")
    def modulex_enabled(self) -> _builtins.bool:
        """
        Whether to enable intelligent CC protection.
        """
        return pulumi.get(self, "modulex_enabled")

    @_builtins.property
    @pulumi.getter
    def whiteblackip(self) -> _builtins.bool:
        """
        Whether to enable blacklist and whitelist protection.
        """
        return pulumi.get(self, "whiteblackip")


