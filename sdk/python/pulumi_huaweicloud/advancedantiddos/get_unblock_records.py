# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetUnblockRecordsResult',
    'AwaitableGetUnblockRecordsResult',
    'get_unblock_records',
    'get_unblock_records_output',
]

@pulumi.output_type
class GetUnblockRecordsResult:
    """
    A collection of values returned by getUnblockRecords.
    """
    def __init__(__self__, domain_id=None, end_time=None, id=None, start_time=None, unblock_records=None):
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)
        if unblock_records and not isinstance(unblock_records, list):
            raise TypeError("Expected argument 'unblock_records' to be a list")
        pulumi.set(__self__, "unblock_records", unblock_records)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="unblockRecords")
    def unblock_records(self) -> Sequence['outputs.GetUnblockRecordsUnblockRecordResult']:
        """
        The unblock record.
        The unblock_record structure is documented below.
        """
        return pulumi.get(self, "unblock_records")


class AwaitableGetUnblockRecordsResult(GetUnblockRecordsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUnblockRecordsResult(
            domain_id=self.domain_id,
            end_time=self.end_time,
            id=self.id,
            start_time=self.start_time,
            unblock_records=self.unblock_records)


def get_unblock_records(domain_id: Optional[_builtins.str] = None,
                        end_time: Optional[_builtins.int] = None,
                        start_time: Optional[_builtins.int] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUnblockRecordsResult:
    """
    Use this data source to get the list of AAD unblock records within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_id = config.require_object("domainId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.AdvancedAntiDDos.get_unblock_records(domain_id=domain_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str domain_id: Specified the account ID of IAM user.
    :param _builtins.int end_time: Specified the end time of unblock record.
    :param _builtins.int start_time: Specified the start time of unblock record.
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    __args__['endTime'] = end_time
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:AdvancedAntiDDos/getUnblockRecords:getUnblockRecords', __args__, opts=opts, typ=GetUnblockRecordsResult).value

    return AwaitableGetUnblockRecordsResult(
        domain_id=pulumi.get(__ret__, 'domain_id'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        start_time=pulumi.get(__ret__, 'start_time'),
        unblock_records=pulumi.get(__ret__, 'unblock_records'))
def get_unblock_records_output(domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                               end_time: Optional[pulumi.Input[_builtins.int]] = None,
                               start_time: Optional[pulumi.Input[_builtins.int]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUnblockRecordsResult]:
    """
    Use this data source to get the list of AAD unblock records within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_id = config.require_object("domainId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.AdvancedAntiDDos.get_unblock_records(domain_id=domain_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str domain_id: Specified the account ID of IAM user.
    :param _builtins.int end_time: Specified the end time of unblock record.
    :param _builtins.int start_time: Specified the start time of unblock record.
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    __args__['endTime'] = end_time
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:AdvancedAntiDDos/getUnblockRecords:getUnblockRecords', __args__, opts=opts, typ=GetUnblockRecordsResult)
    return __ret__.apply(lambda __response__: GetUnblockRecordsResult(
        domain_id=pulumi.get(__response__, 'domain_id'),
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        start_time=pulumi.get(__response__, 'start_time'),
        unblock_records=pulumi.get(__response__, 'unblock_records')))
