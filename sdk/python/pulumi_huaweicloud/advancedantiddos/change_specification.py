# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ChangeSpecificationArgs', 'ChangeSpecification']

@pulumi.input_type
class ChangeSpecificationArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 upgrade_data: pulumi.Input['ChangeSpecificationUpgradeDataArgs'],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ChangeSpecification resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AAD instance ID.
        :param pulumi.Input['ChangeSpecificationUpgradeDataArgs'] upgrade_data: Specifies the upgrade data.
               
               The upgrade_data structure is documented below.
               
               <a name="upgrade_data_struct"></a>
               The `upgrade_data` block supports:
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "upgrade_data", upgrade_data)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the AAD instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="upgradeData")
    def upgrade_data(self) -> pulumi.Input['ChangeSpecificationUpgradeDataArgs']:
        """
        Specifies the upgrade data.

        The upgrade_data structure is documented below.

        <a name="upgrade_data_struct"></a>
        The `upgrade_data` block supports:
        """
        return pulumi.get(self, "upgrade_data")

    @upgrade_data.setter
    def upgrade_data(self, value: pulumi.Input['ChangeSpecificationUpgradeDataArgs']):
        pulumi.set(self, "upgrade_data", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)


@pulumi.input_type
class _ChangeSpecificationState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_data: Optional[pulumi.Input['ChangeSpecificationUpgradeDataArgs']] = None):
        """
        Input properties used for looking up and filtering ChangeSpecification resources.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AAD instance ID.
        :param pulumi.Input['ChangeSpecificationUpgradeDataArgs'] upgrade_data: Specifies the upgrade data.
               
               The upgrade_data structure is documented below.
               
               <a name="upgrade_data_struct"></a>
               The `upgrade_data` block supports:
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if upgrade_data is not None:
            pulumi.set(__self__, "upgrade_data", upgrade_data)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AAD instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="upgradeData")
    def upgrade_data(self) -> Optional[pulumi.Input['ChangeSpecificationUpgradeDataArgs']]:
        """
        Specifies the upgrade data.

        The upgrade_data structure is documented below.

        <a name="upgrade_data_struct"></a>
        The `upgrade_data` block supports:
        """
        return pulumi.get(self, "upgrade_data")

    @upgrade_data.setter
    def upgrade_data(self, value: Optional[pulumi.Input['ChangeSpecificationUpgradeDataArgs']]):
        pulumi.set(self, "upgrade_data", value)


@pulumi.type_token("huaweicloud:AdvancedAntiDDos/changeSpecification:ChangeSpecification")
class ChangeSpecification(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_data: Optional[pulumi.Input[Union['ChangeSpecificationUpgradeDataArgs', 'ChangeSpecificationUpgradeDataArgsDict']]] = None,
                 __props__=None):
        """
        Use this resource to modify Advanced Anti-DDos specification within HuaweiCloud.

        > This resource is only a one-time action resource for updating AAD instance specification. Deleting this resource will
        not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        basic_bandwidth = config.require_object("basicBandwidth")
        elastic_bandwidth = config.require_object("elasticBandwidth")
        service_bandwidth = config.require_object("serviceBandwidth")
        port_num = config.require_object("portNum")
        bind_domain_num = config.require_object("bindDomainNum")
        test = huaweicloud.advancedantiddos.ChangeSpecification("test",
            instance_id=instance_id,
            upgrade_data={
                "basic_bandwidth": basic_bandwidth,
                "elastic_bandwidth": elastic_bandwidth,
                "service_bandwidth": service_bandwidth,
                "port_num": port_num,
                "bind_domain_num": bind_domain_num,
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AAD instance ID.
        :param pulumi.Input[Union['ChangeSpecificationUpgradeDataArgs', 'ChangeSpecificationUpgradeDataArgsDict']] upgrade_data: Specifies the upgrade data.
               
               The upgrade_data structure is documented below.
               
               <a name="upgrade_data_struct"></a>
               The `upgrade_data` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ChangeSpecificationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to modify Advanced Anti-DDos specification within HuaweiCloud.

        > This resource is only a one-time action resource for updating AAD instance specification. Deleting this resource will
        not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        basic_bandwidth = config.require_object("basicBandwidth")
        elastic_bandwidth = config.require_object("elasticBandwidth")
        service_bandwidth = config.require_object("serviceBandwidth")
        port_num = config.require_object("portNum")
        bind_domain_num = config.require_object("bindDomainNum")
        test = huaweicloud.advancedantiddos.ChangeSpecification("test",
            instance_id=instance_id,
            upgrade_data={
                "basic_bandwidth": basic_bandwidth,
                "elastic_bandwidth": elastic_bandwidth,
                "service_bandwidth": service_bandwidth,
                "port_num": port_num,
                "bind_domain_num": bind_domain_num,
            })
        ```

        :param str resource_name: The name of the resource.
        :param ChangeSpecificationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ChangeSpecificationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_data: Optional[pulumi.Input[Union['ChangeSpecificationUpgradeDataArgs', 'ChangeSpecificationUpgradeDataArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ChangeSpecificationArgs.__new__(ChangeSpecificationArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if upgrade_data is None and not opts.urn:
                raise TypeError("Missing required property 'upgrade_data'")
            __props__.__dict__["upgrade_data"] = upgrade_data
        super(ChangeSpecification, __self__).__init__(
            'huaweicloud:AdvancedAntiDDos/changeSpecification:ChangeSpecification',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            upgrade_data: Optional[pulumi.Input[Union['ChangeSpecificationUpgradeDataArgs', 'ChangeSpecificationUpgradeDataArgsDict']]] = None) -> 'ChangeSpecification':
        """
        Get an existing ChangeSpecification resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the AAD instance ID.
        :param pulumi.Input[Union['ChangeSpecificationUpgradeDataArgs', 'ChangeSpecificationUpgradeDataArgsDict']] upgrade_data: Specifies the upgrade data.
               
               The upgrade_data structure is documented below.
               
               <a name="upgrade_data_struct"></a>
               The `upgrade_data` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ChangeSpecificationState.__new__(_ChangeSpecificationState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["upgrade_data"] = upgrade_data
        return ChangeSpecification(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the AAD instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="upgradeData")
    def upgrade_data(self) -> pulumi.Output['outputs.ChangeSpecificationUpgradeData']:
        """
        Specifies the upgrade data.

        The upgrade_data structure is documented below.

        <a name="upgrade_data_struct"></a>
        The `upgrade_data` block supports:
        """
        return pulumi.get(self, "upgrade_data")

