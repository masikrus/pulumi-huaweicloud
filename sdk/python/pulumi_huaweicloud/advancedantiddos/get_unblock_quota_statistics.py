# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetUnblockQuotaStatisticsResult',
    'AwaitableGetUnblockQuotaStatisticsResult',
    'get_unblock_quota_statistics',
    'get_unblock_quota_statistics_output',
]

@pulumi.output_type
class GetUnblockQuotaStatisticsResult:
    """
    A collection of values returned by getUnblockQuotaStatistics.
    """
    def __init__(__self__, domain_id=None, id=None, remaining_unblocking_quota=None, remaining_unblocking_quota_today=None, total_unblocking_quota=None, type=None, unblocking_quota_today=None):
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if remaining_unblocking_quota and not isinstance(remaining_unblocking_quota, int):
            raise TypeError("Expected argument 'remaining_unblocking_quota' to be a int")
        pulumi.set(__self__, "remaining_unblocking_quota", remaining_unblocking_quota)
        if remaining_unblocking_quota_today and not isinstance(remaining_unblocking_quota_today, int):
            raise TypeError("Expected argument 'remaining_unblocking_quota_today' to be a int")
        pulumi.set(__self__, "remaining_unblocking_quota_today", remaining_unblocking_quota_today)
        if total_unblocking_quota and not isinstance(total_unblocking_quota, int):
            raise TypeError("Expected argument 'total_unblocking_quota' to be a int")
        pulumi.set(__self__, "total_unblocking_quota", total_unblocking_quota)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if unblocking_quota_today and not isinstance(unblocking_quota_today, int):
            raise TypeError("Expected argument 'unblocking_quota_today' to be a int")
        pulumi.set(__self__, "unblocking_quota_today", unblocking_quota_today)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="remainingUnblockingQuota")
    def remaining_unblocking_quota(self) -> _builtins.int:
        """
        The remaining unblocking quota.
        """
        return pulumi.get(self, "remaining_unblocking_quota")

    @_builtins.property
    @pulumi.getter(name="remainingUnblockingQuotaToday")
    def remaining_unblocking_quota_today(self) -> _builtins.int:
        """
        The remaining unblocking quota of today.
        """
        return pulumi.get(self, "remaining_unblocking_quota_today")

    @_builtins.property
    @pulumi.getter(name="totalUnblockingQuota")
    def total_unblocking_quota(self) -> _builtins.int:
        """
        The total unblocking quota.
        """
        return pulumi.get(self, "total_unblocking_quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The user type. The valid values are as follows:
        + **common_user**: Indicates common user.
        + **native_protection_user**: Indicates native basic protection user.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="unblockingQuotaToday")
    def unblocking_quota_today(self) -> _builtins.int:
        """
        The unblocking quota of today.
        """
        return pulumi.get(self, "unblocking_quota_today")


class AwaitableGetUnblockQuotaStatisticsResult(GetUnblockQuotaStatisticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUnblockQuotaStatisticsResult(
            domain_id=self.domain_id,
            id=self.id,
            remaining_unblocking_quota=self.remaining_unblocking_quota,
            remaining_unblocking_quota_today=self.remaining_unblocking_quota_today,
            total_unblocking_quota=self.total_unblocking_quota,
            type=self.type,
            unblocking_quota_today=self.unblocking_quota_today)


def get_unblock_quota_statistics(domain_id: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUnblockQuotaStatisticsResult:
    """
    Use this data source to get information about the AAD unblock quota statistics within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_id = config.require_object("domainId")
    test = huaweicloud.AdvancedAntiDDos.get_unblock_quota_statistics(domain_id=domain_id)
    ```


    :param _builtins.str domain_id: Specified the account ID of IAM user.
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:AdvancedAntiDDos/getUnblockQuotaStatistics:getUnblockQuotaStatistics', __args__, opts=opts, typ=GetUnblockQuotaStatisticsResult).value

    return AwaitableGetUnblockQuotaStatisticsResult(
        domain_id=pulumi.get(__ret__, 'domain_id'),
        id=pulumi.get(__ret__, 'id'),
        remaining_unblocking_quota=pulumi.get(__ret__, 'remaining_unblocking_quota'),
        remaining_unblocking_quota_today=pulumi.get(__ret__, 'remaining_unblocking_quota_today'),
        total_unblocking_quota=pulumi.get(__ret__, 'total_unblocking_quota'),
        type=pulumi.get(__ret__, 'type'),
        unblocking_quota_today=pulumi.get(__ret__, 'unblocking_quota_today'))
def get_unblock_quota_statistics_output(domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUnblockQuotaStatisticsResult]:
    """
    Use this data source to get information about the AAD unblock quota statistics within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_id = config.require_object("domainId")
    test = huaweicloud.AdvancedAntiDDos.get_unblock_quota_statistics(domain_id=domain_id)
    ```


    :param _builtins.str domain_id: Specified the account ID of IAM user.
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:AdvancedAntiDDos/getUnblockQuotaStatistics:getUnblockQuotaStatistics', __args__, opts=opts, typ=GetUnblockQuotaStatisticsResult)
    return __ret__.apply(lambda __response__: GetUnblockQuotaStatisticsResult(
        domain_id=pulumi.get(__response__, 'domain_id'),
        id=pulumi.get(__response__, 'id'),
        remaining_unblocking_quota=pulumi.get(__response__, 'remaining_unblocking_quota'),
        remaining_unblocking_quota_today=pulumi.get(__response__, 'remaining_unblocking_quota_today'),
        total_unblocking_quota=pulumi.get(__response__, 'total_unblocking_quota'),
        type=pulumi.get(__response__, 'type'),
        unblocking_quota_today=pulumi.get(__response__, 'unblocking_quota_today')))
