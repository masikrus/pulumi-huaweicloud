# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBandwidthCurveResult',
    'AwaitableGetBandwidthCurveResult',
    'get_bandwidth_curve',
    'get_bandwidth_curve_output',
]

@pulumi.output_type
class GetBandwidthCurveResult:
    """
    A collection of values returned by getBandwidthCurve.
    """
    def __init__(__self__, curves=None, domains=None, end_time=None, id=None, overseas_type=None, recent=None, start_time=None, value_type=None):
        if curves and not isinstance(curves, list):
            raise TypeError("Expected argument 'curves' to be a list")
        pulumi.set(__self__, "curves", curves)
        if domains and not isinstance(domains, str):
            raise TypeError("Expected argument 'domains' to be a str")
        pulumi.set(__self__, "domains", domains)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if overseas_type and not isinstance(overseas_type, str):
            raise TypeError("Expected argument 'overseas_type' to be a str")
        pulumi.set(__self__, "overseas_type", overseas_type)
        if recent and not isinstance(recent, str):
            raise TypeError("Expected argument 'recent' to be a str")
        pulumi.set(__self__, "recent", recent)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if value_type and not isinstance(value_type, str):
            raise TypeError("Expected argument 'value_type' to be a str")
        pulumi.set(__self__, "value_type", value_type)

    @_builtins.property
    @pulumi.getter
    def curves(self) -> Sequence['outputs.GetBandwidthCurveCurveResult']:
        """
        The list of bandwidth curve detail.  
        The curve structure is documented below.
        """
        return pulumi.get(self, "curves")

    @_builtins.property
    @pulumi.getter
    def domains(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "domains")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="overseasType")
    def overseas_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "overseas_type")

    @_builtins.property
    @pulumi.getter
    def recent(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "recent")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> _builtins.str:
        return pulumi.get(self, "value_type")


class AwaitableGetBandwidthCurveResult(GetBandwidthCurveResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBandwidthCurveResult(
            curves=self.curves,
            domains=self.domains,
            end_time=self.end_time,
            id=self.id,
            overseas_type=self.overseas_type,
            recent=self.recent,
            start_time=self.start_time,
            value_type=self.value_type)


def get_bandwidth_curve(domains: Optional[_builtins.str] = None,
                        end_time: Optional[_builtins.str] = None,
                        overseas_type: Optional[_builtins.str] = None,
                        recent: Optional[_builtins.str] = None,
                        start_time: Optional[_builtins.str] = None,
                        value_type: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBandwidthCurveResult:
    """
    Use this data source to get the list of Advanced Anti-DDos bandwidth curve within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.AdvancedAntiDDos.get_bandwidth_curve()
    ```


    :param _builtins.str domains: Specifies the domains. If not specified, all domains are queried.
    :param _builtins.str end_time: Specifies the end time.
    :param _builtins.str overseas_type: Specifies instance type.
           The valid values are as follows:
           + **0**: Mainland.
           + **1**: Overseas.
    :param _builtins.str recent: Specifies recent.  
           The valid values are as follows:
           + **yesterday**
           + **today**
           + **3days**
           + **1week**
           + **1month**
           
           `recent` cannot be empty when both `start_time` and `end_time` are empty.
    :param _builtins.str start_time: Specifies the start time.
    :param _builtins.str value_type: Specifies the value type.  
           The valid values are as follows:
           + **mean**: Average value.
           + **peak**: Peak value.
    """
    __args__ = dict()
    __args__['domains'] = domains
    __args__['endTime'] = end_time
    __args__['overseasType'] = overseas_type
    __args__['recent'] = recent
    __args__['startTime'] = start_time
    __args__['valueType'] = value_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:AdvancedAntiDDos/getBandwidthCurve:getBandwidthCurve', __args__, opts=opts, typ=GetBandwidthCurveResult).value

    return AwaitableGetBandwidthCurveResult(
        curves=pulumi.get(__ret__, 'curves'),
        domains=pulumi.get(__ret__, 'domains'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        overseas_type=pulumi.get(__ret__, 'overseas_type'),
        recent=pulumi.get(__ret__, 'recent'),
        start_time=pulumi.get(__ret__, 'start_time'),
        value_type=pulumi.get(__ret__, 'value_type'))
def get_bandwidth_curve_output(domains: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               overseas_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               recent: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               value_type: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBandwidthCurveResult]:
    """
    Use this data source to get the list of Advanced Anti-DDos bandwidth curve within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.AdvancedAntiDDos.get_bandwidth_curve()
    ```


    :param _builtins.str domains: Specifies the domains. If not specified, all domains are queried.
    :param _builtins.str end_time: Specifies the end time.
    :param _builtins.str overseas_type: Specifies instance type.
           The valid values are as follows:
           + **0**: Mainland.
           + **1**: Overseas.
    :param _builtins.str recent: Specifies recent.  
           The valid values are as follows:
           + **yesterday**
           + **today**
           + **3days**
           + **1week**
           + **1month**
           
           `recent` cannot be empty when both `start_time` and `end_time` are empty.
    :param _builtins.str start_time: Specifies the start time.
    :param _builtins.str value_type: Specifies the value type.  
           The valid values are as follows:
           + **mean**: Average value.
           + **peak**: Peak value.
    """
    __args__ = dict()
    __args__['domains'] = domains
    __args__['endTime'] = end_time
    __args__['overseasType'] = overseas_type
    __args__['recent'] = recent
    __args__['startTime'] = start_time
    __args__['valueType'] = value_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:AdvancedAntiDDos/getBandwidthCurve:getBandwidthCurve', __args__, opts=opts, typ=GetBandwidthCurveResult)
    return __ret__.apply(lambda __response__: GetBandwidthCurveResult(
        curves=pulumi.get(__response__, 'curves'),
        domains=pulumi.get(__response__, 'domains'),
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        overseas_type=pulumi.get(__response__, 'overseas_type'),
        recent=pulumi.get(__response__, 'recent'),
        start_time=pulumi.get(__response__, 'start_time'),
        value_type=pulumi.get(__response__, 'value_type')))
