# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DomainArgs', 'Domain']

@pulumi.input_type
class DomainArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[_builtins.str],
                 enterprise_project_id: pulumi.Input[_builtins.str],
                 real_server: pulumi.Input[_builtins.str],
                 real_server_type: pulumi.Input[_builtins.int],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 port_http: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 port_https: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 vips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Domain resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name to be protected by AAD instance.
               The domain name must be put on record otherwise it can not be used.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID. The enterprise project
               ID should be consistent with the enterprise project to which the AAD instance belongs. The enterprise project ID can be
               viewed in Huawei Cloud EPS service, and the default enterprise project ID is **0**.
        :param pulumi.Input[_builtins.str] real_server: Specifies the value of the origin server.
               When the `real_server_type` is set to `0`, there can be maximum of `20` IP addresses, using commas(,) to separate multiple
               IP addresses. Each IP address is unique and invalid IP addresses are as follows:
               `127.0.0.1`, `172.16.*.*`, `192.168.*.*`, `10.0~255.*.*`.
               When the `real_server_type` is set to `1`, you can enter a domain such as `www.domain.com`.
               For multiple second-level domains, enter `*.domain.com.`.
        :param pulumi.Input[_builtins.int] real_server_type: Specifies the origin server type.
               The valid values are as follows:
               `0`: Indicates the type is IP address.
               `1`: Indicates the type is domain.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] instance_ids: Specifies the list of AAD instance IDs.
               
               > Exactly one of `vips` or `instance_ids` must be set.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] port_http: Specifies the port when forwarding protocol is HTTP.
               The valid values are as follows:
               `80`, `81`, `82`, `83`, `84`, `85`, `88`, `133`, `134`, `140`, `141`, `144`, `151`, `881`,<br>
               `1,135`, `1,139`, `7,000`, `7,001`, `8,001`, `8,006`, `8,078`, `8,080`, `8,087`, `8,088`,<br>
               `8,089`, `8,090`, `8,093`, `8,097`, `8,100`, `8,182`, `8,200`, `8,813`, `8,814`, `8,888`,<br>
               `9,000`, `9,001`, `9,002`, `9,003`, `18,080`, `19,101`, `19,501`, `21,028`, `40,010`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] port_https: Specifies the port when forwarding protocol is HTTPS.
               The valid values are as follows:
               `443`, `882`, `1,818`, `4,006`, `4,430`, `4,443`, `5,443`, `6,443`, `7,443`, `8,033`, `8,081`,<br>
               `8,082`, `8,083`, `8,443`, `8,445`, `8,553`, `8,663`, `8,750`, `8,804`, `8,805`, `7,443`,<br>
               `9,999`, `13,080`, `14,443`, `18,000`, `18,443`, `18,980`, `20,000`, `28,443`, `30,001`,<br>
               `30,003`, `30,004`, `30,005`.
               
               > Exactly one of `port_http` or `port_https` must be set.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vips: Specifies the list of AAD instance IP addresses. Defense instance IP address must
               belong to the same enterprise project.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "real_server", real_server)
        pulumi.set(__self__, "real_server_type", real_server_type)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if instance_ids is not None:
            pulumi.set(__self__, "instance_ids", instance_ids)
        if port_http is not None:
            pulumi.set(__self__, "port_http", port_http)
        if port_https is not None:
            pulumi.set(__self__, "port_https", port_https)
        if vips is not None:
            pulumi.set(__self__, "vips", vips)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the domain name to be protected by AAD instance.
        The domain name must be put on record otherwise it can not be used.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the enterprise project ID. The enterprise project
        ID should be consistent with the enterprise project to which the AAD instance belongs. The enterprise project ID can be
        viewed in Huawei Cloud EPS service, and the default enterprise project ID is **0**.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="realServer")
    def real_server(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the origin server.
        When the `real_server_type` is set to `0`, there can be maximum of `20` IP addresses, using commas(,) to separate multiple
        IP addresses. Each IP address is unique and invalid IP addresses are as follows:
        `127.0.0.1`, `172.16.*.*`, `192.168.*.*`, `10.0~255.*.*`.
        When the `real_server_type` is set to `1`, you can enter a domain such as `www.domain.com`.
        For multiple second-level domains, enter `*.domain.com.`.
        """
        return pulumi.get(self, "real_server")

    @real_server.setter
    def real_server(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "real_server", value)

    @_builtins.property
    @pulumi.getter(name="realServerType")
    def real_server_type(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the origin server type.
        The valid values are as follows:
        `0`: Indicates the type is IP address.
        `1`: Indicates the type is domain.
        """
        return pulumi.get(self, "real_server_type")

    @real_server_type.setter
    def real_server_type(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "real_server_type", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of AAD instance IDs.

        > Exactly one of `vips` or `instance_ids` must be set.
        """
        return pulumi.get(self, "instance_ids")

    @instance_ids.setter
    def instance_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "instance_ids", value)

    @_builtins.property
    @pulumi.getter(name="portHttp")
    def port_http(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Specifies the port when forwarding protocol is HTTP.
        The valid values are as follows:
        `80`, `81`, `82`, `83`, `84`, `85`, `88`, `133`, `134`, `140`, `141`, `144`, `151`, `881`,<br>
        `1,135`, `1,139`, `7,000`, `7,001`, `8,001`, `8,006`, `8,078`, `8,080`, `8,087`, `8,088`,<br>
        `8,089`, `8,090`, `8,093`, `8,097`, `8,100`, `8,182`, `8,200`, `8,813`, `8,814`, `8,888`,<br>
        `9,000`, `9,001`, `9,002`, `9,003`, `18,080`, `19,101`, `19,501`, `21,028`, `40,010`.
        """
        return pulumi.get(self, "port_http")

    @port_http.setter
    def port_http(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "port_http", value)

    @_builtins.property
    @pulumi.getter(name="portHttps")
    def port_https(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Specifies the port when forwarding protocol is HTTPS.
        The valid values are as follows:
        `443`, `882`, `1,818`, `4,006`, `4,430`, `4,443`, `5,443`, `6,443`, `7,443`, `8,033`, `8,081`,<br>
        `8,082`, `8,083`, `8,443`, `8,445`, `8,553`, `8,663`, `8,750`, `8,804`, `8,805`, `7,443`,<br>
        `9,999`, `13,080`, `14,443`, `18,000`, `18,443`, `18,980`, `20,000`, `28,443`, `30,001`,<br>
        `30,003`, `30,004`, `30,005`.

        > Exactly one of `port_http` or `port_https` must be set.
        """
        return pulumi.get(self, "port_https")

    @port_https.setter
    def port_https(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "port_https", value)

    @_builtins.property
    @pulumi.getter
    def vips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of AAD instance IP addresses. Defense instance IP address must
        belong to the same enterprise project.
        """
        return pulumi.get(self, "vips")

    @vips.setter
    def vips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vips", value)


@pulumi.input_type
class _DomainState:
    def __init__(__self__, *,
                 cname: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 port_http: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 port_https: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 real_server: Optional[pulumi.Input[_builtins.str]] = None,
                 real_server_type: Optional[pulumi.Input[_builtins.int]] = None,
                 vips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 waf_status: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering Domain resources.
        :param pulumi.Input[_builtins.str] cname: The cname of domain.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name to be protected by AAD instance.
               The domain name must be put on record otherwise it can not be used.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID. The enterprise project
               ID should be consistent with the enterprise project to which the AAD instance belongs. The enterprise project ID can be
               viewed in Huawei Cloud EPS service, and the default enterprise project ID is **0**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] instance_ids: Specifies the list of AAD instance IDs.
               
               > Exactly one of `vips` or `instance_ids` must be set.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] port_http: Specifies the port when forwarding protocol is HTTP.
               The valid values are as follows:
               `80`, `81`, `82`, `83`, `84`, `85`, `88`, `133`, `134`, `140`, `141`, `144`, `151`, `881`,<br>
               `1,135`, `1,139`, `7,000`, `7,001`, `8,001`, `8,006`, `8,078`, `8,080`, `8,087`, `8,088`,<br>
               `8,089`, `8,090`, `8,093`, `8,097`, `8,100`, `8,182`, `8,200`, `8,813`, `8,814`, `8,888`,<br>
               `9,000`, `9,001`, `9,002`, `9,003`, `18,080`, `19,101`, `19,501`, `21,028`, `40,010`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] port_https: Specifies the port when forwarding protocol is HTTPS.
               The valid values are as follows:
               `443`, `882`, `1,818`, `4,006`, `4,430`, `4,443`, `5,443`, `6,443`, `7,443`, `8,033`, `8,081`,<br>
               `8,082`, `8,083`, `8,443`, `8,445`, `8,553`, `8,663`, `8,750`, `8,804`, `8,805`, `7,443`,<br>
               `9,999`, `13,080`, `14,443`, `18,000`, `18,443`, `18,980`, `20,000`, `28,443`, `30,001`,<br>
               `30,003`, `30,004`, `30,005`.
               
               > Exactly one of `port_http` or `port_https` must be set.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] protocols: The protocol of the domain.
        :param pulumi.Input[_builtins.str] real_server: Specifies the value of the origin server.
               When the `real_server_type` is set to `0`, there can be maximum of `20` IP addresses, using commas(,) to separate multiple
               IP addresses. Each IP address is unique and invalid IP addresses are as follows:
               `127.0.0.1`, `172.16.*.*`, `192.168.*.*`, `10.0~255.*.*`.
               When the `real_server_type` is set to `1`, you can enter a domain such as `www.domain.com`.
               For multiple second-level domains, enter `*.domain.com.`.
        :param pulumi.Input[_builtins.int] real_server_type: Specifies the origin server type.
               The valid values are as follows:
               `0`: Indicates the type is IP address.
               `1`: Indicates the type is domain.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vips: Specifies the list of AAD instance IP addresses. Defense instance IP address must
               belong to the same enterprise project.
        :param pulumi.Input[_builtins.int] waf_status: The protect status of WAF server.
        """
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if instance_ids is not None:
            pulumi.set(__self__, "instance_ids", instance_ids)
        if port_http is not None:
            pulumi.set(__self__, "port_http", port_http)
        if port_https is not None:
            pulumi.set(__self__, "port_https", port_https)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if real_server is not None:
            pulumi.set(__self__, "real_server", real_server)
        if real_server_type is not None:
            pulumi.set(__self__, "real_server_type", real_server_type)
        if vips is not None:
            pulumi.set(__self__, "vips", vips)
        if waf_status is not None:
            pulumi.set(__self__, "waf_status", waf_status)

    @_builtins.property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cname of domain.
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cname", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the domain name to be protected by AAD instance.
        The domain name must be put on record otherwise it can not be used.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID. The enterprise project
        ID should be consistent with the enterprise project to which the AAD instance belongs. The enterprise project ID can be
        viewed in Huawei Cloud EPS service, and the default enterprise project ID is **0**.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of AAD instance IDs.

        > Exactly one of `vips` or `instance_ids` must be set.
        """
        return pulumi.get(self, "instance_ids")

    @instance_ids.setter
    def instance_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "instance_ids", value)

    @_builtins.property
    @pulumi.getter(name="portHttp")
    def port_http(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Specifies the port when forwarding protocol is HTTP.
        The valid values are as follows:
        `80`, `81`, `82`, `83`, `84`, `85`, `88`, `133`, `134`, `140`, `141`, `144`, `151`, `881`,<br>
        `1,135`, `1,139`, `7,000`, `7,001`, `8,001`, `8,006`, `8,078`, `8,080`, `8,087`, `8,088`,<br>
        `8,089`, `8,090`, `8,093`, `8,097`, `8,100`, `8,182`, `8,200`, `8,813`, `8,814`, `8,888`,<br>
        `9,000`, `9,001`, `9,002`, `9,003`, `18,080`, `19,101`, `19,501`, `21,028`, `40,010`.
        """
        return pulumi.get(self, "port_http")

    @port_http.setter
    def port_http(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "port_http", value)

    @_builtins.property
    @pulumi.getter(name="portHttps")
    def port_https(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Specifies the port when forwarding protocol is HTTPS.
        The valid values are as follows:
        `443`, `882`, `1,818`, `4,006`, `4,430`, `4,443`, `5,443`, `6,443`, `7,443`, `8,033`, `8,081`,<br>
        `8,082`, `8,083`, `8,443`, `8,445`, `8,553`, `8,663`, `8,750`, `8,804`, `8,805`, `7,443`,<br>
        `9,999`, `13,080`, `14,443`, `18,000`, `18,443`, `18,980`, `20,000`, `28,443`, `30,001`,<br>
        `30,003`, `30,004`, `30,005`.

        > Exactly one of `port_http` or `port_https` must be set.
        """
        return pulumi.get(self, "port_https")

    @port_https.setter
    def port_https(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "port_https", value)

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The protocol of the domain.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "protocols", value)

    @_builtins.property
    @pulumi.getter(name="realServer")
    def real_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of the origin server.
        When the `real_server_type` is set to `0`, there can be maximum of `20` IP addresses, using commas(,) to separate multiple
        IP addresses. Each IP address is unique and invalid IP addresses are as follows:
        `127.0.0.1`, `172.16.*.*`, `192.168.*.*`, `10.0~255.*.*`.
        When the `real_server_type` is set to `1`, you can enter a domain such as `www.domain.com`.
        For multiple second-level domains, enter `*.domain.com.`.
        """
        return pulumi.get(self, "real_server")

    @real_server.setter
    def real_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "real_server", value)

    @_builtins.property
    @pulumi.getter(name="realServerType")
    def real_server_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the origin server type.
        The valid values are as follows:
        `0`: Indicates the type is IP address.
        `1`: Indicates the type is domain.
        """
        return pulumi.get(self, "real_server_type")

    @real_server_type.setter
    def real_server_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "real_server_type", value)

    @_builtins.property
    @pulumi.getter
    def vips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of AAD instance IP addresses. Defense instance IP address must
        belong to the same enterprise project.
        """
        return pulumi.get(self, "vips")

    @vips.setter
    def vips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vips", value)

    @_builtins.property
    @pulumi.getter(name="wafStatus")
    def waf_status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The protect status of WAF server.
        """
        return pulumi.get(self, "waf_status")

    @waf_status.setter
    def waf_status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "waf_status", value)


@pulumi.type_token("huaweicloud:AdvancedAntiDDos/domain:Domain")
class Domain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 port_http: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 port_https: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 real_server: Optional[pulumi.Input[_builtins.str]] = None,
                 real_server_type: Optional[pulumi.Input[_builtins.int]] = None,
                 vips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages an AAD domain resource within HuaweiCloud.

        > If the WAF cname of the origin server you want to add shares an IP address and port with the WAF cname of another
          protected domain, **passby** the WAF at this time, it will affect the protection of all related domains.

        > One user can only create one protected domain within 3 seconds. If multiple protected domains need to be created,
          please refer to the example **Create multiple domain**.

        ## Example Usage

        ## Import

        The AAD domain can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:AdvancedAntiDDos/domain:Domain test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `vips`, `port_http` and `port_https`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_aad_domain" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              vips, port_http, port_https
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name to be protected by AAD instance.
               The domain name must be put on record otherwise it can not be used.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID. The enterprise project
               ID should be consistent with the enterprise project to which the AAD instance belongs. The enterprise project ID can be
               viewed in Huawei Cloud EPS service, and the default enterprise project ID is **0**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] instance_ids: Specifies the list of AAD instance IDs.
               
               > Exactly one of `vips` or `instance_ids` must be set.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] port_http: Specifies the port when forwarding protocol is HTTP.
               The valid values are as follows:
               `80`, `81`, `82`, `83`, `84`, `85`, `88`, `133`, `134`, `140`, `141`, `144`, `151`, `881`,<br>
               `1,135`, `1,139`, `7,000`, `7,001`, `8,001`, `8,006`, `8,078`, `8,080`, `8,087`, `8,088`,<br>
               `8,089`, `8,090`, `8,093`, `8,097`, `8,100`, `8,182`, `8,200`, `8,813`, `8,814`, `8,888`,<br>
               `9,000`, `9,001`, `9,002`, `9,003`, `18,080`, `19,101`, `19,501`, `21,028`, `40,010`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] port_https: Specifies the port when forwarding protocol is HTTPS.
               The valid values are as follows:
               `443`, `882`, `1,818`, `4,006`, `4,430`, `4,443`, `5,443`, `6,443`, `7,443`, `8,033`, `8,081`,<br>
               `8,082`, `8,083`, `8,443`, `8,445`, `8,553`, `8,663`, `8,750`, `8,804`, `8,805`, `7,443`,<br>
               `9,999`, `13,080`, `14,443`, `18,000`, `18,443`, `18,980`, `20,000`, `28,443`, `30,001`,<br>
               `30,003`, `30,004`, `30,005`.
               
               > Exactly one of `port_http` or `port_https` must be set.
        :param pulumi.Input[_builtins.str] real_server: Specifies the value of the origin server.
               When the `real_server_type` is set to `0`, there can be maximum of `20` IP addresses, using commas(,) to separate multiple
               IP addresses. Each IP address is unique and invalid IP addresses are as follows:
               `127.0.0.1`, `172.16.*.*`, `192.168.*.*`, `10.0~255.*.*`.
               When the `real_server_type` is set to `1`, you can enter a domain such as `www.domain.com`.
               For multiple second-level domains, enter `*.domain.com.`.
        :param pulumi.Input[_builtins.int] real_server_type: Specifies the origin server type.
               The valid values are as follows:
               `0`: Indicates the type is IP address.
               `1`: Indicates the type is domain.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vips: Specifies the list of AAD instance IP addresses. Defense instance IP address must
               belong to the same enterprise project.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AAD domain resource within HuaweiCloud.

        > If the WAF cname of the origin server you want to add shares an IP address and port with the WAF cname of another
          protected domain, **passby** the WAF at this time, it will affect the protection of all related domains.

        > One user can only create one protected domain within 3 seconds. If multiple protected domains need to be created,
          please refer to the example **Create multiple domain**.

        ## Example Usage

        ## Import

        The AAD domain can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:AdvancedAntiDDos/domain:Domain test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `vips`, `port_http` and `port_https`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_aad_domain" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              vips, port_http, port_https
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 port_http: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 port_https: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 real_server: Optional[pulumi.Input[_builtins.str]] = None,
                 real_server_type: Optional[pulumi.Input[_builtins.int]] = None,
                 vips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DomainArgs.__new__(DomainArgs)

            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["enable_force_new"] = enable_force_new
            if enterprise_project_id is None and not opts.urn:
                raise TypeError("Missing required property 'enterprise_project_id'")
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["instance_ids"] = instance_ids
            __props__.__dict__["port_http"] = port_http
            __props__.__dict__["port_https"] = port_https
            if real_server is None and not opts.urn:
                raise TypeError("Missing required property 'real_server'")
            __props__.__dict__["real_server"] = real_server
            if real_server_type is None and not opts.urn:
                raise TypeError("Missing required property 'real_server_type'")
            __props__.__dict__["real_server_type"] = real_server_type
            __props__.__dict__["vips"] = vips
            __props__.__dict__["cname"] = None
            __props__.__dict__["protocols"] = None
            __props__.__dict__["waf_status"] = None
        super(Domain, __self__).__init__(
            'huaweicloud:AdvancedAntiDDos/domain:Domain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cname: Optional[pulumi.Input[_builtins.str]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            port_http: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            port_https: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            protocols: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            real_server: Optional[pulumi.Input[_builtins.str]] = None,
            real_server_type: Optional[pulumi.Input[_builtins.int]] = None,
            vips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            waf_status: Optional[pulumi.Input[_builtins.int]] = None) -> 'Domain':
        """
        Get an existing Domain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cname: The cname of domain.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name to be protected by AAD instance.
               The domain name must be put on record otherwise it can not be used.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID. The enterprise project
               ID should be consistent with the enterprise project to which the AAD instance belongs. The enterprise project ID can be
               viewed in Huawei Cloud EPS service, and the default enterprise project ID is **0**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] instance_ids: Specifies the list of AAD instance IDs.
               
               > Exactly one of `vips` or `instance_ids` must be set.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] port_http: Specifies the port when forwarding protocol is HTTP.
               The valid values are as follows:
               `80`, `81`, `82`, `83`, `84`, `85`, `88`, `133`, `134`, `140`, `141`, `144`, `151`, `881`,<br>
               `1,135`, `1,139`, `7,000`, `7,001`, `8,001`, `8,006`, `8,078`, `8,080`, `8,087`, `8,088`,<br>
               `8,089`, `8,090`, `8,093`, `8,097`, `8,100`, `8,182`, `8,200`, `8,813`, `8,814`, `8,888`,<br>
               `9,000`, `9,001`, `9,002`, `9,003`, `18,080`, `19,101`, `19,501`, `21,028`, `40,010`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] port_https: Specifies the port when forwarding protocol is HTTPS.
               The valid values are as follows:
               `443`, `882`, `1,818`, `4,006`, `4,430`, `4,443`, `5,443`, `6,443`, `7,443`, `8,033`, `8,081`,<br>
               `8,082`, `8,083`, `8,443`, `8,445`, `8,553`, `8,663`, `8,750`, `8,804`, `8,805`, `7,443`,<br>
               `9,999`, `13,080`, `14,443`, `18,000`, `18,443`, `18,980`, `20,000`, `28,443`, `30,001`,<br>
               `30,003`, `30,004`, `30,005`.
               
               > Exactly one of `port_http` or `port_https` must be set.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] protocols: The protocol of the domain.
        :param pulumi.Input[_builtins.str] real_server: Specifies the value of the origin server.
               When the `real_server_type` is set to `0`, there can be maximum of `20` IP addresses, using commas(,) to separate multiple
               IP addresses. Each IP address is unique and invalid IP addresses are as follows:
               `127.0.0.1`, `172.16.*.*`, `192.168.*.*`, `10.0~255.*.*`.
               When the `real_server_type` is set to `1`, you can enter a domain such as `www.domain.com`.
               For multiple second-level domains, enter `*.domain.com.`.
        :param pulumi.Input[_builtins.int] real_server_type: Specifies the origin server type.
               The valid values are as follows:
               `0`: Indicates the type is IP address.
               `1`: Indicates the type is domain.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vips: Specifies the list of AAD instance IP addresses. Defense instance IP address must
               belong to the same enterprise project.
        :param pulumi.Input[_builtins.int] waf_status: The protect status of WAF server.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DomainState.__new__(_DomainState)

        __props__.__dict__["cname"] = cname
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["instance_ids"] = instance_ids
        __props__.__dict__["port_http"] = port_http
        __props__.__dict__["port_https"] = port_https
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["real_server"] = real_server
        __props__.__dict__["real_server_type"] = real_server_type
        __props__.__dict__["vips"] = vips
        __props__.__dict__["waf_status"] = waf_status
        return Domain(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def cname(self) -> pulumi.Output[_builtins.str]:
        """
        The cname of domain.
        """
        return pulumi.get(self, "cname")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the domain name to be protected by AAD instance.
        The domain name must be put on record otherwise it can not be used.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID. The enterprise project
        ID should be consistent with the enterprise project to which the AAD instance belongs. The enterprise project ID can be
        viewed in Huawei Cloud EPS service, and the default enterprise project ID is **0**.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of AAD instance IDs.

        > Exactly one of `vips` or `instance_ids` must be set.
        """
        return pulumi.get(self, "instance_ids")

    @_builtins.property
    @pulumi.getter(name="portHttp")
    def port_http(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        """
        Specifies the port when forwarding protocol is HTTP.
        The valid values are as follows:
        `80`, `81`, `82`, `83`, `84`, `85`, `88`, `133`, `134`, `140`, `141`, `144`, `151`, `881`,<br>
        `1,135`, `1,139`, `7,000`, `7,001`, `8,001`, `8,006`, `8,078`, `8,080`, `8,087`, `8,088`,<br>
        `8,089`, `8,090`, `8,093`, `8,097`, `8,100`, `8,182`, `8,200`, `8,813`, `8,814`, `8,888`,<br>
        `9,000`, `9,001`, `9,002`, `9,003`, `18,080`, `19,101`, `19,501`, `21,028`, `40,010`.
        """
        return pulumi.get(self, "port_http")

    @_builtins.property
    @pulumi.getter(name="portHttps")
    def port_https(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        """
        Specifies the port when forwarding protocol is HTTPS.
        The valid values are as follows:
        `443`, `882`, `1,818`, `4,006`, `4,430`, `4,443`, `5,443`, `6,443`, `7,443`, `8,033`, `8,081`,<br>
        `8,082`, `8,083`, `8,443`, `8,445`, `8,553`, `8,663`, `8,750`, `8,804`, `8,805`, `7,443`,<br>
        `9,999`, `13,080`, `14,443`, `18,000`, `18,443`, `18,980`, `20,000`, `28,443`, `30,001`,<br>
        `30,003`, `30,004`, `30,005`.

        > Exactly one of `port_http` or `port_https` must be set.
        """
        return pulumi.get(self, "port_https")

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The protocol of the domain.
        """
        return pulumi.get(self, "protocols")

    @_builtins.property
    @pulumi.getter(name="realServer")
    def real_server(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the value of the origin server.
        When the `real_server_type` is set to `0`, there can be maximum of `20` IP addresses, using commas(,) to separate multiple
        IP addresses. Each IP address is unique and invalid IP addresses are as follows:
        `127.0.0.1`, `172.16.*.*`, `192.168.*.*`, `10.0~255.*.*`.
        When the `real_server_type` is set to `1`, you can enter a domain such as `www.domain.com`.
        For multiple second-level domains, enter `*.domain.com.`.
        """
        return pulumi.get(self, "real_server")

    @_builtins.property
    @pulumi.getter(name="realServerType")
    def real_server_type(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the origin server type.
        The valid values are as follows:
        `0`: Indicates the type is IP address.
        `1`: Indicates the type is domain.
        """
        return pulumi.get(self, "real_server_type")

    @_builtins.property
    @pulumi.getter
    def vips(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the list of AAD instance IP addresses. Defense instance IP address must
        belong to the same enterprise project.
        """
        return pulumi.get(self, "vips")

    @_builtins.property
    @pulumi.getter(name="wafStatus")
    def waf_status(self) -> pulumi.Output[_builtins.int]:
        """
        The protect status of WAF server.
        """
        return pulumi.get(self, "waf_status")

