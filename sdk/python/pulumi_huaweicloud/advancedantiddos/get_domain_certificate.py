# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainCertificateResult',
    'AwaitableGetDomainCertificateResult',
    'get_domain_certificate',
    'get_domain_certificate_output',
]

@pulumi.output_type
class GetDomainCertificateResult:
    """
    A collection of values returned by getDomainCertificate.
    """
    def __init__(__self__, cert_infos=None, domain_id=None, domain_name=None, id=None, region=None):
        if cert_infos and not isinstance(cert_infos, list):
            raise TypeError("Expected argument 'cert_infos' to be a list")
        pulumi.set(__self__, "cert_infos", cert_infos)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="certInfos")
    def cert_infos(self) -> Sequence['outputs.GetDomainCertificateCertInfoResult']:
        """
        The certificate information.
        """
        return pulumi.get(self, "cert_infos")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        The domain name.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetDomainCertificateResult(GetDomainCertificateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainCertificateResult(
            cert_infos=self.cert_infos,
            domain_id=self.domain_id,
            domain_name=self.domain_name,
            id=self.id,
            region=self.region)


def get_domain_certificate(domain_id: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainCertificateResult:
    """
    Use this data source to get the Advanced Anti-DDos domain certificate within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.AdvancedAntiDDos.get_domain_certificate()
    ```


    :param _builtins.str domain_id: Specifies the AAD domain ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:AdvancedAntiDDos/getDomainCertificate:getDomainCertificate', __args__, opts=opts, typ=GetDomainCertificateResult).value

    return AwaitableGetDomainCertificateResult(
        cert_infos=pulumi.get(__ret__, 'cert_infos'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        domain_name=pulumi.get(__ret__, 'domain_name'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_domain_certificate_output(domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDomainCertificateResult]:
    """
    Use this data source to get the Advanced Anti-DDos domain certificate within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.AdvancedAntiDDos.get_domain_certificate()
    ```


    :param _builtins.str domain_id: Specifies the AAD domain ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:AdvancedAntiDDos/getDomainCertificate:getDomainCertificate', __args__, opts=opts, typ=GetDomainCertificateResult)
    return __ret__.apply(lambda __response__: GetDomainCertificateResult(
        cert_infos=pulumi.get(__response__, 'cert_infos'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        domain_name=pulumi.get(__response__, 'domain_name'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
