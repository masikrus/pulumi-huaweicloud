# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicyBlackWhiteListsResult',
    'AwaitableGetPolicyBlackWhiteListsResult',
    'get_policy_black_white_lists',
    'get_policy_black_white_lists_output',
]

@pulumi.output_type
class GetPolicyBlackWhiteListsResult:
    """
    A collection of values returned by getPolicyBlackWhiteLists.
    """
    def __init__(__self__, blacks=None, domain_name=None, id=None, overseas_type=None, whites=None):
        if blacks and not isinstance(blacks, list):
            raise TypeError("Expected argument 'blacks' to be a list")
        pulumi.set(__self__, "blacks", blacks)
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if overseas_type and not isinstance(overseas_type, int):
            raise TypeError("Expected argument 'overseas_type' to be a int")
        pulumi.set(__self__, "overseas_type", overseas_type)
        if whites and not isinstance(whites, list):
            raise TypeError("Expected argument 'whites' to be a list")
        pulumi.set(__self__, "whites", whites)

    @_builtins.property
    @pulumi.getter
    def blacks(self) -> Sequence['outputs.GetPolicyBlackWhiteListsBlackResult']:
        """
        The black list detail.  
        The black structure is documented below.
        """
        return pulumi.get(self, "blacks")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="overseasType")
    def overseas_type(self) -> _builtins.int:
        return pulumi.get(self, "overseas_type")

    @_builtins.property
    @pulumi.getter
    def whites(self) -> Sequence['outputs.GetPolicyBlackWhiteListsWhiteResult']:
        """
        The white list detail.  
        The white structure is documented below.
        """
        return pulumi.get(self, "whites")


class AwaitableGetPolicyBlackWhiteListsResult(GetPolicyBlackWhiteListsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyBlackWhiteListsResult(
            blacks=self.blacks,
            domain_name=self.domain_name,
            id=self.id,
            overseas_type=self.overseas_type,
            whites=self.whites)


def get_policy_black_white_lists(domain_name: Optional[_builtins.str] = None,
                                 overseas_type: Optional[_builtins.int] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyBlackWhiteListsResult:
    """
    Use this data source to get the list of Advanced Anti-DDos policy black white list within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.AdvancedAntiDDos.get_policy_black_white_lists()
    ```


    :param _builtins.str domain_name: Specifies the domain name.
    :param _builtins.int overseas_type: Specifies protection zone.  
           The valid values are as follows:
           + **0**: Mainland.
           + **1**: Overseas.
    """
    __args__ = dict()
    __args__['domainName'] = domain_name
    __args__['overseasType'] = overseas_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:AdvancedAntiDDos/getPolicyBlackWhiteLists:getPolicyBlackWhiteLists', __args__, opts=opts, typ=GetPolicyBlackWhiteListsResult).value

    return AwaitableGetPolicyBlackWhiteListsResult(
        blacks=pulumi.get(__ret__, 'blacks'),
        domain_name=pulumi.get(__ret__, 'domain_name'),
        id=pulumi.get(__ret__, 'id'),
        overseas_type=pulumi.get(__ret__, 'overseas_type'),
        whites=pulumi.get(__ret__, 'whites'))
def get_policy_black_white_lists_output(domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                                        overseas_type: Optional[pulumi.Input[_builtins.int]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyBlackWhiteListsResult]:
    """
    Use this data source to get the list of Advanced Anti-DDos policy black white list within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.AdvancedAntiDDos.get_policy_black_white_lists()
    ```


    :param _builtins.str domain_name: Specifies the domain name.
    :param _builtins.int overseas_type: Specifies protection zone.  
           The valid values are as follows:
           + **0**: Mainland.
           + **1**: Overseas.
    """
    __args__ = dict()
    __args__['domainName'] = domain_name
    __args__['overseasType'] = overseas_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:AdvancedAntiDDos/getPolicyBlackWhiteLists:getPolicyBlackWhiteLists', __args__, opts=opts, typ=GetPolicyBlackWhiteListsResult)
    return __ret__.apply(lambda __response__: GetPolicyBlackWhiteListsResult(
        blacks=pulumi.get(__response__, 'blacks'),
        domain_name=pulumi.get(__response__, 'domain_name'),
        id=pulumi.get(__response__, 'id'),
        overseas_type=pulumi.get(__response__, 'overseas_type'),
        whites=pulumi.get(__response__, 'whites')))
