# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DomainSecurityProtectionArgs', 'DomainSecurityProtection']

@pulumi.input_type
class DomainSecurityProtectionArgs:
    def __init__(__self__, *,
                 cc_switch: pulumi.Input[_builtins.int],
                 domain_id: pulumi.Input[_builtins.str],
                 waf_switch: pulumi.Input[_builtins.int],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DomainSecurityProtection resource.
        :param pulumi.Input[_builtins.int] cc_switch: Specifies whether to enable CC protection. Valid values are:
        :param pulumi.Input[_builtins.str] domain_id: Specifies the domain ID.
        :param pulumi.Input[_builtins.int] waf_switch: Specifies whether to enable basic web protection. Valid values are:
        """
        pulumi.set(__self__, "cc_switch", cc_switch)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "waf_switch", waf_switch)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)

    @_builtins.property
    @pulumi.getter(name="ccSwitch")
    def cc_switch(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies whether to enable CC protection. Valid values are:
        """
        return pulumi.get(self, "cc_switch")

    @cc_switch.setter
    def cc_switch(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "cc_switch", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the domain ID.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="wafSwitch")
    def waf_switch(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies whether to enable basic web protection. Valid values are:
        """
        return pulumi.get(self, "waf_switch")

    @waf_switch.setter
    def waf_switch(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "waf_switch", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)


@pulumi.input_type
class _DomainSecurityProtectionState:
    def __init__(__self__, *,
                 cc_switch: Optional[pulumi.Input[_builtins.int]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 waf_switch: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering DomainSecurityProtection resources.
        :param pulumi.Input[_builtins.int] cc_switch: Specifies whether to enable CC protection. Valid values are:
        :param pulumi.Input[_builtins.str] domain_id: Specifies the domain ID.
        :param pulumi.Input[_builtins.int] waf_switch: Specifies whether to enable basic web protection. Valid values are:
        """
        if cc_switch is not None:
            pulumi.set(__self__, "cc_switch", cc_switch)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if waf_switch is not None:
            pulumi.set(__self__, "waf_switch", waf_switch)

    @_builtins.property
    @pulumi.getter(name="ccSwitch")
    def cc_switch(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies whether to enable CC protection. Valid values are:
        """
        return pulumi.get(self, "cc_switch")

    @cc_switch.setter
    def cc_switch(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cc_switch", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the domain ID.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="wafSwitch")
    def waf_switch(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies whether to enable basic web protection. Valid values are:
        """
        return pulumi.get(self, "waf_switch")

    @waf_switch.setter
    def waf_switch(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "waf_switch", value)


@pulumi.type_token("huaweicloud:AdvancedAntiDDos/domainSecurityProtection:DomainSecurityProtection")
class DomainSecurityProtection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cc_switch: Optional[pulumi.Input[_builtins.int]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 waf_switch: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Use this resource to modify Advanced Anti-DDos security protection within HuaweiCloud.

        > This resource is only a one-time action resource for updating AAD security protection. Deleting this resource will
        not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_id = config.require_object("domainId")
        waf_switch = config.require_object("wafSwitch")
        cc_switch = config.require_object("ccSwitch")
        test = huaweicloud.advancedantiddos.DomainSecurityProtection("test",
            domain_id=domain_id,
            waf_switch=waf_switch,
            cc_switch=cc_switch)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] cc_switch: Specifies whether to enable CC protection. Valid values are:
        :param pulumi.Input[_builtins.str] domain_id: Specifies the domain ID.
        :param pulumi.Input[_builtins.int] waf_switch: Specifies whether to enable basic web protection. Valid values are:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DomainSecurityProtectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to modify Advanced Anti-DDos security protection within HuaweiCloud.

        > This resource is only a one-time action resource for updating AAD security protection. Deleting this resource will
        not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_id = config.require_object("domainId")
        waf_switch = config.require_object("wafSwitch")
        cc_switch = config.require_object("ccSwitch")
        test = huaweicloud.advancedantiddos.DomainSecurityProtection("test",
            domain_id=domain_id,
            waf_switch=waf_switch,
            cc_switch=cc_switch)
        ```

        :param str resource_name: The name of the resource.
        :param DomainSecurityProtectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DomainSecurityProtectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cc_switch: Optional[pulumi.Input[_builtins.int]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 waf_switch: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DomainSecurityProtectionArgs.__new__(DomainSecurityProtectionArgs)

            if cc_switch is None and not opts.urn:
                raise TypeError("Missing required property 'cc_switch'")
            __props__.__dict__["cc_switch"] = cc_switch
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            if waf_switch is None and not opts.urn:
                raise TypeError("Missing required property 'waf_switch'")
            __props__.__dict__["waf_switch"] = waf_switch
        super(DomainSecurityProtection, __self__).__init__(
            'huaweicloud:AdvancedAntiDDos/domainSecurityProtection:DomainSecurityProtection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cc_switch: Optional[pulumi.Input[_builtins.int]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            waf_switch: Optional[pulumi.Input[_builtins.int]] = None) -> 'DomainSecurityProtection':
        """
        Get an existing DomainSecurityProtection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] cc_switch: Specifies whether to enable CC protection. Valid values are:
        :param pulumi.Input[_builtins.str] domain_id: Specifies the domain ID.
        :param pulumi.Input[_builtins.int] waf_switch: Specifies whether to enable basic web protection. Valid values are:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DomainSecurityProtectionState.__new__(_DomainSecurityProtectionState)

        __props__.__dict__["cc_switch"] = cc_switch
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["waf_switch"] = waf_switch
        return DomainSecurityProtection(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="ccSwitch")
    def cc_switch(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies whether to enable CC protection. Valid values are:
        """
        return pulumi.get(self, "cc_switch")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="wafSwitch")
    def waf_switch(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies whether to enable basic web protection. Valid values are:
        """
        return pulumi.get(self, "waf_switch")

