# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetBlockStatisticsResult',
    'AwaitableGetBlockStatisticsResult',
    'get_block_statistics',
    'get_block_statistics_output',
]

@pulumi.output_type
class GetBlockStatisticsResult:
    """
    A collection of values returned by getBlockStatistics.
    """
    def __init__(__self__, automatic_unblocking_times=None, current_blocked_ip_numbers=None, domain_id=None, id=None, manual_unblocking_times=None, total_unblocking_times=None):
        if automatic_unblocking_times and not isinstance(automatic_unblocking_times, int):
            raise TypeError("Expected argument 'automatic_unblocking_times' to be a int")
        pulumi.set(__self__, "automatic_unblocking_times", automatic_unblocking_times)
        if current_blocked_ip_numbers and not isinstance(current_blocked_ip_numbers, int):
            raise TypeError("Expected argument 'current_blocked_ip_numbers' to be a int")
        pulumi.set(__self__, "current_blocked_ip_numbers", current_blocked_ip_numbers)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if manual_unblocking_times and not isinstance(manual_unblocking_times, int):
            raise TypeError("Expected argument 'manual_unblocking_times' to be a int")
        pulumi.set(__self__, "manual_unblocking_times", manual_unblocking_times)
        if total_unblocking_times and not isinstance(total_unblocking_times, int):
            raise TypeError("Expected argument 'total_unblocking_times' to be a int")
        pulumi.set(__self__, "total_unblocking_times", total_unblocking_times)

    @_builtins.property
    @pulumi.getter(name="automaticUnblockingTimes")
    def automatic_unblocking_times(self) -> _builtins.int:
        """
        The automatic unblocking times.
        """
        return pulumi.get(self, "automatic_unblocking_times")

    @_builtins.property
    @pulumi.getter(name="currentBlockedIpNumbers")
    def current_blocked_ip_numbers(self) -> _builtins.int:
        """
        The current blocked IP number.
        """
        return pulumi.get(self, "current_blocked_ip_numbers")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="manualUnblockingTimes")
    def manual_unblocking_times(self) -> _builtins.int:
        """
        The manual unblocking times.
        """
        return pulumi.get(self, "manual_unblocking_times")

    @_builtins.property
    @pulumi.getter(name="totalUnblockingTimes")
    def total_unblocking_times(self) -> _builtins.int:
        """
        The total unblocking times.
        """
        return pulumi.get(self, "total_unblocking_times")


class AwaitableGetBlockStatisticsResult(GetBlockStatisticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBlockStatisticsResult(
            automatic_unblocking_times=self.automatic_unblocking_times,
            current_blocked_ip_numbers=self.current_blocked_ip_numbers,
            domain_id=self.domain_id,
            id=self.id,
            manual_unblocking_times=self.manual_unblocking_times,
            total_unblocking_times=self.total_unblocking_times)


def get_block_statistics(domain_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBlockStatisticsResult:
    """
    Use this data source to get information about the AAD block statistics within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_id = config.require_object("domainId")
    test = huaweicloud.AdvancedAntiDDos.get_block_statistics(domain_id=domain_id)
    ```


    :param _builtins.str domain_id: Specified the account ID of IAM user.
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:AdvancedAntiDDos/getBlockStatistics:getBlockStatistics', __args__, opts=opts, typ=GetBlockStatisticsResult).value

    return AwaitableGetBlockStatisticsResult(
        automatic_unblocking_times=pulumi.get(__ret__, 'automatic_unblocking_times'),
        current_blocked_ip_numbers=pulumi.get(__ret__, 'current_blocked_ip_numbers'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        id=pulumi.get(__ret__, 'id'),
        manual_unblocking_times=pulumi.get(__ret__, 'manual_unblocking_times'),
        total_unblocking_times=pulumi.get(__ret__, 'total_unblocking_times'))
def get_block_statistics_output(domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBlockStatisticsResult]:
    """
    Use this data source to get information about the AAD block statistics within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_id = config.require_object("domainId")
    test = huaweicloud.AdvancedAntiDDos.get_block_statistics(domain_id=domain_id)
    ```


    :param _builtins.str domain_id: Specified the account ID of IAM user.
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:AdvancedAntiDDos/getBlockStatistics:getBlockStatistics', __args__, opts=opts, typ=GetBlockStatisticsResult)
    return __ret__.apply(lambda __response__: GetBlockStatisticsResult(
        automatic_unblocking_times=pulumi.get(__response__, 'automatic_unblocking_times'),
        current_blocked_ip_numbers=pulumi.get(__response__, 'current_blocked_ip_numbers'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        id=pulumi.get(__response__, 'id'),
        manual_unblocking_times=pulumi.get(__response__, 'manual_unblocking_times'),
        total_unblocking_times=pulumi.get(__response__, 'total_unblocking_times')))
