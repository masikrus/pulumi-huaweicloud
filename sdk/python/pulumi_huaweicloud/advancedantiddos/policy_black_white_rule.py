# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PolicyBlackWhiteRuleArgs', 'PolicyBlackWhiteRule']

@pulumi.input_type
class PolicyBlackWhiteRuleArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[_builtins.str],
                 ip: pulumi.Input[_builtins.str],
                 overseas_type: pulumi.Input[_builtins.int],
                 type: pulumi.Input[_builtins.int],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PolicyBlackWhiteRule resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name.
        :param pulumi.Input[_builtins.str] ip: Specifies the IP address or IP segment.
        :param pulumi.Input[_builtins.int] overseas_type: Specifies the protection area. The value can be:
        :param pulumi.Input[_builtins.int] type: Specifies the rule type. The value can be:
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "overseas_type", overseas_type)
        pulumi.set(__self__, "type", type)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the IP address or IP segment.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter(name="overseasType")
    def overseas_type(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the protection area. The value can be:
        """
        return pulumi.get(self, "overseas_type")

    @overseas_type.setter
    def overseas_type(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "overseas_type", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the rule type. The value can be:
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)


@pulumi.input_type
class _PolicyBlackWhiteRuleState:
    def __init__(__self__, *,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 overseas_type: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering PolicyBlackWhiteRule resources.
        :param pulumi.Input[_builtins.str] domain_id: The domain ID.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name.
        :param pulumi.Input[_builtins.str] ip: Specifies the IP address or IP segment.
        :param pulumi.Input[_builtins.int] overseas_type: Specifies the protection area. The value can be:
        :param pulumi.Input[_builtins.int] type: Specifies the rule type. The value can be:
        """
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if overseas_type is not None:
            pulumi.set(__self__, "overseas_type", overseas_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP address or IP segment.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter(name="overseasType")
    def overseas_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the protection area. The value can be:
        """
        return pulumi.get(self, "overseas_type")

    @overseas_type.setter
    def overseas_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "overseas_type", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the rule type. The value can be:
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:AdvancedAntiDDos/policyBlackWhiteRule:PolicyBlackWhiteRule")
class PolicyBlackWhiteRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 overseas_type: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages a WAF black and white rule resource within HuaweiCloud AAD service.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        ip = config.require_object("ip")
        white_rule = huaweicloud.advancedantiddos.PolicyBlackWhiteRule("white_rule",
            domain_name=domain_name,
            ip=ip,
            overseas_type=0,
            type=1)
        ```

        ## Import

        The AAD policy black white rule can be imported using the `domain_name`, `overseas_type`, `ip` and `type`,

        separated by slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:AdvancedAntiDDos/policyBlackWhiteRule:PolicyBlackWhiteRule test <domain_name>/<overseas_type>/<ip>/<type>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name.
        :param pulumi.Input[_builtins.str] ip: Specifies the IP address or IP segment.
        :param pulumi.Input[_builtins.int] overseas_type: Specifies the protection area. The value can be:
        :param pulumi.Input[_builtins.int] type: Specifies the rule type. The value can be:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyBlackWhiteRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a WAF black and white rule resource within HuaweiCloud AAD service.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_name = config.require_object("domainName")
        ip = config.require_object("ip")
        white_rule = huaweicloud.advancedantiddos.PolicyBlackWhiteRule("white_rule",
            domain_name=domain_name,
            ip=ip,
            overseas_type=0,
            type=1)
        ```

        ## Import

        The AAD policy black white rule can be imported using the `domain_name`, `overseas_type`, `ip` and `type`,

        separated by slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:AdvancedAntiDDos/policyBlackWhiteRule:PolicyBlackWhiteRule test <domain_name>/<overseas_type>/<ip>/<type>
        ```

        :param str resource_name: The name of the resource.
        :param PolicyBlackWhiteRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyBlackWhiteRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 overseas_type: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyBlackWhiteRuleArgs.__new__(PolicyBlackWhiteRuleArgs)

            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["enable_force_new"] = enable_force_new
            if ip is None and not opts.urn:
                raise TypeError("Missing required property 'ip'")
            __props__.__dict__["ip"] = ip
            if overseas_type is None and not opts.urn:
                raise TypeError("Missing required property 'overseas_type'")
            __props__.__dict__["overseas_type"] = overseas_type
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["domain_id"] = None
        super(PolicyBlackWhiteRule, __self__).__init__(
            'huaweicloud:AdvancedAntiDDos/policyBlackWhiteRule:PolicyBlackWhiteRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            ip: Optional[pulumi.Input[_builtins.str]] = None,
            overseas_type: Optional[pulumi.Input[_builtins.int]] = None,
            type: Optional[pulumi.Input[_builtins.int]] = None) -> 'PolicyBlackWhiteRule':
        """
        Get an existing PolicyBlackWhiteRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] domain_id: The domain ID.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name.
        :param pulumi.Input[_builtins.str] ip: Specifies the IP address or IP segment.
        :param pulumi.Input[_builtins.int] overseas_type: Specifies the protection area. The value can be:
        :param pulumi.Input[_builtins.int] type: Specifies the rule type. The value can be:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyBlackWhiteRuleState.__new__(_PolicyBlackWhiteRuleState)

        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["ip"] = ip
        __props__.__dict__["overseas_type"] = overseas_type
        __props__.__dict__["type"] = type
        return PolicyBlackWhiteRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the domain name.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the IP address or IP segment.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="overseasType")
    def overseas_type(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the protection area. The value can be:
        """
        return pulumi.get(self, "overseas_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the rule type. The value can be:
        """
        return pulumi.get(self, "type")

