# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPoliciesResult',
    'AwaitableGetPoliciesResult',
    'get_policies',
    'get_policies_output',
]

@pulumi.output_type
class GetPoliciesResult:
    """
    A collection of values returned by getPolicies.
    """
    def __init__(__self__, id=None, policies=None, region=None, scaling_group_id=None, scaling_policy_id=None, scaling_policy_name=None, scaling_policy_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scaling_group_id and not isinstance(scaling_group_id, str):
            raise TypeError("Expected argument 'scaling_group_id' to be a str")
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        if scaling_policy_id and not isinstance(scaling_policy_id, str):
            raise TypeError("Expected argument 'scaling_policy_id' to be a str")
        pulumi.set(__self__, "scaling_policy_id", scaling_policy_id)
        if scaling_policy_name and not isinstance(scaling_policy_name, str):
            raise TypeError("Expected argument 'scaling_policy_name' to be a str")
        pulumi.set(__self__, "scaling_policy_name", scaling_policy_name)
        if scaling_policy_type and not isinstance(scaling_policy_type, str):
            raise TypeError("Expected argument 'scaling_policy_type' to be a str")
        pulumi.set(__self__, "scaling_policy_type", scaling_policy_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetPoliciesPolicyResult']:
        """
        All scaling policies that match the filter parameters.  
        The policies structure is documented below.
        """
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> _builtins.str:
        """
        The scaling group ID.
        """
        return pulumi.get(self, "scaling_group_id")

    @_builtins.property
    @pulumi.getter(name="scalingPolicyId")
    def scaling_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "scaling_policy_id")

    @_builtins.property
    @pulumi.getter(name="scalingPolicyName")
    def scaling_policy_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "scaling_policy_name")

    @_builtins.property
    @pulumi.getter(name="scalingPolicyType")
    def scaling_policy_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "scaling_policy_type")


class AwaitableGetPoliciesResult(GetPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPoliciesResult(
            id=self.id,
            policies=self.policies,
            region=self.region,
            scaling_group_id=self.scaling_group_id,
            scaling_policy_id=self.scaling_policy_id,
            scaling_policy_name=self.scaling_policy_name,
            scaling_policy_type=self.scaling_policy_type)


def get_policies(region: Optional[_builtins.str] = None,
                 scaling_group_id: Optional[_builtins.str] = None,
                 scaling_policy_id: Optional[_builtins.str] = None,
                 scaling_policy_name: Optional[_builtins.str] = None,
                 scaling_policy_type: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPoliciesResult:
    """
    Use this data source to get a list of AS scaling policies within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_group_id = config.require_object("scalingGroupId")
    test = huaweicloud.As.get_policies(scaling_group_id=scaling_group_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the scaling policies.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the scaling group ID.
    :param _builtins.str scaling_policy_id: Specifies the scaling policy ID.
    :param _builtins.str scaling_policy_name: Specifies the scaling policy name.
    :param _builtins.str scaling_policy_type: Specifies the scaling policy type.  
           The valid values are as follows:
           + **ALARM**: indicates that the scaling action is triggered by an alarm.
           + **SCHEDULED**: indicates that the scaling action is triggered as scheduled.
           + **RECURRENCE**: indicates that the scaling action is triggered periodically.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    __args__['scalingPolicyId'] = scaling_policy_id
    __args__['scalingPolicyName'] = scaling_policy_name
    __args__['scalingPolicyType'] = scaling_policy_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:As/getPolicies:getPolicies', __args__, opts=opts, typ=GetPoliciesResult).value

    return AwaitableGetPoliciesResult(
        id=pulumi.get(__ret__, 'id'),
        policies=pulumi.get(__ret__, 'policies'),
        region=pulumi.get(__ret__, 'region'),
        scaling_group_id=pulumi.get(__ret__, 'scaling_group_id'),
        scaling_policy_id=pulumi.get(__ret__, 'scaling_policy_id'),
        scaling_policy_name=pulumi.get(__ret__, 'scaling_policy_name'),
        scaling_policy_type=pulumi.get(__ret__, 'scaling_policy_type'))
def get_policies_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                        scaling_policy_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        scaling_policy_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        scaling_policy_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPoliciesResult]:
    """
    Use this data source to get a list of AS scaling policies within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_group_id = config.require_object("scalingGroupId")
    test = huaweicloud.As.get_policies(scaling_group_id=scaling_group_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the scaling policies.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the scaling group ID.
    :param _builtins.str scaling_policy_id: Specifies the scaling policy ID.
    :param _builtins.str scaling_policy_name: Specifies the scaling policy name.
    :param _builtins.str scaling_policy_type: Specifies the scaling policy type.  
           The valid values are as follows:
           + **ALARM**: indicates that the scaling action is triggered by an alarm.
           + **SCHEDULED**: indicates that the scaling action is triggered as scheduled.
           + **RECURRENCE**: indicates that the scaling action is triggered periodically.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    __args__['scalingPolicyId'] = scaling_policy_id
    __args__['scalingPolicyName'] = scaling_policy_name
    __args__['scalingPolicyType'] = scaling_policy_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:As/getPolicies:getPolicies', __args__, opts=opts, typ=GetPoliciesResult)
    return __ret__.apply(lambda __response__: GetPoliciesResult(
        id=pulumi.get(__response__, 'id'),
        policies=pulumi.get(__response__, 'policies'),
        region=pulumi.get(__response__, 'region'),
        scaling_group_id=pulumi.get(__response__, 'scaling_group_id'),
        scaling_policy_id=pulumi.get(__response__, 'scaling_policy_id'),
        scaling_policy_name=pulumi.get(__response__, 'scaling_policy_name'),
        scaling_policy_type=pulumi.get(__response__, 'scaling_policy_type')))
