# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstancesResult',
    'AwaitableGetInstancesResult',
    'get_instances',
    'get_instances_output',
]

@pulumi.output_type
class GetInstancesResult:
    """
    A collection of values returned by getInstances.
    """
    def __init__(__self__, health_status=None, id=None, instances=None, life_cycle_state=None, protect_from_scaling_down=None, region=None, scaling_group_id=None):
        if health_status and not isinstance(health_status, str):
            raise TypeError("Expected argument 'health_status' to be a str")
        pulumi.set(__self__, "health_status", health_status)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if life_cycle_state and not isinstance(life_cycle_state, str):
            raise TypeError("Expected argument 'life_cycle_state' to be a str")
        pulumi.set(__self__, "life_cycle_state", life_cycle_state)
        if protect_from_scaling_down and not isinstance(protect_from_scaling_down, str):
            raise TypeError("Expected argument 'protect_from_scaling_down' to be a str")
        pulumi.set(__self__, "protect_from_scaling_down", protect_from_scaling_down)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scaling_group_id and not isinstance(scaling_group_id, str):
            raise TypeError("Expected argument 'scaling_group_id' to be a str")
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)

    @_builtins.property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[_builtins.str]:
        """
        Indicates the instance health status.
        """
        return pulumi.get(self, "health_status")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetInstancesInstanceResult']:
        """
        The details about the instances in the AS group.
        The instances structure is documented below.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="lifeCycleState")
    def life_cycle_state(self) -> Optional[_builtins.str]:
        """
        Indicates the instance lifecycle status in the AS group.
        """
        return pulumi.get(self, "life_cycle_state")

    @_builtins.property
    @pulumi.getter(name="protectFromScalingDown")
    def protect_from_scaling_down(self) -> Optional[_builtins.str]:
        """
        Indicates the instance protection status.
        """
        return pulumi.get(self, "protect_from_scaling_down")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> _builtins.str:
        """
        Indicates the ID of the AS group to which the instance belongs.
        """
        return pulumi.get(self, "scaling_group_id")


class AwaitableGetInstancesResult(GetInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstancesResult(
            health_status=self.health_status,
            id=self.id,
            instances=self.instances,
            life_cycle_state=self.life_cycle_state,
            protect_from_scaling_down=self.protect_from_scaling_down,
            region=self.region,
            scaling_group_id=self.scaling_group_id)


def get_instances(health_status: Optional[_builtins.str] = None,
                  life_cycle_state: Optional[_builtins.str] = None,
                  protect_from_scaling_down: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  scaling_group_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstancesResult:
    """
    Use this data source to get AS instances within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_group_id = config.require_object("scalingGroupId")
    test = huaweicloud.As.get_instances(scaling_group_id=scaling_group_id)
    ```


    :param _builtins.str health_status: Specifies the instance health status. Valid values are:
           + **INITIALIZING**: The instance is initializing.
           + **NORMAL**: The instance is normal.
           + **ERROR**: The instance is abnormal.
    :param _builtins.str life_cycle_state: Specifies the instance lifecycle status in the AS group. Valid values are:
           + **INSERVICE**: The instance is enabled.
           + **PENDING**: The instance is being added to the AS group.
           + **PENDING_WAIT**: The instance is waiting to be added to the AS group.
           + **REMOVING**: The instance is being removed from the AS group.
           + **REMOVING_WAIT**: The instance is waiting to be removed from the AS group.
           + **STANDBY**: The instance is in standby state.
           + **ENTERING_STANDBY**: The instance is entering the standby state.
    :param _builtins.str protect_from_scaling_down: Specifies the instance protection status. Valid values are:
           + **true**: Instance protection is enabled.
           + **false**: Instance protection is disabled.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the AS group ID.
    """
    __args__ = dict()
    __args__['healthStatus'] = health_status
    __args__['lifeCycleState'] = life_cycle_state
    __args__['protectFromScalingDown'] = protect_from_scaling_down
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:As/getInstances:getInstances', __args__, opts=opts, typ=GetInstancesResult).value

    return AwaitableGetInstancesResult(
        health_status=pulumi.get(__ret__, 'health_status'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        life_cycle_state=pulumi.get(__ret__, 'life_cycle_state'),
        protect_from_scaling_down=pulumi.get(__ret__, 'protect_from_scaling_down'),
        region=pulumi.get(__ret__, 'region'),
        scaling_group_id=pulumi.get(__ret__, 'scaling_group_id'))
def get_instances_output(health_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         life_cycle_state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         protect_from_scaling_down: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInstancesResult]:
    """
    Use this data source to get AS instances within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_group_id = config.require_object("scalingGroupId")
    test = huaweicloud.As.get_instances(scaling_group_id=scaling_group_id)
    ```


    :param _builtins.str health_status: Specifies the instance health status. Valid values are:
           + **INITIALIZING**: The instance is initializing.
           + **NORMAL**: The instance is normal.
           + **ERROR**: The instance is abnormal.
    :param _builtins.str life_cycle_state: Specifies the instance lifecycle status in the AS group. Valid values are:
           + **INSERVICE**: The instance is enabled.
           + **PENDING**: The instance is being added to the AS group.
           + **PENDING_WAIT**: The instance is waiting to be added to the AS group.
           + **REMOVING**: The instance is being removed from the AS group.
           + **REMOVING_WAIT**: The instance is waiting to be removed from the AS group.
           + **STANDBY**: The instance is in standby state.
           + **ENTERING_STANDBY**: The instance is entering the standby state.
    :param _builtins.str protect_from_scaling_down: Specifies the instance protection status. Valid values are:
           + **true**: Instance protection is enabled.
           + **false**: Instance protection is disabled.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the AS group ID.
    """
    __args__ = dict()
    __args__['healthStatus'] = health_status
    __args__['lifeCycleState'] = life_cycle_state
    __args__['protectFromScalingDown'] = protect_from_scaling_down
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:As/getInstances:getInstances', __args__, opts=opts, typ=GetInstancesResult)
    return __ret__.apply(lambda __response__: GetInstancesResult(
        health_status=pulumi.get(__response__, 'health_status'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        life_cycle_state=pulumi.get(__response__, 'life_cycle_state'),
        protect_from_scaling_down=pulumi.get(__response__, 'protect_from_scaling_down'),
        region=pulumi.get(__response__, 'region'),
        scaling_group_id=pulumi.get(__response__, 'scaling_group_id')))
