# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetConfigurationsResult',
    'AwaitableGetConfigurationsResult',
    'get_configurations',
    'get_configurations_output',
]

@pulumi.output_type
class GetConfigurationsResult:
    """
    A collection of values returned by getConfigurations.
    """
    def __init__(__self__, configurations=None, id=None, image_id=None, name=None, region=None):
        if configurations and not isinstance(configurations, list):
            raise TypeError("Expected argument 'configurations' to be a list")
        pulumi.set(__self__, "configurations", configurations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_id and not isinstance(image_id, str):
            raise TypeError("Expected argument 'image_id' to be a str")
        pulumi.set(__self__, "image_id", image_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetConfigurationsConfigurationResult']:
        """
        A list of AS configurations.
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetConfigurationsResult(GetConfigurationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigurationsResult(
            configurations=self.configurations,
            id=self.id,
            image_id=self.image_id,
            name=self.name,
            region=self.region)


def get_configurations(image_id: Optional[_builtins.str] = None,
                       name: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigurationsResult:
    """
    Use this data source to get a list of AS configurations.

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    configurations = huaweicloud.As.get_configurations()
    ```


    :param _builtins.str image_id: Specifies the image ID.
    :param _builtins.str name: Specifies the AS configuration name. Supports fuzzy search.
    :param _builtins.str region: The region in which to obtain the AS configurations.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['imageId'] = image_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:As/getConfigurations:getConfigurations', __args__, opts=opts, typ=GetConfigurationsResult).value

    return AwaitableGetConfigurationsResult(
        configurations=pulumi.get(__ret__, 'configurations'),
        id=pulumi.get(__ret__, 'id'),
        image_id=pulumi.get(__ret__, 'image_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'))
def get_configurations_output(image_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConfigurationsResult]:
    """
    Use this data source to get a list of AS configurations.

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    configurations = huaweicloud.As.get_configurations()
    ```


    :param _builtins.str image_id: Specifies the image ID.
    :param _builtins.str name: Specifies the AS configuration name. Supports fuzzy search.
    :param _builtins.str region: The region in which to obtain the AS configurations.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['imageId'] = image_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:As/getConfigurations:getConfigurations', __args__, opts=opts, typ=GetConfigurationsResult)
    return __ret__.apply(lambda __response__: GetConfigurationsResult(
        configurations=pulumi.get(__response__, 'configurations'),
        id=pulumi.get(__response__, 'id'),
        image_id=pulumi.get(__response__, 'image_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region')))
