# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['LifecycleHookCallbackArgs', 'LifecycleHookCallback']

@pulumi.input_type
class LifecycleHookCallbackArgs:
    def __init__(__self__, *,
                 lifecycle_action_result: pulumi.Input[_builtins.str],
                 scaling_group_id: pulumi.Input[_builtins.str],
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_action_key: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_hook_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LifecycleHookCallback resource.
        :param pulumi.Input[_builtins.str] lifecycle_action_result: Specifies the lifecycle hook callback operation.
               The valid values are as follows:
               + **ABANDON**
               + **CONTINUE**
               + **EXTEND**: Extend the timeout by `1` hour each time.
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] scaling_group_id: Specifies the ID of the AS group.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID for the lifecycle callback.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lifecycle_action_key: Specifies the lifecycle hook callback operation token.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lifecycle_hook_name: Specifies the lifecycle hook name.
               Changing this will create a new resource.
               
               > The parameters `instance_id` and `lifecycle_hook_name` must be used together, and they are mutually exclusive with
               the parameter `lifecycle_action_key`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the AS lifecycle hook callback.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "lifecycle_action_result", lifecycle_action_result)
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if lifecycle_action_key is not None:
            pulumi.set(__self__, "lifecycle_action_key", lifecycle_action_key)
        if lifecycle_hook_name is not None:
            pulumi.set(__self__, "lifecycle_hook_name", lifecycle_hook_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="lifecycleActionResult")
    def lifecycle_action_result(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the lifecycle hook callback operation.
        The valid values are as follows:
        + **ABANDON**
        + **CONTINUE**
        + **EXTEND**: Extend the timeout by `1` hour each time.

        Changing this will create a new resource.
        """
        return pulumi.get(self, "lifecycle_action_result")

    @lifecycle_action_result.setter
    def lifecycle_action_result(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "lifecycle_action_result", value)

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the AS group.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "scaling_group_id")

    @scaling_group_id.setter
    def scaling_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scaling_group_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the instance ID for the lifecycle callback.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleActionKey")
    def lifecycle_action_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the lifecycle hook callback operation token.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "lifecycle_action_key")

    @lifecycle_action_key.setter
    def lifecycle_action_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_action_key", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleHookName")
    def lifecycle_hook_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the lifecycle hook name.
        Changing this will create a new resource.

        > The parameters `instance_id` and `lifecycle_hook_name` must be used together, and they are mutually exclusive with
        the parameter `lifecycle_action_key`.
        """
        return pulumi.get(self, "lifecycle_hook_name")

    @lifecycle_hook_name.setter
    def lifecycle_hook_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_hook_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the AS lifecycle hook callback.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LifecycleHookCallbackState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_action_key: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_action_result: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_hook_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LifecycleHookCallback resources.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID for the lifecycle callback.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lifecycle_action_key: Specifies the lifecycle hook callback operation token.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lifecycle_action_result: Specifies the lifecycle hook callback operation.
               The valid values are as follows:
               + **ABANDON**
               + **CONTINUE**
               + **EXTEND**: Extend the timeout by `1` hour each time.
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lifecycle_hook_name: Specifies the lifecycle hook name.
               Changing this will create a new resource.
               
               > The parameters `instance_id` and `lifecycle_hook_name` must be used together, and they are mutually exclusive with
               the parameter `lifecycle_action_key`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the AS lifecycle hook callback.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] scaling_group_id: Specifies the ID of the AS group.
               Changing this will create a new resource.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if lifecycle_action_key is not None:
            pulumi.set(__self__, "lifecycle_action_key", lifecycle_action_key)
        if lifecycle_action_result is not None:
            pulumi.set(__self__, "lifecycle_action_result", lifecycle_action_result)
        if lifecycle_hook_name is not None:
            pulumi.set(__self__, "lifecycle_hook_name", lifecycle_hook_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scaling_group_id is not None:
            pulumi.set(__self__, "scaling_group_id", scaling_group_id)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the instance ID for the lifecycle callback.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleActionKey")
    def lifecycle_action_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the lifecycle hook callback operation token.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "lifecycle_action_key")

    @lifecycle_action_key.setter
    def lifecycle_action_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_action_key", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleActionResult")
    def lifecycle_action_result(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the lifecycle hook callback operation.
        The valid values are as follows:
        + **ABANDON**
        + **CONTINUE**
        + **EXTEND**: Extend the timeout by `1` hour each time.

        Changing this will create a new resource.
        """
        return pulumi.get(self, "lifecycle_action_result")

    @lifecycle_action_result.setter
    def lifecycle_action_result(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_action_result", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleHookName")
    def lifecycle_hook_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the lifecycle hook name.
        Changing this will create a new resource.

        > The parameters `instance_id` and `lifecycle_hook_name` must be used together, and they are mutually exclusive with
        the parameter `lifecycle_action_key`.
        """
        return pulumi.get(self, "lifecycle_hook_name")

    @lifecycle_hook_name.setter
    def lifecycle_hook_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_hook_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the AS lifecycle hook callback.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the AS group.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "scaling_group_id")

    @scaling_group_id.setter
    def scaling_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scaling_group_id", value)


@pulumi.type_token("huaweicloud:As/lifecycleHookCallback:LifecycleHookCallback")
class LifecycleHookCallback(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_action_key: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_action_result: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_hook_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an AS lifecycle hook callback resource within HuaweiCloud.

        > 1. Callback action can only be performed when the instance lifecycle hook state is **HANGING**.
        >    <br/>2. The lifecycle hook callback is a one-time action.
        >    <br/>3. Destroying resources does not change the current state of the instance lifecycle hook.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        as_group_id = config.require_object("asGroupId")
        lifecycle_action_result = config.require_object("lifecycleActionResult")
        instance_id = config.require_object("instanceId")
        hook_name = config.require_object("hookName")
        test = huaweicloud.as_.LifecycleHookCallback("test",
            scaling_group_id=as_group_id,
            lifecycle_action_result=lifecycle_action_result,
            instance_id=instance_id,
            lifecycle_hook_name=hook_name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID for the lifecycle callback.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lifecycle_action_key: Specifies the lifecycle hook callback operation token.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lifecycle_action_result: Specifies the lifecycle hook callback operation.
               The valid values are as follows:
               + **ABANDON**
               + **CONTINUE**
               + **EXTEND**: Extend the timeout by `1` hour each time.
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lifecycle_hook_name: Specifies the lifecycle hook name.
               Changing this will create a new resource.
               
               > The parameters `instance_id` and `lifecycle_hook_name` must be used together, and they are mutually exclusive with
               the parameter `lifecycle_action_key`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the AS lifecycle hook callback.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] scaling_group_id: Specifies the ID of the AS group.
               Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LifecycleHookCallbackArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AS lifecycle hook callback resource within HuaweiCloud.

        > 1. Callback action can only be performed when the instance lifecycle hook state is **HANGING**.
        >    <br/>2. The lifecycle hook callback is a one-time action.
        >    <br/>3. Destroying resources does not change the current state of the instance lifecycle hook.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        as_group_id = config.require_object("asGroupId")
        lifecycle_action_result = config.require_object("lifecycleActionResult")
        instance_id = config.require_object("instanceId")
        hook_name = config.require_object("hookName")
        test = huaweicloud.as_.LifecycleHookCallback("test",
            scaling_group_id=as_group_id,
            lifecycle_action_result=lifecycle_action_result,
            instance_id=instance_id,
            lifecycle_hook_name=hook_name)
        ```

        :param str resource_name: The name of the resource.
        :param LifecycleHookCallbackArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LifecycleHookCallbackArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_action_key: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_action_result: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_hook_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LifecycleHookCallbackArgs.__new__(LifecycleHookCallbackArgs)

            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["lifecycle_action_key"] = lifecycle_action_key
            if lifecycle_action_result is None and not opts.urn:
                raise TypeError("Missing required property 'lifecycle_action_result'")
            __props__.__dict__["lifecycle_action_result"] = lifecycle_action_result
            __props__.__dict__["lifecycle_hook_name"] = lifecycle_hook_name
            __props__.__dict__["region"] = region
            if scaling_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'scaling_group_id'")
            __props__.__dict__["scaling_group_id"] = scaling_group_id
        super(LifecycleHookCallback, __self__).__init__(
            'huaweicloud:As/lifecycleHookCallback:LifecycleHookCallback',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_action_key: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_action_result: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_hook_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'LifecycleHookCallback':
        """
        Get an existing LifecycleHookCallback resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID for the lifecycle callback.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lifecycle_action_key: Specifies the lifecycle hook callback operation token.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lifecycle_action_result: Specifies the lifecycle hook callback operation.
               The valid values are as follows:
               + **ABANDON**
               + **CONTINUE**
               + **EXTEND**: Extend the timeout by `1` hour each time.
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] lifecycle_hook_name: Specifies the lifecycle hook name.
               Changing this will create a new resource.
               
               > The parameters `instance_id` and `lifecycle_hook_name` must be used together, and they are mutually exclusive with
               the parameter `lifecycle_action_key`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the AS lifecycle hook callback.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] scaling_group_id: Specifies the ID of the AS group.
               Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LifecycleHookCallbackState.__new__(_LifecycleHookCallbackState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["lifecycle_action_key"] = lifecycle_action_key
        __props__.__dict__["lifecycle_action_result"] = lifecycle_action_result
        __props__.__dict__["lifecycle_hook_name"] = lifecycle_hook_name
        __props__.__dict__["region"] = region
        __props__.__dict__["scaling_group_id"] = scaling_group_id
        return LifecycleHookCallback(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the instance ID for the lifecycle callback.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleActionKey")
    def lifecycle_action_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the lifecycle hook callback operation token.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "lifecycle_action_key")

    @_builtins.property
    @pulumi.getter(name="lifecycleActionResult")
    def lifecycle_action_result(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the lifecycle hook callback operation.
        The valid values are as follows:
        + **ABANDON**
        + **CONTINUE**
        + **EXTEND**: Extend the timeout by `1` hour each time.

        Changing this will create a new resource.
        """
        return pulumi.get(self, "lifecycle_action_result")

    @_builtins.property
    @pulumi.getter(name="lifecycleHookName")
    def lifecycle_hook_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the lifecycle hook name.
        Changing this will create a new resource.

        > The parameters `instance_id` and `lifecycle_hook_name` must be used together, and they are mutually exclusive with
        the parameter `lifecycle_action_key`.
        """
        return pulumi.get(self, "lifecycle_hook_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the AS lifecycle hook callback.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the AS group.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "scaling_group_id")

