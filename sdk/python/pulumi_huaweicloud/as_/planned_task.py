# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PlannedTaskArgs', 'PlannedTask']

@pulumi.input_type
class PlannedTaskArgs:
    def __init__(__self__, *,
                 instance_number: pulumi.Input['PlannedTaskInstanceNumberArgs'],
                 scaling_group_id: pulumi.Input[_builtins.str],
                 scheduled_policy: pulumi.Input['PlannedTaskScheduledPolicyArgs'],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PlannedTask resource.
        :param pulumi.Input['PlannedTaskInstanceNumberArgs'] instance_number: Specifies the numbers of scaling group instance for AS planned task.
               The instance_number structure is documented below.
               
               <a name="AS_ScheduledPolicy"></a>
               The `scheduled_policy` block supports:
        :param pulumi.Input[_builtins.str] scaling_group_id: Specifies the AS scaling group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input['PlannedTaskScheduledPolicyArgs'] scheduled_policy: Specifies the scheduled or periodic policy for AS planned task.
               The scheduled_policy structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of planned task.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "instance_number", instance_number)
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        pulumi.set(__self__, "scheduled_policy", scheduled_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> pulumi.Input['PlannedTaskInstanceNumberArgs']:
        """
        Specifies the numbers of scaling group instance for AS planned task.
        The instance_number structure is documented below.

        <a name="AS_ScheduledPolicy"></a>
        The `scheduled_policy` block supports:
        """
        return pulumi.get(self, "instance_number")

    @instance_number.setter
    def instance_number(self, value: pulumi.Input['PlannedTaskInstanceNumberArgs']):
        pulumi.set(self, "instance_number", value)

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the AS scaling group ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "scaling_group_id")

    @scaling_group_id.setter
    def scaling_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scaling_group_id", value)

    @_builtins.property
    @pulumi.getter(name="scheduledPolicy")
    def scheduled_policy(self) -> pulumi.Input['PlannedTaskScheduledPolicyArgs']:
        """
        Specifies the scheduled or periodic policy for AS planned task.
        The scheduled_policy structure is documented below.
        """
        return pulumi.get(self, "scheduled_policy")

    @scheduled_policy.setter
    def scheduled_policy(self, value: pulumi.Input['PlannedTaskScheduledPolicyArgs']):
        pulumi.set(self, "scheduled_policy", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of planned task.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _PlannedTaskState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_number: Optional[pulumi.Input['PlannedTaskInstanceNumberArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduled_policy: Optional[pulumi.Input['PlannedTaskScheduledPolicyArgs']] = None):
        """
        Input properties used for looking up and filtering PlannedTask resources.
        :param pulumi.Input[_builtins.str] created_at: The (UTC) creation time of the event source, in RFC3339 format.
        :param pulumi.Input['PlannedTaskInstanceNumberArgs'] instance_number: Specifies the numbers of scaling group instance for AS planned task.
               The instance_number structure is documented below.
               
               <a name="AS_ScheduledPolicy"></a>
               The `scheduled_policy` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of planned task.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] scaling_group_id: Specifies the AS scaling group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input['PlannedTaskScheduledPolicyArgs'] scheduled_policy: Specifies the scheduled or periodic policy for AS planned task.
               The scheduled_policy structure is documented below.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if instance_number is not None:
            pulumi.set(__self__, "instance_number", instance_number)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scaling_group_id is not None:
            pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        if scheduled_policy is not None:
            pulumi.set(__self__, "scheduled_policy", scheduled_policy)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The (UTC) creation time of the event source, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> Optional[pulumi.Input['PlannedTaskInstanceNumberArgs']]:
        """
        Specifies the numbers of scaling group instance for AS planned task.
        The instance_number structure is documented below.

        <a name="AS_ScheduledPolicy"></a>
        The `scheduled_policy` block supports:
        """
        return pulumi.get(self, "instance_number")

    @instance_number.setter
    def instance_number(self, value: Optional[pulumi.Input['PlannedTaskInstanceNumberArgs']]):
        pulumi.set(self, "instance_number", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of planned task.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AS scaling group ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "scaling_group_id")

    @scaling_group_id.setter
    def scaling_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scaling_group_id", value)

    @_builtins.property
    @pulumi.getter(name="scheduledPolicy")
    def scheduled_policy(self) -> Optional[pulumi.Input['PlannedTaskScheduledPolicyArgs']]:
        """
        Specifies the scheduled or periodic policy for AS planned task.
        The scheduled_policy structure is documented below.
        """
        return pulumi.get(self, "scheduled_policy")

    @scheduled_policy.setter
    def scheduled_policy(self, value: Optional[pulumi.Input['PlannedTaskScheduledPolicyArgs']]):
        pulumi.set(self, "scheduled_policy", value)


@pulumi.type_token("huaweicloud:As/plannedTask:PlannedTask")
class PlannedTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_number: Optional[pulumi.Input[Union['PlannedTaskInstanceNumberArgs', 'PlannedTaskInstanceNumberArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduled_policy: Optional[pulumi.Input[Union['PlannedTaskScheduledPolicyArgs', 'PlannedTaskScheduledPolicyArgsDict']]] = None,
                 __props__=None):
        """
        Manages an AS planned task resource within HuaweiCloud.

        ## Example Usage

        ### AS timed planned Task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        scaling_group_id = config.require_object("scalingGroupId")
        name = config.require_object("name")
        test = huaweicloud.as_.PlannedTask("test",
            scaling_group_id=scaling_group_id,
            name=name,
            scheduled_policy={
                "launch_time": "2025-11-30T12:00Z",
            },
            instance_number={
                "max": "3",
                "min": "1",
                "desire": "2",
            })
        ```

        ### AS periodic planned Task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        scaling_group_id = config.require_object("scalingGroupId")
        name = config.require_object("name")
        test = huaweicloud.as_.PlannedTask("test",
            scaling_group_id=scaling_group_id,
            name=name,
            scheduled_policy={
                "launch_time": "10:00",
                "recurrence_type": "WEEKLY",
                "start_time": "2025-11-30T12:00Z",
                "end_time": "2025-12-30T12:00Z",
                "recurrence_value": "6",
            },
            instance_number={
                "max": "3",
                "min": "1",
                "desire": "2",
            })
        ```

        ## Import

        The AS planned task can be imported using the related `scaling_group_id` and `id`, separated by a slash, e.g.

        ```sh
        $ pulumi import huaweicloud:As/plannedTask:PlannedTask test <scaling_group_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['PlannedTaskInstanceNumberArgs', 'PlannedTaskInstanceNumberArgsDict']] instance_number: Specifies the numbers of scaling group instance for AS planned task.
               The instance_number structure is documented below.
               
               <a name="AS_ScheduledPolicy"></a>
               The `scheduled_policy` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of planned task.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] scaling_group_id: Specifies the AS scaling group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['PlannedTaskScheduledPolicyArgs', 'PlannedTaskScheduledPolicyArgsDict']] scheduled_policy: Specifies the scheduled or periodic policy for AS planned task.
               The scheduled_policy structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PlannedTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AS planned task resource within HuaweiCloud.

        ## Example Usage

        ### AS timed planned Task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        scaling_group_id = config.require_object("scalingGroupId")
        name = config.require_object("name")
        test = huaweicloud.as_.PlannedTask("test",
            scaling_group_id=scaling_group_id,
            name=name,
            scheduled_policy={
                "launch_time": "2025-11-30T12:00Z",
            },
            instance_number={
                "max": "3",
                "min": "1",
                "desire": "2",
            })
        ```

        ### AS periodic planned Task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        scaling_group_id = config.require_object("scalingGroupId")
        name = config.require_object("name")
        test = huaweicloud.as_.PlannedTask("test",
            scaling_group_id=scaling_group_id,
            name=name,
            scheduled_policy={
                "launch_time": "10:00",
                "recurrence_type": "WEEKLY",
                "start_time": "2025-11-30T12:00Z",
                "end_time": "2025-12-30T12:00Z",
                "recurrence_value": "6",
            },
            instance_number={
                "max": "3",
                "min": "1",
                "desire": "2",
            })
        ```

        ## Import

        The AS planned task can be imported using the related `scaling_group_id` and `id`, separated by a slash, e.g.

        ```sh
        $ pulumi import huaweicloud:As/plannedTask:PlannedTask test <scaling_group_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param PlannedTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PlannedTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_number: Optional[pulumi.Input[Union['PlannedTaskInstanceNumberArgs', 'PlannedTaskInstanceNumberArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduled_policy: Optional[pulumi.Input[Union['PlannedTaskScheduledPolicyArgs', 'PlannedTaskScheduledPolicyArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PlannedTaskArgs.__new__(PlannedTaskArgs)

            if instance_number is None and not opts.urn:
                raise TypeError("Missing required property 'instance_number'")
            __props__.__dict__["instance_number"] = instance_number
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if scaling_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'scaling_group_id'")
            __props__.__dict__["scaling_group_id"] = scaling_group_id
            if scheduled_policy is None and not opts.urn:
                raise TypeError("Missing required property 'scheduled_policy'")
            __props__.__dict__["scheduled_policy"] = scheduled_policy
            __props__.__dict__["created_at"] = None
        super(PlannedTask, __self__).__init__(
            'huaweicloud:As/plannedTask:PlannedTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            instance_number: Optional[pulumi.Input[Union['PlannedTaskInstanceNumberArgs', 'PlannedTaskInstanceNumberArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            scheduled_policy: Optional[pulumi.Input[Union['PlannedTaskScheduledPolicyArgs', 'PlannedTaskScheduledPolicyArgsDict']]] = None) -> 'PlannedTask':
        """
        Get an existing PlannedTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The (UTC) creation time of the event source, in RFC3339 format.
        :param pulumi.Input[Union['PlannedTaskInstanceNumberArgs', 'PlannedTaskInstanceNumberArgsDict']] instance_number: Specifies the numbers of scaling group instance for AS planned task.
               The instance_number structure is documented below.
               
               <a name="AS_ScheduledPolicy"></a>
               The `scheduled_policy` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of planned task.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] scaling_group_id: Specifies the AS scaling group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['PlannedTaskScheduledPolicyArgs', 'PlannedTaskScheduledPolicyArgsDict']] scheduled_policy: Specifies the scheduled or periodic policy for AS planned task.
               The scheduled_policy structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PlannedTaskState.__new__(_PlannedTaskState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["instance_number"] = instance_number
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["scaling_group_id"] = scaling_group_id
        __props__.__dict__["scheduled_policy"] = scheduled_policy
        return PlannedTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The (UTC) creation time of the event source, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> pulumi.Output['outputs.PlannedTaskInstanceNumber']:
        """
        Specifies the numbers of scaling group instance for AS planned task.
        The instance_number structure is documented below.

        <a name="AS_ScheduledPolicy"></a>
        The `scheduled_policy` block supports:
        """
        return pulumi.get(self, "instance_number")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of planned task.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the AS scaling group ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "scaling_group_id")

    @_builtins.property
    @pulumi.getter(name="scheduledPolicy")
    def scheduled_policy(self) -> pulumi.Output['outputs.PlannedTaskScheduledPolicy']:
        """
        Specifies the scheduled or periodic policy for AS planned task.
        The scheduled_policy structure is documented below.
        """
        return pulumi.get(self, "scheduled_policy")

