# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetActivityLogsV2Result',
    'AwaitableGetActivityLogsV2Result',
    'get_activity_logs_v2',
    'get_activity_logs_v2_output',
]

@pulumi.output_type
class GetActivityLogsV2Result:
    """
    A collection of values returned by getActivityLogsV2.
    """
    def __init__(__self__, end_time=None, id=None, log_id=None, region=None, scaling_activity_logs=None, scaling_group_id=None, start_time=None, status=None, type=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_id and not isinstance(log_id, str):
            raise TypeError("Expected argument 'log_id' to be a str")
        pulumi.set(__self__, "log_id", log_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scaling_activity_logs and not isinstance(scaling_activity_logs, list):
            raise TypeError("Expected argument 'scaling_activity_logs' to be a list")
        pulumi.set(__self__, "scaling_activity_logs", scaling_activity_logs)
        if scaling_group_id and not isinstance(scaling_group_id, str):
            raise TypeError("Expected argument 'scaling_group_id' to be a str")
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        The end time of the scaling action. The time format must comply with UTC.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "log_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingActivityLogs")
    def scaling_activity_logs(self) -> Sequence['outputs.GetActivityLogsV2ScalingActivityLogResult']:
        """
        The scaling action logs.
        """
        return pulumi.get(self, "scaling_activity_logs")

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> _builtins.str:
        return pulumi.get(self, "scaling_group_id")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        """
        The start time of the scaling action. The time format must comply with UTC.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the scaling action. Valid values are:
        + **SUCCESS**: The scaling action has been performed.
        + **FAIL**: Performing the scaling action failed.
        + **DOING**: The scaling action is being performed.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the scaling action.
        """
        return pulumi.get(self, "type")


class AwaitableGetActivityLogsV2Result(GetActivityLogsV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetActivityLogsV2Result(
            end_time=self.end_time,
            id=self.id,
            log_id=self.log_id,
            region=self.region,
            scaling_activity_logs=self.scaling_activity_logs,
            scaling_group_id=self.scaling_group_id,
            start_time=self.start_time,
            status=self.status,
            type=self.type)


def get_activity_logs_v2(end_time: Optional[_builtins.str] = None,
                         log_id: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         scaling_group_id: Optional[_builtins.str] = None,
                         start_time: Optional[_builtins.str] = None,
                         status: Optional[_builtins.str] = None,
                         type: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetActivityLogsV2Result:
    """
    Use this data source to get a list of AS (V2 version) scaling activity logs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    group_id = config.require_object("groupId")
    test = huaweicloud.As.get_activity_logs_v2(scaling_group_id=group_id)
    ```


    :param _builtins.str end_time: Specifies the end time that complies with UTC for querying scaling action logs.
           The format of the end time is yyyy-MM-ddThh:mm:ssZ.
    :param _builtins.str log_id: Specifies the scaling action log ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the AS group ID.
    :param _builtins.str start_time: Specifies the start time that complies with UTC for querying scaling action logs.
           The format of the start time is yyyy-MM-ddThh:mm:ssZ.
    :param _builtins.str status: Specifies the status of the scaling action. Valid values are:
           + **SUCCESS**: The scaling action has been performed.
           + **FAIL**: Performing the scaling action failed.
           + **DOING**: The scaling action is being performed.
    :param _builtins.str type: Specifies the types of the scaling actions to be queried. Different types are separated by
           commas (,). Valid values are:
           + **NORMAL**: Indicates a common scaling action.
           + **MANUAL_REMOVE**: Indicates manually removing instances from an AS group.
           + **MANUAL_DELETE**: Indicates manually removing and deleting instances from an AS group.
           + **MANUAL_ADD**: Indicates manually adding instances to an AS group.
           + **ELB_CHECK_DELETE**: Indicates that instances are removed from an AS group and deleted based on the ELB health check
           result.
           + **AUDIT_CHECK_DELETE**: Indicates that instances are removed from an AS group and deleted based on the audit.
           + **DIFF**: Indicates that the number of expected instances is different from the actual number of instances.
           + **MODIFY_ELB**: Indicates the load balancer migration.
           + **ENTER_STANDBY**: Indicates setting instances to standby mode.
           + **EXIT_STANDBY**: Indicates canceling standby mode for instances.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['logId'] = log_id
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    __args__['startTime'] = start_time
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:As/getActivityLogsV2:getActivityLogsV2', __args__, opts=opts, typ=GetActivityLogsV2Result).value

    return AwaitableGetActivityLogsV2Result(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        log_id=pulumi.get(__ret__, 'log_id'),
        region=pulumi.get(__ret__, 'region'),
        scaling_activity_logs=pulumi.get(__ret__, 'scaling_activity_logs'),
        scaling_group_id=pulumi.get(__ret__, 'scaling_group_id'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_activity_logs_v2_output(end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                log_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                                start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetActivityLogsV2Result]:
    """
    Use this data source to get a list of AS (V2 version) scaling activity logs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    group_id = config.require_object("groupId")
    test = huaweicloud.As.get_activity_logs_v2(scaling_group_id=group_id)
    ```


    :param _builtins.str end_time: Specifies the end time that complies with UTC for querying scaling action logs.
           The format of the end time is yyyy-MM-ddThh:mm:ssZ.
    :param _builtins.str log_id: Specifies the scaling action log ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the AS group ID.
    :param _builtins.str start_time: Specifies the start time that complies with UTC for querying scaling action logs.
           The format of the start time is yyyy-MM-ddThh:mm:ssZ.
    :param _builtins.str status: Specifies the status of the scaling action. Valid values are:
           + **SUCCESS**: The scaling action has been performed.
           + **FAIL**: Performing the scaling action failed.
           + **DOING**: The scaling action is being performed.
    :param _builtins.str type: Specifies the types of the scaling actions to be queried. Different types are separated by
           commas (,). Valid values are:
           + **NORMAL**: Indicates a common scaling action.
           + **MANUAL_REMOVE**: Indicates manually removing instances from an AS group.
           + **MANUAL_DELETE**: Indicates manually removing and deleting instances from an AS group.
           + **MANUAL_ADD**: Indicates manually adding instances to an AS group.
           + **ELB_CHECK_DELETE**: Indicates that instances are removed from an AS group and deleted based on the ELB health check
           result.
           + **AUDIT_CHECK_DELETE**: Indicates that instances are removed from an AS group and deleted based on the audit.
           + **DIFF**: Indicates that the number of expected instances is different from the actual number of instances.
           + **MODIFY_ELB**: Indicates the load balancer migration.
           + **ENTER_STANDBY**: Indicates setting instances to standby mode.
           + **EXIT_STANDBY**: Indicates canceling standby mode for instances.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['logId'] = log_id
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    __args__['startTime'] = start_time
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:As/getActivityLogsV2:getActivityLogsV2', __args__, opts=opts, typ=GetActivityLogsV2Result)
    return __ret__.apply(lambda __response__: GetActivityLogsV2Result(
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        log_id=pulumi.get(__response__, 'log_id'),
        region=pulumi.get(__response__, 'region'),
        scaling_activity_logs=pulumi.get(__response__, 'scaling_activity_logs'),
        scaling_group_id=pulumi.get(__response__, 'scaling_group_id'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
