# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGroupQuotasResult',
    'AwaitableGetGroupQuotasResult',
    'get_group_quotas',
    'get_group_quotas_output',
]

@pulumi.output_type
class GetGroupQuotasResult:
    """
    A collection of values returned by getGroupQuotas.
    """
    def __init__(__self__, id=None, quotas=None, region=None, scaling_group_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if quotas and not isinstance(quotas, list):
            raise TypeError("Expected argument 'quotas' to be a list")
        pulumi.set(__self__, "quotas", quotas)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scaling_group_id and not isinstance(scaling_group_id, str):
            raise TypeError("Expected argument 'scaling_group_id' to be a str")
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def quotas(self) -> Sequence['outputs.GetGroupQuotasQuotaResult']:
        """
        The quota details.
        """
        return pulumi.get(self, "quotas")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> _builtins.str:
        return pulumi.get(self, "scaling_group_id")


class AwaitableGetGroupQuotasResult(GetGroupQuotasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupQuotasResult(
            id=self.id,
            quotas=self.quotas,
            region=self.region,
            scaling_group_id=self.scaling_group_id)


def get_group_quotas(region: Optional[_builtins.str] = None,
                     scaling_group_id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupQuotasResult:
    """
    Use this data source to get the quota list of a specified AS group within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_group_id = config.require_object("scalingGroupId")
    test = huaweicloud.As.get_group_quotas(scaling_group_id=scaling_group_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the AS group ID to query quotas.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:As/getGroupQuotas:getGroupQuotas', __args__, opts=opts, typ=GetGroupQuotasResult).value

    return AwaitableGetGroupQuotasResult(
        id=pulumi.get(__ret__, 'id'),
        quotas=pulumi.get(__ret__, 'quotas'),
        region=pulumi.get(__ret__, 'region'),
        scaling_group_id=pulumi.get(__ret__, 'scaling_group_id'))
def get_group_quotas_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGroupQuotasResult]:
    """
    Use this data source to get the quota list of a specified AS group within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_group_id = config.require_object("scalingGroupId")
    test = huaweicloud.As.get_group_quotas(scaling_group_id=scaling_group_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the AS group ID to query quotas.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:As/getGroupQuotas:getGroupQuotas', __args__, opts=opts, typ=GetGroupQuotasResult)
    return __ret__.apply(lambda __response__: GetGroupQuotasResult(
        id=pulumi.get(__response__, 'id'),
        quotas=pulumi.get(__response__, 'quotas'),
        region=pulumi.get(__response__, 'region'),
        scaling_group_id=pulumi.get(__response__, 'scaling_group_id')))
