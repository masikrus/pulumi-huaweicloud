# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['InstanceAttachArgs', 'InstanceAttach']

@pulumi.input_type
class InstanceAttachArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 scaling_group_id: pulumi.Input[_builtins.str],
                 append_instance: Optional[pulumi.Input[_builtins.bool]] = None,
                 protected: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 standby: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a InstanceAttach resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ECS instance ID.
               Changing this creates a new resource.
               
               <!--markdownlint-disable MD033-->
               > Before adding instances to an AS group, ensure that the following conditions are met:
               <br/>1. The instance is not in other AS groups.
               <br/>2. The instance is in the same VPC as the AS group.
               <br/>3. The instance is in the AZs used by the AS group.
               <br/>4. After the instance is added, the total number of instances is less than or equal to the maximum number of
               instances allowed.
        :param pulumi.Input[_builtins.str] scaling_group_id: Specifies the AS group ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] append_instance: Specifies whether to add a new instance when the instance enter standby mode.
               This parameter takes effect only when `standby` is set to true.
        :param pulumi.Input[_builtins.bool] protected: Specifies whether the instance can be removed **automatically** from the AS group.
               Once configured, when AS automatically scales in the AS group, the instance that is protected will not be removed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] standby: Specifies whether to stop distributing traffic to the instance but do not want to remove
               it from the AS group. You can stop or restart the instance without worrying about it will be removed from the AS group.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        if append_instance is not None:
            pulumi.set(__self__, "append_instance", append_instance)
        if protected is not None:
            pulumi.set(__self__, "protected", protected)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if standby is not None:
            pulumi.set(__self__, "standby", standby)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ECS instance ID.
        Changing this creates a new resource.

        <!--markdownlint-disable MD033-->
        > Before adding instances to an AS group, ensure that the following conditions are met:
        <br/>1. The instance is not in other AS groups.
        <br/>2. The instance is in the same VPC as the AS group.
        <br/>3. The instance is in the AZs used by the AS group.
        <br/>4. After the instance is added, the total number of instances is less than or equal to the maximum number of
        instances allowed.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the AS group ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "scaling_group_id")

    @scaling_group_id.setter
    def scaling_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scaling_group_id", value)

    @_builtins.property
    @pulumi.getter(name="appendInstance")
    def append_instance(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to add a new instance when the instance enter standby mode.
        This parameter takes effect only when `standby` is set to true.
        """
        return pulumi.get(self, "append_instance")

    @append_instance.setter
    def append_instance(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "append_instance", value)

    @_builtins.property
    @pulumi.getter
    def protected(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the instance can be removed **automatically** from the AS group.
        Once configured, when AS automatically scales in the AS group, the instance that is protected will not be removed.
        """
        return pulumi.get(self, "protected")

    @protected.setter
    def protected(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "protected", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def standby(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to stop distributing traffic to the instance but do not want to remove
        it from the AS group. You can stop or restart the instance without worrying about it will be removed from the AS group.
        """
        return pulumi.get(self, "standby")

    @standby.setter
    def standby(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "standby", value)


@pulumi.input_type
class _InstanceAttachState:
    def __init__(__self__, *,
                 append_instance: Optional[pulumi.Input[_builtins.bool]] = None,
                 health_status: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 protected: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 standby: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering InstanceAttach resources.
        :param pulumi.Input[_builtins.bool] append_instance: Specifies whether to add a new instance when the instance enter standby mode.
               This parameter takes effect only when `standby` is set to true.
        :param pulumi.Input[_builtins.str] health_status: The instance health status. The value can be `INITIALIZING`, `NORMAL` or `ERROR`.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ECS instance ID.
               Changing this creates a new resource.
               
               <!--markdownlint-disable MD033-->
               > Before adding instances to an AS group, ensure that the following conditions are met:
               <br/>1. The instance is not in other AS groups.
               <br/>2. The instance is in the same VPC as the AS group.
               <br/>3. The instance is in the AZs used by the AS group.
               <br/>4. After the instance is added, the total number of instances is less than or equal to the maximum number of
               instances allowed.
        :param pulumi.Input[_builtins.str] instance_name: The ECS instance name.
        :param pulumi.Input[_builtins.bool] protected: Specifies whether the instance can be removed **automatically** from the AS group.
               Once configured, when AS automatically scales in the AS group, the instance that is protected will not be removed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] scaling_group_id: Specifies the AS group ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] standby: Specifies whether to stop distributing traffic to the instance but do not want to remove
               it from the AS group. You can stop or restart the instance without worrying about it will be removed from the AS group.
        :param pulumi.Input[_builtins.str] status: The instance lifecycle status in the AS group. The value can be `INSERVICE`, `STANDBY`, `PENDING` or `REMOVING`.
        """
        if append_instance is not None:
            pulumi.set(__self__, "append_instance", append_instance)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if protected is not None:
            pulumi.set(__self__, "protected", protected)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scaling_group_id is not None:
            pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        if standby is not None:
            pulumi.set(__self__, "standby", standby)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="appendInstance")
    def append_instance(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to add a new instance when the instance enter standby mode.
        This parameter takes effect only when `standby` is set to true.
        """
        return pulumi.get(self, "append_instance")

    @append_instance.setter
    def append_instance(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "append_instance", value)

    @_builtins.property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The instance health status. The value can be `INITIALIZING`, `NORMAL` or `ERROR`.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_status", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ECS instance ID.
        Changing this creates a new resource.

        <!--markdownlint-disable MD033-->
        > Before adding instances to an AS group, ensure that the following conditions are met:
        <br/>1. The instance is not in other AS groups.
        <br/>2. The instance is in the same VPC as the AS group.
        <br/>3. The instance is in the AZs used by the AS group.
        <br/>4. After the instance is added, the total number of instances is less than or equal to the maximum number of
        instances allowed.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ECS instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_name", value)

    @_builtins.property
    @pulumi.getter
    def protected(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the instance can be removed **automatically** from the AS group.
        Once configured, when AS automatically scales in the AS group, the instance that is protected will not be removed.
        """
        return pulumi.get(self, "protected")

    @protected.setter
    def protected(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "protected", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AS group ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "scaling_group_id")

    @scaling_group_id.setter
    def scaling_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scaling_group_id", value)

    @_builtins.property
    @pulumi.getter
    def standby(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to stop distributing traffic to the instance but do not want to remove
        it from the AS group. You can stop or restart the instance without worrying about it will be removed from the AS group.
        """
        return pulumi.get(self, "standby")

    @standby.setter
    def standby(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "standby", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The instance lifecycle status in the AS group. The value can be `INSERVICE`, `STANDBY`, `PENDING` or `REMOVING`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:As/instanceAttach:InstanceAttach")
class InstanceAttach(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 append_instance: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protected: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 standby: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Manages an AS instance attachment resource within HuaweiCloud.

        ## Example Usage

        ### Add an instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        scaling_group_id = config.require_object("scalingGroupId")
        ecs_id = config.require_object("ecsId")
        test = huaweicloud.as_.InstanceAttach("test",
            scaling_group_id=scaling_group_id,
            instance_id=ecs_id)
        ```

        ### Add an instance with protection

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        scaling_group_id = config.require_object("scalingGroupId")
        ecs_id = config.require_object("ecsId")
        test = huaweicloud.as_.InstanceAttach("test",
            scaling_group_id=scaling_group_id,
            instance_id=ecs_id,
            protected=True)
        ```

        ## Import

        The AS instances can be imported by the `scaling_group_id` and `instance_id`, separated by a slash, e.g.

        ```sh
        $ pulumi import huaweicloud:As/instanceAttach:InstanceAttach test <scaling_group_id>/<instance_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to `append_instance` is missing from

        the API response.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_as_instance_attach" "test" {

          ...

          lifecycle {

            ignore_changes = [append_instance]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] append_instance: Specifies whether to add a new instance when the instance enter standby mode.
               This parameter takes effect only when `standby` is set to true.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ECS instance ID.
               Changing this creates a new resource.
               
               <!--markdownlint-disable MD033-->
               > Before adding instances to an AS group, ensure that the following conditions are met:
               <br/>1. The instance is not in other AS groups.
               <br/>2. The instance is in the same VPC as the AS group.
               <br/>3. The instance is in the AZs used by the AS group.
               <br/>4. After the instance is added, the total number of instances is less than or equal to the maximum number of
               instances allowed.
        :param pulumi.Input[_builtins.bool] protected: Specifies whether the instance can be removed **automatically** from the AS group.
               Once configured, when AS automatically scales in the AS group, the instance that is protected will not be removed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] scaling_group_id: Specifies the AS group ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] standby: Specifies whether to stop distributing traffic to the instance but do not want to remove
               it from the AS group. You can stop or restart the instance without worrying about it will be removed from the AS group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceAttachArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AS instance attachment resource within HuaweiCloud.

        ## Example Usage

        ### Add an instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        scaling_group_id = config.require_object("scalingGroupId")
        ecs_id = config.require_object("ecsId")
        test = huaweicloud.as_.InstanceAttach("test",
            scaling_group_id=scaling_group_id,
            instance_id=ecs_id)
        ```

        ### Add an instance with protection

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        scaling_group_id = config.require_object("scalingGroupId")
        ecs_id = config.require_object("ecsId")
        test = huaweicloud.as_.InstanceAttach("test",
            scaling_group_id=scaling_group_id,
            instance_id=ecs_id,
            protected=True)
        ```

        ## Import

        The AS instances can be imported by the `scaling_group_id` and `instance_id`, separated by a slash, e.g.

        ```sh
        $ pulumi import huaweicloud:As/instanceAttach:InstanceAttach test <scaling_group_id>/<instance_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to `append_instance` is missing from

        the API response.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_as_instance_attach" "test" {

          ...

          lifecycle {

            ignore_changes = [append_instance]

          }

        }

        :param str resource_name: The name of the resource.
        :param InstanceAttachArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceAttachArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 append_instance: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protected: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 standby: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceAttachArgs.__new__(InstanceAttachArgs)

            __props__.__dict__["append_instance"] = append_instance
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["protected"] = protected
            __props__.__dict__["region"] = region
            if scaling_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'scaling_group_id'")
            __props__.__dict__["scaling_group_id"] = scaling_group_id
            __props__.__dict__["standby"] = standby
            __props__.__dict__["health_status"] = None
            __props__.__dict__["instance_name"] = None
            __props__.__dict__["status"] = None
        super(InstanceAttach, __self__).__init__(
            'huaweicloud:As/instanceAttach:InstanceAttach',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            append_instance: Optional[pulumi.Input[_builtins.bool]] = None,
            health_status: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_name: Optional[pulumi.Input[_builtins.str]] = None,
            protected: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            standby: Optional[pulumi.Input[_builtins.bool]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'InstanceAttach':
        """
        Get an existing InstanceAttach resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] append_instance: Specifies whether to add a new instance when the instance enter standby mode.
               This parameter takes effect only when `standby` is set to true.
        :param pulumi.Input[_builtins.str] health_status: The instance health status. The value can be `INITIALIZING`, `NORMAL` or `ERROR`.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ECS instance ID.
               Changing this creates a new resource.
               
               <!--markdownlint-disable MD033-->
               > Before adding instances to an AS group, ensure that the following conditions are met:
               <br/>1. The instance is not in other AS groups.
               <br/>2. The instance is in the same VPC as the AS group.
               <br/>3. The instance is in the AZs used by the AS group.
               <br/>4. After the instance is added, the total number of instances is less than or equal to the maximum number of
               instances allowed.
        :param pulumi.Input[_builtins.str] instance_name: The ECS instance name.
        :param pulumi.Input[_builtins.bool] protected: Specifies whether the instance can be removed **automatically** from the AS group.
               Once configured, when AS automatically scales in the AS group, the instance that is protected will not be removed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] scaling_group_id: Specifies the AS group ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] standby: Specifies whether to stop distributing traffic to the instance but do not want to remove
               it from the AS group. You can stop or restart the instance without worrying about it will be removed from the AS group.
        :param pulumi.Input[_builtins.str] status: The instance lifecycle status in the AS group. The value can be `INSERVICE`, `STANDBY`, `PENDING` or `REMOVING`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceAttachState.__new__(_InstanceAttachState)

        __props__.__dict__["append_instance"] = append_instance
        __props__.__dict__["health_status"] = health_status
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["protected"] = protected
        __props__.__dict__["region"] = region
        __props__.__dict__["scaling_group_id"] = scaling_group_id
        __props__.__dict__["standby"] = standby
        __props__.__dict__["status"] = status
        return InstanceAttach(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appendInstance")
    def append_instance(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to add a new instance when the instance enter standby mode.
        This parameter takes effect only when `standby` is set to true.
        """
        return pulumi.get(self, "append_instance")

    @_builtins.property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> pulumi.Output[_builtins.str]:
        """
        The instance health status. The value can be `INITIALIZING`, `NORMAL` or `ERROR`.
        """
        return pulumi.get(self, "health_status")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ECS instance ID.
        Changing this creates a new resource.

        <!--markdownlint-disable MD033-->
        > Before adding instances to an AS group, ensure that the following conditions are met:
        <br/>1. The instance is not in other AS groups.
        <br/>2. The instance is in the same VPC as the AS group.
        <br/>3. The instance is in the AZs used by the AS group.
        <br/>4. After the instance is added, the total number of instances is less than or equal to the maximum number of
        instances allowed.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[_builtins.str]:
        """
        The ECS instance name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter
    def protected(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the instance can be removed **automatically** from the AS group.
        Once configured, when AS automatically scales in the AS group, the instance that is protected will not be removed.
        """
        return pulumi.get(self, "protected")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the AS group ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "scaling_group_id")

    @_builtins.property
    @pulumi.getter
    def standby(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to stop distributing traffic to the instance but do not want to remove
        it from the AS group. You can stop or restart the instance without worrying about it will be removed from the AS group.
        """
        return pulumi.get(self, "standby")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The instance lifecycle status in the AS group. The value can be `INSERVICE`, `STANDBY`, `PENDING` or `REMOVING`.
        """
        return pulumi.get(self, "status")

