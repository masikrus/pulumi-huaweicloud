# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPlannedTasksResult',
    'AwaitableGetPlannedTasksResult',
    'get_planned_tasks',
    'get_planned_tasks_output',
]

@pulumi.output_type
class GetPlannedTasksResult:
    """
    A collection of values returned by getPlannedTasks.
    """
    def __init__(__self__, id=None, name=None, region=None, scaling_group_id=None, scheduled_tasks=None, task_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scaling_group_id and not isinstance(scaling_group_id, str):
            raise TypeError("Expected argument 'scaling_group_id' to be a str")
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        if scheduled_tasks and not isinstance(scheduled_tasks, list):
            raise TypeError("Expected argument 'scheduled_tasks' to be a list")
        pulumi.set(__self__, "scheduled_tasks", scheduled_tasks)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the planned task.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> _builtins.str:
        """
        The ID of the AS group to which the planned task belongs.
        """
        return pulumi.get(self, "scaling_group_id")

    @_builtins.property
    @pulumi.getter(name="scheduledTasks")
    def scheduled_tasks(self) -> Sequence['outputs.GetPlannedTasksScheduledTaskResult']:
        """
        All planned tasks that match the filter parameters.
        """
        return pulumi.get(self, "scheduled_tasks")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "task_id")


class AwaitableGetPlannedTasksResult(GetPlannedTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlannedTasksResult(
            id=self.id,
            name=self.name,
            region=self.region,
            scaling_group_id=self.scaling_group_id,
            scheduled_tasks=self.scheduled_tasks,
            task_id=self.task_id)


def get_planned_tasks(name: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      scaling_group_id: Optional[_builtins.str] = None,
                      task_id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlannedTasksResult:
    """
    Use this data source to get a list of planned tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_group_id = config.require_object("scalingGroupId")
    task_id = config.require_object("taskId")
    test = huaweicloud.As.get_planned_tasks(scaling_group_id=scaling_group_id,
        task_id=task_id)
    ```


    :param _builtins.str name: Specifies the name of the planned task.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the ID of the AS group to which the planned tasks belong.
    :param _builtins.str task_id: Specifies the ID of the planned task.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:As/getPlannedTasks:getPlannedTasks', __args__, opts=opts, typ=GetPlannedTasksResult).value

    return AwaitableGetPlannedTasksResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        scaling_group_id=pulumi.get(__ret__, 'scaling_group_id'),
        scheduled_tasks=pulumi.get(__ret__, 'scheduled_tasks'),
        task_id=pulumi.get(__ret__, 'task_id'))
def get_planned_tasks_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                             task_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlannedTasksResult]:
    """
    Use this data source to get a list of planned tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_group_id = config.require_object("scalingGroupId")
    task_id = config.require_object("taskId")
    test = huaweicloud.As.get_planned_tasks(scaling_group_id=scaling_group_id,
        task_id=task_id)
    ```


    :param _builtins.str name: Specifies the name of the planned task.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the ID of the AS group to which the planned tasks belong.
    :param _builtins.str task_id: Specifies the ID of the planned task.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:As/getPlannedTasks:getPlannedTasks', __args__, opts=opts, typ=GetPlannedTasksResult)
    return __ret__.apply(lambda __response__: GetPlannedTasksResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        scaling_group_id=pulumi.get(__response__, 'scaling_group_id'),
        scheduled_tasks=pulumi.get(__response__, 'scheduled_tasks'),
        task_id=pulumi.get(__response__, 'task_id')))
