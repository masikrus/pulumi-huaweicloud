# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGroupsResult',
    'AwaitableGetGroupsResult',
    'get_groups',
    'get_groups_output',
]

@pulumi.output_type
class GetGroupsResult:
    """
    A collection of values returned by getGroups.
    """
    def __init__(__self__, enterprise_project_id=None, groups=None, id=None, name=None, region=None, scaling_configuration_id=None, status=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scaling_configuration_id and not isinstance(scaling_configuration_id, str):
            raise TypeError("Expected argument 'scaling_configuration_id' to be a str")
        pulumi.set(__self__, "scaling_configuration_id", scaling_configuration_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetGroupsGroupResult']:
        """
        A list of AS groups.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingConfigurationId")
    def scaling_configuration_id(self) -> Optional[_builtins.str]:
        """
        The AS configuration ID.
        """
        return pulumi.get(self, "scaling_configuration_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The AS group status.
        """
        return pulumi.get(self, "status")


class AwaitableGetGroupsResult(GetGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupsResult(
            enterprise_project_id=self.enterprise_project_id,
            groups=self.groups,
            id=self.id,
            name=self.name,
            region=self.region,
            scaling_configuration_id=self.scaling_configuration_id,
            status=self.status)


def get_groups(enterprise_project_id: Optional[_builtins.str] = None,
               name: Optional[_builtins.str] = None,
               region: Optional[_builtins.str] = None,
               scaling_configuration_id: Optional[_builtins.str] = None,
               status: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupsResult:
    """
    Use this data source to get a list of AS groups.

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    groups = huaweicloud.As.get_groups()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str name: Specifies the AS group name. Fuzzy search is supported.
    :param _builtins.str region: The region in which to obtain the AS groups.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_configuration_id: Specifies the AS configuration ID, which can be obtained using
           the API for listing AS configurations.
    :param _builtins.str status: Specifies the AS group status. The options are as follows:
           - **INSERVICE**: indicates that the AS group is functional.
           - **PAUSED**: indicates that the AS group is paused.
           - **ERROR**: indicates that the AS group malfunctions.
           - **DELETING**: indicates that the AS group is being deleted.
           - **FREEZED**: indicates that the AS group has been frozen.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['scalingConfigurationId'] = scaling_configuration_id
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:As/getGroups:getGroups', __args__, opts=opts, typ=GetGroupsResult).value

    return AwaitableGetGroupsResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        scaling_configuration_id=pulumi.get(__ret__, 'scaling_configuration_id'),
        status=pulumi.get(__ret__, 'status'))
def get_groups_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      scaling_configuration_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGroupsResult]:
    """
    Use this data source to get a list of AS groups.

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    groups = huaweicloud.As.get_groups()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str name: Specifies the AS group name. Fuzzy search is supported.
    :param _builtins.str region: The region in which to obtain the AS groups.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_configuration_id: Specifies the AS configuration ID, which can be obtained using
           the API for listing AS configurations.
    :param _builtins.str status: Specifies the AS group status. The options are as follows:
           - **INSERVICE**: indicates that the AS group is functional.
           - **PAUSED**: indicates that the AS group is paused.
           - **ERROR**: indicates that the AS group malfunctions.
           - **DELETING**: indicates that the AS group is being deleted.
           - **FREEZED**: indicates that the AS group has been frozen.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['scalingConfigurationId'] = scaling_configuration_id
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:As/getGroups:getGroups', __args__, opts=opts, typ=GetGroupsResult)
    return __ret__.apply(lambda __response__: GetGroupsResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        scaling_configuration_id=pulumi.get(__response__, 'scaling_configuration_id'),
        status=pulumi.get(__response__, 'status')))
