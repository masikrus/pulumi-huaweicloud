# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetActivityLogsResult',
    'AwaitableGetActivityLogsResult',
    'get_activity_logs',
    'get_activity_logs_output',
]

@pulumi.output_type
class GetActivityLogsResult:
    """
    A collection of values returned by getActivityLogs.
    """
    def __init__(__self__, activity_logs=None, end_time=None, id=None, region=None, scaling_group_id=None, start_time=None, status=None):
        if activity_logs and not isinstance(activity_logs, list):
            raise TypeError("Expected argument 'activity_logs' to be a list")
        pulumi.set(__self__, "activity_logs", activity_logs)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scaling_group_id and not isinstance(scaling_group_id, str):
            raise TypeError("Expected argument 'scaling_group_id' to be a str")
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="activityLogs")
    def activity_logs(self) -> Sequence['outputs.GetActivityLogsActivityLogResult']:
        """
        All AS scaling activity logs that match the filter parameters.
        The activity_logs structure is documented below.
        """
        return pulumi.get(self, "activity_logs")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        The end time of the AS scaling activity.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> _builtins.str:
        return pulumi.get(self, "scaling_group_id")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        """
        The start time of the AS scaling activity.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the AS scaling activity.
        """
        return pulumi.get(self, "status")


class AwaitableGetActivityLogsResult(GetActivityLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetActivityLogsResult(
            activity_logs=self.activity_logs,
            end_time=self.end_time,
            id=self.id,
            region=self.region,
            scaling_group_id=self.scaling_group_id,
            start_time=self.start_time,
            status=self.status)


def get_activity_logs(end_time: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      scaling_group_id: Optional[_builtins.str] = None,
                      start_time: Optional[_builtins.str] = None,
                      status: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetActivityLogsResult:
    """
    Use this data source to get a list of AS scaling activity logs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    group_id = config.require_object("groupId")
    test = huaweicloud.As.get_activity_logs(scaling_group_id=group_id)
    ```


    :param _builtins.str end_time: Specifies the end time of the AS scaling activity for query. The time format is
           **yyyy-MM-ddThh:mm:ssZ**.
           The query result shows all data with an end time less than this value.
    :param _builtins.str region: Specifies the region in which to query the AS scaling activity logs.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the AS scaling group ID.
    :param _builtins.str start_time: Specifies the start time of the AS scaling activity for query. The time format is
           **yyyy-MM-ddThh:mm:ssZ**.
           The query result is for all data with a start time greater than or equal to this value.
    :param _builtins.str status: Specifies the status of the AS scaling activity for query.  
           The valid values are as follows:
           + **SUCCESS**: Scaling activity execution successfully.
           + **FAIL**: Scaling activity execution failed.
           + **DOING**: Scaling activity is currently being executed.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    __args__['startTime'] = start_time
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:As/getActivityLogs:getActivityLogs', __args__, opts=opts, typ=GetActivityLogsResult).value

    return AwaitableGetActivityLogsResult(
        activity_logs=pulumi.get(__ret__, 'activity_logs'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        scaling_group_id=pulumi.get(__ret__, 'scaling_group_id'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'))
def get_activity_logs_output(end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                             start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetActivityLogsResult]:
    """
    Use this data source to get a list of AS scaling activity logs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    group_id = config.require_object("groupId")
    test = huaweicloud.As.get_activity_logs(scaling_group_id=group_id)
    ```


    :param _builtins.str end_time: Specifies the end time of the AS scaling activity for query. The time format is
           **yyyy-MM-ddThh:mm:ssZ**.
           The query result shows all data with an end time less than this value.
    :param _builtins.str region: Specifies the region in which to query the AS scaling activity logs.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the AS scaling group ID.
    :param _builtins.str start_time: Specifies the start time of the AS scaling activity for query. The time format is
           **yyyy-MM-ddThh:mm:ssZ**.
           The query result is for all data with a start time greater than or equal to this value.
    :param _builtins.str status: Specifies the status of the AS scaling activity for query.  
           The valid values are as follows:
           + **SUCCESS**: Scaling activity execution successfully.
           + **FAIL**: Scaling activity execution failed.
           + **DOING**: Scaling activity is currently being executed.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    __args__['startTime'] = start_time
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:As/getActivityLogs:getActivityLogs', __args__, opts=opts, typ=GetActivityLogsResult)
    return __ret__.apply(lambda __response__: GetActivityLogsResult(
        activity_logs=pulumi.get(__response__, 'activity_logs'),
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        scaling_group_id=pulumi.get(__response__, 'scaling_group_id'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status')))
