# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetHookInstancesResult',
    'AwaitableGetHookInstancesResult',
    'get_hook_instances',
    'get_hook_instances_output',
]

@pulumi.output_type
class GetHookInstancesResult:
    """
    A collection of values returned by getHookInstances.
    """
    def __init__(__self__, id=None, instance_hanging_infos=None, instance_id=None, lifecycle_hook_name=None, lifecycle_hook_status=None, region=None, scaling_group_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_hanging_infos and not isinstance(instance_hanging_infos, list):
            raise TypeError("Expected argument 'instance_hanging_infos' to be a list")
        pulumi.set(__self__, "instance_hanging_infos", instance_hanging_infos)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if lifecycle_hook_name and not isinstance(lifecycle_hook_name, str):
            raise TypeError("Expected argument 'lifecycle_hook_name' to be a str")
        pulumi.set(__self__, "lifecycle_hook_name", lifecycle_hook_name)
        if lifecycle_hook_status and not isinstance(lifecycle_hook_status, str):
            raise TypeError("Expected argument 'lifecycle_hook_status' to be a str")
        pulumi.set(__self__, "lifecycle_hook_status", lifecycle_hook_status)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scaling_group_id and not isinstance(scaling_group_id, str):
            raise TypeError("Expected argument 'scaling_group_id' to be a str")
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceHangingInfos")
    def instance_hanging_infos(self) -> Sequence['outputs.GetHookInstancesInstanceHangingInfoResult']:
        """
        All lifecycle hook information about the AS instances.
        """
        return pulumi.get(self, "instance_hanging_infos")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        The ID of the AS instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleHookName")
    def lifecycle_hook_name(self) -> Optional[_builtins.str]:
        """
        The name of the lifecycle hook.
        """
        return pulumi.get(self, "lifecycle_hook_name")

    @_builtins.property
    @pulumi.getter(name="lifecycleHookStatus")
    def lifecycle_hook_status(self) -> Optional[_builtins.str]:
        """
        The status of the lifecycle hook.
        """
        return pulumi.get(self, "lifecycle_hook_status")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> _builtins.str:
        """
        The ID of the AS group to which the AS instance belongs.
        """
        return pulumi.get(self, "scaling_group_id")


class AwaitableGetHookInstancesResult(GetHookInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHookInstancesResult(
            id=self.id,
            instance_hanging_infos=self.instance_hanging_infos,
            instance_id=self.instance_id,
            lifecycle_hook_name=self.lifecycle_hook_name,
            lifecycle_hook_status=self.lifecycle_hook_status,
            region=self.region,
            scaling_group_id=self.scaling_group_id)


def get_hook_instances(instance_id: Optional[_builtins.str] = None,
                       lifecycle_hook_name: Optional[_builtins.str] = None,
                       lifecycle_hook_status: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       scaling_group_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHookInstancesResult:
    """
    Use this data source to get a list of AS instances hanging information.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_group_id = config.require_object("scalingGroupId")
    instance_id = config.require_object("instanceId")
    test = huaweicloud.As.get_hook_instances(scaling_group_id=scaling_group_id,
        instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the AS instance.
    :param _builtins.str lifecycle_hook_name: Specifies the name of the lifecycle hook.
    :param _builtins.str lifecycle_hook_status: Specifies the status of the lifecycle hook.
           The valid values are as follows:
           + **HANGING**: Suspends the instance.
           + **CONTINUE**: Continues the instance.
           + **ABANDON**: Terminates the instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the ID of the AS group to which the AS instances belong.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['lifecycleHookName'] = lifecycle_hook_name
    __args__['lifecycleHookStatus'] = lifecycle_hook_status
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:As/getHookInstances:getHookInstances', __args__, opts=opts, typ=GetHookInstancesResult).value

    return AwaitableGetHookInstancesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_hanging_infos=pulumi.get(__ret__, 'instance_hanging_infos'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        lifecycle_hook_name=pulumi.get(__ret__, 'lifecycle_hook_name'),
        lifecycle_hook_status=pulumi.get(__ret__, 'lifecycle_hook_status'),
        region=pulumi.get(__ret__, 'region'),
        scaling_group_id=pulumi.get(__ret__, 'scaling_group_id'))
def get_hook_instances_output(instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              lifecycle_hook_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              lifecycle_hook_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHookInstancesResult]:
    """
    Use this data source to get a list of AS instances hanging information.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_group_id = config.require_object("scalingGroupId")
    instance_id = config.require_object("instanceId")
    test = huaweicloud.As.get_hook_instances(scaling_group_id=scaling_group_id,
        instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the AS instance.
    :param _builtins.str lifecycle_hook_name: Specifies the name of the lifecycle hook.
    :param _builtins.str lifecycle_hook_status: Specifies the status of the lifecycle hook.
           The valid values are as follows:
           + **HANGING**: Suspends the instance.
           + **CONTINUE**: Continues the instance.
           + **ABANDON**: Terminates the instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the ID of the AS group to which the AS instances belong.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['lifecycleHookName'] = lifecycle_hook_name
    __args__['lifecycleHookStatus'] = lifecycle_hook_status
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:As/getHookInstances:getHookInstances', __args__, opts=opts, typ=GetHookInstancesResult)
    return __ret__.apply(lambda __response__: GetHookInstancesResult(
        id=pulumi.get(__response__, 'id'),
        instance_hanging_infos=pulumi.get(__response__, 'instance_hanging_infos'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        lifecycle_hook_name=pulumi.get(__response__, 'lifecycle_hook_name'),
        lifecycle_hook_status=pulumi.get(__response__, 'lifecycle_hook_status'),
        region=pulumi.get(__response__, 'region'),
        scaling_group_id=pulumi.get(__response__, 'scaling_group_id')))
