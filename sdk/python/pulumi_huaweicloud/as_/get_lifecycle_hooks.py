# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetLifecycleHooksResult',
    'AwaitableGetLifecycleHooksResult',
    'get_lifecycle_hooks',
    'get_lifecycle_hooks_output',
]

@pulumi.output_type
class GetLifecycleHooksResult:
    """
    A collection of values returned by getLifecycleHooks.
    """
    def __init__(__self__, default_result=None, id=None, lifecycle_hooks=None, name=None, region=None, scaling_group_id=None, type=None):
        if default_result and not isinstance(default_result, str):
            raise TypeError("Expected argument 'default_result' to be a str")
        pulumi.set(__self__, "default_result", default_result)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_hooks and not isinstance(lifecycle_hooks, list):
            raise TypeError("Expected argument 'lifecycle_hooks' to be a list")
        pulumi.set(__self__, "lifecycle_hooks", lifecycle_hooks)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scaling_group_id and not isinstance(scaling_group_id, str):
            raise TypeError("Expected argument 'scaling_group_id' to be a str")
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="defaultResult")
    def default_result(self) -> Optional[_builtins.str]:
        """
        The default lifecycle hook callback action.
        """
        return pulumi.get(self, "default_result")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleHooks")
    def lifecycle_hooks(self) -> Sequence['outputs.GetLifecycleHooksLifecycleHookResult']:
        """
        All AS scaling lifecycle hooks that match the filter parameters.
        The lifecycle_hooks structure is documented below.
        """
        return pulumi.get(self, "lifecycle_hooks")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The lifecycle hook name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> _builtins.str:
        return pulumi.get(self, "scaling_group_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The lifecycle hook type.
        """
        return pulumi.get(self, "type")


class AwaitableGetLifecycleHooksResult(GetLifecycleHooksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLifecycleHooksResult(
            default_result=self.default_result,
            id=self.id,
            lifecycle_hooks=self.lifecycle_hooks,
            name=self.name,
            region=self.region,
            scaling_group_id=self.scaling_group_id,
            type=self.type)


def get_lifecycle_hooks(default_result: Optional[_builtins.str] = None,
                        name: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        scaling_group_id: Optional[_builtins.str] = None,
                        type: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLifecycleHooksResult:
    """
    Use this data source to get a list of AS scaling lifecycle hooks within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_group_id = config.require_object("scalingGroupId")
    test = huaweicloud.As.get_lifecycle_hooks(scaling_group_id=scaling_group_id)
    ```


    :param _builtins.str default_result: Specifies the default lifecycle hook callback action. This action is
           performed when the timeout duration expires. The valid values are **ABANDON** and **CONTINUE**, defaults to **ABANDON**.
    :param _builtins.str name: Specifies the lifecycle hook name.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the AS scaling group ID.
    :param _builtins.str type: Specifies the lifecycle hook type. The valid values are as follows:
           + **ADD**: The hook suspends the instance when the instance is started.
           + **REMOVE**: The hook suspends the instance when the instance is terminated.
    """
    __args__ = dict()
    __args__['defaultResult'] = default_result
    __args__['name'] = name
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:As/getLifecycleHooks:getLifecycleHooks', __args__, opts=opts, typ=GetLifecycleHooksResult).value

    return AwaitableGetLifecycleHooksResult(
        default_result=pulumi.get(__ret__, 'default_result'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_hooks=pulumi.get(__ret__, 'lifecycle_hooks'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        scaling_group_id=pulumi.get(__ret__, 'scaling_group_id'),
        type=pulumi.get(__ret__, 'type'))
def get_lifecycle_hooks_output(default_result: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               scaling_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                               type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLifecycleHooksResult]:
    """
    Use this data source to get a list of AS scaling lifecycle hooks within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_group_id = config.require_object("scalingGroupId")
    test = huaweicloud.As.get_lifecycle_hooks(scaling_group_id=scaling_group_id)
    ```


    :param _builtins.str default_result: Specifies the default lifecycle hook callback action. This action is
           performed when the timeout duration expires. The valid values are **ABANDON** and **CONTINUE**, defaults to **ABANDON**.
    :param _builtins.str name: Specifies the lifecycle hook name.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_group_id: Specifies the AS scaling group ID.
    :param _builtins.str type: Specifies the lifecycle hook type. The valid values are as follows:
           + **ADD**: The hook suspends the instance when the instance is started.
           + **REMOVE**: The hook suspends the instance when the instance is terminated.
    """
    __args__ = dict()
    __args__['defaultResult'] = default_result
    __args__['name'] = name
    __args__['region'] = region
    __args__['scalingGroupId'] = scaling_group_id
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:As/getLifecycleHooks:getLifecycleHooks', __args__, opts=opts, typ=GetLifecycleHooksResult)
    return __ret__.apply(lambda __response__: GetLifecycleHooksResult(
        default_result=pulumi.get(__response__, 'default_result'),
        id=pulumi.get(__response__, 'id'),
        lifecycle_hooks=pulumi.get(__response__, 'lifecycle_hooks'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        scaling_group_id=pulumi.get(__response__, 'scaling_group_id'),
        type=pulumi.get(__response__, 'type')))
