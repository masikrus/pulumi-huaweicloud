# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicyExecuteLogsResult',
    'AwaitableGetPolicyExecuteLogsResult',
    'get_policy_execute_logs',
    'get_policy_execute_logs_output',
]

@pulumi.output_type
class GetPolicyExecuteLogsResult:
    """
    A collection of values returned by getPolicyExecuteLogs.
    """
    def __init__(__self__, end_time=None, execute_logs=None, execute_type=None, id=None, log_id=None, region=None, scaling_policy_id=None, scaling_resource_id=None, scaling_resource_type=None, start_time=None, status=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if execute_logs and not isinstance(execute_logs, list):
            raise TypeError("Expected argument 'execute_logs' to be a list")
        pulumi.set(__self__, "execute_logs", execute_logs)
        if execute_type and not isinstance(execute_type, str):
            raise TypeError("Expected argument 'execute_type' to be a str")
        pulumi.set(__self__, "execute_type", execute_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_id and not isinstance(log_id, str):
            raise TypeError("Expected argument 'log_id' to be a str")
        pulumi.set(__self__, "log_id", log_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scaling_policy_id and not isinstance(scaling_policy_id, str):
            raise TypeError("Expected argument 'scaling_policy_id' to be a str")
        pulumi.set(__self__, "scaling_policy_id", scaling_policy_id)
        if scaling_resource_id and not isinstance(scaling_resource_id, str):
            raise TypeError("Expected argument 'scaling_resource_id' to be a str")
        pulumi.set(__self__, "scaling_resource_id", scaling_resource_id)
        if scaling_resource_type and not isinstance(scaling_resource_type, str):
            raise TypeError("Expected argument 'scaling_resource_type' to be a str")
        pulumi.set(__self__, "scaling_resource_type", scaling_resource_type)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="executeLogs")
    def execute_logs(self) -> Sequence['outputs.GetPolicyExecuteLogsExecuteLogResult']:
        """
        All policy execution logs that match the filter parameters.  
        The execute_logs structure is documented below.
        """
        return pulumi.get(self, "execute_logs")

    @_builtins.property
    @pulumi.getter(name="executeType")
    def execute_type(self) -> Optional[_builtins.str]:
        """
        The policy execution type.
        """
        return pulumi.get(self, "execute_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "log_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingPolicyId")
    def scaling_policy_id(self) -> _builtins.str:
        """
        The scaling policy ID.
        """
        return pulumi.get(self, "scaling_policy_id")

    @_builtins.property
    @pulumi.getter(name="scalingResourceId")
    def scaling_resource_id(self) -> Optional[_builtins.str]:
        """
        The scaling resource ID.
        """
        return pulumi.get(self, "scaling_resource_id")

    @_builtins.property
    @pulumi.getter(name="scalingResourceType")
    def scaling_resource_type(self) -> Optional[_builtins.str]:
        """
        The scaling resource type.
        """
        return pulumi.get(self, "scaling_resource_type")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The policy execution status.
        """
        return pulumi.get(self, "status")


class AwaitableGetPolicyExecuteLogsResult(GetPolicyExecuteLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyExecuteLogsResult(
            end_time=self.end_time,
            execute_logs=self.execute_logs,
            execute_type=self.execute_type,
            id=self.id,
            log_id=self.log_id,
            region=self.region,
            scaling_policy_id=self.scaling_policy_id,
            scaling_resource_id=self.scaling_resource_id,
            scaling_resource_type=self.scaling_resource_type,
            start_time=self.start_time,
            status=self.status)


def get_policy_execute_logs(end_time: Optional[_builtins.str] = None,
                            execute_type: Optional[_builtins.str] = None,
                            log_id: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            scaling_policy_id: Optional[_builtins.str] = None,
                            scaling_resource_id: Optional[_builtins.str] = None,
                            scaling_resource_type: Optional[_builtins.str] = None,
                            start_time: Optional[_builtins.str] = None,
                            status: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyExecuteLogsResult:
    """
    Use this data source to get a list of AS policy execution logs within HuaweiCloud.

    > Currently, only the latest up to `20` logs can be queried.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_policy_id = config.require_object("scalingPolicyId")
    test = huaweicloud.As.get_policy_execute_logs(scaling_policy_id=scaling_policy_id)
    ```


    :param _builtins.str end_time: Specifies the end time of the policy execution used for query. The time format is
           **yyyy-MM-ddThh:mm:ssZ**.
           The query result shows all data with policy execution time less than this value.
    :param _builtins.str execute_type: Specifies the policy execution type.  
           The valid values are as follows:
           + **SCHEDULED**: automatically triggered scheduled policy.
           + **RECURRENCE**: automatically triggered recurrence policy.
           + **ALARM**: automatically triggered alarm policy.
           + **MANUAL**: manually triggered policy.
    :param _builtins.str log_id: Specifies the policy execution log ID.
    :param _builtins.str region: Specifies the region in which to query the policy execution logs.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_policy_id: Specifies the scaling policy ID.
    :param _builtins.str scaling_resource_id: Specifies the scaling resource ID.
    :param _builtins.str scaling_resource_type: Specifies the scaling resource type.
           The value can be **SCALING_GROUP** or **BANDWIDTH**.
    :param _builtins.str start_time: Specifies the start time of the policy execution used for query. The time format is
           **yyyy-MM-ddThh:mm:ssZ**.
           The query result is all data with a policy execution time greater than or equal to this value.
    :param _builtins.str status: Specifies the policy execution status. The value can be **SUCCESS**, **FAIL**
           or **EXECUTING**.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['executeType'] = execute_type
    __args__['logId'] = log_id
    __args__['region'] = region
    __args__['scalingPolicyId'] = scaling_policy_id
    __args__['scalingResourceId'] = scaling_resource_id
    __args__['scalingResourceType'] = scaling_resource_type
    __args__['startTime'] = start_time
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:As/getPolicyExecuteLogs:getPolicyExecuteLogs', __args__, opts=opts, typ=GetPolicyExecuteLogsResult).value

    return AwaitableGetPolicyExecuteLogsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        execute_logs=pulumi.get(__ret__, 'execute_logs'),
        execute_type=pulumi.get(__ret__, 'execute_type'),
        id=pulumi.get(__ret__, 'id'),
        log_id=pulumi.get(__ret__, 'log_id'),
        region=pulumi.get(__ret__, 'region'),
        scaling_policy_id=pulumi.get(__ret__, 'scaling_policy_id'),
        scaling_resource_id=pulumi.get(__ret__, 'scaling_resource_id'),
        scaling_resource_type=pulumi.get(__ret__, 'scaling_resource_type'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'))
def get_policy_execute_logs_output(end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   execute_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   log_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   scaling_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   scaling_resource_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   scaling_resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyExecuteLogsResult]:
    """
    Use this data source to get a list of AS policy execution logs within HuaweiCloud.

    > Currently, only the latest up to `20` logs can be queried.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    scaling_policy_id = config.require_object("scalingPolicyId")
    test = huaweicloud.As.get_policy_execute_logs(scaling_policy_id=scaling_policy_id)
    ```


    :param _builtins.str end_time: Specifies the end time of the policy execution used for query. The time format is
           **yyyy-MM-ddThh:mm:ssZ**.
           The query result shows all data with policy execution time less than this value.
    :param _builtins.str execute_type: Specifies the policy execution type.  
           The valid values are as follows:
           + **SCHEDULED**: automatically triggered scheduled policy.
           + **RECURRENCE**: automatically triggered recurrence policy.
           + **ALARM**: automatically triggered alarm policy.
           + **MANUAL**: manually triggered policy.
    :param _builtins.str log_id: Specifies the policy execution log ID.
    :param _builtins.str region: Specifies the region in which to query the policy execution logs.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_policy_id: Specifies the scaling policy ID.
    :param _builtins.str scaling_resource_id: Specifies the scaling resource ID.
    :param _builtins.str scaling_resource_type: Specifies the scaling resource type.
           The value can be **SCALING_GROUP** or **BANDWIDTH**.
    :param _builtins.str start_time: Specifies the start time of the policy execution used for query. The time format is
           **yyyy-MM-ddThh:mm:ssZ**.
           The query result is all data with a policy execution time greater than or equal to this value.
    :param _builtins.str status: Specifies the policy execution status. The value can be **SUCCESS**, **FAIL**
           or **EXECUTING**.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['executeType'] = execute_type
    __args__['logId'] = log_id
    __args__['region'] = region
    __args__['scalingPolicyId'] = scaling_policy_id
    __args__['scalingResourceId'] = scaling_resource_id
    __args__['scalingResourceType'] = scaling_resource_type
    __args__['startTime'] = start_time
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:As/getPolicyExecuteLogs:getPolicyExecuteLogs', __args__, opts=opts, typ=GetPolicyExecuteLogsResult)
    return __ret__.apply(lambda __response__: GetPolicyExecuteLogsResult(
        end_time=pulumi.get(__response__, 'end_time'),
        execute_logs=pulumi.get(__response__, 'execute_logs'),
        execute_type=pulumi.get(__response__, 'execute_type'),
        id=pulumi.get(__response__, 'id'),
        log_id=pulumi.get(__response__, 'log_id'),
        region=pulumi.get(__response__, 'region'),
        scaling_policy_id=pulumi.get(__response__, 'scaling_policy_id'),
        scaling_resource_id=pulumi.get(__response__, 'scaling_resource_id'),
        scaling_resource_type=pulumi.get(__response__, 'scaling_resource_type'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status')))
