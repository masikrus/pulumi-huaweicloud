# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPoliciesV2Result',
    'AwaitableGetPoliciesV2Result',
    'get_policies_v2',
    'get_policies_v2_output',
]

@pulumi.output_type
class GetPoliciesV2Result:
    """
    A collection of values returned by getPoliciesV2.
    """
    def __init__(__self__, alarm_id=None, enterprise_project_id=None, id=None, order=None, region=None, scaling_policies=None, scaling_policy_id=None, scaling_policy_name=None, scaling_policy_type=None, scaling_resource_id=None, scaling_resource_type=None, sort_by=None):
        if alarm_id and not isinstance(alarm_id, str):
            raise TypeError("Expected argument 'alarm_id' to be a str")
        pulumi.set(__self__, "alarm_id", alarm_id)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if order and not isinstance(order, str):
            raise TypeError("Expected argument 'order' to be a str")
        pulumi.set(__self__, "order", order)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if scaling_policies and not isinstance(scaling_policies, list):
            raise TypeError("Expected argument 'scaling_policies' to be a list")
        pulumi.set(__self__, "scaling_policies", scaling_policies)
        if scaling_policy_id and not isinstance(scaling_policy_id, str):
            raise TypeError("Expected argument 'scaling_policy_id' to be a str")
        pulumi.set(__self__, "scaling_policy_id", scaling_policy_id)
        if scaling_policy_name and not isinstance(scaling_policy_name, str):
            raise TypeError("Expected argument 'scaling_policy_name' to be a str")
        pulumi.set(__self__, "scaling_policy_name", scaling_policy_name)
        if scaling_policy_type and not isinstance(scaling_policy_type, str):
            raise TypeError("Expected argument 'scaling_policy_type' to be a str")
        pulumi.set(__self__, "scaling_policy_type", scaling_policy_type)
        if scaling_resource_id and not isinstance(scaling_resource_id, str):
            raise TypeError("Expected argument 'scaling_resource_id' to be a str")
        pulumi.set(__self__, "scaling_resource_id", scaling_resource_id)
        if scaling_resource_type and not isinstance(scaling_resource_type, str):
            raise TypeError("Expected argument 'scaling_resource_type' to be a str")
        pulumi.set(__self__, "scaling_resource_type", scaling_resource_type)
        if sort_by and not isinstance(sort_by, str):
            raise TypeError("Expected argument 'sort_by' to be a str")
        pulumi.set(__self__, "sort_by", sort_by)

    @_builtins.property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> Optional[_builtins.str]:
        """
        The alarm rule ID associate with the AS policy.
        """
        return pulumi.get(self, "alarm_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def order(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "order")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scalingPolicies")
    def scaling_policies(self) -> Sequence['outputs.GetPoliciesV2ScalingPolicyResult']:
        """
        The list of the AS policies.
        """
        return pulumi.get(self, "scaling_policies")

    @_builtins.property
    @pulumi.getter(name="scalingPolicyId")
    def scaling_policy_id(self) -> Optional[_builtins.str]:
        """
        The AS policy ID.
        """
        return pulumi.get(self, "scaling_policy_id")

    @_builtins.property
    @pulumi.getter(name="scalingPolicyName")
    def scaling_policy_name(self) -> Optional[_builtins.str]:
        """
        The AS policy name.
        """
        return pulumi.get(self, "scaling_policy_name")

    @_builtins.property
    @pulumi.getter(name="scalingPolicyType")
    def scaling_policy_type(self) -> Optional[_builtins.str]:
        """
        The AS policy type.
        """
        return pulumi.get(self, "scaling_policy_type")

    @_builtins.property
    @pulumi.getter(name="scalingResourceId")
    def scaling_resource_id(self) -> Optional[_builtins.str]:
        """
        The ID of the resource associate with the AS policy.
        """
        return pulumi.get(self, "scaling_resource_id")

    @_builtins.property
    @pulumi.getter(name="scalingResourceType")
    def scaling_resource_type(self) -> Optional[_builtins.str]:
        """
        The  resource type associate with the AS policy.
        """
        return pulumi.get(self, "scaling_resource_type")

    @_builtins.property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_by")


class AwaitableGetPoliciesV2Result(GetPoliciesV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPoliciesV2Result(
            alarm_id=self.alarm_id,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            order=self.order,
            region=self.region,
            scaling_policies=self.scaling_policies,
            scaling_policy_id=self.scaling_policy_id,
            scaling_policy_name=self.scaling_policy_name,
            scaling_policy_type=self.scaling_policy_type,
            scaling_resource_id=self.scaling_resource_id,
            scaling_resource_type=self.scaling_resource_type,
            sort_by=self.sort_by)


def get_policies_v2(alarm_id: Optional[_builtins.str] = None,
                    enterprise_project_id: Optional[_builtins.str] = None,
                    order: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    scaling_policy_id: Optional[_builtins.str] = None,
                    scaling_policy_name: Optional[_builtins.str] = None,
                    scaling_policy_type: Optional[_builtins.str] = None,
                    scaling_resource_id: Optional[_builtins.str] = None,
                    scaling_resource_type: Optional[_builtins.str] = None,
                    sort_by: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPoliciesV2Result:
    """
    Use this data source to get the list of the AS group policics and AS bandwidth policies.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.As.get_policies_v2()
    ```


    :param _builtins.str alarm_id: Specifies the alarm rule ID associate with the AS policy.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           Only support **all_granted_eps**.
           This field is only valid for enterprise users.
    :param _builtins.str order: Specifies the sorting order of the AS policies.
           The valid values are as follows:
           + **ASC**: ascending order.
           + **DESC**: descending order.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_policy_id: Specifies the AS policy ID.
    :param _builtins.str scaling_policy_name: Specifies the AS policy name.
           Fuzzy search is supported.
    :param _builtins.str scaling_policy_type: Specifies the AS policy type.
           The valid values are as follows:
           + **ALARM**: Alarm policy.
           + **SCHEDULED**: Scheduled policy.
           + **RECURRENCE**: Periodic policy.
    :param _builtins.str scaling_resource_id: Specifies the ID of the resource associate with the AS policy.
    :param _builtins.str scaling_resource_type: Specifies the resource type associate with the AS policy.
           The valid values are as follows:
           + **SCALING_GROUP**: AS group.
           + **BANDWIDTH**: Bandwidth.
    :param _builtins.str sort_by: Specifies the sorting method of the AS policies.
           The valid values are as follows:
           + **POLICY_NAME**: AS policies are sorted by name.
           + **TRIGGER_CONDITION**: AS policies are sorted by trigger condition.
           + **CREATE_TIME**: AS policies are sorted based on the creation time.
    """
    __args__ = dict()
    __args__['alarmId'] = alarm_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['order'] = order
    __args__['region'] = region
    __args__['scalingPolicyId'] = scaling_policy_id
    __args__['scalingPolicyName'] = scaling_policy_name
    __args__['scalingPolicyType'] = scaling_policy_type
    __args__['scalingResourceId'] = scaling_resource_id
    __args__['scalingResourceType'] = scaling_resource_type
    __args__['sortBy'] = sort_by
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:As/getPoliciesV2:getPoliciesV2', __args__, opts=opts, typ=GetPoliciesV2Result).value

    return AwaitableGetPoliciesV2Result(
        alarm_id=pulumi.get(__ret__, 'alarm_id'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        order=pulumi.get(__ret__, 'order'),
        region=pulumi.get(__ret__, 'region'),
        scaling_policies=pulumi.get(__ret__, 'scaling_policies'),
        scaling_policy_id=pulumi.get(__ret__, 'scaling_policy_id'),
        scaling_policy_name=pulumi.get(__ret__, 'scaling_policy_name'),
        scaling_policy_type=pulumi.get(__ret__, 'scaling_policy_type'),
        scaling_resource_id=pulumi.get(__ret__, 'scaling_resource_id'),
        scaling_resource_type=pulumi.get(__ret__, 'scaling_resource_type'),
        sort_by=pulumi.get(__ret__, 'sort_by'))
def get_policies_v2_output(alarm_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           order: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           scaling_policy_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           scaling_policy_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           scaling_policy_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           scaling_resource_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           scaling_resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           sort_by: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPoliciesV2Result]:
    """
    Use this data source to get the list of the AS group policics and AS bandwidth policies.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.As.get_policies_v2()
    ```


    :param _builtins.str alarm_id: Specifies the alarm rule ID associate with the AS policy.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           Only support **all_granted_eps**.
           This field is only valid for enterprise users.
    :param _builtins.str order: Specifies the sorting order of the AS policies.
           The valid values are as follows:
           + **ASC**: ascending order.
           + **DESC**: descending order.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str scaling_policy_id: Specifies the AS policy ID.
    :param _builtins.str scaling_policy_name: Specifies the AS policy name.
           Fuzzy search is supported.
    :param _builtins.str scaling_policy_type: Specifies the AS policy type.
           The valid values are as follows:
           + **ALARM**: Alarm policy.
           + **SCHEDULED**: Scheduled policy.
           + **RECURRENCE**: Periodic policy.
    :param _builtins.str scaling_resource_id: Specifies the ID of the resource associate with the AS policy.
    :param _builtins.str scaling_resource_type: Specifies the resource type associate with the AS policy.
           The valid values are as follows:
           + **SCALING_GROUP**: AS group.
           + **BANDWIDTH**: Bandwidth.
    :param _builtins.str sort_by: Specifies the sorting method of the AS policies.
           The valid values are as follows:
           + **POLICY_NAME**: AS policies are sorted by name.
           + **TRIGGER_CONDITION**: AS policies are sorted by trigger condition.
           + **CREATE_TIME**: AS policies are sorted based on the creation time.
    """
    __args__ = dict()
    __args__['alarmId'] = alarm_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['order'] = order
    __args__['region'] = region
    __args__['scalingPolicyId'] = scaling_policy_id
    __args__['scalingPolicyName'] = scaling_policy_name
    __args__['scalingPolicyType'] = scaling_policy_type
    __args__['scalingResourceId'] = scaling_resource_id
    __args__['scalingResourceType'] = scaling_resource_type
    __args__['sortBy'] = sort_by
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:As/getPoliciesV2:getPoliciesV2', __args__, opts=opts, typ=GetPoliciesV2Result)
    return __ret__.apply(lambda __response__: GetPoliciesV2Result(
        alarm_id=pulumi.get(__response__, 'alarm_id'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        order=pulumi.get(__response__, 'order'),
        region=pulumi.get(__response__, 'region'),
        scaling_policies=pulumi.get(__response__, 'scaling_policies'),
        scaling_policy_id=pulumi.get(__response__, 'scaling_policy_id'),
        scaling_policy_name=pulumi.get(__response__, 'scaling_policy_name'),
        scaling_policy_type=pulumi.get(__response__, 'scaling_policy_type'),
        scaling_resource_id=pulumi.get(__response__, 'scaling_resource_id'),
        scaling_resource_type=pulumi.get(__response__, 'scaling_resource_type'),
        sort_by=pulumi.get(__response__, 'sort_by')))
