# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDnatRulesResult',
    'AwaitableGetDnatRulesResult',
    'get_dnat_rules',
    'get_dnat_rules_output',
]

@pulumi.output_type
class GetDnatRulesResult:
    """
    A collection of values returned by getDnatRules.
    """
    def __init__(__self__, created_at=None, description=None, external_service_port=None, floating_ip_address=None, floating_ip_id=None, gateway_id=None, global_eip_address=None, global_eip_id=None, id=None, internal_service_port=None, port_id=None, private_ip=None, protocol=None, region=None, rule_id=None, rules=None, status=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if external_service_port and not isinstance(external_service_port, str):
            raise TypeError("Expected argument 'external_service_port' to be a str")
        pulumi.set(__self__, "external_service_port", external_service_port)
        if floating_ip_address and not isinstance(floating_ip_address, str):
            raise TypeError("Expected argument 'floating_ip_address' to be a str")
        pulumi.set(__self__, "floating_ip_address", floating_ip_address)
        if floating_ip_id and not isinstance(floating_ip_id, str):
            raise TypeError("Expected argument 'floating_ip_id' to be a str")
        pulumi.set(__self__, "floating_ip_id", floating_ip_id)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if global_eip_address and not isinstance(global_eip_address, str):
            raise TypeError("Expected argument 'global_eip_address' to be a str")
        pulumi.set(__self__, "global_eip_address", global_eip_address)
        if global_eip_id and not isinstance(global_eip_id, str):
            raise TypeError("Expected argument 'global_eip_id' to be a str")
        pulumi.set(__self__, "global_eip_id", global_eip_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internal_service_port and not isinstance(internal_service_port, str):
            raise TypeError("Expected argument 'internal_service_port' to be a str")
        pulumi.set(__self__, "internal_service_port", internal_service_port)
        if port_id and not isinstance(port_id, str):
            raise TypeError("Expected argument 'port_id' to be a str")
        pulumi.set(__self__, "port_id", port_id)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The creation time of the DNAT rule.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the DNAT rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="externalServicePort")
    def external_service_port(self) -> Optional[_builtins.str]:
        """
        The port of the EIP associated with the DNAT rule belongs.
        """
        return pulumi.get(self, "external_service_port")

    @_builtins.property
    @pulumi.getter(name="floatingIpAddress")
    def floating_ip_address(self) -> Optional[_builtins.str]:
        """
        The IP address of the EIP associated with the DNAT rule.
        """
        return pulumi.get(self, "floating_ip_address")

    @_builtins.property
    @pulumi.getter(name="floatingIpId")
    def floating_ip_id(self) -> Optional[_builtins.str]:
        """
        The ID of the EIP associated with the DNAT rule.
        """
        return pulumi.get(self, "floating_ip_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[_builtins.str]:
        """
        The ID of the NAT gateway to which the DNAT rule belongs.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="globalEipAddress")
    def global_eip_address(self) -> Optional[_builtins.str]:
        """
        The IP address of the global EIP associated with the DNAT rule.
        """
        return pulumi.get(self, "global_eip_address")

    @_builtins.property
    @pulumi.getter(name="globalEipId")
    def global_eip_id(self) -> Optional[_builtins.str]:
        """
        The ID of the global EIP associated with the DNAT rule.
        """
        return pulumi.get(self, "global_eip_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="internalServicePort")
    def internal_service_port(self) -> Optional[_builtins.str]:
        """
        The port of the backend instance to which the DNAT rule belongs.
        """
        return pulumi.get(self, "internal_service_port")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> Optional[_builtins.str]:
        """
        The port ID of the backend instance to which the DNAT rule belongs.
        """
        return pulumi.get(self, "port_id")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        The private IP address of the backend instance to which the DNAT rule belongs.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        The protocol type of the DNAT rule.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetDnatRulesRuleResult']:
        """
        The list ot the DNAT rules.
        The rules structure is documented below.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the DNAT rule.
        """
        return pulumi.get(self, "status")


class AwaitableGetDnatRulesResult(GetDnatRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDnatRulesResult(
            created_at=self.created_at,
            description=self.description,
            external_service_port=self.external_service_port,
            floating_ip_address=self.floating_ip_address,
            floating_ip_id=self.floating_ip_id,
            gateway_id=self.gateway_id,
            global_eip_address=self.global_eip_address,
            global_eip_id=self.global_eip_id,
            id=self.id,
            internal_service_port=self.internal_service_port,
            port_id=self.port_id,
            private_ip=self.private_ip,
            protocol=self.protocol,
            region=self.region,
            rule_id=self.rule_id,
            rules=self.rules,
            status=self.status)


def get_dnat_rules(created_at: Optional[_builtins.str] = None,
                   description: Optional[_builtins.str] = None,
                   external_service_port: Optional[_builtins.str] = None,
                   floating_ip_address: Optional[_builtins.str] = None,
                   floating_ip_id: Optional[_builtins.str] = None,
                   gateway_id: Optional[_builtins.str] = None,
                   global_eip_address: Optional[_builtins.str] = None,
                   global_eip_id: Optional[_builtins.str] = None,
                   internal_service_port: Optional[_builtins.str] = None,
                   port_id: Optional[_builtins.str] = None,
                   private_ip: Optional[_builtins.str] = None,
                   protocol: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   rule_id: Optional[_builtins.str] = None,
                   status: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDnatRulesResult:
    """
    Use this data source to get the list of DNAT rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    protocol = config.require_object("protocol")
    test = huaweicloud.Nat.get_dnat_rules(protocol=protocol)
    ```


    :param _builtins.str created_at: Specifies the creation time of the DNAT rule.
           The format is **yyyy-mm-dd hh:mm:ss.SSSSSS**. e.g. **2024-12-20 15:03:04.000000**.
    :param _builtins.str description: Specifies the description of the DNAT rule.
    :param _builtins.str external_service_port: Specifies the port of the EIP associated with the DNAT rule.
    :param _builtins.str floating_ip_address: Specifies the IP address of the EIP associated with the DNAT rule.
    :param _builtins.str floating_ip_id: Specifies the ID of the EIP associated with the DNAT rule.
    :param _builtins.str gateway_id: Specifies the ID of the NAT gateway to which the DNAT rule belongs.
    :param _builtins.str global_eip_address: Specifies the IP address of the global EIP associated with the DNAT rule.
    :param _builtins.str global_eip_id: Specifies the ID of the global EIP associated with the DNAT rule.
    :param _builtins.str internal_service_port: Specifies the port of the backend instance to which the DNAT rule
           belongs.
    :param _builtins.str port_id: Specifies the port ID of the backend instance to which the DNAT rule belongs.
    :param _builtins.str private_ip: Specifies the private IP address of the backend instance to which the DNAT rule
           belongs.
    :param _builtins.str protocol: Specifies the protocol type of the DNAT rule.
           The value can be one of the following:
           + **tcp**
           + **udp**
           + **any**
    :param _builtins.str region: Specifies the region where the DNAT rules are located.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the DNAT rule.
    :param _builtins.str status: Specifies the status of the DNAT rule.
           The value can be one of the following:
           + **ACTIVE**: The SNAT rule is available.
           + **EIP_FREEZED**: The EIP is frozen associated with SNAT rule.
           + **INACTIVE**: The SNAT rule is unavailable.
    """
    __args__ = dict()
    __args__['createdAt'] = created_at
    __args__['description'] = description
    __args__['externalServicePort'] = external_service_port
    __args__['floatingIpAddress'] = floating_ip_address
    __args__['floatingIpId'] = floating_ip_id
    __args__['gatewayId'] = gateway_id
    __args__['globalEipAddress'] = global_eip_address
    __args__['globalEipId'] = global_eip_id
    __args__['internalServicePort'] = internal_service_port
    __args__['portId'] = port_id
    __args__['privateIp'] = private_ip
    __args__['protocol'] = protocol
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Nat/getDnatRules:getDnatRules', __args__, opts=opts, typ=GetDnatRulesResult).value

    return AwaitableGetDnatRulesResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        external_service_port=pulumi.get(__ret__, 'external_service_port'),
        floating_ip_address=pulumi.get(__ret__, 'floating_ip_address'),
        floating_ip_id=pulumi.get(__ret__, 'floating_ip_id'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        global_eip_address=pulumi.get(__ret__, 'global_eip_address'),
        global_eip_id=pulumi.get(__ret__, 'global_eip_id'),
        id=pulumi.get(__ret__, 'id'),
        internal_service_port=pulumi.get(__ret__, 'internal_service_port'),
        port_id=pulumi.get(__ret__, 'port_id'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        protocol=pulumi.get(__ret__, 'protocol'),
        region=pulumi.get(__ret__, 'region'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        rules=pulumi.get(__ret__, 'rules'),
        status=pulumi.get(__ret__, 'status'))
def get_dnat_rules_output(created_at: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          external_service_port: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          floating_ip_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          floating_ip_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          gateway_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          global_eip_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          global_eip_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          internal_service_port: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          port_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          private_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          protocol: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          rule_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDnatRulesResult]:
    """
    Use this data source to get the list of DNAT rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    protocol = config.require_object("protocol")
    test = huaweicloud.Nat.get_dnat_rules(protocol=protocol)
    ```


    :param _builtins.str created_at: Specifies the creation time of the DNAT rule.
           The format is **yyyy-mm-dd hh:mm:ss.SSSSSS**. e.g. **2024-12-20 15:03:04.000000**.
    :param _builtins.str description: Specifies the description of the DNAT rule.
    :param _builtins.str external_service_port: Specifies the port of the EIP associated with the DNAT rule.
    :param _builtins.str floating_ip_address: Specifies the IP address of the EIP associated with the DNAT rule.
    :param _builtins.str floating_ip_id: Specifies the ID of the EIP associated with the DNAT rule.
    :param _builtins.str gateway_id: Specifies the ID of the NAT gateway to which the DNAT rule belongs.
    :param _builtins.str global_eip_address: Specifies the IP address of the global EIP associated with the DNAT rule.
    :param _builtins.str global_eip_id: Specifies the ID of the global EIP associated with the DNAT rule.
    :param _builtins.str internal_service_port: Specifies the port of the backend instance to which the DNAT rule
           belongs.
    :param _builtins.str port_id: Specifies the port ID of the backend instance to which the DNAT rule belongs.
    :param _builtins.str private_ip: Specifies the private IP address of the backend instance to which the DNAT rule
           belongs.
    :param _builtins.str protocol: Specifies the protocol type of the DNAT rule.
           The value can be one of the following:
           + **tcp**
           + **udp**
           + **any**
    :param _builtins.str region: Specifies the region where the DNAT rules are located.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the DNAT rule.
    :param _builtins.str status: Specifies the status of the DNAT rule.
           The value can be one of the following:
           + **ACTIVE**: The SNAT rule is available.
           + **EIP_FREEZED**: The EIP is frozen associated with SNAT rule.
           + **INACTIVE**: The SNAT rule is unavailable.
    """
    __args__ = dict()
    __args__['createdAt'] = created_at
    __args__['description'] = description
    __args__['externalServicePort'] = external_service_port
    __args__['floatingIpAddress'] = floating_ip_address
    __args__['floatingIpId'] = floating_ip_id
    __args__['gatewayId'] = gateway_id
    __args__['globalEipAddress'] = global_eip_address
    __args__['globalEipId'] = global_eip_id
    __args__['internalServicePort'] = internal_service_port
    __args__['portId'] = port_id
    __args__['privateIp'] = private_ip
    __args__['protocol'] = protocol
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Nat/getDnatRules:getDnatRules', __args__, opts=opts, typ=GetDnatRulesResult)
    return __ret__.apply(lambda __response__: GetDnatRulesResult(
        created_at=pulumi.get(__response__, 'created_at'),
        description=pulumi.get(__response__, 'description'),
        external_service_port=pulumi.get(__response__, 'external_service_port'),
        floating_ip_address=pulumi.get(__response__, 'floating_ip_address'),
        floating_ip_id=pulumi.get(__response__, 'floating_ip_id'),
        gateway_id=pulumi.get(__response__, 'gateway_id'),
        global_eip_address=pulumi.get(__response__, 'global_eip_address'),
        global_eip_id=pulumi.get(__response__, 'global_eip_id'),
        id=pulumi.get(__response__, 'id'),
        internal_service_port=pulumi.get(__response__, 'internal_service_port'),
        port_id=pulumi.get(__response__, 'port_id'),
        private_ip=pulumi.get(__response__, 'private_ip'),
        protocol=pulumi.get(__response__, 'protocol'),
        region=pulumi.get(__response__, 'region'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        rules=pulumi.get(__response__, 'rules'),
        status=pulumi.get(__response__, 'status')))
