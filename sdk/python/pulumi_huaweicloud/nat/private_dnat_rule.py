# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PrivateDnatRuleArgs', 'PrivateDnatRule']

@pulumi.input_type
class PrivateDnatRuleArgs:
    def __init__(__self__, *,
                 gateway_id: pulumi.Input[_builtins.str],
                 transit_ip_id: pulumi.Input[_builtins.str],
                 backend_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_service_port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_service_port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a PrivateDnatRule resource.
        :param pulumi.Input[_builtins.str] gateway_id: Specifies the private NAT gateway ID to which the DNAT rule belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] transit_ip_id: Specifies the ID of the transit IP for private NAT.
        :param pulumi.Input[_builtins.str] backend_interface_id: Specifies the network interface ID of the transit IP for private NAT.  
               Exactly one of `backend_interface_id` and `backend_private_ip` must be set.
        :param pulumi.Input[_builtins.str] backend_private_ip: Specifies the private IP address of the backend instance.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the DNAT rule, which contain maximum of `255`
               characters, and angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.int] internal_service_port: Specifies the port of the backend instance.
               
               > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol type.  
               The valid values are **tcp**, **udp** and **any**. Defaults to **any**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the DNAT rule is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] transit_service_port: Specifies the port of the transit IP.  
               
               > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "transit_ip_id", transit_ip_id)
        if backend_interface_id is not None:
            pulumi.set(__self__, "backend_interface_id", backend_interface_id)
        if backend_private_ip is not None:
            pulumi.set(__self__, "backend_private_ip", backend_private_ip)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if internal_service_port is not None:
            pulumi.set(__self__, "internal_service_port", internal_service_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if transit_service_port is not None:
            pulumi.set(__self__, "transit_service_port", transit_service_port)

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the private NAT gateway ID to which the DNAT rule belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="transitIpId")
    def transit_ip_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the transit IP for private NAT.
        """
        return pulumi.get(self, "transit_ip_id")

    @transit_ip_id.setter
    def transit_ip_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "transit_ip_id", value)

    @_builtins.property
    @pulumi.getter(name="backendInterfaceId")
    def backend_interface_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network interface ID of the transit IP for private NAT.  
        Exactly one of `backend_interface_id` and `backend_private_ip` must be set.
        """
        return pulumi.get(self, "backend_interface_id")

    @backend_interface_id.setter
    def backend_interface_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backend_interface_id", value)

    @_builtins.property
    @pulumi.getter(name="backendPrivateIp")
    def backend_private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private IP address of the backend instance.
        """
        return pulumi.get(self, "backend_private_ip")

    @backend_private_ip.setter
    def backend_private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backend_private_ip", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the DNAT rule, which contain maximum of `255`
        characters, and angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="internalServicePort")
    def internal_service_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the port of the backend instance.

        > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        """
        return pulumi.get(self, "internal_service_port")

    @internal_service_port.setter
    def internal_service_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "internal_service_port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protocol type.  
        The valid values are **tcp**, **udp** and **any**. Defaults to **any**.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the DNAT rule is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="transitServicePort")
    def transit_service_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the port of the transit IP.  

        > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        """
        return pulumi.get(self, "transit_service_port")

    @transit_service_port.setter
    def transit_service_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "transit_service_port", value)


@pulumi.input_type
class _PrivateDnatRuleState:
    def __init__(__self__, *,
                 backend_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_type: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_service_port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_service_port: Optional[pulumi.Input[_builtins.int]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PrivateDnatRule resources.
        :param pulumi.Input[_builtins.str] backend_interface_id: Specifies the network interface ID of the transit IP for private NAT.  
               Exactly one of `backend_interface_id` and `backend_private_ip` must be set.
        :param pulumi.Input[_builtins.str] backend_private_ip: Specifies the private IP address of the backend instance.
        :param pulumi.Input[_builtins.str] backend_type: The type of backend instance.
               The valid values are as follows:
               + **COMPUTE**: ECS instance.
               + **VIP**: VIP.
               + **ELB**: ELB loadbalancer.
               + **ELBv3**: ver.3 ELB loadbalancer.
               + **CUSTOMIZE**: custom backend IP address.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the DNAT rule.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the DNAT rule, which contain maximum of `255`
               characters, and angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The ID of the enterprise project to which the private DNAT rule belongs.
        :param pulumi.Input[_builtins.str] gateway_id: Specifies the private NAT gateway ID to which the DNAT rule belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] internal_service_port: Specifies the port of the backend instance.
               
               > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol type.  
               The valid values are **tcp**, **udp** and **any**. Defaults to **any**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the DNAT rule is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] transit_ip_id: Specifies the ID of the transit IP for private NAT.
        :param pulumi.Input[_builtins.int] transit_service_port: Specifies the port of the transit IP.  
               
               > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the DNAT rule.
        """
        if backend_interface_id is not None:
            pulumi.set(__self__, "backend_interface_id", backend_interface_id)
        if backend_private_ip is not None:
            pulumi.set(__self__, "backend_private_ip", backend_private_ip)
        if backend_type is not None:
            pulumi.set(__self__, "backend_type", backend_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if internal_service_port is not None:
            pulumi.set(__self__, "internal_service_port", internal_service_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if transit_ip_id is not None:
            pulumi.set(__self__, "transit_ip_id", transit_ip_id)
        if transit_service_port is not None:
            pulumi.set(__self__, "transit_service_port", transit_service_port)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="backendInterfaceId")
    def backend_interface_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network interface ID of the transit IP for private NAT.  
        Exactly one of `backend_interface_id` and `backend_private_ip` must be set.
        """
        return pulumi.get(self, "backend_interface_id")

    @backend_interface_id.setter
    def backend_interface_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backend_interface_id", value)

    @_builtins.property
    @pulumi.getter(name="backendPrivateIp")
    def backend_private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private IP address of the backend instance.
        """
        return pulumi.get(self, "backend_private_ip")

    @backend_private_ip.setter
    def backend_private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backend_private_ip", value)

    @_builtins.property
    @pulumi.getter(name="backendType")
    def backend_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of backend instance.
        The valid values are as follows:
        + **COMPUTE**: ECS instance.
        + **VIP**: VIP.
        + **ELB**: ELB loadbalancer.
        + **ELBv3**: ver.3 ELB loadbalancer.
        + **CUSTOMIZE**: custom backend IP address.
        """
        return pulumi.get(self, "backend_type")

    @backend_type.setter
    def backend_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backend_type", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the DNAT rule.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the DNAT rule, which contain maximum of `255`
        characters, and angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the enterprise project to which the private DNAT rule belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private NAT gateway ID to which the DNAT rule belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="internalServicePort")
    def internal_service_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the port of the backend instance.

        > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        """
        return pulumi.get(self, "internal_service_port")

    @internal_service_port.setter
    def internal_service_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "internal_service_port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protocol type.  
        The valid values are **tcp**, **udp** and **any**. Defaults to **any**.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the DNAT rule is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="transitIpId")
    def transit_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the transit IP for private NAT.
        """
        return pulumi.get(self, "transit_ip_id")

    @transit_ip_id.setter
    def transit_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transit_ip_id", value)

    @_builtins.property
    @pulumi.getter(name="transitServicePort")
    def transit_service_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the port of the transit IP.  

        > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        """
        return pulumi.get(self, "transit_service_port")

    @transit_service_port.setter
    def transit_service_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "transit_service_port", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the DNAT rule.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Nat/privateDnatRule:PrivateDnatRule")
class PrivateDnatRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backend_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_service_port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_service_port: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages a DNAT rule resource of the **private** NAT within HuaweiCloud.

        ## Example Usage

        ### DNAT rules forwarded with VIP as the backend

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        network_id = config.require_object("networkId")
        gateway_id = config.require_object("gatewayId")
        transit_ip_id = config.require_object("transitIpId")
        test = huaweicloud.vpc.Vip("test", network_id=network_id)
        test_private_dnat_rule = huaweicloud.nat.PrivateDnatRule("test",
            gateway_id=gateway_id,
            protocol="tcp",
            transit_ip_id=transit_ip_id,
            transit_service_port=1000,
            backend_interface_id=test.id,
            internal_service_port=2000)
        ```

        ### DNAT rules forwarded with a custom private IP address as the backend

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        gateway_id = config.require_object("gatewayId")
        transit_ip_id = config.require_object("transitIpId")
        test = huaweicloud.nat.PrivateDnatRule("test",
            gateway_id=gateway_id,
            protocol="tcp",
            transit_ip_id=transit_ip_id,
            transit_service_port=1000,
            backend_private_ip="172.168.0.69",
            internal_service_port=2000)
        ```

        ### DNAT rules for all ports

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        gateway_id = config.require_object("gatewayId")
        transit_ip_id = config.require_object("transitIpId")
        test = huaweicloud.nat.PrivateDnatRule("test",
            gateway_id=gateway_id,
            protocol="any",
            transit_ip_id=transit_ip_id,
            backend_private_ip="172.168.0.69")
        ```

        ## Import

        DNAT rules can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Nat/privateDnatRule:PrivateDnatRule test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backend_interface_id: Specifies the network interface ID of the transit IP for private NAT.  
               Exactly one of `backend_interface_id` and `backend_private_ip` must be set.
        :param pulumi.Input[_builtins.str] backend_private_ip: Specifies the private IP address of the backend instance.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the DNAT rule, which contain maximum of `255`
               characters, and angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] gateway_id: Specifies the private NAT gateway ID to which the DNAT rule belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] internal_service_port: Specifies the port of the backend instance.
               
               > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol type.  
               The valid values are **tcp**, **udp** and **any**. Defaults to **any**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the DNAT rule is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] transit_ip_id: Specifies the ID of the transit IP for private NAT.
        :param pulumi.Input[_builtins.int] transit_service_port: Specifies the port of the transit IP.  
               
               > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrivateDnatRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DNAT rule resource of the **private** NAT within HuaweiCloud.

        ## Example Usage

        ### DNAT rules forwarded with VIP as the backend

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        network_id = config.require_object("networkId")
        gateway_id = config.require_object("gatewayId")
        transit_ip_id = config.require_object("transitIpId")
        test = huaweicloud.vpc.Vip("test", network_id=network_id)
        test_private_dnat_rule = huaweicloud.nat.PrivateDnatRule("test",
            gateway_id=gateway_id,
            protocol="tcp",
            transit_ip_id=transit_ip_id,
            transit_service_port=1000,
            backend_interface_id=test.id,
            internal_service_port=2000)
        ```

        ### DNAT rules forwarded with a custom private IP address as the backend

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        gateway_id = config.require_object("gatewayId")
        transit_ip_id = config.require_object("transitIpId")
        test = huaweicloud.nat.PrivateDnatRule("test",
            gateway_id=gateway_id,
            protocol="tcp",
            transit_ip_id=transit_ip_id,
            transit_service_port=1000,
            backend_private_ip="172.168.0.69",
            internal_service_port=2000)
        ```

        ### DNAT rules for all ports

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        gateway_id = config.require_object("gatewayId")
        transit_ip_id = config.require_object("transitIpId")
        test = huaweicloud.nat.PrivateDnatRule("test",
            gateway_id=gateway_id,
            protocol="any",
            transit_ip_id=transit_ip_id,
            backend_private_ip="172.168.0.69")
        ```

        ## Import

        DNAT rules can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Nat/privateDnatRule:PrivateDnatRule test <id>
        ```

        :param str resource_name: The name of the resource.
        :param PrivateDnatRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrivateDnatRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backend_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_service_port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_service_port: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrivateDnatRuleArgs.__new__(PrivateDnatRuleArgs)

            __props__.__dict__["backend_interface_id"] = backend_interface_id
            __props__.__dict__["backend_private_ip"] = backend_private_ip
            __props__.__dict__["description"] = description
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["internal_service_port"] = internal_service_port
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["region"] = region
            if transit_ip_id is None and not opts.urn:
                raise TypeError("Missing required property 'transit_ip_id'")
            __props__.__dict__["transit_ip_id"] = transit_ip_id
            __props__.__dict__["transit_service_port"] = transit_service_port
            __props__.__dict__["backend_type"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["enterprise_project_id"] = None
            __props__.__dict__["updated_at"] = None
        super(PrivateDnatRule, __self__).__init__(
            'huaweicloud:Nat/privateDnatRule:PrivateDnatRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backend_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
            backend_private_ip: Optional[pulumi.Input[_builtins.str]] = None,
            backend_type: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
            internal_service_port: Optional[pulumi.Input[_builtins.int]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            transit_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
            transit_service_port: Optional[pulumi.Input[_builtins.int]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'PrivateDnatRule':
        """
        Get an existing PrivateDnatRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backend_interface_id: Specifies the network interface ID of the transit IP for private NAT.  
               Exactly one of `backend_interface_id` and `backend_private_ip` must be set.
        :param pulumi.Input[_builtins.str] backend_private_ip: Specifies the private IP address of the backend instance.
        :param pulumi.Input[_builtins.str] backend_type: The type of backend instance.
               The valid values are as follows:
               + **COMPUTE**: ECS instance.
               + **VIP**: VIP.
               + **ELB**: ELB loadbalancer.
               + **ELBv3**: ver.3 ELB loadbalancer.
               + **CUSTOMIZE**: custom backend IP address.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the DNAT rule.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the DNAT rule, which contain maximum of `255`
               characters, and angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The ID of the enterprise project to which the private DNAT rule belongs.
        :param pulumi.Input[_builtins.str] gateway_id: Specifies the private NAT gateway ID to which the DNAT rule belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] internal_service_port: Specifies the port of the backend instance.
               
               > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol type.  
               The valid values are **tcp**, **udp** and **any**. Defaults to **any**.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the DNAT rule is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] transit_ip_id: Specifies the ID of the transit IP for private NAT.
        :param pulumi.Input[_builtins.int] transit_service_port: Specifies the port of the transit IP.  
               
               > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the DNAT rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PrivateDnatRuleState.__new__(_PrivateDnatRuleState)

        __props__.__dict__["backend_interface_id"] = backend_interface_id
        __props__.__dict__["backend_private_ip"] = backend_private_ip
        __props__.__dict__["backend_type"] = backend_type
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["internal_service_port"] = internal_service_port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["region"] = region
        __props__.__dict__["transit_ip_id"] = transit_ip_id
        __props__.__dict__["transit_service_port"] = transit_service_port
        __props__.__dict__["updated_at"] = updated_at
        return PrivateDnatRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backendInterfaceId")
    def backend_interface_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the network interface ID of the transit IP for private NAT.  
        Exactly one of `backend_interface_id` and `backend_private_ip` must be set.
        """
        return pulumi.get(self, "backend_interface_id")

    @_builtins.property
    @pulumi.getter(name="backendPrivateIp")
    def backend_private_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the private IP address of the backend instance.
        """
        return pulumi.get(self, "backend_private_ip")

    @_builtins.property
    @pulumi.getter(name="backendType")
    def backend_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of backend instance.
        The valid values are as follows:
        + **COMPUTE**: ECS instance.
        + **VIP**: VIP.
        + **ELB**: ELB loadbalancer.
        + **ELBv3**: ver.3 ELB loadbalancer.
        + **CUSTOMIZE**: custom backend IP address.
        """
        return pulumi.get(self, "backend_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the DNAT rule.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the DNAT rule, which contain maximum of `255`
        characters, and angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the enterprise project to which the private DNAT rule belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the private NAT gateway ID to which the DNAT rule belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="internalServicePort")
    def internal_service_port(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the port of the backend instance.

        > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        """
        return pulumi.get(self, "internal_service_port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the protocol type.  
        The valid values are **tcp**, **udp** and **any**. Defaults to **any**.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the DNAT rule is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="transitIpId")
    def transit_ip_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the transit IP for private NAT.
        """
        return pulumi.get(self, "transit_ip_id")

    @_builtins.property
    @pulumi.getter(name="transitServicePort")
    def transit_service_port(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the port of the transit IP.  

        > Defaults to `0` and the default port is only available for rules with the protocol **any**.
        """
        return pulumi.get(self, "transit_service_port")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the DNAT rule.
        """
        return pulumi.get(self, "updated_at")

