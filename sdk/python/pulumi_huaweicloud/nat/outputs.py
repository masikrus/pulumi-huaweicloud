# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GatewaySessionConf',
    'GatewayV2SessionConf',
    'GatewayV3SessionConf',
    'PrivateSnatRuleTransitIpAssociation',
    'GetDnatRulesRuleResult',
    'GetGatewayTagsTagResult',
    'GetGatewaysGatewayResult',
    'GetGatewaysGatewaySessionConfResult',
    'GetPrivateDnatRulesRuleResult',
    'GetPrivateGatewayTagsTagResult',
    'GetPrivateGatewaysGatewayResult',
    'GetPrivateSnatRulesRuleResult',
    'GetPrivateSnatRulesRuleTransitIpAssociationResult',
    'GetPrivateTransitIpTagsTagResult',
    'GetPrivateTransitIpsTransitIpResult',
    'GetSnatRulesRuleResult',
]

@pulumi.output_type
class GatewaySessionConf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "icmpSessionExpireTime":
            suggest = "icmp_session_expire_time"
        elif key == "tcpSessionExpireTime":
            suggest = "tcp_session_expire_time"
        elif key == "tcpTimeWaitTime":
            suggest = "tcp_time_wait_time"
        elif key == "udpSessionExpireTime":
            suggest = "udp_session_expire_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaySessionConf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaySessionConf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaySessionConf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icmp_session_expire_time: Optional[_builtins.int] = None,
                 tcp_session_expire_time: Optional[_builtins.int] = None,
                 tcp_time_wait_time: Optional[_builtins.int] = None,
                 udp_session_expire_time: Optional[_builtins.int] = None):
        """
        :param _builtins.int icmp_session_expire_time: Specifies the ICMP session expiration time, in seconds.
               The valid value from `10` to `7,200`, default value is `10`.
        :param _builtins.int tcp_session_expire_time: Specifies the TCP session expiration time, in seconds.
               The valid value from `40` to `7,200`, default value is `900`.
        :param _builtins.int tcp_time_wait_time: Specifies the duration of TIME_WAIT state when TCP connection is closed,
               in seconds. The valid value from `0` to `1,800`, default value is `5`.
        :param _builtins.int udp_session_expire_time: Specifies the UDP session expiration time, in seconds.
               The valid value from `40` to `7,200`, default value is `300`.
        """
        if icmp_session_expire_time is not None:
            pulumi.set(__self__, "icmp_session_expire_time", icmp_session_expire_time)
        if tcp_session_expire_time is not None:
            pulumi.set(__self__, "tcp_session_expire_time", tcp_session_expire_time)
        if tcp_time_wait_time is not None:
            pulumi.set(__self__, "tcp_time_wait_time", tcp_time_wait_time)
        if udp_session_expire_time is not None:
            pulumi.set(__self__, "udp_session_expire_time", udp_session_expire_time)

    @_builtins.property
    @pulumi.getter(name="icmpSessionExpireTime")
    def icmp_session_expire_time(self) -> Optional[_builtins.int]:
        """
        Specifies the ICMP session expiration time, in seconds.
        The valid value from `10` to `7,200`, default value is `10`.
        """
        return pulumi.get(self, "icmp_session_expire_time")

    @_builtins.property
    @pulumi.getter(name="tcpSessionExpireTime")
    def tcp_session_expire_time(self) -> Optional[_builtins.int]:
        """
        Specifies the TCP session expiration time, in seconds.
        The valid value from `40` to `7,200`, default value is `900`.
        """
        return pulumi.get(self, "tcp_session_expire_time")

    @_builtins.property
    @pulumi.getter(name="tcpTimeWaitTime")
    def tcp_time_wait_time(self) -> Optional[_builtins.int]:
        """
        Specifies the duration of TIME_WAIT state when TCP connection is closed,
        in seconds. The valid value from `0` to `1,800`, default value is `5`.
        """
        return pulumi.get(self, "tcp_time_wait_time")

    @_builtins.property
    @pulumi.getter(name="udpSessionExpireTime")
    def udp_session_expire_time(self) -> Optional[_builtins.int]:
        """
        Specifies the UDP session expiration time, in seconds.
        The valid value from `40` to `7,200`, default value is `300`.
        """
        return pulumi.get(self, "udp_session_expire_time")


@pulumi.output_type
class GatewayV2SessionConf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "icmpSessionExpireTime":
            suggest = "icmp_session_expire_time"
        elif key == "tcpSessionExpireTime":
            suggest = "tcp_session_expire_time"
        elif key == "tcpTimeWaitTime":
            suggest = "tcp_time_wait_time"
        elif key == "udpSessionExpireTime":
            suggest = "udp_session_expire_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayV2SessionConf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayV2SessionConf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayV2SessionConf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icmp_session_expire_time: Optional[_builtins.int] = None,
                 tcp_session_expire_time: Optional[_builtins.int] = None,
                 tcp_time_wait_time: Optional[_builtins.int] = None,
                 udp_session_expire_time: Optional[_builtins.int] = None):
        """
        :param _builtins.int icmp_session_expire_time: The ICMP session expiration time.
        :param _builtins.int tcp_session_expire_time: The TCP session expiration time.
        :param _builtins.int tcp_time_wait_time: The duration of TIME_WAIT state when TCP connection is closed.
        :param _builtins.int udp_session_expire_time: The UDP session expiration time.
        """
        if icmp_session_expire_time is not None:
            pulumi.set(__self__, "icmp_session_expire_time", icmp_session_expire_time)
        if tcp_session_expire_time is not None:
            pulumi.set(__self__, "tcp_session_expire_time", tcp_session_expire_time)
        if tcp_time_wait_time is not None:
            pulumi.set(__self__, "tcp_time_wait_time", tcp_time_wait_time)
        if udp_session_expire_time is not None:
            pulumi.set(__self__, "udp_session_expire_time", udp_session_expire_time)

    @_builtins.property
    @pulumi.getter(name="icmpSessionExpireTime")
    def icmp_session_expire_time(self) -> Optional[_builtins.int]:
        """
        The ICMP session expiration time.
        """
        return pulumi.get(self, "icmp_session_expire_time")

    @_builtins.property
    @pulumi.getter(name="tcpSessionExpireTime")
    def tcp_session_expire_time(self) -> Optional[_builtins.int]:
        """
        The TCP session expiration time.
        """
        return pulumi.get(self, "tcp_session_expire_time")

    @_builtins.property
    @pulumi.getter(name="tcpTimeWaitTime")
    def tcp_time_wait_time(self) -> Optional[_builtins.int]:
        """
        The duration of TIME_WAIT state when TCP connection is closed.
        """
        return pulumi.get(self, "tcp_time_wait_time")

    @_builtins.property
    @pulumi.getter(name="udpSessionExpireTime")
    def udp_session_expire_time(self) -> Optional[_builtins.int]:
        """
        The UDP session expiration time.
        """
        return pulumi.get(self, "udp_session_expire_time")


@pulumi.output_type
class GatewayV3SessionConf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "icmpSessionExpireTime":
            suggest = "icmp_session_expire_time"
        elif key == "tcpSessionExpireTime":
            suggest = "tcp_session_expire_time"
        elif key == "tcpTimeWaitTime":
            suggest = "tcp_time_wait_time"
        elif key == "udpSessionExpireTime":
            suggest = "udp_session_expire_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayV3SessionConf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayV3SessionConf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayV3SessionConf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icmp_session_expire_time: Optional[_builtins.int] = None,
                 tcp_session_expire_time: Optional[_builtins.int] = None,
                 tcp_time_wait_time: Optional[_builtins.int] = None,
                 udp_session_expire_time: Optional[_builtins.int] = None):
        """
        :param _builtins.int icmp_session_expire_time: Specifies the ICMP session expiration time, in seconds.
               The valid value from `10` to `7,200`, default value is `10`.
        :param _builtins.int tcp_session_expire_time: Specifies the TCP session expiration time, in seconds.
               The valid value from `40` to `7,200`, default value is `900`.
        :param _builtins.int tcp_time_wait_time: Specifies the duration of TIME_WAIT state when TCP connection is closed,
               in seconds. The valid value from `0` to `1,800`, default value is `5`.
        :param _builtins.int udp_session_expire_time: Specifies the UDP session expiration time, in seconds.
               The valid value from `40` to `7,200`, default value is `300`.
        """
        if icmp_session_expire_time is not None:
            pulumi.set(__self__, "icmp_session_expire_time", icmp_session_expire_time)
        if tcp_session_expire_time is not None:
            pulumi.set(__self__, "tcp_session_expire_time", tcp_session_expire_time)
        if tcp_time_wait_time is not None:
            pulumi.set(__self__, "tcp_time_wait_time", tcp_time_wait_time)
        if udp_session_expire_time is not None:
            pulumi.set(__self__, "udp_session_expire_time", udp_session_expire_time)

    @_builtins.property
    @pulumi.getter(name="icmpSessionExpireTime")
    def icmp_session_expire_time(self) -> Optional[_builtins.int]:
        """
        Specifies the ICMP session expiration time, in seconds.
        The valid value from `10` to `7,200`, default value is `10`.
        """
        return pulumi.get(self, "icmp_session_expire_time")

    @_builtins.property
    @pulumi.getter(name="tcpSessionExpireTime")
    def tcp_session_expire_time(self) -> Optional[_builtins.int]:
        """
        Specifies the TCP session expiration time, in seconds.
        The valid value from `40` to `7,200`, default value is `900`.
        """
        return pulumi.get(self, "tcp_session_expire_time")

    @_builtins.property
    @pulumi.getter(name="tcpTimeWaitTime")
    def tcp_time_wait_time(self) -> Optional[_builtins.int]:
        """
        Specifies the duration of TIME_WAIT state when TCP connection is closed,
        in seconds. The valid value from `0` to `1,800`, default value is `5`.
        """
        return pulumi.get(self, "tcp_time_wait_time")

    @_builtins.property
    @pulumi.getter(name="udpSessionExpireTime")
    def udp_session_expire_time(self) -> Optional[_builtins.int]:
        """
        Specifies the UDP session expiration time, in seconds.
        The valid value from `40` to `7,200`, default value is `300`.
        """
        return pulumi.get(self, "udp_session_expire_time")


@pulumi.output_type
class PrivateSnatRuleTransitIpAssociation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "transitIpAddress":
            suggest = "transit_ip_address"
        elif key == "transitIpId":
            suggest = "transit_ip_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateSnatRuleTransitIpAssociation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateSnatRuleTransitIpAssociation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateSnatRuleTransitIpAssociation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 transit_ip_address: Optional[_builtins.str] = None,
                 transit_ip_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str transit_ip_address: The IP address of the transit IP associated with the private SNAT rule.
        :param _builtins.str transit_ip_id: The ID of the transit IP associated with the private SNAT rule.
        """
        if transit_ip_address is not None:
            pulumi.set(__self__, "transit_ip_address", transit_ip_address)
        if transit_ip_id is not None:
            pulumi.set(__self__, "transit_ip_id", transit_ip_id)

    @_builtins.property
    @pulumi.getter(name="transitIpAddress")
    def transit_ip_address(self) -> Optional[_builtins.str]:
        """
        The IP address of the transit IP associated with the private SNAT rule.
        """
        return pulumi.get(self, "transit_ip_address")

    @_builtins.property
    @pulumi.getter(name="transitIpId")
    def transit_ip_id(self) -> Optional[_builtins.str]:
        """
        The ID of the transit IP associated with the private SNAT rule.
        """
        return pulumi.get(self, "transit_ip_id")


@pulumi.output_type
class GetDnatRulesRuleResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 external_service_port: _builtins.int,
                 external_service_port_range: _builtins.str,
                 floating_ip_address: _builtins.str,
                 floating_ip_id: _builtins.str,
                 gateway_id: _builtins.str,
                 global_eip_address: _builtins.str,
                 global_eip_id: _builtins.str,
                 id: _builtins.str,
                 internal_service_port: _builtins.int,
                 internal_service_port_range: _builtins.str,
                 port_id: _builtins.str,
                 private_ip: _builtins.str,
                 protocol: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str created_at: Specifies the creation time of the DNAT rule.
               The format is **yyyy-mm-dd hh:mm:ss.SSSSSS**. e.g. **2024-12-20 15:03:04.000000**.
        :param _builtins.str description: Specifies the description of the DNAT rule.
        :param _builtins.int external_service_port: Specifies the port of the EIP associated with the DNAT rule.
        :param _builtins.str external_service_port_range: The port range of the EIP associated with the DNAT rule.
        :param _builtins.str floating_ip_address: Specifies the IP address of the EIP associated with the DNAT rule.
        :param _builtins.str floating_ip_id: Specifies the ID of the EIP associated with the DNAT rule.
        :param _builtins.str gateway_id: Specifies the ID of the NAT gateway to which the DNAT rule belongs.
        :param _builtins.str global_eip_address: Specifies the IP address of the global EIP associated with the DNAT rule.
        :param _builtins.str global_eip_id: Specifies the ID of the global EIP associated with the DNAT rule.
        :param _builtins.str id: The ID of the DNAT rule.
        :param _builtins.int internal_service_port: Specifies the port of the backend instance to which the DNAT rule
               belongs.
        :param _builtins.str internal_service_port_range: The port range of the backend instance to which the DNAT rule belongs.
        :param _builtins.str port_id: Specifies the port ID of the backend instance to which the DNAT rule belongs.
        :param _builtins.str private_ip: Specifies the private IP address of the backend instance to which the DNAT rule
               belongs.
        :param _builtins.str protocol: Specifies the protocol type of the DNAT rule.
               The value can be one of the following:
               + **tcp**
               + **udp**
               + **any**
        :param _builtins.str status: Specifies the status of the DNAT rule.
               The value can be one of the following:
               + **ACTIVE**: The SNAT rule is available.
               + **EIP_FREEZED**: The EIP is frozen associated with SNAT rule.
               + **INACTIVE**: The SNAT rule is unavailable.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_service_port", external_service_port)
        pulumi.set(__self__, "external_service_port_range", external_service_port_range)
        pulumi.set(__self__, "floating_ip_address", floating_ip_address)
        pulumi.set(__self__, "floating_ip_id", floating_ip_id)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "global_eip_address", global_eip_address)
        pulumi.set(__self__, "global_eip_id", global_eip_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "internal_service_port", internal_service_port)
        pulumi.set(__self__, "internal_service_port_range", internal_service_port_range)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Specifies the creation time of the DNAT rule.
        The format is **yyyy-mm-dd hh:mm:ss.SSSSSS**. e.g. **2024-12-20 15:03:04.000000**.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the DNAT rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="externalServicePort")
    def external_service_port(self) -> _builtins.int:
        """
        Specifies the port of the EIP associated with the DNAT rule.
        """
        return pulumi.get(self, "external_service_port")

    @_builtins.property
    @pulumi.getter(name="externalServicePortRange")
    def external_service_port_range(self) -> _builtins.str:
        """
        The port range of the EIP associated with the DNAT rule.
        """
        return pulumi.get(self, "external_service_port_range")

    @_builtins.property
    @pulumi.getter(name="floatingIpAddress")
    def floating_ip_address(self) -> _builtins.str:
        """
        Specifies the IP address of the EIP associated with the DNAT rule.
        """
        return pulumi.get(self, "floating_ip_address")

    @_builtins.property
    @pulumi.getter(name="floatingIpId")
    def floating_ip_id(self) -> _builtins.str:
        """
        Specifies the ID of the EIP associated with the DNAT rule.
        """
        return pulumi.get(self, "floating_ip_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> _builtins.str:
        """
        Specifies the ID of the NAT gateway to which the DNAT rule belongs.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="globalEipAddress")
    def global_eip_address(self) -> _builtins.str:
        """
        Specifies the IP address of the global EIP associated with the DNAT rule.
        """
        return pulumi.get(self, "global_eip_address")

    @_builtins.property
    @pulumi.getter(name="globalEipId")
    def global_eip_id(self) -> _builtins.str:
        """
        Specifies the ID of the global EIP associated with the DNAT rule.
        """
        return pulumi.get(self, "global_eip_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the DNAT rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="internalServicePort")
    def internal_service_port(self) -> _builtins.int:
        """
        Specifies the port of the backend instance to which the DNAT rule
        belongs.
        """
        return pulumi.get(self, "internal_service_port")

    @_builtins.property
    @pulumi.getter(name="internalServicePortRange")
    def internal_service_port_range(self) -> _builtins.str:
        """
        The port range of the backend instance to which the DNAT rule belongs.
        """
        return pulumi.get(self, "internal_service_port_range")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> _builtins.str:
        """
        Specifies the port ID of the backend instance to which the DNAT rule belongs.
        """
        return pulumi.get(self, "port_id")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Specifies the private IP address of the backend instance to which the DNAT rule
        belongs.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol type of the DNAT rule.
        The value can be one of the following:
        + **tcp**
        + **udp**
        + **any**
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the DNAT rule.
        The value can be one of the following:
        + **ACTIVE**: The SNAT rule is available.
        + **EIP_FREEZED**: The EIP is frozen associated with SNAT rule.
        + **INACTIVE**: The SNAT rule is unavailable.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGatewayTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the tag.
        :param Sequence[_builtins.str] values: The list of the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The list of the tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetGatewaysGatewayResult(dict):
    def __init__(__self__, *,
                 billing_info: _builtins.str,
                 bps_max: _builtins.int,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 dnat_rules_limit: _builtins.int,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 ngport_ip_address: _builtins.str,
                 pps_max: _builtins.int,
                 session_confs: Sequence['outputs.GetGatewaysGatewaySessionConfResult'],
                 snat_rule_public_ip_limit: _builtins.int,
                 spec: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str billing_info: The order information of the NAT gateway.
        :param _builtins.int bps_max: The bandwidth that the NAT gateway can receive or send per second, unit is MB.
        :param _builtins.str created_at: Specifies the creation time of the NAT gateway.
               The format is **yyyy-mm-ddThh:mm:ssZ**. e.g. **2024-06-20T15:03:04Z**.
        :param _builtins.str description: Specifies the description of the NAT gateway.
        :param _builtins.int dnat_rules_limit: The maximum number of DNAT rules on the NAT gateway.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the NAT
               gateways belong.
        :param _builtins.str id: The ID of the NAT gateway.
        :param _builtins.str name: Specifies the name of the NAT gateway.
        :param _builtins.str ngport_ip_address: The private IP address of the NAT gateway.
        :param _builtins.int pps_max: The number of packets that the NAT gateway can receive or send per second.
        :param Sequence['GetGatewaysGatewaySessionConfArgs'] session_confs: The session configuration of the NAT gateway
               The session_conf structure is documented below.
        :param _builtins.int snat_rule_public_ip_limit: The maximum number of SNAT rules on the NAT gateway.
        :param _builtins.str spec: Specifies the specification of the NAT gateways.
               The valid values are as follows:
               + **1**: Small type, which supports up to `10,000` SNAT connections.
               + **2**: Medium type, which supports up to `50,000` SNAT connections.
               + **3**: Large type, which supports up to `200,000` SNAT connections.
               + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
        :param _builtins.str status: Specifies the current status of the NAT gateways.
               The valid values are as follows:
               + **ACTIVE**: The status of the NAT gateway is available.
               + **INACTIVE**: The status of the NAT gateway is unavailable.
        :param _builtins.str subnet_id: Specifies the network ID of the downstream interface (the next hop of the DVR) of
               the NAT gateways.
        :param _builtins.str vpc_id: Specifies the ID of the VPC to which the NAT gateways belong.
        """
        pulumi.set(__self__, "billing_info", billing_info)
        pulumi.set(__self__, "bps_max", bps_max)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dnat_rules_limit", dnat_rules_limit)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ngport_ip_address", ngport_ip_address)
        pulumi.set(__self__, "pps_max", pps_max)
        pulumi.set(__self__, "session_confs", session_confs)
        pulumi.set(__self__, "snat_rule_public_ip_limit", snat_rule_public_ip_limit)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="billingInfo")
    def billing_info(self) -> _builtins.str:
        """
        The order information of the NAT gateway.
        """
        return pulumi.get(self, "billing_info")

    @_builtins.property
    @pulumi.getter(name="bpsMax")
    def bps_max(self) -> _builtins.int:
        """
        The bandwidth that the NAT gateway can receive or send per second, unit is MB.
        """
        return pulumi.get(self, "bps_max")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Specifies the creation time of the NAT gateway.
        The format is **yyyy-mm-ddThh:mm:ssZ**. e.g. **2024-06-20T15:03:04Z**.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the NAT gateway.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dnatRulesLimit")
    def dnat_rules_limit(self) -> _builtins.int:
        """
        The maximum number of DNAT rules on the NAT gateway.
        """
        return pulumi.get(self, "dnat_rules_limit")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the NAT
        gateways belong.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the NAT gateway.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the NAT gateway.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ngportIpAddress")
    def ngport_ip_address(self) -> _builtins.str:
        """
        The private IP address of the NAT gateway.
        """
        return pulumi.get(self, "ngport_ip_address")

    @_builtins.property
    @pulumi.getter(name="ppsMax")
    def pps_max(self) -> _builtins.int:
        """
        The number of packets that the NAT gateway can receive or send per second.
        """
        return pulumi.get(self, "pps_max")

    @_builtins.property
    @pulumi.getter(name="sessionConfs")
    def session_confs(self) -> Sequence['outputs.GetGatewaysGatewaySessionConfResult']:
        """
        The session configuration of the NAT gateway
        The session_conf structure is documented below.
        """
        return pulumi.get(self, "session_confs")

    @_builtins.property
    @pulumi.getter(name="snatRulePublicIpLimit")
    def snat_rule_public_ip_limit(self) -> _builtins.int:
        """
        The maximum number of SNAT rules on the NAT gateway.
        """
        return pulumi.get(self, "snat_rule_public_ip_limit")

    @_builtins.property
    @pulumi.getter
    def spec(self) -> _builtins.str:
        """
        Specifies the specification of the NAT gateways.
        The valid values are as follows:
        + **1**: Small type, which supports up to `10,000` SNAT connections.
        + **2**: Medium type, which supports up to `50,000` SNAT connections.
        + **3**: Large type, which supports up to `200,000` SNAT connections.
        + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
        """
        return pulumi.get(self, "spec")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the current status of the NAT gateways.
        The valid values are as follows:
        + **ACTIVE**: The status of the NAT gateway is available.
        + **INACTIVE**: The status of the NAT gateway is unavailable.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the network ID of the downstream interface (the next hop of the DVR) of
        the NAT gateways.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the ID of the VPC to which the NAT gateways belong.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetGatewaysGatewaySessionConfResult(dict):
    def __init__(__self__, *,
                 icmp_session_expire_time: _builtins.int,
                 tcp_session_expire_time: _builtins.int,
                 tcp_time_wait_time: _builtins.int,
                 udp_session_expire_time: _builtins.int):
        """
        :param _builtins.int icmp_session_expire_time: The ICMP session expiration time, in seconds.
        :param _builtins.int tcp_session_expire_time: The TCP session expiration time, in seconds.
        :param _builtins.int tcp_time_wait_time: The duration of TIME_WAIT state when TCP connection is closed, in seconds.
        :param _builtins.int udp_session_expire_time: The UDP session expiration time, in seconds.
        """
        pulumi.set(__self__, "icmp_session_expire_time", icmp_session_expire_time)
        pulumi.set(__self__, "tcp_session_expire_time", tcp_session_expire_time)
        pulumi.set(__self__, "tcp_time_wait_time", tcp_time_wait_time)
        pulumi.set(__self__, "udp_session_expire_time", udp_session_expire_time)

    @_builtins.property
    @pulumi.getter(name="icmpSessionExpireTime")
    def icmp_session_expire_time(self) -> _builtins.int:
        """
        The ICMP session expiration time, in seconds.
        """
        return pulumi.get(self, "icmp_session_expire_time")

    @_builtins.property
    @pulumi.getter(name="tcpSessionExpireTime")
    def tcp_session_expire_time(self) -> _builtins.int:
        """
        The TCP session expiration time, in seconds.
        """
        return pulumi.get(self, "tcp_session_expire_time")

    @_builtins.property
    @pulumi.getter(name="tcpTimeWaitTime")
    def tcp_time_wait_time(self) -> _builtins.int:
        """
        The duration of TIME_WAIT state when TCP connection is closed, in seconds.
        """
        return pulumi.get(self, "tcp_time_wait_time")

    @_builtins.property
    @pulumi.getter(name="udpSessionExpireTime")
    def udp_session_expire_time(self) -> _builtins.int:
        """
        The UDP session expiration time, in seconds.
        """
        return pulumi.get(self, "udp_session_expire_time")


@pulumi.output_type
class GetPrivateDnatRulesRuleResult(dict):
    def __init__(__self__, *,
                 backend_interface_id: _builtins.str,
                 backend_private_ip: _builtins.str,
                 backend_type: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 gateway_id: _builtins.str,
                 id: _builtins.str,
                 internal_service_port: _builtins.str,
                 protocol: _builtins.str,
                 status: _builtins.str,
                 transit_ip_id: _builtins.str,
                 transit_service_port: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str backend_interface_id: Specifies the network interface ID of the backend instance to which the
               private DNAT rule belongs.
        :param _builtins.str backend_private_ip: Specifies the private IP address of the backend instance to which the
               private DNAT rule belongs.
        :param _builtins.str backend_type: Specifies the type of the backend instance to which the private DNAT rules
               belong.
               The value can be one of the following:
               + **COMPUTE**: ECS instance.
               + **VIP**: VIP.
               + **ELB**: ELB loadbalancer.
               + **ELBv3**: The ver.3 ELB loadbalancer.
               + **CUSTOMIZE**: The custom backend IP address.
        :param _builtins.str created_at: The creation time of the private DNAT rule.
        :param _builtins.str description: Specifies the description of the private DNAT rule.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the private DNAT
               rules belong.
        :param _builtins.str gateway_id: Specifies the ID of the private NAT gateway to which the private DNAT rules
               belong.
        :param _builtins.str id: The ID of the private DNAT rule.
        :param _builtins.str internal_service_port: Specifies the port of the backend instance to which the private DNAT
               rule belongs.
        :param _builtins.str protocol: Specifies the protocol type of the private DNAT rules.
               The value can be one of the following:
               + **tcp**
               + **udp**
               + **any**
        :param _builtins.str status: The status of the private DNAT rule.
        :param _builtins.str transit_ip_id: Specifies the ID of the transit IP associated with the private DNAT rules.
        :param _builtins.str transit_service_port: Specifies the port of the transit IP associated with the private DNAT rule.
        :param _builtins.str updated_at: The latest update time of the private DNAT rule.
        """
        pulumi.set(__self__, "backend_interface_id", backend_interface_id)
        pulumi.set(__self__, "backend_private_ip", backend_private_ip)
        pulumi.set(__self__, "backend_type", backend_type)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "internal_service_port", internal_service_port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "transit_ip_id", transit_ip_id)
        pulumi.set(__self__, "transit_service_port", transit_service_port)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="backendInterfaceId")
    def backend_interface_id(self) -> _builtins.str:
        """
        Specifies the network interface ID of the backend instance to which the
        private DNAT rule belongs.
        """
        return pulumi.get(self, "backend_interface_id")

    @_builtins.property
    @pulumi.getter(name="backendPrivateIp")
    def backend_private_ip(self) -> _builtins.str:
        """
        Specifies the private IP address of the backend instance to which the
        private DNAT rule belongs.
        """
        return pulumi.get(self, "backend_private_ip")

    @_builtins.property
    @pulumi.getter(name="backendType")
    def backend_type(self) -> _builtins.str:
        """
        Specifies the type of the backend instance to which the private DNAT rules
        belong.
        The value can be one of the following:
        + **COMPUTE**: ECS instance.
        + **VIP**: VIP.
        + **ELB**: ELB loadbalancer.
        + **ELBv3**: The ver.3 ELB loadbalancer.
        + **CUSTOMIZE**: The custom backend IP address.
        """
        return pulumi.get(self, "backend_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the private DNAT rule.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the private DNAT rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the private DNAT
        rules belong.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> _builtins.str:
        """
        Specifies the ID of the private NAT gateway to which the private DNAT rules
        belong.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the private DNAT rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="internalServicePort")
    def internal_service_port(self) -> _builtins.str:
        """
        Specifies the port of the backend instance to which the private DNAT
        rule belongs.
        """
        return pulumi.get(self, "internal_service_port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol type of the private DNAT rules.
        The value can be one of the following:
        + **tcp**
        + **udp**
        + **any**
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the private DNAT rule.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="transitIpId")
    def transit_ip_id(self) -> _builtins.str:
        """
        Specifies the ID of the transit IP associated with the private DNAT rules.
        """
        return pulumi.get(self, "transit_ip_id")

    @_builtins.property
    @pulumi.getter(name="transitServicePort")
    def transit_service_port(self) -> _builtins.str:
        """
        Specifies the port of the transit IP associated with the private DNAT rule.
        """
        return pulumi.get(self, "transit_service_port")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the private DNAT rule.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetPrivateGatewayTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the tag.
        :param Sequence[_builtins.str] values: The list of the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The list of the tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPrivateGatewaysGatewayResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 ngport_ip_address: _builtins.str,
                 rule_max: _builtins.int,
                 spec: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the private NAT gateway.
        :param _builtins.str description: Specifies the description of the private NAT gateway.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the private NAT
               gateways belong.
        :param _builtins.str id: The ID of the private NAT gateway.
        :param _builtins.str name: Specifies the name of the private NAT gateway.
        :param _builtins.str ngport_ip_address: The IP address of the NG port of the private NAT gateway.
        :param _builtins.int rule_max: The maximum number of rules of the private NAT gateway.
        :param _builtins.str spec: Specifies the specification of the private NAT gateways.  
               The valid values are as follows:
               + **Small**: Small type, which supports up to `20` rules, `200 Mbit/s` bandwidth, `20,000` PPS and `2,000` SNAT
               connections.
               + **Medium**: Medium type, which supports up to `50` rules, `500 Mbit/s` bandwidth, `50,000` PPS and `5,000` SNAT
               connections.
               + **Large**: Large type, which supports up to `200` rules, `2 Gbit/s` bandwidth, `200,000` PPS and `20,000` SNAT
               connections.
               + **Extra-Large**: Extra-large type, which supports up to `500` rules, `5 Gbit/s` bandwidth, `500,000` PPS and
               `50,000` SNAT connections.
        :param _builtins.str status: Specifies the current status of the private NAT gateways.
               The valid values are as follows:
               + **ACTIVE**: The status of the private NAT gateway is normal operation.
               + **FROZEN**: The status of the private NAT gateway is frozen.
        :param _builtins.str subnet_id: Specifies the ID of the subnet to which the private NAT gateways belong.
        :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate the private NAT gateways.
        :param _builtins.str updated_at: The latest update time of the private NAT gateway.
        :param _builtins.str vpc_id: Specifies the ID of the VPC to which the private NAT gateways belong.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ngport_ip_address", ngport_ip_address)
        pulumi.set(__self__, "rule_max", rule_max)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the private NAT gateway.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the private NAT gateway.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the private NAT
        gateways belong.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the private NAT gateway.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the private NAT gateway.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ngportIpAddress")
    def ngport_ip_address(self) -> _builtins.str:
        """
        The IP address of the NG port of the private NAT gateway.
        """
        return pulumi.get(self, "ngport_ip_address")

    @_builtins.property
    @pulumi.getter(name="ruleMax")
    def rule_max(self) -> _builtins.int:
        """
        The maximum number of rules of the private NAT gateway.
        """
        return pulumi.get(self, "rule_max")

    @_builtins.property
    @pulumi.getter
    def spec(self) -> _builtins.str:
        """
        Specifies the specification of the private NAT gateways.  
        The valid values are as follows:
        + **Small**: Small type, which supports up to `20` rules, `200 Mbit/s` bandwidth, `20,000` PPS and `2,000` SNAT
        connections.
        + **Medium**: Medium type, which supports up to `50` rules, `500 Mbit/s` bandwidth, `50,000` PPS and `5,000` SNAT
        connections.
        + **Large**: Large type, which supports up to `200` rules, `2 Gbit/s` bandwidth, `200,000` PPS and `20,000` SNAT
        connections.
        + **Extra-Large**: Extra-large type, which supports up to `500` rules, `5 Gbit/s` bandwidth, `500,000` PPS and
        `50,000` SNAT connections.
        """
        return pulumi.get(self, "spec")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the current status of the private NAT gateways.
        The valid values are as follows:
        + **ACTIVE**: The status of the private NAT gateway is normal operation.
        + **FROZEN**: The status of the private NAT gateway is frozen.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the ID of the subnet to which the private NAT gateways belong.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the key/value pairs to associate the private NAT gateways.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the private NAT gateway.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the ID of the VPC to which the private NAT gateways belong.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetPrivateSnatRulesRuleResult(dict):
    def __init__(__self__, *,
                 cidr: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 gateway_id: _builtins.str,
                 id: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 transit_ip_address: _builtins.str,
                 transit_ip_associations: Sequence['outputs.GetPrivateSnatRulesRuleTransitIpAssociationResult'],
                 transit_ip_id: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str cidr: Specifies the CIDR block of the private SNAT rule.
        :param _builtins.str created_at: The creation time of the private SNAT rule.
        :param _builtins.str description: Specifies the description of the private SNAT rule.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the private SNAT
               rules belong.
        :param _builtins.str gateway_id: Specifies the ID of the private NAT gateway to which the private SNAT rules
               belong.
        :param _builtins.str id: The ID of the private SNAT rule.
        :param _builtins.str status: The status of the private SNAT rule.
        :param _builtins.str subnet_id: Specifies the ID of the subnet to which the private SNAT rule belongs.
        :param _builtins.str transit_ip_address: Specifies the IP address of the transit IP associated with the private
               SNAT rule.
        :param Sequence['GetPrivateSnatRulesRuleTransitIpAssociationArgs'] transit_ip_associations: The transit IP list associate with the private SNAT rule.
               The transit_ip_associations structure is documented below.
        :param _builtins.str transit_ip_id: Specifies the ID of the transit IP associated with the private SNAT rule.
        :param _builtins.str updated_at: The latest update time of the private SNAT rule.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "transit_ip_address", transit_ip_address)
        pulumi.set(__self__, "transit_ip_associations", transit_ip_associations)
        pulumi.set(__self__, "transit_ip_id", transit_ip_id)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        Specifies the CIDR block of the private SNAT rule.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the private SNAT rule.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the private SNAT rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the private SNAT
        rules belong.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> _builtins.str:
        """
        Specifies the ID of the private NAT gateway to which the private SNAT rules
        belong.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the private SNAT rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the private SNAT rule.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the ID of the subnet to which the private SNAT rule belongs.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="transitIpAddress")
    def transit_ip_address(self) -> _builtins.str:
        """
        Specifies the IP address of the transit IP associated with the private
        SNAT rule.
        """
        return pulumi.get(self, "transit_ip_address")

    @_builtins.property
    @pulumi.getter(name="transitIpAssociations")
    def transit_ip_associations(self) -> Sequence['outputs.GetPrivateSnatRulesRuleTransitIpAssociationResult']:
        """
        The transit IP list associate with the private SNAT rule.
        The transit_ip_associations structure is documented below.
        """
        return pulumi.get(self, "transit_ip_associations")

    @_builtins.property
    @pulumi.getter(name="transitIpId")
    def transit_ip_id(self) -> _builtins.str:
        """
        Specifies the ID of the transit IP associated with the private SNAT rule.
        """
        return pulumi.get(self, "transit_ip_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the private SNAT rule.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetPrivateSnatRulesRuleTransitIpAssociationResult(dict):
    def __init__(__self__, *,
                 transit_ip_address: _builtins.str,
                 transit_ip_id: _builtins.str):
        """
        :param _builtins.str transit_ip_address: Specifies the IP address of the transit IP associated with the private
               SNAT rule.
        :param _builtins.str transit_ip_id: Specifies the ID of the transit IP associated with the private SNAT rule.
        """
        pulumi.set(__self__, "transit_ip_address", transit_ip_address)
        pulumi.set(__self__, "transit_ip_id", transit_ip_id)

    @_builtins.property
    @pulumi.getter(name="transitIpAddress")
    def transit_ip_address(self) -> _builtins.str:
        """
        Specifies the IP address of the transit IP associated with the private
        SNAT rule.
        """
        return pulumi.get(self, "transit_ip_address")

    @_builtins.property
    @pulumi.getter(name="transitIpId")
    def transit_ip_id(self) -> _builtins.str:
        """
        Specifies the ID of the transit IP associated with the private SNAT rule.
        """
        return pulumi.get(self, "transit_ip_id")


@pulumi.output_type
class GetPrivateTransitIpTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the tag.
        :param Sequence[_builtins.str] values: The list of the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The list of the tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPrivateTransitIpsTransitIpResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 gateway_id: _builtins.str,
                 id: _builtins.str,
                 ip_address: _builtins.str,
                 network_interface_id: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the transit IP.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the transit
               IPs belong.
        :param _builtins.str gateway_id: Specifies the ID of the private NAT gateway to which the transit IP belongs.
        :param _builtins.str id: The ID of the transit IP.
        :param _builtins.str ip_address: Specifies the IP address of the transit IP.
        :param _builtins.str network_interface_id: Specifies the network interface ID of the transit IP for private NAT.
        :param _builtins.str status: The status of the transit IP.
        :param _builtins.str subnet_id: Specifies the ID of the subnet to which the transit IPs belong.
        :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate the transit IPs used for filter.
        :param _builtins.str updated_at: The latest update time of the transit IP.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the transit IP.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the transit
        IPs belong.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> _builtins.str:
        """
        Specifies the ID of the private NAT gateway to which the transit IP belongs.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the transit IP.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Specifies the IP address of the transit IP.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> _builtins.str:
        """
        Specifies the network interface ID of the transit IP for private NAT.
        """
        return pulumi.get(self, "network_interface_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the transit IP.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the ID of the subnet to which the transit IPs belong.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the key/value pairs to associate the transit IPs used for filter.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the transit IP.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetSnatRulesRuleResult(dict):
    def __init__(__self__, *,
                 cidr: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 floating_ip_address: _builtins.str,
                 floating_ip_id: _builtins.str,
                 freezed_ip_address: _builtins.str,
                 gateway_id: _builtins.str,
                 global_eip_address: _builtins.str,
                 global_eip_id: _builtins.str,
                 id: _builtins.str,
                 source_type: _builtins.int,
                 status: _builtins.str,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str cidr: Specifies the CIDR block to which the SNAT rule belongs.
        :param _builtins.str created_at: Specifies the creation time of the SNAT rule.
               The format is **yyyy-mm-dd hh:mm:ss.SSSSSS**. e.g. **2024-12-20 15:03:04.000000**.
        :param _builtins.str description: Specifies the description of the SNAT rule.
        :param _builtins.str floating_ip_address: Specifies the IP of the EIP associated with SNAT rule.
        :param _builtins.str floating_ip_id: Specifies the ID of the EIP associated with SNAT rule.
        :param _builtins.str freezed_ip_address: The IP of the frozen global EIP associated with SNAT rule.
        :param _builtins.str gateway_id: Specifies the ID of the NAT gateway to which the SNAT rule belongs.
        :param _builtins.str global_eip_address: Specifies the IP of the global EIP associated with SNAT rule.
        :param _builtins.str global_eip_id: Specifies the ID of the global EIP associated with SNAT rule.
        :param _builtins.str id: The ID of the SNAT rule.
        :param _builtins.int source_type: Specifies the source type of the SNAT rule.
               The value can be one of the following:
               + **0** : The use scenario is VPC.
               + **1** : The use scenario is DC.
        :param _builtins.str status: Specifies the status of the SNAT rule.
               The value can be one of the following:
               + **ACTIVE**: The SNAT rule is available.
               + **EIP_FREEZED**: The global EIP is frozen associated with SNAT rule.
               + **INACTIVE**: The SNAT rule is unavailable.
        :param _builtins.str subnet_id: Specifies the ID of the subnet to which the SNAT rule belongs.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "floating_ip_address", floating_ip_address)
        pulumi.set(__self__, "floating_ip_id", floating_ip_id)
        pulumi.set(__self__, "freezed_ip_address", freezed_ip_address)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "global_eip_address", global_eip_address)
        pulumi.set(__self__, "global_eip_id", global_eip_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        Specifies the CIDR block to which the SNAT rule belongs.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Specifies the creation time of the SNAT rule.
        The format is **yyyy-mm-dd hh:mm:ss.SSSSSS**. e.g. **2024-12-20 15:03:04.000000**.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the SNAT rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="floatingIpAddress")
    def floating_ip_address(self) -> _builtins.str:
        """
        Specifies the IP of the EIP associated with SNAT rule.
        """
        return pulumi.get(self, "floating_ip_address")

    @_builtins.property
    @pulumi.getter(name="floatingIpId")
    def floating_ip_id(self) -> _builtins.str:
        """
        Specifies the ID of the EIP associated with SNAT rule.
        """
        return pulumi.get(self, "floating_ip_id")

    @_builtins.property
    @pulumi.getter(name="freezedIpAddress")
    def freezed_ip_address(self) -> _builtins.str:
        """
        The IP of the frozen global EIP associated with SNAT rule.
        """
        return pulumi.get(self, "freezed_ip_address")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> _builtins.str:
        """
        Specifies the ID of the NAT gateway to which the SNAT rule belongs.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="globalEipAddress")
    def global_eip_address(self) -> _builtins.str:
        """
        Specifies the IP of the global EIP associated with SNAT rule.
        """
        return pulumi.get(self, "global_eip_address")

    @_builtins.property
    @pulumi.getter(name="globalEipId")
    def global_eip_id(self) -> _builtins.str:
        """
        Specifies the ID of the global EIP associated with SNAT rule.
        """
        return pulumi.get(self, "global_eip_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the SNAT rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> _builtins.int:
        """
        Specifies the source type of the SNAT rule.
        The value can be one of the following:
        + **0** : The use scenario is VPC.
        + **1** : The use scenario is DC.
        """
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the SNAT rule.
        The value can be one of the following:
        + **ACTIVE**: The SNAT rule is available.
        + **EIP_FREEZED**: The global EIP is frozen associated with SNAT rule.
        + **INACTIVE**: The SNAT rule is unavailable.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the ID of the subnet to which the SNAT rule belongs.
        """
        return pulumi.get(self, "subnet_id")


