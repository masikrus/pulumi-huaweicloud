# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PrivateSnatRuleArgs', 'PrivateSnatRule']

@pulumi.input_type
class PrivateSnatRuleArgs:
    def __init__(__self__, *,
                 gateway_id: pulumi.Input[_builtins.str],
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_ip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a PrivateSnatRule resource.
        :param pulumi.Input[_builtins.str] gateway_id: Specifies the private NAT gateway ID to which the SNAT rule belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] cidr: Specifies the CIDR block of the match rule.  
               Changing this will create a new resource.
               Exactly one of `cidr` and `subnet_id` must be set.
               
               > SNAT rules under the same private NAT gateway cannot have the same CIDR, but they can be proper subsets of other
               CIDRs.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the SNAT rule, which contain maximum of `255`
               characters, and angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the SNAT rule is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID of the match rule.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] transit_ip_id: The ID of the transit IP associated with the private SNAT rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] transit_ip_ids: Specifies the IDs of the transit IPs associated with the private SNAT rule.
               The maximum of `20` transit IPs can be bound, and the transit IPs must belong the same transit subnet.
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if transit_ip_id is not None:
            pulumi.set(__self__, "transit_ip_id", transit_ip_id)
        if transit_ip_ids is not None:
            pulumi.set(__self__, "transit_ip_ids", transit_ip_ids)

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the private NAT gateway ID to which the SNAT rule belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gateway_id", value)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CIDR block of the match rule.  
        Changing this will create a new resource.
        Exactly one of `cidr` and `subnet_id` must be set.

        > SNAT rules under the same private NAT gateway cannot have the same CIDR, but they can be proper subsets of other
        CIDRs.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the SNAT rule, which contain maximum of `255`
        characters, and angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the SNAT rule is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subnet ID of the match rule.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="transitIpId")
    def transit_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the transit IP associated with the private SNAT rule.
        """
        return pulumi.get(self, "transit_ip_id")

    @transit_ip_id.setter
    def transit_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transit_ip_id", value)

    @_builtins.property
    @pulumi.getter(name="transitIpIds")
    def transit_ip_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the IDs of the transit IPs associated with the private SNAT rule.
        The maximum of `20` transit IPs can be bound, and the transit IPs must belong the same transit subnet.
        """
        return pulumi.get(self, "transit_ip_ids")

    @transit_ip_ids.setter
    def transit_ip_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "transit_ip_ids", value)


@pulumi.input_type
class _PrivateSnatRuleState:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_ip_associations: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateSnatRuleTransitIpAssociationArgs']]]] = None,
                 transit_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_ip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PrivateSnatRule resources.
        :param pulumi.Input[_builtins.str] cidr: Specifies the CIDR block of the match rule.  
               Changing this will create a new resource.
               Exactly one of `cidr` and `subnet_id` must be set.
               
               > SNAT rules under the same private NAT gateway cannot have the same CIDR, but they can be proper subsets of other
               CIDRs.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the SNAT rule.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the SNAT rule, which contain maximum of `255`
               characters, and angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The ID of the enterprise project to which the private SNAT rule belongs.
        :param pulumi.Input[_builtins.str] gateway_id: Specifies the private NAT gateway ID to which the SNAT rule belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the SNAT rule is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID of the match rule.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] transit_ip_address: The IP address of the transit IP associated with the private SNAT rule.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateSnatRuleTransitIpAssociationArgs']]] transit_ip_associations: The transit IP list associate with the private SNAT rule.
               The transit_ip_associations structure is documented below.
        :param pulumi.Input[_builtins.str] transit_ip_id: The ID of the transit IP associated with the private SNAT rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] transit_ip_ids: Specifies the IDs of the transit IPs associated with the private SNAT rule.
               The maximum of `20` transit IPs can be bound, and the transit IPs must belong the same transit subnet.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the SNAT rule.
        """
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if transit_ip_address is not None:
            pulumi.set(__self__, "transit_ip_address", transit_ip_address)
        if transit_ip_associations is not None:
            pulumi.set(__self__, "transit_ip_associations", transit_ip_associations)
        if transit_ip_id is not None:
            pulumi.set(__self__, "transit_ip_id", transit_ip_id)
        if transit_ip_ids is not None:
            pulumi.set(__self__, "transit_ip_ids", transit_ip_ids)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CIDR block of the match rule.  
        Changing this will create a new resource.
        Exactly one of `cidr` and `subnet_id` must be set.

        > SNAT rules under the same private NAT gateway cannot have the same CIDR, but they can be proper subsets of other
        CIDRs.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the SNAT rule.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the SNAT rule, which contain maximum of `255`
        characters, and angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the enterprise project to which the private SNAT rule belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private NAT gateway ID to which the SNAT rule belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the SNAT rule is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subnet ID of the match rule.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="transitIpAddress")
    def transit_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP address of the transit IP associated with the private SNAT rule.
        """
        return pulumi.get(self, "transit_ip_address")

    @transit_ip_address.setter
    def transit_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transit_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="transitIpAssociations")
    def transit_ip_associations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateSnatRuleTransitIpAssociationArgs']]]]:
        """
        The transit IP list associate with the private SNAT rule.
        The transit_ip_associations structure is documented below.
        """
        return pulumi.get(self, "transit_ip_associations")

    @transit_ip_associations.setter
    def transit_ip_associations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateSnatRuleTransitIpAssociationArgs']]]]):
        pulumi.set(self, "transit_ip_associations", value)

    @_builtins.property
    @pulumi.getter(name="transitIpId")
    def transit_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the transit IP associated with the private SNAT rule.
        """
        return pulumi.get(self, "transit_ip_id")

    @transit_ip_id.setter
    def transit_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transit_ip_id", value)

    @_builtins.property
    @pulumi.getter(name="transitIpIds")
    def transit_ip_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the IDs of the transit IPs associated with the private SNAT rule.
        The maximum of `20` transit IPs can be bound, and the transit IPs must belong the same transit subnet.
        """
        return pulumi.get(self, "transit_ip_ids")

    @transit_ip_ids.setter
    def transit_ip_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "transit_ip_ids", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the SNAT rule.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Nat/privateSnatRule:PrivateSnatRule")
class PrivateSnatRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_ip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages an SNAT rule resource of the **private** NAT within HuaweiCloud.

        ## Example Usage

        ### Create an SNAT rule via subnet ID

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        gateway_id = config.require_object("gatewayId")
        transit_ip_id = config.require_object("transitIpId")
        subnet_id = config.require_object("subnetId")
        test = huaweicloud.nat.PrivateSnatRule("test",
            gateway_id=gateway_id,
            transit_ip_id=transit_ip_id,
            subnet_id=subnet_id)
        ```

        ### Create an SNAT rule via CIDR

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        gateway_id = config.require_object("gatewayId")
        transit_ip_id = config.require_object("transitIpId")
        cidr_block = config.require_object("cidrBlock")
        test = huaweicloud.nat.PrivateSnatRule("test",
            gateway_id=gateway_id,
            transit_ip_id=transit_ip_id,
            cidr=cidr_block)
        ```

        ## Import

        The private SNAT rule can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Nat/privateSnatRule:PrivateSnatRule test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `transit_ip_ids`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_nat_private_snat_rule" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              transit_ip_ids,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cidr: Specifies the CIDR block of the match rule.  
               Changing this will create a new resource.
               Exactly one of `cidr` and `subnet_id` must be set.
               
               > SNAT rules under the same private NAT gateway cannot have the same CIDR, but they can be proper subsets of other
               CIDRs.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the SNAT rule, which contain maximum of `255`
               characters, and angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] gateway_id: Specifies the private NAT gateway ID to which the SNAT rule belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the SNAT rule is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID of the match rule.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] transit_ip_id: The ID of the transit IP associated with the private SNAT rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] transit_ip_ids: Specifies the IDs of the transit IPs associated with the private SNAT rule.
               The maximum of `20` transit IPs can be bound, and the transit IPs must belong the same transit subnet.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrivateSnatRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an SNAT rule resource of the **private** NAT within HuaweiCloud.

        ## Example Usage

        ### Create an SNAT rule via subnet ID

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        gateway_id = config.require_object("gatewayId")
        transit_ip_id = config.require_object("transitIpId")
        subnet_id = config.require_object("subnetId")
        test = huaweicloud.nat.PrivateSnatRule("test",
            gateway_id=gateway_id,
            transit_ip_id=transit_ip_id,
            subnet_id=subnet_id)
        ```

        ### Create an SNAT rule via CIDR

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        gateway_id = config.require_object("gatewayId")
        transit_ip_id = config.require_object("transitIpId")
        cidr_block = config.require_object("cidrBlock")
        test = huaweicloud.nat.PrivateSnatRule("test",
            gateway_id=gateway_id,
            transit_ip_id=transit_ip_id,
            cidr=cidr_block)
        ```

        ## Import

        The private SNAT rule can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Nat/privateSnatRule:PrivateSnatRule test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `transit_ip_ids`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_nat_private_snat_rule" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              transit_ip_ids,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param PrivateSnatRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrivateSnatRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_ip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrivateSnatRuleArgs.__new__(PrivateSnatRuleArgs)

            __props__.__dict__["cidr"] = cidr
            __props__.__dict__["description"] = description
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["region"] = region
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["transit_ip_id"] = transit_ip_id
            __props__.__dict__["transit_ip_ids"] = transit_ip_ids
            __props__.__dict__["created_at"] = None
            __props__.__dict__["enterprise_project_id"] = None
            __props__.__dict__["transit_ip_address"] = None
            __props__.__dict__["transit_ip_associations"] = None
            __props__.__dict__["updated_at"] = None
        super(PrivateSnatRule, __self__).__init__(
            'huaweicloud:Nat/privateSnatRule:PrivateSnatRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            transit_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            transit_ip_associations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateSnatRuleTransitIpAssociationArgs', 'PrivateSnatRuleTransitIpAssociationArgsDict']]]]] = None,
            transit_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
            transit_ip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'PrivateSnatRule':
        """
        Get an existing PrivateSnatRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cidr: Specifies the CIDR block of the match rule.  
               Changing this will create a new resource.
               Exactly one of `cidr` and `subnet_id` must be set.
               
               > SNAT rules under the same private NAT gateway cannot have the same CIDR, but they can be proper subsets of other
               CIDRs.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the SNAT rule.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the SNAT rule, which contain maximum of `255`
               characters, and angle brackets (< and >) are not allowed.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The ID of the enterprise project to which the private SNAT rule belongs.
        :param pulumi.Input[_builtins.str] gateway_id: Specifies the private NAT gateway ID to which the SNAT rule belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the SNAT rule is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the subnet ID of the match rule.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] transit_ip_address: The IP address of the transit IP associated with the private SNAT rule.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PrivateSnatRuleTransitIpAssociationArgs', 'PrivateSnatRuleTransitIpAssociationArgsDict']]]] transit_ip_associations: The transit IP list associate with the private SNAT rule.
               The transit_ip_associations structure is documented below.
        :param pulumi.Input[_builtins.str] transit_ip_id: The ID of the transit IP associated with the private SNAT rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] transit_ip_ids: Specifies the IDs of the transit IPs associated with the private SNAT rule.
               The maximum of `20` transit IPs can be bound, and the transit IPs must belong the same transit subnet.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the SNAT rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PrivateSnatRuleState.__new__(_PrivateSnatRuleState)

        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["region"] = region
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["transit_ip_address"] = transit_ip_address
        __props__.__dict__["transit_ip_associations"] = transit_ip_associations
        __props__.__dict__["transit_ip_id"] = transit_ip_id
        __props__.__dict__["transit_ip_ids"] = transit_ip_ids
        __props__.__dict__["updated_at"] = updated_at
        return PrivateSnatRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CIDR block of the match rule.  
        Changing this will create a new resource.
        Exactly one of `cidr` and `subnet_id` must be set.

        > SNAT rules under the same private NAT gateway cannot have the same CIDR, but they can be proper subsets of other
        CIDRs.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the SNAT rule.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the SNAT rule, which contain maximum of `255`
        characters, and angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the enterprise project to which the private SNAT rule belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the private NAT gateway ID to which the SNAT rule belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the SNAT rule is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the subnet ID of the match rule.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="transitIpAddress")
    def transit_ip_address(self) -> pulumi.Output[_builtins.str]:
        """
        The IP address of the transit IP associated with the private SNAT rule.
        """
        return pulumi.get(self, "transit_ip_address")

    @_builtins.property
    @pulumi.getter(name="transitIpAssociations")
    def transit_ip_associations(self) -> pulumi.Output[Sequence['outputs.PrivateSnatRuleTransitIpAssociation']]:
        """
        The transit IP list associate with the private SNAT rule.
        The transit_ip_associations structure is documented below.
        """
        return pulumi.get(self, "transit_ip_associations")

    @_builtins.property
    @pulumi.getter(name="transitIpId")
    def transit_ip_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the transit IP associated with the private SNAT rule.
        """
        return pulumi.get(self, "transit_ip_id")

    @_builtins.property
    @pulumi.getter(name="transitIpIds")
    def transit_ip_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the IDs of the transit IPs associated with the private SNAT rule.
        The maximum of `20` transit IPs can be bound, and the transit IPs must belong the same transit subnet.
        """
        return pulumi.get(self, "transit_ip_ids")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the SNAT rule.
        """
        return pulumi.get(self, "updated_at")

