# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPrivateTransitIpsResult',
    'AwaitableGetPrivateTransitIpsResult',
    'get_private_transit_ips',
    'get_private_transit_ips_output',
]

@pulumi.output_type
class GetPrivateTransitIpsResult:
    """
    A collection of values returned by getPrivateTransitIps.
    """
    def __init__(__self__, enterprise_project_id=None, gateway_id=None, id=None, ip_address=None, network_interface_id=None, region=None, subnet_id=None, tags=None, transit_ip_id=None, transit_ips=None, transit_subnet_ids=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if network_interface_id and not isinstance(network_interface_id, str):
            raise TypeError("Expected argument 'network_interface_id' to be a str")
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if transit_ip_id and not isinstance(transit_ip_id, str):
            raise TypeError("Expected argument 'transit_ip_id' to be a str")
        pulumi.set(__self__, "transit_ip_id", transit_ip_id)
        if transit_ips and not isinstance(transit_ips, list):
            raise TypeError("Expected argument 'transit_ips' to be a list")
        pulumi.set(__self__, "transit_ips", transit_ips)
        if transit_subnet_ids and not isinstance(transit_subnet_ids, list):
            raise TypeError("Expected argument 'transit_subnet_ids' to be a list")
        pulumi.set(__self__, "transit_subnet_ids", transit_subnet_ids)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project to which the transit IP belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[_builtins.str]:
        """
        The ID of the private NAT gateway to which the transit IP belongs.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The IP address of the transit IP.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[_builtins.str]:
        """
        The network interface ID of the transit IP for private NAT.
        """
        return pulumi.get(self, "network_interface_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        The ID of the subnet to which the transit IP belongs.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The key/value pairs to associate with the transit IP.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="transitIpId")
    def transit_ip_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "transit_ip_id")

    @_builtins.property
    @pulumi.getter(name="transitIps")
    def transit_ips(self) -> Sequence['outputs.GetPrivateTransitIpsTransitIpResult']:
        """
        The list ot the transit IPs.
        The transit_ips structure is documented below.
        """
        return pulumi.get(self, "transit_ips")

    @_builtins.property
    @pulumi.getter(name="transitSubnetIds")
    def transit_subnet_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "transit_subnet_ids")


class AwaitableGetPrivateTransitIpsResult(GetPrivateTransitIpsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateTransitIpsResult(
            enterprise_project_id=self.enterprise_project_id,
            gateway_id=self.gateway_id,
            id=self.id,
            ip_address=self.ip_address,
            network_interface_id=self.network_interface_id,
            region=self.region,
            subnet_id=self.subnet_id,
            tags=self.tags,
            transit_ip_id=self.transit_ip_id,
            transit_ips=self.transit_ips,
            transit_subnet_ids=self.transit_subnet_ids)


def get_private_transit_ips(enterprise_project_id: Optional[_builtins.str] = None,
                            gateway_id: Optional[_builtins.str] = None,
                            ip_address: Optional[_builtins.str] = None,
                            network_interface_id: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            subnet_id: Optional[_builtins.str] = None,
                            tags: Optional[Mapping[str, _builtins.str]] = None,
                            transit_ip_id: Optional[_builtins.str] = None,
                            transit_subnet_ids: Optional[Sequence[_builtins.str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateTransitIpsResult:
    """
    Use this data source to get the list of transit IPs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    ip_address = config.require_object("ipAddress")
    test = huaweicloud.Nat.get_private_transit_ips(ip_address=ip_address)
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the transit
           IPs belong.
    :param _builtins.str gateway_id: Specifies the ID of the private NAT gateway to which the transit IP belongs.
    :param _builtins.str ip_address: Specifies the IP address of the transit IP.
    :param _builtins.str network_interface_id: Specifies the network interface ID of the transit IP for private NAT.
    :param _builtins.str region: Specifies the region where the transit IPs are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str subnet_id: Specifies the ID of the subnet to which the transit IPs belong.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate the transit IPs used for filter.
    :param _builtins.str transit_ip_id: Specifies the ID of the transit IP.
    :param Sequence[_builtins.str] transit_subnet_ids: Specifies the ID of the transit subnet.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['gatewayId'] = gateway_id
    __args__['ipAddress'] = ip_address
    __args__['networkInterfaceId'] = network_interface_id
    __args__['region'] = region
    __args__['subnetId'] = subnet_id
    __args__['tags'] = tags
    __args__['transitIpId'] = transit_ip_id
    __args__['transitSubnetIds'] = transit_subnet_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Nat/getPrivateTransitIps:getPrivateTransitIps', __args__, opts=opts, typ=GetPrivateTransitIpsResult).value

    return AwaitableGetPrivateTransitIpsResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        id=pulumi.get(__ret__, 'id'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        network_interface_id=pulumi.get(__ret__, 'network_interface_id'),
        region=pulumi.get(__ret__, 'region'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        tags=pulumi.get(__ret__, 'tags'),
        transit_ip_id=pulumi.get(__ret__, 'transit_ip_id'),
        transit_ips=pulumi.get(__ret__, 'transit_ips'),
        transit_subnet_ids=pulumi.get(__ret__, 'transit_subnet_ids'))
def get_private_transit_ips_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   gateway_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   ip_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   network_interface_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   subnet_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                                   transit_ip_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   transit_subnet_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPrivateTransitIpsResult]:
    """
    Use this data source to get the list of transit IPs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    ip_address = config.require_object("ipAddress")
    test = huaweicloud.Nat.get_private_transit_ips(ip_address=ip_address)
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the transit
           IPs belong.
    :param _builtins.str gateway_id: Specifies the ID of the private NAT gateway to which the transit IP belongs.
    :param _builtins.str ip_address: Specifies the IP address of the transit IP.
    :param _builtins.str network_interface_id: Specifies the network interface ID of the transit IP for private NAT.
    :param _builtins.str region: Specifies the region where the transit IPs are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str subnet_id: Specifies the ID of the subnet to which the transit IPs belong.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate the transit IPs used for filter.
    :param _builtins.str transit_ip_id: Specifies the ID of the transit IP.
    :param Sequence[_builtins.str] transit_subnet_ids: Specifies the ID of the transit subnet.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['gatewayId'] = gateway_id
    __args__['ipAddress'] = ip_address
    __args__['networkInterfaceId'] = network_interface_id
    __args__['region'] = region
    __args__['subnetId'] = subnet_id
    __args__['tags'] = tags
    __args__['transitIpId'] = transit_ip_id
    __args__['transitSubnetIds'] = transit_subnet_ids
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Nat/getPrivateTransitIps:getPrivateTransitIps', __args__, opts=opts, typ=GetPrivateTransitIpsResult)
    return __ret__.apply(lambda __response__: GetPrivateTransitIpsResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        gateway_id=pulumi.get(__response__, 'gateway_id'),
        id=pulumi.get(__response__, 'id'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        network_interface_id=pulumi.get(__response__, 'network_interface_id'),
        region=pulumi.get(__response__, 'region'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        tags=pulumi.get(__response__, 'tags'),
        transit_ip_id=pulumi.get(__response__, 'transit_ip_id'),
        transit_ips=pulumi.get(__response__, 'transit_ips'),
        transit_subnet_ids=pulumi.get(__response__, 'transit_subnet_ids')))
