# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSnatRulesResult',
    'AwaitableGetSnatRulesResult',
    'get_snat_rules',
    'get_snat_rules_output',
]

@pulumi.output_type
class GetSnatRulesResult:
    """
    A collection of values returned by getSnatRules.
    """
    def __init__(__self__, cidr=None, created_at=None, description=None, floating_ip_address=None, floating_ip_id=None, gateway_id=None, global_eip_address=None, global_eip_id=None, id=None, region=None, rule_id=None, rules=None, source_type=None, status=None, subnet_id=None):
        if cidr and not isinstance(cidr, str):
            raise TypeError("Expected argument 'cidr' to be a str")
        pulumi.set(__self__, "cidr", cidr)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if floating_ip_address and not isinstance(floating_ip_address, str):
            raise TypeError("Expected argument 'floating_ip_address' to be a str")
        pulumi.set(__self__, "floating_ip_address", floating_ip_address)
        if floating_ip_id and not isinstance(floating_ip_id, str):
            raise TypeError("Expected argument 'floating_ip_id' to be a str")
        pulumi.set(__self__, "floating_ip_id", floating_ip_id)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if global_eip_address and not isinstance(global_eip_address, str):
            raise TypeError("Expected argument 'global_eip_address' to be a str")
        pulumi.set(__self__, "global_eip_address", global_eip_address)
        if global_eip_id and not isinstance(global_eip_id, str):
            raise TypeError("Expected argument 'global_eip_id' to be a str")
        pulumi.set(__self__, "global_eip_id", global_eip_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if source_type and not isinstance(source_type, str):
            raise TypeError("Expected argument 'source_type' to be a str")
        pulumi.set(__self__, "source_type", source_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> Optional[_builtins.str]:
        """
        The CIDR block to which the SNAT rule belongs.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The creation time of the SNAT rule.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the SNAT rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="floatingIpAddress")
    def floating_ip_address(self) -> Optional[_builtins.str]:
        """
        The IPs of the EIP associated with SNAT rule, multiple EIP IPs separate by commas.
        e.g. **IP1,IP2**.
        """
        return pulumi.get(self, "floating_ip_address")

    @_builtins.property
    @pulumi.getter(name="floatingIpId")
    def floating_ip_id(self) -> Optional[_builtins.str]:
        """
        The IDs of the EIP associated with SNAT rule, multiple EIP IDs separate by commas.
        e.g. **ID1,ID2**.
        """
        return pulumi.get(self, "floating_ip_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[_builtins.str]:
        """
        The ID of the NAT gateway to which the SNAT rule belongs.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="globalEipAddress")
    def global_eip_address(self) -> Optional[_builtins.str]:
        """
        The IPs of the global EIP associated with SNAT rule, multiple global EIP IPs separate by commas.
        e.g. **IP1,IP2**.
        """
        return pulumi.get(self, "global_eip_address")

    @_builtins.property
    @pulumi.getter(name="globalEipId")
    def global_eip_id(self) -> Optional[_builtins.str]:
        """
        The IDs of the global EIP associated with SNAT rule, multiple global EIP IDs separate by commas.
        e.g. **ID1,ID2**.
        """
        return pulumi.get(self, "global_eip_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetSnatRulesRuleResult']:
        """
        The list of the SNAT rules.
        The rules structure is documented below.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[_builtins.str]:
        """
        The source type of the SNAT rule.
        """
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the SNAT rule.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        The ID of the subnet to which the SNAT rule belongs.
        """
        return pulumi.get(self, "subnet_id")


class AwaitableGetSnatRulesResult(GetSnatRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnatRulesResult(
            cidr=self.cidr,
            created_at=self.created_at,
            description=self.description,
            floating_ip_address=self.floating_ip_address,
            floating_ip_id=self.floating_ip_id,
            gateway_id=self.gateway_id,
            global_eip_address=self.global_eip_address,
            global_eip_id=self.global_eip_id,
            id=self.id,
            region=self.region,
            rule_id=self.rule_id,
            rules=self.rules,
            source_type=self.source_type,
            status=self.status,
            subnet_id=self.subnet_id)


def get_snat_rules(cidr: Optional[_builtins.str] = None,
                   created_at: Optional[_builtins.str] = None,
                   description: Optional[_builtins.str] = None,
                   floating_ip_address: Optional[_builtins.str] = None,
                   floating_ip_id: Optional[_builtins.str] = None,
                   gateway_id: Optional[_builtins.str] = None,
                   global_eip_address: Optional[_builtins.str] = None,
                   global_eip_id: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   rule_id: Optional[_builtins.str] = None,
                   source_type: Optional[_builtins.str] = None,
                   status: Optional[_builtins.str] = None,
                   subnet_id: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSnatRulesResult:
    """
    Use this data source to get the list of SNAT rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    rule_id = config.require_object("ruleId")
    test = huaweicloud.Nat.get_snat_rules(rule_id=rule_id)
    ```


    :param _builtins.str cidr: Specifies the CIDR block to which the SNAT rule belongs.
    :param _builtins.str created_at: Specifies the creation time of the SNAT rule.
           The format is **yyyy-mm-dd hh:mm:ss.SSSSSS**. e.g. **2024-12-20 15:03:04.000000**.
    :param _builtins.str description: Specifies the description of the SNAT rule.
    :param _builtins.str floating_ip_address: Specifies the IP of the EIP associated with SNAT rule.
    :param _builtins.str floating_ip_id: Specifies the ID of the EIP associated with SNAT rule.
    :param _builtins.str gateway_id: Specifies the ID of the NAT gateway to which the SNAT rule belongs.
    :param _builtins.str global_eip_address: Specifies the IP of the global EIP associated with SNAT rule.
    :param _builtins.str global_eip_id: Specifies the ID of the global EIP associated with SNAT rule.
    :param _builtins.str region: Specifies the region where the SNAT rules are located.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the SNAT rule.
    :param _builtins.str source_type: Specifies the source type of the SNAT rule.
           The value can be one of the following:
           + **0** : The use scenario is VPC.
           + **1** : The use scenario is DC.
    :param _builtins.str status: Specifies the status of the SNAT rule.
           The value can be one of the following:
           + **ACTIVE**: The SNAT rule is available.
           + **EIP_FREEZED**: The global EIP is frozen associated with SNAT rule.
           + **INACTIVE**: The SNAT rule is unavailable.
    :param _builtins.str subnet_id: Specifies the ID of the subnet to which the SNAT rule belongs.
    """
    __args__ = dict()
    __args__['cidr'] = cidr
    __args__['createdAt'] = created_at
    __args__['description'] = description
    __args__['floatingIpAddress'] = floating_ip_address
    __args__['floatingIpId'] = floating_ip_id
    __args__['gatewayId'] = gateway_id
    __args__['globalEipAddress'] = global_eip_address
    __args__['globalEipId'] = global_eip_id
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['sourceType'] = source_type
    __args__['status'] = status
    __args__['subnetId'] = subnet_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Nat/getSnatRules:getSnatRules', __args__, opts=opts, typ=GetSnatRulesResult).value

    return AwaitableGetSnatRulesResult(
        cidr=pulumi.get(__ret__, 'cidr'),
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        floating_ip_address=pulumi.get(__ret__, 'floating_ip_address'),
        floating_ip_id=pulumi.get(__ret__, 'floating_ip_id'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        global_eip_address=pulumi.get(__ret__, 'global_eip_address'),
        global_eip_id=pulumi.get(__ret__, 'global_eip_id'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        rules=pulumi.get(__ret__, 'rules'),
        source_type=pulumi.get(__ret__, 'source_type'),
        status=pulumi.get(__ret__, 'status'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'))
def get_snat_rules_output(cidr: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          created_at: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          floating_ip_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          floating_ip_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          gateway_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          global_eip_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          global_eip_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          rule_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          source_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          subnet_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSnatRulesResult]:
    """
    Use this data source to get the list of SNAT rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    rule_id = config.require_object("ruleId")
    test = huaweicloud.Nat.get_snat_rules(rule_id=rule_id)
    ```


    :param _builtins.str cidr: Specifies the CIDR block to which the SNAT rule belongs.
    :param _builtins.str created_at: Specifies the creation time of the SNAT rule.
           The format is **yyyy-mm-dd hh:mm:ss.SSSSSS**. e.g. **2024-12-20 15:03:04.000000**.
    :param _builtins.str description: Specifies the description of the SNAT rule.
    :param _builtins.str floating_ip_address: Specifies the IP of the EIP associated with SNAT rule.
    :param _builtins.str floating_ip_id: Specifies the ID of the EIP associated with SNAT rule.
    :param _builtins.str gateway_id: Specifies the ID of the NAT gateway to which the SNAT rule belongs.
    :param _builtins.str global_eip_address: Specifies the IP of the global EIP associated with SNAT rule.
    :param _builtins.str global_eip_id: Specifies the ID of the global EIP associated with SNAT rule.
    :param _builtins.str region: Specifies the region where the SNAT rules are located.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the SNAT rule.
    :param _builtins.str source_type: Specifies the source type of the SNAT rule.
           The value can be one of the following:
           + **0** : The use scenario is VPC.
           + **1** : The use scenario is DC.
    :param _builtins.str status: Specifies the status of the SNAT rule.
           The value can be one of the following:
           + **ACTIVE**: The SNAT rule is available.
           + **EIP_FREEZED**: The global EIP is frozen associated with SNAT rule.
           + **INACTIVE**: The SNAT rule is unavailable.
    :param _builtins.str subnet_id: Specifies the ID of the subnet to which the SNAT rule belongs.
    """
    __args__ = dict()
    __args__['cidr'] = cidr
    __args__['createdAt'] = created_at
    __args__['description'] = description
    __args__['floatingIpAddress'] = floating_ip_address
    __args__['floatingIpId'] = floating_ip_id
    __args__['gatewayId'] = gateway_id
    __args__['globalEipAddress'] = global_eip_address
    __args__['globalEipId'] = global_eip_id
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['sourceType'] = source_type
    __args__['status'] = status
    __args__['subnetId'] = subnet_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Nat/getSnatRules:getSnatRules', __args__, opts=opts, typ=GetSnatRulesResult)
    return __ret__.apply(lambda __response__: GetSnatRulesResult(
        cidr=pulumi.get(__response__, 'cidr'),
        created_at=pulumi.get(__response__, 'created_at'),
        description=pulumi.get(__response__, 'description'),
        floating_ip_address=pulumi.get(__response__, 'floating_ip_address'),
        floating_ip_id=pulumi.get(__response__, 'floating_ip_id'),
        gateway_id=pulumi.get(__response__, 'gateway_id'),
        global_eip_address=pulumi.get(__response__, 'global_eip_address'),
        global_eip_id=pulumi.get(__response__, 'global_eip_id'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        rules=pulumi.get(__response__, 'rules'),
        source_type=pulumi.get(__response__, 'source_type'),
        status=pulumi.get(__response__, 'status'),
        subnet_id=pulumi.get(__response__, 'subnet_id')))
