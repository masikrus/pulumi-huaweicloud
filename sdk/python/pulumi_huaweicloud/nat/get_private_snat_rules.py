# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPrivateSnatRulesResult',
    'AwaitableGetPrivateSnatRulesResult',
    'get_private_snat_rules',
    'get_private_snat_rules_output',
]

@pulumi.output_type
class GetPrivateSnatRulesResult:
    """
    A collection of values returned by getPrivateSnatRules.
    """
    def __init__(__self__, cidr=None, descriptions=None, enterprise_project_id=None, gateway_id=None, id=None, region=None, rule_id=None, rules=None, subnet_id=None, transit_ip_address=None, transit_ip_id=None):
        if cidr and not isinstance(cidr, str):
            raise TypeError("Expected argument 'cidr' to be a str")
        pulumi.set(__self__, "cidr", cidr)
        if descriptions and not isinstance(descriptions, list):
            raise TypeError("Expected argument 'descriptions' to be a list")
        pulumi.set(__self__, "descriptions", descriptions)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if transit_ip_address and not isinstance(transit_ip_address, str):
            raise TypeError("Expected argument 'transit_ip_address' to be a str")
        pulumi.set(__self__, "transit_ip_address", transit_ip_address)
        if transit_ip_id and not isinstance(transit_ip_id, str):
            raise TypeError("Expected argument 'transit_ip_id' to be a str")
        pulumi.set(__self__, "transit_ip_id", transit_ip_id)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> Optional[_builtins.str]:
        """
        The CIDR block of the private SNAT rule.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter
    def descriptions(self) -> Optional[Sequence[_builtins.str]]:
        """
        The description of the private SNAT rule.
        """
        return pulumi.get(self, "descriptions")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project to which the private SNAT rule belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[_builtins.str]:
        """
        The ID of the private NAT gateway to which the private SNAT rule belongs.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetPrivateSnatRulesRuleResult']:
        """
        The list ot the private SNAT rules.
        The rules structure is documented below.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        The ID of the subnet to which the private SNAT rule belongs.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="transitIpAddress")
    def transit_ip_address(self) -> Optional[_builtins.str]:
        """
        The IP address of the transit IP associated with the private SNAT rule.
        """
        return pulumi.get(self, "transit_ip_address")

    @_builtins.property
    @pulumi.getter(name="transitIpId")
    def transit_ip_id(self) -> Optional[_builtins.str]:
        """
        The ID of the transit IP associated with the private SNAT rule.
        """
        return pulumi.get(self, "transit_ip_id")


class AwaitableGetPrivateSnatRulesResult(GetPrivateSnatRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateSnatRulesResult(
            cidr=self.cidr,
            descriptions=self.descriptions,
            enterprise_project_id=self.enterprise_project_id,
            gateway_id=self.gateway_id,
            id=self.id,
            region=self.region,
            rule_id=self.rule_id,
            rules=self.rules,
            subnet_id=self.subnet_id,
            transit_ip_address=self.transit_ip_address,
            transit_ip_id=self.transit_ip_id)


def get_private_snat_rules(cidr: Optional[_builtins.str] = None,
                           descriptions: Optional[Sequence[_builtins.str]] = None,
                           enterprise_project_id: Optional[_builtins.str] = None,
                           gateway_id: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           rule_id: Optional[_builtins.str] = None,
                           subnet_id: Optional[_builtins.str] = None,
                           transit_ip_address: Optional[_builtins.str] = None,
                           transit_ip_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateSnatRulesResult:
    """
    Use this data source to get the list of private SNAT rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cidr = config.require_object("cidr")
    test = huaweicloud.Nat.get_private_snat_rules(cidr=cidr)
    ```


    :param _builtins.str cidr: Specifies the CIDR block of the private SNAT rule.
    :param Sequence[_builtins.str] descriptions: Specifies the description of the private SNAT rule.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the private SNAT
           rules belong.
    :param _builtins.str gateway_id: Specifies the ID of the private NAT gateway to which the private SNAT rules
           belong.
    :param _builtins.str region: Specifies the region where the private SNAT rules are located.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the private SNAT rule.
    :param _builtins.str subnet_id: Specifies the ID of the subnet to which the private SNAT rule belongs.
    :param _builtins.str transit_ip_address: Specifies the IP address of the transit IP associated with the private
           SNAT rule.
    :param _builtins.str transit_ip_id: Specifies the ID of the transit IP associated with the private SNAT rule.
    """
    __args__ = dict()
    __args__['cidr'] = cidr
    __args__['descriptions'] = descriptions
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['gatewayId'] = gateway_id
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['subnetId'] = subnet_id
    __args__['transitIpAddress'] = transit_ip_address
    __args__['transitIpId'] = transit_ip_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Nat/getPrivateSnatRules:getPrivateSnatRules', __args__, opts=opts, typ=GetPrivateSnatRulesResult).value

    return AwaitableGetPrivateSnatRulesResult(
        cidr=pulumi.get(__ret__, 'cidr'),
        descriptions=pulumi.get(__ret__, 'descriptions'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        rules=pulumi.get(__ret__, 'rules'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        transit_ip_address=pulumi.get(__ret__, 'transit_ip_address'),
        transit_ip_id=pulumi.get(__ret__, 'transit_ip_id'))
def get_private_snat_rules_output(cidr: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  descriptions: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                  enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  gateway_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  rule_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  subnet_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  transit_ip_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  transit_ip_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPrivateSnatRulesResult]:
    """
    Use this data source to get the list of private SNAT rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cidr = config.require_object("cidr")
    test = huaweicloud.Nat.get_private_snat_rules(cidr=cidr)
    ```


    :param _builtins.str cidr: Specifies the CIDR block of the private SNAT rule.
    :param Sequence[_builtins.str] descriptions: Specifies the description of the private SNAT rule.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the private SNAT
           rules belong.
    :param _builtins.str gateway_id: Specifies the ID of the private NAT gateway to which the private SNAT rules
           belong.
    :param _builtins.str region: Specifies the region where the private SNAT rules are located.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the private SNAT rule.
    :param _builtins.str subnet_id: Specifies the ID of the subnet to which the private SNAT rule belongs.
    :param _builtins.str transit_ip_address: Specifies the IP address of the transit IP associated with the private
           SNAT rule.
    :param _builtins.str transit_ip_id: Specifies the ID of the transit IP associated with the private SNAT rule.
    """
    __args__ = dict()
    __args__['cidr'] = cidr
    __args__['descriptions'] = descriptions
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['gatewayId'] = gateway_id
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['subnetId'] = subnet_id
    __args__['transitIpAddress'] = transit_ip_address
    __args__['transitIpId'] = transit_ip_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Nat/getPrivateSnatRules:getPrivateSnatRules', __args__, opts=opts, typ=GetPrivateSnatRulesResult)
    return __ret__.apply(lambda __response__: GetPrivateSnatRulesResult(
        cidr=pulumi.get(__response__, 'cidr'),
        descriptions=pulumi.get(__response__, 'descriptions'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        gateway_id=pulumi.get(__response__, 'gateway_id'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        rules=pulumi.get(__response__, 'rules'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        transit_ip_address=pulumi.get(__response__, 'transit_ip_address'),
        transit_ip_id=pulumi.get(__response__, 'transit_ip_id')))
