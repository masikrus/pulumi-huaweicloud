# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGatewaysResult',
    'AwaitableGetGatewaysResult',
    'get_gateways',
    'get_gateways_output',
]

@pulumi.output_type
class GetGatewaysResult:
    """
    A collection of values returned by getGateways.
    """
    def __init__(__self__, created_at=None, description=None, enterprise_project_id=None, gateway_id=None, gateways=None, id=None, name=None, region=None, spec=None, status=None, subnet_id=None, vpc_id=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if gateways and not isinstance(gateways, list):
            raise TypeError("Expected argument 'gateways' to be a list")
        pulumi.set(__self__, "gateways", gateways)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if spec and not isinstance(spec, str):
            raise TypeError("Expected argument 'spec' to be a str")
        pulumi.set(__self__, "spec", spec)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The creation time of the NAT gateway.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the NAT gateway.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project to which the NAT gateway belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter
    def gateways(self) -> Sequence['outputs.GetGatewaysGatewayResult']:
        """
        The list of the NAT gateway.
        The gateways structure is documented below.
        """
        return pulumi.get(self, "gateways")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the NAT gateway.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def spec(self) -> Optional[_builtins.str]:
        """
        The specification of the NAT gateway.
        The valid values are as follows:
        + **1**: Small type, which supports up to `10,000` SNAT connections.
        + **2**: Medium type, which supports up to `50,000` SNAT connections.
        + **3**: Large type, which supports up to `200,000` SNAT connections.
        + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
        """
        return pulumi.get(self, "spec")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The current status of the NAT gateway.
        The valid values are as follows:
        + **ACTIVE**: The status of the NAT gateway is available.
        + **INACTIVE**: The status of the NAT gateway is unavailable.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        """
        The ID of the VPC to which the NAT gateway belongs.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetGatewaysResult(GetGatewaysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGatewaysResult(
            created_at=self.created_at,
            description=self.description,
            enterprise_project_id=self.enterprise_project_id,
            gateway_id=self.gateway_id,
            gateways=self.gateways,
            id=self.id,
            name=self.name,
            region=self.region,
            spec=self.spec,
            status=self.status,
            subnet_id=self.subnet_id,
            vpc_id=self.vpc_id)


def get_gateways(created_at: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 enterprise_project_id: Optional[_builtins.str] = None,
                 gateway_id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 spec: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 subnet_id: Optional[_builtins.str] = None,
                 vpc_id: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGatewaysResult:
    """
    Use this data source to get the list of NAT gateways.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    gateway_name = config.require_object("gatewayName")
    test = huaweicloud.Nat.get_gateways(name=gateway_name)
    ```


    :param _builtins.str created_at: Specifies the creation time of the NAT gateway.
           The format is **yyyy-mm-ddThh:mm:ssZ**. e.g. **2024-06-20T15:03:04Z**.
    :param _builtins.str description: Specifies the description of the NAT gateway.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the NAT
           gateways belong.
    :param _builtins.str gateway_id: Specifies the ID of the NAT gateway.
    :param _builtins.str name: Specifies the name of the NAT gateway.
    :param _builtins.str region: Specifies the region where the NAT gateways are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str spec: Specifies the specification of the NAT gateways.
           The valid values are as follows:
           + **1**: Small type, which supports up to `10,000` SNAT connections.
           + **2**: Medium type, which supports up to `50,000` SNAT connections.
           + **3**: Large type, which supports up to `200,000` SNAT connections.
           + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
    :param _builtins.str status: Specifies the current status of the NAT gateways.
           The valid values are as follows:
           + **ACTIVE**: The status of the NAT gateway is available.
           + **INACTIVE**: The status of the NAT gateway is unavailable.
    :param _builtins.str subnet_id: Specifies the network ID of the downstream interface (the next hop of the DVR) of
           the NAT gateways.
    :param _builtins.str vpc_id: Specifies the ID of the VPC to which the NAT gateways belong.
    """
    __args__ = dict()
    __args__['createdAt'] = created_at
    __args__['description'] = description
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['gatewayId'] = gateway_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['spec'] = spec
    __args__['status'] = status
    __args__['subnetId'] = subnet_id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Nat/getGateways:getGateways', __args__, opts=opts, typ=GetGatewaysResult).value

    return AwaitableGetGatewaysResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        gateways=pulumi.get(__ret__, 'gateways'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        spec=pulumi.get(__ret__, 'spec'),
        status=pulumi.get(__ret__, 'status'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_gateways_output(created_at: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        gateway_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        spec: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        subnet_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        vpc_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGatewaysResult]:
    """
    Use this data source to get the list of NAT gateways.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    gateway_name = config.require_object("gatewayName")
    test = huaweicloud.Nat.get_gateways(name=gateway_name)
    ```


    :param _builtins.str created_at: Specifies the creation time of the NAT gateway.
           The format is **yyyy-mm-ddThh:mm:ssZ**. e.g. **2024-06-20T15:03:04Z**.
    :param _builtins.str description: Specifies the description of the NAT gateway.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the NAT
           gateways belong.
    :param _builtins.str gateway_id: Specifies the ID of the NAT gateway.
    :param _builtins.str name: Specifies the name of the NAT gateway.
    :param _builtins.str region: Specifies the region where the NAT gateways are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str spec: Specifies the specification of the NAT gateways.
           The valid values are as follows:
           + **1**: Small type, which supports up to `10,000` SNAT connections.
           + **2**: Medium type, which supports up to `50,000` SNAT connections.
           + **3**: Large type, which supports up to `200,000` SNAT connections.
           + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
    :param _builtins.str status: Specifies the current status of the NAT gateways.
           The valid values are as follows:
           + **ACTIVE**: The status of the NAT gateway is available.
           + **INACTIVE**: The status of the NAT gateway is unavailable.
    :param _builtins.str subnet_id: Specifies the network ID of the downstream interface (the next hop of the DVR) of
           the NAT gateways.
    :param _builtins.str vpc_id: Specifies the ID of the VPC to which the NAT gateways belong.
    """
    __args__ = dict()
    __args__['createdAt'] = created_at
    __args__['description'] = description
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['gatewayId'] = gateway_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['spec'] = spec
    __args__['status'] = status
    __args__['subnetId'] = subnet_id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Nat/getGateways:getGateways', __args__, opts=opts, typ=GetGatewaysResult)
    return __ret__.apply(lambda __response__: GetGatewaysResult(
        created_at=pulumi.get(__response__, 'created_at'),
        description=pulumi.get(__response__, 'description'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        gateway_id=pulumi.get(__response__, 'gateway_id'),
        gateways=pulumi.get(__response__, 'gateways'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        spec=pulumi.get(__response__, 'spec'),
        status=pulumi.get(__response__, 'status'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))
