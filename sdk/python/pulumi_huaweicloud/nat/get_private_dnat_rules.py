# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPrivateDnatRulesResult',
    'AwaitableGetPrivateDnatRulesResult',
    'get_private_dnat_rules',
    'get_private_dnat_rules_output',
]

@pulumi.output_type
class GetPrivateDnatRulesResult:
    """
    A collection of values returned by getPrivateDnatRules.
    """
    def __init__(__self__, backend_interface_id=None, backend_private_ip=None, backend_type=None, descriptions=None, enterprise_project_id=None, external_ip_addresses=None, gateway_id=None, id=None, internal_service_port=None, protocol=None, region=None, rule_id=None, rules=None, transit_ip_id=None, transit_service_port=None):
        if backend_interface_id and not isinstance(backend_interface_id, str):
            raise TypeError("Expected argument 'backend_interface_id' to be a str")
        pulumi.set(__self__, "backend_interface_id", backend_interface_id)
        if backend_private_ip and not isinstance(backend_private_ip, str):
            raise TypeError("Expected argument 'backend_private_ip' to be a str")
        pulumi.set(__self__, "backend_private_ip", backend_private_ip)
        if backend_type and not isinstance(backend_type, str):
            raise TypeError("Expected argument 'backend_type' to be a str")
        pulumi.set(__self__, "backend_type", backend_type)
        if descriptions and not isinstance(descriptions, list):
            raise TypeError("Expected argument 'descriptions' to be a list")
        pulumi.set(__self__, "descriptions", descriptions)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if external_ip_addresses and not isinstance(external_ip_addresses, list):
            raise TypeError("Expected argument 'external_ip_addresses' to be a list")
        pulumi.set(__self__, "external_ip_addresses", external_ip_addresses)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internal_service_port and not isinstance(internal_service_port, str):
            raise TypeError("Expected argument 'internal_service_port' to be a str")
        pulumi.set(__self__, "internal_service_port", internal_service_port)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if transit_ip_id and not isinstance(transit_ip_id, str):
            raise TypeError("Expected argument 'transit_ip_id' to be a str")
        pulumi.set(__self__, "transit_ip_id", transit_ip_id)
        if transit_service_port and not isinstance(transit_service_port, str):
            raise TypeError("Expected argument 'transit_service_port' to be a str")
        pulumi.set(__self__, "transit_service_port", transit_service_port)

    @_builtins.property
    @pulumi.getter(name="backendInterfaceId")
    def backend_interface_id(self) -> Optional[_builtins.str]:
        """
        The network interface ID of the backend instance to which the private DNAT rule belongs.
        """
        return pulumi.get(self, "backend_interface_id")

    @_builtins.property
    @pulumi.getter(name="backendPrivateIp")
    def backend_private_ip(self) -> Optional[_builtins.str]:
        """
        The private IP address of the backend instance to which the private DNAT rule belongs.
        """
        return pulumi.get(self, "backend_private_ip")

    @_builtins.property
    @pulumi.getter(name="backendType")
    def backend_type(self) -> Optional[_builtins.str]:
        """
        The type of the backend instance to which the private DNAT rule belongs.
        """
        return pulumi.get(self, "backend_type")

    @_builtins.property
    @pulumi.getter
    def descriptions(self) -> Optional[Sequence[_builtins.str]]:
        """
        The description of the private DNAT rule.
        """
        return pulumi.get(self, "descriptions")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project to which the private DNAT rule belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="externalIpAddresses")
    def external_ip_addresses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "external_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[_builtins.str]:
        """
        The ID of the private NAT gateway to which the private DNAT rule belongs.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="internalServicePort")
    def internal_service_port(self) -> Optional[_builtins.str]:
        """
        The port of the backend instance to which the private DNAT rule belongs.
        """
        return pulumi.get(self, "internal_service_port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        The protocol type of the private DNAT rule.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetPrivateDnatRulesRuleResult']:
        """
        The list ot the private DNAT rules.
        The rules structure is documented below.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter(name="transitIpId")
    def transit_ip_id(self) -> Optional[_builtins.str]:
        """
        The ID of the transit IP associated with the private DNAT rule.
        """
        return pulumi.get(self, "transit_ip_id")

    @_builtins.property
    @pulumi.getter(name="transitServicePort")
    def transit_service_port(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "transit_service_port")


class AwaitableGetPrivateDnatRulesResult(GetPrivateDnatRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateDnatRulesResult(
            backend_interface_id=self.backend_interface_id,
            backend_private_ip=self.backend_private_ip,
            backend_type=self.backend_type,
            descriptions=self.descriptions,
            enterprise_project_id=self.enterprise_project_id,
            external_ip_addresses=self.external_ip_addresses,
            gateway_id=self.gateway_id,
            id=self.id,
            internal_service_port=self.internal_service_port,
            protocol=self.protocol,
            region=self.region,
            rule_id=self.rule_id,
            rules=self.rules,
            transit_ip_id=self.transit_ip_id,
            transit_service_port=self.transit_service_port)


def get_private_dnat_rules(backend_interface_id: Optional[_builtins.str] = None,
                           backend_private_ip: Optional[_builtins.str] = None,
                           backend_type: Optional[_builtins.str] = None,
                           descriptions: Optional[Sequence[_builtins.str]] = None,
                           enterprise_project_id: Optional[_builtins.str] = None,
                           external_ip_addresses: Optional[Sequence[_builtins.str]] = None,
                           gateway_id: Optional[_builtins.str] = None,
                           internal_service_port: Optional[_builtins.str] = None,
                           protocol: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           rule_id: Optional[_builtins.str] = None,
                           transit_ip_id: Optional[_builtins.str] = None,
                           transit_service_port: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateDnatRulesResult:
    """
    Use this data source to get the list of private DNAT rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    backend_type = config.require_object("backendType")
    test = huaweicloud.Nat.get_private_dnat_rules(backend_type=backend_type)
    ```


    :param _builtins.str backend_interface_id: Specifies the network interface ID of the backend instance to which the
           private DNAT rule belongs.
    :param _builtins.str backend_private_ip: Specifies the private IP address of the backend instance to which the
           private DNAT rule belongs.
    :param _builtins.str backend_type: Specifies the type of the backend instance to which the private DNAT rules
           belong.
           The value can be one of the following:
           + **COMPUTE**: ECS instance.
           + **VIP**: VIP.
           + **ELB**: ELB loadbalancer.
           + **ELBv3**: The ver.3 ELB loadbalancer.
           + **CUSTOMIZE**: The custom backend IP address.
    :param Sequence[_builtins.str] descriptions: Specifies the description of the private DNAT rule.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the private DNAT
           rules belong.
    :param Sequence[_builtins.str] external_ip_addresses: Specifies the transit IP address used to the private DNAT rule.
    :param _builtins.str gateway_id: Specifies the ID of the private NAT gateway to which the private DNAT rules
           belong.
    :param _builtins.str internal_service_port: Specifies the port of the backend instance to which the private DNAT
           rule belongs.
    :param _builtins.str protocol: Specifies the protocol type of the private DNAT rules.
           The value can be one of the following:
           + **tcp**
           + **udp**
           + **any**
    :param _builtins.str region: Specifies the region where the private DNAT rules are located.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the private DNAT rule.
    :param _builtins.str transit_ip_id: Specifies the ID of the transit IP associated with the private DNAT rules.
    :param _builtins.str transit_service_port: Specifies the port of the transit IP associated with the private DNAT rule.
    """
    __args__ = dict()
    __args__['backendInterfaceId'] = backend_interface_id
    __args__['backendPrivateIp'] = backend_private_ip
    __args__['backendType'] = backend_type
    __args__['descriptions'] = descriptions
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['externalIpAddresses'] = external_ip_addresses
    __args__['gatewayId'] = gateway_id
    __args__['internalServicePort'] = internal_service_port
    __args__['protocol'] = protocol
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['transitIpId'] = transit_ip_id
    __args__['transitServicePort'] = transit_service_port
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Nat/getPrivateDnatRules:getPrivateDnatRules', __args__, opts=opts, typ=GetPrivateDnatRulesResult).value

    return AwaitableGetPrivateDnatRulesResult(
        backend_interface_id=pulumi.get(__ret__, 'backend_interface_id'),
        backend_private_ip=pulumi.get(__ret__, 'backend_private_ip'),
        backend_type=pulumi.get(__ret__, 'backend_type'),
        descriptions=pulumi.get(__ret__, 'descriptions'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        external_ip_addresses=pulumi.get(__ret__, 'external_ip_addresses'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        id=pulumi.get(__ret__, 'id'),
        internal_service_port=pulumi.get(__ret__, 'internal_service_port'),
        protocol=pulumi.get(__ret__, 'protocol'),
        region=pulumi.get(__ret__, 'region'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        rules=pulumi.get(__ret__, 'rules'),
        transit_ip_id=pulumi.get(__ret__, 'transit_ip_id'),
        transit_service_port=pulumi.get(__ret__, 'transit_service_port'))
def get_private_dnat_rules_output(backend_interface_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  backend_private_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  backend_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  descriptions: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                  enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  external_ip_addresses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                  gateway_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  internal_service_port: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  protocol: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  rule_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  transit_ip_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  transit_service_port: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPrivateDnatRulesResult]:
    """
    Use this data source to get the list of private DNAT rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    backend_type = config.require_object("backendType")
    test = huaweicloud.Nat.get_private_dnat_rules(backend_type=backend_type)
    ```


    :param _builtins.str backend_interface_id: Specifies the network interface ID of the backend instance to which the
           private DNAT rule belongs.
    :param _builtins.str backend_private_ip: Specifies the private IP address of the backend instance to which the
           private DNAT rule belongs.
    :param _builtins.str backend_type: Specifies the type of the backend instance to which the private DNAT rules
           belong.
           The value can be one of the following:
           + **COMPUTE**: ECS instance.
           + **VIP**: VIP.
           + **ELB**: ELB loadbalancer.
           + **ELBv3**: The ver.3 ELB loadbalancer.
           + **CUSTOMIZE**: The custom backend IP address.
    :param Sequence[_builtins.str] descriptions: Specifies the description of the private DNAT rule.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the private DNAT
           rules belong.
    :param Sequence[_builtins.str] external_ip_addresses: Specifies the transit IP address used to the private DNAT rule.
    :param _builtins.str gateway_id: Specifies the ID of the private NAT gateway to which the private DNAT rules
           belong.
    :param _builtins.str internal_service_port: Specifies the port of the backend instance to which the private DNAT
           rule belongs.
    :param _builtins.str protocol: Specifies the protocol type of the private DNAT rules.
           The value can be one of the following:
           + **tcp**
           + **udp**
           + **any**
    :param _builtins.str region: Specifies the region where the private DNAT rules are located.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the private DNAT rule.
    :param _builtins.str transit_ip_id: Specifies the ID of the transit IP associated with the private DNAT rules.
    :param _builtins.str transit_service_port: Specifies the port of the transit IP associated with the private DNAT rule.
    """
    __args__ = dict()
    __args__['backendInterfaceId'] = backend_interface_id
    __args__['backendPrivateIp'] = backend_private_ip
    __args__['backendType'] = backend_type
    __args__['descriptions'] = descriptions
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['externalIpAddresses'] = external_ip_addresses
    __args__['gatewayId'] = gateway_id
    __args__['internalServicePort'] = internal_service_port
    __args__['protocol'] = protocol
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['transitIpId'] = transit_ip_id
    __args__['transitServicePort'] = transit_service_port
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Nat/getPrivateDnatRules:getPrivateDnatRules', __args__, opts=opts, typ=GetPrivateDnatRulesResult)
    return __ret__.apply(lambda __response__: GetPrivateDnatRulesResult(
        backend_interface_id=pulumi.get(__response__, 'backend_interface_id'),
        backend_private_ip=pulumi.get(__response__, 'backend_private_ip'),
        backend_type=pulumi.get(__response__, 'backend_type'),
        descriptions=pulumi.get(__response__, 'descriptions'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        external_ip_addresses=pulumi.get(__response__, 'external_ip_addresses'),
        gateway_id=pulumi.get(__response__, 'gateway_id'),
        id=pulumi.get(__response__, 'id'),
        internal_service_port=pulumi.get(__response__, 'internal_service_port'),
        protocol=pulumi.get(__response__, 'protocol'),
        region=pulumi.get(__response__, 'region'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        rules=pulumi.get(__response__, 'rules'),
        transit_ip_id=pulumi.get(__response__, 'transit_ip_id'),
        transit_service_port=pulumi.get(__response__, 'transit_service_port')))
