# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPrivateGatewaysResult',
    'AwaitableGetPrivateGatewaysResult',
    'get_private_gateways',
    'get_private_gateways_output',
]

@pulumi.output_type
class GetPrivateGatewaysResult:
    """
    A collection of values returned by getPrivateGateways.
    """
    def __init__(__self__, descriptions=None, enterprise_project_id=None, gateway_id=None, gateways=None, id=None, name=None, region=None, spec=None, status=None, subnet_id=None, tags=None, vpc_id=None):
        if descriptions and not isinstance(descriptions, list):
            raise TypeError("Expected argument 'descriptions' to be a list")
        pulumi.set(__self__, "descriptions", descriptions)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if gateways and not isinstance(gateways, list):
            raise TypeError("Expected argument 'gateways' to be a list")
        pulumi.set(__self__, "gateways", gateways)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if spec and not isinstance(spec, str):
            raise TypeError("Expected argument 'spec' to be a str")
        pulumi.set(__self__, "spec", spec)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def descriptions(self) -> Optional[Sequence[_builtins.str]]:
        """
        The description of the private NAT gateway.
        """
        return pulumi.get(self, "descriptions")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the enterprise project to which the private NAT gateway belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter
    def gateways(self) -> Sequence['outputs.GetPrivateGatewaysGatewayResult']:
        """
        The private NAT gateway list.
        The gateways structure is documented below.
        """
        return pulumi.get(self, "gateways")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the private NAT gateway.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def spec(self) -> Optional[_builtins.str]:
        """
        The specification of the private NAT gateway.  
        The valid values are as follows:
        + **Small**: Small type, which supports up to `20` rules, `200 Mbit/s` bandwidth, `20,000` PPS and `2,000` SNAT
        connections.
        + **Medium**: Medium type, which supports up to `50` rules, `500 Mbit/s` bandwidth, `50,000` PPS and `5,000` SNAT
        connections.
        + **Large**: Large type, which supports up to `200` rules, `2 Gbit/s` bandwidth, `200,000` PPS and `20,000` SNAT
        connections.
        + **Extra-Large**: Extra-large type, which supports up to `500` rules, `5 Gbit/s` bandwidth, `500,000` PPS and
        `50,000` SNAT connections.
        """
        return pulumi.get(self, "spec")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The current status of the private NAT gateway.
        The valid values are as follows:
        + **ACTIVE**: The status of the private NAT gateway is normal operation.
        + **FROZEN**: The status of the private NAT gateway is frozen.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        The ID of the subnet to which the private NAT gateway belongs.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The key/value pairs to associate with the private NAT gateway.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        """
        The ID of the VPC to which the private NAT gateway belongs.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetPrivateGatewaysResult(GetPrivateGatewaysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateGatewaysResult(
            descriptions=self.descriptions,
            enterprise_project_id=self.enterprise_project_id,
            gateway_id=self.gateway_id,
            gateways=self.gateways,
            id=self.id,
            name=self.name,
            region=self.region,
            spec=self.spec,
            status=self.status,
            subnet_id=self.subnet_id,
            tags=self.tags,
            vpc_id=self.vpc_id)


def get_private_gateways(descriptions: Optional[Sequence[_builtins.str]] = None,
                         enterprise_project_id: Optional[_builtins.str] = None,
                         gateway_id: Optional[_builtins.str] = None,
                         name: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         spec: Optional[_builtins.str] = None,
                         status: Optional[_builtins.str] = None,
                         subnet_id: Optional[_builtins.str] = None,
                         tags: Optional[Mapping[str, _builtins.str]] = None,
                         vpc_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateGatewaysResult:
    """
    Use this data source to get the list of private NAT gateways.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    gateway_name = config.require_object("gatewayName")
    test = huaweicloud.Nat.get_private_gateways(name=gateway_name)
    ```


    :param Sequence[_builtins.str] descriptions: Specifies the description of the private NAT gateway.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the private NAT
           gateways belong.
    :param _builtins.str gateway_id: Specifies the ID of the private NAT gateway.
    :param _builtins.str name: Specifies the name of the private NAT gateway.
    :param _builtins.str region: Specifies the region where the private NAT gateways are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str spec: Specifies the specification of the private NAT gateways.  
           The valid values are as follows:
           + **Small**: Small type, which supports up to `20` rules, `200 Mbit/s` bandwidth, `20,000` PPS and `2,000` SNAT
           connections.
           + **Medium**: Medium type, which supports up to `50` rules, `500 Mbit/s` bandwidth, `50,000` PPS and `5,000` SNAT
           connections.
           + **Large**: Large type, which supports up to `200` rules, `2 Gbit/s` bandwidth, `200,000` PPS and `20,000` SNAT
           connections.
           + **Extra-Large**: Extra-large type, which supports up to `500` rules, `5 Gbit/s` bandwidth, `500,000` PPS and
           `50,000` SNAT connections.
    :param _builtins.str status: Specifies the current status of the private NAT gateways.
           The valid values are as follows:
           + **ACTIVE**: The status of the private NAT gateway is normal operation.
           + **FROZEN**: The status of the private NAT gateway is frozen.
    :param _builtins.str subnet_id: Specifies the ID of the subnet to which the private NAT gateways belong.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate the private NAT gateways.
    :param _builtins.str vpc_id: Specifies the ID of the VPC to which the private NAT gateways belong.
    """
    __args__ = dict()
    __args__['descriptions'] = descriptions
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['gatewayId'] = gateway_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['spec'] = spec
    __args__['status'] = status
    __args__['subnetId'] = subnet_id
    __args__['tags'] = tags
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Nat/getPrivateGateways:getPrivateGateways', __args__, opts=opts, typ=GetPrivateGatewaysResult).value

    return AwaitableGetPrivateGatewaysResult(
        descriptions=pulumi.get(__ret__, 'descriptions'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        gateways=pulumi.get(__ret__, 'gateways'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        spec=pulumi.get(__ret__, 'spec'),
        status=pulumi.get(__ret__, 'status'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        tags=pulumi.get(__ret__, 'tags'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_private_gateways_output(descriptions: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                gateway_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                spec: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                subnet_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                                vpc_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPrivateGatewaysResult]:
    """
    Use this data source to get the list of private NAT gateways.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    gateway_name = config.require_object("gatewayName")
    test = huaweicloud.Nat.get_private_gateways(name=gateway_name)
    ```


    :param Sequence[_builtins.str] descriptions: Specifies the description of the private NAT gateway.
    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the private NAT
           gateways belong.
    :param _builtins.str gateway_id: Specifies the ID of the private NAT gateway.
    :param _builtins.str name: Specifies the name of the private NAT gateway.
    :param _builtins.str region: Specifies the region where the private NAT gateways are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str spec: Specifies the specification of the private NAT gateways.  
           The valid values are as follows:
           + **Small**: Small type, which supports up to `20` rules, `200 Mbit/s` bandwidth, `20,000` PPS and `2,000` SNAT
           connections.
           + **Medium**: Medium type, which supports up to `50` rules, `500 Mbit/s` bandwidth, `50,000` PPS and `5,000` SNAT
           connections.
           + **Large**: Large type, which supports up to `200` rules, `2 Gbit/s` bandwidth, `200,000` PPS and `20,000` SNAT
           connections.
           + **Extra-Large**: Extra-large type, which supports up to `500` rules, `5 Gbit/s` bandwidth, `500,000` PPS and
           `50,000` SNAT connections.
    :param _builtins.str status: Specifies the current status of the private NAT gateways.
           The valid values are as follows:
           + **ACTIVE**: The status of the private NAT gateway is normal operation.
           + **FROZEN**: The status of the private NAT gateway is frozen.
    :param _builtins.str subnet_id: Specifies the ID of the subnet to which the private NAT gateways belong.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate the private NAT gateways.
    :param _builtins.str vpc_id: Specifies the ID of the VPC to which the private NAT gateways belong.
    """
    __args__ = dict()
    __args__['descriptions'] = descriptions
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['gatewayId'] = gateway_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['spec'] = spec
    __args__['status'] = status
    __args__['subnetId'] = subnet_id
    __args__['tags'] = tags
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Nat/getPrivateGateways:getPrivateGateways', __args__, opts=opts, typ=GetPrivateGatewaysResult)
    return __ret__.apply(lambda __response__: GetPrivateGatewaysResult(
        descriptions=pulumi.get(__response__, 'descriptions'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        gateway_id=pulumi.get(__response__, 'gateway_id'),
        gateways=pulumi.get(__response__, 'gateways'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        spec=pulumi.get(__response__, 'spec'),
        status=pulumi.get(__response__, 'status'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        tags=pulumi.get(__response__, 'tags'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))
