# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeployEnvironmentArgs', 'DeployEnvironment']

@pulumi.input_type
class DeployEnvironmentArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[_builtins.str],
                 deploy_type: pulumi.Input[_builtins.int],
                 os_type: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentHostArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DeployEnvironment resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] deploy_type: Specifies the deployment type.
               Valid value are as follows:
               + **0**: Host.
               + **1**: Kubernetes.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system.
               **Windows** or **Linux**, which must be the same as that of the host cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
        :param pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentHostArgs']]] hosts: Specifies the target hosts list.
               The hosts structure is documented below.
               
               > If you import a target host bound to a proxy host, the proxy host will be imported to the environment automatically.
               A proxy host is deleted, when its last target host is deleted from the environment.
               
               <a name="block--hosts"></a>
               The `hosts` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the environment name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "deploy_type", deploy_type)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "project_id", project_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the application ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="deployType")
    def deploy_type(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the deployment type.
        Valid value are as follows:
        + **0**: Host.
        + **1**: Kubernetes.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "deploy_type")

    @deploy_type.setter
    def deploy_type(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "deploy_type", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operating system.
        **Windows** or **Linux**, which must be the same as that of the host cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the project ID for CodeArts service.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentHostArgs']]]]:
        """
        Specifies the target hosts list.
        The hosts structure is documented below.

        > If you import a target host bound to a proxy host, the proxy host will be imported to the environment automatically.
        A proxy host is deleted, when its last target host is deleted from the environment.

        <a name="block--hosts"></a>
        The `hosts` block supports:
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the environment name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DeployEnvironmentState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentCreatedByArgs']]]] = None,
                 deploy_type: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentHostArgs']]]] = None,
                 instance_count: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_matrices: Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentPermissionMatrixArgs']]]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentPermissionArgs']]]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 proxies: Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentProxyArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeployEnvironment resources.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the create time.
        :param pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentCreatedByArgs']]] created_bies: Indicates the creator information.
               The created_by structure is documented below.
        :param pulumi.Input[_builtins.int] deploy_type: Specifies the deployment type.
               Valid value are as follows:
               + **0**: Host.
               + **1**: Kubernetes.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
        :param pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentHostArgs']]] hosts: Specifies the target hosts list.
               The hosts structure is documented below.
               
               > If you import a target host bound to a proxy host, the proxy host will be imported to the environment automatically.
               A proxy host is deleted, when its last target host is deleted from the environment.
               
               <a name="block--hosts"></a>
               The `hosts` block supports:
        :param pulumi.Input[_builtins.int] instance_count: Indicates the number of host instances in the environment.
        :param pulumi.Input[_builtins.str] name: Specifies the environment name.
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system.
               **Windows** or **Linux**, which must be the same as that of the host cluster.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentPermissionMatrixArgs']]] permission_matrices: Indicates the permission matrix.
               The permission_matrix structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentPermissionArgs']]] permissions: Indicates the user permission.
               The permission structure is documented below.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentProxyArgs']]] proxies: Indicates the proxy hosts list.
               The proxies structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_bies is not None:
            pulumi.set(__self__, "created_bies", created_bies)
        if deploy_type is not None:
            pulumi.set(__self__, "deploy_type", deploy_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if permission_matrices is not None:
            pulumi.set(__self__, "permission_matrices", permission_matrices)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if proxies is not None:
            pulumi.set(__self__, "proxies", proxies)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBies")
    def created_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentCreatedByArgs']]]]:
        """
        Indicates the creator information.
        The created_by structure is documented below.
        """
        return pulumi.get(self, "created_bies")

    @created_bies.setter
    def created_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentCreatedByArgs']]]]):
        pulumi.set(self, "created_bies", value)

    @_builtins.property
    @pulumi.getter(name="deployType")
    def deploy_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the deployment type.
        Valid value are as follows:
        + **0**: Host.
        + **1**: Kubernetes.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "deploy_type")

    @deploy_type.setter
    def deploy_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "deploy_type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentHostArgs']]]]:
        """
        Specifies the target hosts list.
        The hosts structure is documented below.

        > If you import a target host bound to a proxy host, the proxy host will be imported to the environment automatically.
        A proxy host is deleted, when its last target host is deleted from the environment.

        <a name="block--hosts"></a>
        The `hosts` block supports:
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @_builtins.property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the number of host instances in the environment.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "instance_count", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the environment name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operating system.
        **Windows** or **Linux**, which must be the same as that of the host cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="permissionMatrices")
    def permission_matrices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentPermissionMatrixArgs']]]]:
        """
        Indicates the permission matrix.
        The permission_matrix structure is documented below.
        """
        return pulumi.get(self, "permission_matrices")

    @permission_matrices.setter
    def permission_matrices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentPermissionMatrixArgs']]]]):
        pulumi.set(self, "permission_matrices", value)

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentPermissionArgs']]]]:
        """
        Indicates the user permission.
        The permission structure is documented below.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentPermissionArgs']]]]):
        pulumi.set(self, "permissions", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project ID for CodeArts service.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def proxies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentProxyArgs']]]]:
        """
        Indicates the proxy hosts list.
        The proxies structure is documented below.
        """
        return pulumi.get(self, "proxies")

    @proxies.setter
    def proxies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployEnvironmentProxyArgs']]]]):
        pulumi.set(self, "proxies", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:codearts/deployEnvironment:DeployEnvironment")
class DeployEnvironment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 deploy_type: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployEnvironmentHostArgs', 'DeployEnvironmentHostArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts deploy environment resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        application_id = config.require_object("applicationId")
        name = config.require_object("name")
        gourp_id = config.require_object("gourpId")
        host_id = config.require_object("hostId")
        test = huaweicloud.codearts.DeployEnvironment("test",
            project_id=project_id,
            application_id=application_id,
            name=name,
            deploy_type=0,
            os_type="linux",
            description="demo",
            hosts=[{
                "group_id": gourp_id,
                "host_id": host_id,
            }])
        ```

        ## Import

        The environment can be imported using `project_id`, `application_id`, and `id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/deployEnvironment:DeployEnvironment test <project_id>/<application_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] deploy_type: Specifies the deployment type.
               Valid value are as follows:
               + **0**: Host.
               + **1**: Kubernetes.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployEnvironmentHostArgs', 'DeployEnvironmentHostArgsDict']]]] hosts: Specifies the target hosts list.
               The hosts structure is documented below.
               
               > If you import a target host bound to a proxy host, the proxy host will be imported to the environment automatically.
               A proxy host is deleted, when its last target host is deleted from the environment.
               
               <a name="block--hosts"></a>
               The `hosts` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the environment name.
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system.
               **Windows** or **Linux**, which must be the same as that of the host cluster.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeployEnvironmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts deploy environment resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        application_id = config.require_object("applicationId")
        name = config.require_object("name")
        gourp_id = config.require_object("gourpId")
        host_id = config.require_object("hostId")
        test = huaweicloud.codearts.DeployEnvironment("test",
            project_id=project_id,
            application_id=application_id,
            name=name,
            deploy_type=0,
            os_type="linux",
            description="demo",
            hosts=[{
                "group_id": gourp_id,
                "host_id": host_id,
            }])
        ```

        ## Import

        The environment can be imported using `project_id`, `application_id`, and `id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/deployEnvironment:DeployEnvironment test <project_id>/<application_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param DeployEnvironmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeployEnvironmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 deploy_type: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployEnvironmentHostArgs', 'DeployEnvironmentHostArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeployEnvironmentArgs.__new__(DeployEnvironmentArgs)

            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if deploy_type is None and not opts.urn:
                raise TypeError("Missing required property 'deploy_type'")
            __props__.__dict__["deploy_type"] = deploy_type
            __props__.__dict__["description"] = description
            __props__.__dict__["hosts"] = hosts
            __props__.__dict__["name"] = name
            if os_type is None and not opts.urn:
                raise TypeError("Missing required property 'os_type'")
            __props__.__dict__["os_type"] = os_type
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["region"] = region
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_bies"] = None
            __props__.__dict__["instance_count"] = None
            __props__.__dict__["permission_matrices"] = None
            __props__.__dict__["permissions"] = None
            __props__.__dict__["proxies"] = None
        super(DeployEnvironment, __self__).__init__(
            'huaweicloud:codearts/deployEnvironment:DeployEnvironment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_bies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployEnvironmentCreatedByArgs', 'DeployEnvironmentCreatedByArgsDict']]]]] = None,
            deploy_type: Optional[pulumi.Input[_builtins.int]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployEnvironmentHostArgs', 'DeployEnvironmentHostArgsDict']]]]] = None,
            instance_count: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            os_type: Optional[pulumi.Input[_builtins.str]] = None,
            permission_matrices: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployEnvironmentPermissionMatrixArgs', 'DeployEnvironmentPermissionMatrixArgsDict']]]]] = None,
            permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployEnvironmentPermissionArgs', 'DeployEnvironmentPermissionArgsDict']]]]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            proxies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployEnvironmentProxyArgs', 'DeployEnvironmentProxyArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'DeployEnvironment':
        """
        Get an existing DeployEnvironment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the create time.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployEnvironmentCreatedByArgs', 'DeployEnvironmentCreatedByArgsDict']]]] created_bies: Indicates the creator information.
               The created_by structure is documented below.
        :param pulumi.Input[_builtins.int] deploy_type: Specifies the deployment type.
               Valid value are as follows:
               + **0**: Host.
               + **1**: Kubernetes.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployEnvironmentHostArgs', 'DeployEnvironmentHostArgsDict']]]] hosts: Specifies the target hosts list.
               The hosts structure is documented below.
               
               > If you import a target host bound to a proxy host, the proxy host will be imported to the environment automatically.
               A proxy host is deleted, when its last target host is deleted from the environment.
               
               <a name="block--hosts"></a>
               The `hosts` block supports:
        :param pulumi.Input[_builtins.int] instance_count: Indicates the number of host instances in the environment.
        :param pulumi.Input[_builtins.str] name: Specifies the environment name.
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system.
               **Windows** or **Linux**, which must be the same as that of the host cluster.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployEnvironmentPermissionMatrixArgs', 'DeployEnvironmentPermissionMatrixArgsDict']]]] permission_matrices: Indicates the permission matrix.
               The permission_matrix structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployEnvironmentPermissionArgs', 'DeployEnvironmentPermissionArgsDict']]]] permissions: Indicates the user permission.
               The permission structure is documented below.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployEnvironmentProxyArgs', 'DeployEnvironmentProxyArgsDict']]]] proxies: Indicates the proxy hosts list.
               The proxies structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeployEnvironmentState.__new__(_DeployEnvironmentState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_bies"] = created_bies
        __props__.__dict__["deploy_type"] = deploy_type
        __props__.__dict__["description"] = description
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["instance_count"] = instance_count
        __props__.__dict__["name"] = name
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["permission_matrices"] = permission_matrices
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["proxies"] = proxies
        __props__.__dict__["region"] = region
        return DeployEnvironment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the application ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBies")
    def created_bies(self) -> pulumi.Output[Sequence['outputs.DeployEnvironmentCreatedBy']]:
        """
        Indicates the creator information.
        The created_by structure is documented below.
        """
        return pulumi.get(self, "created_bies")

    @_builtins.property
    @pulumi.getter(name="deployType")
    def deploy_type(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the deployment type.
        Valid value are as follows:
        + **0**: Host.
        + **1**: Kubernetes.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "deploy_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Optional[Sequence['outputs.DeployEnvironmentHost']]]:
        """
        Specifies the target hosts list.
        The hosts structure is documented below.

        > If you import a target host bound to a proxy host, the proxy host will be imported to the environment automatically.
        A proxy host is deleted, when its last target host is deleted from the environment.

        <a name="block--hosts"></a>
        The `hosts` block supports:
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the number of host instances in the environment.
        """
        return pulumi.get(self, "instance_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the environment name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the operating system.
        **Windows** or **Linux**, which must be the same as that of the host cluster.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="permissionMatrices")
    def permission_matrices(self) -> pulumi.Output[Sequence['outputs.DeployEnvironmentPermissionMatrix']]:
        """
        Indicates the permission matrix.
        The permission_matrix structure is documented below.
        """
        return pulumi.get(self, "permission_matrices")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Sequence['outputs.DeployEnvironmentPermission']]:
        """
        Indicates the user permission.
        The permission structure is documented below.
        """
        return pulumi.get(self, "permissions")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the project ID for CodeArts service.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def proxies(self) -> pulumi.Output[Sequence['outputs.DeployEnvironmentProxy']]:
        """
        Indicates the proxy hosts list.
        The proxies structure is documented below.
        """
        return pulumi.get(self, "proxies")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

