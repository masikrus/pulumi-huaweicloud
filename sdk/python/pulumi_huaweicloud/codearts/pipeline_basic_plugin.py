# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PipelineBasicPluginArgs', 'PipelineBasicPlugin']

@pulumi.input_type
class PipelineBasicPluginArgs:
    def __init__(__self__, *,
                 business_type: pulumi.Input[_builtins.str],
                 display_name: pulumi.Input[_builtins.str],
                 plugin_name: pulumi.Input[_builtins.str],
                 business_type_display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_composition_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_attribution: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PipelineBasicPlugin resource.
        :param pulumi.Input[_builtins.str] business_type: Specifies the service type.
        :param pulumi.Input[_builtins.str] display_name: Specifies the display name.
        :param pulumi.Input[_builtins.str] plugin_name: Specifies the basic plugin name.
        :param pulumi.Input[_builtins.str] business_type_display_name: Specifies the display name of service type.
        :param pulumi.Input[_builtins.str] description: Specifies the basic plugin description.
        :param pulumi.Input[_builtins.str] icon_url: Specifies the icon URL.
        :param pulumi.Input[_builtins.str] plugin_composition_type: Specifies the combination extension type.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] runtime_attribution: Specifies the runtime attributes.
        """
        pulumi.set(__self__, "business_type", business_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "plugin_name", plugin_name)
        if business_type_display_name is not None:
            pulumi.set(__self__, "business_type_display_name", business_type_display_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if plugin_composition_type is not None:
            pulumi.set(__self__, "plugin_composition_type", plugin_composition_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if runtime_attribution is not None:
            pulumi.set(__self__, "runtime_attribution", runtime_attribution)

    @_builtins.property
    @pulumi.getter(name="businessType")
    def business_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the service type.
        """
        return pulumi.get(self, "business_type")

    @business_type.setter
    def business_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "business_type", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the display name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the basic plugin name.
        """
        return pulumi.get(self, "plugin_name")

    @plugin_name.setter
    def plugin_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "plugin_name", value)

    @_builtins.property
    @pulumi.getter(name="businessTypeDisplayName")
    def business_type_display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the display name of service type.
        """
        return pulumi.get(self, "business_type_display_name")

    @business_type_display_name.setter
    def business_type_display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "business_type_display_name", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the basic plugin description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the icon URL.
        """
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icon_url", value)

    @_builtins.property
    @pulumi.getter(name="pluginCompositionType")
    def plugin_composition_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the combination extension type.
        """
        return pulumi.get(self, "plugin_composition_type")

    @plugin_composition_type.setter
    def plugin_composition_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plugin_composition_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="runtimeAttribution")
    def runtime_attribution(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the runtime attributes.
        """
        return pulumi.get(self, "runtime_attribution")

    @runtime_attribution.setter
    def runtime_attribution(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "runtime_attribution", value)


@pulumi.input_type
class _PipelineBasicPluginState:
    def __init__(__self__, *,
                 business_type: Optional[pulumi.Input[_builtins.str]] = None,
                 business_type_display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 maintainers: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_composition_type: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_attribution: Optional[pulumi.Input[_builtins.str]] = None,
                 unique_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PipelineBasicPlugin resources.
        :param pulumi.Input[_builtins.str] business_type: Specifies the service type.
        :param pulumi.Input[_builtins.str] business_type_display_name: Specifies the display name of service type.
        :param pulumi.Input[_builtins.str] description: Specifies the basic plugin description.
        :param pulumi.Input[_builtins.str] display_name: Specifies the display name.
        :param pulumi.Input[_builtins.str] icon_url: Specifies the icon URL.
        :param pulumi.Input[_builtins.str] maintainers: Indicates the maintenance engineer.
        :param pulumi.Input[_builtins.str] plugin_composition_type: Specifies the combination extension type.
        :param pulumi.Input[_builtins.str] plugin_name: Specifies the basic plugin name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] runtime_attribution: Specifies the runtime attributes.
        :param pulumi.Input[_builtins.str] unique_id: Indicates the unique ID.
        """
        if business_type is not None:
            pulumi.set(__self__, "business_type", business_type)
        if business_type_display_name is not None:
            pulumi.set(__self__, "business_type_display_name", business_type_display_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if maintainers is not None:
            pulumi.set(__self__, "maintainers", maintainers)
        if plugin_composition_type is not None:
            pulumi.set(__self__, "plugin_composition_type", plugin_composition_type)
        if plugin_name is not None:
            pulumi.set(__self__, "plugin_name", plugin_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if runtime_attribution is not None:
            pulumi.set(__self__, "runtime_attribution", runtime_attribution)
        if unique_id is not None:
            pulumi.set(__self__, "unique_id", unique_id)

    @_builtins.property
    @pulumi.getter(name="businessType")
    def business_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the service type.
        """
        return pulumi.get(self, "business_type")

    @business_type.setter
    def business_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "business_type", value)

    @_builtins.property
    @pulumi.getter(name="businessTypeDisplayName")
    def business_type_display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the display name of service type.
        """
        return pulumi.get(self, "business_type_display_name")

    @business_type_display_name.setter
    def business_type_display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "business_type_display_name", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the basic plugin description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the display name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the icon URL.
        """
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icon_url", value)

    @_builtins.property
    @pulumi.getter
    def maintainers(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the maintenance engineer.
        """
        return pulumi.get(self, "maintainers")

    @maintainers.setter
    def maintainers(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maintainers", value)

    @_builtins.property
    @pulumi.getter(name="pluginCompositionType")
    def plugin_composition_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the combination extension type.
        """
        return pulumi.get(self, "plugin_composition_type")

    @plugin_composition_type.setter
    def plugin_composition_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plugin_composition_type", value)

    @_builtins.property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the basic plugin name.
        """
        return pulumi.get(self, "plugin_name")

    @plugin_name.setter
    def plugin_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plugin_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="runtimeAttribution")
    def runtime_attribution(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the runtime attributes.
        """
        return pulumi.get(self, "runtime_attribution")

    @runtime_attribution.setter
    def runtime_attribution(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "runtime_attribution", value)

    @_builtins.property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the unique ID.
        """
        return pulumi.get(self, "unique_id")

    @unique_id.setter
    def unique_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "unique_id", value)


@pulumi.type_token("huaweicloud:codearts/pipelineBasicPlugin:PipelineBasicPlugin")
class PipelineBasicPlugin(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 business_type: Optional[pulumi.Input[_builtins.str]] = None,
                 business_type_display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_composition_type: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_attribution: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts pipeline basic plugin resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        plugin_name = config.require_object("pluginName")
        display_name = config.require_object("displayName")
        business_type = config.require_object("businessType")
        test = huaweicloud.codearts.PipelineBasicPlugin("test",
            plugin_name=plugin_name,
            display_name=display_name,
            business_type=business_type)
        ```

        ## Import

        The basic plugin can be imported using `plugin_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipelineBasicPlugin:PipelineBasicPlugin test <plugin_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] business_type: Specifies the service type.
        :param pulumi.Input[_builtins.str] business_type_display_name: Specifies the display name of service type.
        :param pulumi.Input[_builtins.str] description: Specifies the basic plugin description.
        :param pulumi.Input[_builtins.str] display_name: Specifies the display name.
        :param pulumi.Input[_builtins.str] icon_url: Specifies the icon URL.
        :param pulumi.Input[_builtins.str] plugin_composition_type: Specifies the combination extension type.
        :param pulumi.Input[_builtins.str] plugin_name: Specifies the basic plugin name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] runtime_attribution: Specifies the runtime attributes.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelineBasicPluginArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts pipeline basic plugin resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        plugin_name = config.require_object("pluginName")
        display_name = config.require_object("displayName")
        business_type = config.require_object("businessType")
        test = huaweicloud.codearts.PipelineBasicPlugin("test",
            plugin_name=plugin_name,
            display_name=display_name,
            business_type=business_type)
        ```

        ## Import

        The basic plugin can be imported using `plugin_name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipelineBasicPlugin:PipelineBasicPlugin test <plugin_name>
        ```

        :param str resource_name: The name of the resource.
        :param PipelineBasicPluginArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelineBasicPluginArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 business_type: Optional[pulumi.Input[_builtins.str]] = None,
                 business_type_display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_composition_type: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_attribution: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelineBasicPluginArgs.__new__(PipelineBasicPluginArgs)

            if business_type is None and not opts.urn:
                raise TypeError("Missing required property 'business_type'")
            __props__.__dict__["business_type"] = business_type
            __props__.__dict__["business_type_display_name"] = business_type_display_name
            __props__.__dict__["description"] = description
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["icon_url"] = icon_url
            __props__.__dict__["plugin_composition_type"] = plugin_composition_type
            if plugin_name is None and not opts.urn:
                raise TypeError("Missing required property 'plugin_name'")
            __props__.__dict__["plugin_name"] = plugin_name
            __props__.__dict__["region"] = region
            __props__.__dict__["runtime_attribution"] = runtime_attribution
            __props__.__dict__["maintainers"] = None
            __props__.__dict__["unique_id"] = None
        super(PipelineBasicPlugin, __self__).__init__(
            'huaweicloud:codearts/pipelineBasicPlugin:PipelineBasicPlugin',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            business_type: Optional[pulumi.Input[_builtins.str]] = None,
            business_type_display_name: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            display_name: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            icon_url: Optional[pulumi.Input[_builtins.str]] = None,
            maintainers: Optional[pulumi.Input[_builtins.str]] = None,
            plugin_composition_type: Optional[pulumi.Input[_builtins.str]] = None,
            plugin_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            runtime_attribution: Optional[pulumi.Input[_builtins.str]] = None,
            unique_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'PipelineBasicPlugin':
        """
        Get an existing PipelineBasicPlugin resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] business_type: Specifies the service type.
        :param pulumi.Input[_builtins.str] business_type_display_name: Specifies the display name of service type.
        :param pulumi.Input[_builtins.str] description: Specifies the basic plugin description.
        :param pulumi.Input[_builtins.str] display_name: Specifies the display name.
        :param pulumi.Input[_builtins.str] icon_url: Specifies the icon URL.
        :param pulumi.Input[_builtins.str] maintainers: Indicates the maintenance engineer.
        :param pulumi.Input[_builtins.str] plugin_composition_type: Specifies the combination extension type.
        :param pulumi.Input[_builtins.str] plugin_name: Specifies the basic plugin name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] runtime_attribution: Specifies the runtime attributes.
        :param pulumi.Input[_builtins.str] unique_id: Indicates the unique ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelineBasicPluginState.__new__(_PipelineBasicPluginState)

        __props__.__dict__["business_type"] = business_type
        __props__.__dict__["business_type_display_name"] = business_type_display_name
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["icon_url"] = icon_url
        __props__.__dict__["maintainers"] = maintainers
        __props__.__dict__["plugin_composition_type"] = plugin_composition_type
        __props__.__dict__["plugin_name"] = plugin_name
        __props__.__dict__["region"] = region
        __props__.__dict__["runtime_attribution"] = runtime_attribution
        __props__.__dict__["unique_id"] = unique_id
        return PipelineBasicPlugin(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="businessType")
    def business_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the service type.
        """
        return pulumi.get(self, "business_type")

    @_builtins.property
    @pulumi.getter(name="businessTypeDisplayName")
    def business_type_display_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the display name of service type.
        """
        return pulumi.get(self, "business_type_display_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the basic plugin description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the icon URL.
        """
        return pulumi.get(self, "icon_url")

    @_builtins.property
    @pulumi.getter
    def maintainers(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the maintenance engineer.
        """
        return pulumi.get(self, "maintainers")

    @_builtins.property
    @pulumi.getter(name="pluginCompositionType")
    def plugin_composition_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the combination extension type.
        """
        return pulumi.get(self, "plugin_composition_type")

    @_builtins.property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the basic plugin name.
        """
        return pulumi.get(self, "plugin_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="runtimeAttribution")
    def runtime_attribution(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the runtime attributes.
        """
        return pulumi.get(self, "runtime_attribution")

    @_builtins.property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the unique ID.
        """
        return pulumi.get(self, "unique_id")

