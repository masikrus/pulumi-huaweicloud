# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PipelineArgs', 'Pipeline']

@pulumi.input_type
class PipelineArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[_builtins.str],
                 is_publish: pulumi.Input[_builtins.bool],
                 project_id: pulumi.Input[_builtins.str],
                 banned: Optional[pulumi.Input[_builtins.bool]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 concurrency_control: Optional[pulumi.Input['PipelineConcurrencyControlArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 manifest_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_level_permission_switch: Optional[pulumi.Input[_builtins.bool]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineScheduleArgs']]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSourceArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTriggerArgs']]]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineVariableArgs']]]] = None):
        """
        The set of arguments for constructing a Pipeline resource.
        :param pulumi.Input[_builtins.str] definition: Specifies the pipeline definition JSON.
        :param pulumi.Input[_builtins.bool] is_publish: Specifies whether it is a change-triggered pipeline. Defaults to **false**.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.bool] banned: Specifies whether the pipeline is banned. Defaults to **false**.
        :param pulumi.Input[_builtins.str] component_id: Specifies the microservice ID.
        :param pulumi.Input['PipelineConcurrencyControlArgs'] concurrency_control: Specifies the pipeline concurrency control information.
               The concurrency_control structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the parameter description.
        :param pulumi.Input[_builtins.str] group_id: Specifies the pipeline group ID.
        :param pulumi.Input[_builtins.str] manifest_version: Specifies the pipeline structure definition version. Defaults to **3.0**.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name. The value can contain a maximum of **32** characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] parameter_groups: Specifies the parameter groups associated with.
        :param pulumi.Input[_builtins.str] project_name: Specifies the project name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] resource_level_permission_switch: Specifies whether to use resource level permission.
               Default to **false**, which means project level permission will be used.
               
               <a name="block--sources"></a>
               The `sources` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['PipelineScheduleArgs']]] schedules: Specifies the pipeline schedule settings.
               The schedules structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineSourceArgs']]] sources: Specifies the pipeline source information.
               The sources structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Specifies the tag IDs.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineTriggerArgs']]] triggers: Specifies the pipeline trigger settings.
               The triggers structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineVariableArgs']]] variables: Specifies the custom variables.
               The variables structure is documented below.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "is_publish", is_publish)
        pulumi.set(__self__, "project_id", project_id)
        if banned is not None:
            pulumi.set(__self__, "banned", banned)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if concurrency_control is not None:
            pulumi.set(__self__, "concurrency_control", concurrency_control)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if manifest_version is not None:
            pulumi.set(__self__, "manifest_version", manifest_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_groups is not None:
            pulumi.set(__self__, "parameter_groups", parameter_groups)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_level_permission_switch is not None:
            pulumi.set(__self__, "resource_level_permission_switch", resource_level_permission_switch)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def definition(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the pipeline definition JSON.
        """
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "definition", value)

    @_builtins.property
    @pulumi.getter(name="isPublish")
    def is_publish(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether it is a change-triggered pipeline. Defaults to **false**.
        """
        return pulumi.get(self, "is_publish")

    @is_publish.setter
    def is_publish(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "is_publish", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CodeArts project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def banned(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the pipeline is banned. Defaults to **false**.
        """
        return pulumi.get(self, "banned")

    @banned.setter
    def banned(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "banned", value)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the microservice ID.
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "component_id", value)

    @_builtins.property
    @pulumi.getter(name="concurrencyControl")
    def concurrency_control(self) -> Optional[pulumi.Input['PipelineConcurrencyControlArgs']]:
        """
        Specifies the pipeline concurrency control information.
        The concurrency_control structure is documented below.
        """
        return pulumi.get(self, "concurrency_control")

    @concurrency_control.setter
    def concurrency_control(self, value: Optional[pulumi.Input['PipelineConcurrencyControlArgs']]):
        pulumi.set(self, "concurrency_control", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="manifestVersion")
    def manifest_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline structure definition version. Defaults to **3.0**.
        """
        return pulumi.get(self, "manifest_version")

    @manifest_version.setter
    def manifest_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "manifest_version", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom variable name. The value can contain a maximum of **32** characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parameterGroups")
    def parameter_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the parameter groups associated with.
        """
        return pulumi.get(self, "parameter_groups")

    @parameter_groups.setter
    def parameter_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameter_groups", value)

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project name.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceLevelPermissionSwitch")
    def resource_level_permission_switch(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to use resource level permission.
        Default to **false**, which means project level permission will be used.

        <a name="block--sources"></a>
        The `sources` block supports:
        """
        return pulumi.get(self, "resource_level_permission_switch")

    @resource_level_permission_switch.setter
    def resource_level_permission_switch(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resource_level_permission_switch", value)

    @_builtins.property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineScheduleArgs']]]]:
        """
        Specifies the pipeline schedule settings.
        The schedules structure is documented below.
        """
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSourceArgs']]]]:
        """
        Specifies the pipeline source information.
        The sources structure is documented below.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the tag IDs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTriggerArgs']]]]:
        """
        Specifies the pipeline trigger settings.
        The triggers structure is documented below.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineVariableArgs']]]]:
        """
        Specifies the custom variables.
        The variables structure is documented below.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class _PipelineState:
    def __init__(__self__, *,
                 banned: Optional[pulumi.Input[_builtins.bool]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 concurrency_control: Optional[pulumi.Input['PipelineConcurrencyControlArgs']] = None,
                 create_time: Optional[pulumi.Input[_builtins.int]] = None,
                 creator_id: Optional[pulumi.Input[_builtins.str]] = None,
                 creator_name: Optional[pulumi.Input[_builtins.str]] = None,
                 definition: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_allow_edit: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_collect: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_publish: Optional[pulumi.Input[_builtins.bool]] = None,
                 manifest_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_level_permission_switch: Optional[pulumi.Input[_builtins.bool]] = None,
                 role_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineRolePermissionArgs']]]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineScheduleArgs']]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSourceArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTriggerArgs']]]] = None,
                 update_time: Optional[pulumi.Input[_builtins.int]] = None,
                 updater_id: Optional[pulumi.Input[_builtins.str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineVariableArgs']]]] = None,
                 webhook_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 webhook_iam_authentication: Optional[pulumi.Input[_builtins.bool]] = None,
                 webhook_url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Pipeline resources.
        :param pulumi.Input[_builtins.bool] banned: Specifies whether the pipeline is banned. Defaults to **false**.
        :param pulumi.Input[_builtins.str] component_id: Specifies the microservice ID.
        :param pulumi.Input['PipelineConcurrencyControlArgs'] concurrency_control: Specifies the pipeline concurrency control information.
               The concurrency_control structure is documented below.
        :param pulumi.Input[_builtins.int] create_time: Indicates the creation time.
        :param pulumi.Input[_builtins.str] creator_id: Indicates the creator ID.
        :param pulumi.Input[_builtins.str] creator_name: Indicates the creator name.
        :param pulumi.Input[_builtins.str] definition: Specifies the pipeline definition JSON.
        :param pulumi.Input[_builtins.str] description: Specifies the parameter description.
        :param pulumi.Input[_builtins.str] group_id: Specifies the pipeline group ID.
        :param pulumi.Input[_builtins.bool] is_allow_edit: Indicates whether the user is allowed to edit the permission.
        :param pulumi.Input[_builtins.bool] is_collect: Indicates whether the current user has collected it.
        :param pulumi.Input[_builtins.bool] is_publish: Specifies whether it is a change-triggered pipeline. Defaults to **false**.
        :param pulumi.Input[_builtins.str] manifest_version: Specifies the pipeline structure definition version. Defaults to **3.0**.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name. The value can contain a maximum of **32** characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] parameter_groups: Specifies the parameter groups associated with.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.str] project_name: Specifies the project name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] resource_level_permission_switch: Specifies whether to use resource level permission.
               Default to **false**, which means project level permission will be used.
               
               <a name="block--sources"></a>
               The `sources` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['PipelineRolePermissionArgs']]] role_permissions: Indicates the role permissions.
               The role_permissions structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineScheduleArgs']]] schedules: Specifies the pipeline schedule settings.
               The schedules structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineSourceArgs']]] sources: Specifies the pipeline source information.
               The sources structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Specifies the tag IDs.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineTriggerArgs']]] triggers: Specifies the pipeline trigger settings.
               The triggers structure is documented below.
        :param pulumi.Input[_builtins.int] update_time: Indicates the last update time.
        :param pulumi.Input[_builtins.str] updater_id: Indicates the last updater ID.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineVariableArgs']]] variables: Specifies the custom variables.
               The variables structure is documented below.
        :param pulumi.Input[_builtins.bool] webhook_enable: Indicates whether the webhook is enabled.
        :param pulumi.Input[_builtins.bool] webhook_iam_authentication: Indicates whether to enable IAM authentication when webhook triggered.
        :param pulumi.Input[_builtins.str] webhook_url: Indicates the webhook source URL.
        """
        if banned is not None:
            pulumi.set(__self__, "banned", banned)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if concurrency_control is not None:
            pulumi.set(__self__, "concurrency_control", concurrency_control)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator_id is not None:
            pulumi.set(__self__, "creator_id", creator_id)
        if creator_name is not None:
            pulumi.set(__self__, "creator_name", creator_name)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if is_allow_edit is not None:
            pulumi.set(__self__, "is_allow_edit", is_allow_edit)
        if is_collect is not None:
            pulumi.set(__self__, "is_collect", is_collect)
        if is_publish is not None:
            pulumi.set(__self__, "is_publish", is_publish)
        if manifest_version is not None:
            pulumi.set(__self__, "manifest_version", manifest_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_groups is not None:
            pulumi.set(__self__, "parameter_groups", parameter_groups)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_level_permission_switch is not None:
            pulumi.set(__self__, "resource_level_permission_switch", resource_level_permission_switch)
        if role_permissions is not None:
            pulumi.set(__self__, "role_permissions", role_permissions)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if updater_id is not None:
            pulumi.set(__self__, "updater_id", updater_id)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)
        if webhook_enable is not None:
            pulumi.set(__self__, "webhook_enable", webhook_enable)
        if webhook_iam_authentication is not None:
            pulumi.set(__self__, "webhook_iam_authentication", webhook_iam_authentication)
        if webhook_url is not None:
            pulumi.set(__self__, "webhook_url", webhook_url)

    @_builtins.property
    @pulumi.getter
    def banned(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the pipeline is banned. Defaults to **false**.
        """
        return pulumi.get(self, "banned")

    @banned.setter
    def banned(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "banned", value)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the microservice ID.
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "component_id", value)

    @_builtins.property
    @pulumi.getter(name="concurrencyControl")
    def concurrency_control(self) -> Optional[pulumi.Input['PipelineConcurrencyControlArgs']]:
        """
        Specifies the pipeline concurrency control information.
        The concurrency_control structure is documented below.
        """
        return pulumi.get(self, "concurrency_control")

    @concurrency_control.setter
    def concurrency_control(self, value: Optional[pulumi.Input['PipelineConcurrencyControlArgs']]):
        pulumi.set(self, "concurrency_control", value)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creator ID.
        """
        return pulumi.get(self, "creator_id")

    @creator_id.setter
    def creator_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creator_id", value)

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creator name.
        """
        return pulumi.get(self, "creator_name")

    @creator_name.setter
    def creator_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creator_name", value)

    @_builtins.property
    @pulumi.getter
    def definition(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline definition JSON.
        """
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "definition", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="isAllowEdit")
    def is_allow_edit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the user is allowed to edit the permission.
        """
        return pulumi.get(self, "is_allow_edit")

    @is_allow_edit.setter
    def is_allow_edit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_allow_edit", value)

    @_builtins.property
    @pulumi.getter(name="isCollect")
    def is_collect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the current user has collected it.
        """
        return pulumi.get(self, "is_collect")

    @is_collect.setter
    def is_collect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_collect", value)

    @_builtins.property
    @pulumi.getter(name="isPublish")
    def is_publish(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it is a change-triggered pipeline. Defaults to **false**.
        """
        return pulumi.get(self, "is_publish")

    @is_publish.setter
    def is_publish(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_publish", value)

    @_builtins.property
    @pulumi.getter(name="manifestVersion")
    def manifest_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline structure definition version. Defaults to **3.0**.
        """
        return pulumi.get(self, "manifest_version")

    @manifest_version.setter
    def manifest_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "manifest_version", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom variable name. The value can contain a maximum of **32** characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parameterGroups")
    def parameter_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the parameter groups associated with.
        """
        return pulumi.get(self, "parameter_groups")

    @parameter_groups.setter
    def parameter_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameter_groups", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CodeArts project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project name.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceLevelPermissionSwitch")
    def resource_level_permission_switch(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to use resource level permission.
        Default to **false**, which means project level permission will be used.

        <a name="block--sources"></a>
        The `sources` block supports:
        """
        return pulumi.get(self, "resource_level_permission_switch")

    @resource_level_permission_switch.setter
    def resource_level_permission_switch(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resource_level_permission_switch", value)

    @_builtins.property
    @pulumi.getter(name="rolePermissions")
    def role_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineRolePermissionArgs']]]]:
        """
        Indicates the role permissions.
        The role_permissions structure is documented below.
        """
        return pulumi.get(self, "role_permissions")

    @role_permissions.setter
    def role_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineRolePermissionArgs']]]]):
        pulumi.set(self, "role_permissions", value)

    @_builtins.property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineScheduleArgs']]]]:
        """
        Specifies the pipeline schedule settings.
        The schedules structure is documented below.
        """
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSourceArgs']]]]:
        """
        Specifies the pipeline source information.
        The sources structure is documented below.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the tag IDs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTriggerArgs']]]]:
        """
        Specifies the pipeline trigger settings.
        The triggers structure is documented below.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the last update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "update_time", value)

    @_builtins.property
    @pulumi.getter(name="updaterId")
    def updater_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the last updater ID.
        """
        return pulumi.get(self, "updater_id")

    @updater_id.setter
    def updater_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updater_id", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineVariableArgs']]]]:
        """
        Specifies the custom variables.
        The variables structure is documented below.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineVariableArgs']]]]):
        pulumi.set(self, "variables", value)

    @_builtins.property
    @pulumi.getter(name="webhookEnable")
    def webhook_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the webhook is enabled.
        """
        return pulumi.get(self, "webhook_enable")

    @webhook_enable.setter
    def webhook_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "webhook_enable", value)

    @_builtins.property
    @pulumi.getter(name="webhookIamAuthentication")
    def webhook_iam_authentication(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether to enable IAM authentication when webhook triggered.
        """
        return pulumi.get(self, "webhook_iam_authentication")

    @webhook_iam_authentication.setter
    def webhook_iam_authentication(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "webhook_iam_authentication", value)

    @_builtins.property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the webhook source URL.
        """
        return pulumi.get(self, "webhook_url")

    @webhook_url.setter
    def webhook_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "webhook_url", value)


@pulumi.type_token("huaweicloud:codearts/pipeline:Pipeline")
class Pipeline(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 banned: Optional[pulumi.Input[_builtins.bool]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 concurrency_control: Optional[pulumi.Input[Union['PipelineConcurrencyControlArgs', 'PipelineConcurrencyControlArgsDict']]] = None,
                 definition: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_publish: Optional[pulumi.Input[_builtins.bool]] = None,
                 manifest_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_level_permission_switch: Optional[pulumi.Input[_builtins.bool]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineScheduleArgs', 'PipelineScheduleArgsDict']]]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineSourceArgs', 'PipelineSourceArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineTriggerArgs', 'PipelineTriggerArgsDict']]]]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineVariableArgs', 'PipelineVariableArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a CodeArts pipeline resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        name = config.require_object("name")
        test = huaweicloud.codearts.Pipeline("test",
            project_id=codearts_project_id,
            name=name,
            description="demo",
            is_publish=False,
            definition=json.dumps({
                "stages": [{
                    "name": "Stage_1",
                    "identifier": "xxx",
                    "run_condition": None,
                    "type": None,
                    "sequence": 0,
                    "parallel": None,
                    "pre": [{
                        "runtime_attribution": None,
                        "multi_step_editable": 0,
                        "official_task_version": None,
                        "icon_url": None,
                        "name": None,
                        "task": "official_devcloud_autoTrigger",
                        "business_type": None,
                        "inputs": None,
                        "env": None,
                        "sequence": 0,
                        "identifier": None,
                        "endpoint_ids": None,
                    }],
                    "post": None,
                    "jobs": [{
                        "id": "",
                        "identifier_old": None,
                        "stage_index": None,
                        "type": None,
                        "name": "ManualReview",
                        "async": None,
                        "identifier": "JOB_EyJYf",
                        "sequence": 0,
                        "condition": "${{ default() }}",
                        "strategy": {
                            "select_strategy": "selected",
                        },
                        "timeout": "",
                        "resource": "{\\"type\\":\\"system\\",\\"arch\\":\\"x86\\"}",
                        "steps": [{
                            "runtime_attribution": "agentless",
                            "multi_step_editable": 0,
                            "official_task_version": "0.0.5",
                            "icon_url": "xxx",
                            "name": "ManualReview",
                            "task": "official_devcloud_checkpoint",
                            "business_type": "Normal",
                            "inputs": [
                                {
                                    "key": "audit_source",
                                    "value": "members",
                                },
                                {
                                    "key": "approvers",
                                    "value": "xxx",
                                },
                                {
                                    "key": "audit_role",
                                    "value": "",
                                },
                                {
                                    "key": "check_strategy",
                                    "value": "all",
                                },
                                {
                                    "key": "timeout_strategy",
                                    "value": "reject",
                                },
                                {
                                    "key": "timeout",
                                    "value": 3600,
                                },
                                {
                                    "key": "comment",
                                    "value": "",
                                },
                            ],
                            "env": [],
                            "sequence": 0,
                            "identifier": "xxx",
                            "endpoint_ids": [],
                        }],
                        "unfinished_steps": [],
                        "condition_tag": "",
                        "exec_type": "AGENTLESS_JOB",
                        "depends_on": [],
                        "reusable_job_id": None,
                    }],
                    "depends_on": [],
                    "run_always": False,
                }],
            }))
        ```

        ## Import

        The pipeline can be imported using `project_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipeline:Pipeline test <project_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] banned: Specifies whether the pipeline is banned. Defaults to **false**.
        :param pulumi.Input[_builtins.str] component_id: Specifies the microservice ID.
        :param pulumi.Input[Union['PipelineConcurrencyControlArgs', 'PipelineConcurrencyControlArgsDict']] concurrency_control: Specifies the pipeline concurrency control information.
               The concurrency_control structure is documented below.
        :param pulumi.Input[_builtins.str] definition: Specifies the pipeline definition JSON.
        :param pulumi.Input[_builtins.str] description: Specifies the parameter description.
        :param pulumi.Input[_builtins.str] group_id: Specifies the pipeline group ID.
        :param pulumi.Input[_builtins.bool] is_publish: Specifies whether it is a change-triggered pipeline. Defaults to **false**.
        :param pulumi.Input[_builtins.str] manifest_version: Specifies the pipeline structure definition version. Defaults to **3.0**.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name. The value can contain a maximum of **32** characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] parameter_groups: Specifies the parameter groups associated with.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.str] project_name: Specifies the project name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] resource_level_permission_switch: Specifies whether to use resource level permission.
               Default to **false**, which means project level permission will be used.
               
               <a name="block--sources"></a>
               The `sources` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineScheduleArgs', 'PipelineScheduleArgsDict']]]] schedules: Specifies the pipeline schedule settings.
               The schedules structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineSourceArgs', 'PipelineSourceArgsDict']]]] sources: Specifies the pipeline source information.
               The sources structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Specifies the tag IDs.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineTriggerArgs', 'PipelineTriggerArgsDict']]]] triggers: Specifies the pipeline trigger settings.
               The triggers structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineVariableArgs', 'PipelineVariableArgsDict']]]] variables: Specifies the custom variables.
               The variables structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts pipeline resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        name = config.require_object("name")
        test = huaweicloud.codearts.Pipeline("test",
            project_id=codearts_project_id,
            name=name,
            description="demo",
            is_publish=False,
            definition=json.dumps({
                "stages": [{
                    "name": "Stage_1",
                    "identifier": "xxx",
                    "run_condition": None,
                    "type": None,
                    "sequence": 0,
                    "parallel": None,
                    "pre": [{
                        "runtime_attribution": None,
                        "multi_step_editable": 0,
                        "official_task_version": None,
                        "icon_url": None,
                        "name": None,
                        "task": "official_devcloud_autoTrigger",
                        "business_type": None,
                        "inputs": None,
                        "env": None,
                        "sequence": 0,
                        "identifier": None,
                        "endpoint_ids": None,
                    }],
                    "post": None,
                    "jobs": [{
                        "id": "",
                        "identifier_old": None,
                        "stage_index": None,
                        "type": None,
                        "name": "ManualReview",
                        "async": None,
                        "identifier": "JOB_EyJYf",
                        "sequence": 0,
                        "condition": "${{ default() }}",
                        "strategy": {
                            "select_strategy": "selected",
                        },
                        "timeout": "",
                        "resource": "{\\"type\\":\\"system\\",\\"arch\\":\\"x86\\"}",
                        "steps": [{
                            "runtime_attribution": "agentless",
                            "multi_step_editable": 0,
                            "official_task_version": "0.0.5",
                            "icon_url": "xxx",
                            "name": "ManualReview",
                            "task": "official_devcloud_checkpoint",
                            "business_type": "Normal",
                            "inputs": [
                                {
                                    "key": "audit_source",
                                    "value": "members",
                                },
                                {
                                    "key": "approvers",
                                    "value": "xxx",
                                },
                                {
                                    "key": "audit_role",
                                    "value": "",
                                },
                                {
                                    "key": "check_strategy",
                                    "value": "all",
                                },
                                {
                                    "key": "timeout_strategy",
                                    "value": "reject",
                                },
                                {
                                    "key": "timeout",
                                    "value": 3600,
                                },
                                {
                                    "key": "comment",
                                    "value": "",
                                },
                            ],
                            "env": [],
                            "sequence": 0,
                            "identifier": "xxx",
                            "endpoint_ids": [],
                        }],
                        "unfinished_steps": [],
                        "condition_tag": "",
                        "exec_type": "AGENTLESS_JOB",
                        "depends_on": [],
                        "reusable_job_id": None,
                    }],
                    "depends_on": [],
                    "run_always": False,
                }],
            }))
        ```

        ## Import

        The pipeline can be imported using `project_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipeline:Pipeline test <project_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param PipelineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 banned: Optional[pulumi.Input[_builtins.bool]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 concurrency_control: Optional[pulumi.Input[Union['PipelineConcurrencyControlArgs', 'PipelineConcurrencyControlArgsDict']]] = None,
                 definition: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_publish: Optional[pulumi.Input[_builtins.bool]] = None,
                 manifest_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_level_permission_switch: Optional[pulumi.Input[_builtins.bool]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineScheduleArgs', 'PipelineScheduleArgsDict']]]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineSourceArgs', 'PipelineSourceArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineTriggerArgs', 'PipelineTriggerArgsDict']]]]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineVariableArgs', 'PipelineVariableArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelineArgs.__new__(PipelineArgs)

            __props__.__dict__["banned"] = banned
            __props__.__dict__["component_id"] = component_id
            __props__.__dict__["concurrency_control"] = concurrency_control
            if definition is None and not opts.urn:
                raise TypeError("Missing required property 'definition'")
            __props__.__dict__["definition"] = definition
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["group_id"] = group_id
            if is_publish is None and not opts.urn:
                raise TypeError("Missing required property 'is_publish'")
            __props__.__dict__["is_publish"] = is_publish
            __props__.__dict__["manifest_version"] = manifest_version
            __props__.__dict__["name"] = name
            __props__.__dict__["parameter_groups"] = parameter_groups
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_level_permission_switch"] = resource_level_permission_switch
            __props__.__dict__["schedules"] = schedules
            __props__.__dict__["sources"] = sources
            __props__.__dict__["tags"] = tags
            __props__.__dict__["triggers"] = triggers
            __props__.__dict__["variables"] = variables
            __props__.__dict__["create_time"] = None
            __props__.__dict__["creator_id"] = None
            __props__.__dict__["creator_name"] = None
            __props__.__dict__["is_allow_edit"] = None
            __props__.__dict__["is_collect"] = None
            __props__.__dict__["role_permissions"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["updater_id"] = None
            __props__.__dict__["webhook_enable"] = None
            __props__.__dict__["webhook_iam_authentication"] = None
            __props__.__dict__["webhook_url"] = None
        super(Pipeline, __self__).__init__(
            'huaweicloud:codearts/pipeline:Pipeline',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            banned: Optional[pulumi.Input[_builtins.bool]] = None,
            component_id: Optional[pulumi.Input[_builtins.str]] = None,
            concurrency_control: Optional[pulumi.Input[Union['PipelineConcurrencyControlArgs', 'PipelineConcurrencyControlArgsDict']]] = None,
            create_time: Optional[pulumi.Input[_builtins.int]] = None,
            creator_id: Optional[pulumi.Input[_builtins.str]] = None,
            creator_name: Optional[pulumi.Input[_builtins.str]] = None,
            definition: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            group_id: Optional[pulumi.Input[_builtins.str]] = None,
            is_allow_edit: Optional[pulumi.Input[_builtins.bool]] = None,
            is_collect: Optional[pulumi.Input[_builtins.bool]] = None,
            is_publish: Optional[pulumi.Input[_builtins.bool]] = None,
            manifest_version: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parameter_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            project_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_level_permission_switch: Optional[pulumi.Input[_builtins.bool]] = None,
            role_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineRolePermissionArgs', 'PipelineRolePermissionArgsDict']]]]] = None,
            schedules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineScheduleArgs', 'PipelineScheduleArgsDict']]]]] = None,
            sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineSourceArgs', 'PipelineSourceArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineTriggerArgs', 'PipelineTriggerArgsDict']]]]] = None,
            update_time: Optional[pulumi.Input[_builtins.int]] = None,
            updater_id: Optional[pulumi.Input[_builtins.str]] = None,
            variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineVariableArgs', 'PipelineVariableArgsDict']]]]] = None,
            webhook_enable: Optional[pulumi.Input[_builtins.bool]] = None,
            webhook_iam_authentication: Optional[pulumi.Input[_builtins.bool]] = None,
            webhook_url: Optional[pulumi.Input[_builtins.str]] = None) -> 'Pipeline':
        """
        Get an existing Pipeline resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] banned: Specifies whether the pipeline is banned. Defaults to **false**.
        :param pulumi.Input[_builtins.str] component_id: Specifies the microservice ID.
        :param pulumi.Input[Union['PipelineConcurrencyControlArgs', 'PipelineConcurrencyControlArgsDict']] concurrency_control: Specifies the pipeline concurrency control information.
               The concurrency_control structure is documented below.
        :param pulumi.Input[_builtins.int] create_time: Indicates the creation time.
        :param pulumi.Input[_builtins.str] creator_id: Indicates the creator ID.
        :param pulumi.Input[_builtins.str] creator_name: Indicates the creator name.
        :param pulumi.Input[_builtins.str] definition: Specifies the pipeline definition JSON.
        :param pulumi.Input[_builtins.str] description: Specifies the parameter description.
        :param pulumi.Input[_builtins.str] group_id: Specifies the pipeline group ID.
        :param pulumi.Input[_builtins.bool] is_allow_edit: Indicates whether the user is allowed to edit the permission.
        :param pulumi.Input[_builtins.bool] is_collect: Indicates whether the current user has collected it.
        :param pulumi.Input[_builtins.bool] is_publish: Specifies whether it is a change-triggered pipeline. Defaults to **false**.
        :param pulumi.Input[_builtins.str] manifest_version: Specifies the pipeline structure definition version. Defaults to **3.0**.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name. The value can contain a maximum of **32** characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] parameter_groups: Specifies the parameter groups associated with.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.str] project_name: Specifies the project name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] resource_level_permission_switch: Specifies whether to use resource level permission.
               Default to **false**, which means project level permission will be used.
               
               <a name="block--sources"></a>
               The `sources` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineRolePermissionArgs', 'PipelineRolePermissionArgsDict']]]] role_permissions: Indicates the role permissions.
               The role_permissions structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineScheduleArgs', 'PipelineScheduleArgsDict']]]] schedules: Specifies the pipeline schedule settings.
               The schedules structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineSourceArgs', 'PipelineSourceArgsDict']]]] sources: Specifies the pipeline source information.
               The sources structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Specifies the tag IDs.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineTriggerArgs', 'PipelineTriggerArgsDict']]]] triggers: Specifies the pipeline trigger settings.
               The triggers structure is documented below.
        :param pulumi.Input[_builtins.int] update_time: Indicates the last update time.
        :param pulumi.Input[_builtins.str] updater_id: Indicates the last updater ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineVariableArgs', 'PipelineVariableArgsDict']]]] variables: Specifies the custom variables.
               The variables structure is documented below.
        :param pulumi.Input[_builtins.bool] webhook_enable: Indicates whether the webhook is enabled.
        :param pulumi.Input[_builtins.bool] webhook_iam_authentication: Indicates whether to enable IAM authentication when webhook triggered.
        :param pulumi.Input[_builtins.str] webhook_url: Indicates the webhook source URL.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelineState.__new__(_PipelineState)

        __props__.__dict__["banned"] = banned
        __props__.__dict__["component_id"] = component_id
        __props__.__dict__["concurrency_control"] = concurrency_control
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["creator_id"] = creator_id
        __props__.__dict__["creator_name"] = creator_name
        __props__.__dict__["definition"] = definition
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["is_allow_edit"] = is_allow_edit
        __props__.__dict__["is_collect"] = is_collect
        __props__.__dict__["is_publish"] = is_publish
        __props__.__dict__["manifest_version"] = manifest_version
        __props__.__dict__["name"] = name
        __props__.__dict__["parameter_groups"] = parameter_groups
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_level_permission_switch"] = resource_level_permission_switch
        __props__.__dict__["role_permissions"] = role_permissions
        __props__.__dict__["schedules"] = schedules
        __props__.__dict__["sources"] = sources
        __props__.__dict__["tags"] = tags
        __props__.__dict__["triggers"] = triggers
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["updater_id"] = updater_id
        __props__.__dict__["variables"] = variables
        __props__.__dict__["webhook_enable"] = webhook_enable
        __props__.__dict__["webhook_iam_authentication"] = webhook_iam_authentication
        __props__.__dict__["webhook_url"] = webhook_url
        return Pipeline(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def banned(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the pipeline is banned. Defaults to **false**.
        """
        return pulumi.get(self, "banned")

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the microservice ID.
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter(name="concurrencyControl")
    def concurrency_control(self) -> pulumi.Output['outputs.PipelineConcurrencyControl']:
        """
        Specifies the pipeline concurrency control information.
        The concurrency_control structure is documented below.
        """
        return pulumi.get(self, "concurrency_control")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creator ID.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creator name.
        """
        return pulumi.get(self, "creator_name")

    @_builtins.property
    @pulumi.getter
    def definition(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the pipeline definition JSON.
        """
        return pulumi.get(self, "definition")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the pipeline group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="isAllowEdit")
    def is_allow_edit(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the user is allowed to edit the permission.
        """
        return pulumi.get(self, "is_allow_edit")

    @_builtins.property
    @pulumi.getter(name="isCollect")
    def is_collect(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the current user has collected it.
        """
        return pulumi.get(self, "is_collect")

    @_builtins.property
    @pulumi.getter(name="isPublish")
    def is_publish(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether it is a change-triggered pipeline. Defaults to **false**.
        """
        return pulumi.get(self, "is_publish")

    @_builtins.property
    @pulumi.getter(name="manifestVersion")
    def manifest_version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the pipeline structure definition version. Defaults to **3.0**.
        """
        return pulumi.get(self, "manifest_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the custom variable name. The value can contain a maximum of **32** characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parameterGroups")
    def parameter_groups(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the parameter groups associated with.
        """
        return pulumi.get(self, "parameter_groups")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CodeArts project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the project name.
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceLevelPermissionSwitch")
    def resource_level_permission_switch(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to use resource level permission.
        Default to **false**, which means project level permission will be used.

        <a name="block--sources"></a>
        The `sources` block supports:
        """
        return pulumi.get(self, "resource_level_permission_switch")

    @_builtins.property
    @pulumi.getter(name="rolePermissions")
    def role_permissions(self) -> pulumi.Output[Sequence['outputs.PipelineRolePermission']]:
        """
        Indicates the role permissions.
        The role_permissions structure is documented below.
        """
        return pulumi.get(self, "role_permissions")

    @_builtins.property
    @pulumi.getter
    def schedules(self) -> pulumi.Output[Optional[Sequence['outputs.PipelineSchedule']]]:
        """
        Specifies the pipeline schedule settings.
        The schedules structure is documented below.
        """
        return pulumi.get(self, "schedules")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> pulumi.Output[Optional[Sequence['outputs.PipelineSource']]]:
        """
        Specifies the pipeline source information.
        The sources structure is documented below.
        """
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the tag IDs.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Optional[Sequence['outputs.PipelineTrigger']]]:
        """
        Specifies the pipeline trigger settings.
        The triggers structure is documented below.
        """
        return pulumi.get(self, "triggers")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the last update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="updaterId")
    def updater_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the last updater ID.
        """
        return pulumi.get(self, "updater_id")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> pulumi.Output[Optional[Sequence['outputs.PipelineVariable']]]:
        """
        Specifies the custom variables.
        The variables structure is documented below.
        """
        return pulumi.get(self, "variables")

    @_builtins.property
    @pulumi.getter(name="webhookEnable")
    def webhook_enable(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the webhook is enabled.
        """
        return pulumi.get(self, "webhook_enable")

    @_builtins.property
    @pulumi.getter(name="webhookIamAuthentication")
    def webhook_iam_authentication(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether to enable IAM authentication when webhook triggered.
        """
        return pulumi.get(self, "webhook_iam_authentication")

    @_builtins.property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the webhook source URL.
        """
        return pulumi.get(self, "webhook_url")

