# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['BuildLogDownloadArgs', 'BuildLogDownload']

@pulumi.input_type
class BuildLogDownloadArgs:
    def __init__(__self__, *,
                 record_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 log_file: Optional[pulumi.Input[_builtins.str]] = None,
                 log_level: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BuildLogDownload resource.
        :param pulumi.Input[_builtins.str] record_id: Specifies the record ID.
        :param pulumi.Input[_builtins.str] log_file: Specifies the log file path. Defaults to *./{{record_id}}.txt*
        :param pulumi.Input[_builtins.str] log_level: Specifies the log level. Value can be **INFO** and **DEBUG**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "record_id", record_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if log_file is not None:
            pulumi.set(__self__, "log_file", log_file)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="recordId")
    def record_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the record ID.
        """
        return pulumi.get(self, "record_id")

    @record_id.setter
    def record_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "record_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="logFile")
    def log_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log file path. Defaults to *./{{record_id}}.txt*
        """
        return pulumi.get(self, "log_file")

    @log_file.setter
    def log_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_file", value)

    @_builtins.property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log level. Value can be **INFO** and **DEBUG**.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_level", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _BuildLogDownloadState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 log_file: Optional[pulumi.Input[_builtins.str]] = None,
                 log_level: Optional[pulumi.Input[_builtins.str]] = None,
                 record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BuildLogDownload resources.
        :param pulumi.Input[_builtins.str] log_file: Specifies the log file path. Defaults to *./{{record_id}}.txt*
        :param pulumi.Input[_builtins.str] log_level: Specifies the log level. Value can be **INFO** and **DEBUG**.
        :param pulumi.Input[_builtins.str] record_id: Specifies the record ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if log_file is not None:
            pulumi.set(__self__, "log_file", log_file)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if record_id is not None:
            pulumi.set(__self__, "record_id", record_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="logFile")
    def log_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log file path. Defaults to *./{{record_id}}.txt*
        """
        return pulumi.get(self, "log_file")

    @log_file.setter
    def log_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_file", value)

    @_builtins.property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log level. Value can be **INFO** and **DEBUG**.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_level", value)

    @_builtins.property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the record ID.
        """
        return pulumi.get(self, "record_id")

    @record_id.setter
    def record_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "record_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:codearts/buildLogDownload:BuildLogDownload")
class BuildLogDownload(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 log_file: Optional[pulumi.Input[_builtins.str]] = None,
                 log_level: Optional[pulumi.Input[_builtins.str]] = None,
                 record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts Build log download resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        record_id = config.require_object("recordId")
        test = huaweicloud.codearts.BuildLogDownload("test",
            record_id=record_id,
            log_file="./buildLog.txt")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] log_file: Specifies the log file path. Defaults to *./{{record_id}}.txt*
        :param pulumi.Input[_builtins.str] log_level: Specifies the log level. Value can be **INFO** and **DEBUG**.
        :param pulumi.Input[_builtins.str] record_id: Specifies the record ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BuildLogDownloadArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts Build log download resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        record_id = config.require_object("recordId")
        test = huaweicloud.codearts.BuildLogDownload("test",
            record_id=record_id,
            log_file="./buildLog.txt")
        ```

        :param str resource_name: The name of the resource.
        :param BuildLogDownloadArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BuildLogDownloadArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 log_file: Optional[pulumi.Input[_builtins.str]] = None,
                 log_level: Optional[pulumi.Input[_builtins.str]] = None,
                 record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BuildLogDownloadArgs.__new__(BuildLogDownloadArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["log_file"] = log_file
            __props__.__dict__["log_level"] = log_level
            if record_id is None and not opts.urn:
                raise TypeError("Missing required property 'record_id'")
            __props__.__dict__["record_id"] = record_id
            __props__.__dict__["region"] = region
        super(BuildLogDownload, __self__).__init__(
            'huaweicloud:codearts/buildLogDownload:BuildLogDownload',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            log_file: Optional[pulumi.Input[_builtins.str]] = None,
            log_level: Optional[pulumi.Input[_builtins.str]] = None,
            record_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'BuildLogDownload':
        """
        Get an existing BuildLogDownload resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] log_file: Specifies the log file path. Defaults to *./{{record_id}}.txt*
        :param pulumi.Input[_builtins.str] log_level: Specifies the log level. Value can be **INFO** and **DEBUG**.
        :param pulumi.Input[_builtins.str] record_id: Specifies the record ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BuildLogDownloadState.__new__(_BuildLogDownloadState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["log_file"] = log_file
        __props__.__dict__["log_level"] = log_level
        __props__.__dict__["record_id"] = record_id
        __props__.__dict__["region"] = region
        return BuildLogDownload(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="logFile")
    def log_file(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the log file path. Defaults to *./{{record_id}}.txt*
        """
        return pulumi.get(self, "log_file")

    @_builtins.property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the log level. Value can be **INFO** and **DEBUG**.
        """
        return pulumi.get(self, "log_level")

    @_builtins.property
    @pulumi.getter(name="recordId")
    def record_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the record ID.
        """
        return pulumi.get(self, "record_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

