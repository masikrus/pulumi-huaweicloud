# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBuildTaskRecordsResult',
    'AwaitableGetBuildTaskRecordsResult',
    'get_build_task_records',
    'get_build_task_records_output',
]

@pulumi.output_type
class GetBuildTaskRecordsResult:
    """
    A collection of values returned by getBuildTaskRecords.
    """
    def __init__(__self__, branches=None, build_project_id=None, from_date=None, id=None, records=None, region=None, tags=None, to_date=None, triggers=None):
        if branches and not isinstance(branches, list):
            raise TypeError("Expected argument 'branches' to be a list")
        pulumi.set(__self__, "branches", branches)
        if build_project_id and not isinstance(build_project_id, str):
            raise TypeError("Expected argument 'build_project_id' to be a str")
        pulumi.set(__self__, "build_project_id", build_project_id)
        if from_date and not isinstance(from_date, str):
            raise TypeError("Expected argument 'from_date' to be a str")
        pulumi.set(__self__, "from_date", from_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if to_date and not isinstance(to_date, str):
            raise TypeError("Expected argument 'to_date' to be a str")
        pulumi.set(__self__, "to_date", to_date)
        if triggers and not isinstance(triggers, list):
            raise TypeError("Expected argument 'triggers' to be a list")
        pulumi.set(__self__, "triggers", triggers)

    @_builtins.property
    @pulumi.getter
    def branches(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "branches")

    @_builtins.property
    @pulumi.getter(name="buildProjectId")
    def build_project_id(self) -> _builtins.str:
        return pulumi.get(self, "build_project_id")

    @_builtins.property
    @pulumi.getter(name="fromDate")
    def from_date(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "from_date")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetBuildTaskRecordsRecordResult']:
        """
        Indicates the build record list.
        The records structure is documented below.
        """
        return pulumi.get(self, "records")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="toDate")
    def to_date(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "to_date")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "triggers")


class AwaitableGetBuildTaskRecordsResult(GetBuildTaskRecordsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBuildTaskRecordsResult(
            branches=self.branches,
            build_project_id=self.build_project_id,
            from_date=self.from_date,
            id=self.id,
            records=self.records,
            region=self.region,
            tags=self.tags,
            to_date=self.to_date,
            triggers=self.triggers)


def get_build_task_records(branches: Optional[Sequence[_builtins.str]] = None,
                           build_project_id: Optional[_builtins.str] = None,
                           from_date: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           tags: Optional[Sequence[_builtins.str]] = None,
                           to_date: Optional[_builtins.str] = None,
                           triggers: Optional[Sequence[_builtins.str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBuildTaskRecordsResult:
    """
    Use this data source to get a list of CodeArts build task records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    build_project_id = config.require_object("buildProjectId")
    test = huaweicloud.codearts.get_build_task_records(build_project_id=build_project_id)
    ```


    :param Sequence[_builtins.str] branches: Specifies the list of branches to search.
    :param _builtins.str build_project_id: Specifies the build project ID.
    :param _builtins.str from_date: Specifies the start date for the query, format is **yyyy-MM-dd HH:mm:ss**.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] tags: Specifies the list of tags to search.
    :param _builtins.str to_date: Specifies the end date for the query, format is **yyyy-MM-dd HH:mm:ss**.
    :param Sequence[_builtins.str] triggers: Specifies the list of triggers to search.
    """
    __args__ = dict()
    __args__['branches'] = branches
    __args__['buildProjectId'] = build_project_id
    __args__['fromDate'] = from_date
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['toDate'] = to_date
    __args__['triggers'] = triggers
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getBuildTaskRecords:getBuildTaskRecords', __args__, opts=opts, typ=GetBuildTaskRecordsResult).value

    return AwaitableGetBuildTaskRecordsResult(
        branches=pulumi.get(__ret__, 'branches'),
        build_project_id=pulumi.get(__ret__, 'build_project_id'),
        from_date=pulumi.get(__ret__, 'from_date'),
        id=pulumi.get(__ret__, 'id'),
        records=pulumi.get(__ret__, 'records'),
        region=pulumi.get(__ret__, 'region'),
        tags=pulumi.get(__ret__, 'tags'),
        to_date=pulumi.get(__ret__, 'to_date'),
        triggers=pulumi.get(__ret__, 'triggers'))
def get_build_task_records_output(branches: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                  build_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  from_date: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  tags: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                  to_date: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  triggers: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBuildTaskRecordsResult]:
    """
    Use this data source to get a list of CodeArts build task records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    build_project_id = config.require_object("buildProjectId")
    test = huaweicloud.codearts.get_build_task_records(build_project_id=build_project_id)
    ```


    :param Sequence[_builtins.str] branches: Specifies the list of branches to search.
    :param _builtins.str build_project_id: Specifies the build project ID.
    :param _builtins.str from_date: Specifies the start date for the query, format is **yyyy-MM-dd HH:mm:ss**.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] tags: Specifies the list of tags to search.
    :param _builtins.str to_date: Specifies the end date for the query, format is **yyyy-MM-dd HH:mm:ss**.
    :param Sequence[_builtins.str] triggers: Specifies the list of triggers to search.
    """
    __args__ = dict()
    __args__['branches'] = branches
    __args__['buildProjectId'] = build_project_id
    __args__['fromDate'] = from_date
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['toDate'] = to_date
    __args__['triggers'] = triggers
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getBuildTaskRecords:getBuildTaskRecords', __args__, opts=opts, typ=GetBuildTaskRecordsResult)
    return __ret__.apply(lambda __response__: GetBuildTaskRecordsResult(
        branches=pulumi.get(__response__, 'branches'),
        build_project_id=pulumi.get(__response__, 'build_project_id'),
        from_date=pulumi.get(__response__, 'from_date'),
        id=pulumi.get(__response__, 'id'),
        records=pulumi.get(__response__, 'records'),
        region=pulumi.get(__response__, 'region'),
        tags=pulumi.get(__response__, 'tags'),
        to_date=pulumi.get(__response__, 'to_date'),
        triggers=pulumi.get(__response__, 'triggers')))
