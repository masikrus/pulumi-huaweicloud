# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InspectorHostArgs', 'InspectorHost']

@pulumi.input_type
class InspectorHostArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[_builtins.str],
                 os_type: pulumi.Input[_builtins.str],
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 jumper_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 smb_credential_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh_credential_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a InspectorHost resource.
        :param pulumi.Input[_builtins.str] ip: Specifies the host IP.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] os_type: Specifies the host os type. Valid values are **windows** and **linux**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] group_id: Specifies the host group ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] jumper_server_id: Specifies the jumper server ID. Only available for **linux** host.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the host name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] smb_credential_id: Specifies the smb credential ID for **windows** host.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] ssh_credential_id: Specifies the host ssh credential ID for **linux** host.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "os_type", os_type)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if jumper_server_id is not None:
            pulumi.set(__self__, "jumper_server_id", jumper_server_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if smb_credential_id is not None:
            pulumi.set(__self__, "smb_credential_id", smb_credential_id)
        if ssh_credential_id is not None:
            pulumi.set(__self__, "ssh_credential_id", ssh_credential_id)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the host IP.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the host os type. Valid values are **windows** and **linux**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host group ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="jumperServerId")
    def jumper_server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the jumper server ID. Only available for **linux** host.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "jumper_server_id")

    @jumper_server_id.setter
    def jumper_server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "jumper_server_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="smbCredentialId")
    def smb_credential_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the smb credential ID for **windows** host.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "smb_credential_id")

    @smb_credential_id.setter
    def smb_credential_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "smb_credential_id", value)

    @_builtins.property
    @pulumi.getter(name="sshCredentialId")
    def ssh_credential_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host ssh credential ID for **linux** host.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "ssh_credential_id")

    @ssh_credential_id.setter
    def ssh_credential_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh_credential_id", value)


@pulumi.input_type
class _InspectorHostState:
    def __init__(__self__, *,
                 auth_status: Optional[pulumi.Input[_builtins.int]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 jumper_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_scan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_scan_infos: Optional[pulumi.Input[Sequence[pulumi.Input['InspectorHostLastScanInfoArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 smb_credential_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh_credential_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering InspectorHost resources.
        :param pulumi.Input[_builtins.int] auth_status: Indicates the auth status.
               Value can be as follows:
               + **-1**: unknown
               + **0**: connected
               + **1**: unreachable
               + **2**: login failed
        :param pulumi.Input[_builtins.str] group_id: Specifies the host group ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] ip: Specifies the host IP.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] jumper_server_id: Specifies the jumper server ID. Only available for **linux** host.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] last_scan_id: Indicates the last scan ID.
        :param pulumi.Input[Sequence[pulumi.Input['InspectorHostLastScanInfoArgs']]] last_scan_infos: Indicates the last scan informations.
               The last_scan_info structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the host name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] os_type: Specifies the host os type. Valid values are **windows** and **linux**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] smb_credential_id: Specifies the smb credential ID for **windows** host.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] ssh_credential_id: Specifies the host ssh credential ID for **linux** host.
               Changing this creates a new resource.
        """
        if auth_status is not None:
            pulumi.set(__self__, "auth_status", auth_status)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if jumper_server_id is not None:
            pulumi.set(__self__, "jumper_server_id", jumper_server_id)
        if last_scan_id is not None:
            pulumi.set(__self__, "last_scan_id", last_scan_id)
        if last_scan_infos is not None:
            pulumi.set(__self__, "last_scan_infos", last_scan_infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if smb_credential_id is not None:
            pulumi.set(__self__, "smb_credential_id", smb_credential_id)
        if ssh_credential_id is not None:
            pulumi.set(__self__, "ssh_credential_id", ssh_credential_id)

    @_builtins.property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the auth status.
        Value can be as follows:
        + **-1**: unknown
        + **0**: connected
        + **1**: unreachable
        + **2**: login failed
        """
        return pulumi.get(self, "auth_status")

    @auth_status.setter
    def auth_status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "auth_status", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host group ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host IP.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter(name="jumperServerId")
    def jumper_server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the jumper server ID. Only available for **linux** host.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "jumper_server_id")

    @jumper_server_id.setter
    def jumper_server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "jumper_server_id", value)

    @_builtins.property
    @pulumi.getter(name="lastScanId")
    def last_scan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the last scan ID.
        """
        return pulumi.get(self, "last_scan_id")

    @last_scan_id.setter
    def last_scan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_scan_id", value)

    @_builtins.property
    @pulumi.getter(name="lastScanInfos")
    def last_scan_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InspectorHostLastScanInfoArgs']]]]:
        """
        Indicates the last scan informations.
        The last_scan_info structure is documented below.
        """
        return pulumi.get(self, "last_scan_infos")

    @last_scan_infos.setter
    def last_scan_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InspectorHostLastScanInfoArgs']]]]):
        pulumi.set(self, "last_scan_infos", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host os type. Valid values are **windows** and **linux**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="smbCredentialId")
    def smb_credential_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the smb credential ID for **windows** host.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "smb_credential_id")

    @smb_credential_id.setter
    def smb_credential_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "smb_credential_id", value)

    @_builtins.property
    @pulumi.getter(name="sshCredentialId")
    def ssh_credential_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host ssh credential ID for **linux** host.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "ssh_credential_id")

    @ssh_credential_id.setter
    def ssh_credential_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh_credential_id", value)


@pulumi.type_token("huaweicloud:codearts/inspectorHost:InspectorHost")
class InspectorHost(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 jumper_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 smb_credential_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh_credential_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts inspector host resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        ip = config.require_object("ip")
        ssh_credential_id = config.require_object("sshCredentialId")
        test = huaweicloud.codearts.InspectorHost("test",
            name=name,
            ip=ip,
            os_type="linux",
            ssh_credential_id=ssh_credential_id)
        ```

        ## Import

        The host can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/inspectorHost:InspectorHost test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] group_id: Specifies the host group ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] ip: Specifies the host IP.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] jumper_server_id: Specifies the jumper server ID. Only available for **linux** host.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the host name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] os_type: Specifies the host os type. Valid values are **windows** and **linux**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] smb_credential_id: Specifies the smb credential ID for **windows** host.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] ssh_credential_id: Specifies the host ssh credential ID for **linux** host.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InspectorHostArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts inspector host resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        ip = config.require_object("ip")
        ssh_credential_id = config.require_object("sshCredentialId")
        test = huaweicloud.codearts.InspectorHost("test",
            name=name,
            ip=ip,
            os_type="linux",
            ssh_credential_id=ssh_credential_id)
        ```

        ## Import

        The host can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/inspectorHost:InspectorHost test <id>
        ```

        :param str resource_name: The name of the resource.
        :param InspectorHostArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InspectorHostArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 jumper_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 smb_credential_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh_credential_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InspectorHostArgs.__new__(InspectorHostArgs)

            __props__.__dict__["group_id"] = group_id
            if ip is None and not opts.urn:
                raise TypeError("Missing required property 'ip'")
            __props__.__dict__["ip"] = ip
            __props__.__dict__["jumper_server_id"] = jumper_server_id
            __props__.__dict__["name"] = name
            if os_type is None and not opts.urn:
                raise TypeError("Missing required property 'os_type'")
            __props__.__dict__["os_type"] = os_type
            __props__.__dict__["smb_credential_id"] = smb_credential_id
            __props__.__dict__["ssh_credential_id"] = ssh_credential_id
            __props__.__dict__["auth_status"] = None
            __props__.__dict__["last_scan_id"] = None
            __props__.__dict__["last_scan_infos"] = None
        super(InspectorHost, __self__).__init__(
            'huaweicloud:codearts/inspectorHost:InspectorHost',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_status: Optional[pulumi.Input[_builtins.int]] = None,
            group_id: Optional[pulumi.Input[_builtins.str]] = None,
            ip: Optional[pulumi.Input[_builtins.str]] = None,
            jumper_server_id: Optional[pulumi.Input[_builtins.str]] = None,
            last_scan_id: Optional[pulumi.Input[_builtins.str]] = None,
            last_scan_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InspectorHostLastScanInfoArgs', 'InspectorHostLastScanInfoArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            os_type: Optional[pulumi.Input[_builtins.str]] = None,
            smb_credential_id: Optional[pulumi.Input[_builtins.str]] = None,
            ssh_credential_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'InspectorHost':
        """
        Get an existing InspectorHost resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] auth_status: Indicates the auth status.
               Value can be as follows:
               + **-1**: unknown
               + **0**: connected
               + **1**: unreachable
               + **2**: login failed
        :param pulumi.Input[_builtins.str] group_id: Specifies the host group ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] ip: Specifies the host IP.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] jumper_server_id: Specifies the jumper server ID. Only available for **linux** host.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] last_scan_id: Indicates the last scan ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InspectorHostLastScanInfoArgs', 'InspectorHostLastScanInfoArgsDict']]]] last_scan_infos: Indicates the last scan informations.
               The last_scan_info structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the host name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] os_type: Specifies the host os type. Valid values are **windows** and **linux**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] smb_credential_id: Specifies the smb credential ID for **windows** host.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] ssh_credential_id: Specifies the host ssh credential ID for **linux** host.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InspectorHostState.__new__(_InspectorHostState)

        __props__.__dict__["auth_status"] = auth_status
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["ip"] = ip
        __props__.__dict__["jumper_server_id"] = jumper_server_id
        __props__.__dict__["last_scan_id"] = last_scan_id
        __props__.__dict__["last_scan_infos"] = last_scan_infos
        __props__.__dict__["name"] = name
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["smb_credential_id"] = smb_credential_id
        __props__.__dict__["ssh_credential_id"] = ssh_credential_id
        return InspectorHost(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the auth status.
        Value can be as follows:
        + **-1**: unknown
        + **0**: connected
        + **1**: unreachable
        + **2**: login failed
        """
        return pulumi.get(self, "auth_status")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the host group ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the host IP.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="jumperServerId")
    def jumper_server_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the jumper server ID. Only available for **linux** host.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "jumper_server_id")

    @_builtins.property
    @pulumi.getter(name="lastScanId")
    def last_scan_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the last scan ID.
        """
        return pulumi.get(self, "last_scan_id")

    @_builtins.property
    @pulumi.getter(name="lastScanInfos")
    def last_scan_infos(self) -> pulumi.Output[Sequence['outputs.InspectorHostLastScanInfo']]:
        """
        Indicates the last scan informations.
        The last_scan_info structure is documented below.
        """
        return pulumi.get(self, "last_scan_infos")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the host name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the host os type. Valid values are **windows** and **linux**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="smbCredentialId")
    def smb_credential_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the smb credential ID for **windows** host.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "smb_credential_id")

    @_builtins.property
    @pulumi.getter(name="sshCredentialId")
    def ssh_credential_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the host ssh credential ID for **linux** host.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "ssh_credential_id")

