# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PipelineRuleArgs', 'PipelineRule']

@pulumi.input_type
class PipelineRuleArgs:
    def __init__(__self__, *,
                 contents: pulumi.Input[Sequence[pulumi.Input['PipelineRuleContentArgs']]],
                 layout_content: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_id: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_name: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_version: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PipelineRule resource.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineRuleContentArgs']]] contents: Specifies the rule attribute group list.
               The content structure is documented below.
        :param pulumi.Input[_builtins.str] layout_content: Specifies the layout content.
        :param pulumi.Input[_builtins.str] type: Specifies the type.
        :param pulumi.Input[_builtins.str] name: Specifies the display name.
        :param pulumi.Input[_builtins.str] plugin_id: Specifies the plugin ID.
        :param pulumi.Input[_builtins.str] plugin_name: Specifies the plugin name.
        :param pulumi.Input[_builtins.str] plugin_version: Specifies the plugin version.
               
               <a name="block--content"></a>
               The `content` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "layout_content", layout_content)
        pulumi.set(__self__, "type", type)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plugin_id is not None:
            pulumi.set(__self__, "plugin_id", plugin_id)
        if plugin_name is not None:
            pulumi.set(__self__, "plugin_name", plugin_name)
        if plugin_version is not None:
            pulumi.set(__self__, "plugin_version", plugin_version)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def contents(self) -> pulumi.Input[Sequence[pulumi.Input['PipelineRuleContentArgs']]]:
        """
        Specifies the rule attribute group list.
        The content structure is documented below.
        """
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: pulumi.Input[Sequence[pulumi.Input['PipelineRuleContentArgs']]]):
        pulumi.set(self, "contents", value)

    @_builtins.property
    @pulumi.getter(name="layoutContent")
    def layout_content(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the layout content.
        """
        return pulumi.get(self, "layout_content")

    @layout_content.setter
    def layout_content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "layout_content", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the display name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plugin ID.
        """
        return pulumi.get(self, "plugin_id")

    @plugin_id.setter
    def plugin_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plugin_id", value)

    @_builtins.property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plugin name.
        """
        return pulumi.get(self, "plugin_name")

    @plugin_name.setter
    def plugin_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plugin_name", value)

    @_builtins.property
    @pulumi.getter(name="pluginVersion")
    def plugin_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plugin version.

        <a name="block--content"></a>
        The `content` block supports:
        """
        return pulumi.get(self, "plugin_version")

    @plugin_version.setter
    def plugin_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plugin_version", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _PipelineRuleState:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineRuleContentArgs']]]] = None,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 creator: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 layout_content: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_count: Optional[pulumi.Input[_builtins.int]] = None,
                 plugin_id: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_name: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_version: Optional[pulumi.Input[_builtins.str]] = None,
                 project_count: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_set_count: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 update_time: Optional[pulumi.Input[_builtins.str]] = None,
                 updater: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PipelineRule resources.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineRuleContentArgs']]] contents: Specifies the rule attribute group list.
               The content structure is documented below.
        :param pulumi.Input[_builtins.str] create_time: Indicates the create time.
        :param pulumi.Input[_builtins.str] creator: Indicates the creator.
        :param pulumi.Input[_builtins.str] layout_content: Specifies the layout content.
        :param pulumi.Input[_builtins.str] name: Specifies the display name.
        :param pulumi.Input[_builtins.int] pipeline_count: Indicates the number of pipelines.
        :param pulumi.Input[_builtins.str] plugin_id: Specifies the plugin ID.
        :param pulumi.Input[_builtins.str] plugin_name: Specifies the plugin name.
        :param pulumi.Input[_builtins.str] plugin_version: Specifies the plugin version.
               
               <a name="block--content"></a>
               The `content` block supports:
        :param pulumi.Input[_builtins.int] project_count: Indicates the number of projects.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] rule_set_count: Indicates the number of policies.
        :param pulumi.Input[_builtins.str] type: Specifies the type.
        :param pulumi.Input[_builtins.str] update_time: Indicates the update time.
        :param pulumi.Input[_builtins.str] updater: Indicates the updater.
        :param pulumi.Input[_builtins.str] version: Indicates the rule version.
        """
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator is not None:
            pulumi.set(__self__, "creator", creator)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if layout_content is not None:
            pulumi.set(__self__, "layout_content", layout_content)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pipeline_count is not None:
            pulumi.set(__self__, "pipeline_count", pipeline_count)
        if plugin_id is not None:
            pulumi.set(__self__, "plugin_id", plugin_id)
        if plugin_name is not None:
            pulumi.set(__self__, "plugin_name", plugin_name)
        if plugin_version is not None:
            pulumi.set(__self__, "plugin_version", plugin_version)
        if project_count is not None:
            pulumi.set(__self__, "project_count", project_count)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rule_set_count is not None:
            pulumi.set(__self__, "rule_set_count", rule_set_count)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if updater is not None:
            pulumi.set(__self__, "updater", updater)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineRuleContentArgs']]]]:
        """
        Specifies the rule attribute group list.
        The content structure is documented below.
        """
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineRuleContentArgs']]]]):
        pulumi.set(self, "contents", value)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter
    def creator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creator.
        """
        return pulumi.get(self, "creator")

    @creator.setter
    def creator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creator", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="layoutContent")
    def layout_content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the layout content.
        """
        return pulumi.get(self, "layout_content")

    @layout_content.setter
    def layout_content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "layout_content", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the display name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="pipelineCount")
    def pipeline_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the number of pipelines.
        """
        return pulumi.get(self, "pipeline_count")

    @pipeline_count.setter
    def pipeline_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "pipeline_count", value)

    @_builtins.property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plugin ID.
        """
        return pulumi.get(self, "plugin_id")

    @plugin_id.setter
    def plugin_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plugin_id", value)

    @_builtins.property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plugin name.
        """
        return pulumi.get(self, "plugin_name")

    @plugin_name.setter
    def plugin_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plugin_name", value)

    @_builtins.property
    @pulumi.getter(name="pluginVersion")
    def plugin_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the plugin version.

        <a name="block--content"></a>
        The `content` block supports:
        """
        return pulumi.get(self, "plugin_version")

    @plugin_version.setter
    def plugin_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plugin_version", value)

    @_builtins.property
    @pulumi.getter(name="projectCount")
    def project_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the number of projects.
        """
        return pulumi.get(self, "project_count")

    @project_count.setter
    def project_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "project_count", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="ruleSetCount")
    def rule_set_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the number of policies.
        """
        return pulumi.get(self, "rule_set_count")

    @rule_set_count.setter
    def rule_set_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rule_set_count", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_time", value)

    @_builtins.property
    @pulumi.getter
    def updater(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the updater.
        """
        return pulumi.get(self, "updater")

    @updater.setter
    def updater(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updater", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the rule version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("huaweicloud:codearts/pipelineRule:PipelineRule")
class PipelineRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineRuleContentArgs', 'PipelineRuleContentArgsDict']]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 layout_content: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_id: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_name: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_version: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts pipeline rule resource within HuaweiCloud.

        ## Example Usage

        ## Import

        The rule can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipelineRule:PipelineRule test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `layout_content`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the rule, or the resource definition should be updated to

        align with the rule. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_codearts_pipeline_rule" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              layout_content,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineRuleContentArgs', 'PipelineRuleContentArgsDict']]]] contents: Specifies the rule attribute group list.
               The content structure is documented below.
        :param pulumi.Input[_builtins.str] layout_content: Specifies the layout content.
        :param pulumi.Input[_builtins.str] name: Specifies the display name.
        :param pulumi.Input[_builtins.str] plugin_id: Specifies the plugin ID.
        :param pulumi.Input[_builtins.str] plugin_name: Specifies the plugin name.
        :param pulumi.Input[_builtins.str] plugin_version: Specifies the plugin version.
               
               <a name="block--content"></a>
               The `content` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelineRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts pipeline rule resource within HuaweiCloud.

        ## Example Usage

        ## Import

        The rule can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipelineRule:PipelineRule test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `layout_content`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the rule, or the resource definition should be updated to

        align with the rule. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_codearts_pipeline_rule" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              layout_content,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param PipelineRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelineRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineRuleContentArgs', 'PipelineRuleContentArgsDict']]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 layout_content: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_id: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_name: Optional[pulumi.Input[_builtins.str]] = None,
                 plugin_version: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelineRuleArgs.__new__(PipelineRuleArgs)

            if contents is None and not opts.urn:
                raise TypeError("Missing required property 'contents'")
            __props__.__dict__["contents"] = contents
            __props__.__dict__["enable_force_new"] = enable_force_new
            if layout_content is None and not opts.urn:
                raise TypeError("Missing required property 'layout_content'")
            __props__.__dict__["layout_content"] = layout_content
            __props__.__dict__["name"] = name
            __props__.__dict__["plugin_id"] = plugin_id
            __props__.__dict__["plugin_name"] = plugin_name
            __props__.__dict__["plugin_version"] = plugin_version
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["create_time"] = None
            __props__.__dict__["creator"] = None
            __props__.__dict__["pipeline_count"] = None
            __props__.__dict__["project_count"] = None
            __props__.__dict__["rule_set_count"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["updater"] = None
            __props__.__dict__["version"] = None
        super(PipelineRule, __self__).__init__(
            'huaweicloud:codearts/pipelineRule:PipelineRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            contents: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineRuleContentArgs', 'PipelineRuleContentArgsDict']]]]] = None,
            create_time: Optional[pulumi.Input[_builtins.str]] = None,
            creator: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            layout_content: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            pipeline_count: Optional[pulumi.Input[_builtins.int]] = None,
            plugin_id: Optional[pulumi.Input[_builtins.str]] = None,
            plugin_name: Optional[pulumi.Input[_builtins.str]] = None,
            plugin_version: Optional[pulumi.Input[_builtins.str]] = None,
            project_count: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            rule_set_count: Optional[pulumi.Input[_builtins.int]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            update_time: Optional[pulumi.Input[_builtins.str]] = None,
            updater: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'PipelineRule':
        """
        Get an existing PipelineRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineRuleContentArgs', 'PipelineRuleContentArgsDict']]]] contents: Specifies the rule attribute group list.
               The content structure is documented below.
        :param pulumi.Input[_builtins.str] create_time: Indicates the create time.
        :param pulumi.Input[_builtins.str] creator: Indicates the creator.
        :param pulumi.Input[_builtins.str] layout_content: Specifies the layout content.
        :param pulumi.Input[_builtins.str] name: Specifies the display name.
        :param pulumi.Input[_builtins.int] pipeline_count: Indicates the number of pipelines.
        :param pulumi.Input[_builtins.str] plugin_id: Specifies the plugin ID.
        :param pulumi.Input[_builtins.str] plugin_name: Specifies the plugin name.
        :param pulumi.Input[_builtins.str] plugin_version: Specifies the plugin version.
               
               <a name="block--content"></a>
               The `content` block supports:
        :param pulumi.Input[_builtins.int] project_count: Indicates the number of projects.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] rule_set_count: Indicates the number of policies.
        :param pulumi.Input[_builtins.str] type: Specifies the type.
        :param pulumi.Input[_builtins.str] update_time: Indicates the update time.
        :param pulumi.Input[_builtins.str] updater: Indicates the updater.
        :param pulumi.Input[_builtins.str] version: Indicates the rule version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelineRuleState.__new__(_PipelineRuleState)

        __props__.__dict__["contents"] = contents
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["creator"] = creator
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["layout_content"] = layout_content
        __props__.__dict__["name"] = name
        __props__.__dict__["pipeline_count"] = pipeline_count
        __props__.__dict__["plugin_id"] = plugin_id
        __props__.__dict__["plugin_name"] = plugin_name
        __props__.__dict__["plugin_version"] = plugin_version
        __props__.__dict__["project_count"] = project_count
        __props__.__dict__["region"] = region
        __props__.__dict__["rule_set_count"] = rule_set_count
        __props__.__dict__["type"] = type
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["updater"] = updater
        __props__.__dict__["version"] = version
        return PipelineRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def contents(self) -> pulumi.Output[Sequence['outputs.PipelineRuleContent']]:
        """
        Specifies the rule attribute group list.
        The content structure is documented below.
        """
        return pulumi.get(self, "contents")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="layoutContent")
    def layout_content(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the layout content.
        """
        return pulumi.get(self, "layout_content")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the display name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="pipelineCount")
    def pipeline_count(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the number of pipelines.
        """
        return pulumi.get(self, "pipeline_count")

    @_builtins.property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the plugin ID.
        """
        return pulumi.get(self, "plugin_id")

    @_builtins.property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the plugin name.
        """
        return pulumi.get(self, "plugin_name")

    @_builtins.property
    @pulumi.getter(name="pluginVersion")
    def plugin_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the plugin version.

        <a name="block--content"></a>
        The `content` block supports:
        """
        return pulumi.get(self, "plugin_version")

    @_builtins.property
    @pulumi.getter(name="projectCount")
    def project_count(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the number of projects.
        """
        return pulumi.get(self, "project_count")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleSetCount")
    def rule_set_count(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the number of policies.
        """
        return pulumi.get(self, "rule_set_count")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter
    def updater(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the updater.
        """
        return pulumi.get(self, "updater")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the rule version.
        """
        return pulumi.get(self, "version")

