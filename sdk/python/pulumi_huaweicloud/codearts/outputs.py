# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'BuildTaskActionParameter',
    'BuildTaskActionScm',
    'BuildTaskParameter',
    'BuildTaskParameterParam',
    'BuildTaskParameterParamLimit',
    'BuildTaskScm',
    'BuildTaskStep',
    'BuildTaskTrigger',
    'BuildTaskTriggerParameter',
    'BuildTemplateParameter',
    'BuildTemplateParameterParam',
    'BuildTemplateParameterParamLimit',
    'BuildTemplateStep',
    'DeployApplicationCopyOperationList',
    'DeployApplicationCopyPermissionMatrix',
    'DeployApplicationDeployParam',
    'DeployApplicationOperationList',
    'DeployApplicationPermissionMatrix',
    'DeployApplicationPermissionRole',
    'DeployEnvironmentCreatedBy',
    'DeployEnvironmentHost',
    'DeployEnvironmentPermission',
    'DeployEnvironmentPermissionMatrix',
    'DeployEnvironmentProxy',
    'DeployGroupCreatedBy',
    'DeployGroupPermission',
    'DeployGroupPermissionMatrix',
    'DeployHostPermission',
    'InspectorHostLastScanInfo',
    'PipelineActionSource',
    'PipelineActionSourceParams',
    'PipelineActionSourceParamsBuildParams',
    'PipelineActionVariable',
    'PipelineByTemplateConcurrencyControl',
    'PipelineByTemplateRolePermission',
    'PipelineByTemplateSchedule',
    'PipelineByTemplateSource',
    'PipelineByTemplateSourceParams',
    'PipelineByTemplateTrigger',
    'PipelineByTemplateTriggerEvent',
    'PipelineByTemplateVariable',
    'PipelineConcurrencyControl',
    'PipelineMicroServiceRepo',
    'PipelineParameterGroupRelatedPipeline',
    'PipelineParameterGroupVariable',
    'PipelineRolePermission',
    'PipelineRuleContent',
    'PipelineRuleContentProperty',
    'PipelineSchedule',
    'PipelineServiceEndpointAuthorization',
    'PipelineServiceEndpointCreatedBy',
    'PipelineSource',
    'PipelineSourceParams',
    'PipelineTemplateVariable',
    'PipelineTrigger',
    'PipelineTriggerEvent',
    'PipelineVariable',
    'GetBuildTaskRecordsRecordResult',
    'GetBuildTaskRecordsRecordBuildRecordTypeResult',
    'GetBuildTaskRecordsRecordParameterResult',
    'GetBuildTasksTaskResult',
    'GetDeployApplicationDeploymentRecordsRecordResult',
    'GetDeployApplicationGroupsGroupResult',
    'GetDeployApplicationsApplicationResult',
    'GetDeployApplicationsApplicationArrangeInfoResult',
    'GetDeployEnvironmentsEnvironmentResult',
    'GetDeployEnvironmentsEnvironmentCreatedByResult',
    'GetDeployEnvironmentsEnvironmentPermissionResult',
    'GetDeployGroupsGroupResult',
    'GetDeployGroupsGroupPermissionResult',
    'GetDeployHostsHostResult',
    'GetDeployHostsHostPermissionResult',
    'GetInspectorHostGroupsGroupResult',
    'GetInspectorHostsHostResult',
    'GetInspectorHostsHostLastScanInfoResult',
    'GetInspectorWebsiteScanTasksTaskResult',
    'GetInspectorWebsitesWebsiteResult',
    'GetPipelineGroupsGroupResult',
    'GetPipelineMicroServicesMicroServiceResult',
    'GetPipelineMicroServicesMicroServiceRepoResult',
    'GetPipelineModifyHistoriesHistoryResult',
    'GetPipelineModulesModuleResult',
    'GetPipelineParameterGroupsGroupResult',
    'GetPipelineParameterGroupsGroupRelatedPipelineResult',
    'GetPipelineParameterGroupsGroupVariableResult',
    'GetPipelinePluginMetricsMetricResult',
    'GetPipelinePluginsPluginResult',
    'GetPipelinePublishersPublisherResult',
    'GetPipelineQueueingRecordsRecordResult',
    'GetPipelineRulesRuleResult',
    'GetPipelineRunDetailArtifactResult',
    'GetPipelineRunDetailSourceResult',
    'GetPipelineRunDetailSourceParamResult',
    'GetPipelineRunDetailSourceParamBuildParamResult',
    'GetPipelineRunDetailStageResult',
    'GetPipelineRunDetailStageJobResult',
    'GetPipelineRunDetailStageJobStepResult',
    'GetPipelineRunDetailStageJobStepInputResult',
    'GetPipelineRunDetailStagePostResult',
    'GetPipelineRunDetailStagePostInputResult',
    'GetPipelineRunDetailStagePreResult',
    'GetPipelineRunDetailStagePreInputResult',
    'GetPipelineRunRecordsRecordResult',
    'GetPipelineRunRecordsRecordArtifactParamResult',
    'GetPipelineRunRecordsRecordBuildParamResult',
    'GetPipelineRunRecordsRecordStageStatusListResult',
    'GetPipelineRunVariablesVariableResult',
    'GetPipelineRuntimeVariablesVariableResult',
    'GetPipelineServiceEndpointsEndpointResult',
    'GetPipelineServiceEndpointsEndpointCreatedByResult',
    'GetPipelineSystemVariablesVariableResult',
    'GetPipelineTagsTagResult',
    'GetPipelineTemplatesTemplateResult',
    'GetPipelineTemplatesTemplateStageResult',
    'GetPipelineTriggerFailedRecordsRecordResult',
    'GetPipelineUserPermissionsUserResult',
    'GetPipelinesPipelineResult',
    'GetPipelinesPipelineLatestRunResult',
    'GetPipelinesPipelineLatestRunArtifactParamResult',
    'GetPipelinesPipelineLatestRunBuildParamResult',
    'GetPipelinesPipelineLatestRunStageStatusListResult',
]

@pulumi.output_type
class BuildTaskActionParameter(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the parameter name.
        :param _builtins.str value: Specifies the parameter value.
               
               <a name="block--scm"></a>
               The `scm` block supports:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the parameter value.

        <a name="block--scm"></a>
        The `scm` block supports:
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class BuildTaskActionScm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buildCommitId":
            suggest = "build_commit_id"
        elif key == "buildTag":
            suggest = "build_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildTaskActionScm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildTaskActionScm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildTaskActionScm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 build_commit_id: Optional[_builtins.str] = None,
                 build_tag: Optional[_builtins.str] = None):
        """
        :param _builtins.str build_commit_id: Specifies the build commit ID.
        :param _builtins.str build_tag: Specifies the build tag.
        """
        if build_commit_id is not None:
            pulumi.set(__self__, "build_commit_id", build_commit_id)
        if build_tag is not None:
            pulumi.set(__self__, "build_tag", build_tag)

    @_builtins.property
    @pulumi.getter(name="buildCommitId")
    def build_commit_id(self) -> Optional[_builtins.str]:
        """
        Specifies the build commit ID.
        """
        return pulumi.get(self, "build_commit_id")

    @_builtins.property
    @pulumi.getter(name="buildTag")
    def build_tag(self) -> Optional[_builtins.str]:
        """
        Specifies the build tag.
        """
        return pulumi.get(self, "build_tag")


@pulumi.output_type
class BuildTaskParameter(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 params: Optional[Sequence['outputs.BuildTaskParameterParam']] = None):
        """
        :param _builtins.str name: Specifies the parameter name.
        :param Sequence['BuildTaskParameterParamArgs'] params: Specifies the build execution sub-parameters.
               The params structure is documented below.
               
               <a name="block--parameters--params"></a>
               The `params` block supports:
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if params is not None:
            pulumi.set(__self__, "params", params)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[Sequence['outputs.BuildTaskParameterParam']]:
        """
        Specifies the build execution sub-parameters.
        The params structure is documented below.

        <a name="block--parameters--params"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "params")


@pulumi.output_type
class BuildTaskParameterParam(dict):
    def __init__(__self__, *,
                 limits: Optional[Sequence['outputs.BuildTaskParameterParamLimit']] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param Sequence['BuildTaskParameterParamLimitArgs'] limits: Specifies the enumeration parameter restrictions.
               The limits structure is documented below.
        :param _builtins.str name: Specifies the parameter name.
        :param _builtins.str value: Specifies the parameter value.
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[Sequence['outputs.BuildTaskParameterParamLimit']]:
        """
        Specifies the enumeration parameter restrictions.
        The limits structure is documented below.
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class BuildTaskParameterParamLimit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildTaskParameterParamLimit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildTaskParameterParamLimit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildTaskParameterParamLimit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable: Optional[_builtins.str] = None,
                 display_name: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str disable: Specifies whether it is effective. Defaults to **0**, which is effective.
        :param _builtins.str display_name: Specifies the displayed name of the parameter.
        :param _builtins.str name: Specifies the parameter name.
        """
        if disable is not None:
            pulumi.set(__self__, "disable", disable)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def disable(self) -> Optional[_builtins.str]:
        """
        Specifies whether it is effective. Defaults to **0**, which is effective.
        """
        return pulumi.get(self, "disable")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        Specifies the displayed name of the parameter.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class BuildTaskScm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoId":
            suggest = "repo_id"
        elif key == "scmType":
            suggest = "scm_type"
        elif key == "webUrl":
            suggest = "web_url"
        elif key == "buildType":
            suggest = "build_type"
        elif key == "enableGitLfs":
            suggest = "enable_git_lfs"
        elif key == "endpointId":
            suggest = "endpoint_id"
        elif key == "groupName":
            suggest = "group_name"
        elif key == "isAutoBuild":
            suggest = "is_auto_build"
        elif key == "repoName":
            suggest = "repo_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildTaskScm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildTaskScm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildTaskScm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_id: _builtins.str,
                 scm_type: _builtins.str,
                 url: _builtins.str,
                 web_url: _builtins.str,
                 branch: Optional[_builtins.str] = None,
                 build_type: Optional[_builtins.str] = None,
                 depth: Optional[_builtins.str] = None,
                 enable_git_lfs: Optional[_builtins.bool] = None,
                 endpoint_id: Optional[_builtins.str] = None,
                 group_name: Optional[_builtins.str] = None,
                 is_auto_build: Optional[_builtins.bool] = None,
                 repo_name: Optional[_builtins.str] = None,
                 source: Optional[_builtins.str] = None):
        """
        :param _builtins.str repo_id: Specifies the repository ID.
        :param _builtins.str scm_type: Specifies the source code management type.
        :param _builtins.str url: Specifies the repository URL.
        :param _builtins.str web_url: Specifies the web URL of the repository.
        :param _builtins.str branch: Specifies the branch name.
        :param _builtins.str build_type: Specifies the build type.
        :param _builtins.str depth: Specifies the depth.
        :param _builtins.bool enable_git_lfs: Specifies whether to enable Git LFS. Defaults to **false**.
        :param _builtins.str endpoint_id: Specifies the endpoint ID.
        :param _builtins.str group_name: Specifies the group name.
        :param _builtins.bool is_auto_build: Specifies whether to automatically build. Defaults to **false**.
        :param _builtins.str repo_name: Specifies the repository name.
        :param _builtins.str source: Specifies the source type.
               
               <a name="block--steps"></a>
               The `steps` block supports:
        """
        pulumi.set(__self__, "repo_id", repo_id)
        pulumi.set(__self__, "scm_type", scm_type)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "web_url", web_url)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if build_type is not None:
            pulumi.set(__self__, "build_type", build_type)
        if depth is not None:
            pulumi.set(__self__, "depth", depth)
        if enable_git_lfs is not None:
            pulumi.set(__self__, "enable_git_lfs", enable_git_lfs)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if is_auto_build is not None:
            pulumi.set(__self__, "is_auto_build", is_auto_build)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> _builtins.str:
        """
        Specifies the repository ID.
        """
        return pulumi.get(self, "repo_id")

    @_builtins.property
    @pulumi.getter(name="scmType")
    def scm_type(self) -> _builtins.str:
        """
        Specifies the source code management type.
        """
        return pulumi.get(self, "scm_type")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        Specifies the repository URL.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> _builtins.str:
        """
        Specifies the web URL of the repository.
        """
        return pulumi.get(self, "web_url")

    @_builtins.property
    @pulumi.getter
    def branch(self) -> Optional[_builtins.str]:
        """
        Specifies the branch name.
        """
        return pulumi.get(self, "branch")

    @_builtins.property
    @pulumi.getter(name="buildType")
    def build_type(self) -> Optional[_builtins.str]:
        """
        Specifies the build type.
        """
        return pulumi.get(self, "build_type")

    @_builtins.property
    @pulumi.getter
    def depth(self) -> Optional[_builtins.str]:
        """
        Specifies the depth.
        """
        return pulumi.get(self, "depth")

    @_builtins.property
    @pulumi.getter(name="enableGitLfs")
    def enable_git_lfs(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable Git LFS. Defaults to **false**.
        """
        return pulumi.get(self, "enable_git_lfs")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[_builtins.str]:
        """
        Specifies the endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[_builtins.str]:
        """
        Specifies the group name.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="isAutoBuild")
    def is_auto_build(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to automatically build. Defaults to **false**.
        """
        return pulumi.get(self, "is_auto_build")

    @_builtins.property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[_builtins.str]:
        """
        Specifies the repository name.
        """
        return pulumi.get(self, "repo_name")

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[_builtins.str]:
        """
        Specifies the source type.

        <a name="block--steps"></a>
        The `steps` block supports:
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class BuildTaskStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleId":
            suggest = "module_id"
        elif key == "propertiesAll":
            suggest = "properties_all"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildTaskStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildTaskStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildTaskStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_id: _builtins.str,
                 name: _builtins.str,
                 enable: Optional[_builtins.bool] = None,
                 properties: Optional[Mapping[str, _builtins.str]] = None,
                 properties_all: Optional[Mapping[str, _builtins.str]] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str module_id: Specifies the build step module ID.
        :param _builtins.str name: Specifies the parameter name.
        :param _builtins.bool enable: Specifies whether to enable the step. Defaults to **false**.
        :param Mapping[str, _builtins.str] properties: Specifies the build step properties. Value is JSON format string.
        :param Mapping[str, _builtins.str] properties_all: Indicates the build step properties.
        :param _builtins.str version: Specifies the build step version.
               
               <a name="block--triggers"></a>
               The `triggers` block supports:
        """
        pulumi.set(__self__, "module_id", module_id)
        pulumi.set(__self__, "name", name)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if properties_all is not None:
            pulumi.set(__self__, "properties_all", properties_all)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> _builtins.str:
        """
        Specifies the build step module ID.
        """
        return pulumi.get(self, "module_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable the step. Defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the build step properties. Value is JSON format string.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="propertiesAll")
    def properties_all(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Indicates the build step properties.
        """
        return pulumi.get(self, "properties_all")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Specifies the build step version.

        <a name="block--triggers"></a>
        The `triggers` block supports:
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class BuildTaskTrigger(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 parameters: Sequence['outputs.BuildTaskTriggerParameter']):
        """
        :param _builtins.str name: Specifies the parameter name.
        :param Sequence['BuildTaskTriggerParameterArgs'] parameters: Specifies the custom parameters.
               The parameters structure is documented below.
               
               <a name="block--triggers--parameters"></a>
               The `parameters` block supports:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.BuildTaskTriggerParameter']:
        """
        Specifies the custom parameters.
        The parameters structure is documented below.

        <a name="block--triggers--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class BuildTaskTriggerParameter(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the parameter name.
        :param _builtins.str value: Specifies the parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class BuildTemplateParameter(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 params: Optional[Sequence['outputs.BuildTemplateParameterParam']] = None):
        """
        :param _builtins.str name: Specifies the parameter name.
        :param Sequence['BuildTemplateParameterParamArgs'] params: Specifies the build execution sub-parameters.
               The params structure is documented below.
               
               <a name="block--parameters--params"></a>
               The `params` block supports:
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if params is not None:
            pulumi.set(__self__, "params", params)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[Sequence['outputs.BuildTemplateParameterParam']]:
        """
        Specifies the build execution sub-parameters.
        The params structure is documented below.

        <a name="block--parameters--params"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "params")


@pulumi.output_type
class BuildTemplateParameterParam(dict):
    def __init__(__self__, *,
                 limits: Optional[Sequence['outputs.BuildTemplateParameterParamLimit']] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param Sequence['BuildTemplateParameterParamLimitArgs'] limits: Specifies the enumeration parameter restrictions.
               The limits structure is documented below.
               
               <a name="block--parameters--params--limits"></a>
               The `limits` block supports:
        :param _builtins.str name: Specifies the parameter name.
        :param _builtins.str value: Specifies the parameter field value.
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[Sequence['outputs.BuildTemplateParameterParamLimit']]:
        """
        Specifies the enumeration parameter restrictions.
        The limits structure is documented below.

        <a name="block--parameters--params--limits"></a>
        The `limits` block supports:
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter field value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class BuildTemplateParameterParamLimit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildTemplateParameterParamLimit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildTemplateParameterParamLimit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildTemplateParameterParamLimit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable: Optional[_builtins.str] = None,
                 display_name: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str disable: Specifies whether it is effective.
        :param _builtins.str display_name: Specifies the displayed name of the parameter.
        :param _builtins.str name: Specifies the parameter name.
        """
        if disable is not None:
            pulumi.set(__self__, "disable", disable)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def disable(self) -> Optional[_builtins.str]:
        """
        Specifies whether it is effective.
        """
        return pulumi.get(self, "disable")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        Specifies the displayed name of the parameter.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class BuildTemplateStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleId":
            suggest = "module_id"
        elif key == "propertiesAll":
            suggest = "properties_all"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildTemplateStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildTemplateStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildTemplateStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_id: _builtins.str,
                 name: _builtins.str,
                 enable: Optional[_builtins.bool] = None,
                 properties: Optional[Mapping[str, _builtins.str]] = None,
                 properties_all: Optional[Mapping[str, _builtins.str]] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str module_id: Specifies the build step module ID.
        :param _builtins.str name: Specifies the parameter name.
        :param _builtins.bool enable: Specifies whether to enable the step. Defaults to **false**.
        :param Mapping[str, _builtins.str] properties: Specifies the build step properties. Value is JSON format string.
        :param Mapping[str, _builtins.str] properties_all: Indicates the build step properties.
        :param _builtins.str version: Specifies the build step version.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        """
        pulumi.set(__self__, "module_id", module_id)
        pulumi.set(__self__, "name", name)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if properties_all is not None:
            pulumi.set(__self__, "properties_all", properties_all)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> _builtins.str:
        """
        Specifies the build step module ID.
        """
        return pulumi.get(self, "module_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable the step. Defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the build step properties. Value is JSON format string.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="propertiesAll")
    def properties_all(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Indicates the build step properties.
        """
        return pulumi.get(self, "properties_all")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Specifies the build step version.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeployApplicationCopyOperationList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleId":
            suggest = "module_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployApplicationCopyOperationList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployApplicationCopyOperationList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployApplicationCopyOperationList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 entrance: Optional[_builtins.str] = None,
                 module_id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 params: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str code: Specifies the download URL.
        :param _builtins.str description: Specifies the step description.
        :param _builtins.str entrance: Specifies the entry function.
        :param _builtins.str module_id: Specifies the module ID.
        :param _builtins.str name: Specifies the step name.
        :param _builtins.str params: Specifies the parameter.
        :param _builtins.str version: Specifies the version.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entrance is not None:
            pulumi.set(__self__, "entrance", entrance)
        if module_id is not None:
            pulumi.set(__self__, "module_id", module_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        Specifies the download URL.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the step description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def entrance(self) -> Optional[_builtins.str]:
        """
        Specifies the entry function.
        """
        return pulumi.get(self, "entrance")

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[_builtins.str]:
        """
        Specifies the module ID.
        """
        return pulumi.get(self, "module_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the step name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter.
        """
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Specifies the version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeployApplicationCopyPermissionMatrix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canCopy":
            suggest = "can_copy"
        elif key == "canCreateEnv":
            suggest = "can_create_env"
        elif key == "canDelete":
            suggest = "can_delete"
        elif key == "canDisable":
            suggest = "can_disable"
        elif key == "canExecute":
            suggest = "can_execute"
        elif key == "canManage":
            suggest = "can_manage"
        elif key == "canModify":
            suggest = "can_modify"
        elif key == "canView":
            suggest = "can_view"
        elif key == "roleId":
            suggest = "role_id"
        elif key == "roleName":
            suggest = "role_name"
        elif key == "roleType":
            suggest = "role_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployApplicationCopyPermissionMatrix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployApplicationCopyPermissionMatrix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployApplicationCopyPermissionMatrix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_copy: Optional[_builtins.bool] = None,
                 can_create_env: Optional[_builtins.bool] = None,
                 can_delete: Optional[_builtins.bool] = None,
                 can_disable: Optional[_builtins.bool] = None,
                 can_execute: Optional[_builtins.bool] = None,
                 can_manage: Optional[_builtins.bool] = None,
                 can_modify: Optional[_builtins.bool] = None,
                 can_view: Optional[_builtins.bool] = None,
                 role_id: Optional[_builtins.str] = None,
                 role_name: Optional[_builtins.str] = None,
                 role_type: Optional[_builtins.str] = None):
        """
        :param _builtins.bool can_copy: Indicates whether the role has the copy permission.
        :param _builtins.bool can_create_env: Indicates whether the role has the permission to create an environment.
        :param _builtins.bool can_delete: Indicates whether the role has the deletion permission.
        :param _builtins.bool can_disable: Indicates whether the role has the permission to disable the application.
        :param _builtins.bool can_execute: Indicates whether the role has the deployment permission.
        :param _builtins.bool can_manage: Check whether the role has the management permission, including adding, deleting, modifying,
               querying deployment and permission modification.
        :param _builtins.bool can_modify: Indicates whether the role has the editing permission.
        :param _builtins.bool can_view: Indicates whether the role has the view permission.
        :param _builtins.str role_id: Indicates the role ID.
        :param _builtins.str role_name: Indicates the role name.
        :param _builtins.str role_type: Indicates the role type.
        """
        if can_copy is not None:
            pulumi.set(__self__, "can_copy", can_copy)
        if can_create_env is not None:
            pulumi.set(__self__, "can_create_env", can_create_env)
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_disable is not None:
            pulumi.set(__self__, "can_disable", can_disable)
        if can_execute is not None:
            pulumi.set(__self__, "can_execute", can_execute)
        if can_manage is not None:
            pulumi.set(__self__, "can_manage", can_manage)
        if can_modify is not None:
            pulumi.set(__self__, "can_modify", can_modify)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if role_type is not None:
            pulumi.set(__self__, "role_type", role_type)

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the copy permission.
        """
        return pulumi.get(self, "can_copy")

    @_builtins.property
    @pulumi.getter(name="canCreateEnv")
    def can_create_env(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to create an environment.
        """
        return pulumi.get(self, "can_create_env")

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @_builtins.property
    @pulumi.getter(name="canDisable")
    def can_disable(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to disable the application.
        """
        return pulumi.get(self, "can_disable")

    @_builtins.property
    @pulumi.getter(name="canExecute")
    def can_execute(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the deployment permission.
        """
        return pulumi.get(self, "can_execute")

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> Optional[_builtins.bool]:
        """
        Check whether the role has the management permission, including adding, deleting, modifying,
        querying deployment and permission modification.
        """
        return pulumi.get(self, "can_manage")

    @_builtins.property
    @pulumi.getter(name="canModify")
    def can_modify(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the editing permission.
        """
        return pulumi.get(self, "can_modify")

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the view permission.
        """
        return pulumi.get(self, "can_view")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[_builtins.str]:
        """
        Indicates the role ID.
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[_builtins.str]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")

    @_builtins.property
    @pulumi.getter(name="roleType")
    def role_type(self) -> Optional[_builtins.str]:
        """
        Indicates the role type.
        """
        return pulumi.get(self, "role_type")


@pulumi.output_type
class DeployApplicationDeployParam(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the parameter name transferred when deploying application.
               Changing this creates a new resource.
        :param _builtins.str type: Specifies the parameter type. If a dynamic parameter is set, the type is mandatory.
               Changing this creates a new resource.
        :param _builtins.str value: Specifies the parameter value transferred during application deployment.
               Changing this creates a new resource.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter name transferred when deploying application.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter type. If a dynamic parameter is set, the type is mandatory.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter value transferred during application deployment.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeployApplicationOperationList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleId":
            suggest = "module_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployApplicationOperationList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployApplicationOperationList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployApplicationOperationList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 entrance: Optional[_builtins.str] = None,
                 module_id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 params: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str code: Specifies the download URL.
        :param _builtins.str description: Specifies the step description.
        :param _builtins.str entrance: Specifies the entry function.
        :param _builtins.str module_id: Specifies the module ID.
        :param _builtins.str name: Specifies the step name.
        :param _builtins.str params: Specifies the parameter.
        :param _builtins.str version: Specifies the version.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entrance is not None:
            pulumi.set(__self__, "entrance", entrance)
        if module_id is not None:
            pulumi.set(__self__, "module_id", module_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        Specifies the download URL.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the step description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def entrance(self) -> Optional[_builtins.str]:
        """
        Specifies the entry function.
        """
        return pulumi.get(self, "entrance")

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[_builtins.str]:
        """
        Specifies the module ID.
        """
        return pulumi.get(self, "module_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the step name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter.
        """
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Specifies the version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeployApplicationPermissionMatrix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canCopy":
            suggest = "can_copy"
        elif key == "canCreateEnv":
            suggest = "can_create_env"
        elif key == "canDelete":
            suggest = "can_delete"
        elif key == "canDisable":
            suggest = "can_disable"
        elif key == "canExecute":
            suggest = "can_execute"
        elif key == "canManage":
            suggest = "can_manage"
        elif key == "canModify":
            suggest = "can_modify"
        elif key == "canView":
            suggest = "can_view"
        elif key == "roleId":
            suggest = "role_id"
        elif key == "roleName":
            suggest = "role_name"
        elif key == "roleType":
            suggest = "role_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployApplicationPermissionMatrix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployApplicationPermissionMatrix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployApplicationPermissionMatrix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_copy: Optional[_builtins.bool] = None,
                 can_create_env: Optional[_builtins.bool] = None,
                 can_delete: Optional[_builtins.bool] = None,
                 can_disable: Optional[_builtins.bool] = None,
                 can_execute: Optional[_builtins.bool] = None,
                 can_manage: Optional[_builtins.bool] = None,
                 can_modify: Optional[_builtins.bool] = None,
                 can_view: Optional[_builtins.bool] = None,
                 role_id: Optional[_builtins.str] = None,
                 role_name: Optional[_builtins.str] = None,
                 role_type: Optional[_builtins.str] = None):
        """
        :param _builtins.bool can_copy: Indicates whether the role has the copy permission.
        :param _builtins.bool can_create_env: Indicates whether the role has the permission to create an environment.
        :param _builtins.bool can_delete: Indicates whether the role has the deletion permission.
        :param _builtins.bool can_disable: Indicates whether the role has the permission to disable the application.
        :param _builtins.bool can_execute: Indicates whether the role has the deployment permission.
        :param _builtins.bool can_manage: Check whether the role has the management permission, including adding, deleting, modifying,
               querying deployment and permission modification.
        :param _builtins.bool can_modify: Indicates whether the role has the editing permission.
        :param _builtins.bool can_view: Indicates whether the role has the view permission.
        :param _builtins.str role_id: Indicates the role ID.
        :param _builtins.str role_name: Indicates the role name.
        :param _builtins.str role_type: Indicates the role type.
        """
        if can_copy is not None:
            pulumi.set(__self__, "can_copy", can_copy)
        if can_create_env is not None:
            pulumi.set(__self__, "can_create_env", can_create_env)
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_disable is not None:
            pulumi.set(__self__, "can_disable", can_disable)
        if can_execute is not None:
            pulumi.set(__self__, "can_execute", can_execute)
        if can_manage is not None:
            pulumi.set(__self__, "can_manage", can_manage)
        if can_modify is not None:
            pulumi.set(__self__, "can_modify", can_modify)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if role_type is not None:
            pulumi.set(__self__, "role_type", role_type)

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the copy permission.
        """
        return pulumi.get(self, "can_copy")

    @_builtins.property
    @pulumi.getter(name="canCreateEnv")
    def can_create_env(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to create an environment.
        """
        return pulumi.get(self, "can_create_env")

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @_builtins.property
    @pulumi.getter(name="canDisable")
    def can_disable(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to disable the application.
        """
        return pulumi.get(self, "can_disable")

    @_builtins.property
    @pulumi.getter(name="canExecute")
    def can_execute(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the deployment permission.
        """
        return pulumi.get(self, "can_execute")

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> Optional[_builtins.bool]:
        """
        Check whether the role has the management permission, including adding, deleting, modifying,
        querying deployment and permission modification.
        """
        return pulumi.get(self, "can_manage")

    @_builtins.property
    @pulumi.getter(name="canModify")
    def can_modify(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the editing permission.
        """
        return pulumi.get(self, "can_modify")

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the view permission.
        """
        return pulumi.get(self, "can_view")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[_builtins.str]:
        """
        Indicates the role ID.
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[_builtins.str]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")

    @_builtins.property
    @pulumi.getter(name="roleType")
    def role_type(self) -> Optional[_builtins.str]:
        """
        Indicates the role type.
        """
        return pulumi.get(self, "role_type")


@pulumi.output_type
class DeployApplicationPermissionRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canCopy":
            suggest = "can_copy"
        elif key == "canCreateEnv":
            suggest = "can_create_env"
        elif key == "canDelete":
            suggest = "can_delete"
        elif key == "canDisable":
            suggest = "can_disable"
        elif key == "canExecute":
            suggest = "can_execute"
        elif key == "canManage":
            suggest = "can_manage"
        elif key == "canModify":
            suggest = "can_modify"
        elif key == "canView":
            suggest = "can_view"
        elif key == "roleId":
            suggest = "role_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployApplicationPermissionRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployApplicationPermissionRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployApplicationPermissionRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_copy: _builtins.bool,
                 can_create_env: _builtins.bool,
                 can_delete: _builtins.bool,
                 can_disable: _builtins.bool,
                 can_execute: _builtins.bool,
                 can_manage: _builtins.bool,
                 can_modify: _builtins.bool,
                 can_view: _builtins.bool,
                 role_id: _builtins.str):
        """
        :param _builtins.bool can_copy: Specifies whether the role has the copy permission.
        :param _builtins.bool can_create_env: Specifies whether the role has the permission to create an environment.
        :param _builtins.bool can_delete: Specifies whether the role has the deletion permission.
        :param _builtins.bool can_disable: Specifies whether the role has the permission to disable application.
        :param _builtins.bool can_execute: Specifies whether the role has the deployment permission.
        :param _builtins.bool can_manage: Specifies whether the role has the management permission, including adding, deleting,
               modifying, querying deployment and permission modification.
        :param _builtins.bool can_modify: Specifies whether the role has the editing permission.
        :param _builtins.bool can_view: Specifies whether the role has the view permission.
        :param _builtins.str role_id: Specifies the role ID.
        """
        pulumi.set(__self__, "can_copy", can_copy)
        pulumi.set(__self__, "can_create_env", can_create_env)
        pulumi.set(__self__, "can_delete", can_delete)
        pulumi.set(__self__, "can_disable", can_disable)
        pulumi.set(__self__, "can_execute", can_execute)
        pulumi.set(__self__, "can_manage", can_manage)
        pulumi.set(__self__, "can_modify", can_modify)
        pulumi.set(__self__, "can_view", can_view)
        pulumi.set(__self__, "role_id", role_id)

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> _builtins.bool:
        """
        Specifies whether the role has the copy permission.
        """
        return pulumi.get(self, "can_copy")

    @_builtins.property
    @pulumi.getter(name="canCreateEnv")
    def can_create_env(self) -> _builtins.bool:
        """
        Specifies whether the role has the permission to create an environment.
        """
        return pulumi.get(self, "can_create_env")

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> _builtins.bool:
        """
        Specifies whether the role has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @_builtins.property
    @pulumi.getter(name="canDisable")
    def can_disable(self) -> _builtins.bool:
        """
        Specifies whether the role has the permission to disable application.
        """
        return pulumi.get(self, "can_disable")

    @_builtins.property
    @pulumi.getter(name="canExecute")
    def can_execute(self) -> _builtins.bool:
        """
        Specifies whether the role has the deployment permission.
        """
        return pulumi.get(self, "can_execute")

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> _builtins.bool:
        """
        Specifies whether the role has the management permission, including adding, deleting,
        modifying, querying deployment and permission modification.
        """
        return pulumi.get(self, "can_manage")

    @_builtins.property
    @pulumi.getter(name="canModify")
    def can_modify(self) -> _builtins.bool:
        """
        Specifies whether the role has the editing permission.
        """
        return pulumi.get(self, "can_modify")

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> _builtins.bool:
        """
        Specifies whether the role has the view permission.
        """
        return pulumi.get(self, "can_view")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> _builtins.str:
        """
        Specifies the role ID.
        """
        return pulumi.get(self, "role_id")


@pulumi.output_type
class DeployEnvironmentCreatedBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployEnvironmentCreatedBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployEnvironmentCreatedBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployEnvironmentCreatedBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_id: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str user_id: Indicates the user ID.
        :param _builtins.str user_name: Indicates the user name.
        """
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[_builtins.str]:
        """
        Indicates the user ID.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Indicates the user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class DeployEnvironmentHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"
        elif key == "hostId":
            suggest = "host_id"
        elif key == "connectionStatus":
            suggest = "connection_status"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployEnvironmentHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployEnvironmentHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployEnvironmentHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_id: _builtins.str,
                 host_id: _builtins.str,
                 connection_status: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None):
        """
        :param _builtins.str group_id: Specifies the cluster group ID.
        :param _builtins.str host_id: Specifies the host ID to be imported.
        :param _builtins.str connection_status: Indicates the connection status.
        :param _builtins.str host_name: Indicates the host name.
        :param _builtins.str ip_address: Indicates the IP address.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "host_id", host_id)
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        Specifies the cluster group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        """
        Specifies the host ID to be imported.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[_builtins.str]:
        """
        Indicates the connection status.
        """
        return pulumi.get(self, "connection_status")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        Indicates the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        Indicates the IP address.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class DeployEnvironmentPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canDelete":
            suggest = "can_delete"
        elif key == "canDeploy":
            suggest = "can_deploy"
        elif key == "canEdit":
            suggest = "can_edit"
        elif key == "canManage":
            suggest = "can_manage"
        elif key == "canView":
            suggest = "can_view"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployEnvironmentPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployEnvironmentPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployEnvironmentPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_delete: Optional[_builtins.bool] = None,
                 can_deploy: Optional[_builtins.bool] = None,
                 can_edit: Optional[_builtins.bool] = None,
                 can_manage: Optional[_builtins.bool] = None,
                 can_view: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool can_delete: Indicates whether the role has the permission to delete environments.
        :param _builtins.bool can_deploy: Indicates whether the role has the deploy permission.
        :param _builtins.bool can_edit: Indicates whether the role has the permission to edit environments.
        :param _builtins.bool can_manage: Indicates whether the role has the permission to edit the environment permission matrix.
        :param _builtins.bool can_view: Indicates whether the role has the view environment.
        """
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_deploy is not None:
            pulumi.set(__self__, "can_deploy", can_deploy)
        if can_edit is not None:
            pulumi.set(__self__, "can_edit", can_edit)
        if can_manage is not None:
            pulumi.set(__self__, "can_manage", can_manage)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to delete environments.
        """
        return pulumi.get(self, "can_delete")

    @_builtins.property
    @pulumi.getter(name="canDeploy")
    def can_deploy(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the deploy permission.
        """
        return pulumi.get(self, "can_deploy")

    @_builtins.property
    @pulumi.getter(name="canEdit")
    def can_edit(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to edit environments.
        """
        return pulumi.get(self, "can_edit")

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to edit the environment permission matrix.
        """
        return pulumi.get(self, "can_manage")

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the view environment.
        """
        return pulumi.get(self, "can_view")


@pulumi.output_type
class DeployEnvironmentPermissionMatrix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canDelete":
            suggest = "can_delete"
        elif key == "canDeploy":
            suggest = "can_deploy"
        elif key == "canEdit":
            suggest = "can_edit"
        elif key == "canManage":
            suggest = "can_manage"
        elif key == "canView":
            suggest = "can_view"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "permissionId":
            suggest = "permission_id"
        elif key == "roleId":
            suggest = "role_id"
        elif key == "roleName":
            suggest = "role_name"
        elif key == "roleType":
            suggest = "role_type"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployEnvironmentPermissionMatrix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployEnvironmentPermissionMatrix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployEnvironmentPermissionMatrix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_delete: Optional[_builtins.bool] = None,
                 can_deploy: Optional[_builtins.bool] = None,
                 can_edit: Optional[_builtins.bool] = None,
                 can_manage: Optional[_builtins.bool] = None,
                 can_view: Optional[_builtins.bool] = None,
                 created_at: Optional[_builtins.str] = None,
                 permission_id: Optional[_builtins.int] = None,
                 role_id: Optional[_builtins.str] = None,
                 role_name: Optional[_builtins.str] = None,
                 role_type: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.bool can_delete: Indicates whether the role has the permission to delete environments.
        :param _builtins.bool can_deploy: Indicates whether the role has the deploy permission.
        :param _builtins.bool can_edit: Indicates whether the role has the permission to edit environments.
        :param _builtins.bool can_manage: Indicates whether the role has the permission to edit the environment permission matrix.
        :param _builtins.bool can_view: Indicates whether the role has the view environment.
        :param _builtins.str created_at: Indicates the create time.
        :param _builtins.int permission_id: Indicates the permission ID.
        :param _builtins.str role_id: Indicates the role ID.
        :param _builtins.str role_name: Indicates the role name.
        :param _builtins.str role_type: Indicates the role type.
        :param _builtins.str updated_at: Indicates the update time.
        """
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_deploy is not None:
            pulumi.set(__self__, "can_deploy", can_deploy)
        if can_edit is not None:
            pulumi.set(__self__, "can_edit", can_edit)
        if can_manage is not None:
            pulumi.set(__self__, "can_manage", can_manage)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if permission_id is not None:
            pulumi.set(__self__, "permission_id", permission_id)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if role_type is not None:
            pulumi.set(__self__, "role_type", role_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to delete environments.
        """
        return pulumi.get(self, "can_delete")

    @_builtins.property
    @pulumi.getter(name="canDeploy")
    def can_deploy(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the deploy permission.
        """
        return pulumi.get(self, "can_deploy")

    @_builtins.property
    @pulumi.getter(name="canEdit")
    def can_edit(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to edit environments.
        """
        return pulumi.get(self, "can_edit")

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to edit the environment permission matrix.
        """
        return pulumi.get(self, "can_manage")

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the view environment.
        """
        return pulumi.get(self, "can_view")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="permissionId")
    def permission_id(self) -> Optional[_builtins.int]:
        """
        Indicates the permission ID.
        """
        return pulumi.get(self, "permission_id")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[_builtins.str]:
        """
        Indicates the role ID.
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[_builtins.str]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")

    @_builtins.property
    @pulumi.getter(name="roleType")
    def role_type(self) -> Optional[_builtins.str]:
        """
        Indicates the role type.
        """
        return pulumi.get(self, "role_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class DeployEnvironmentProxy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionStatus":
            suggest = "connection_status"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "hostId":
            suggest = "host_id"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployEnvironmentProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployEnvironmentProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployEnvironmentProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_status: Optional[_builtins.str] = None,
                 group_id: Optional[_builtins.str] = None,
                 host_id: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None):
        """
        :param _builtins.str connection_status: Indicates the connection status.
        :param _builtins.str group_id: Specifies the cluster group ID.
        :param _builtins.str host_id: Specifies the host ID to be imported.
        :param _builtins.str host_name: Indicates the host name.
        :param _builtins.str ip_address: Indicates the IP address.
        """
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if host_id is not None:
            pulumi.set(__self__, "host_id", host_id)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @_builtins.property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[_builtins.str]:
        """
        Indicates the connection status.
        """
        return pulumi.get(self, "connection_status")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        """
        Specifies the cluster group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[_builtins.str]:
        """
        Specifies the host ID to be imported.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        Indicates the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        Indicates the IP address.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class DeployGroupCreatedBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployGroupCreatedBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployGroupCreatedBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployGroupCreatedBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_id: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str user_id: The user ID.
        :param _builtins.str user_name: The user name.
        """
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[_builtins.str]:
        """
        The user ID.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        The user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class DeployGroupPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canAddHost":
            suggest = "can_add_host"
        elif key == "canCopy":
            suggest = "can_copy"
        elif key == "canDelete":
            suggest = "can_delete"
        elif key == "canEdit":
            suggest = "can_edit"
        elif key == "canManage":
            suggest = "can_manage"
        elif key == "canView":
            suggest = "can_view"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployGroupPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployGroupPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployGroupPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_add_host: Optional[_builtins.bool] = None,
                 can_copy: Optional[_builtins.bool] = None,
                 can_delete: Optional[_builtins.bool] = None,
                 can_edit: Optional[_builtins.bool] = None,
                 can_manage: Optional[_builtins.bool] = None,
                 can_view: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool can_add_host: Indicates whether the role has the permission to add hosts.
        :param _builtins.bool can_copy: Indicates whether the role has the permission to copy.
        :param _builtins.bool can_delete: Indicates whether the role has the deletion permission.
        :param _builtins.bool can_edit: Indicates whether the role has the edit permission.
        :param _builtins.bool can_manage: Indicates whether the role has the management permission.
        :param _builtins.bool can_view: Indicates whether the role has the view permission.
        """
        if can_add_host is not None:
            pulumi.set(__self__, "can_add_host", can_add_host)
        if can_copy is not None:
            pulumi.set(__self__, "can_copy", can_copy)
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_edit is not None:
            pulumi.set(__self__, "can_edit", can_edit)
        if can_manage is not None:
            pulumi.set(__self__, "can_manage", can_manage)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)

    @_builtins.property
    @pulumi.getter(name="canAddHost")
    def can_add_host(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to add hosts.
        """
        return pulumi.get(self, "can_add_host")

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to copy.
        """
        return pulumi.get(self, "can_copy")

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @_builtins.property
    @pulumi.getter(name="canEdit")
    def can_edit(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the edit permission.
        """
        return pulumi.get(self, "can_edit")

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the management permission.
        """
        return pulumi.get(self, "can_manage")

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the view permission.
        """
        return pulumi.get(self, "can_view")


@pulumi.output_type
class DeployGroupPermissionMatrix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canAddHost":
            suggest = "can_add_host"
        elif key == "canCopy":
            suggest = "can_copy"
        elif key == "canDelete":
            suggest = "can_delete"
        elif key == "canEdit":
            suggest = "can_edit"
        elif key == "canManage":
            suggest = "can_manage"
        elif key == "canView":
            suggest = "can_view"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "roleId":
            suggest = "role_id"
        elif key == "roleName":
            suggest = "role_name"
        elif key == "roleType":
            suggest = "role_type"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployGroupPermissionMatrix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployGroupPermissionMatrix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployGroupPermissionMatrix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_add_host: Optional[_builtins.bool] = None,
                 can_copy: Optional[_builtins.bool] = None,
                 can_delete: Optional[_builtins.bool] = None,
                 can_edit: Optional[_builtins.bool] = None,
                 can_manage: Optional[_builtins.bool] = None,
                 can_view: Optional[_builtins.bool] = None,
                 created_at: Optional[_builtins.str] = None,
                 role_id: Optional[_builtins.str] = None,
                 role_name: Optional[_builtins.str] = None,
                 role_type: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.bool can_add_host: Indicates whether the role has the permission to add hosts.
        :param _builtins.bool can_copy: Indicates whether the role has the permission to copy.
        :param _builtins.bool can_delete: Indicates whether the role has the deletion permission.
        :param _builtins.bool can_edit: Indicates whether the role has the edit permission.
        :param _builtins.bool can_manage: Indicates whether the role has the management permission.
        :param _builtins.bool can_view: Indicates whether the role has the view permission.
        :param _builtins.str created_at: The permission create time.
        :param _builtins.str role_id: Indicates the role ID.
        :param _builtins.str role_name: Indicates the role name.
        :param _builtins.str role_type: Indicates the role type.
        :param _builtins.str updated_at: The permission update time.
        """
        if can_add_host is not None:
            pulumi.set(__self__, "can_add_host", can_add_host)
        if can_copy is not None:
            pulumi.set(__self__, "can_copy", can_copy)
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_edit is not None:
            pulumi.set(__self__, "can_edit", can_edit)
        if can_manage is not None:
            pulumi.set(__self__, "can_manage", can_manage)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if role_type is not None:
            pulumi.set(__self__, "role_type", role_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="canAddHost")
    def can_add_host(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to add hosts.
        """
        return pulumi.get(self, "can_add_host")

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to copy.
        """
        return pulumi.get(self, "can_copy")

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @_builtins.property
    @pulumi.getter(name="canEdit")
    def can_edit(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the edit permission.
        """
        return pulumi.get(self, "can_edit")

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the management permission.
        """
        return pulumi.get(self, "can_manage")

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the view permission.
        """
        return pulumi.get(self, "can_view")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The permission create time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[_builtins.str]:
        """
        Indicates the role ID.
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[_builtins.str]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")

    @_builtins.property
    @pulumi.getter(name="roleType")
    def role_type(self) -> Optional[_builtins.str]:
        """
        Indicates the role type.
        """
        return pulumi.get(self, "role_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The permission update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class DeployHostPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canAddHost":
            suggest = "can_add_host"
        elif key == "canCopy":
            suggest = "can_copy"
        elif key == "canDelete":
            suggest = "can_delete"
        elif key == "canEdit":
            suggest = "can_edit"
        elif key == "canView":
            suggest = "can_view"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployHostPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployHostPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployHostPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_add_host: Optional[_builtins.bool] = None,
                 can_copy: Optional[_builtins.bool] = None,
                 can_delete: Optional[_builtins.bool] = None,
                 can_edit: Optional[_builtins.bool] = None,
                 can_view: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool can_add_host: Indicates whether the user has the permission to add hosts.
        :param _builtins.bool can_copy: Indicates whether the user has the permission to copy hosts.
        :param _builtins.bool can_delete: Indicates whether the user has the deletion permission.
        :param _builtins.bool can_edit: Indicates whether the user has the edit permission.
        :param _builtins.bool can_view: Indicates whether the user has the view permission.
        """
        if can_add_host is not None:
            pulumi.set(__self__, "can_add_host", can_add_host)
        if can_copy is not None:
            pulumi.set(__self__, "can_copy", can_copy)
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_edit is not None:
            pulumi.set(__self__, "can_edit", can_edit)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)

    @_builtins.property
    @pulumi.getter(name="canAddHost")
    def can_add_host(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the user has the permission to add hosts.
        """
        return pulumi.get(self, "can_add_host")

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the user has the permission to copy hosts.
        """
        return pulumi.get(self, "can_copy")

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the user has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @_builtins.property
    @pulumi.getter(name="canEdit")
    def can_edit(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the user has the edit permission.
        """
        return pulumi.get(self, "can_edit")

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the user has the view permission.
        """
        return pulumi.get(self, "can_view")


@pulumi.output_type
class InspectorHostLastScanInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "enableWeakPasswd":
            suggest = "enable_weak_passwd"
        elif key == "endTime":
            suggest = "end_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InspectorHostLastScanInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InspectorHostLastScanInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InspectorHostLastScanInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_time: Optional[_builtins.str] = None,
                 enable_weak_passwd: Optional[_builtins.bool] = None,
                 end_time: Optional[_builtins.str] = None,
                 progress: Optional[_builtins.int] = None,
                 reason: Optional[_builtins.str] = None,
                 status: Optional[_builtins.int] = None):
        """
        :param _builtins.str create_time: Indicates the scan task create time.
        :param _builtins.bool enable_weak_passwd: Indicates whether weak password check enabled.
        :param _builtins.str end_time: Indicates the scan task end time.
        :param _builtins.int progress: Indicates the task progress.
        :param _builtins.str reason: Indicates the task description.
        :param _builtins.int status: Indicates the task status.
               Value can be as follows:
               + **0**: running
               + **1**: completed
               + **2**: cancel
               + **3**: waiting
               + **4**: failed
               + **5**: scheduled
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable_weak_passwd is not None:
            pulumi.set(__self__, "enable_weak_passwd", enable_weak_passwd)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[_builtins.str]:
        """
        Indicates the scan task create time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="enableWeakPasswd")
    def enable_weak_passwd(self) -> Optional[_builtins.bool]:
        """
        Indicates whether weak password check enabled.
        """
        return pulumi.get(self, "enable_weak_passwd")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Indicates the scan task end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[_builtins.int]:
        """
        Indicates the task progress.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> Optional[_builtins.str]:
        """
        Indicates the task description.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        Indicates the task status.
        Value can be as follows:
        + **0**: running
        + **1**: completed
        + **2**: cancel
        + **3**: waiting
        + **4**: failed
        + **5**: scheduled
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class PipelineActionSource(dict):
    def __init__(__self__, *,
                 params: 'outputs.PipelineActionSourceParams',
                 type: _builtins.str):
        """
        :param 'PipelineActionSourceParamsArgs' params: Specifies the source parameters.
               The params structure is documented below.
        :param _builtins.str type: Specifies the pipeline source type.
               
               <a name="block--sources--params"></a>
               The `params` block supports:
        """
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def params(self) -> 'outputs.PipelineActionSourceParams':
        """
        Specifies the source parameters.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the pipeline source type.

        <a name="block--sources--params"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PipelineActionSourceParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gitType":
            suggest = "git_type"
        elif key == "gitUrl":
            suggest = "git_url"
        elif key == "buildParams":
            suggest = "build_params"
        elif key == "changeRequestIds":
            suggest = "change_request_ids"
        elif key == "codehubId":
            suggest = "codehub_id"
        elif key == "defaultBranch":
            suggest = "default_branch"
        elif key == "endpointId":
            suggest = "endpoint_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineActionSourceParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineActionSourceParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineActionSourceParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 git_type: _builtins.str,
                 git_url: _builtins.str,
                 alias: Optional[_builtins.str] = None,
                 build_params: Optional['outputs.PipelineActionSourceParamsBuildParams'] = None,
                 change_request_ids: Optional[Sequence[_builtins.str]] = None,
                 codehub_id: Optional[_builtins.str] = None,
                 default_branch: Optional[_builtins.str] = None,
                 endpoint_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str git_type: Specifies the code repository type.
        :param _builtins.str git_url: Specifies the HTTPS address of the Git repository.
        :param _builtins.str alias: Specifies the code repository alias.
        :param 'PipelineActionSourceParamsBuildParamsArgs' build_params: Specifies the detailed build parameters.
               The build_params structure is documented below.
        :param Sequence[_builtins.str] change_request_ids: Specifies the change IDs of the change-triggered pipeline.
        :param _builtins.str codehub_id: Specifies the CodeArts Repo code repository ID.
        :param _builtins.str default_branch: Specifies the default branch of the code repository for pipeline
               execution.
        :param _builtins.str endpoint_id: Specifies the ID of the code source endpoint.
               
               <a name="block--sources--params--build_params"></a>
               The `build_params` block supports:
        """
        pulumi.set(__self__, "git_type", git_type)
        pulumi.set(__self__, "git_url", git_url)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if build_params is not None:
            pulumi.set(__self__, "build_params", build_params)
        if change_request_ids is not None:
            pulumi.set(__self__, "change_request_ids", change_request_ids)
        if codehub_id is not None:
            pulumi.set(__self__, "codehub_id", codehub_id)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)

    @_builtins.property
    @pulumi.getter(name="gitType")
    def git_type(self) -> _builtins.str:
        """
        Specifies the code repository type.
        """
        return pulumi.get(self, "git_type")

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> _builtins.str:
        """
        Specifies the HTTPS address of the Git repository.
        """
        return pulumi.get(self, "git_url")

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[_builtins.str]:
        """
        Specifies the code repository alias.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="buildParams")
    def build_params(self) -> Optional['outputs.PipelineActionSourceParamsBuildParams']:
        """
        Specifies the detailed build parameters.
        The build_params structure is documented below.
        """
        return pulumi.get(self, "build_params")

    @_builtins.property
    @pulumi.getter(name="changeRequestIds")
    def change_request_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the change IDs of the change-triggered pipeline.
        """
        return pulumi.get(self, "change_request_ids")

    @_builtins.property
    @pulumi.getter(name="codehubId")
    def codehub_id(self) -> Optional[_builtins.str]:
        """
        Specifies the CodeArts Repo code repository ID.
        """
        return pulumi.get(self, "codehub_id")

    @_builtins.property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[_builtins.str]:
        """
        Specifies the default branch of the code repository for pipeline
        execution.
        """
        return pulumi.get(self, "default_branch")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the code source endpoint.

        <a name="block--sources--params--build_params"></a>
        The `build_params` block supports:
        """
        return pulumi.get(self, "endpoint_id")


@pulumi.output_type
class PipelineActionSourceParamsBuildParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buildType":
            suggest = "build_type"
        elif key == "eventType":
            suggest = "event_type"
        elif key == "targetBranch":
            suggest = "target_branch"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineActionSourceParamsBuildParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineActionSourceParamsBuildParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineActionSourceParamsBuildParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 build_type: _builtins.str,
                 event_type: Optional[_builtins.str] = None,
                 tag: Optional[_builtins.str] = None,
                 target_branch: Optional[_builtins.str] = None):
        """
        :param _builtins.str build_type: Specifies the code repository trigger type.
        :param _builtins.str event_type: Specifies the event type that triggers the pipeline execution.
        :param _builtins.str tag: Specifies the tag that triggers the pipeline execution.
        :param _builtins.str target_branch: Specifies the branch that triggers the pipeline execution.
               
               <a name="block--variables"></a>
               The `variables` block supports:
        """
        pulumi.set(__self__, "build_type", build_type)
        if event_type is not None:
            pulumi.set(__self__, "event_type", event_type)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if target_branch is not None:
            pulumi.set(__self__, "target_branch", target_branch)

    @_builtins.property
    @pulumi.getter(name="buildType")
    def build_type(self) -> _builtins.str:
        """
        Specifies the code repository trigger type.
        """
        return pulumi.get(self, "build_type")

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[_builtins.str]:
        """
        Specifies the event type that triggers the pipeline execution.
        """
        return pulumi.get(self, "event_type")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[_builtins.str]:
        """
        Specifies the tag that triggers the pipeline execution.
        """
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter(name="targetBranch")
    def target_branch(self) -> Optional[_builtins.str]:
        """
        Specifies the branch that triggers the pipeline execution.

        <a name="block--variables"></a>
        The `variables` block supports:
        """
        return pulumi.get(self, "target_branch")


@pulumi.output_type
class PipelineActionVariable(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the parameter name.
        :param _builtins.str value: Specifies the parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PipelineByTemplateConcurrencyControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "concurrencyNumber":
            suggest = "concurrency_number"
        elif key == "exceedAction":
            suggest = "exceed_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineByTemplateConcurrencyControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineByTemplateConcurrencyControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineByTemplateConcurrencyControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 concurrency_number: Optional[_builtins.int] = None,
                 enable: Optional[_builtins.bool] = None,
                 exceed_action: Optional[_builtins.str] = None):
        """
        :param _builtins.int concurrency_number: Specifies the number of concurrent instances.
        :param _builtins.bool enable: Specifies whether it is available.
        :param _builtins.str exceed_action: Specifies the policy when the threshold is exceeded.
               
               <a name="block--schedules"></a>
               The `schedules` block supports:
        """
        if concurrency_number is not None:
            pulumi.set(__self__, "concurrency_number", concurrency_number)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if exceed_action is not None:
            pulumi.set(__self__, "exceed_action", exceed_action)

    @_builtins.property
    @pulumi.getter(name="concurrencyNumber")
    def concurrency_number(self) -> Optional[_builtins.int]:
        """
        Specifies the number of concurrent instances.
        """
        return pulumi.get(self, "concurrency_number")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether it is available.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="exceedAction")
    def exceed_action(self) -> Optional[_builtins.str]:
        """
        Specifies the policy when the threshold is exceeded.

        <a name="block--schedules"></a>
        The `schedules` block supports:
        """
        return pulumi.get(self, "exceed_action")


@pulumi.output_type
class PipelineByTemplateRolePermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationAuthorize":
            suggest = "operation_authorize"
        elif key == "operationDelete":
            suggest = "operation_delete"
        elif key == "operationExecute":
            suggest = "operation_execute"
        elif key == "operationQuery":
            suggest = "operation_query"
        elif key == "operationUpdate":
            suggest = "operation_update"
        elif key == "roleId":
            suggest = "role_id"
        elif key == "roleName":
            suggest = "role_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineByTemplateRolePermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineByTemplateRolePermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineByTemplateRolePermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_authorize: Optional[_builtins.bool] = None,
                 operation_delete: Optional[_builtins.bool] = None,
                 operation_execute: Optional[_builtins.bool] = None,
                 operation_query: Optional[_builtins.bool] = None,
                 operation_update: Optional[_builtins.bool] = None,
                 role_id: Optional[_builtins.int] = None,
                 role_name: Optional[_builtins.str] = None):
        """
        :param _builtins.bool operation_authorize: Indicates whether the role has the permission to authorize.
        :param _builtins.bool operation_delete: Indicates whether the role has the permission to delete.
        :param _builtins.bool operation_execute: Indicates whether the role has the permission to execute.
        :param _builtins.bool operation_query: Indicates whether the role has the permission to query.
        :param _builtins.bool operation_update: Indicates whether the role has the permission to update.
        :param _builtins.int role_id: Indicates the role ID.
        :param _builtins.str role_name: Indicates the role name.
        """
        if operation_authorize is not None:
            pulumi.set(__self__, "operation_authorize", operation_authorize)
        if operation_delete is not None:
            pulumi.set(__self__, "operation_delete", operation_delete)
        if operation_execute is not None:
            pulumi.set(__self__, "operation_execute", operation_execute)
        if operation_query is not None:
            pulumi.set(__self__, "operation_query", operation_query)
        if operation_update is not None:
            pulumi.set(__self__, "operation_update", operation_update)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @_builtins.property
    @pulumi.getter(name="operationAuthorize")
    def operation_authorize(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to authorize.
        """
        return pulumi.get(self, "operation_authorize")

    @_builtins.property
    @pulumi.getter(name="operationDelete")
    def operation_delete(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to delete.
        """
        return pulumi.get(self, "operation_delete")

    @_builtins.property
    @pulumi.getter(name="operationExecute")
    def operation_execute(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to execute.
        """
        return pulumi.get(self, "operation_execute")

    @_builtins.property
    @pulumi.getter(name="operationQuery")
    def operation_query(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to query.
        """
        return pulumi.get(self, "operation_query")

    @_builtins.property
    @pulumi.getter(name="operationUpdate")
    def operation_update(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to update.
        """
        return pulumi.get(self, "operation_update")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[_builtins.int]:
        """
        Indicates the role ID.
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[_builtins.str]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")


@pulumi.output_type
class PipelineByTemplateSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfWeeks":
            suggest = "days_of_weeks"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "intervalTime":
            suggest = "interval_time"
        elif key == "intervalUnit":
            suggest = "interval_unit"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineByTemplateSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineByTemplateSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineByTemplateSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_weeks: Optional[Sequence[_builtins.int]] = None,
                 enable: Optional[_builtins.bool] = None,
                 end_time: Optional[_builtins.str] = None,
                 interval_time: Optional[_builtins.str] = None,
                 interval_unit: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 start_time: Optional[_builtins.str] = None,
                 time_zone: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None,
                 uuid: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.int] days_of_weeks: Specifies the execution day in a week.
        :param _builtins.bool enable: Specifies whether it is available.
        :param _builtins.str end_time: Specifies the end time.
        :param _builtins.str interval_time: Specifies the interval time.
        :param _builtins.str interval_unit: Specifies the interval unit.
        :param _builtins.str name: Specifies the custom variable name.
        :param _builtins.str start_time: Specifies the start time.
        :param _builtins.str time_zone: Specifies the time zone.
        :param _builtins.str type: Specifies the custom parameter type.
        :param _builtins.str uuid: Indicates the ID of a scheduled task.
        """
        if days_of_weeks is not None:
            pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if interval_time is not None:
            pulumi.set(__self__, "interval_time", interval_time)
        if interval_unit is not None:
            pulumi.set(__self__, "interval_unit", interval_unit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Optional[Sequence[_builtins.int]]:
        """
        Specifies the execution day in a week.
        """
        return pulumi.get(self, "days_of_weeks")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether it is available.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Specifies the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="intervalTime")
    def interval_time(self) -> Optional[_builtins.str]:
        """
        Specifies the interval time.
        """
        return pulumi.get(self, "interval_time")

    @_builtins.property
    @pulumi.getter(name="intervalUnit")
    def interval_unit(self) -> Optional[_builtins.str]:
        """
        Specifies the interval unit.
        """
        return pulumi.get(self, "interval_unit")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the custom variable name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        """
        Specifies the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[_builtins.str]:
        """
        Specifies the time zone.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of a scheduled task.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class PipelineByTemplateSource(dict):
    def __init__(__self__, *,
                 params: Optional['outputs.PipelineByTemplateSourceParams'] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param 'PipelineByTemplateSourceParamsArgs' params: Specifies the pipeline source parameters.
               The params structure is documented below.
        :param _builtins.str type: Specifies the custom parameter type.
        """
        if params is not None:
            pulumi.set(__self__, "params", params)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional['outputs.PipelineByTemplateSourceParams']:
        """
        Specifies the pipeline source parameters.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PipelineByTemplateSourceParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codehubId":
            suggest = "codehub_id"
        elif key == "defaultBranch":
            suggest = "default_branch"
        elif key == "endpointId":
            suggest = "endpoint_id"
        elif key == "gitType":
            suggest = "git_type"
        elif key == "gitUrl":
            suggest = "git_url"
        elif key == "repoName":
            suggest = "repo_name"
        elif key == "sshGitUrl":
            suggest = "ssh_git_url"
        elif key == "webUrl":
            suggest = "web_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineByTemplateSourceParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineByTemplateSourceParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineByTemplateSourceParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alias: Optional[_builtins.str] = None,
                 codehub_id: Optional[_builtins.str] = None,
                 default_branch: Optional[_builtins.str] = None,
                 endpoint_id: Optional[_builtins.str] = None,
                 git_type: Optional[_builtins.str] = None,
                 git_url: Optional[_builtins.str] = None,
                 repo_name: Optional[_builtins.str] = None,
                 ssh_git_url: Optional[_builtins.str] = None,
                 web_url: Optional[_builtins.str] = None):
        """
        :param _builtins.str alias: Specifies the code repository alias.
        :param _builtins.str codehub_id: Specifies the CodeArts Repo code repository ID.
        :param _builtins.str default_branch: Specifies the default branch.
        :param _builtins.str endpoint_id: Specifies the code source endpoint ID.
        :param _builtins.str git_type: Specifies the Git repository type.
        :param _builtins.str git_url: Specifies the Git URL.
        :param _builtins.str repo_name: Specifies the pipeline source name.
        :param _builtins.str ssh_git_url: Specifies the SSH Git address,
        :param _builtins.str web_url: Specifies the web page URL.
               
               <a name="block--concurrency_control"></a>
               The `concurrency_control` block supports:
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if codehub_id is not None:
            pulumi.set(__self__, "codehub_id", codehub_id)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if git_type is not None:
            pulumi.set(__self__, "git_type", git_type)
        if git_url is not None:
            pulumi.set(__self__, "git_url", git_url)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if ssh_git_url is not None:
            pulumi.set(__self__, "ssh_git_url", ssh_git_url)
        if web_url is not None:
            pulumi.set(__self__, "web_url", web_url)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[_builtins.str]:
        """
        Specifies the code repository alias.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="codehubId")
    def codehub_id(self) -> Optional[_builtins.str]:
        """
        Specifies the CodeArts Repo code repository ID.
        """
        return pulumi.get(self, "codehub_id")

    @_builtins.property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[_builtins.str]:
        """
        Specifies the default branch.
        """
        return pulumi.get(self, "default_branch")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[_builtins.str]:
        """
        Specifies the code source endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter(name="gitType")
    def git_type(self) -> Optional[_builtins.str]:
        """
        Specifies the Git repository type.
        """
        return pulumi.get(self, "git_type")

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> Optional[_builtins.str]:
        """
        Specifies the Git URL.
        """
        return pulumi.get(self, "git_url")

    @_builtins.property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[_builtins.str]:
        """
        Specifies the pipeline source name.
        """
        return pulumi.get(self, "repo_name")

    @_builtins.property
    @pulumi.getter(name="sshGitUrl")
    def ssh_git_url(self) -> Optional[_builtins.str]:
        """
        Specifies the SSH Git address,
        """
        return pulumi.get(self, "ssh_git_url")

    @_builtins.property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> Optional[_builtins.str]:
        """
        Specifies the web page URL.

        <a name="block--concurrency_control"></a>
        The `concurrency_control` block supports:
        """
        return pulumi.get(self, "web_url")


@pulumi.output_type
class PipelineByTemplateTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "callbackUrl":
            suggest = "callback_url"
        elif key == "endpointId":
            suggest = "endpoint_id"
        elif key == "gitType":
            suggest = "git_type"
        elif key == "gitUrl":
            suggest = "git_url"
        elif key == "hookId":
            suggest = "hook_id"
        elif key == "isAutoCommit":
            suggest = "is_auto_commit"
        elif key == "repoId":
            suggest = "repo_id"
        elif key == "securityToken":
            suggest = "security_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineByTemplateTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineByTemplateTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineByTemplateTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 callback_url: Optional[_builtins.str] = None,
                 endpoint_id: Optional[_builtins.str] = None,
                 events: Optional[Sequence['outputs.PipelineByTemplateTriggerEvent']] = None,
                 git_type: Optional[_builtins.str] = None,
                 git_url: Optional[_builtins.str] = None,
                 hook_id: Optional[_builtins.int] = None,
                 is_auto_commit: Optional[_builtins.bool] = None,
                 repo_id: Optional[_builtins.str] = None,
                 security_token: Optional[_builtins.str] = None):
        """
        :param _builtins.str callback_url: Specifies the callback URL.
        :param _builtins.str endpoint_id: Specifies the code source endpoint ID.
        :param Sequence['PipelineByTemplateTriggerEventArgs'] events: Specifies the trigger event list.
               The events structure is documented below.
        :param _builtins.str git_type: Specifies the Git repository type.
        :param _builtins.str git_url: Specifies the Git URL.
        :param _builtins.int hook_id: Indicates the callback ID.
        :param _builtins.bool is_auto_commit: Specifies whether to automatically commit code.
        :param _builtins.str repo_id: Specifies the repository ID.
        :param _builtins.str security_token: Specifies the User token.
               
               <a name="block--triggers--events"></a>
               The `events` block supports:
        """
        if callback_url is not None:
            pulumi.set(__self__, "callback_url", callback_url)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if git_type is not None:
            pulumi.set(__self__, "git_type", git_type)
        if git_url is not None:
            pulumi.set(__self__, "git_url", git_url)
        if hook_id is not None:
            pulumi.set(__self__, "hook_id", hook_id)
        if is_auto_commit is not None:
            pulumi.set(__self__, "is_auto_commit", is_auto_commit)
        if repo_id is not None:
            pulumi.set(__self__, "repo_id", repo_id)
        if security_token is not None:
            pulumi.set(__self__, "security_token", security_token)

    @_builtins.property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> Optional[_builtins.str]:
        """
        Specifies the callback URL.
        """
        return pulumi.get(self, "callback_url")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[_builtins.str]:
        """
        Specifies the code source endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter
    def events(self) -> Optional[Sequence['outputs.PipelineByTemplateTriggerEvent']]:
        """
        Specifies the trigger event list.
        The events structure is documented below.
        """
        return pulumi.get(self, "events")

    @_builtins.property
    @pulumi.getter(name="gitType")
    def git_type(self) -> Optional[_builtins.str]:
        """
        Specifies the Git repository type.
        """
        return pulumi.get(self, "git_type")

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> Optional[_builtins.str]:
        """
        Specifies the Git URL.
        """
        return pulumi.get(self, "git_url")

    @_builtins.property
    @pulumi.getter(name="hookId")
    def hook_id(self) -> Optional[_builtins.int]:
        """
        Indicates the callback ID.
        """
        return pulumi.get(self, "hook_id")

    @_builtins.property
    @pulumi.getter(name="isAutoCommit")
    def is_auto_commit(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to automatically commit code.
        """
        return pulumi.get(self, "is_auto_commit")

    @_builtins.property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> Optional[_builtins.str]:
        """
        Specifies the repository ID.
        """
        return pulumi.get(self, "repo_id")

    @_builtins.property
    @pulumi.getter(name="securityToken")
    def security_token(self) -> Optional[_builtins.str]:
        """
        Specifies the User token.

        <a name="block--triggers--events"></a>
        The `events` block supports:
        """
        return pulumi.get(self, "security_token")


@pulumi.output_type
class PipelineByTemplateTriggerEvent(dict):
    def __init__(__self__, *,
                 enable: Optional[_builtins.bool] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.bool enable: Specifies whether it is available.
        :param _builtins.str type: Specifies the custom parameter type.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether it is available.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PipelineByTemplateVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isReset":
            suggest = "is_reset"
        elif key == "isRuntime":
            suggest = "is_runtime"
        elif key == "isSecret":
            suggest = "is_secret"
        elif key == "latestValue":
            suggest = "latest_value"
        elif key == "runtimeValue":
            suggest = "runtime_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineByTemplateVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineByTemplateVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineByTemplateVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 is_reset: Optional[_builtins.bool] = None,
                 is_runtime: Optional[_builtins.bool] = None,
                 is_secret: Optional[_builtins.bool] = None,
                 latest_value: Optional[_builtins.str] = None,
                 limits: Optional[Sequence[_builtins.str]] = None,
                 name: Optional[_builtins.str] = None,
                 runtime_value: Optional[_builtins.str] = None,
                 sequence: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the parameter description.
        :param _builtins.bool is_reset: Specifies whether to reset.
        :param _builtins.bool is_runtime: Specifies whether to set parameters at runtime.
        :param _builtins.bool is_secret: Specifies whether it is a private parameter.
        :param _builtins.str latest_value: Specifies the last parameter value.
        :param Sequence[_builtins.str] limits: Specifies the list of enumerated values.
        :param _builtins.str name: Specifies the custom variable name.
        :param _builtins.str runtime_value: Specifies the value passed in at runtime.
        :param _builtins.int sequence: Specifies the parameter sequence, starting from 1.
        :param _builtins.str type: Specifies the custom parameter type.
        :param _builtins.str value: Specifies the custom parameter default value.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_reset is not None:
            pulumi.set(__self__, "is_reset", is_reset)
        if is_runtime is not None:
            pulumi.set(__self__, "is_runtime", is_runtime)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if latest_value is not None:
            pulumi.set(__self__, "latest_value", latest_value)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if runtime_value is not None:
            pulumi.set(__self__, "runtime_value", runtime_value)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isReset")
    def is_reset(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to reset.
        """
        return pulumi.get(self, "is_reset")

    @_builtins.property
    @pulumi.getter(name="isRuntime")
    def is_runtime(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to set parameters at runtime.
        """
        return pulumi.get(self, "is_runtime")

    @_builtins.property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[_builtins.bool]:
        """
        Specifies whether it is a private parameter.
        """
        return pulumi.get(self, "is_secret")

    @_builtins.property
    @pulumi.getter(name="latestValue")
    def latest_value(self) -> Optional[_builtins.str]:
        """
        Specifies the last parameter value.
        """
        return pulumi.get(self, "latest_value")

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of enumerated values.
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the custom variable name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="runtimeValue")
    def runtime_value(self) -> Optional[_builtins.str]:
        """
        Specifies the value passed in at runtime.
        """
        return pulumi.get(self, "runtime_value")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> Optional[_builtins.int]:
        """
        Specifies the parameter sequence, starting from 1.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter default value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PipelineConcurrencyControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "concurrencyNumber":
            suggest = "concurrency_number"
        elif key == "exceedAction":
            suggest = "exceed_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineConcurrencyControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineConcurrencyControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineConcurrencyControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 concurrency_number: Optional[_builtins.int] = None,
                 enable: Optional[_builtins.bool] = None,
                 exceed_action: Optional[_builtins.str] = None):
        """
        :param _builtins.int concurrency_number: Specifies the number of concurrent instances.
        :param _builtins.bool enable: Specifies whether it is available. Defaults to **false**.
        :param _builtins.str exceed_action: Specifies the policy when the threshold is exceeded.
               Value can be as follows:
               + **ABORT**: ignore
               + **QUEUE**: wait in queue
               
               <a name="block--schedules"></a>
               The `schedules` block supports:
        """
        if concurrency_number is not None:
            pulumi.set(__self__, "concurrency_number", concurrency_number)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if exceed_action is not None:
            pulumi.set(__self__, "exceed_action", exceed_action)

    @_builtins.property
    @pulumi.getter(name="concurrencyNumber")
    def concurrency_number(self) -> Optional[_builtins.int]:
        """
        Specifies the number of concurrent instances.
        """
        return pulumi.get(self, "concurrency_number")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether it is available. Defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="exceedAction")
    def exceed_action(self) -> Optional[_builtins.str]:
        """
        Specifies the policy when the threshold is exceeded.
        Value can be as follows:
        + **ABORT**: ignore
        + **QUEUE**: wait in queue

        <a name="block--schedules"></a>
        The `schedules` block supports:
        """
        return pulumi.get(self, "exceed_action")


@pulumi.output_type
class PipelineMicroServiceRepo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gitUrl":
            suggest = "git_url"
        elif key == "httpUrl":
            suggest = "http_url"
        elif key == "repoId":
            suggest = "repo_id"
        elif key == "endpointId":
            suggest = "endpoint_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineMicroServiceRepo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineMicroServiceRepo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineMicroServiceRepo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch: _builtins.str,
                 git_url: _builtins.str,
                 http_url: _builtins.str,
                 language: _builtins.str,
                 repo_id: _builtins.str,
                 type: _builtins.str,
                 endpoint_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str branch: Specifies the branch.
        :param _builtins.str git_url: Specifies the Git address of the Git repository.
        :param _builtins.str http_url: Specifies the HTTP address of the Git repository.
        :param _builtins.str language: Specifies the language.
        :param _builtins.str repo_id: Specifies the repository ID.
        :param _builtins.str type: Specifies the repository type.
        :param _builtins.str endpoint_id: Specifies the endpoint ID.
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "git_url", git_url)
        pulumi.set(__self__, "http_url", http_url)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "repo_id", repo_id)
        pulumi.set(__self__, "type", type)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)

    @_builtins.property
    @pulumi.getter
    def branch(self) -> _builtins.str:
        """
        Specifies the branch.
        """
        return pulumi.get(self, "branch")

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> _builtins.str:
        """
        Specifies the Git address of the Git repository.
        """
        return pulumi.get(self, "git_url")

    @_builtins.property
    @pulumi.getter(name="httpUrl")
    def http_url(self) -> _builtins.str:
        """
        Specifies the HTTP address of the Git repository.
        """
        return pulumi.get(self, "http_url")

    @_builtins.property
    @pulumi.getter
    def language(self) -> _builtins.str:
        """
        Specifies the language.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> _builtins.str:
        """
        Specifies the repository ID.
        """
        return pulumi.get(self, "repo_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the repository type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[_builtins.str]:
        """
        Specifies the endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")


@pulumi.output_type
class PipelineParameterGroupRelatedPipeline(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Indicates the pipeline ID.
        :param _builtins.str name: Specifies the custom variable name.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the pipeline ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the custom variable name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PipelineParameterGroupVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSecret":
            suggest = "is_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineParameterGroupVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineParameterGroupVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineParameterGroupVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 is_secret: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 sequence: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the parameter description.
        :param _builtins.bool is_secret: Specifies whether it is a private parameter.
        :param _builtins.str name: Specifies the custom variable name.
        :param _builtins.int sequence: Specifies the parameter sequence, starting from 1.
        :param _builtins.str type: Specifies the custom parameter type.
        :param _builtins.str value: Specifies the custom parameter default value.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[_builtins.bool]:
        """
        Specifies whether it is a private parameter.
        """
        return pulumi.get(self, "is_secret")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the custom variable name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> Optional[_builtins.int]:
        """
        Specifies the parameter sequence, starting from 1.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter default value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PipelineRolePermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationAuthorize":
            suggest = "operation_authorize"
        elif key == "operationDelete":
            suggest = "operation_delete"
        elif key == "operationExecute":
            suggest = "operation_execute"
        elif key == "operationQuery":
            suggest = "operation_query"
        elif key == "operationUpdate":
            suggest = "operation_update"
        elif key == "roleId":
            suggest = "role_id"
        elif key == "roleName":
            suggest = "role_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRolePermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRolePermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRolePermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_authorize: Optional[_builtins.bool] = None,
                 operation_delete: Optional[_builtins.bool] = None,
                 operation_execute: Optional[_builtins.bool] = None,
                 operation_query: Optional[_builtins.bool] = None,
                 operation_update: Optional[_builtins.bool] = None,
                 role_id: Optional[_builtins.int] = None,
                 role_name: Optional[_builtins.str] = None):
        """
        :param _builtins.bool operation_authorize: Indicates whether the role has the permission to authorize.
        :param _builtins.bool operation_delete: Indicates whether the role has the permission to delete.
        :param _builtins.bool operation_execute: Indicates whether the role has the permission to execute.
        :param _builtins.bool operation_query: Indicates whether the role has the permission to query.
        :param _builtins.bool operation_update: Indicates whether the role has the permission to update.
        :param _builtins.int role_id: Indicates the role ID.
        :param _builtins.str role_name: Indicates the role name.
        """
        if operation_authorize is not None:
            pulumi.set(__self__, "operation_authorize", operation_authorize)
        if operation_delete is not None:
            pulumi.set(__self__, "operation_delete", operation_delete)
        if operation_execute is not None:
            pulumi.set(__self__, "operation_execute", operation_execute)
        if operation_query is not None:
            pulumi.set(__self__, "operation_query", operation_query)
        if operation_update is not None:
            pulumi.set(__self__, "operation_update", operation_update)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @_builtins.property
    @pulumi.getter(name="operationAuthorize")
    def operation_authorize(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to authorize.
        """
        return pulumi.get(self, "operation_authorize")

    @_builtins.property
    @pulumi.getter(name="operationDelete")
    def operation_delete(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to delete.
        """
        return pulumi.get(self, "operation_delete")

    @_builtins.property
    @pulumi.getter(name="operationExecute")
    def operation_execute(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to execute.
        """
        return pulumi.get(self, "operation_execute")

    @_builtins.property
    @pulumi.getter(name="operationQuery")
    def operation_query(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to query.
        """
        return pulumi.get(self, "operation_query")

    @_builtins.property
    @pulumi.getter(name="operationUpdate")
    def operation_update(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the role has the permission to update.
        """
        return pulumi.get(self, "operation_update")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[_builtins.int]:
        """
        Indicates the role ID.
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[_builtins.str]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")


@pulumi.output_type
class PipelineRuleContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "canModifyWhenInherit":
            suggest = "can_modify_when_inherit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRuleContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRuleContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRuleContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: _builtins.str,
                 properties: Sequence['outputs.PipelineRuleContentProperty'],
                 can_modify_when_inherit: Optional[_builtins.bool] = None):
        """
        :param _builtins.str group_name: Specifies the group name.
        :param Sequence['PipelineRuleContentPropertyArgs'] properties: Specifies the rule attribute list.
               The properties structure is documented below.
        :param _builtins.bool can_modify_when_inherit: Specifies whether thresholds of an inherited policy can be modified.
               Default to **false**.
               
               <a name="block--content--properties"></a>
               The `properties` block supports:
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "properties", properties)
        if can_modify_when_inherit is not None:
            pulumi.set(__self__, "can_modify_when_inherit", can_modify_when_inherit)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Specifies the group name.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.PipelineRuleContentProperty']:
        """
        Specifies the rule attribute list.
        The properties structure is documented below.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="canModifyWhenInherit")
    def can_modify_when_inherit(self) -> Optional[_builtins.bool]:
        """
        Specifies whether thresholds of an inherited policy can be modified.
        Default to **false**.

        <a name="block--content--properties"></a>
        The `properties` block supports:
        """
        return pulumi.get(self, "can_modify_when_inherit")


@pulumi.output_type
class PipelineRuleContentProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"
        elif key == "isValid":
            suggest = "is_valid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRuleContentProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRuleContentProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRuleContentProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str,
                 value_type: _builtins.str,
                 is_valid: Optional[_builtins.bool] = None,
                 operator: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the attribute key.
        :param _builtins.str name: Specifies the display name.
        :param _builtins.str type: Specifies the type.
        :param _builtins.str value: Specifies the attribute value.
        :param _builtins.str value_type: Specifies the value type.
        :param _builtins.bool is_valid: Specifies wether the property is valid. Default to **false**.
        :param _builtins.str operator: Specifies the comparison operators.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)
        if is_valid is not None:
            pulumi.set(__self__, "is_valid", is_valid)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the attribute key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the display name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the attribute value.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> _builtins.str:
        """
        Specifies the value type.
        """
        return pulumi.get(self, "value_type")

    @_builtins.property
    @pulumi.getter(name="isValid")
    def is_valid(self) -> Optional[_builtins.bool]:
        """
        Specifies wether the property is valid. Default to **false**.
        """
        return pulumi.get(self, "is_valid")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        """
        Specifies the comparison operators.
        """
        return pulumi.get(self, "operator")


@pulumi.output_type
class PipelineSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfWeeks":
            suggest = "days_of_weeks"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "intervalTime":
            suggest = "interval_time"
        elif key == "intervalUnit":
            suggest = "interval_unit"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_weeks: Optional[Sequence[_builtins.int]] = None,
                 enable: Optional[_builtins.bool] = None,
                 end_time: Optional[_builtins.str] = None,
                 interval_time: Optional[_builtins.str] = None,
                 interval_unit: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 start_time: Optional[_builtins.str] = None,
                 time_zone: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None,
                 uuid: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.int] days_of_weeks: Specifies the execution day in a week. Sunday to Saturday: **1** to **7**.
        :param _builtins.bool enable: Specifies whether it is available. Defaults to **false**.
        :param _builtins.str end_time: Specifies the end time.
        :param _builtins.str interval_time: Specifies the interval time.
        :param _builtins.str interval_unit: Specifies the interval unit.
        :param _builtins.str name: Specifies the custom variable name. The value can contain a maximum of **32** characters.
        :param _builtins.str start_time: Specifies the start time.
        :param _builtins.str time_zone: Specifies the time zone. Value can be **China Standard Time**, **GMT Standard Time**,
               **South Africa Standard Time**, **Russian Standard Time**,**SE Asia Standard Time**, **Singapore Standard Time**,
               **Pacific SA Standard Time**, **E. South America Standard Time**, **Central Standard Time (Mexico)**,
               **Egypt Standard Time**, **Saudi Arabia Standard Time**.
        :param _builtins.str type: Specifies the custom parameter type.
               Value can be as follows:
               + **autoIncrement**: auto-increment parameter
               + **enum**: enumeration parameter
               + **string**: character string parameter
        :param _builtins.str uuid: Indicates the ID of a scheduled task.
        """
        if days_of_weeks is not None:
            pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if interval_time is not None:
            pulumi.set(__self__, "interval_time", interval_time)
        if interval_unit is not None:
            pulumi.set(__self__, "interval_unit", interval_unit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Optional[Sequence[_builtins.int]]:
        """
        Specifies the execution day in a week. Sunday to Saturday: **1** to **7**.
        """
        return pulumi.get(self, "days_of_weeks")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether it is available. Defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Specifies the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="intervalTime")
    def interval_time(self) -> Optional[_builtins.str]:
        """
        Specifies the interval time.
        """
        return pulumi.get(self, "interval_time")

    @_builtins.property
    @pulumi.getter(name="intervalUnit")
    def interval_unit(self) -> Optional[_builtins.str]:
        """
        Specifies the interval unit.
        """
        return pulumi.get(self, "interval_unit")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the custom variable name. The value can contain a maximum of **32** characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        """
        Specifies the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[_builtins.str]:
        """
        Specifies the time zone. Value can be **China Standard Time**, **GMT Standard Time**,
        **South Africa Standard Time**, **Russian Standard Time**,**SE Asia Standard Time**, **Singapore Standard Time**,
        **Pacific SA Standard Time**, **E. South America Standard Time**, **Central Standard Time (Mexico)**,
        **Egypt Standard Time**, **Saudi Arabia Standard Time**.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter type.
        Value can be as follows:
        + **autoIncrement**: auto-increment parameter
        + **enum**: enumeration parameter
        + **string**: character string parameter
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of a scheduled task.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class PipelineServiceEndpointAuthorization(dict):
    def __init__(__self__, *,
                 parameters: Optional[_builtins.str] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.str parameters: Specifies the authentication parameter.
        :param _builtins.str scheme: Specifies the authentication mode.
        """
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[_builtins.str]:
        """
        Specifies the authentication parameter.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        Specifies the authentication mode.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class PipelineServiceEndpointCreatedBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineServiceEndpointCreatedBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineServiceEndpointCreatedBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineServiceEndpointCreatedBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_id: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str user_id: Indicates the user ID.
        :param _builtins.str user_name: Indicates the user name.
        """
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[_builtins.str]:
        """
        Indicates the user ID.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Indicates the user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class PipelineSource(dict):
    def __init__(__self__, *,
                 params: Optional['outputs.PipelineSourceParams'] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param 'PipelineSourceParamsArgs' params: Specifies the pipeline source parameters.
               The params structure is documented below.
               
               <a name="block--sources--params"></a>
               The `params` block supports:
        :param _builtins.str type: Specifies the custom parameter type.
               Value can be as follows:
               + **autoIncrement**: auto-increment parameter
               + **enum**: enumeration parameter
               + **string**: character string parameter
        """
        if params is not None:
            pulumi.set(__self__, "params", params)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional['outputs.PipelineSourceParams']:
        """
        Specifies the pipeline source parameters.
        The params structure is documented below.

        <a name="block--sources--params"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter type.
        Value can be as follows:
        + **autoIncrement**: auto-increment parameter
        + **enum**: enumeration parameter
        + **string**: character string parameter
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PipelineSourceParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codehubId":
            suggest = "codehub_id"
        elif key == "defaultBranch":
            suggest = "default_branch"
        elif key == "endpointId":
            suggest = "endpoint_id"
        elif key == "gitType":
            suggest = "git_type"
        elif key == "gitUrl":
            suggest = "git_url"
        elif key == "repoName":
            suggest = "repo_name"
        elif key == "sshGitUrl":
            suggest = "ssh_git_url"
        elif key == "webUrl":
            suggest = "web_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineSourceParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineSourceParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineSourceParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alias: Optional[_builtins.str] = None,
                 codehub_id: Optional[_builtins.str] = None,
                 default_branch: Optional[_builtins.str] = None,
                 endpoint_id: Optional[_builtins.str] = None,
                 git_type: Optional[_builtins.str] = None,
                 git_url: Optional[_builtins.str] = None,
                 repo_name: Optional[_builtins.str] = None,
                 ssh_git_url: Optional[_builtins.str] = None,
                 web_url: Optional[_builtins.str] = None):
        """
        :param _builtins.str alias: Specifies the code repository alias. The value can contain a maximum of **128** characters,
               including letters, digits, and underscores (_).
        :param _builtins.str codehub_id: Specifies the CodeArts Repo code repository ID.
        :param _builtins.str default_branch: Specifies the default branch.
        :param _builtins.str endpoint_id: Specifies the code source endpoint ID.
        :param _builtins.str git_type: Specifies the Git repository type. The options include **CodeHub**, **Gitee**,
               **GitHub**, **GitCode**, and **GitLab**.
        :param _builtins.str git_url: Specifies the Git URL.
        :param _builtins.str repo_name: Specifies the pipeline source name.
        :param _builtins.str ssh_git_url: Specifies the SSH Git address,
        :param _builtins.str web_url: Specifies the web page URL.
               
               <a name="block--concurrency_control"></a>
               The `concurrency_control` block supports:
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if codehub_id is not None:
            pulumi.set(__self__, "codehub_id", codehub_id)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if git_type is not None:
            pulumi.set(__self__, "git_type", git_type)
        if git_url is not None:
            pulumi.set(__self__, "git_url", git_url)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if ssh_git_url is not None:
            pulumi.set(__self__, "ssh_git_url", ssh_git_url)
        if web_url is not None:
            pulumi.set(__self__, "web_url", web_url)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[_builtins.str]:
        """
        Specifies the code repository alias. The value can contain a maximum of **128** characters,
        including letters, digits, and underscores (_).
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="codehubId")
    def codehub_id(self) -> Optional[_builtins.str]:
        """
        Specifies the CodeArts Repo code repository ID.
        """
        return pulumi.get(self, "codehub_id")

    @_builtins.property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[_builtins.str]:
        """
        Specifies the default branch.
        """
        return pulumi.get(self, "default_branch")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[_builtins.str]:
        """
        Specifies the code source endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter(name="gitType")
    def git_type(self) -> Optional[_builtins.str]:
        """
        Specifies the Git repository type. The options include **CodeHub**, **Gitee**,
        **GitHub**, **GitCode**, and **GitLab**.
        """
        return pulumi.get(self, "git_type")

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> Optional[_builtins.str]:
        """
        Specifies the Git URL.
        """
        return pulumi.get(self, "git_url")

    @_builtins.property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[_builtins.str]:
        """
        Specifies the pipeline source name.
        """
        return pulumi.get(self, "repo_name")

    @_builtins.property
    @pulumi.getter(name="sshGitUrl")
    def ssh_git_url(self) -> Optional[_builtins.str]:
        """
        Specifies the SSH Git address,
        """
        return pulumi.get(self, "ssh_git_url")

    @_builtins.property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> Optional[_builtins.str]:
        """
        Specifies the web page URL.

        <a name="block--concurrency_control"></a>
        The `concurrency_control` block supports:
        """
        return pulumi.get(self, "web_url")


@pulumi.output_type
class PipelineTemplateVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isReset":
            suggest = "is_reset"
        elif key == "isRuntime":
            suggest = "is_runtime"
        elif key == "isSecret":
            suggest = "is_secret"
        elif key == "latestValue":
            suggest = "latest_value"
        elif key == "runtimeValue":
            suggest = "runtime_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineTemplateVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineTemplateVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineTemplateVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 is_reset: Optional[_builtins.bool] = None,
                 is_runtime: Optional[_builtins.bool] = None,
                 is_secret: Optional[_builtins.bool] = None,
                 latest_value: Optional[_builtins.str] = None,
                 limits: Optional[Sequence[_builtins.str]] = None,
                 name: Optional[_builtins.str] = None,
                 runtime_value: Optional[_builtins.str] = None,
                 sequence: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the parameter description.
        :param _builtins.bool is_reset: Specifies whether to reset.
               + **true**: Uses the edited parameter value.
               + **false**: Uses the auto-increment parameter.
               
               Defaults to `false`.
        :param _builtins.bool is_runtime: Specifies whether the parameters can be set during runtime. Defaults to `false`.
        :param _builtins.bool is_secret: Specifies whether it is a private parameter. Defaults to `false`.
        :param _builtins.str latest_value: Specifies the last parameter value.
        :param Sequence[_builtins.str] limits: Specifies the list of enumerated values.
        :param _builtins.str name: Specifies the custom variable name.
        :param _builtins.str runtime_value: Specifies the value passed in at runtime.
        :param _builtins.int sequence: Specifies the parameter sequence, starting from **1**.
        :param _builtins.str type: Specifies the custom parameter type.
               Valid values are:
               + **autoIncrement**: Auto-increment parameter.
               + **enum**: Enumeration parameter.
               + **string**: String parameter.
        :param _builtins.str value: Specifies the custom parameter default value.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_reset is not None:
            pulumi.set(__self__, "is_reset", is_reset)
        if is_runtime is not None:
            pulumi.set(__self__, "is_runtime", is_runtime)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if latest_value is not None:
            pulumi.set(__self__, "latest_value", latest_value)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if runtime_value is not None:
            pulumi.set(__self__, "runtime_value", runtime_value)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isReset")
    def is_reset(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to reset.
        + **true**: Uses the edited parameter value.
        + **false**: Uses the auto-increment parameter.

        Defaults to `false`.
        """
        return pulumi.get(self, "is_reset")

    @_builtins.property
    @pulumi.getter(name="isRuntime")
    def is_runtime(self) -> Optional[_builtins.bool]:
        """
        Specifies whether the parameters can be set during runtime. Defaults to `false`.
        """
        return pulumi.get(self, "is_runtime")

    @_builtins.property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[_builtins.bool]:
        """
        Specifies whether it is a private parameter. Defaults to `false`.
        """
        return pulumi.get(self, "is_secret")

    @_builtins.property
    @pulumi.getter(name="latestValue")
    def latest_value(self) -> Optional[_builtins.str]:
        """
        Specifies the last parameter value.
        """
        return pulumi.get(self, "latest_value")

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of enumerated values.
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the custom variable name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="runtimeValue")
    def runtime_value(self) -> Optional[_builtins.str]:
        """
        Specifies the value passed in at runtime.
        """
        return pulumi.get(self, "runtime_value")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> Optional[_builtins.int]:
        """
        Specifies the parameter sequence, starting from **1**.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter type.
        Valid values are:
        + **autoIncrement**: Auto-increment parameter.
        + **enum**: Enumeration parameter.
        + **string**: String parameter.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter default value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PipelineTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "callbackUrl":
            suggest = "callback_url"
        elif key == "endpointId":
            suggest = "endpoint_id"
        elif key == "gitType":
            suggest = "git_type"
        elif key == "gitUrl":
            suggest = "git_url"
        elif key == "hookId":
            suggest = "hook_id"
        elif key == "isAutoCommit":
            suggest = "is_auto_commit"
        elif key == "repoId":
            suggest = "repo_id"
        elif key == "securityToken":
            suggest = "security_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 callback_url: Optional[_builtins.str] = None,
                 endpoint_id: Optional[_builtins.str] = None,
                 events: Optional[Sequence['outputs.PipelineTriggerEvent']] = None,
                 git_type: Optional[_builtins.str] = None,
                 git_url: Optional[_builtins.str] = None,
                 hook_id: Optional[_builtins.int] = None,
                 is_auto_commit: Optional[_builtins.bool] = None,
                 repo_id: Optional[_builtins.str] = None,
                 security_token: Optional[_builtins.str] = None):
        """
        :param _builtins.str callback_url: Specifies the callback URL.
        :param _builtins.str endpoint_id: Specifies the code source endpoint ID.
        :param Sequence['PipelineTriggerEventArgs'] events: Specifies the trigger event list.
               The events structure is documented below.
        :param _builtins.str git_type: Specifies the Git repository type. The options include **CodeHub**, **Gitee**,
               **GitHub**, **GitCode**, and **GitLab**.
        :param _builtins.str git_url: Specifies the Git URL.
        :param _builtins.int hook_id: Indicates the callback ID.
        :param _builtins.bool is_auto_commit: Specifies whether to automatically commit code. Defaults to **false**.
        :param _builtins.str repo_id: Specifies the repository ID.
        :param _builtins.str security_token: Specifies the User token.
               
               <a name="block--triggers--events"></a>
               The `events` block supports:
        """
        if callback_url is not None:
            pulumi.set(__self__, "callback_url", callback_url)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if git_type is not None:
            pulumi.set(__self__, "git_type", git_type)
        if git_url is not None:
            pulumi.set(__self__, "git_url", git_url)
        if hook_id is not None:
            pulumi.set(__self__, "hook_id", hook_id)
        if is_auto_commit is not None:
            pulumi.set(__self__, "is_auto_commit", is_auto_commit)
        if repo_id is not None:
            pulumi.set(__self__, "repo_id", repo_id)
        if security_token is not None:
            pulumi.set(__self__, "security_token", security_token)

    @_builtins.property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> Optional[_builtins.str]:
        """
        Specifies the callback URL.
        """
        return pulumi.get(self, "callback_url")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[_builtins.str]:
        """
        Specifies the code source endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter
    def events(self) -> Optional[Sequence['outputs.PipelineTriggerEvent']]:
        """
        Specifies the trigger event list.
        The events structure is documented below.
        """
        return pulumi.get(self, "events")

    @_builtins.property
    @pulumi.getter(name="gitType")
    def git_type(self) -> Optional[_builtins.str]:
        """
        Specifies the Git repository type. The options include **CodeHub**, **Gitee**,
        **GitHub**, **GitCode**, and **GitLab**.
        """
        return pulumi.get(self, "git_type")

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> Optional[_builtins.str]:
        """
        Specifies the Git URL.
        """
        return pulumi.get(self, "git_url")

    @_builtins.property
    @pulumi.getter(name="hookId")
    def hook_id(self) -> Optional[_builtins.int]:
        """
        Indicates the callback ID.
        """
        return pulumi.get(self, "hook_id")

    @_builtins.property
    @pulumi.getter(name="isAutoCommit")
    def is_auto_commit(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to automatically commit code. Defaults to **false**.
        """
        return pulumi.get(self, "is_auto_commit")

    @_builtins.property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> Optional[_builtins.str]:
        """
        Specifies the repository ID.
        """
        return pulumi.get(self, "repo_id")

    @_builtins.property
    @pulumi.getter(name="securityToken")
    def security_token(self) -> Optional[_builtins.str]:
        """
        Specifies the User token.

        <a name="block--triggers--events"></a>
        The `events` block supports:
        """
        return pulumi.get(self, "security_token")


@pulumi.output_type
class PipelineTriggerEvent(dict):
    def __init__(__self__, *,
                 enable: Optional[_builtins.bool] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.bool enable: Specifies whether it is available. Defaults to **false**.
        :param _builtins.str type: Specifies the custom parameter type.
               Value can be as follows:
               + **autoIncrement**: auto-increment parameter
               + **enum**: enumeration parameter
               + **string**: character string parameter
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether it is available. Defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter type.
        Value can be as follows:
        + **autoIncrement**: auto-increment parameter
        + **enum**: enumeration parameter
        + **string**: character string parameter
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PipelineVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isReset":
            suggest = "is_reset"
        elif key == "isRuntime":
            suggest = "is_runtime"
        elif key == "isSecret":
            suggest = "is_secret"
        elif key == "latestValue":
            suggest = "latest_value"
        elif key == "runtimeValue":
            suggest = "runtime_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 is_reset: Optional[_builtins.bool] = None,
                 is_runtime: Optional[_builtins.bool] = None,
                 is_secret: Optional[_builtins.bool] = None,
                 latest_value: Optional[_builtins.str] = None,
                 limits: Optional[Sequence[_builtins.str]] = None,
                 name: Optional[_builtins.str] = None,
                 runtime_value: Optional[_builtins.str] = None,
                 sequence: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the parameter description.
        :param _builtins.bool is_reset: Specifies whether to reset. Defaults to **false**.
        :param _builtins.bool is_runtime: Specifies whether to set parameters at runtime. Defaults to **false**.
        :param _builtins.bool is_secret: Specifies whether it is a private parameter. Defaults to **false**.
        :param _builtins.str latest_value: Specifies the last parameter value.
        :param Sequence[_builtins.str] limits: Specifies the list of enumerated values.
        :param _builtins.str name: Specifies the custom variable name. The value can contain a maximum of **32** characters.
        :param _builtins.str runtime_value: Specifies the value passed in at runtime.
        :param _builtins.int sequence: Specifies the parameter sequence, starting from **1**.
        :param _builtins.str type: Specifies the custom parameter type.
               Value can be as follows:
               + **autoIncrement**: auto-increment parameter
               + **enum**: enumeration parameter
               + **string**: character string parameter
        :param _builtins.str value: Specifies the custom parameter default value.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_reset is not None:
            pulumi.set(__self__, "is_reset", is_reset)
        if is_runtime is not None:
            pulumi.set(__self__, "is_runtime", is_runtime)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if latest_value is not None:
            pulumi.set(__self__, "latest_value", latest_value)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if runtime_value is not None:
            pulumi.set(__self__, "runtime_value", runtime_value)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isReset")
    def is_reset(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to reset. Defaults to **false**.
        """
        return pulumi.get(self, "is_reset")

    @_builtins.property
    @pulumi.getter(name="isRuntime")
    def is_runtime(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to set parameters at runtime. Defaults to **false**.
        """
        return pulumi.get(self, "is_runtime")

    @_builtins.property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[_builtins.bool]:
        """
        Specifies whether it is a private parameter. Defaults to **false**.
        """
        return pulumi.get(self, "is_secret")

    @_builtins.property
    @pulumi.getter(name="latestValue")
    def latest_value(self) -> Optional[_builtins.str]:
        """
        Specifies the last parameter value.
        """
        return pulumi.get(self, "latest_value")

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of enumerated values.
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the custom variable name. The value can contain a maximum of **32** characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="runtimeValue")
    def runtime_value(self) -> Optional[_builtins.str]:
        """
        Specifies the value passed in at runtime.
        """
        return pulumi.get(self, "runtime_value")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> Optional[_builtins.int]:
        """
        Specifies the parameter sequence, starting from **1**.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter type.
        Value can be as follows:
        + **autoIncrement**: auto-increment parameter
        + **enum**: enumeration parameter
        + **string**: character string parameter
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the custom parameter default value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBuildTaskRecordsRecordResult(dict):
    def __init__(__self__, *,
                 branch: _builtins.str,
                 build_duration: _builtins.int,
                 build_no: _builtins.str,
                 build_record_types: Sequence['outputs.GetBuildTaskRecordsRecordBuildRecordTypeResult'],
                 build_yml_path: _builtins.str,
                 build_yml_url: _builtins.str,
                 create_time: _builtins.str,
                 daily_build_no: _builtins.str,
                 daily_build_number: _builtins.str,
                 dev_cloud_build_type: _builtins.str,
                 display_name: _builtins.str,
                 duration: _builtins.int,
                 execution_id: _builtins.str,
                 finish_time: _builtins.str,
                 group_name: _builtins.str,
                 id: _builtins.str,
                 parameters: Sequence['outputs.GetBuildTaskRecordsRecordParameterResult'],
                 pending_duration: _builtins.int,
                 project_id: _builtins.str,
                 queued_time: _builtins.str,
                 repository: _builtins.str,
                 revision: _builtins.str,
                 schedule_time: _builtins.str,
                 scm_type: _builtins.str,
                 scm_web_url: _builtins.str,
                 start_time: _builtins.str,
                 status: _builtins.str,
                 status_code: _builtins.int,
                 trigger_name: _builtins.str,
                 trigger_type: _builtins.str,
                 user_id: _builtins.str):
        """
        :param _builtins.str branch: Indicates the branch of the build record.
        :param _builtins.int build_duration: Indicates the build duration of the build record.
        :param _builtins.str build_no: Indicates the build number of the build record.
        :param Sequence['GetBuildTaskRecordsRecordBuildRecordTypeArgs'] build_record_types: Indicates the parameters of the build record.
               The build_record_type structure is documented below.
        :param _builtins.str build_yml_path: Indicates the build yaml path of the build record.
        :param _builtins.str build_yml_url: Indicates the build yaml URL of the build record.
        :param _builtins.str create_time: Indicates the creation time of the build record.
        :param _builtins.str daily_build_no: Indicates the daily build number of the build record.
        :param _builtins.str daily_build_number: Indicates the daily build number of the build record.
        :param _builtins.str dev_cloud_build_type: Indicates the build type of the build record.
        :param _builtins.str display_name: Indicates the display name of the build record.
        :param _builtins.int duration: Indicates the duration of the build record.
        :param _builtins.str execution_id: Indicates the execution ID of the build record.
        :param _builtins.str finish_time: Indicates the finish time of the build record.
        :param _builtins.str group_name: Indicates the group name of the build record.
        :param _builtins.str id: Indicates the unique identifier of the build record.
        :param Sequence['GetBuildTaskRecordsRecordParameterArgs'] parameters: Indicates the parameters of the build record.
               The parameters structure is documented below.
        :param _builtins.int pending_duration: Indicates the pending duration of the build record.
        :param _builtins.str project_id: Indicates the project ID of the build record.
        :param _builtins.str queued_time: Indicates the queued time of the build record.
        :param _builtins.str repository: Indicates the repository of the build record.
        :param _builtins.str revision: Indicates the revision (commitId) of the build record.
        :param _builtins.str schedule_time: Indicates the scheduled time of the build record.
        :param _builtins.str scm_type: Indicates the SCM type of the build record.
        :param _builtins.str scm_web_url: Indicates the SCM web URL of the build record.
        :param _builtins.str start_time: Indicates the start time of the build record.
        :param _builtins.str status: Indicates the status of the build record.
        :param _builtins.int status_code: Indicates the status code of the build record.
        :param _builtins.str trigger_name: Indicates the trigger name of the build record.
        :param _builtins.str trigger_type: Indicates the trigger type.
        :param _builtins.str user_id: Indicates the user ID of the build record.
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "build_duration", build_duration)
        pulumi.set(__self__, "build_no", build_no)
        pulumi.set(__self__, "build_record_types", build_record_types)
        pulumi.set(__self__, "build_yml_path", build_yml_path)
        pulumi.set(__self__, "build_yml_url", build_yml_url)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "daily_build_no", daily_build_no)
        pulumi.set(__self__, "daily_build_number", daily_build_number)
        pulumi.set(__self__, "dev_cloud_build_type", dev_cloud_build_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "execution_id", execution_id)
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "pending_duration", pending_duration)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "queued_time", queued_time)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "revision", revision)
        pulumi.set(__self__, "schedule_time", schedule_time)
        pulumi.set(__self__, "scm_type", scm_type)
        pulumi.set(__self__, "scm_web_url", scm_web_url)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "trigger_name", trigger_name)
        pulumi.set(__self__, "trigger_type", trigger_type)
        pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter
    def branch(self) -> _builtins.str:
        """
        Indicates the branch of the build record.
        """
        return pulumi.get(self, "branch")

    @_builtins.property
    @pulumi.getter(name="buildDuration")
    def build_duration(self) -> _builtins.int:
        """
        Indicates the build duration of the build record.
        """
        return pulumi.get(self, "build_duration")

    @_builtins.property
    @pulumi.getter(name="buildNo")
    def build_no(self) -> _builtins.str:
        """
        Indicates the build number of the build record.
        """
        return pulumi.get(self, "build_no")

    @_builtins.property
    @pulumi.getter(name="buildRecordTypes")
    def build_record_types(self) -> Sequence['outputs.GetBuildTaskRecordsRecordBuildRecordTypeResult']:
        """
        Indicates the parameters of the build record.
        The build_record_type structure is documented below.
        """
        return pulumi.get(self, "build_record_types")

    @_builtins.property
    @pulumi.getter(name="buildYmlPath")
    def build_yml_path(self) -> _builtins.str:
        """
        Indicates the build yaml path of the build record.
        """
        return pulumi.get(self, "build_yml_path")

    @_builtins.property
    @pulumi.getter(name="buildYmlUrl")
    def build_yml_url(self) -> _builtins.str:
        """
        Indicates the build yaml URL of the build record.
        """
        return pulumi.get(self, "build_yml_url")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Indicates the creation time of the build record.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="dailyBuildNo")
    def daily_build_no(self) -> _builtins.str:
        """
        Indicates the daily build number of the build record.
        """
        return pulumi.get(self, "daily_build_no")

    @_builtins.property
    @pulumi.getter(name="dailyBuildNumber")
    def daily_build_number(self) -> _builtins.str:
        """
        Indicates the daily build number of the build record.
        """
        return pulumi.get(self, "daily_build_number")

    @_builtins.property
    @pulumi.getter(name="devCloudBuildType")
    def dev_cloud_build_type(self) -> _builtins.str:
        """
        Indicates the build type of the build record.
        """
        return pulumi.get(self, "dev_cloud_build_type")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Indicates the display name of the build record.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.int:
        """
        Indicates the duration of the build record.
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter(name="executionId")
    def execution_id(self) -> _builtins.str:
        """
        Indicates the execution ID of the build record.
        """
        return pulumi.get(self, "execution_id")

    @_builtins.property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> _builtins.str:
        """
        Indicates the finish time of the build record.
        """
        return pulumi.get(self, "finish_time")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Indicates the group name of the build record.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the unique identifier of the build record.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetBuildTaskRecordsRecordParameterResult']:
        """
        Indicates the parameters of the build record.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter(name="pendingDuration")
    def pending_duration(self) -> _builtins.int:
        """
        Indicates the pending duration of the build record.
        """
        return pulumi.get(self, "pending_duration")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Indicates the project ID of the build record.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="queuedTime")
    def queued_time(self) -> _builtins.str:
        """
        Indicates the queued time of the build record.
        """
        return pulumi.get(self, "queued_time")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> _builtins.str:
        """
        Indicates the repository of the build record.
        """
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter
    def revision(self) -> _builtins.str:
        """
        Indicates the revision (commitId) of the build record.
        """
        return pulumi.get(self, "revision")

    @_builtins.property
    @pulumi.getter(name="scheduleTime")
    def schedule_time(self) -> _builtins.str:
        """
        Indicates the scheduled time of the build record.
        """
        return pulumi.get(self, "schedule_time")

    @_builtins.property
    @pulumi.getter(name="scmType")
    def scm_type(self) -> _builtins.str:
        """
        Indicates the SCM type of the build record.
        """
        return pulumi.get(self, "scm_type")

    @_builtins.property
    @pulumi.getter(name="scmWebUrl")
    def scm_web_url(self) -> _builtins.str:
        """
        Indicates the SCM web URL of the build record.
        """
        return pulumi.get(self, "scm_web_url")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the start time of the build record.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the status of the build record.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.int:
        """
        Indicates the status code of the build record.
        """
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> _builtins.str:
        """
        Indicates the trigger name of the build record.
        """
        return pulumi.get(self, "trigger_name")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Indicates the trigger type.
        """
        return pulumi.get(self, "trigger_type")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        Indicates the user ID of the build record.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetBuildTaskRecordsRecordBuildRecordTypeResult(dict):
    def __init__(__self__, *,
                 is_rerun: _builtins.bool,
                 record_type: _builtins.str,
                 rerun: _builtins.bool,
                 trigger_type: _builtins.str):
        """
        :param _builtins.bool is_rerun: Indicates the whether the record is rerun.
        :param _builtins.str record_type: Indicates the record type.
        :param _builtins.bool rerun: Indicates whether the record is rerun.
        :param _builtins.str trigger_type: Indicates the trigger type.
        """
        pulumi.set(__self__, "is_rerun", is_rerun)
        pulumi.set(__self__, "record_type", record_type)
        pulumi.set(__self__, "rerun", rerun)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="isRerun")
    def is_rerun(self) -> _builtins.bool:
        """
        Indicates the whether the record is rerun.
        """
        return pulumi.get(self, "is_rerun")

    @_builtins.property
    @pulumi.getter(name="recordType")
    def record_type(self) -> _builtins.str:
        """
        Indicates the record type.
        """
        return pulumi.get(self, "record_type")

    @_builtins.property
    @pulumi.getter
    def rerun(self) -> _builtins.bool:
        """
        Indicates whether the record is rerun.
        """
        return pulumi.get(self, "rerun")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Indicates the trigger type.
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetBuildTaskRecordsRecordParameterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 secret: _builtins.bool,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Indicates the parameter name.
        :param _builtins.bool secret: Indicates whether the parameter is secret.
        :param _builtins.str type: Indicates the parameter type.
        :param _builtins.str value: Indicates the parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def secret(self) -> _builtins.bool:
        """
        Indicates whether the parameter is secret.
        """
        return pulumi.get(self, "secret")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the parameter type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBuildTasksTaskResult(dict):
    def __init__(__self__, *,
                 build_project_id: _builtins.str,
                 build_time: _builtins.int,
                 creator: _builtins.str,
                 disabled: _builtins.bool,
                 favorite: _builtins.bool,
                 health_score: _builtins.int,
                 id: _builtins.str,
                 is_copy: _builtins.bool,
                 is_delete: _builtins.bool,
                 is_execute: _builtins.bool,
                 is_finished: _builtins.bool,
                 is_forbidden: _builtins.bool,
                 is_modify: _builtins.bool,
                 is_view: _builtins.bool,
                 last_build_status: _builtins.str,
                 last_build_time: _builtins.int,
                 last_build_user: _builtins.str,
                 last_build_user_id: _builtins.str,
                 last_job_running_status: _builtins.str,
                 name: _builtins.str,
                 repo_id: _builtins.str,
                 scm_type: _builtins.str,
                 scm_web_url: _builtins.str,
                 source_code: _builtins.str,
                 trigger_type: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str build_project_id: Indicates the build project ID.
        :param _builtins.int build_time: Indicates the build time.
        :param _builtins.str creator: Indicates the task creator.
        :param _builtins.bool disabled: Indicates whether it is disabled.
        :param _builtins.bool favorite: Indicates whether it is favorited.
        :param _builtins.int health_score: Indicates the health score.
        :param _builtins.str id: Indicates the task ID.
        :param _builtins.bool is_copy: Indicates whether there is permission to copy the task.
        :param _builtins.bool is_delete: Indicates whether there is permission to delete the task.
        :param _builtins.bool is_execute: Indicates whether there is permission to execute the task.
        :param _builtins.bool is_finished: Indicates whether it has ended.
        :param _builtins.bool is_forbidden: Indicates whether there is permission to disable the task.
        :param _builtins.bool is_modify: Indicates whether there is permission to modify the task.
        :param _builtins.bool is_view: Indicates whether there is permission to view the task.
        :param _builtins.str last_build_status: Indicates the latest build status.
        :param _builtins.int last_build_time: Indicates the latest execution time.
        :param _builtins.str last_build_user: Indicates the last build user.
        :param _builtins.str last_build_user_id: Indicates the last build user ID.
        :param _builtins.str last_job_running_status: Indicates the last build time.
        :param _builtins.str name: Indicates the task name.
        :param _builtins.str repo_id: Indicates the code repository ID.
        :param _builtins.str scm_type: Indicates the code repository type.
        :param _builtins.str scm_web_url: Indicates the code repository web address.
        :param _builtins.str source_code: Indicates the code source.
        :param _builtins.str trigger_type: Indicates the trigger type.
        :param _builtins.str user_name: Indicates the user name.
        """
        pulumi.set(__self__, "build_project_id", build_project_id)
        pulumi.set(__self__, "build_time", build_time)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "favorite", favorite)
        pulumi.set(__self__, "health_score", health_score)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_copy", is_copy)
        pulumi.set(__self__, "is_delete", is_delete)
        pulumi.set(__self__, "is_execute", is_execute)
        pulumi.set(__self__, "is_finished", is_finished)
        pulumi.set(__self__, "is_forbidden", is_forbidden)
        pulumi.set(__self__, "is_modify", is_modify)
        pulumi.set(__self__, "is_view", is_view)
        pulumi.set(__self__, "last_build_status", last_build_status)
        pulumi.set(__self__, "last_build_time", last_build_time)
        pulumi.set(__self__, "last_build_user", last_build_user)
        pulumi.set(__self__, "last_build_user_id", last_build_user_id)
        pulumi.set(__self__, "last_job_running_status", last_job_running_status)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "repo_id", repo_id)
        pulumi.set(__self__, "scm_type", scm_type)
        pulumi.set(__self__, "scm_web_url", scm_web_url)
        pulumi.set(__self__, "source_code", source_code)
        pulumi.set(__self__, "trigger_type", trigger_type)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="buildProjectId")
    def build_project_id(self) -> _builtins.str:
        """
        Indicates the build project ID.
        """
        return pulumi.get(self, "build_project_id")

    @_builtins.property
    @pulumi.getter(name="buildTime")
    def build_time(self) -> _builtins.int:
        """
        Indicates the build time.
        """
        return pulumi.get(self, "build_time")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        Indicates the task creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> _builtins.bool:
        """
        Indicates whether it is disabled.
        """
        return pulumi.get(self, "disabled")

    @_builtins.property
    @pulumi.getter
    def favorite(self) -> _builtins.bool:
        """
        Indicates whether it is favorited.
        """
        return pulumi.get(self, "favorite")

    @_builtins.property
    @pulumi.getter(name="healthScore")
    def health_score(self) -> _builtins.int:
        """
        Indicates the health score.
        """
        return pulumi.get(self, "health_score")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the task ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCopy")
    def is_copy(self) -> _builtins.bool:
        """
        Indicates whether there is permission to copy the task.
        """
        return pulumi.get(self, "is_copy")

    @_builtins.property
    @pulumi.getter(name="isDelete")
    def is_delete(self) -> _builtins.bool:
        """
        Indicates whether there is permission to delete the task.
        """
        return pulumi.get(self, "is_delete")

    @_builtins.property
    @pulumi.getter(name="isExecute")
    def is_execute(self) -> _builtins.bool:
        """
        Indicates whether there is permission to execute the task.
        """
        return pulumi.get(self, "is_execute")

    @_builtins.property
    @pulumi.getter(name="isFinished")
    def is_finished(self) -> _builtins.bool:
        """
        Indicates whether it has ended.
        """
        return pulumi.get(self, "is_finished")

    @_builtins.property
    @pulumi.getter(name="isForbidden")
    def is_forbidden(self) -> _builtins.bool:
        """
        Indicates whether there is permission to disable the task.
        """
        return pulumi.get(self, "is_forbidden")

    @_builtins.property
    @pulumi.getter(name="isModify")
    def is_modify(self) -> _builtins.bool:
        """
        Indicates whether there is permission to modify the task.
        """
        return pulumi.get(self, "is_modify")

    @_builtins.property
    @pulumi.getter(name="isView")
    def is_view(self) -> _builtins.bool:
        """
        Indicates whether there is permission to view the task.
        """
        return pulumi.get(self, "is_view")

    @_builtins.property
    @pulumi.getter(name="lastBuildStatus")
    def last_build_status(self) -> _builtins.str:
        """
        Indicates the latest build status.
        """
        return pulumi.get(self, "last_build_status")

    @_builtins.property
    @pulumi.getter(name="lastBuildTime")
    def last_build_time(self) -> _builtins.int:
        """
        Indicates the latest execution time.
        """
        return pulumi.get(self, "last_build_time")

    @_builtins.property
    @pulumi.getter(name="lastBuildUser")
    def last_build_user(self) -> _builtins.str:
        """
        Indicates the last build user.
        """
        return pulumi.get(self, "last_build_user")

    @_builtins.property
    @pulumi.getter(name="lastBuildUserId")
    def last_build_user_id(self) -> _builtins.str:
        """
        Indicates the last build user ID.
        """
        return pulumi.get(self, "last_build_user_id")

    @_builtins.property
    @pulumi.getter(name="lastJobRunningStatus")
    def last_job_running_status(self) -> _builtins.str:
        """
        Indicates the last build time.
        """
        return pulumi.get(self, "last_job_running_status")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the task name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> _builtins.str:
        """
        Indicates the code repository ID.
        """
        return pulumi.get(self, "repo_id")

    @_builtins.property
    @pulumi.getter(name="scmType")
    def scm_type(self) -> _builtins.str:
        """
        Indicates the code repository type.
        """
        return pulumi.get(self, "scm_type")

    @_builtins.property
    @pulumi.getter(name="scmWebUrl")
    def scm_web_url(self) -> _builtins.str:
        """
        Indicates the code repository web address.
        """
        return pulumi.get(self, "scm_web_url")

    @_builtins.property
    @pulumi.getter(name="sourceCode")
    def source_code(self) -> _builtins.str:
        """
        Indicates the code source.
        """
        return pulumi.get(self, "source_code")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Indicates the trigger type.
        """
        return pulumi.get(self, "trigger_type")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        Indicates the user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDeployApplicationDeploymentRecordsRecordResult(dict):
    def __init__(__self__, *,
                 duration: _builtins.str,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 operator: _builtins.str,
                 release_id: _builtins.int,
                 start_time: _builtins.str,
                 state: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str duration: Indicates the deployment duration.
        :param _builtins.str end_time: Indicates the end time of application deployment. The value format is **yyyy-mm-dd hh:mm:ss**.
        :param _builtins.str id: Indicates the record ID.
        :param _builtins.str operator: Indicates the operator user name.
        :param _builtins.int release_id: Indicates the deployment record sequence number.
        :param _builtins.str start_time: Indicates the start time of application deployment. The value format is **yyyy-mm-dd hh:mm:ss**.
        :param _builtins.str state: Indicates the application status.
        :param _builtins.str type: Indicates the deployment type.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "release_id", release_id)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.str:
        """
        Indicates the deployment duration.
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Indicates the end time of application deployment. The value format is **yyyy-mm-dd hh:mm:ss**.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the record ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        Indicates the operator user name.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter(name="releaseId")
    def release_id(self) -> _builtins.int:
        """
        Indicates the deployment record sequence number.
        """
        return pulumi.get(self, "release_id")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the start time of application deployment. The value format is **yyyy-mm-dd hh:mm:ss**.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Indicates the application status.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the deployment type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeployApplicationGroupsGroupResult(dict):
    def __init__(__self__, *,
                 application_count: _builtins.int,
                 childrens: Sequence[_builtins.str],
                 created_by: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 ordinal: _builtins.int,
                 parent_id: _builtins.str,
                 path: _builtins.str,
                 updated_by: _builtins.str):
        """
        :param _builtins.int application_count: Indicates the total number of applications in the group.
        :param Sequence[_builtins.str] childrens: Indicates the child group name list.
        :param _builtins.str created_by: Indicates the ID of the group creator.
        :param _builtins.str id: Indicates the application group ID.
        :param _builtins.str name: Indicates the application group name.
        :param _builtins.int ordinal: Indicates the group sorting field.
        :param _builtins.str parent_id: Indicates the parent application group ID.
        :param _builtins.str path: Indicates the group path.
        :param _builtins.str updated_by: Indicates the ID of the user who last updates the group.
        """
        pulumi.set(__self__, "application_count", application_count)
        pulumi.set(__self__, "childrens", childrens)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ordinal", ordinal)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="applicationCount")
    def application_count(self) -> _builtins.int:
        """
        Indicates the total number of applications in the group.
        """
        return pulumi.get(self, "application_count")

    @_builtins.property
    @pulumi.getter
    def childrens(self) -> Sequence[_builtins.str]:
        """
        Indicates the child group name list.
        """
        return pulumi.get(self, "childrens")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        Indicates the ID of the group creator.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the application group ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the application group name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> _builtins.int:
        """
        Indicates the group sorting field.
        """
        return pulumi.get(self, "ordinal")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        """
        Indicates the parent application group ID.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Indicates the group path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        """
        Indicates the ID of the user who last updates the group.
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetDeployApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 arrange_infos: Sequence['outputs.GetDeployApplicationsApplicationArrangeInfoResult'],
                 can_copy: _builtins.bool,
                 can_create_env: _builtins.bool,
                 can_delete: _builtins.bool,
                 can_disable: _builtins.bool,
                 can_execute: _builtins.bool,
                 can_manage: _builtins.bool,
                 can_modify: _builtins.bool,
                 can_view: _builtins.bool,
                 create_tenant_id: _builtins.str,
                 create_user_id: _builtins.str,
                 created_at: _builtins.str,
                 deploy_system: _builtins.str,
                 duration: _builtins.str,
                 end_time: _builtins.str,
                 execution_state: _builtins.str,
                 execution_time: _builtins.str,
                 executor_id: _builtins.str,
                 executor_nick_name: _builtins.str,
                 id: _builtins.str,
                 is_care: _builtins.bool,
                 is_disable: _builtins.bool,
                 name: _builtins.str,
                 project_name: _builtins.str,
                 release_id: _builtins.int,
                 updated_at: _builtins.str):
        """
        :param Sequence['GetDeployApplicationsApplicationArrangeInfoArgs'] arrange_infos: Indicates the deployment task information
               The arrange_infos structure is documented below.
        :param _builtins.bool can_copy: Indicates whether the user has permission to clone application.
        :param _builtins.bool can_create_env: Indicates whether the user has permission to create environment in application.
        :param _builtins.bool can_delete: Indicates whether the user has permission to delete application.
        :param _builtins.bool can_disable: Indicates whether the user has permission to disable application.
        :param _builtins.bool can_execute: Indicates whether the user has permission to deploy.
        :param _builtins.bool can_manage: Indicates whether the user has permission to modify application permission.
        :param _builtins.bool can_modify: Indicates whether the user has permission to modify application.
        :param _builtins.bool can_view: Indicates whether the user has permission to view application.
        :param _builtins.str create_tenant_id: Indicates the created tenant ID.
        :param _builtins.str create_user_id: Indicates the creator user ID.
        :param _builtins.str created_at: Indicates the created time.
        :param _builtins.str deploy_system: Indicates the deployment task type.
        :param _builtins.str duration: Indicates the deployment duration.
        :param _builtins.str end_time: Indicates the deployment end time.
        :param _builtins.str execution_state: Indicates the execution status.
        :param _builtins.str execution_time: Indicates the latest execution time.
        :param _builtins.str executor_id: Indicates the executor user ID.
        :param _builtins.str executor_nick_name: Indicates the executor user name.
        :param _builtins.str id: Indicates the task ID.
        :param _builtins.bool is_care: Indicates whether application is saved to favorites.
        :param _builtins.bool is_disable: Indicates whether the application is disabled.
        :param _builtins.str name: Indicates the application name.
        :param _builtins.str project_name: Indicates the project name.
        :param _builtins.int release_id: Indicates the release ID.
        :param _builtins.str updated_at: Indicates the updated time.
        """
        pulumi.set(__self__, "arrange_infos", arrange_infos)
        pulumi.set(__self__, "can_copy", can_copy)
        pulumi.set(__self__, "can_create_env", can_create_env)
        pulumi.set(__self__, "can_delete", can_delete)
        pulumi.set(__self__, "can_disable", can_disable)
        pulumi.set(__self__, "can_execute", can_execute)
        pulumi.set(__self__, "can_manage", can_manage)
        pulumi.set(__self__, "can_modify", can_modify)
        pulumi.set(__self__, "can_view", can_view)
        pulumi.set(__self__, "create_tenant_id", create_tenant_id)
        pulumi.set(__self__, "create_user_id", create_user_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "deploy_system", deploy_system)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "execution_state", execution_state)
        pulumi.set(__self__, "execution_time", execution_time)
        pulumi.set(__self__, "executor_id", executor_id)
        pulumi.set(__self__, "executor_nick_name", executor_nick_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_care", is_care)
        pulumi.set(__self__, "is_disable", is_disable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "release_id", release_id)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="arrangeInfos")
    def arrange_infos(self) -> Sequence['outputs.GetDeployApplicationsApplicationArrangeInfoResult']:
        """
        Indicates the deployment task information
        The arrange_infos structure is documented below.
        """
        return pulumi.get(self, "arrange_infos")

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> _builtins.bool:
        """
        Indicates whether the user has permission to clone application.
        """
        return pulumi.get(self, "can_copy")

    @_builtins.property
    @pulumi.getter(name="canCreateEnv")
    def can_create_env(self) -> _builtins.bool:
        """
        Indicates whether the user has permission to create environment in application.
        """
        return pulumi.get(self, "can_create_env")

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> _builtins.bool:
        """
        Indicates whether the user has permission to delete application.
        """
        return pulumi.get(self, "can_delete")

    @_builtins.property
    @pulumi.getter(name="canDisable")
    def can_disable(self) -> _builtins.bool:
        """
        Indicates whether the user has permission to disable application.
        """
        return pulumi.get(self, "can_disable")

    @_builtins.property
    @pulumi.getter(name="canExecute")
    def can_execute(self) -> _builtins.bool:
        """
        Indicates whether the user has permission to deploy.
        """
        return pulumi.get(self, "can_execute")

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> _builtins.bool:
        """
        Indicates whether the user has permission to modify application permission.
        """
        return pulumi.get(self, "can_manage")

    @_builtins.property
    @pulumi.getter(name="canModify")
    def can_modify(self) -> _builtins.bool:
        """
        Indicates whether the user has permission to modify application.
        """
        return pulumi.get(self, "can_modify")

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> _builtins.bool:
        """
        Indicates whether the user has permission to view application.
        """
        return pulumi.get(self, "can_view")

    @_builtins.property
    @pulumi.getter(name="createTenantId")
    def create_tenant_id(self) -> _builtins.str:
        """
        Indicates the created tenant ID.
        """
        return pulumi.get(self, "create_tenant_id")

    @_builtins.property
    @pulumi.getter(name="createUserId")
    def create_user_id(self) -> _builtins.str:
        """
        Indicates the creator user ID.
        """
        return pulumi.get(self, "create_user_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the created time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deploySystem")
    def deploy_system(self) -> _builtins.str:
        """
        Indicates the deployment task type.
        """
        return pulumi.get(self, "deploy_system")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.str:
        """
        Indicates the deployment duration.
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Indicates the deployment end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="executionState")
    def execution_state(self) -> _builtins.str:
        """
        Indicates the execution status.
        """
        return pulumi.get(self, "execution_state")

    @_builtins.property
    @pulumi.getter(name="executionTime")
    def execution_time(self) -> _builtins.str:
        """
        Indicates the latest execution time.
        """
        return pulumi.get(self, "execution_time")

    @_builtins.property
    @pulumi.getter(name="executorId")
    def executor_id(self) -> _builtins.str:
        """
        Indicates the executor user ID.
        """
        return pulumi.get(self, "executor_id")

    @_builtins.property
    @pulumi.getter(name="executorNickName")
    def executor_nick_name(self) -> _builtins.str:
        """
        Indicates the executor user name.
        """
        return pulumi.get(self, "executor_nick_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the task ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCare")
    def is_care(self) -> _builtins.bool:
        """
        Indicates whether application is saved to favorites.
        """
        return pulumi.get(self, "is_care")

    @_builtins.property
    @pulumi.getter(name="isDisable")
    def is_disable(self) -> _builtins.bool:
        """
        Indicates whether the application is disabled.
        """
        return pulumi.get(self, "is_disable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the application name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> _builtins.str:
        """
        Indicates the project name.
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter(name="releaseId")
    def release_id(self) -> _builtins.int:
        """
        Indicates the release ID.
        """
        return pulumi.get(self, "release_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the updated time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetDeployApplicationsApplicationArrangeInfoResult(dict):
    def __init__(__self__, *,
                 deploy_system: _builtins.str,
                 id: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str deploy_system: Indicates the deployment task type.
        :param _builtins.str id: Indicates the task ID.
        :param _builtins.str state: Indicates the deployment task status.
        """
        pulumi.set(__self__, "deploy_system", deploy_system)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="deploySystem")
    def deploy_system(self) -> _builtins.str:
        """
        Indicates the deployment task type.
        """
        return pulumi.get(self, "deploy_system")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the task ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Indicates the deployment task status.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetDeployEnvironmentsEnvironmentResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 created_bies: Sequence['outputs.GetDeployEnvironmentsEnvironmentCreatedByResult'],
                 deploy_type: _builtins.int,
                 description: _builtins.str,
                 id: _builtins.str,
                 instance_count: _builtins.int,
                 name: _builtins.str,
                 os_type: _builtins.str,
                 permissions: Sequence['outputs.GetDeployEnvironmentsEnvironmentPermissionResult']):
        """
        :param _builtins.str created_at: Indicates the created time.
        :param Sequence['GetDeployEnvironmentsEnvironmentCreatedByArgs'] created_bies: Indicates the creator information.
        :param _builtins.int deploy_type: Indicates the deployment type.
               The value can be as follows:
               + **0**: host
               + **1**: kubernetes
        :param _builtins.str description: Indicates the environment description.
        :param _builtins.str id: Indicates the environment ID.
        :param _builtins.int instance_count: Indicates the number of hosts in the environment.
        :param _builtins.str name: Specifies the environment name.
        :param _builtins.str os_type: Indicates the operating system.
        :param Sequence['GetDeployEnvironmentsEnvironmentPermissionArgs'] permissions: Indicates the user permission.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_bies", created_bies)
        pulumi.set(__self__, "deploy_type", deploy_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "permissions", permissions)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the created time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBies")
    def created_bies(self) -> Sequence['outputs.GetDeployEnvironmentsEnvironmentCreatedByResult']:
        """
        Indicates the creator information.
        """
        return pulumi.get(self, "created_bies")

    @_builtins.property
    @pulumi.getter(name="deployType")
    def deploy_type(self) -> _builtins.int:
        """
        Indicates the deployment type.
        The value can be as follows:
        + **0**: host
        + **1**: kubernetes
        """
        return pulumi.get(self, "deploy_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the environment description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the environment ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> _builtins.int:
        """
        Indicates the number of hosts in the environment.
        """
        return pulumi.get(self, "instance_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the environment name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Indicates the operating system.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetDeployEnvironmentsEnvironmentPermissionResult']:
        """
        Indicates the user permission.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetDeployEnvironmentsEnvironmentCreatedByResult(dict):
    def __init__(__self__, *,
                 user_id: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str user_id: Indicates the user ID.
        :param _builtins.str user_name: Indicates the user name.
        """
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        Indicates the user ID.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        Indicates the user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDeployEnvironmentsEnvironmentPermissionResult(dict):
    def __init__(__self__, *,
                 can_delete: _builtins.bool,
                 can_deploy: _builtins.bool,
                 can_edit: _builtins.bool,
                 can_manage: _builtins.bool,
                 can_view: _builtins.bool):
        """
        :param _builtins.bool can_delete: Indicates whether the user has the deletion permission.
        :param _builtins.bool can_deploy: Indicates whether the user has the deploy permission.
        :param _builtins.bool can_edit: Indicates whether the user has the edit permission.
        :param _builtins.bool can_manage: Indicates whether the user has the management permission.
        :param _builtins.bool can_view: Indicates whether the user has the view permission.
        """
        pulumi.set(__self__, "can_delete", can_delete)
        pulumi.set(__self__, "can_deploy", can_deploy)
        pulumi.set(__self__, "can_edit", can_edit)
        pulumi.set(__self__, "can_manage", can_manage)
        pulumi.set(__self__, "can_view", can_view)

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> _builtins.bool:
        """
        Indicates whether the user has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @_builtins.property
    @pulumi.getter(name="canDeploy")
    def can_deploy(self) -> _builtins.bool:
        """
        Indicates whether the user has the deploy permission.
        """
        return pulumi.get(self, "can_deploy")

    @_builtins.property
    @pulumi.getter(name="canEdit")
    def can_edit(self) -> _builtins.bool:
        """
        Indicates whether the user has the edit permission.
        """
        return pulumi.get(self, "can_edit")

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> _builtins.bool:
        """
        Indicates whether the user has the management permission.
        """
        return pulumi.get(self, "can_manage")

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> _builtins.bool:
        """
        Indicates whether the user has the view permission.
        """
        return pulumi.get(self, "can_view")


@pulumi.output_type
class GetDeployGroupsGroupResult(dict):
    def __init__(__self__, *,
                 created_by: _builtins.str,
                 description: _builtins.str,
                 env_count: _builtins.int,
                 host_count: _builtins.int,
                 id: _builtins.str,
                 is_proxy_mode: _builtins.int,
                 name: _builtins.str,
                 os_type: _builtins.str,
                 permissions: Sequence['outputs.GetDeployGroupsGroupPermissionResult'],
                 resource_pool_id: _builtins.str):
        """
        :param _builtins.str created_by: Indicates the creator name.
        :param _builtins.str description: Indicates the description of host cluster.
        :param _builtins.int env_count: Indicates the number of environments.
        :param _builtins.int host_count: Indicates the the number of hosts in a cluster.
        :param _builtins.str id: Indicates the host cluster ID.
        :param _builtins.int is_proxy_mode: Specifies whether the host is an agent host.
               Valid values are as follows:
               + **1**: Using proxy access mode.
               + **0**: Without using proxy access mode.
        :param _builtins.str name: Specifies the name of host cluster.
        :param _builtins.str os_type: Specifies the operating system. Valid values are **windows**, **linux**.
        :param Sequence['GetDeployGroupsGroupPermissionArgs'] permissions: Indicates the permission list.
        :param _builtins.str resource_pool_id: Specifies the customized resource pool ID.
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "env_count", env_count)
        pulumi.set(__self__, "host_count", host_count)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_proxy_mode", is_proxy_mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "resource_pool_id", resource_pool_id)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        Indicates the creator name.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of host cluster.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="envCount")
    def env_count(self) -> _builtins.int:
        """
        Indicates the number of environments.
        """
        return pulumi.get(self, "env_count")

    @_builtins.property
    @pulumi.getter(name="hostCount")
    def host_count(self) -> _builtins.int:
        """
        Indicates the the number of hosts in a cluster.
        """
        return pulumi.get(self, "host_count")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the host cluster ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isProxyMode")
    def is_proxy_mode(self) -> _builtins.int:
        """
        Specifies whether the host is an agent host.
        Valid values are as follows:
        + **1**: Using proxy access mode.
        + **0**: Without using proxy access mode.
        """
        return pulumi.get(self, "is_proxy_mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of host cluster.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Specifies the operating system. Valid values are **windows**, **linux**.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetDeployGroupsGroupPermissionResult']:
        """
        Indicates the permission list.
        """
        return pulumi.get(self, "permissions")

    @_builtins.property
    @pulumi.getter(name="resourcePoolId")
    def resource_pool_id(self) -> _builtins.str:
        """
        Specifies the customized resource pool ID.
        """
        return pulumi.get(self, "resource_pool_id")


@pulumi.output_type
class GetDeployGroupsGroupPermissionResult(dict):
    def __init__(__self__, *,
                 can_add_host: _builtins.bool,
                 can_copy: _builtins.bool,
                 can_delete: _builtins.bool,
                 can_edit: _builtins.bool,
                 can_manage: _builtins.bool,
                 can_view: _builtins.bool):
        """
        :param _builtins.bool can_add_host: Indicates whether the user has the permission to add hosts.
        :param _builtins.bool can_copy: Indicates whether the user has the permission to copy hosts.
        :param _builtins.bool can_delete: Indicates whether the user has the deletion permission.
        :param _builtins.bool can_edit: Indicates whether the user has the edit permission.
        :param _builtins.bool can_manage: Indicates whether the user has the management permission.
        :param _builtins.bool can_view: Indicates whether the user has the view permission.
        """
        pulumi.set(__self__, "can_add_host", can_add_host)
        pulumi.set(__self__, "can_copy", can_copy)
        pulumi.set(__self__, "can_delete", can_delete)
        pulumi.set(__self__, "can_edit", can_edit)
        pulumi.set(__self__, "can_manage", can_manage)
        pulumi.set(__self__, "can_view", can_view)

    @_builtins.property
    @pulumi.getter(name="canAddHost")
    def can_add_host(self) -> _builtins.bool:
        """
        Indicates whether the user has the permission to add hosts.
        """
        return pulumi.get(self, "can_add_host")

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> _builtins.bool:
        """
        Indicates whether the user has the permission to copy hosts.
        """
        return pulumi.get(self, "can_copy")

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> _builtins.bool:
        """
        Indicates whether the user has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @_builtins.property
    @pulumi.getter(name="canEdit")
    def can_edit(self) -> _builtins.bool:
        """
        Indicates whether the user has the edit permission.
        """
        return pulumi.get(self, "can_edit")

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> _builtins.bool:
        """
        Indicates whether the user has the management permission.
        """
        return pulumi.get(self, "can_manage")

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> _builtins.bool:
        """
        Indicates whether the user has the view permission.
        """
        return pulumi.get(self, "can_view")


@pulumi.output_type
class GetDeployHostsHostResult(dict):
    def __init__(__self__, *,
                 as_proxy: _builtins.bool,
                 connection_status: _builtins.str,
                 created_at: _builtins.str,
                 env_count: _builtins.int,
                 id: _builtins.str,
                 import_status: _builtins.str,
                 ip_address: _builtins.str,
                 lastest_connection_at: _builtins.str,
                 name: _builtins.str,
                 os_type: _builtins.str,
                 owner_id: _builtins.str,
                 owner_name: _builtins.str,
                 permissions: Sequence['outputs.GetDeployHostsHostPermissionResult'],
                 port: _builtins.int,
                 proxy_host_id: _builtins.str,
                 trusted_type: _builtins.int,
                 username: _builtins.str):
        """
        :param _builtins.bool as_proxy: Specifies whether the host is proxy or not.
               Valid values are **true** and **false**.
        :param _builtins.str connection_status: Indicates the connection status.
        :param _builtins.str created_at: Indicates the create time.
        :param _builtins.int env_count: Indicates the number of environments.
        :param _builtins.str id: Indicates the host ID.
        :param _builtins.str import_status: Indicates the import status.
        :param _builtins.str ip_address: Indicates the IP address.
        :param _builtins.str lastest_connection_at: Indicates the last connection time.
        :param _builtins.str name: Specifies the name of host.
        :param _builtins.str os_type: Indicates the operating system.
        :param _builtins.str owner_id: Indicates the owner ID.
        :param _builtins.str owner_name: Indicates the owner name.
        :param Sequence['GetDeployHostsHostPermissionArgs'] permissions: Indicates the permission.
               The permission structure is documented below.
        :param _builtins.int port: Indicates the SSH port.
        :param _builtins.str proxy_host_id: Indicates the agent ID.
        :param _builtins.int trusted_type: Indicates the trusted type.
               + **0** indicates password authentication.
               + **1** indicates key authentication.
        :param _builtins.str username: Indicates the username.
        """
        pulumi.set(__self__, "as_proxy", as_proxy)
        pulumi.set(__self__, "connection_status", connection_status)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "env_count", env_count)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "import_status", import_status)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "lastest_connection_at", lastest_connection_at)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "owner_name", owner_name)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "proxy_host_id", proxy_host_id)
        pulumi.set(__self__, "trusted_type", trusted_type)
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="asProxy")
    def as_proxy(self) -> _builtins.bool:
        """
        Specifies whether the host is proxy or not.
        Valid values are **true** and **false**.
        """
        return pulumi.get(self, "as_proxy")

    @_builtins.property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> _builtins.str:
        """
        Indicates the connection status.
        """
        return pulumi.get(self, "connection_status")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="envCount")
    def env_count(self) -> _builtins.int:
        """
        Indicates the number of environments.
        """
        return pulumi.get(self, "env_count")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the host ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="importStatus")
    def import_status(self) -> _builtins.str:
        """
        Indicates the import status.
        """
        return pulumi.get(self, "import_status")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Indicates the IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="lastestConnectionAt")
    def lastest_connection_at(self) -> _builtins.str:
        """
        Indicates the last connection time.
        """
        return pulumi.get(self, "lastest_connection_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of host.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Indicates the operating system.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> _builtins.str:
        """
        Indicates the owner ID.
        """
        return pulumi.get(self, "owner_id")

    @_builtins.property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> _builtins.str:
        """
        Indicates the owner name.
        """
        return pulumi.get(self, "owner_name")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetDeployHostsHostPermissionResult']:
        """
        Indicates the permission.
        The permission structure is documented below.
        """
        return pulumi.get(self, "permissions")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Indicates the SSH port.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="proxyHostId")
    def proxy_host_id(self) -> _builtins.str:
        """
        Indicates the agent ID.
        """
        return pulumi.get(self, "proxy_host_id")

    @_builtins.property
    @pulumi.getter(name="trustedType")
    def trusted_type(self) -> _builtins.int:
        """
        Indicates the trusted type.
        + **0** indicates password authentication.
        + **1** indicates key authentication.
        """
        return pulumi.get(self, "trusted_type")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        Indicates the username.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDeployHostsHostPermissionResult(dict):
    def __init__(__self__, *,
                 can_add_host: _builtins.bool,
                 can_copy: _builtins.bool,
                 can_delete: _builtins.bool,
                 can_edit: _builtins.bool,
                 can_view: _builtins.bool):
        """
        :param _builtins.bool can_add_host: Indicates whether the user has the permission to add hosts.
        :param _builtins.bool can_copy: Indicates whether the user has the permission to copy hosts.
        :param _builtins.bool can_delete: Indicates whether the user has the deletion permission.
        :param _builtins.bool can_edit: Indicates whether the user has the edit permission.
        :param _builtins.bool can_view: Indicates whether the user has the view permission.
        """
        pulumi.set(__self__, "can_add_host", can_add_host)
        pulumi.set(__self__, "can_copy", can_copy)
        pulumi.set(__self__, "can_delete", can_delete)
        pulumi.set(__self__, "can_edit", can_edit)
        pulumi.set(__self__, "can_view", can_view)

    @_builtins.property
    @pulumi.getter(name="canAddHost")
    def can_add_host(self) -> _builtins.bool:
        """
        Indicates whether the user has the permission to add hosts.
        """
        return pulumi.get(self, "can_add_host")

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> _builtins.bool:
        """
        Indicates whether the user has the permission to copy hosts.
        """
        return pulumi.get(self, "can_copy")

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> _builtins.bool:
        """
        Indicates whether the user has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @_builtins.property
    @pulumi.getter(name="canEdit")
    def can_edit(self) -> _builtins.bool:
        """
        Indicates whether the user has the edit permission.
        """
        return pulumi.get(self, "can_edit")

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> _builtins.bool:
        """
        Indicates whether the user has the view permission.
        """
        return pulumi.get(self, "can_view")


@pulumi.output_type
class GetInspectorHostGroupsGroupResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: Indicates the group ID.
        :param _builtins.str name: Indicates the group name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the group ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInspectorHostsHostResult(dict):
    def __init__(__self__, *,
                 auth_status: _builtins.int,
                 group_id: _builtins.str,
                 id: _builtins.str,
                 ip: _builtins.str,
                 jumper_server_id: _builtins.str,
                 last_scan_id: _builtins.str,
                 last_scan_infos: Sequence['outputs.GetInspectorHostsHostLastScanInfoResult'],
                 name: _builtins.str,
                 os_type: _builtins.str,
                 smb_credential_id: _builtins.str,
                 ssh_credential_id: _builtins.str):
        """
        :param _builtins.int auth_status: Indicates the auth status.
               Value can be as follows:
               + **-1**: unknown
               + **0**: connected
               + **1**: unreachable
               + **2**: login failed
        :param _builtins.str group_id: Specifies the host group ID.
        :param _builtins.str id: Indicates the host ID.
        :param _builtins.str ip: Indicates the host IP.
        :param _builtins.str jumper_server_id: Indicates the jumper server ID.
        :param _builtins.str last_scan_id: Indicates the last scan ID.
        :param Sequence['GetInspectorHostsHostLastScanInfoArgs'] last_scan_infos: Indicates the last scan info.
        :param _builtins.str name: Indicates the host name.
        :param _builtins.str os_type: Indicates the host os type.
        :param _builtins.str smb_credential_id: Indicates the smb credential ID.
        :param _builtins.str ssh_credential_id: Indicates the host ssh credential ID
        """
        pulumi.set(__self__, "auth_status", auth_status)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "jumper_server_id", jumper_server_id)
        pulumi.set(__self__, "last_scan_id", last_scan_id)
        pulumi.set(__self__, "last_scan_infos", last_scan_infos)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "smb_credential_id", smb_credential_id)
        pulumi.set(__self__, "ssh_credential_id", ssh_credential_id)

    @_builtins.property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> _builtins.int:
        """
        Indicates the auth status.
        Value can be as follows:
        + **-1**: unknown
        + **0**: connected
        + **1**: unreachable
        + **2**: login failed
        """
        return pulumi.get(self, "auth_status")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        Specifies the host group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the host ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Indicates the host IP.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="jumperServerId")
    def jumper_server_id(self) -> _builtins.str:
        """
        Indicates the jumper server ID.
        """
        return pulumi.get(self, "jumper_server_id")

    @_builtins.property
    @pulumi.getter(name="lastScanId")
    def last_scan_id(self) -> _builtins.str:
        """
        Indicates the last scan ID.
        """
        return pulumi.get(self, "last_scan_id")

    @_builtins.property
    @pulumi.getter(name="lastScanInfos")
    def last_scan_infos(self) -> Sequence['outputs.GetInspectorHostsHostLastScanInfoResult']:
        """
        Indicates the last scan info.
        """
        return pulumi.get(self, "last_scan_infos")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the host name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Indicates the host os type.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="smbCredentialId")
    def smb_credential_id(self) -> _builtins.str:
        """
        Indicates the smb credential ID.
        """
        return pulumi.get(self, "smb_credential_id")

    @_builtins.property
    @pulumi.getter(name="sshCredentialId")
    def ssh_credential_id(self) -> _builtins.str:
        """
        Indicates the host ssh credential ID
        """
        return pulumi.get(self, "ssh_credential_id")


@pulumi.output_type
class GetInspectorHostsHostLastScanInfoResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.str,
                 enable_weak_passwd: _builtins.bool,
                 end_time: _builtins.str,
                 progress: _builtins.int,
                 reason: _builtins.str,
                 status: _builtins.int):
        """
        :param _builtins.str create_time: Indicates the scan task create time.
        :param _builtins.bool enable_weak_passwd: Indicates whether weak password check enabled.
        :param _builtins.str end_time: Indicates the scan task end time.
        :param _builtins.int progress: Indicates the task progress.
        :param _builtins.str reason: Indicates the task description.
        :param _builtins.int status: Indicates the scan status.
               Value can be as follows:
               + **0**: running
               + **1**: completed
               + **2**: cancel
               + **3**: waiting
               + **4**: failed
               + **5**: scheduled
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "enable_weak_passwd", enable_weak_passwd)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Indicates the scan task create time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="enableWeakPasswd")
    def enable_weak_passwd(self) -> _builtins.bool:
        """
        Indicates whether weak password check enabled.
        """
        return pulumi.get(self, "enable_weak_passwd")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Indicates the scan task end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.int:
        """
        Indicates the task progress.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        """
        Indicates the task description.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        Indicates the scan status.
        Value can be as follows:
        + **0**: running
        + **1**: completed
        + **2**: cancel
        + **3**: waiting
        + **4**: failed
        + **5**: scheduled
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInspectorWebsiteScanTasksTaskResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 cve_check: _builtins.bool,
                 domain_name: _builtins.str,
                 end_time: _builtins.str,
                 high: _builtins.int,
                 hint: _builtins.int,
                 low: _builtins.int,
                 malicious_code: _builtins.bool,
                 malicious_link: _builtins.bool,
                 middle: _builtins.int,
                 pack_num: _builtins.int,
                 picture_check: _builtins.bool,
                 port_scan: _builtins.bool,
                 progress: _builtins.int,
                 reason: _builtins.str,
                 safe_level: _builtins.str,
                 scan_mode: _builtins.str,
                 schedule_status: _builtins.str,
                 score: _builtins.int,
                 start_time: _builtins.str,
                 task_id: _builtins.str,
                 task_name: _builtins.str,
                 task_period: _builtins.str,
                 task_status: _builtins.str,
                 task_type: _builtins.str,
                 text_check: _builtins.bool,
                 timer: _builtins.str,
                 trigger_time: _builtins.str,
                 url: _builtins.str,
                 weak_pwd_scan: _builtins.bool):
        """
        :param _builtins.str created_at: Indicates the create time of the task.
        :param _builtins.bool cve_check: Indicates whether to perform CVE vulnerability scanning.
        :param _builtins.str domain_name: Indicates the domain name.
        :param _builtins.str end_time: Indicates the end time of the task.
        :param _builtins.int high: Indicates the number of high-risk vulnerabilities.
        :param _builtins.int hint: Indicates the number of hint-risk vulnerabilities.
        :param _builtins.int low: Indicates the number of low-severity vulnerabilities.
        :param _builtins.bool malicious_code: Indicates whether to perform malicious code scanning.
        :param _builtins.bool malicious_link: Indicates whether to perform link health detection.
        :param _builtins.int middle: Indicates the number of medium-risk vulnerabilities.
        :param _builtins.int pack_num: Indicates the total number of packages.
        :param _builtins.bool picture_check: Indicates whether to conduct website content compliance image detection.
        :param _builtins.bool port_scan: Indicates whether to perform port scanning.
        :param _builtins.int progress: Indicates the task progress.
        :param _builtins.str reason: Indicates the description of task status.
        :param _builtins.str safe_level: Indicates the security level.
               Value can be **safety**, **average** and **highrisk**.
        :param _builtins.str scan_mode: Indicates the task scan mode.
               Value can be as follows:
               + **fast**: Quick scan.
               + **normal**: Normal scan.
               + **deep**: Deep scan.
        :param _builtins.str schedule_status: Indicates the monitor task status.
               Value can be **running**, **waiting** and **finished**.
        :param _builtins.int score: Indicates the safety score.
        :param _builtins.str start_time: Indicates the start time of the task.
        :param _builtins.str task_id: Indicates the task ID.
        :param _builtins.str task_name: Indicates the task name.
        :param _builtins.str task_period: Indicates the scheduled trigger period of the monitor task.
               Value can be as follows:
               + **everyday**: Trigger monitor task every day.
               + **threedays**: Trigger monitor task every three days.
               + **everyweek**: Trigger monitor task every week.
               + **everymonth**: Trigger monitor task every month.
        :param _builtins.str task_status: Indicates the task status.
               Value can be **running**, **success**, **waiting**, **ready** and **failure**.
        :param _builtins.str task_type: Indicates the task type.
               Value can be as follows:
               + **normal**: Normal task type.
               + **monitor**: Monitor task type.
        :param _builtins.bool text_check: Indicates whether to conduct website content compliance text detection.
        :param _builtins.str timer: Indicates the scheduled trigger time of the normal task.
        :param _builtins.str trigger_time: Indicates the scheduled trigger time of the monitor task.
        :param _builtins.str url: Indicates the destination URL to scan.
        :param _builtins.bool weak_pwd_scan: Indicates whether to scan for weak passwords.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "cve_check", cve_check)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "high", high)
        pulumi.set(__self__, "hint", hint)
        pulumi.set(__self__, "low", low)
        pulumi.set(__self__, "malicious_code", malicious_code)
        pulumi.set(__self__, "malicious_link", malicious_link)
        pulumi.set(__self__, "middle", middle)
        pulumi.set(__self__, "pack_num", pack_num)
        pulumi.set(__self__, "picture_check", picture_check)
        pulumi.set(__self__, "port_scan", port_scan)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "safe_level", safe_level)
        pulumi.set(__self__, "scan_mode", scan_mode)
        pulumi.set(__self__, "schedule_status", schedule_status)
        pulumi.set(__self__, "score", score)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "task_period", task_period)
        pulumi.set(__self__, "task_status", task_status)
        pulumi.set(__self__, "task_type", task_type)
        pulumi.set(__self__, "text_check", text_check)
        pulumi.set(__self__, "timer", timer)
        pulumi.set(__self__, "trigger_time", trigger_time)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "weak_pwd_scan", weak_pwd_scan)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the create time of the task.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="cveCheck")
    def cve_check(self) -> _builtins.bool:
        """
        Indicates whether to perform CVE vulnerability scanning.
        """
        return pulumi.get(self, "cve_check")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        Indicates the domain name.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Indicates the end time of the task.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def high(self) -> _builtins.int:
        """
        Indicates the number of high-risk vulnerabilities.
        """
        return pulumi.get(self, "high")

    @_builtins.property
    @pulumi.getter
    def hint(self) -> _builtins.int:
        """
        Indicates the number of hint-risk vulnerabilities.
        """
        return pulumi.get(self, "hint")

    @_builtins.property
    @pulumi.getter
    def low(self) -> _builtins.int:
        """
        Indicates the number of low-severity vulnerabilities.
        """
        return pulumi.get(self, "low")

    @_builtins.property
    @pulumi.getter(name="maliciousCode")
    def malicious_code(self) -> _builtins.bool:
        """
        Indicates whether to perform malicious code scanning.
        """
        return pulumi.get(self, "malicious_code")

    @_builtins.property
    @pulumi.getter(name="maliciousLink")
    def malicious_link(self) -> _builtins.bool:
        """
        Indicates whether to perform link health detection.
        """
        return pulumi.get(self, "malicious_link")

    @_builtins.property
    @pulumi.getter
    def middle(self) -> _builtins.int:
        """
        Indicates the number of medium-risk vulnerabilities.
        """
        return pulumi.get(self, "middle")

    @_builtins.property
    @pulumi.getter(name="packNum")
    def pack_num(self) -> _builtins.int:
        """
        Indicates the total number of packages.
        """
        return pulumi.get(self, "pack_num")

    @_builtins.property
    @pulumi.getter(name="pictureCheck")
    def picture_check(self) -> _builtins.bool:
        """
        Indicates whether to conduct website content compliance image detection.
        """
        return pulumi.get(self, "picture_check")

    @_builtins.property
    @pulumi.getter(name="portScan")
    def port_scan(self) -> _builtins.bool:
        """
        Indicates whether to perform port scanning.
        """
        return pulumi.get(self, "port_scan")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.int:
        """
        Indicates the task progress.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        """
        Indicates the description of task status.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter(name="safeLevel")
    def safe_level(self) -> _builtins.str:
        """
        Indicates the security level.
        Value can be **safety**, **average** and **highrisk**.
        """
        return pulumi.get(self, "safe_level")

    @_builtins.property
    @pulumi.getter(name="scanMode")
    def scan_mode(self) -> _builtins.str:
        """
        Indicates the task scan mode.
        Value can be as follows:
        + **fast**: Quick scan.
        + **normal**: Normal scan.
        + **deep**: Deep scan.
        """
        return pulumi.get(self, "scan_mode")

    @_builtins.property
    @pulumi.getter(name="scheduleStatus")
    def schedule_status(self) -> _builtins.str:
        """
        Indicates the monitor task status.
        Value can be **running**, **waiting** and **finished**.
        """
        return pulumi.get(self, "schedule_status")

    @_builtins.property
    @pulumi.getter
    def score(self) -> _builtins.int:
        """
        Indicates the safety score.
        """
        return pulumi.get(self, "score")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the start time of the task.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        """
        Indicates the task ID.
        """
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> _builtins.str:
        """
        Indicates the task name.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="taskPeriod")
    def task_period(self) -> _builtins.str:
        """
        Indicates the scheduled trigger period of the monitor task.
        Value can be as follows:
        + **everyday**: Trigger monitor task every day.
        + **threedays**: Trigger monitor task every three days.
        + **everyweek**: Trigger monitor task every week.
        + **everymonth**: Trigger monitor task every month.
        """
        return pulumi.get(self, "task_period")

    @_builtins.property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> _builtins.str:
        """
        Indicates the task status.
        Value can be **running**, **success**, **waiting**, **ready** and **failure**.
        """
        return pulumi.get(self, "task_status")

    @_builtins.property
    @pulumi.getter(name="taskType")
    def task_type(self) -> _builtins.str:
        """
        Indicates the task type.
        Value can be as follows:
        + **normal**: Normal task type.
        + **monitor**: Monitor task type.
        """
        return pulumi.get(self, "task_type")

    @_builtins.property
    @pulumi.getter(name="textCheck")
    def text_check(self) -> _builtins.bool:
        """
        Indicates whether to conduct website content compliance text detection.
        """
        return pulumi.get(self, "text_check")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> _builtins.str:
        """
        Indicates the scheduled trigger time of the normal task.
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="triggerTime")
    def trigger_time(self) -> _builtins.str:
        """
        Indicates the scheduled trigger time of the monitor task.
        """
        return pulumi.get(self, "trigger_time")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        Indicates the destination URL to scan.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter(name="weakPwdScan")
    def weak_pwd_scan(self) -> _builtins.bool:
        """
        Indicates whether to scan for weak passwords.
        """
        return pulumi.get(self, "weak_pwd_scan")


@pulumi.output_type
class GetInspectorWebsitesWebsiteResult(dict):
    def __init__(__self__, *,
                 auth_status: _builtins.str,
                 created_at: _builtins.str,
                 high: _builtins.int,
                 hint: _builtins.int,
                 id: _builtins.str,
                 low: _builtins.int,
                 middle: _builtins.int,
                 top_level_domain_id: _builtins.str,
                 website_address: _builtins.str,
                 website_name: _builtins.str):
        """
        :param _builtins.str auth_status: Specifies the auth status of website.
               Valid values are:
               + **unauth**: Unauthorized.
               + **auth**: Authorized.
               + **invalid**: Authentication file is invalid.
               + **manual**: Manual authentication.
               + **skip**: Authentication free.
        :param _builtins.str created_at: Indicates the time to create website.
        :param _builtins.int high: Indicates the number of high-risk vulnerabilities.
        :param _builtins.int hint: Indicates the number of hint-risk vulnerabilities.
        :param _builtins.str id: Indicates the domain ID.
        :param _builtins.int low: Indicates the number of low-severity vulnerabilities.
        :param _builtins.int middle: Indicates the number of medium-risk vulnerabilities.
        :param _builtins.str top_level_domain_id: Indicates the top level domain ID.
        :param _builtins.str website_address: Indicates the website address.
        :param _builtins.str website_name: Indicates the website name.
        """
        pulumi.set(__self__, "auth_status", auth_status)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "high", high)
        pulumi.set(__self__, "hint", hint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "low", low)
        pulumi.set(__self__, "middle", middle)
        pulumi.set(__self__, "top_level_domain_id", top_level_domain_id)
        pulumi.set(__self__, "website_address", website_address)
        pulumi.set(__self__, "website_name", website_name)

    @_builtins.property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> _builtins.str:
        """
        Specifies the auth status of website.
        Valid values are:
        + **unauth**: Unauthorized.
        + **auth**: Authorized.
        + **invalid**: Authentication file is invalid.
        + **manual**: Manual authentication.
        + **skip**: Authentication free.
        """
        return pulumi.get(self, "auth_status")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the time to create website.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def high(self) -> _builtins.int:
        """
        Indicates the number of high-risk vulnerabilities.
        """
        return pulumi.get(self, "high")

    @_builtins.property
    @pulumi.getter
    def hint(self) -> _builtins.int:
        """
        Indicates the number of hint-risk vulnerabilities.
        """
        return pulumi.get(self, "hint")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the domain ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def low(self) -> _builtins.int:
        """
        Indicates the number of low-severity vulnerabilities.
        """
        return pulumi.get(self, "low")

    @_builtins.property
    @pulumi.getter
    def middle(self) -> _builtins.int:
        """
        Indicates the number of medium-risk vulnerabilities.
        """
        return pulumi.get(self, "middle")

    @_builtins.property
    @pulumi.getter(name="topLevelDomainId")
    def top_level_domain_id(self) -> _builtins.str:
        """
        Indicates the top level domain ID.
        """
        return pulumi.get(self, "top_level_domain_id")

    @_builtins.property
    @pulumi.getter(name="websiteAddress")
    def website_address(self) -> _builtins.str:
        """
        Indicates the website address.
        """
        return pulumi.get(self, "website_address")

    @_builtins.property
    @pulumi.getter(name="websiteName")
    def website_name(self) -> _builtins.str:
        """
        Indicates the website name.
        """
        return pulumi.get(self, "website_name")


@pulumi.output_type
class GetPipelineGroupsGroupResult(dict):
    def __init__(__self__, *,
                 childrens: Sequence[_builtins.str],
                 create_time: _builtins.int,
                 creator: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 ordinal: _builtins.int,
                 parent_id: _builtins.str,
                 path_id: _builtins.str,
                 update_time: _builtins.int,
                 updater: _builtins.str):
        """
        :param Sequence[_builtins.str] childrens: Indicates the child group name list.
        :param _builtins.int create_time: Indicates the create time.
        :param _builtins.str creator: Indicates the ID of the group creator.
        :param _builtins.str id: Indicates the group ID.
        :param _builtins.str name: Indicates the group name.
        :param _builtins.int ordinal: Indicates the group sorting field.
        :param _builtins.str parent_id: Indicates the parent group ID.
        :param _builtins.str path_id: Indicates the group path.
        :param _builtins.int update_time: Indicates the update time.
        :param _builtins.str updater: Indicates the ID of the user who last updates the group.
        """
        pulumi.set(__self__, "childrens", childrens)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ordinal", ordinal)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "path_id", path_id)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "updater", updater)

    @_builtins.property
    @pulumi.getter
    def childrens(self) -> Sequence[_builtins.str]:
        """
        Indicates the child group name list.
        """
        return pulumi.get(self, "childrens")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.int:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        Indicates the ID of the group creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the group ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the group name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> _builtins.int:
        """
        Indicates the group sorting field.
        """
        return pulumi.get(self, "ordinal")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        """
        Indicates the parent group ID.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="pathId")
    def path_id(self) -> _builtins.str:
        """
        Indicates the group path.
        """
        return pulumi.get(self, "path_id")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.int:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter
    def updater(self) -> _builtins.str:
        """
        Indicates the ID of the user who last updates the group.
        """
        return pulumi.get(self, "updater")


@pulumi.output_type
class GetPipelineMicroServicesMicroServiceResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.str,
                 creator_id: _builtins.str,
                 creator_name: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 is_followed: _builtins.bool,
                 name: _builtins.str,
                 parent_id: _builtins.str,
                 repos: Sequence['outputs.GetPipelineMicroServicesMicroServiceRepoResult'],
                 status: _builtins.str,
                 type: _builtins.str,
                 update_time: _builtins.str,
                 updater_id: _builtins.str,
                 updater_name: _builtins.str):
        """
        :param _builtins.str create_time: Indicates the create time.
        :param _builtins.str creator_id: Indicates the creator ID.
        :param _builtins.str creator_name: Indicates the creator name.
        :param _builtins.str description: Indicates the micro service description.
        :param _builtins.str id: Indicates the micro service ID.
        :param _builtins.bool is_followed: Indicates whether the micro service is followed.
        :param _builtins.str name: Specifies the micro service name.
        :param _builtins.str parent_id: Indicates the micro service parent ID.
        :param Sequence['GetPipelineMicroServicesMicroServiceRepoArgs'] repos: Indicates the repository information.
               The repos structure is documented below.
        :param _builtins.str status: Indicates the micro service status.
        :param _builtins.str type: Indicates the repository type.
        :param _builtins.str update_time: Indicates the update time.
        :param _builtins.str updater_id: Indicates the updater ID.
        :param _builtins.str updater_name: Indicates the updater name.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_id", creator_id)
        pulumi.set(__self__, "creator_name", creator_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_followed", is_followed)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "repos", repos)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "updater_id", updater_id)
        pulumi.set(__self__, "updater_name", updater_name)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> _builtins.str:
        """
        Indicates the creator ID.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> _builtins.str:
        """
        Indicates the creator name.
        """
        return pulumi.get(self, "creator_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the micro service description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the micro service ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isFollowed")
    def is_followed(self) -> _builtins.bool:
        """
        Indicates whether the micro service is followed.
        """
        return pulumi.get(self, "is_followed")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the micro service name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        """
        Indicates the micro service parent ID.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter
    def repos(self) -> Sequence['outputs.GetPipelineMicroServicesMicroServiceRepoResult']:
        """
        Indicates the repository information.
        The repos structure is documented below.
        """
        return pulumi.get(self, "repos")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the micro service status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the repository type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="updaterId")
    def updater_id(self) -> _builtins.str:
        """
        Indicates the updater ID.
        """
        return pulumi.get(self, "updater_id")

    @_builtins.property
    @pulumi.getter(name="updaterName")
    def updater_name(self) -> _builtins.str:
        """
        Indicates the updater name.
        """
        return pulumi.get(self, "updater_name")


@pulumi.output_type
class GetPipelineMicroServicesMicroServiceRepoResult(dict):
    def __init__(__self__, *,
                 branch: _builtins.str,
                 endpoint_id: _builtins.str,
                 git_url: _builtins.str,
                 http_url: _builtins.str,
                 language: _builtins.str,
                 repo_id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str branch: Indicates the branch.
        :param _builtins.str endpoint_id: Indicates the endpoint ID.
        :param _builtins.str git_url: Indicates the Git address of the Git repository.
        :param _builtins.str http_url: Indicates the HTTP address of the Git repository.
        :param _builtins.str language: Indicates the language.
        :param _builtins.str repo_id: Indicates the repository ID.
        :param _builtins.str type: Indicates the repository type.
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "git_url", git_url)
        pulumi.set(__self__, "http_url", http_url)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "repo_id", repo_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def branch(self) -> _builtins.str:
        """
        Indicates the branch.
        """
        return pulumi.get(self, "branch")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> _builtins.str:
        """
        Indicates the endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> _builtins.str:
        """
        Indicates the Git address of the Git repository.
        """
        return pulumi.get(self, "git_url")

    @_builtins.property
    @pulumi.getter(name="httpUrl")
    def http_url(self) -> _builtins.str:
        """
        Indicates the HTTP address of the Git repository.
        """
        return pulumi.get(self, "http_url")

    @_builtins.property
    @pulumi.getter
    def language(self) -> _builtins.str:
        """
        Indicates the language.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> _builtins.str:
        """
        Indicates the repository ID.
        """
        return pulumi.get(self, "repo_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the repository type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineModifyHistoriesHistoryResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.int,
                 creator_name: _builtins.str,
                 creator_nick_name: _builtins.str,
                 modify_type: _builtins.str):
        """
        :param _builtins.int create_time: Indicates the create time.
        :param _builtins.str creator_name: Indicates the creator name.
        :param _builtins.str creator_nick_name: Indicates the creator nick name.
        :param _builtins.str modify_type: Indicates the modify type.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_name", creator_name)
        pulumi.set(__self__, "creator_nick_name", creator_nick_name)
        pulumi.set(__self__, "modify_type", modify_type)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.int:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> _builtins.str:
        """
        Indicates the creator name.
        """
        return pulumi.get(self, "creator_name")

    @_builtins.property
    @pulumi.getter(name="creatorNickName")
    def creator_nick_name(self) -> _builtins.str:
        """
        Indicates the creator nick name.
        """
        return pulumi.get(self, "creator_nick_name")

    @_builtins.property
    @pulumi.getter(name="modifyType")
    def modify_type(self) -> _builtins.str:
        """
        Indicates the modify type.
        """
        return pulumi.get(self, "modify_type")


@pulumi.output_type
class GetPipelineModulesModuleResult(dict):
    def __init__(__self__, *,
                 base_url: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.int,
                 location: _builtins.str,
                 manifest_version: _builtins.str,
                 module_id: _builtins.str,
                 name: _builtins.str,
                 properties: _builtins.str,
                 properties_lists: Sequence[_builtins.str],
                 publisher: _builtins.str,
                 tags: Sequence[_builtins.str],
                 type: _builtins.str,
                 url_relative: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str base_url: Indicates the module base URL.
        :param _builtins.str description: Indicates the module description.
        :param _builtins.int id: Indicates the module ID.
        :param _builtins.str location: Indicates the endpoint.
        :param _builtins.str manifest_version: Indicates the summary version.
        :param _builtins.str module_id: Indicates the module ID.
        :param _builtins.str name: Specifies the module name.
        :param _builtins.str properties: Indicates the properties.
        :param Sequence[_builtins.str] properties_lists: Indicates the properties list.
        :param _builtins.str publisher: Indicates the publisher.
        :param Sequence[_builtins.str] tags: Specifies the tags.
        :param _builtins.str type: Indicates the module type.
        :param _builtins.str url_relative: Indicates the extension URL.
        :param _builtins.str version: Indicates the module version.
        """
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "manifest_version", manifest_version)
        pulumi.set(__self__, "module_id", module_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "properties_lists", properties_lists)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_relative", url_relative)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> _builtins.str:
        """
        Indicates the module base URL.
        """
        return pulumi.get(self, "base_url")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the module description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Indicates the module ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Indicates the endpoint.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="manifestVersion")
    def manifest_version(self) -> _builtins.str:
        """
        Indicates the summary version.
        """
        return pulumi.get(self, "manifest_version")

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> _builtins.str:
        """
        Indicates the module ID.
        """
        return pulumi.get(self, "module_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the module name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> _builtins.str:
        """
        Indicates the properties.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="propertiesLists")
    def properties_lists(self) -> Sequence[_builtins.str]:
        """
        Indicates the properties list.
        """
        return pulumi.get(self, "properties_lists")

    @_builtins.property
    @pulumi.getter
    def publisher(self) -> _builtins.str:
        """
        Indicates the publisher.
        """
        return pulumi.get(self, "publisher")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        """
        Specifies the tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the module type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="urlRelative")
    def url_relative(self) -> _builtins.str:
        """
        Indicates the extension URL.
        """
        return pulumi.get(self, "url_relative")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the module version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPipelineParameterGroupsGroupResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.int,
                 creator_id: _builtins.str,
                 creator_name: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 related_pipelines: Sequence['outputs.GetPipelineParameterGroupsGroupRelatedPipelineResult'],
                 update_time: _builtins.int,
                 updater_id: _builtins.str,
                 updater_name: _builtins.str,
                 variables: Sequence['outputs.GetPipelineParameterGroupsGroupVariableResult']):
        """
        :param _builtins.int create_time: Indicates the create time.
        :param _builtins.str creator_id: Indicates the creator ID.
        :param _builtins.str creator_name: Indicates the creator name.
        :param _builtins.str description: Indicates the parameter description.
        :param _builtins.str id: Indicates the pipeline ID.
        :param _builtins.str name: Specifies the parameter group name.
        :param Sequence['GetPipelineParameterGroupsGroupRelatedPipelineArgs'] related_pipelines: Indicates the associated pipeline.
               The related_pipelines structure is documented below.
        :param _builtins.int update_time: Indicates the update time.
        :param _builtins.str updater_id: Indicates the updater ID.
        :param _builtins.str updater_name: Indicates the updater name.
        :param Sequence['GetPipelineParameterGroupsGroupVariableArgs'] variables: Indicates the parameter list.
               The variables structure is documented below.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_id", creator_id)
        pulumi.set(__self__, "creator_name", creator_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "related_pipelines", related_pipelines)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "updater_id", updater_id)
        pulumi.set(__self__, "updater_name", updater_name)
        pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.int:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> _builtins.str:
        """
        Indicates the creator ID.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> _builtins.str:
        """
        Indicates the creator name.
        """
        return pulumi.get(self, "creator_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the parameter description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the pipeline ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter group name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="relatedPipelines")
    def related_pipelines(self) -> Sequence['outputs.GetPipelineParameterGroupsGroupRelatedPipelineResult']:
        """
        Indicates the associated pipeline.
        The related_pipelines structure is documented below.
        """
        return pulumi.get(self, "related_pipelines")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.int:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="updaterId")
    def updater_id(self) -> _builtins.str:
        """
        Indicates the updater ID.
        """
        return pulumi.get(self, "updater_id")

    @_builtins.property
    @pulumi.getter(name="updaterName")
    def updater_name(self) -> _builtins.str:
        """
        Indicates the updater name.
        """
        return pulumi.get(self, "updater_name")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetPipelineParameterGroupsGroupVariableResult']:
        """
        Indicates the parameter list.
        The variables structure is documented below.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetPipelineParameterGroupsGroupRelatedPipelineResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: Indicates the pipeline ID.
        :param _builtins.str name: Specifies the parameter group name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the pipeline ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPipelineParameterGroupsGroupVariableResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 is_secret: _builtins.bool,
                 name: _builtins.str,
                 sequence: _builtins.int,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str description: Indicates the parameter description.
        :param _builtins.bool is_secret: Indicates whether it is a private parameter.
        :param _builtins.str name: Specifies the parameter group name.
        :param _builtins.int sequence: Indicates the parameter sequence, starting from 1.
        :param _builtins.str type: Indicates the custom parameter type.
        :param _builtins.str value: Indicates the custom parameter default value.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_secret", is_secret)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the parameter description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> _builtins.bool:
        """
        Indicates whether it is a private parameter.
        """
        return pulumi.get(self, "is_secret")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter group name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> _builtins.int:
        """
        Indicates the parameter sequence, starting from 1.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the custom parameter type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the custom parameter default value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPipelinePluginMetricsMetricResult(dict):
    def __init__(__self__, *,
                 output_key: _builtins.str,
                 output_value: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str output_key: Indicates the output key.
        :param _builtins.str output_value: Indicates the output value.
        :param _builtins.str version: Specifies the version.
        """
        pulumi.set(__self__, "output_key", output_key)
        pulumi.set(__self__, "output_value", output_value)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="outputKey")
    def output_key(self) -> _builtins.str:
        """
        Indicates the output key.
        """
        return pulumi.get(self, "output_key")

    @_builtins.property
    @pulumi.getter(name="outputValue")
    def output_value(self) -> _builtins.str:
        """
        Indicates the output value.
        """
        return pulumi.get(self, "output_value")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPipelinePluginsPluginResult(dict):
    def __init__(__self__, *,
                 active: _builtins.int,
                 business_type: _builtins.str,
                 business_type_display_name: _builtins.str,
                 description: _builtins.str,
                 display_name: _builtins.str,
                 icon_url: _builtins.str,
                 maintainers: _builtins.str,
                 op_time: _builtins.str,
                 op_user: _builtins.str,
                 plugin_attribution: _builtins.str,
                 plugin_composition_type: _builtins.str,
                 plugin_name: _builtins.str,
                 refer_count: _builtins.int,
                 runtime_attribution: _builtins.str,
                 unique_id: _builtins.str,
                 usage_count: _builtins.int,
                 version: _builtins.str,
                 version_attribution: _builtins.str,
                 version_description: _builtins.str,
                 workspace_id: _builtins.str):
        """
        :param _builtins.int active: Indicates whether the plugin is activate or not.
        :param _builtins.str business_type: Specifies the service type.
               Valid values are **Build**, **Gate**, **Deploy**, **Test** and **Normal**.
        :param _builtins.str business_type_display_name: Indicates the display name of service type.
        :param _builtins.str description: Indicates the description.
        :param _builtins.str display_name: Indicates the display name.
        :param _builtins.str icon_url: Indicates the icon URL.
        :param _builtins.str maintainers: Indicates the maintenance engineer.
        :param _builtins.str op_time: Indicates the operation time.
        :param _builtins.str op_user: Indicates the operator.
        :param _builtins.str plugin_attribution: Specifies the extension attribute.
               Valid values are **official** and **custom**.
        :param _builtins.str plugin_composition_type: Indicates the combination type.
        :param _builtins.str plugin_name: Specifies the plugin name.
        :param _builtins.int refer_count: Indicates the number of references.
        :param _builtins.str runtime_attribution: Indicates the runtime attribution.
        :param _builtins.str unique_id: Indicates the unique ID.
        :param _builtins.int usage_count: Indicates the number of usages.
        :param _builtins.str version: Indicates the version.
        :param _builtins.str version_attribution: Indicates the version attribution.
        :param _builtins.str version_description: Indicates the version description.
        :param _builtins.str workspace_id: Indicates the tenant ID.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "business_type", business_type)
        pulumi.set(__self__, "business_type_display_name", business_type_display_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "icon_url", icon_url)
        pulumi.set(__self__, "maintainers", maintainers)
        pulumi.set(__self__, "op_time", op_time)
        pulumi.set(__self__, "op_user", op_user)
        pulumi.set(__self__, "plugin_attribution", plugin_attribution)
        pulumi.set(__self__, "plugin_composition_type", plugin_composition_type)
        pulumi.set(__self__, "plugin_name", plugin_name)
        pulumi.set(__self__, "refer_count", refer_count)
        pulumi.set(__self__, "runtime_attribution", runtime_attribution)
        pulumi.set(__self__, "unique_id", unique_id)
        pulumi.set(__self__, "usage_count", usage_count)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_attribution", version_attribution)
        pulumi.set(__self__, "version_description", version_description)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def active(self) -> _builtins.int:
        """
        Indicates whether the plugin is activate or not.
        """
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter(name="businessType")
    def business_type(self) -> _builtins.str:
        """
        Specifies the service type.
        Valid values are **Build**, **Gate**, **Deploy**, **Test** and **Normal**.
        """
        return pulumi.get(self, "business_type")

    @_builtins.property
    @pulumi.getter(name="businessTypeDisplayName")
    def business_type_display_name(self) -> _builtins.str:
        """
        Indicates the display name of service type.
        """
        return pulumi.get(self, "business_type_display_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Indicates the display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> _builtins.str:
        """
        Indicates the icon URL.
        """
        return pulumi.get(self, "icon_url")

    @_builtins.property
    @pulumi.getter
    def maintainers(self) -> _builtins.str:
        """
        Indicates the maintenance engineer.
        """
        return pulumi.get(self, "maintainers")

    @_builtins.property
    @pulumi.getter(name="opTime")
    def op_time(self) -> _builtins.str:
        """
        Indicates the operation time.
        """
        return pulumi.get(self, "op_time")

    @_builtins.property
    @pulumi.getter(name="opUser")
    def op_user(self) -> _builtins.str:
        """
        Indicates the operator.
        """
        return pulumi.get(self, "op_user")

    @_builtins.property
    @pulumi.getter(name="pluginAttribution")
    def plugin_attribution(self) -> _builtins.str:
        """
        Specifies the extension attribute.
        Valid values are **official** and **custom**.
        """
        return pulumi.get(self, "plugin_attribution")

    @_builtins.property
    @pulumi.getter(name="pluginCompositionType")
    def plugin_composition_type(self) -> _builtins.str:
        """
        Indicates the combination type.
        """
        return pulumi.get(self, "plugin_composition_type")

    @_builtins.property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> _builtins.str:
        """
        Specifies the plugin name.
        """
        return pulumi.get(self, "plugin_name")

    @_builtins.property
    @pulumi.getter(name="referCount")
    def refer_count(self) -> _builtins.int:
        """
        Indicates the number of references.
        """
        return pulumi.get(self, "refer_count")

    @_builtins.property
    @pulumi.getter(name="runtimeAttribution")
    def runtime_attribution(self) -> _builtins.str:
        """
        Indicates the runtime attribution.
        """
        return pulumi.get(self, "runtime_attribution")

    @_builtins.property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> _builtins.str:
        """
        Indicates the unique ID.
        """
        return pulumi.get(self, "unique_id")

    @_builtins.property
    @pulumi.getter(name="usageCount")
    def usage_count(self) -> _builtins.int:
        """
        Indicates the number of usages.
        """
        return pulumi.get(self, "usage_count")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the version.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionAttribution")
    def version_attribution(self) -> _builtins.str:
        """
        Indicates the version attribution.
        """
        return pulumi.get(self, "version_attribution")

    @_builtins.property
    @pulumi.getter(name="versionDescription")
    def version_description(self) -> _builtins.str:
        """
        Indicates the version description.
        """
        return pulumi.get(self, "version_description")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        Indicates the tenant ID.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetPipelinePublishersPublisherResult(dict):
    def __init__(__self__, *,
                 auth_status: _builtins.str,
                 description: _builtins.str,
                 en_name: _builtins.str,
                 id: _builtins.str,
                 last_update_time: _builtins.str,
                 last_update_user_id: _builtins.str,
                 last_update_user_name: _builtins.str,
                 logo_url: _builtins.str,
                 name: _builtins.str,
                 source_url: _builtins.str,
                 support_url: _builtins.str,
                 user_id: _builtins.str,
                 website: _builtins.str):
        """
        :param _builtins.str auth_status: Indicates the authorization status.
        :param _builtins.str description: Indicates the description.
        :param _builtins.str en_name: Indicates the publisher English name.
        :param _builtins.str id: Indicates the publisher ID.
        :param _builtins.str last_update_time: Indicates the update time.
        :param _builtins.str last_update_user_id: Indicates the updater ID.
        :param _builtins.str last_update_user_name: Indicates the updater name.
        :param _builtins.str logo_url: Indicates the logo URL.
        :param _builtins.str name: Specifies the publisher name.
        :param _builtins.str source_url: Indicates the source URL.
        :param _builtins.str support_url: Indicates the support URL.
        :param _builtins.str user_id: Indicates the user ID.
        :param _builtins.str website: Indicates the website URL.
        """
        pulumi.set(__self__, "auth_status", auth_status)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "en_name", en_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "last_update_user_id", last_update_user_id)
        pulumi.set(__self__, "last_update_user_name", last_update_user_name)
        pulumi.set(__self__, "logo_url", logo_url)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_url", source_url)
        pulumi.set(__self__, "support_url", support_url)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "website", website)

    @_builtins.property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> _builtins.str:
        """
        Indicates the authorization status.
        """
        return pulumi.get(self, "auth_status")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enName")
    def en_name(self) -> _builtins.str:
        """
        Indicates the publisher English name.
        """
        return pulumi.get(self, "en_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the publisher ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> _builtins.str:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "last_update_time")

    @_builtins.property
    @pulumi.getter(name="lastUpdateUserId")
    def last_update_user_id(self) -> _builtins.str:
        """
        Indicates the updater ID.
        """
        return pulumi.get(self, "last_update_user_id")

    @_builtins.property
    @pulumi.getter(name="lastUpdateUserName")
    def last_update_user_name(self) -> _builtins.str:
        """
        Indicates the updater name.
        """
        return pulumi.get(self, "last_update_user_name")

    @_builtins.property
    @pulumi.getter(name="logoUrl")
    def logo_url(self) -> _builtins.str:
        """
        Indicates the logo URL.
        """
        return pulumi.get(self, "logo_url")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the publisher name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> _builtins.str:
        """
        Indicates the source URL.
        """
        return pulumi.get(self, "source_url")

    @_builtins.property
    @pulumi.getter(name="supportUrl")
    def support_url(self) -> _builtins.str:
        """
        Indicates the support URL.
        """
        return pulumi.get(self, "support_url")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        Indicates the user ID.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter
    def website(self) -> _builtins.str:
        """
        Indicates the website URL.
        """
        return pulumi.get(self, "website")


@pulumi.output_type
class GetPipelineQueueingRecordsRecordResult(dict):
    def __init__(__self__, *,
                 creator_id: _builtins.str,
                 creator_name: _builtins.str,
                 enqueue_time: _builtins.int,
                 id: _builtins.int,
                 pipeline_run_id: _builtins.str,
                 status: _builtins.str,
                 trigger_type: _builtins.str):
        """
        :param _builtins.str creator_id: Indicates the creator ID.
        :param _builtins.str creator_name: Indicates the creator name.
        :param _builtins.int enqueue_time: Indicates the enqueuing time.
        :param _builtins.int id: Indicates the record ID.
        :param _builtins.str pipeline_run_id: Indicates the pipeline run ID.
        :param _builtins.str status: Indicates the status.
        :param _builtins.str trigger_type: Indicates the trigger type.
        """
        pulumi.set(__self__, "creator_id", creator_id)
        pulumi.set(__self__, "creator_name", creator_name)
        pulumi.set(__self__, "enqueue_time", enqueue_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "pipeline_run_id", pipeline_run_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> _builtins.str:
        """
        Indicates the creator ID.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> _builtins.str:
        """
        Indicates the creator name.
        """
        return pulumi.get(self, "creator_name")

    @_builtins.property
    @pulumi.getter(name="enqueueTime")
    def enqueue_time(self) -> _builtins.int:
        """
        Indicates the enqueuing time.
        """
        return pulumi.get(self, "enqueue_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Indicates the record ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="pipelineRunId")
    def pipeline_run_id(self) -> _builtins.str:
        """
        Indicates the pipeline run ID.
        """
        return pulumi.get(self, "pipeline_run_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Indicates the trigger type.
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetPipelineRulesRuleResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 operate_time: _builtins.int,
                 operator: _builtins.str,
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str id: Indicates the rule ID.
        :param _builtins.str name: Specifies the rule name.
        :param _builtins.int operate_time: Indicates the operate time.
        :param _builtins.str operator: Indicates the operator.
        :param _builtins.str type: Specifies the rule type.
        :param _builtins.str version: Indicates the rule version.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operate_time", operate_time)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the rule ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the rule name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operateTime")
    def operate_time(self) -> _builtins.int:
        """
        Indicates the operate time.
        """
        return pulumi.get(self, "operate_time")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        Indicates the operator.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the rule type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the rule version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPipelineRunDetailArtifactResult(dict):
    def __init__(__self__, *,
                 download_url: _builtins.str,
                 name: _builtins.str,
                 package_type: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str download_url: Indicates the artifact download address.
        :param _builtins.str name: Indicates the step name.
        :param _builtins.str package_type: Indicates the artifact type.
        :param _builtins.str version: Indicates the artifact version number.
        """
        pulumi.set(__self__, "download_url", download_url)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_type", package_type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="downloadUrl")
    def download_url(self) -> _builtins.str:
        """
        Indicates the artifact download address.
        """
        return pulumi.get(self, "download_url")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the step name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="packageType")
    def package_type(self) -> _builtins.str:
        """
        Indicates the artifact type.
        """
        return pulumi.get(self, "package_type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the artifact version number.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPipelineRunDetailSourceResult(dict):
    def __init__(__self__, *,
                 params: Sequence['outputs.GetPipelineRunDetailSourceParamResult'],
                 type: _builtins.str):
        """
        :param Sequence['GetPipelineRunDetailSourceParamArgs'] params: Indicates the source parameters.
               The params structure is documented below.
        :param _builtins.str type: Indicates the source type.
        """
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Sequence['outputs.GetPipelineRunDetailSourceParamResult']:
        """
        Indicates the source parameters.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the source type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineRunDetailSourceParamResult(dict):
    def __init__(__self__, *,
                 alias: _builtins.str,
                 build_params: Sequence['outputs.GetPipelineRunDetailSourceParamBuildParamResult'],
                 codehub_id: _builtins.str,
                 default_branch: _builtins.str,
                 endpoint_id: _builtins.str,
                 git_type: _builtins.str,
                 git_url: _builtins.str,
                 repo_name: _builtins.str,
                 ssh_git_url: _builtins.str,
                 web_url: _builtins.str):
        """
        :param _builtins.str alias: Indicates the code repository alias.
        :param Sequence['GetPipelineRunDetailSourceParamBuildParamArgs'] build_params: Indicates the build parameters.
               The build_params structure is documented below.
        :param _builtins.str codehub_id: Indicates the CodeArts Repo code repository ID.
        :param _builtins.str default_branch: Indicates the default branch.
        :param _builtins.str endpoint_id: Indicates the ID of the code source endpoint.
        :param _builtins.str git_type: Indicates the code repository type.
        :param _builtins.str git_url: Indicates the HTTPS address of the Git repository.
        :param _builtins.str repo_name: Indicates the code repository name.
        :param _builtins.str ssh_git_url: Indicates the SSH address of the Git repository.
        :param _builtins.str web_url: Indicates the address of the code repository page.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "build_params", build_params)
        pulumi.set(__self__, "codehub_id", codehub_id)
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "git_type", git_type)
        pulumi.set(__self__, "git_url", git_url)
        pulumi.set(__self__, "repo_name", repo_name)
        pulumi.set(__self__, "ssh_git_url", ssh_git_url)
        pulumi.set(__self__, "web_url", web_url)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> _builtins.str:
        """
        Indicates the code repository alias.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="buildParams")
    def build_params(self) -> Sequence['outputs.GetPipelineRunDetailSourceParamBuildParamResult']:
        """
        Indicates the build parameters.
        The build_params structure is documented below.
        """
        return pulumi.get(self, "build_params")

    @_builtins.property
    @pulumi.getter(name="codehubId")
    def codehub_id(self) -> _builtins.str:
        """
        Indicates the CodeArts Repo code repository ID.
        """
        return pulumi.get(self, "codehub_id")

    @_builtins.property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> _builtins.str:
        """
        Indicates the default branch.
        """
        return pulumi.get(self, "default_branch")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> _builtins.str:
        """
        Indicates the ID of the code source endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter(name="gitType")
    def git_type(self) -> _builtins.str:
        """
        Indicates the code repository type.
        """
        return pulumi.get(self, "git_type")

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> _builtins.str:
        """
        Indicates the HTTPS address of the Git repository.
        """
        return pulumi.get(self, "git_url")

    @_builtins.property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> _builtins.str:
        """
        Indicates the code repository name.
        """
        return pulumi.get(self, "repo_name")

    @_builtins.property
    @pulumi.getter(name="sshGitUrl")
    def ssh_git_url(self) -> _builtins.str:
        """
        Indicates the SSH address of the Git repository.
        """
        return pulumi.get(self, "ssh_git_url")

    @_builtins.property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> _builtins.str:
        """
        Indicates the address of the code repository page.
        """
        return pulumi.get(self, "web_url")


@pulumi.output_type
class GetPipelineRunDetailSourceParamBuildParamResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 build_type: _builtins.str,
                 codehub_id: _builtins.str,
                 commit_id: _builtins.str,
                 event_type: _builtins.str,
                 merge_id: _builtins.str,
                 message: _builtins.str,
                 source_branch: _builtins.str,
                 source_codehub_http_url: _builtins.str,
                 source_codehub_id: _builtins.str,
                 source_codehub_url: _builtins.str,
                 tag: _builtins.str,
                 target_branch: _builtins.str):
        """
        :param _builtins.str action: Indicates the action.
        :param _builtins.str build_type: Indicates the code repository trigger type.
        :param _builtins.str codehub_id: Indicates the CodeArts Repo code repository ID.
        :param _builtins.str commit_id: Indicates the commit ID.
        :param _builtins.str event_type: Indicates the event type.
        :param _builtins.str merge_id: Indicates the merge ID.
        :param _builtins.str message: Indicates the error message.
        :param _builtins.str source_branch: Indicates the source branch.
        :param _builtins.str source_codehub_http_url: Indicates the HTTP address of the source Repo code repository.
        :param _builtins.str source_codehub_id: Indicates the ID of the source Repo code repository.
        :param _builtins.str source_codehub_url: Indicates the address of the source Repo code repository.
        :param _builtins.str tag: Indicates the tag that triggers the pipeline execution.
        :param _builtins.str target_branch: Indicates the branch that triggers the pipeline execution.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "build_type", build_type)
        pulumi.set(__self__, "codehub_id", codehub_id)
        pulumi.set(__self__, "commit_id", commit_id)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "merge_id", merge_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "source_branch", source_branch)
        pulumi.set(__self__, "source_codehub_http_url", source_codehub_http_url)
        pulumi.set(__self__, "source_codehub_id", source_codehub_id)
        pulumi.set(__self__, "source_codehub_url", source_codehub_url)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "target_branch", target_branch)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        Indicates the action.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="buildType")
    def build_type(self) -> _builtins.str:
        """
        Indicates the code repository trigger type.
        """
        return pulumi.get(self, "build_type")

    @_builtins.property
    @pulumi.getter(name="codehubId")
    def codehub_id(self) -> _builtins.str:
        """
        Indicates the CodeArts Repo code repository ID.
        """
        return pulumi.get(self, "codehub_id")

    @_builtins.property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> _builtins.str:
        """
        Indicates the commit ID.
        """
        return pulumi.get(self, "commit_id")

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> _builtins.str:
        """
        Indicates the event type.
        """
        return pulumi.get(self, "event_type")

    @_builtins.property
    @pulumi.getter(name="mergeId")
    def merge_id(self) -> _builtins.str:
        """
        Indicates the merge ID.
        """
        return pulumi.get(self, "merge_id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Indicates the error message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="sourceBranch")
    def source_branch(self) -> _builtins.str:
        """
        Indicates the source branch.
        """
        return pulumi.get(self, "source_branch")

    @_builtins.property
    @pulumi.getter(name="sourceCodehubHttpUrl")
    def source_codehub_http_url(self) -> _builtins.str:
        """
        Indicates the HTTP address of the source Repo code repository.
        """
        return pulumi.get(self, "source_codehub_http_url")

    @_builtins.property
    @pulumi.getter(name="sourceCodehubId")
    def source_codehub_id(self) -> _builtins.str:
        """
        Indicates the ID of the source Repo code repository.
        """
        return pulumi.get(self, "source_codehub_id")

    @_builtins.property
    @pulumi.getter(name="sourceCodehubUrl")
    def source_codehub_url(self) -> _builtins.str:
        """
        Indicates the address of the source Repo code repository.
        """
        return pulumi.get(self, "source_codehub_url")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> _builtins.str:
        """
        Indicates the tag that triggers the pipeline execution.
        """
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter(name="targetBranch")
    def target_branch(self) -> _builtins.str:
        """
        Indicates the branch that triggers the pipeline execution.
        """
        return pulumi.get(self, "target_branch")


@pulumi.output_type
class GetPipelineRunDetailStageResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 condition: _builtins.str,
                 depends_ons: Sequence[_builtins.str],
                 end_time: _builtins.int,
                 id: _builtins.str,
                 identifier: _builtins.str,
                 is_select: _builtins.bool,
                 jobs: Sequence['outputs.GetPipelineRunDetailStageJobResult'],
                 name: _builtins.str,
                 parallel: _builtins.str,
                 posts: Sequence['outputs.GetPipelineRunDetailStagePostResult'],
                 pres: Sequence['outputs.GetPipelineRunDetailStagePreResult'],
                 run_always: _builtins.bool,
                 sequence: _builtins.int,
                 start_time: _builtins.int,
                 status: _builtins.str):
        """
        :param _builtins.str category: Indicates the job type.
        :param _builtins.str condition: Indicates the running conditions.
        :param Sequence[_builtins.str] depends_ons: Indicates the dependency.
        :param _builtins.int end_time: Indicates the end time.
        :param _builtins.str id: Indicates the step ID.
        :param _builtins.str identifier: Indicates the unique identifier.
        :param _builtins.bool is_select: Indicates whether the parameter is selected.
        :param Sequence['GetPipelineRunDetailStageJobArgs'] jobs: Indicates the job running information.
               The jobs structure is documented below.
        :param _builtins.str name: Indicates the step name.
        :param _builtins.str parallel: Indicates whether to execute jobs in parallel.
        :param Sequence['GetPipelineRunDetailStagePostArgs'] posts: Indicates the stage exit.
               The post structure is documented below.
        :param Sequence['GetPipelineRunDetailStagePreArgs'] pres: Indicates the stage entry.
               The pre structure is documented below.
        :param _builtins.bool run_always: Indicates whether to always run.
        :param _builtins.int sequence: Indicates the serial number.
        :param _builtins.int start_time: Indicates the start time.
        :param _builtins.str status: Indicates the step status.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "depends_ons", depends_ons)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "is_select", is_select)
        pulumi.set(__self__, "jobs", jobs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parallel", parallel)
        pulumi.set(__self__, "posts", posts)
        pulumi.set(__self__, "pres", pres)
        pulumi.set(__self__, "run_always", run_always)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Indicates the job type.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def condition(self) -> _builtins.str:
        """
        Indicates the running conditions.
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Sequence[_builtins.str]:
        """
        Indicates the dependency.
        """
        return pulumi.get(self, "depends_ons")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        Indicates the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the step ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> _builtins.str:
        """
        Indicates the unique identifier.
        """
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="isSelect")
    def is_select(self) -> _builtins.bool:
        """
        Indicates whether the parameter is selected.
        """
        return pulumi.get(self, "is_select")

    @_builtins.property
    @pulumi.getter
    def jobs(self) -> Sequence['outputs.GetPipelineRunDetailStageJobResult']:
        """
        Indicates the job running information.
        The jobs structure is documented below.
        """
        return pulumi.get(self, "jobs")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the step name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parallel(self) -> _builtins.str:
        """
        Indicates whether to execute jobs in parallel.
        """
        return pulumi.get(self, "parallel")

    @_builtins.property
    @pulumi.getter
    def posts(self) -> Sequence['outputs.GetPipelineRunDetailStagePostResult']:
        """
        Indicates the stage exit.
        The post structure is documented below.
        """
        return pulumi.get(self, "posts")

    @_builtins.property
    @pulumi.getter
    def pres(self) -> Sequence['outputs.GetPipelineRunDetailStagePreResult']:
        """
        Indicates the stage entry.
        The pre structure is documented below.
        """
        return pulumi.get(self, "pres")

    @_builtins.property
    @pulumi.getter(name="runAlways")
    def run_always(self) -> _builtins.bool:
        """
        Indicates whether to always run.
        """
        return pulumi.get(self, "run_always")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> _builtins.int:
        """
        Indicates the serial number.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Indicates the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the step status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetPipelineRunDetailStageJobResult(dict):
    def __init__(__self__, *,
                 async_: _builtins.bool,
                 category: _builtins.str,
                 condition: _builtins.str,
                 depends_ons: Sequence[_builtins.str],
                 end_time: _builtins.int,
                 exec_id: _builtins.str,
                 id: _builtins.str,
                 identifier: _builtins.str,
                 is_select: _builtins.bool,
                 last_dispatch_id: _builtins.str,
                 message: _builtins.str,
                 name: _builtins.str,
                 resource: _builtins.str,
                 sequence: _builtins.int,
                 start_time: _builtins.int,
                 status: _builtins.str,
                 steps: Sequence['outputs.GetPipelineRunDetailStageJobStepResult'],
                 timeout: _builtins.str):
        """
        :param _builtins.bool async_: Indicates whether it is asynchronous.
        :param _builtins.str category: Indicates the job type.
        :param _builtins.str condition: Indicates the running conditions.
        :param Sequence[_builtins.str] depends_ons: Indicates the dependency.
        :param _builtins.int end_time: Indicates the end time.
        :param _builtins.str exec_id: Indicates the job execution ID.
        :param _builtins.str id: Indicates the step ID.
        :param _builtins.str identifier: Indicates the unique identifier.
        :param _builtins.bool is_select: Indicates whether the parameter is selected.
        :param _builtins.str last_dispatch_id: Indicates the ID of the job delivered last time.
        :param _builtins.str message: Indicates the error message.
        :param _builtins.str name: Indicates the step name.
        :param _builtins.str resource: Indicates the execution resources.
        :param _builtins.int sequence: Indicates the serial number.
        :param _builtins.int start_time: Indicates the start time.
        :param _builtins.str status: Indicates the step status.
        :param Sequence['GetPipelineRunDetailStageJobStepArgs'] steps: Indicates the step running information.
               The steps structure is documented below.
        :param _builtins.str timeout: Indicates the job timeout settings.
        """
        pulumi.set(__self__, "async_", async_)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "depends_ons", depends_ons)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "exec_id", exec_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "is_select", is_select)
        pulumi.set(__self__, "last_dispatch_id", last_dispatch_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter(name="async")
    def async_(self) -> _builtins.bool:
        """
        Indicates whether it is asynchronous.
        """
        return pulumi.get(self, "async_")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Indicates the job type.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def condition(self) -> _builtins.str:
        """
        Indicates the running conditions.
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Sequence[_builtins.str]:
        """
        Indicates the dependency.
        """
        return pulumi.get(self, "depends_ons")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        Indicates the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="execId")
    def exec_id(self) -> _builtins.str:
        """
        Indicates the job execution ID.
        """
        return pulumi.get(self, "exec_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the step ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> _builtins.str:
        """
        Indicates the unique identifier.
        """
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="isSelect")
    def is_select(self) -> _builtins.bool:
        """
        Indicates whether the parameter is selected.
        """
        return pulumi.get(self, "is_select")

    @_builtins.property
    @pulumi.getter(name="lastDispatchId")
    def last_dispatch_id(self) -> _builtins.str:
        """
        Indicates the ID of the job delivered last time.
        """
        return pulumi.get(self, "last_dispatch_id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Indicates the error message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the step name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.str:
        """
        Indicates the execution resources.
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> _builtins.int:
        """
        Indicates the serial number.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Indicates the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the step status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetPipelineRunDetailStageJobStepResult']:
        """
        Indicates the step running information.
        The steps structure is documented below.
        """
        return pulumi.get(self, "steps")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.str:
        """
        Indicates the job timeout settings.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetPipelineRunDetailStageJobStepResult(dict):
    def __init__(__self__, *,
                 business_type: _builtins.str,
                 end_time: _builtins.int,
                 endpoint_ids: Sequence[_builtins.str],
                 id: _builtins.str,
                 identifier: _builtins.str,
                 inputs: Sequence['outputs.GetPipelineRunDetailStageJobStepInputResult'],
                 last_dispatch_id: _builtins.str,
                 message: _builtins.str,
                 multi_step_editable: _builtins.int,
                 name: _builtins.str,
                 official_task_version: _builtins.str,
                 sequence: _builtins.int,
                 start_time: _builtins.int,
                 status: _builtins.str,
                 task: _builtins.str):
        """
        :param _builtins.str business_type: Indicates the extension type.
        :param _builtins.int end_time: Indicates the end time.
        :param Sequence[_builtins.str] endpoint_ids: Indicates the step name.
        :param _builtins.str id: Indicates the step ID.
        :param _builtins.str identifier: Indicates the unique identifier.
        :param Sequence['GetPipelineRunDetailStageJobStepInputArgs'] inputs: Indicates the step running information.
               The inputs structure is documented below.
        :param _builtins.str last_dispatch_id: Indicates the ID of the job delivered last time.
        :param _builtins.str message: Indicates the error message.
        :param _builtins.int multi_step_editable: Indicates whether the parameter is editable.
        :param _builtins.str name: Indicates the step name.
        :param _builtins.str official_task_version: Indicates the official extension version.
        :param _builtins.int sequence: Indicates the serial number.
        :param _builtins.int start_time: Indicates the start time.
        :param _builtins.str status: Indicates the step status.
        :param _builtins.str task: Indicates the step extension name.
        """
        pulumi.set(__self__, "business_type", business_type)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "endpoint_ids", endpoint_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "inputs", inputs)
        pulumi.set(__self__, "last_dispatch_id", last_dispatch_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "multi_step_editable", multi_step_editable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "official_task_version", official_task_version)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "task", task)

    @_builtins.property
    @pulumi.getter(name="businessType")
    def business_type(self) -> _builtins.str:
        """
        Indicates the extension type.
        """
        return pulumi.get(self, "business_type")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        Indicates the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="endpointIds")
    def endpoint_ids(self) -> Sequence[_builtins.str]:
        """
        Indicates the step name.
        """
        return pulumi.get(self, "endpoint_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the step ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> _builtins.str:
        """
        Indicates the unique identifier.
        """
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter
    def inputs(self) -> Sequence['outputs.GetPipelineRunDetailStageJobStepInputResult']:
        """
        Indicates the step running information.
        The inputs structure is documented below.
        """
        return pulumi.get(self, "inputs")

    @_builtins.property
    @pulumi.getter(name="lastDispatchId")
    def last_dispatch_id(self) -> _builtins.str:
        """
        Indicates the ID of the job delivered last time.
        """
        return pulumi.get(self, "last_dispatch_id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Indicates the error message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="multiStepEditable")
    def multi_step_editable(self) -> _builtins.int:
        """
        Indicates whether the parameter is editable.
        """
        return pulumi.get(self, "multi_step_editable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the step name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="officialTaskVersion")
    def official_task_version(self) -> _builtins.str:
        """
        Indicates the official extension version.
        """
        return pulumi.get(self, "official_task_version")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> _builtins.int:
        """
        Indicates the serial number.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Indicates the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the step status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def task(self) -> _builtins.str:
        """
        Indicates the step extension name.
        """
        return pulumi.get(self, "task")


@pulumi.output_type
class GetPipelineRunDetailStageJobStepInputResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Indicates the parameter name.
        :param _builtins.str value: Indicates the parameter value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPipelineRunDetailStagePostResult(dict):
    def __init__(__self__, *,
                 business_type: _builtins.str,
                 end_time: _builtins.int,
                 endpoint_ids: Sequence[_builtins.str],
                 id: _builtins.str,
                 identifier: _builtins.str,
                 inputs: Sequence['outputs.GetPipelineRunDetailStagePostInputResult'],
                 last_dispatch_id: _builtins.str,
                 message: _builtins.str,
                 multi_step_editable: _builtins.int,
                 name: _builtins.str,
                 official_task_version: _builtins.str,
                 sequence: _builtins.int,
                 start_time: _builtins.int,
                 status: _builtins.str,
                 task: _builtins.str):
        """
        :param _builtins.str business_type: Indicates the extension type.
        :param _builtins.int end_time: Indicates the end time.
        :param Sequence[_builtins.str] endpoint_ids: Indicates the step name.
        :param _builtins.str id: Indicates the step ID.
        :param _builtins.str identifier: Indicates the unique identifier.
        :param Sequence['GetPipelineRunDetailStagePostInputArgs'] inputs: Indicates the step running information.
               The inputs structure is documented below.
        :param _builtins.str last_dispatch_id: Indicates the ID of the job delivered last time.
        :param _builtins.str message: Indicates the error message.
        :param _builtins.int multi_step_editable: Indicates whether the parameter is editable.
        :param _builtins.str name: Indicates the step name.
        :param _builtins.str official_task_version: Indicates the official extension version.
        :param _builtins.int sequence: Indicates the serial number.
        :param _builtins.int start_time: Indicates the start time.
        :param _builtins.str status: Indicates the step status.
        :param _builtins.str task: Indicates the step extension name.
        """
        pulumi.set(__self__, "business_type", business_type)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "endpoint_ids", endpoint_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "inputs", inputs)
        pulumi.set(__self__, "last_dispatch_id", last_dispatch_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "multi_step_editable", multi_step_editable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "official_task_version", official_task_version)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "task", task)

    @_builtins.property
    @pulumi.getter(name="businessType")
    def business_type(self) -> _builtins.str:
        """
        Indicates the extension type.
        """
        return pulumi.get(self, "business_type")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        Indicates the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="endpointIds")
    def endpoint_ids(self) -> Sequence[_builtins.str]:
        """
        Indicates the step name.
        """
        return pulumi.get(self, "endpoint_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the step ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> _builtins.str:
        """
        Indicates the unique identifier.
        """
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter
    def inputs(self) -> Sequence['outputs.GetPipelineRunDetailStagePostInputResult']:
        """
        Indicates the step running information.
        The inputs structure is documented below.
        """
        return pulumi.get(self, "inputs")

    @_builtins.property
    @pulumi.getter(name="lastDispatchId")
    def last_dispatch_id(self) -> _builtins.str:
        """
        Indicates the ID of the job delivered last time.
        """
        return pulumi.get(self, "last_dispatch_id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Indicates the error message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="multiStepEditable")
    def multi_step_editable(self) -> _builtins.int:
        """
        Indicates whether the parameter is editable.
        """
        return pulumi.get(self, "multi_step_editable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the step name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="officialTaskVersion")
    def official_task_version(self) -> _builtins.str:
        """
        Indicates the official extension version.
        """
        return pulumi.get(self, "official_task_version")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> _builtins.int:
        """
        Indicates the serial number.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Indicates the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the step status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def task(self) -> _builtins.str:
        """
        Indicates the step extension name.
        """
        return pulumi.get(self, "task")


@pulumi.output_type
class GetPipelineRunDetailStagePostInputResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Indicates the parameter name.
        :param _builtins.str value: Indicates the parameter value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPipelineRunDetailStagePreResult(dict):
    def __init__(__self__, *,
                 business_type: _builtins.str,
                 end_time: _builtins.int,
                 endpoint_ids: Sequence[_builtins.str],
                 id: _builtins.str,
                 identifier: _builtins.str,
                 inputs: Sequence['outputs.GetPipelineRunDetailStagePreInputResult'],
                 last_dispatch_id: _builtins.str,
                 message: _builtins.str,
                 multi_step_editable: _builtins.int,
                 name: _builtins.str,
                 official_task_version: _builtins.str,
                 sequence: _builtins.int,
                 start_time: _builtins.int,
                 status: _builtins.str,
                 task: _builtins.str):
        """
        :param _builtins.str business_type: Indicates the extension type.
        :param _builtins.int end_time: Indicates the end time.
        :param Sequence[_builtins.str] endpoint_ids: Indicates the step name.
        :param _builtins.str id: Indicates the step ID.
        :param _builtins.str identifier: Indicates the unique identifier.
        :param Sequence['GetPipelineRunDetailStagePreInputArgs'] inputs: Indicates the step running information.
               The inputs structure is documented below.
        :param _builtins.str last_dispatch_id: Indicates the ID of the job delivered last time.
        :param _builtins.str message: Indicates the error message.
        :param _builtins.int multi_step_editable: Indicates whether the parameter is editable.
        :param _builtins.str name: Indicates the step name.
        :param _builtins.str official_task_version: Indicates the official extension version.
        :param _builtins.int sequence: Indicates the serial number.
        :param _builtins.int start_time: Indicates the start time.
        :param _builtins.str status: Indicates the step status.
        :param _builtins.str task: Indicates the step extension name.
        """
        pulumi.set(__self__, "business_type", business_type)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "endpoint_ids", endpoint_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "inputs", inputs)
        pulumi.set(__self__, "last_dispatch_id", last_dispatch_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "multi_step_editable", multi_step_editable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "official_task_version", official_task_version)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "task", task)

    @_builtins.property
    @pulumi.getter(name="businessType")
    def business_type(self) -> _builtins.str:
        """
        Indicates the extension type.
        """
        return pulumi.get(self, "business_type")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        Indicates the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="endpointIds")
    def endpoint_ids(self) -> Sequence[_builtins.str]:
        """
        Indicates the step name.
        """
        return pulumi.get(self, "endpoint_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the step ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> _builtins.str:
        """
        Indicates the unique identifier.
        """
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter
    def inputs(self) -> Sequence['outputs.GetPipelineRunDetailStagePreInputResult']:
        """
        Indicates the step running information.
        The inputs structure is documented below.
        """
        return pulumi.get(self, "inputs")

    @_builtins.property
    @pulumi.getter(name="lastDispatchId")
    def last_dispatch_id(self) -> _builtins.str:
        """
        Indicates the ID of the job delivered last time.
        """
        return pulumi.get(self, "last_dispatch_id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Indicates the error message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="multiStepEditable")
    def multi_step_editable(self) -> _builtins.int:
        """
        Indicates whether the parameter is editable.
        """
        return pulumi.get(self, "multi_step_editable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the step name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="officialTaskVersion")
    def official_task_version(self) -> _builtins.str:
        """
        Indicates the official extension version.
        """
        return pulumi.get(self, "official_task_version")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> _builtins.int:
        """
        Indicates the serial number.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Indicates the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the step status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def task(self) -> _builtins.str:
        """
        Indicates the step extension name.
        """
        return pulumi.get(self, "task")


@pulumi.output_type
class GetPipelineRunDetailStagePreInputResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Indicates the parameter name.
        :param _builtins.str value: Indicates the parameter value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPipelineRunRecordsRecordResult(dict):
    def __init__(__self__, *,
                 artifact_params: Sequence['outputs.GetPipelineRunRecordsRecordArtifactParamResult'],
                 build_params: Sequence['outputs.GetPipelineRunRecordsRecordBuildParamResult'],
                 detail_url: _builtins.str,
                 end_time: _builtins.int,
                 executor_id: _builtins.str,
                 executor_name: _builtins.str,
                 modify_url: _builtins.str,
                 pipeline_run_id: _builtins.str,
                 run_number: _builtins.int,
                 stage_status_lists: Sequence['outputs.GetPipelineRunRecordsRecordStageStatusListResult'],
                 start_time: _builtins.int,
                 status: _builtins.str,
                 trigger_type: _builtins.str):
        """
        :param Sequence['GetPipelineRunRecordsRecordArtifactParamArgs'] artifact_params: Indicates the artifacts after running a pipeline.
               The artifact_params structure is documented below.
        :param Sequence['GetPipelineRunRecordsRecordBuildParamArgs'] build_params: Indicates the build parameters.
               The build_params structure is documented below.
        :param _builtins.str detail_url: Indicates the address of the details page.
        :param _builtins.int end_time: Specifies the end time.
        :param _builtins.str executor_id: Indicates the executor ID.
        :param _builtins.str executor_name: Indicates the executor name.
        :param _builtins.str modify_url: Indicates the address of the editing page.
        :param _builtins.str pipeline_run_id: Indicates the pipeline run ID.
        :param _builtins.int run_number: Indicates the pipeline running sequence number.
        :param Sequence['GetPipelineRunRecordsRecordStageStatusListArgs'] stage_status_lists: Indicates the stage information list.
               The stage_status_list structure is documented below.
        :param _builtins.int start_time: Specifies the start time.
        :param _builtins.str status: Specifies the list of status.
               Value can be as follows:
               + **COMPLETED**: completed
               + **RUNNING**: running
               + **FAILED**: failed
               + **CANCELED**: canceled
               + **PAUSED**: paused
               + **SUSPEND**: suspended
               + **IGNORED**: ignored
        :param _builtins.str trigger_type: Indicates the trigger type.
        """
        pulumi.set(__self__, "artifact_params", artifact_params)
        pulumi.set(__self__, "build_params", build_params)
        pulumi.set(__self__, "detail_url", detail_url)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "executor_id", executor_id)
        pulumi.set(__self__, "executor_name", executor_name)
        pulumi.set(__self__, "modify_url", modify_url)
        pulumi.set(__self__, "pipeline_run_id", pipeline_run_id)
        pulumi.set(__self__, "run_number", run_number)
        pulumi.set(__self__, "stage_status_lists", stage_status_lists)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="artifactParams")
    def artifact_params(self) -> Sequence['outputs.GetPipelineRunRecordsRecordArtifactParamResult']:
        """
        Indicates the artifacts after running a pipeline.
        The artifact_params structure is documented below.
        """
        return pulumi.get(self, "artifact_params")

    @_builtins.property
    @pulumi.getter(name="buildParams")
    def build_params(self) -> Sequence['outputs.GetPipelineRunRecordsRecordBuildParamResult']:
        """
        Indicates the build parameters.
        The build_params structure is documented below.
        """
        return pulumi.get(self, "build_params")

    @_builtins.property
    @pulumi.getter(name="detailUrl")
    def detail_url(self) -> _builtins.str:
        """
        Indicates the address of the details page.
        """
        return pulumi.get(self, "detail_url")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        Specifies the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="executorId")
    def executor_id(self) -> _builtins.str:
        """
        Indicates the executor ID.
        """
        return pulumi.get(self, "executor_id")

    @_builtins.property
    @pulumi.getter(name="executorName")
    def executor_name(self) -> _builtins.str:
        """
        Indicates the executor name.
        """
        return pulumi.get(self, "executor_name")

    @_builtins.property
    @pulumi.getter(name="modifyUrl")
    def modify_url(self) -> _builtins.str:
        """
        Indicates the address of the editing page.
        """
        return pulumi.get(self, "modify_url")

    @_builtins.property
    @pulumi.getter(name="pipelineRunId")
    def pipeline_run_id(self) -> _builtins.str:
        """
        Indicates the pipeline run ID.
        """
        return pulumi.get(self, "pipeline_run_id")

    @_builtins.property
    @pulumi.getter(name="runNumber")
    def run_number(self) -> _builtins.int:
        """
        Indicates the pipeline running sequence number.
        """
        return pulumi.get(self, "run_number")

    @_builtins.property
    @pulumi.getter(name="stageStatusLists")
    def stage_status_lists(self) -> Sequence['outputs.GetPipelineRunRecordsRecordStageStatusListResult']:
        """
        Indicates the stage information list.
        The stage_status_list structure is documented below.
        """
        return pulumi.get(self, "stage_status_lists")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Specifies the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the list of status.
        Value can be as follows:
        + **COMPLETED**: completed
        + **RUNNING**: running
        + **FAILED**: failed
        + **CANCELED**: canceled
        + **PAUSED**: paused
        + **SUSPEND**: suspended
        + **IGNORED**: ignored
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Indicates the trigger type.
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetPipelineRunRecordsRecordArtifactParamResult(dict):
    def __init__(__self__, *,
                 branch_filter: _builtins.str,
                 organization: _builtins.str,
                 package_name: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str branch_filter: Indicates the branch filter.
        :param _builtins.str organization: Indicates the docker organization.
        :param _builtins.str package_name: Indicates the package name.
        :param _builtins.str version: Indicates the package version.
        """
        pulumi.set(__self__, "branch_filter", branch_filter)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "package_name", package_name)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="branchFilter")
    def branch_filter(self) -> _builtins.str:
        """
        Indicates the branch filter.
        """
        return pulumi.get(self, "branch_filter")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        """
        Indicates the docker organization.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter(name="packageName")
    def package_name(self) -> _builtins.str:
        """
        Indicates the package name.
        """
        return pulumi.get(self, "package_name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the package version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPipelineRunRecordsRecordBuildParamResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 build_type: _builtins.str,
                 codehub_id: _builtins.str,
                 commit_id: _builtins.str,
                 event_type: _builtins.str,
                 merge_id: _builtins.str,
                 message: _builtins.str,
                 source_branch: _builtins.str,
                 source_codehub_http_url: _builtins.str,
                 source_codehub_id: _builtins.str,
                 source_codehub_url: _builtins.str,
                 tag: _builtins.str,
                 target_branch: _builtins.str):
        """
        :param _builtins.str action: Indicates the action.
        :param _builtins.str build_type: Indicates the code repository trigger type.
        :param _builtins.str codehub_id: Indicates the CodeArts Repo code repository ID.
        :param _builtins.str commit_id: Indicates the commit ID.
        :param _builtins.str event_type: Indicates the event type.
        :param _builtins.str merge_id: Indicates the merge ID.
        :param _builtins.str message: Indicates the commit message.
        :param _builtins.str source_branch: Indicates the source branch.
        :param _builtins.str source_codehub_http_url: Indicates the HTTP address of the source Repo code repository.
        :param _builtins.str source_codehub_id: Indicates the ID of the source Repo code repository.
        :param _builtins.str source_codehub_url: Indicates the address of the source Repo code repository.
        :param _builtins.str tag: Indicates the tag that triggers the pipeline execution.
        :param _builtins.str target_branch: Indicates the branch that triggers the pipeline execution.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "build_type", build_type)
        pulumi.set(__self__, "codehub_id", codehub_id)
        pulumi.set(__self__, "commit_id", commit_id)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "merge_id", merge_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "source_branch", source_branch)
        pulumi.set(__self__, "source_codehub_http_url", source_codehub_http_url)
        pulumi.set(__self__, "source_codehub_id", source_codehub_id)
        pulumi.set(__self__, "source_codehub_url", source_codehub_url)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "target_branch", target_branch)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        Indicates the action.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="buildType")
    def build_type(self) -> _builtins.str:
        """
        Indicates the code repository trigger type.
        """
        return pulumi.get(self, "build_type")

    @_builtins.property
    @pulumi.getter(name="codehubId")
    def codehub_id(self) -> _builtins.str:
        """
        Indicates the CodeArts Repo code repository ID.
        """
        return pulumi.get(self, "codehub_id")

    @_builtins.property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> _builtins.str:
        """
        Indicates the commit ID.
        """
        return pulumi.get(self, "commit_id")

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> _builtins.str:
        """
        Indicates the event type.
        """
        return pulumi.get(self, "event_type")

    @_builtins.property
    @pulumi.getter(name="mergeId")
    def merge_id(self) -> _builtins.str:
        """
        Indicates the merge ID.
        """
        return pulumi.get(self, "merge_id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Indicates the commit message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="sourceBranch")
    def source_branch(self) -> _builtins.str:
        """
        Indicates the source branch.
        """
        return pulumi.get(self, "source_branch")

    @_builtins.property
    @pulumi.getter(name="sourceCodehubHttpUrl")
    def source_codehub_http_url(self) -> _builtins.str:
        """
        Indicates the HTTP address of the source Repo code repository.
        """
        return pulumi.get(self, "source_codehub_http_url")

    @_builtins.property
    @pulumi.getter(name="sourceCodehubId")
    def source_codehub_id(self) -> _builtins.str:
        """
        Indicates the ID of the source Repo code repository.
        """
        return pulumi.get(self, "source_codehub_id")

    @_builtins.property
    @pulumi.getter(name="sourceCodehubUrl")
    def source_codehub_url(self) -> _builtins.str:
        """
        Indicates the address of the source Repo code repository.
        """
        return pulumi.get(self, "source_codehub_url")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> _builtins.str:
        """
        Indicates the tag that triggers the pipeline execution.
        """
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter(name="targetBranch")
    def target_branch(self) -> _builtins.str:
        """
        Indicates the branch that triggers the pipeline execution.
        """
        return pulumi.get(self, "target_branch")


@pulumi.output_type
class GetPipelineRunRecordsRecordStageStatusListResult(dict):
    def __init__(__self__, *,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 sequence: _builtins.int,
                 start_time: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str end_time: Specifies the end time.
        :param _builtins.str id: Indicates the stage ID.
        :param _builtins.str name: Indicates the stage name.
        :param _builtins.int sequence: Indicates the serial number.
        :param _builtins.str start_time: Specifies the start time.
        :param _builtins.str status: Specifies the list of status.
               Value can be as follows:
               + **COMPLETED**: completed
               + **RUNNING**: running
               + **FAILED**: failed
               + **CANCELED**: canceled
               + **PAUSED**: paused
               + **SUSPEND**: suspended
               + **IGNORED**: ignored
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Specifies the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the stage ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the stage name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> _builtins.int:
        """
        Indicates the serial number.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the list of status.
        Value can be as follows:
        + **COMPLETED**: completed
        + **RUNNING**: running
        + **FAILED**: failed
        + **CANCELED**: canceled
        + **PAUSED**: paused
        + **SUSPEND**: suspended
        + **IGNORED**: ignored
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetPipelineRunVariablesVariableResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 is_reset: _builtins.bool,
                 is_runtime: _builtins.bool,
                 is_secret: _builtins.bool,
                 latest_value: _builtins.str,
                 limits: Sequence[_builtins.str],
                 name: _builtins.str,
                 required: _builtins.bool,
                 sequence: _builtins.int,
                 type: _builtins.str,
                 value: _builtins.str,
                 variable_group_name: _builtins.str):
        """
        :param _builtins.str description: Indicates the parameter description.
        :param _builtins.bool is_reset: Indicates whether to reset.
        :param _builtins.bool is_runtime: Indicates whether to set parameters at runtime.
        :param _builtins.bool is_secret: Indicates whether it is a private parameter.
        :param _builtins.str latest_value: Indicates the last parameter value.
        :param Sequence[_builtins.str] limits: Indicates the list of enumerated values.
        :param _builtins.str name: Indicates the custom variable name.
        :param _builtins.bool required: Indicates whether the variable is required.
        :param _builtins.int sequence: Indicates the parameter sequence, starting from 1.
        :param _builtins.str type: Indicates the custom parameter type.
        :param _builtins.str value: Indicates the custom parameter default value.
        :param _builtins.str variable_group_name: Indicates the variable group name.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_reset", is_reset)
        pulumi.set(__self__, "is_runtime", is_runtime)
        pulumi.set(__self__, "is_secret", is_secret)
        pulumi.set(__self__, "latest_value", latest_value)
        pulumi.set(__self__, "limits", limits)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "variable_group_name", variable_group_name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the parameter description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isReset")
    def is_reset(self) -> _builtins.bool:
        """
        Indicates whether to reset.
        """
        return pulumi.get(self, "is_reset")

    @_builtins.property
    @pulumi.getter(name="isRuntime")
    def is_runtime(self) -> _builtins.bool:
        """
        Indicates whether to set parameters at runtime.
        """
        return pulumi.get(self, "is_runtime")

    @_builtins.property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> _builtins.bool:
        """
        Indicates whether it is a private parameter.
        """
        return pulumi.get(self, "is_secret")

    @_builtins.property
    @pulumi.getter(name="latestValue")
    def latest_value(self) -> _builtins.str:
        """
        Indicates the last parameter value.
        """
        return pulumi.get(self, "latest_value")

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of enumerated values.
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the custom variable name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def required(self) -> _builtins.bool:
        """
        Indicates whether the variable is required.
        """
        return pulumi.get(self, "required")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> _builtins.int:
        """
        Indicates the parameter sequence, starting from 1.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the custom parameter type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the custom parameter default value.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="variableGroupName")
    def variable_group_name(self) -> _builtins.str:
        """
        Indicates the variable group name.
        """
        return pulumi.get(self, "variable_group_name")


@pulumi.output_type
class GetPipelineRuntimeVariablesVariableResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 is_reset: _builtins.bool,
                 is_runtime: _builtins.bool,
                 is_secret: _builtins.bool,
                 latest_value: _builtins.str,
                 limits: Sequence[_builtins.str],
                 name: _builtins.str,
                 sequence: _builtins.int,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str description: Indicates the parameter description.
        :param _builtins.bool is_reset: Indicates whether to reset.
        :param _builtins.bool is_runtime: Indicates whether to set parameters at runtime.
        :param _builtins.bool is_secret: Indicates whether it is a private parameter.
        :param _builtins.str latest_value: Indicates the last parameter value.
        :param Sequence[_builtins.str] limits: Indicates the list of enumerated values.
        :param _builtins.str name: Indicates the custom variable name.
        :param _builtins.int sequence: Indicates the parameter sequence, starting from 1.
        :param _builtins.str type: Indicates the custom parameter type.
        :param _builtins.str value: Indicates the custom parameter default value.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_reset", is_reset)
        pulumi.set(__self__, "is_runtime", is_runtime)
        pulumi.set(__self__, "is_secret", is_secret)
        pulumi.set(__self__, "latest_value", latest_value)
        pulumi.set(__self__, "limits", limits)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the parameter description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isReset")
    def is_reset(self) -> _builtins.bool:
        """
        Indicates whether to reset.
        """
        return pulumi.get(self, "is_reset")

    @_builtins.property
    @pulumi.getter(name="isRuntime")
    def is_runtime(self) -> _builtins.bool:
        """
        Indicates whether to set parameters at runtime.
        """
        return pulumi.get(self, "is_runtime")

    @_builtins.property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> _builtins.bool:
        """
        Indicates whether it is a private parameter.
        """
        return pulumi.get(self, "is_secret")

    @_builtins.property
    @pulumi.getter(name="latestValue")
    def latest_value(self) -> _builtins.str:
        """
        Indicates the last parameter value.
        """
        return pulumi.get(self, "latest_value")

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of enumerated values.
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the custom variable name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> _builtins.int:
        """
        Indicates the parameter sequence, starting from 1.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the custom parameter type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the custom parameter default value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPipelineServiceEndpointsEndpointResult(dict):
    def __init__(__self__, *,
                 created_bies: Sequence['outputs.GetPipelineServiceEndpointsEndpointCreatedByResult'],
                 id: _builtins.str,
                 module_id: _builtins.str,
                 name: _builtins.str,
                 url: _builtins.str):
        """
        :param Sequence['GetPipelineServiceEndpointsEndpointCreatedByArgs'] created_bies: Indicates the permission information.
               The created_by structure is documented below.
        :param _builtins.str id: Indicates the endpoint ID.
        :param _builtins.str module_id: Specifies the module ID.
        :param _builtins.str name: Indicates the endpoint name.
        :param _builtins.str url: Indicates the URL.
        """
        pulumi.set(__self__, "created_bies", created_bies)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "module_id", module_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="createdBies")
    def created_bies(self) -> Sequence['outputs.GetPipelineServiceEndpointsEndpointCreatedByResult']:
        """
        Indicates the permission information.
        The created_by structure is documented below.
        """
        return pulumi.get(self, "created_bies")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the endpoint ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> _builtins.str:
        """
        Specifies the module ID.
        """
        return pulumi.get(self, "module_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the endpoint name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        Indicates the URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetPipelineServiceEndpointsEndpointCreatedByResult(dict):
    def __init__(__self__, *,
                 user_id: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str user_id: Indicates the user ID.
        :param _builtins.str user_name: Indicates the user name.
        """
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        Indicates the user ID.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        Indicates the user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetPipelineSystemVariablesVariableResult(dict):
    def __init__(__self__, *,
                 context_name: _builtins.str,
                 description: _builtins.str,
                 is_alias: _builtins.bool,
                 is_show: _builtins.bool,
                 kind: _builtins.str,
                 name: _builtins.str,
                 ordinal: _builtins.int,
                 source_identifier: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str context_name: Indicates the context name.
        :param _builtins.str description: Indicates the parameter description.
        :param _builtins.bool is_alias: Indicates whether the name is alias.
        :param _builtins.bool is_show: Indicates whether it is showed.
        :param _builtins.str kind: Indicates the parameter context type.
        :param _builtins.str name: Indicates the system variable name.
        :param _builtins.int ordinal: Indicates the parameter ordinal.
        :param _builtins.str source_identifier: Indicates the source identifier.
        :param _builtins.str type: Indicates the system parameter type.
        :param _builtins.str value: Indicates the system parameter value.
        """
        pulumi.set(__self__, "context_name", context_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_alias", is_alias)
        pulumi.set(__self__, "is_show", is_show)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ordinal", ordinal)
        pulumi.set(__self__, "source_identifier", source_identifier)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="contextName")
    def context_name(self) -> _builtins.str:
        """
        Indicates the context name.
        """
        return pulumi.get(self, "context_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the parameter description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isAlias")
    def is_alias(self) -> _builtins.bool:
        """
        Indicates whether the name is alias.
        """
        return pulumi.get(self, "is_alias")

    @_builtins.property
    @pulumi.getter(name="isShow")
    def is_show(self) -> _builtins.bool:
        """
        Indicates whether it is showed.
        """
        return pulumi.get(self, "is_show")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Indicates the parameter context type.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the system variable name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> _builtins.int:
        """
        Indicates the parameter ordinal.
        """
        return pulumi.get(self, "ordinal")

    @_builtins.property
    @pulumi.getter(name="sourceIdentifier")
    def source_identifier(self) -> _builtins.str:
        """
        Indicates the source identifier.
        """
        return pulumi.get(self, "source_identifier")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the system parameter type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the system parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPipelineTagsTagResult(dict):
    def __init__(__self__, *,
                 color: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str color: Indicates the tag color.
        :param _builtins.str id: Indicates the tag ID.
        :param _builtins.str name: Indicates the tag name.
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def color(self) -> _builtins.str:
        """
        Indicates the tag color.
        """
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the tag ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the tag name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPipelineTemplatesTemplateResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.int,
                 creator_id: _builtins.str,
                 creator_name: _builtins.str,
                 description: _builtins.str,
                 icon: _builtins.str,
                 id: _builtins.str,
                 is_favorite: _builtins.bool,
                 is_show_source: _builtins.bool,
                 is_system: _builtins.bool,
                 language: _builtins.str,
                 manifest_version: _builtins.str,
                 name: _builtins.str,
                 stages: Sequence['outputs.GetPipelineTemplatesTemplateStageResult'],
                 update_time: _builtins.int,
                 updater_id: _builtins.str):
        """
        :param _builtins.int create_time: Indicates the creation time.
        :param _builtins.str creator_id: Indicates the creator.
        :param _builtins.str creator_name: Indicates the creator name.
        :param _builtins.str description: Indicates the template description.
        :param _builtins.str icon: Indicates the template icon.
        :param _builtins.str id: Indicates the template ID.
        :param _builtins.bool is_favorite: Indicates whether it is a favorite template.
        :param _builtins.bool is_show_source: Indicates whether to display the pipeline source.
        :param _builtins.bool is_system: Specifies whether the template is a system template. Default to **false**.
        :param _builtins.str language: Specifies the template language. Value can be **Java**, **Python**, **Node.js**,
               **Go**, **.NET**, **CPP**, **PHP**, **other**, and **none**.
        :param _builtins.str manifest_version: Indicates the manifest version.
        :param _builtins.str name: Specifies the template name.
        :param Sequence['GetPipelineTemplatesTemplateStageArgs'] stages: Indicates the stage running information.
               The stages structure is documented below.
        :param _builtins.int update_time: Indicates the last update time.
        :param _builtins.str updater_id: Indicates the last updater.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_id", creator_id)
        pulumi.set(__self__, "creator_name", creator_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "icon", icon)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "is_show_source", is_show_source)
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "manifest_version", manifest_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "stages", stages)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "updater_id", updater_id)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.int:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> _builtins.str:
        """
        Indicates the creator.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> _builtins.str:
        """
        Indicates the creator name.
        """
        return pulumi.get(self, "creator_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the template description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def icon(self) -> _builtins.str:
        """
        Indicates the template icon.
        """
        return pulumi.get(self, "icon")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the template ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> _builtins.bool:
        """
        Indicates whether it is a favorite template.
        """
        return pulumi.get(self, "is_favorite")

    @_builtins.property
    @pulumi.getter(name="isShowSource")
    def is_show_source(self) -> _builtins.bool:
        """
        Indicates whether to display the pipeline source.
        """
        return pulumi.get(self, "is_show_source")

    @_builtins.property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> _builtins.bool:
        """
        Specifies whether the template is a system template. Default to **false**.
        """
        return pulumi.get(self, "is_system")

    @_builtins.property
    @pulumi.getter
    def language(self) -> _builtins.str:
        """
        Specifies the template language. Value can be **Java**, **Python**, **Node.js**,
        **Go**, **.NET**, **CPP**, **PHP**, **other**, and **none**.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter(name="manifestVersion")
    def manifest_version(self) -> _builtins.str:
        """
        Indicates the manifest version.
        """
        return pulumi.get(self, "manifest_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the template name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def stages(self) -> Sequence['outputs.GetPipelineTemplatesTemplateStageResult']:
        """
        Indicates the stage running information.
        The stages structure is documented below.
        """
        return pulumi.get(self, "stages")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.int:
        """
        Indicates the last update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="updaterId")
    def updater_id(self) -> _builtins.str:
        """
        Indicates the last updater.
        """
        return pulumi.get(self, "updater_id")


@pulumi.output_type
class GetPipelineTemplatesTemplateStageResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 sequence: _builtins.int):
        """
        :param _builtins.str name: Specifies the template name.
        :param _builtins.int sequence: Indicates the serial number.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sequence", sequence)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the template name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> _builtins.int:
        """
        Indicates the serial number.
        """
        return pulumi.get(self, "sequence")


@pulumi.output_type
class GetPipelineTriggerFailedRecordsRecordResult(dict):
    def __init__(__self__, *,
                 executor_id: _builtins.str,
                 executor_name: _builtins.str,
                 reason: _builtins.str,
                 trigger_time: _builtins.int,
                 trigger_type: _builtins.str):
        """
        :param _builtins.str executor_id: Indicates the executor ID.
        :param _builtins.str executor_name: Indicates the executor name.
        :param _builtins.str reason: Indicates the cause of trigger failure.
        :param _builtins.int trigger_time: Indicates the trigger time.
        :param _builtins.str trigger_type: Indicates the trigger type.
        """
        pulumi.set(__self__, "executor_id", executor_id)
        pulumi.set(__self__, "executor_name", executor_name)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "trigger_time", trigger_time)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="executorId")
    def executor_id(self) -> _builtins.str:
        """
        Indicates the executor ID.
        """
        return pulumi.get(self, "executor_id")

    @_builtins.property
    @pulumi.getter(name="executorName")
    def executor_name(self) -> _builtins.str:
        """
        Indicates the executor name.
        """
        return pulumi.get(self, "executor_name")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        """
        Indicates the cause of trigger failure.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter(name="triggerTime")
    def trigger_time(self) -> _builtins.int:
        """
        Indicates the trigger time.
        """
        return pulumi.get(self, "trigger_time")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Indicates the trigger type.
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetPipelineUserPermissionsUserResult(dict):
    def __init__(__self__, *,
                 operation_authorize: _builtins.bool,
                 operation_delete: _builtins.bool,
                 operation_execute: _builtins.bool,
                 operation_query: _builtins.bool,
                 operation_update: _builtins.bool,
                 role_id: _builtins.int,
                 role_name: _builtins.str,
                 user_id: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.bool operation_authorize: Indicates whether the user has the permission to authorize.
        :param _builtins.bool operation_delete: Indicates whether the user has the permission to delete.
        :param _builtins.bool operation_execute: Indicates whether the user has the permission to execute.
        :param _builtins.bool operation_query: Indicates whether the user has the permission to query.
        :param _builtins.bool operation_update: Indicates whether the user has the permission to update.
        :param _builtins.int role_id: Indicates the role ID.
        :param _builtins.str role_name: Indicates the role name.
        :param _builtins.str user_id: Indicates the user ID.
        :param _builtins.str user_name: Specifies the user name.
        """
        pulumi.set(__self__, "operation_authorize", operation_authorize)
        pulumi.set(__self__, "operation_delete", operation_delete)
        pulumi.set(__self__, "operation_execute", operation_execute)
        pulumi.set(__self__, "operation_query", operation_query)
        pulumi.set(__self__, "operation_update", operation_update)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "role_name", role_name)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="operationAuthorize")
    def operation_authorize(self) -> _builtins.bool:
        """
        Indicates whether the user has the permission to authorize.
        """
        return pulumi.get(self, "operation_authorize")

    @_builtins.property
    @pulumi.getter(name="operationDelete")
    def operation_delete(self) -> _builtins.bool:
        """
        Indicates whether the user has the permission to delete.
        """
        return pulumi.get(self, "operation_delete")

    @_builtins.property
    @pulumi.getter(name="operationExecute")
    def operation_execute(self) -> _builtins.bool:
        """
        Indicates whether the user has the permission to execute.
        """
        return pulumi.get(self, "operation_execute")

    @_builtins.property
    @pulumi.getter(name="operationQuery")
    def operation_query(self) -> _builtins.bool:
        """
        Indicates whether the user has the permission to query.
        """
        return pulumi.get(self, "operation_query")

    @_builtins.property
    @pulumi.getter(name="operationUpdate")
    def operation_update(self) -> _builtins.bool:
        """
        Indicates whether the user has the permission to update.
        """
        return pulumi.get(self, "operation_update")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> _builtins.int:
        """
        Indicates the role ID.
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> _builtins.str:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        Indicates the user ID.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        Specifies the user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetPipelinesPipelineResult(dict):
    def __init__(__self__, *,
                 component_id: _builtins.str,
                 convert_sign: _builtins.int,
                 create_time: _builtins.int,
                 id: _builtins.str,
                 is_collect: _builtins.bool,
                 is_publish: _builtins.bool,
                 latest_runs: Sequence['outputs.GetPipelinesPipelineLatestRunResult'],
                 manifest_version: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str component_id: Specifies the component ID.
        :param _builtins.int convert_sign: Indicates the sign of converting an old version to a new version.
        :param _builtins.int create_time: Indicates the create time.
        :param _builtins.str id: Indicates the stage ID.
        :param _builtins.bool is_collect: Indicates whether the pipeline is collected.
        :param _builtins.bool is_publish: Specifies whether the pipeline is a change pipeline.
               Valid values are **true** and **false**.
        :param Sequence['GetPipelinesPipelineLatestRunArgs'] latest_runs: Indicates the latest running information.
               The latest_run structure is documented below.
        :param _builtins.str manifest_version: Indicates the pipeline version.
        :param _builtins.str name: Specifies the pipeline name.
        """
        pulumi.set(__self__, "component_id", component_id)
        pulumi.set(__self__, "convert_sign", convert_sign)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_collect", is_collect)
        pulumi.set(__self__, "is_publish", is_publish)
        pulumi.set(__self__, "latest_runs", latest_runs)
        pulumi.set(__self__, "manifest_version", manifest_version)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> _builtins.str:
        """
        Specifies the component ID.
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter(name="convertSign")
    def convert_sign(self) -> _builtins.int:
        """
        Indicates the sign of converting an old version to a new version.
        """
        return pulumi.get(self, "convert_sign")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.int:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the stage ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCollect")
    def is_collect(self) -> _builtins.bool:
        """
        Indicates whether the pipeline is collected.
        """
        return pulumi.get(self, "is_collect")

    @_builtins.property
    @pulumi.getter(name="isPublish")
    def is_publish(self) -> _builtins.bool:
        """
        Specifies whether the pipeline is a change pipeline.
        Valid values are **true** and **false**.
        """
        return pulumi.get(self, "is_publish")

    @_builtins.property
    @pulumi.getter(name="latestRuns")
    def latest_runs(self) -> Sequence['outputs.GetPipelinesPipelineLatestRunResult']:
        """
        Indicates the latest running information.
        The latest_run structure is documented below.
        """
        return pulumi.get(self, "latest_runs")

    @_builtins.property
    @pulumi.getter(name="manifestVersion")
    def manifest_version(self) -> _builtins.str:
        """
        Indicates the pipeline version.
        """
        return pulumi.get(self, "manifest_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the pipeline name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPipelinesPipelineLatestRunResult(dict):
    def __init__(__self__, *,
                 artifact_params: Sequence['outputs.GetPipelinesPipelineLatestRunArtifactParamResult'],
                 build_params: Sequence['outputs.GetPipelinesPipelineLatestRunBuildParamResult'],
                 detail_url: _builtins.str,
                 end_time: _builtins.int,
                 executor_id: _builtins.str,
                 executor_name: _builtins.str,
                 modify_url: _builtins.str,
                 pipeline_run_id: _builtins.str,
                 run_number: _builtins.int,
                 stage_status_lists: Sequence['outputs.GetPipelinesPipelineLatestRunStageStatusListResult'],
                 start_time: _builtins.int,
                 status: _builtins.str,
                 trigger_type: _builtins.str):
        """
        :param Sequence['GetPipelinesPipelineLatestRunArtifactParamArgs'] artifact_params: Indicates the artifacts after running a pipeline.
               The artifact_params structure is documented below.
        :param Sequence['GetPipelinesPipelineLatestRunBuildParamArgs'] build_params: Indicates the build parameters.
               The build_params structure is documented below.
        :param _builtins.str detail_url: Indicates the address of the details page.
        :param _builtins.int end_time: Specifies the end time.
        :param _builtins.str executor_id: Indicates the executor ID.
        :param _builtins.str executor_name: Indicates the executor name.
        :param _builtins.str modify_url: Indicates the address of the editing page.
        :param _builtins.str pipeline_run_id: Indicates the pipeline run ID.
        :param _builtins.int run_number: Indicates the pipeline running sequence number.
        :param Sequence['GetPipelinesPipelineLatestRunStageStatusListArgs'] stage_status_lists: Indicates the stage information list.
               The stage_status_list structure is documented below.
        :param _builtins.int start_time: Specifies the start time.
        :param _builtins.str status: Specifies the status.
               Valid values can be:
               + **COMPLETED**: completed
               + **RUNNING**: running
               + **FAILED**: failed
               + **CANCELED**: canceled
               + **PAUSED**: paused
               + **SUSPEND**: suspended
               + **IGNORED**: ignored
        :param _builtins.str trigger_type: Indicates the trigger type.
        """
        pulumi.set(__self__, "artifact_params", artifact_params)
        pulumi.set(__self__, "build_params", build_params)
        pulumi.set(__self__, "detail_url", detail_url)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "executor_id", executor_id)
        pulumi.set(__self__, "executor_name", executor_name)
        pulumi.set(__self__, "modify_url", modify_url)
        pulumi.set(__self__, "pipeline_run_id", pipeline_run_id)
        pulumi.set(__self__, "run_number", run_number)
        pulumi.set(__self__, "stage_status_lists", stage_status_lists)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="artifactParams")
    def artifact_params(self) -> Sequence['outputs.GetPipelinesPipelineLatestRunArtifactParamResult']:
        """
        Indicates the artifacts after running a pipeline.
        The artifact_params structure is documented below.
        """
        return pulumi.get(self, "artifact_params")

    @_builtins.property
    @pulumi.getter(name="buildParams")
    def build_params(self) -> Sequence['outputs.GetPipelinesPipelineLatestRunBuildParamResult']:
        """
        Indicates the build parameters.
        The build_params structure is documented below.
        """
        return pulumi.get(self, "build_params")

    @_builtins.property
    @pulumi.getter(name="detailUrl")
    def detail_url(self) -> _builtins.str:
        """
        Indicates the address of the details page.
        """
        return pulumi.get(self, "detail_url")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        Specifies the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="executorId")
    def executor_id(self) -> _builtins.str:
        """
        Indicates the executor ID.
        """
        return pulumi.get(self, "executor_id")

    @_builtins.property
    @pulumi.getter(name="executorName")
    def executor_name(self) -> _builtins.str:
        """
        Indicates the executor name.
        """
        return pulumi.get(self, "executor_name")

    @_builtins.property
    @pulumi.getter(name="modifyUrl")
    def modify_url(self) -> _builtins.str:
        """
        Indicates the address of the editing page.
        """
        return pulumi.get(self, "modify_url")

    @_builtins.property
    @pulumi.getter(name="pipelineRunId")
    def pipeline_run_id(self) -> _builtins.str:
        """
        Indicates the pipeline run ID.
        """
        return pulumi.get(self, "pipeline_run_id")

    @_builtins.property
    @pulumi.getter(name="runNumber")
    def run_number(self) -> _builtins.int:
        """
        Indicates the pipeline running sequence number.
        """
        return pulumi.get(self, "run_number")

    @_builtins.property
    @pulumi.getter(name="stageStatusLists")
    def stage_status_lists(self) -> Sequence['outputs.GetPipelinesPipelineLatestRunStageStatusListResult']:
        """
        Indicates the stage information list.
        The stage_status_list structure is documented below.
        """
        return pulumi.get(self, "stage_status_lists")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Specifies the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status.
        Valid values can be:
        + **COMPLETED**: completed
        + **RUNNING**: running
        + **FAILED**: failed
        + **CANCELED**: canceled
        + **PAUSED**: paused
        + **SUSPEND**: suspended
        + **IGNORED**: ignored
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Indicates the trigger type.
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetPipelinesPipelineLatestRunArtifactParamResult(dict):
    def __init__(__self__, *,
                 branch_filter: _builtins.str,
                 organization: _builtins.str,
                 package_name: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str branch_filter: Indicates the branch filter.
        :param _builtins.str organization: Indicates the docker organization.
        :param _builtins.str package_name: Indicates the package name.
        :param _builtins.str version: Indicates the package version.
        """
        pulumi.set(__self__, "branch_filter", branch_filter)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "package_name", package_name)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="branchFilter")
    def branch_filter(self) -> _builtins.str:
        """
        Indicates the branch filter.
        """
        return pulumi.get(self, "branch_filter")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        """
        Indicates the docker organization.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter(name="packageName")
    def package_name(self) -> _builtins.str:
        """
        Indicates the package name.
        """
        return pulumi.get(self, "package_name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the package version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPipelinesPipelineLatestRunBuildParamResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 build_type: _builtins.str,
                 codehub_id: _builtins.str,
                 commit_id: _builtins.str,
                 event_type: _builtins.str,
                 merge_id: _builtins.str,
                 message: _builtins.str,
                 source_branch: _builtins.str,
                 source_codehub_http_url: _builtins.str,
                 source_codehub_id: _builtins.str,
                 source_codehub_url: _builtins.str,
                 tag: _builtins.str,
                 target_branch: _builtins.str):
        """
        :param _builtins.str action: Indicates the action.
        :param _builtins.str build_type: Indicates the code repository trigger type.
        :param _builtins.str codehub_id: Indicates the CodeArts Repo code repository ID.
        :param _builtins.str commit_id: Indicates the commit ID.
        :param _builtins.str event_type: Indicates the event type.
        :param _builtins.str merge_id: Indicates the merge ID.
        :param _builtins.str message: Indicates the commit message.
        :param _builtins.str source_branch: Indicates the source branch.
        :param _builtins.str source_codehub_http_url: Indicates the HTTP address of the source Repo code repository.
        :param _builtins.str source_codehub_id: Indicates the ID of the source Repo code repository.
        :param _builtins.str source_codehub_url: Indicates the address of the source Repo code repository.
        :param _builtins.str tag: Indicates the tag that triggers the pipeline execution.
        :param _builtins.str target_branch: Indicates the branch that triggers the pipeline execution.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "build_type", build_type)
        pulumi.set(__self__, "codehub_id", codehub_id)
        pulumi.set(__self__, "commit_id", commit_id)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "merge_id", merge_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "source_branch", source_branch)
        pulumi.set(__self__, "source_codehub_http_url", source_codehub_http_url)
        pulumi.set(__self__, "source_codehub_id", source_codehub_id)
        pulumi.set(__self__, "source_codehub_url", source_codehub_url)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "target_branch", target_branch)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        Indicates the action.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="buildType")
    def build_type(self) -> _builtins.str:
        """
        Indicates the code repository trigger type.
        """
        return pulumi.get(self, "build_type")

    @_builtins.property
    @pulumi.getter(name="codehubId")
    def codehub_id(self) -> _builtins.str:
        """
        Indicates the CodeArts Repo code repository ID.
        """
        return pulumi.get(self, "codehub_id")

    @_builtins.property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> _builtins.str:
        """
        Indicates the commit ID.
        """
        return pulumi.get(self, "commit_id")

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> _builtins.str:
        """
        Indicates the event type.
        """
        return pulumi.get(self, "event_type")

    @_builtins.property
    @pulumi.getter(name="mergeId")
    def merge_id(self) -> _builtins.str:
        """
        Indicates the merge ID.
        """
        return pulumi.get(self, "merge_id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Indicates the commit message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="sourceBranch")
    def source_branch(self) -> _builtins.str:
        """
        Indicates the source branch.
        """
        return pulumi.get(self, "source_branch")

    @_builtins.property
    @pulumi.getter(name="sourceCodehubHttpUrl")
    def source_codehub_http_url(self) -> _builtins.str:
        """
        Indicates the HTTP address of the source Repo code repository.
        """
        return pulumi.get(self, "source_codehub_http_url")

    @_builtins.property
    @pulumi.getter(name="sourceCodehubId")
    def source_codehub_id(self) -> _builtins.str:
        """
        Indicates the ID of the source Repo code repository.
        """
        return pulumi.get(self, "source_codehub_id")

    @_builtins.property
    @pulumi.getter(name="sourceCodehubUrl")
    def source_codehub_url(self) -> _builtins.str:
        """
        Indicates the address of the source Repo code repository.
        """
        return pulumi.get(self, "source_codehub_url")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> _builtins.str:
        """
        Indicates the tag that triggers the pipeline execution.
        """
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter(name="targetBranch")
    def target_branch(self) -> _builtins.str:
        """
        Indicates the branch that triggers the pipeline execution.
        """
        return pulumi.get(self, "target_branch")


@pulumi.output_type
class GetPipelinesPipelineLatestRunStageStatusListResult(dict):
    def __init__(__self__, *,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 sequence: _builtins.int,
                 start_time: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str end_time: Specifies the end time.
        :param _builtins.str id: Indicates the stage ID.
        :param _builtins.str name: Specifies the pipeline name.
        :param _builtins.int sequence: Indicates the serial number.
        :param _builtins.str start_time: Specifies the start time.
        :param _builtins.str status: Specifies the status.
               Valid values can be:
               + **COMPLETED**: completed
               + **RUNNING**: running
               + **FAILED**: failed
               + **CANCELED**: canceled
               + **PAUSED**: paused
               + **SUSPEND**: suspended
               + **IGNORED**: ignored
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Specifies the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the stage ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the pipeline name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> _builtins.int:
        """
        Indicates the serial number.
        """
        return pulumi.get(self, "sequence")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status.
        Valid values can be:
        + **COMPLETED**: completed
        + **RUNNING**: running
        + **FAILED**: failed
        + **CANCELED**: canceled
        + **PAUSED**: paused
        + **SUSPEND**: suspended
        + **IGNORED**: ignored
        """
        return pulumi.get(self, "status")


