# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPipelinesResult',
    'AwaitableGetPipelinesResult',
    'get_pipelines',
    'get_pipelines_output',
]

@pulumi.output_type
class GetPipelinesResult:
    """
    A collection of values returned by getPipelines.
    """
    def __init__(__self__, by_group=None, component_id=None, creator_ids=None, end_time=None, executor_ids=None, group_path_id=None, id=None, is_banned=None, is_publish=None, name=None, pipelines=None, project_id=None, region=None, sort_dir=None, sort_key=None, start_time=None, statuses=None):
        if by_group and not isinstance(by_group, str):
            raise TypeError("Expected argument 'by_group' to be a str")
        pulumi.set(__self__, "by_group", by_group)
        if component_id and not isinstance(component_id, str):
            raise TypeError("Expected argument 'component_id' to be a str")
        pulumi.set(__self__, "component_id", component_id)
        if creator_ids and not isinstance(creator_ids, list):
            raise TypeError("Expected argument 'creator_ids' to be a list")
        pulumi.set(__self__, "creator_ids", creator_ids)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if executor_ids and not isinstance(executor_ids, list):
            raise TypeError("Expected argument 'executor_ids' to be a list")
        pulumi.set(__self__, "executor_ids", executor_ids)
        if group_path_id and not isinstance(group_path_id, str):
            raise TypeError("Expected argument 'group_path_id' to be a str")
        pulumi.set(__self__, "group_path_id", group_path_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_banned and not isinstance(is_banned, str):
            raise TypeError("Expected argument 'is_banned' to be a str")
        pulumi.set(__self__, "is_banned", is_banned)
        if is_publish and not isinstance(is_publish, str):
            raise TypeError("Expected argument 'is_publish' to be a str")
        pulumi.set(__self__, "is_publish", is_publish)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pipelines and not isinstance(pipelines, list):
            raise TypeError("Expected argument 'pipelines' to be a list")
        pulumi.set(__self__, "pipelines", pipelines)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)

    @_builtins.property
    @pulumi.getter(name="byGroup")
    def by_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "by_group")

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[_builtins.str]:
        """
        Indicates the component ID.
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter(name="creatorIds")
    def creator_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "creator_ids")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Indicates the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="executorIds")
    def executor_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "executor_ids")

    @_builtins.property
    @pulumi.getter(name="groupPathId")
    def group_path_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group_path_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isBanned")
    def is_banned(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "is_banned")

    @_builtins.property
    @pulumi.getter(name="isPublish")
    def is_publish(self) -> Optional[_builtins.str]:
        """
        Indicates whether the pipeline is a change pipeline.
        """
        return pulumi.get(self, "is_publish")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the stage name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def pipelines(self) -> Sequence['outputs.GetPipelinesPipelineResult']:
        """
        Indicates the pipeline list
        The pipelines structure is documented below.
        """
        return pulumi.get(self, "pipelines")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        """
        Indicates the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the stage status.
        """
        return pulumi.get(self, "statuses")


class AwaitableGetPipelinesResult(GetPipelinesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelinesResult(
            by_group=self.by_group,
            component_id=self.component_id,
            creator_ids=self.creator_ids,
            end_time=self.end_time,
            executor_ids=self.executor_ids,
            group_path_id=self.group_path_id,
            id=self.id,
            is_banned=self.is_banned,
            is_publish=self.is_publish,
            name=self.name,
            pipelines=self.pipelines,
            project_id=self.project_id,
            region=self.region,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            start_time=self.start_time,
            statuses=self.statuses)


def get_pipelines(by_group: Optional[_builtins.str] = None,
                  component_id: Optional[_builtins.str] = None,
                  creator_ids: Optional[Sequence[_builtins.str]] = None,
                  end_time: Optional[_builtins.str] = None,
                  executor_ids: Optional[Sequence[_builtins.str]] = None,
                  group_path_id: Optional[_builtins.str] = None,
                  is_banned: Optional[_builtins.str] = None,
                  is_publish: Optional[_builtins.str] = None,
                  name: Optional[_builtins.str] = None,
                  project_id: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  sort_dir: Optional[_builtins.str] = None,
                  sort_key: Optional[_builtins.str] = None,
                  start_time: Optional[_builtins.str] = None,
                  statuses: Optional[Sequence[_builtins.str]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPipelinesResult:
    """
    Use this data source to get a list of CodeArts pipelines.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    codearts_project_id = config.require_object("codeartsProjectId")
    test = huaweicloud.codearts.get_pipelines(project_id=codearts_project_id)
    ```


    :param _builtins.str by_group: Specifies whether to query by group or not. Valid values are **true** and **false**.
    :param _builtins.str component_id: Specifies the component ID.
    :param Sequence[_builtins.str] creator_ids: Specifies the creator ID list.
    :param _builtins.str end_time: Specifies the end time.
    :param Sequence[_builtins.str] executor_ids: Specifies the executor ID list.
    :param _builtins.str group_path_id: Specifies the group ID path.
    :param _builtins.str is_banned: Specifies whether the pipeline is banned. Valid values are **true** and **false**.
    :param _builtins.str is_publish: Specifies whether the pipeline is a change pipeline.
           Valid values are **true** and **false**.
    :param _builtins.str name: Specifies the pipeline name.
    :param _builtins.str project_id: Specifies the CodeArts project ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sorting rule.
    :param _builtins.str sort_key: Specifies the sorting field name.
           Valid values can be:
           + **name**: pipeline name
           + **create_time**: pipeline creation time
           + **update_time**: pipeline updating time.
    :param _builtins.str start_time: Specifies the start time.
    :param Sequence[_builtins.str] statuses: Specifies the status.
           Valid values can be:
           + **COMPLETED**: completed
           + **RUNNING**: running
           + **FAILED**: failed
           + **CANCELED**: canceled
           + **PAUSED**: paused
           + **SUSPEND**: suspended
           + **IGNORED**: ignored
    """
    __args__ = dict()
    __args__['byGroup'] = by_group
    __args__['componentId'] = component_id
    __args__['creatorIds'] = creator_ids
    __args__['endTime'] = end_time
    __args__['executorIds'] = executor_ids
    __args__['groupPathId'] = group_path_id
    __args__['isBanned'] = is_banned
    __args__['isPublish'] = is_publish
    __args__['name'] = name
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['startTime'] = start_time
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getPipelines:getPipelines', __args__, opts=opts, typ=GetPipelinesResult).value

    return AwaitableGetPipelinesResult(
        by_group=pulumi.get(__ret__, 'by_group'),
        component_id=pulumi.get(__ret__, 'component_id'),
        creator_ids=pulumi.get(__ret__, 'creator_ids'),
        end_time=pulumi.get(__ret__, 'end_time'),
        executor_ids=pulumi.get(__ret__, 'executor_ids'),
        group_path_id=pulumi.get(__ret__, 'group_path_id'),
        id=pulumi.get(__ret__, 'id'),
        is_banned=pulumi.get(__ret__, 'is_banned'),
        is_publish=pulumi.get(__ret__, 'is_publish'),
        name=pulumi.get(__ret__, 'name'),
        pipelines=pulumi.get(__ret__, 'pipelines'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region=pulumi.get(__ret__, 'region'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        start_time=pulumi.get(__ret__, 'start_time'),
        statuses=pulumi.get(__ret__, 'statuses'))
def get_pipelines_output(by_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         component_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         creator_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         executor_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         group_path_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         is_banned: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         is_publish: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         project_id: Optional[pulumi.Input[_builtins.str]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPipelinesResult]:
    """
    Use this data source to get a list of CodeArts pipelines.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    codearts_project_id = config.require_object("codeartsProjectId")
    test = huaweicloud.codearts.get_pipelines(project_id=codearts_project_id)
    ```


    :param _builtins.str by_group: Specifies whether to query by group or not. Valid values are **true** and **false**.
    :param _builtins.str component_id: Specifies the component ID.
    :param Sequence[_builtins.str] creator_ids: Specifies the creator ID list.
    :param _builtins.str end_time: Specifies the end time.
    :param Sequence[_builtins.str] executor_ids: Specifies the executor ID list.
    :param _builtins.str group_path_id: Specifies the group ID path.
    :param _builtins.str is_banned: Specifies whether the pipeline is banned. Valid values are **true** and **false**.
    :param _builtins.str is_publish: Specifies whether the pipeline is a change pipeline.
           Valid values are **true** and **false**.
    :param _builtins.str name: Specifies the pipeline name.
    :param _builtins.str project_id: Specifies the CodeArts project ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sorting rule.
    :param _builtins.str sort_key: Specifies the sorting field name.
           Valid values can be:
           + **name**: pipeline name
           + **create_time**: pipeline creation time
           + **update_time**: pipeline updating time.
    :param _builtins.str start_time: Specifies the start time.
    :param Sequence[_builtins.str] statuses: Specifies the status.
           Valid values can be:
           + **COMPLETED**: completed
           + **RUNNING**: running
           + **FAILED**: failed
           + **CANCELED**: canceled
           + **PAUSED**: paused
           + **SUSPEND**: suspended
           + **IGNORED**: ignored
    """
    __args__ = dict()
    __args__['byGroup'] = by_group
    __args__['componentId'] = component_id
    __args__['creatorIds'] = creator_ids
    __args__['endTime'] = end_time
    __args__['executorIds'] = executor_ids
    __args__['groupPathId'] = group_path_id
    __args__['isBanned'] = is_banned
    __args__['isPublish'] = is_publish
    __args__['name'] = name
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['startTime'] = start_time
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getPipelines:getPipelines', __args__, opts=opts, typ=GetPipelinesResult)
    return __ret__.apply(lambda __response__: GetPipelinesResult(
        by_group=pulumi.get(__response__, 'by_group'),
        component_id=pulumi.get(__response__, 'component_id'),
        creator_ids=pulumi.get(__response__, 'creator_ids'),
        end_time=pulumi.get(__response__, 'end_time'),
        executor_ids=pulumi.get(__response__, 'executor_ids'),
        group_path_id=pulumi.get(__response__, 'group_path_id'),
        id=pulumi.get(__response__, 'id'),
        is_banned=pulumi.get(__response__, 'is_banned'),
        is_publish=pulumi.get(__response__, 'is_publish'),
        name=pulumi.get(__response__, 'name'),
        pipelines=pulumi.get(__response__, 'pipelines'),
        project_id=pulumi.get(__response__, 'project_id'),
        region=pulumi.get(__response__, 'region'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        start_time=pulumi.get(__response__, 'start_time'),
        statuses=pulumi.get(__response__, 'statuses')))
