# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInspectorHostsResult',
    'AwaitableGetInspectorHostsResult',
    'get_inspector_hosts',
    'get_inspector_hosts_output',
]

@pulumi.output_type
class GetInspectorHostsResult:
    """
    A collection of values returned by getInspectorHosts.
    """
    def __init__(__self__, group_id=None, hosts=None, id=None):
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if hosts and not isinstance(hosts, list):
            raise TypeError("Expected argument 'hosts' to be a list")
        pulumi.set(__self__, "hosts", hosts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        """
        Indicates the host group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetInspectorHostsHostResult']:
        """
        Indicates the host list.
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetInspectorHostsResult(GetInspectorHostsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInspectorHostsResult(
            group_id=self.group_id,
            hosts=self.hosts,
            id=self.id)


def get_inspector_hosts(group_id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInspectorHostsResult:
    """
    Use this data source to get the list of CodeArts inspector hosts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.codearts.get_inspector_hosts()
    ```


    :param _builtins.str group_id: Specifies the host group ID.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getInspectorHosts:getInspectorHosts', __args__, opts=opts, typ=GetInspectorHostsResult).value

    return AwaitableGetInspectorHostsResult(
        group_id=pulumi.get(__ret__, 'group_id'),
        hosts=pulumi.get(__ret__, 'hosts'),
        id=pulumi.get(__ret__, 'id'))
def get_inspector_hosts_output(group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInspectorHostsResult]:
    """
    Use this data source to get the list of CodeArts inspector hosts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.codearts.get_inspector_hosts()
    ```


    :param _builtins.str group_id: Specifies the host group ID.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getInspectorHosts:getInspectorHosts', __args__, opts=opts, typ=GetInspectorHostsResult)
    return __ret__.apply(lambda __response__: GetInspectorHostsResult(
        group_id=pulumi.get(__response__, 'group_id'),
        hosts=pulumi.get(__response__, 'hosts'),
        id=pulumi.get(__response__, 'id')))
