# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDeployGroupsResult',
    'AwaitableGetDeployGroupsResult',
    'get_deploy_groups',
    'get_deploy_groups_output',
]

@pulumi.output_type
class GetDeployGroupsResult:
    """
    A collection of values returned by getDeployGroups.
    """
    def __init__(__self__, groups=None, id=None, is_proxy_mode=None, name=None, os_type=None, project_id=None, region=None, resource_pool_id=None):
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_proxy_mode and not isinstance(is_proxy_mode, str):
            raise TypeError("Expected argument 'is_proxy_mode' to be a str")
        pulumi.set(__self__, "is_proxy_mode", is_proxy_mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        pulumi.set(__self__, "os_type", os_type)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_pool_id and not isinstance(resource_pool_id, str):
            raise TypeError("Expected argument 'resource_pool_id' to be a str")
        pulumi.set(__self__, "resource_pool_id", resource_pool_id)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetDeployGroupsGroupResult']:
        """
        Indicates the host cluster list.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isProxyMode")
    def is_proxy_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "is_proxy_mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the host cluster name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[_builtins.str]:
        """
        Indicates the operating system.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourcePoolId")
    def resource_pool_id(self) -> Optional[_builtins.str]:
        """
        Indicates the slave cluster ID.
        + If the default value is null, the default slave cluster is used.
        + If the value is user-defined, the slave cluster ID is used.
        """
        return pulumi.get(self, "resource_pool_id")


class AwaitableGetDeployGroupsResult(GetDeployGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeployGroupsResult(
            groups=self.groups,
            id=self.id,
            is_proxy_mode=self.is_proxy_mode,
            name=self.name,
            os_type=self.os_type,
            project_id=self.project_id,
            region=self.region,
            resource_pool_id=self.resource_pool_id)


def get_deploy_groups(is_proxy_mode: Optional[_builtins.str] = None,
                      name: Optional[_builtins.str] = None,
                      os_type: Optional[_builtins.str] = None,
                      project_id: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      resource_pool_id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeployGroupsResult:
    """
    Use this data source to get the list of CodeArts deploy groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    project_id = config.require_object("projectId")
    test = huaweicloud.codearts.get_deploy_groups(project_id=project_id)
    ```


    :param _builtins.str is_proxy_mode: Specifies whether the host is an agent host.
           Valid values are as follows:
           + **1**: Using proxy access mode.
           + **0**: Without using proxy access mode.
    :param _builtins.str name: Specifies the name of host cluster.
    :param _builtins.str os_type: Specifies the operating system. Valid values are **windows**, **linux**.
    :param _builtins.str project_id: Specifies the project ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_pool_id: Specifies the customized resource pool ID.
    """
    __args__ = dict()
    __args__['isProxyMode'] = is_proxy_mode
    __args__['name'] = name
    __args__['osType'] = os_type
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['resourcePoolId'] = resource_pool_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getDeployGroups:getDeployGroups', __args__, opts=opts, typ=GetDeployGroupsResult).value

    return AwaitableGetDeployGroupsResult(
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        is_proxy_mode=pulumi.get(__ret__, 'is_proxy_mode'),
        name=pulumi.get(__ret__, 'name'),
        os_type=pulumi.get(__ret__, 'os_type'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region=pulumi.get(__ret__, 'region'),
        resource_pool_id=pulumi.get(__ret__, 'resource_pool_id'))
def get_deploy_groups_output(is_proxy_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             os_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             project_id: Optional[pulumi.Input[_builtins.str]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             resource_pool_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDeployGroupsResult]:
    """
    Use this data source to get the list of CodeArts deploy groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    project_id = config.require_object("projectId")
    test = huaweicloud.codearts.get_deploy_groups(project_id=project_id)
    ```


    :param _builtins.str is_proxy_mode: Specifies whether the host is an agent host.
           Valid values are as follows:
           + **1**: Using proxy access mode.
           + **0**: Without using proxy access mode.
    :param _builtins.str name: Specifies the name of host cluster.
    :param _builtins.str os_type: Specifies the operating system. Valid values are **windows**, **linux**.
    :param _builtins.str project_id: Specifies the project ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_pool_id: Specifies the customized resource pool ID.
    """
    __args__ = dict()
    __args__['isProxyMode'] = is_proxy_mode
    __args__['name'] = name
    __args__['osType'] = os_type
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['resourcePoolId'] = resource_pool_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getDeployGroups:getDeployGroups', __args__, opts=opts, typ=GetDeployGroupsResult)
    return __ret__.apply(lambda __response__: GetDeployGroupsResult(
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        is_proxy_mode=pulumi.get(__response__, 'is_proxy_mode'),
        name=pulumi.get(__response__, 'name'),
        os_type=pulumi.get(__response__, 'os_type'),
        project_id=pulumi.get(__response__, 'project_id'),
        region=pulumi.get(__response__, 'region'),
        resource_pool_id=pulumi.get(__response__, 'resource_pool_id')))
