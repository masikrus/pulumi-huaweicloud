# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PipelineGroupArgs', 'PipelineGroup']

@pulumi.input_type
class PipelineGroupArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PipelineGroup resource.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.str] name: Specifies the group name.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the group parent ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "project_id", project_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CodeArts project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the group parent ID.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _PipelineGroupState:
    def __init__(__self__, *,
                 childrens: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 create_time: Optional[pulumi.Input[_builtins.int]] = None,
                 creator: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ordinal: Optional[pulumi.Input[_builtins.int]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 path_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 update_time: Optional[pulumi.Input[_builtins.int]] = None,
                 updater: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PipelineGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] childrens: Indicates the child group name list.
        :param pulumi.Input[_builtins.int] create_time: Indicates the create time.
        :param pulumi.Input[_builtins.str] creator: Indicates the creator ID.
        :param pulumi.Input[_builtins.str] name: Specifies the group name.
        :param pulumi.Input[_builtins.int] ordinal: Indicates the group ordinal
        :param pulumi.Input[_builtins.str] parent_id: Specifies the group parent ID.
        :param pulumi.Input[_builtins.str] path_id: Indicates the path ID.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] update_time: Indicates the update time.
        :param pulumi.Input[_builtins.str] updater: Indicates the updater ID.
        """
        if childrens is not None:
            pulumi.set(__self__, "childrens", childrens)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator is not None:
            pulumi.set(__self__, "creator", creator)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ordinal is not None:
            pulumi.set(__self__, "ordinal", ordinal)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if path_id is not None:
            pulumi.set(__self__, "path_id", path_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if updater is not None:
            pulumi.set(__self__, "updater", updater)

    @_builtins.property
    @pulumi.getter
    def childrens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the child group name list.
        """
        return pulumi.get(self, "childrens")

    @childrens.setter
    def childrens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "childrens", value)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter
    def creator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creator ID.
        """
        return pulumi.get(self, "creator")

    @creator.setter
    def creator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creator", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the group ordinal
        """
        return pulumi.get(self, "ordinal")

    @ordinal.setter
    def ordinal(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ordinal", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the group parent ID.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter(name="pathId")
    def path_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the path ID.
        """
        return pulumi.get(self, "path_id")

    @path_id.setter
    def path_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CodeArts project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "update_time", value)

    @_builtins.property
    @pulumi.getter
    def updater(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the updater ID.
        """
        return pulumi.get(self, "updater")

    @updater.setter
    def updater(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updater", value)


@pulumi.type_token("huaweicloud:codearts/pipelineGroup:PipelineGroup")
class PipelineGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts pipeline group resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        name = config.require_object("name")
        test = huaweicloud.codearts.PipelineGroup("test",
            project_id=codearts_project_id,
            name=name)
        ```

        ## Import

        The group can be imported using `project_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipelineGroup:PipelineGroup test <project_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Specifies the group name.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the group parent ID.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelineGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts pipeline group resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        name = config.require_object("name")
        test = huaweicloud.codearts.PipelineGroup("test",
            project_id=codearts_project_id,
            name=name)
        ```

        ## Import

        The group can be imported using `project_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipelineGroup:PipelineGroup test <project_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param PipelineGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelineGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelineGroupArgs.__new__(PipelineGroupArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["name"] = name
            __props__.__dict__["parent_id"] = parent_id
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["region"] = region
            __props__.__dict__["childrens"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["creator"] = None
            __props__.__dict__["ordinal"] = None
            __props__.__dict__["path_id"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["updater"] = None
        super(PipelineGroup, __self__).__init__(
            'huaweicloud:codearts/pipelineGroup:PipelineGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            childrens: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            create_time: Optional[pulumi.Input[_builtins.int]] = None,
            creator: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            ordinal: Optional[pulumi.Input[_builtins.int]] = None,
            parent_id: Optional[pulumi.Input[_builtins.str]] = None,
            path_id: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            update_time: Optional[pulumi.Input[_builtins.int]] = None,
            updater: Optional[pulumi.Input[_builtins.str]] = None) -> 'PipelineGroup':
        """
        Get an existing PipelineGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] childrens: Indicates the child group name list.
        :param pulumi.Input[_builtins.int] create_time: Indicates the create time.
        :param pulumi.Input[_builtins.str] creator: Indicates the creator ID.
        :param pulumi.Input[_builtins.str] name: Specifies the group name.
        :param pulumi.Input[_builtins.int] ordinal: Indicates the group ordinal
        :param pulumi.Input[_builtins.str] parent_id: Specifies the group parent ID.
        :param pulumi.Input[_builtins.str] path_id: Indicates the path ID.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] update_time: Indicates the update time.
        :param pulumi.Input[_builtins.str] updater: Indicates the updater ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelineGroupState.__new__(_PipelineGroupState)

        __props__.__dict__["childrens"] = childrens
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["creator"] = creator
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["name"] = name
        __props__.__dict__["ordinal"] = ordinal
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["path_id"] = path_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["updater"] = updater
        return PipelineGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def childrens(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Indicates the child group name list.
        """
        return pulumi.get(self, "childrens")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creator ID.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the group name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the group ordinal
        """
        return pulumi.get(self, "ordinal")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the group parent ID.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="pathId")
    def path_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the path ID.
        """
        return pulumi.get(self, "path_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CodeArts project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter
    def updater(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the updater ID.
        """
        return pulumi.get(self, "updater")

