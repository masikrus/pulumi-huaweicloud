# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPipelineRunDetailResult',
    'AwaitableGetPipelineRunDetailResult',
    'get_pipeline_run_detail',
    'get_pipeline_run_detail_output',
]

@pulumi.output_type
class GetPipelineRunDetailResult:
    """
    A collection of values returned by getPipelineRunDetail.
    """
    def __init__(__self__, artifacts=None, component_id=None, current_system_time=None, description=None, detail_url=None, end_time=None, executor_id=None, executor_name=None, group_id=None, group_name=None, id=None, is_publish=None, language=None, manifest_version=None, name=None, pipeline_id=None, pipeline_run_id=None, project_id=None, region=None, run_number=None, sources=None, stages=None, start_time=None, status=None, subject_id=None, trigger_type=None):
        if artifacts and not isinstance(artifacts, list):
            raise TypeError("Expected argument 'artifacts' to be a list")
        pulumi.set(__self__, "artifacts", artifacts)
        if component_id and not isinstance(component_id, str):
            raise TypeError("Expected argument 'component_id' to be a str")
        pulumi.set(__self__, "component_id", component_id)
        if current_system_time and not isinstance(current_system_time, int):
            raise TypeError("Expected argument 'current_system_time' to be a int")
        pulumi.set(__self__, "current_system_time", current_system_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if detail_url and not isinstance(detail_url, str):
            raise TypeError("Expected argument 'detail_url' to be a str")
        pulumi.set(__self__, "detail_url", detail_url)
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if executor_id and not isinstance(executor_id, str):
            raise TypeError("Expected argument 'executor_id' to be a str")
        pulumi.set(__self__, "executor_id", executor_id)
        if executor_name and not isinstance(executor_name, str):
            raise TypeError("Expected argument 'executor_name' to be a str")
        pulumi.set(__self__, "executor_name", executor_name)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        pulumi.set(__self__, "group_name", group_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_publish and not isinstance(is_publish, bool):
            raise TypeError("Expected argument 'is_publish' to be a bool")
        pulumi.set(__self__, "is_publish", is_publish)
        if language and not isinstance(language, str):
            raise TypeError("Expected argument 'language' to be a str")
        pulumi.set(__self__, "language", language)
        if manifest_version and not isinstance(manifest_version, str):
            raise TypeError("Expected argument 'manifest_version' to be a str")
        pulumi.set(__self__, "manifest_version", manifest_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pipeline_id and not isinstance(pipeline_id, str):
            raise TypeError("Expected argument 'pipeline_id' to be a str")
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        if pipeline_run_id and not isinstance(pipeline_run_id, str):
            raise TypeError("Expected argument 'pipeline_run_id' to be a str")
        pulumi.set(__self__, "pipeline_run_id", pipeline_run_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if run_number and not isinstance(run_number, int):
            raise TypeError("Expected argument 'run_number' to be a int")
        pulumi.set(__self__, "run_number", run_number)
        if sources and not isinstance(sources, list):
            raise TypeError("Expected argument 'sources' to be a list")
        pulumi.set(__self__, "sources", sources)
        if stages and not isinstance(stages, list):
            raise TypeError("Expected argument 'stages' to be a list")
        pulumi.set(__self__, "stages", stages)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subject_id and not isinstance(subject_id, str):
            raise TypeError("Expected argument 'subject_id' to be a str")
        pulumi.set(__self__, "subject_id", subject_id)
        if trigger_type and not isinstance(trigger_type, str):
            raise TypeError("Expected argument 'trigger_type' to be a str")
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter
    def artifacts(self) -> Sequence['outputs.GetPipelineRunDetailArtifactResult']:
        """
        Indicates the artifacts after running a pipeline.
        The artifacts structure is documented below.
        """
        return pulumi.get(self, "artifacts")

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> _builtins.str:
        """
        Indicates the microservice ID.
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter(name="currentSystemTime")
    def current_system_time(self) -> _builtins.int:
        """
        Indicates the current system time.
        """
        return pulumi.get(self, "current_system_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the pipeline running description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="detailUrl")
    def detail_url(self) -> _builtins.str:
        """
        Indicates the pipeline detail URL.
        """
        return pulumi.get(self, "detail_url")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        Indicates the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="executorId")
    def executor_id(self) -> _builtins.str:
        """
        Indicates the executor ID.
        """
        return pulumi.get(self, "executor_id")

    @_builtins.property
    @pulumi.getter(name="executorName")
    def executor_name(self) -> _builtins.str:
        """
        Indicates the executor name.
        """
        return pulumi.get(self, "executor_name")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        Indicates the pipeline group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Indicates the pipeline group name.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isPublish")
    def is_publish(self) -> _builtins.bool:
        """
        Indicates whether the pipeline is a change-triggered pipeline.
        """
        return pulumi.get(self, "is_publish")

    @_builtins.property
    @pulumi.getter
    def language(self) -> _builtins.str:
        """
        Indicates the language.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter(name="manifestVersion")
    def manifest_version(self) -> _builtins.str:
        """
        Indicates the pipeline version.
        """
        return pulumi.get(self, "manifest_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the step name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> _builtins.str:
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter(name="pipelineRunId")
    def pipeline_run_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "pipeline_run_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="runNumber")
    def run_number(self) -> _builtins.int:
        """
        Indicates the pipeline running sequence number.
        """
        return pulumi.get(self, "run_number")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetPipelineRunDetailSourceResult']:
        """
        Indicates the pipeline source information.
        The sources structure is documented below.
        """
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter
    def stages(self) -> Sequence['outputs.GetPipelineRunDetailStageResult']:
        """
        Indicates the stage running information.
        The stages structure is documented below.
        """
        return pulumi.get(self, "stages")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Indicates the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the step status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subjectId")
    def subject_id(self) -> _builtins.str:
        """
        Indicates the pipeline run ID.
        """
        return pulumi.get(self, "subject_id")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Indicates the trigger type.
        """
        return pulumi.get(self, "trigger_type")


class AwaitableGetPipelineRunDetailResult(GetPipelineRunDetailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelineRunDetailResult(
            artifacts=self.artifacts,
            component_id=self.component_id,
            current_system_time=self.current_system_time,
            description=self.description,
            detail_url=self.detail_url,
            end_time=self.end_time,
            executor_id=self.executor_id,
            executor_name=self.executor_name,
            group_id=self.group_id,
            group_name=self.group_name,
            id=self.id,
            is_publish=self.is_publish,
            language=self.language,
            manifest_version=self.manifest_version,
            name=self.name,
            pipeline_id=self.pipeline_id,
            pipeline_run_id=self.pipeline_run_id,
            project_id=self.project_id,
            region=self.region,
            run_number=self.run_number,
            sources=self.sources,
            stages=self.stages,
            start_time=self.start_time,
            status=self.status,
            subject_id=self.subject_id,
            trigger_type=self.trigger_type)


def get_pipeline_run_detail(pipeline_id: Optional[_builtins.str] = None,
                            pipeline_run_id: Optional[_builtins.str] = None,
                            project_id: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPipelineRunDetailResult:
    """
    Use this data source to get the CodeArts pipeline run detail.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    codearts_project_id = config.require_object("codeartsProjectId")
    pipeline_id = config.require_object("pipelineId")
    test = huaweicloud.codearts.get_pipeline_run_detail(project_id=codearts_project_id,
        pipeline_id=pipeline_id)
    ```


    :param _builtins.str pipeline_id: Specifies the pipeline ID.
    :param _builtins.str pipeline_run_id: Specifies the pipeline run ID.
    :param _builtins.str project_id: Specifies the CodeArts project ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['pipelineId'] = pipeline_id
    __args__['pipelineRunId'] = pipeline_run_id
    __args__['projectId'] = project_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getPipelineRunDetail:getPipelineRunDetail', __args__, opts=opts, typ=GetPipelineRunDetailResult).value

    return AwaitableGetPipelineRunDetailResult(
        artifacts=pulumi.get(__ret__, 'artifacts'),
        component_id=pulumi.get(__ret__, 'component_id'),
        current_system_time=pulumi.get(__ret__, 'current_system_time'),
        description=pulumi.get(__ret__, 'description'),
        detail_url=pulumi.get(__ret__, 'detail_url'),
        end_time=pulumi.get(__ret__, 'end_time'),
        executor_id=pulumi.get(__ret__, 'executor_id'),
        executor_name=pulumi.get(__ret__, 'executor_name'),
        group_id=pulumi.get(__ret__, 'group_id'),
        group_name=pulumi.get(__ret__, 'group_name'),
        id=pulumi.get(__ret__, 'id'),
        is_publish=pulumi.get(__ret__, 'is_publish'),
        language=pulumi.get(__ret__, 'language'),
        manifest_version=pulumi.get(__ret__, 'manifest_version'),
        name=pulumi.get(__ret__, 'name'),
        pipeline_id=pulumi.get(__ret__, 'pipeline_id'),
        pipeline_run_id=pulumi.get(__ret__, 'pipeline_run_id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region=pulumi.get(__ret__, 'region'),
        run_number=pulumi.get(__ret__, 'run_number'),
        sources=pulumi.get(__ret__, 'sources'),
        stages=pulumi.get(__ret__, 'stages'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'),
        subject_id=pulumi.get(__ret__, 'subject_id'),
        trigger_type=pulumi.get(__ret__, 'trigger_type'))
def get_pipeline_run_detail_output(pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   pipeline_run_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPipelineRunDetailResult]:
    """
    Use this data source to get the CodeArts pipeline run detail.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    codearts_project_id = config.require_object("codeartsProjectId")
    pipeline_id = config.require_object("pipelineId")
    test = huaweicloud.codearts.get_pipeline_run_detail(project_id=codearts_project_id,
        pipeline_id=pipeline_id)
    ```


    :param _builtins.str pipeline_id: Specifies the pipeline ID.
    :param _builtins.str pipeline_run_id: Specifies the pipeline run ID.
    :param _builtins.str project_id: Specifies the CodeArts project ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['pipelineId'] = pipeline_id
    __args__['pipelineRunId'] = pipeline_run_id
    __args__['projectId'] = project_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getPipelineRunDetail:getPipelineRunDetail', __args__, opts=opts, typ=GetPipelineRunDetailResult)
    return __ret__.apply(lambda __response__: GetPipelineRunDetailResult(
        artifacts=pulumi.get(__response__, 'artifacts'),
        component_id=pulumi.get(__response__, 'component_id'),
        current_system_time=pulumi.get(__response__, 'current_system_time'),
        description=pulumi.get(__response__, 'description'),
        detail_url=pulumi.get(__response__, 'detail_url'),
        end_time=pulumi.get(__response__, 'end_time'),
        executor_id=pulumi.get(__response__, 'executor_id'),
        executor_name=pulumi.get(__response__, 'executor_name'),
        group_id=pulumi.get(__response__, 'group_id'),
        group_name=pulumi.get(__response__, 'group_name'),
        id=pulumi.get(__response__, 'id'),
        is_publish=pulumi.get(__response__, 'is_publish'),
        language=pulumi.get(__response__, 'language'),
        manifest_version=pulumi.get(__response__, 'manifest_version'),
        name=pulumi.get(__response__, 'name'),
        pipeline_id=pulumi.get(__response__, 'pipeline_id'),
        pipeline_run_id=pulumi.get(__response__, 'pipeline_run_id'),
        project_id=pulumi.get(__response__, 'project_id'),
        region=pulumi.get(__response__, 'region'),
        run_number=pulumi.get(__response__, 'run_number'),
        sources=pulumi.get(__response__, 'sources'),
        stages=pulumi.get(__response__, 'stages'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status'),
        subject_id=pulumi.get(__response__, 'subject_id'),
        trigger_type=pulumi.get(__response__, 'trigger_type')))
