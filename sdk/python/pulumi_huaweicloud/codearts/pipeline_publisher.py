# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PipelinePublisherArgs', 'PipelinePublisher']

@pulumi.input_type
class PipelinePublisherArgs:
    def __init__(__self__, *,
                 en_name: pulumi.Input[_builtins.str],
                 support_url: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 logo_url: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_url: Optional[pulumi.Input[_builtins.str]] = None,
                 website: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PipelinePublisher resource.
        :param pulumi.Input[_builtins.str] en_name: Specifies the publisher English name.
        :param pulumi.Input[_builtins.str] support_url: Specifies the support URL.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
        :param pulumi.Input[_builtins.str] logo_url: Specifies the logo URL.
        :param pulumi.Input[_builtins.str] name: Specifies the publisher name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source_url: Specifies the source URL.
        :param pulumi.Input[_builtins.str] website: Specifies the website URL.
        """
        pulumi.set(__self__, "en_name", en_name)
        pulumi.set(__self__, "support_url", support_url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if logo_url is not None:
            pulumi.set(__self__, "logo_url", logo_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_url is not None:
            pulumi.set(__self__, "source_url", source_url)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @_builtins.property
    @pulumi.getter(name="enName")
    def en_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the publisher English name.
        """
        return pulumi.get(self, "en_name")

    @en_name.setter
    def en_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "en_name", value)

    @_builtins.property
    @pulumi.getter(name="supportUrl")
    def support_url(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the support URL.
        """
        return pulumi.get(self, "support_url")

    @support_url.setter
    def support_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "support_url", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="logoUrl")
    def logo_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the logo URL.
        """
        return pulumi.get(self, "logo_url")

    @logo_url.setter
    def logo_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logo_url", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the publisher name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source URL.
        """
        return pulumi.get(self, "source_url")

    @source_url.setter
    def source_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_url", value)

    @_builtins.property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the website URL.
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "website", value)


@pulumi.input_type
class _PipelinePublisherState:
    def __init__(__self__, *,
                 auth_status: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 en_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 last_update_time: Optional[pulumi.Input[_builtins.str]] = None,
                 last_update_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_update_user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 logo_url: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_url: Optional[pulumi.Input[_builtins.str]] = None,
                 support_url: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 website: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PipelinePublisher resources.
        :param pulumi.Input[_builtins.str] auth_status: Indicates the authorization status.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
        :param pulumi.Input[_builtins.str] en_name: Specifies the publisher English name.
        :param pulumi.Input[_builtins.str] last_update_time: Indicates the update time.
        :param pulumi.Input[_builtins.str] last_update_user_id: Indicates the updater ID.
        :param pulumi.Input[_builtins.str] last_update_user_name: Indicates the updater name.
        :param pulumi.Input[_builtins.str] logo_url: Specifies the logo URL.
        :param pulumi.Input[_builtins.str] name: Specifies the publisher name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source_url: Specifies the source URL.
        :param pulumi.Input[_builtins.str] support_url: Specifies the support URL.
        :param pulumi.Input[_builtins.str] user_id: Indicates the user ID.
        :param pulumi.Input[_builtins.str] website: Specifies the website URL.
        """
        if auth_status is not None:
            pulumi.set(__self__, "auth_status", auth_status)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if en_name is not None:
            pulumi.set(__self__, "en_name", en_name)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if last_update_user_id is not None:
            pulumi.set(__self__, "last_update_user_id", last_update_user_id)
        if last_update_user_name is not None:
            pulumi.set(__self__, "last_update_user_name", last_update_user_name)
        if logo_url is not None:
            pulumi.set(__self__, "logo_url", logo_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_url is not None:
            pulumi.set(__self__, "source_url", source_url)
        if support_url is not None:
            pulumi.set(__self__, "support_url", support_url)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @_builtins.property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the authorization status.
        """
        return pulumi.get(self, "auth_status")

    @auth_status.setter
    def auth_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_status", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enName")
    def en_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the publisher English name.
        """
        return pulumi.get(self, "en_name")

    @en_name.setter
    def en_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "en_name", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_update_time", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdateUserId")
    def last_update_user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the updater ID.
        """
        return pulumi.get(self, "last_update_user_id")

    @last_update_user_id.setter
    def last_update_user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_update_user_id", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdateUserName")
    def last_update_user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the updater name.
        """
        return pulumi.get(self, "last_update_user_name")

    @last_update_user_name.setter
    def last_update_user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_update_user_name", value)

    @_builtins.property
    @pulumi.getter(name="logoUrl")
    def logo_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the logo URL.
        """
        return pulumi.get(self, "logo_url")

    @logo_url.setter
    def logo_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logo_url", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the publisher name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source URL.
        """
        return pulumi.get(self, "source_url")

    @source_url.setter
    def source_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_url", value)

    @_builtins.property
    @pulumi.getter(name="supportUrl")
    def support_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the support URL.
        """
        return pulumi.get(self, "support_url")

    @support_url.setter
    def support_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "support_url", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the user ID.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the website URL.
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "website", value)


@pulumi.type_token("huaweicloud:codearts/pipelinePublisher:PipelinePublisher")
class PipelinePublisher(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 en_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 logo_url: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_url: Optional[pulumi.Input[_builtins.str]] = None,
                 support_url: Optional[pulumi.Input[_builtins.str]] = None,
                 website: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts pipeline publisher resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        en_name = config.require_object("enName")
        description = config.require_object("description")
        website = config.require_object("website")
        support_url = config.require_object("supportUrl")
        source_url = config.require_object("sourceUrl")
        test = huaweicloud.codearts.PipelinePublisher("test",
            name=name,
            en_name=en_name,
            description=description,
            website=website,
            support_url=support_url,
            source_url=source_url)
        ```

        ## Import

        The publisher can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipelinePublisher:PipelinePublisher test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
        :param pulumi.Input[_builtins.str] en_name: Specifies the publisher English name.
        :param pulumi.Input[_builtins.str] logo_url: Specifies the logo URL.
        :param pulumi.Input[_builtins.str] name: Specifies the publisher name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source_url: Specifies the source URL.
        :param pulumi.Input[_builtins.str] support_url: Specifies the support URL.
        :param pulumi.Input[_builtins.str] website: Specifies the website URL.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelinePublisherArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts pipeline publisher resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        en_name = config.require_object("enName")
        description = config.require_object("description")
        website = config.require_object("website")
        support_url = config.require_object("supportUrl")
        source_url = config.require_object("sourceUrl")
        test = huaweicloud.codearts.PipelinePublisher("test",
            name=name,
            en_name=en_name,
            description=description,
            website=website,
            support_url=support_url,
            source_url=source_url)
        ```

        ## Import

        The publisher can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipelinePublisher:PipelinePublisher test <id>
        ```

        :param str resource_name: The name of the resource.
        :param PipelinePublisherArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelinePublisherArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 en_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 logo_url: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_url: Optional[pulumi.Input[_builtins.str]] = None,
                 support_url: Optional[pulumi.Input[_builtins.str]] = None,
                 website: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelinePublisherArgs.__new__(PipelinePublisherArgs)

            __props__.__dict__["description"] = description
            if en_name is None and not opts.urn:
                raise TypeError("Missing required property 'en_name'")
            __props__.__dict__["en_name"] = en_name
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["logo_url"] = logo_url
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["source_url"] = source_url
            if support_url is None and not opts.urn:
                raise TypeError("Missing required property 'support_url'")
            __props__.__dict__["support_url"] = support_url
            __props__.__dict__["website"] = website
            __props__.__dict__["auth_status"] = None
            __props__.__dict__["last_update_time"] = None
            __props__.__dict__["last_update_user_id"] = None
            __props__.__dict__["last_update_user_name"] = None
            __props__.__dict__["user_id"] = None
        super(PipelinePublisher, __self__).__init__(
            'huaweicloud:codearts/pipelinePublisher:PipelinePublisher',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_status: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            en_name: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            last_update_time: Optional[pulumi.Input[_builtins.str]] = None,
            last_update_user_id: Optional[pulumi.Input[_builtins.str]] = None,
            last_update_user_name: Optional[pulumi.Input[_builtins.str]] = None,
            logo_url: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            source_url: Optional[pulumi.Input[_builtins.str]] = None,
            support_url: Optional[pulumi.Input[_builtins.str]] = None,
            user_id: Optional[pulumi.Input[_builtins.str]] = None,
            website: Optional[pulumi.Input[_builtins.str]] = None) -> 'PipelinePublisher':
        """
        Get an existing PipelinePublisher resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_status: Indicates the authorization status.
        :param pulumi.Input[_builtins.str] description: Specifies the description.
        :param pulumi.Input[_builtins.str] en_name: Specifies the publisher English name.
        :param pulumi.Input[_builtins.str] last_update_time: Indicates the update time.
        :param pulumi.Input[_builtins.str] last_update_user_id: Indicates the updater ID.
        :param pulumi.Input[_builtins.str] last_update_user_name: Indicates the updater name.
        :param pulumi.Input[_builtins.str] logo_url: Specifies the logo URL.
        :param pulumi.Input[_builtins.str] name: Specifies the publisher name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source_url: Specifies the source URL.
        :param pulumi.Input[_builtins.str] support_url: Specifies the support URL.
        :param pulumi.Input[_builtins.str] user_id: Indicates the user ID.
        :param pulumi.Input[_builtins.str] website: Specifies the website URL.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelinePublisherState.__new__(_PipelinePublisherState)

        __props__.__dict__["auth_status"] = auth_status
        __props__.__dict__["description"] = description
        __props__.__dict__["en_name"] = en_name
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["last_update_time"] = last_update_time
        __props__.__dict__["last_update_user_id"] = last_update_user_id
        __props__.__dict__["last_update_user_name"] = last_update_user_name
        __props__.__dict__["logo_url"] = logo_url
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["source_url"] = source_url
        __props__.__dict__["support_url"] = support_url
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["website"] = website
        return PipelinePublisher(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the authorization status.
        """
        return pulumi.get(self, "auth_status")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enName")
    def en_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the publisher English name.
        """
        return pulumi.get(self, "en_name")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "last_update_time")

    @_builtins.property
    @pulumi.getter(name="lastUpdateUserId")
    def last_update_user_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the updater ID.
        """
        return pulumi.get(self, "last_update_user_id")

    @_builtins.property
    @pulumi.getter(name="lastUpdateUserName")
    def last_update_user_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the updater name.
        """
        return pulumi.get(self, "last_update_user_name")

    @_builtins.property
    @pulumi.getter(name="logoUrl")
    def logo_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the logo URL.
        """
        return pulumi.get(self, "logo_url")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the publisher name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the source URL.
        """
        return pulumi.get(self, "source_url")

    @_builtins.property
    @pulumi.getter(name="supportUrl")
    def support_url(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the support URL.
        """
        return pulumi.get(self, "support_url")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the user ID.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter
    def website(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the website URL.
        """
        return pulumi.get(self, "website")

