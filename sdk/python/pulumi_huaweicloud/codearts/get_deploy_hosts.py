# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDeployHostsResult',
    'AwaitableGetDeployHostsResult',
    'get_deploy_hosts',
    'get_deploy_hosts_output',
]

@pulumi.output_type
class GetDeployHostsResult:
    """
    A collection of values returned by getDeployHosts.
    """
    def __init__(__self__, as_proxy=None, environment_id=None, group_id=None, hosts=None, id=None, name=None, region=None):
        if as_proxy and not isinstance(as_proxy, str):
            raise TypeError("Expected argument 'as_proxy' to be a str")
        pulumi.set(__self__, "as_proxy", as_proxy)
        if environment_id and not isinstance(environment_id, str):
            raise TypeError("Expected argument 'environment_id' to be a str")
        pulumi.set(__self__, "environment_id", environment_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if hosts and not isinstance(hosts, list):
            raise TypeError("Expected argument 'hosts' to be a list")
        pulumi.set(__self__, "hosts", hosts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="asProxy")
    def as_proxy(self) -> Optional[_builtins.str]:
        """
        Indicates whether the host is an agent host.
        """
        return pulumi.get(self, "as_proxy")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetDeployHostsHostResult']:
        """
        Indicates the host list.
        The hosts structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the host name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetDeployHostsResult(GetDeployHostsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeployHostsResult(
            as_proxy=self.as_proxy,
            environment_id=self.environment_id,
            group_id=self.group_id,
            hosts=self.hosts,
            id=self.id,
            name=self.name,
            region=self.region)


def get_deploy_hosts(as_proxy: Optional[_builtins.str] = None,
                     environment_id: Optional[_builtins.str] = None,
                     group_id: Optional[_builtins.str] = None,
                     name: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeployHostsResult:
    """
    Use this data source to get the list of CodeArts deploy hosts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    group_id = config.require_object("groupId")
    test = huaweicloud.codearts.get_deploy_hosts(group_id=group_id)
    ```


    :param _builtins.str as_proxy: Specifies whether the host is proxy or not.
           Valid values are **true** and **false**.
    :param _builtins.str environment_id: Specifies the environment ID.
    :param _builtins.str group_id: Specifies the group ID.
    :param _builtins.str name: Specifies the name of host.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['asProxy'] = as_proxy
    __args__['environmentId'] = environment_id
    __args__['groupId'] = group_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getDeployHosts:getDeployHosts', __args__, opts=opts, typ=GetDeployHostsResult).value

    return AwaitableGetDeployHostsResult(
        as_proxy=pulumi.get(__ret__, 'as_proxy'),
        environment_id=pulumi.get(__ret__, 'environment_id'),
        group_id=pulumi.get(__ret__, 'group_id'),
        hosts=pulumi.get(__ret__, 'hosts'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'))
def get_deploy_hosts_output(as_proxy: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            environment_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            group_id: Optional[pulumi.Input[_builtins.str]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDeployHostsResult]:
    """
    Use this data source to get the list of CodeArts deploy hosts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    group_id = config.require_object("groupId")
    test = huaweicloud.codearts.get_deploy_hosts(group_id=group_id)
    ```


    :param _builtins.str as_proxy: Specifies whether the host is proxy or not.
           Valid values are **true** and **false**.
    :param _builtins.str environment_id: Specifies the environment ID.
    :param _builtins.str group_id: Specifies the group ID.
    :param _builtins.str name: Specifies the name of host.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['asProxy'] = as_proxy
    __args__['environmentId'] = environment_id
    __args__['groupId'] = group_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getDeployHosts:getDeployHosts', __args__, opts=opts, typ=GetDeployHostsResult)
    return __ret__.apply(lambda __response__: GetDeployHostsResult(
        as_proxy=pulumi.get(__response__, 'as_proxy'),
        environment_id=pulumi.get(__response__, 'environment_id'),
        group_id=pulumi.get(__response__, 'group_id'),
        hosts=pulumi.get(__response__, 'hosts'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region')))
