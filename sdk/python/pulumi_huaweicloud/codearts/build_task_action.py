# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BuildTaskActionArgs', 'BuildTaskAction']

@pulumi.input_type
class BuildTaskActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 job_id: pulumi.Input[_builtins.str],
                 build_no: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskActionParameterArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scm: Optional[pulumi.Input['BuildTaskActionScmArgs']] = None):
        """
        The set of arguments for constructing a BuildTaskAction resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action. Value can be **execute** and **stop**.
        :param pulumi.Input[_builtins.str] job_id: Specifies the build task ID.
        :param pulumi.Input[_builtins.str] build_no: Specifies the build task number, start from 1.
               Only valid when `action` is **stop**.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTaskActionParameterArgs']]] parameters: Specifies the parameter list. Only valid when `action` is **execute**.
               The parameter structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['BuildTaskActionScmArgs'] scm: Specifies the build execution SCM. Only valid when `action` is **execute**.
               The scm structure is documented below.
               
               <a name="block--parameter"></a>
               The `parameter` block supports:
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "job_id", job_id)
        if build_no is not None:
            pulumi.set(__self__, "build_no", build_no)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scm is not None:
            pulumi.set(__self__, "scm", scm)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the action. Value can be **execute** and **stop**.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the build task ID.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "job_id", value)

    @_builtins.property
    @pulumi.getter(name="buildNo")
    def build_no(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the build task number, start from 1.
        Only valid when `action` is **stop**.
        """
        return pulumi.get(self, "build_no")

    @build_no.setter
    def build_no(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build_no", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskActionParameterArgs']]]]:
        """
        Specifies the parameter list. Only valid when `action` is **execute**.
        The parameter structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskActionParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def scm(self) -> Optional[pulumi.Input['BuildTaskActionScmArgs']]:
        """
        Specifies the build execution SCM. Only valid when `action` is **execute**.
        The scm structure is documented below.

        <a name="block--parameter"></a>
        The `parameter` block supports:
        """
        return pulumi.get(self, "scm")

    @scm.setter
    def scm(self, value: Optional[pulumi.Input['BuildTaskActionScmArgs']]):
        pulumi.set(self, "scm", value)


@pulumi.input_type
class _BuildTaskActionState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 build_no: Optional[pulumi.Input[_builtins.str]] = None,
                 daily_build_number: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskActionParameterArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scm: Optional[pulumi.Input['BuildTaskActionScmArgs']] = None):
        """
        Input properties used for looking up and filtering BuildTaskAction resources.
        :param pulumi.Input[_builtins.str] action: Specifies the action. Value can be **execute** and **stop**.
        :param pulumi.Input[_builtins.str] build_no: Specifies the build task number, start from 1.
               Only valid when `action` is **stop**.
        :param pulumi.Input[_builtins.str] daily_build_number: Indicates the daily build number.
        :param pulumi.Input[_builtins.str] job_id: Specifies the build task ID.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTaskActionParameterArgs']]] parameters: Specifies the parameter list. Only valid when `action` is **execute**.
               The parameter structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['BuildTaskActionScmArgs'] scm: Specifies the build execution SCM. Only valid when `action` is **execute**.
               The scm structure is documented below.
               
               <a name="block--parameter"></a>
               The `parameter` block supports:
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if build_no is not None:
            pulumi.set(__self__, "build_no", build_no)
        if daily_build_number is not None:
            pulumi.set(__self__, "daily_build_number", daily_build_number)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scm is not None:
            pulumi.set(__self__, "scm", scm)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the action. Value can be **execute** and **stop**.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="buildNo")
    def build_no(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the build task number, start from 1.
        Only valid when `action` is **stop**.
        """
        return pulumi.get(self, "build_no")

    @build_no.setter
    def build_no(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build_no", value)

    @_builtins.property
    @pulumi.getter(name="dailyBuildNumber")
    def daily_build_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the daily build number.
        """
        return pulumi.get(self, "daily_build_number")

    @daily_build_number.setter
    def daily_build_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "daily_build_number", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the build task ID.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "job_id", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskActionParameterArgs']]]]:
        """
        Specifies the parameter list. Only valid when `action` is **execute**.
        The parameter structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskActionParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def scm(self) -> Optional[pulumi.Input['BuildTaskActionScmArgs']]:
        """
        Specifies the build execution SCM. Only valid when `action` is **execute**.
        The scm structure is documented below.

        <a name="block--parameter"></a>
        The `parameter` block supports:
        """
        return pulumi.get(self, "scm")

    @scm.setter
    def scm(self, value: Optional[pulumi.Input['BuildTaskActionScmArgs']]):
        pulumi.set(self, "scm", value)


@pulumi.type_token("huaweicloud:codearts/buildTaskAction:BuildTaskAction")
class BuildTaskAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 build_no: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskActionParameterArgs', 'BuildTaskActionParameterArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scm: Optional[pulumi.Input[Union['BuildTaskActionScmArgs', 'BuildTaskActionScmArgsDict']]] = None,
                 __props__=None):
        """
        Manages a CodeArts Build task action resource within HuaweiCloud.

        ## Example Usage

        ### execute a build task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        job_id = config.require_object("jobId")
        execute = huaweicloud.codearts.BuildTaskAction("execute",
            job_id=job_id,
            action="execute")
        ```

        ### stop a build task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        job_id = config.require_object("jobId")
        build_no = config.require_object("buildNo")
        stop = huaweicloud.codearts.BuildTaskAction("stop",
            job_id=job_id,
            action="stop",
            build_no=build_no)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action. Value can be **execute** and **stop**.
        :param pulumi.Input[_builtins.str] build_no: Specifies the build task number, start from 1.
               Only valid when `action` is **stop**.
        :param pulumi.Input[_builtins.str] job_id: Specifies the build task ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskActionParameterArgs', 'BuildTaskActionParameterArgsDict']]]] parameters: Specifies the parameter list. Only valid when `action` is **execute**.
               The parameter structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['BuildTaskActionScmArgs', 'BuildTaskActionScmArgsDict']] scm: Specifies the build execution SCM. Only valid when `action` is **execute**.
               The scm structure is documented below.
               
               <a name="block--parameter"></a>
               The `parameter` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BuildTaskActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts Build task action resource within HuaweiCloud.

        ## Example Usage

        ### execute a build task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        job_id = config.require_object("jobId")
        execute = huaweicloud.codearts.BuildTaskAction("execute",
            job_id=job_id,
            action="execute")
        ```

        ### stop a build task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        job_id = config.require_object("jobId")
        build_no = config.require_object("buildNo")
        stop = huaweicloud.codearts.BuildTaskAction("stop",
            job_id=job_id,
            action="stop",
            build_no=build_no)
        ```

        :param str resource_name: The name of the resource.
        :param BuildTaskActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BuildTaskActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 build_no: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskActionParameterArgs', 'BuildTaskActionParameterArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scm: Optional[pulumi.Input[Union['BuildTaskActionScmArgs', 'BuildTaskActionScmArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BuildTaskActionArgs.__new__(BuildTaskActionArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["build_no"] = build_no
            __props__.__dict__["enable_force_new"] = enable_force_new
            if job_id is None and not opts.urn:
                raise TypeError("Missing required property 'job_id'")
            __props__.__dict__["job_id"] = job_id
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["region"] = region
            __props__.__dict__["scm"] = scm
            __props__.__dict__["daily_build_number"] = None
        super(BuildTaskAction, __self__).__init__(
            'huaweicloud:codearts/buildTaskAction:BuildTaskAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            build_no: Optional[pulumi.Input[_builtins.str]] = None,
            daily_build_number: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            job_id: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskActionParameterArgs', 'BuildTaskActionParameterArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            scm: Optional[pulumi.Input[Union['BuildTaskActionScmArgs', 'BuildTaskActionScmArgsDict']]] = None) -> 'BuildTaskAction':
        """
        Get an existing BuildTaskAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action. Value can be **execute** and **stop**.
        :param pulumi.Input[_builtins.str] build_no: Specifies the build task number, start from 1.
               Only valid when `action` is **stop**.
        :param pulumi.Input[_builtins.str] daily_build_number: Indicates the daily build number.
        :param pulumi.Input[_builtins.str] job_id: Specifies the build task ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskActionParameterArgs', 'BuildTaskActionParameterArgsDict']]]] parameters: Specifies the parameter list. Only valid when `action` is **execute**.
               The parameter structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['BuildTaskActionScmArgs', 'BuildTaskActionScmArgsDict']] scm: Specifies the build execution SCM. Only valid when `action` is **execute**.
               The scm structure is documented below.
               
               <a name="block--parameter"></a>
               The `parameter` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BuildTaskActionState.__new__(_BuildTaskActionState)

        __props__.__dict__["action"] = action
        __props__.__dict__["build_no"] = build_no
        __props__.__dict__["daily_build_number"] = daily_build_number
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["job_id"] = job_id
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["region"] = region
        __props__.__dict__["scm"] = scm
        return BuildTaskAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the action. Value can be **execute** and **stop**.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="buildNo")
    def build_no(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the build task number, start from 1.
        Only valid when `action` is **stop**.
        """
        return pulumi.get(self, "build_no")

    @_builtins.property
    @pulumi.getter(name="dailyBuildNumber")
    def daily_build_number(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the daily build number.
        """
        return pulumi.get(self, "daily_build_number")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the build task ID.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Sequence['outputs.BuildTaskActionParameter']]]:
        """
        Specifies the parameter list. Only valid when `action` is **execute**.
        The parameter structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def scm(self) -> pulumi.Output[Optional['outputs.BuildTaskActionScm']]:
        """
        Specifies the build execution SCM. Only valid when `action` is **execute**.
        The scm structure is documented below.

        <a name="block--parameter"></a>
        The `parameter` block supports:
        """
        return pulumi.get(self, "scm")

