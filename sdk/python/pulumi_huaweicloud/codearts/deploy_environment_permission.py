# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DeployEnvironmentPermissionInitArgs', 'DeployEnvironmentPermission']

@pulumi.input_type
class DeployEnvironmentPermissionInitArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[_builtins.str],
                 environment_id: pulumi.Input[_builtins.str],
                 permission_name: pulumi.Input[_builtins.str],
                 role_id: pulumi.Input[_builtins.str],
                 permission_value: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DeployEnvironmentPermission resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the environment ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_name: Specifies the permission name.
               Valid values are **can_view**, **can_edit**, **can_delete**, **can_deploy** and **can_manage**.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] role_id: Specifies the role ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] permission_value: Specifies whether to enable the permission.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "permission_name", permission_name)
        pulumi.set(__self__, "role_id", role_id)
        if permission_value is not None:
            pulumi.set(__self__, "permission_value", permission_value)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the application ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the environment ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionName")
    def permission_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the permission name.
        Valid values are **can_view**, **can_edit**, **can_delete**, **can_deploy** and **can_manage**.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "permission_name")

    @permission_name.setter
    def permission_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "permission_name", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the role ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionValue")
    def permission_value(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the permission.
        """
        return pulumi.get(self, "permission_value")

    @permission_value.setter
    def permission_value(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "permission_value", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DeployEnvironmentPermissionState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_name: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_value: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeployEnvironmentPermission resources.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the environment ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_name: Specifies the permission name.
               Valid values are **can_view**, **can_edit**, **can_delete**, **can_deploy** and **can_manage**.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] permission_value: Specifies whether to enable the permission.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] role_id: Specifies the role ID.
               Changing this creates a new resource.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if permission_name is not None:
            pulumi.set(__self__, "permission_name", permission_name)
        if permission_value is not None:
            pulumi.set(__self__, "permission_value", permission_value)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the environment ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionName")
    def permission_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the permission name.
        Valid values are **can_view**, **can_edit**, **can_delete**, **can_deploy** and **can_manage**.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "permission_name")

    @permission_name.setter
    def permission_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "permission_name", value)

    @_builtins.property
    @pulumi.getter(name="permissionValue")
    def permission_value(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the permission.
        """
        return pulumi.get(self, "permission_value")

    @permission_value.setter
    def permission_value(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "permission_value", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the role ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_id", value)


@pulumi.type_token("huaweicloud:codearts/deployEnvironmentPermission:DeployEnvironmentPermission")
class DeployEnvironmentPermission(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_name: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_value: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts deploy environment permission resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        application_id = config.require_object("applicationId")
        environment_id = config.require_object("environmentId")
        role_id = config.require_object("roleId")
        test = huaweicloud.codearts.DeployEnvironmentPermission("test",
            application_id=application_id,
            environment_id=environment_id,
            role_id=role_id,
            permission_name="can_delete",
            permission_value=False)
        ```

        ## Import

        The CodeArts deploy environment permission resource can be imported using the `application_id`, `environment_id`,

        `role_id` and `permission_name`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/deployEnvironmentPermission:DeployEnvironmentPermission test <app_id>/<env_id>/<role_id>/<permission_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the environment ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_name: Specifies the permission name.
               Valid values are **can_view**, **can_edit**, **can_delete**, **can_deploy** and **can_manage**.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] permission_value: Specifies whether to enable the permission.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] role_id: Specifies the role ID.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeployEnvironmentPermissionInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts deploy environment permission resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        application_id = config.require_object("applicationId")
        environment_id = config.require_object("environmentId")
        role_id = config.require_object("roleId")
        test = huaweicloud.codearts.DeployEnvironmentPermission("test",
            application_id=application_id,
            environment_id=environment_id,
            role_id=role_id,
            permission_name="can_delete",
            permission_value=False)
        ```

        ## Import

        The CodeArts deploy environment permission resource can be imported using the `application_id`, `environment_id`,

        `role_id` and `permission_name`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/deployEnvironmentPermission:DeployEnvironmentPermission test <app_id>/<env_id>/<role_id>/<permission_name>
        ```

        :param str resource_name: The name of the resource.
        :param DeployEnvironmentPermissionInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeployEnvironmentPermissionInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_name: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_value: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeployEnvironmentPermissionInitArgs.__new__(DeployEnvironmentPermissionInitArgs)

            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            if permission_name is None and not opts.urn:
                raise TypeError("Missing required property 'permission_name'")
            __props__.__dict__["permission_name"] = permission_name
            __props__.__dict__["permission_value"] = permission_value
            __props__.__dict__["region"] = region
            if role_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_id'")
            __props__.__dict__["role_id"] = role_id
        super(DeployEnvironmentPermission, __self__).__init__(
            'huaweicloud:codearts/deployEnvironmentPermission:DeployEnvironmentPermission',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[_builtins.str]] = None,
            environment_id: Optional[pulumi.Input[_builtins.str]] = None,
            permission_name: Optional[pulumi.Input[_builtins.str]] = None,
            permission_value: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            role_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DeployEnvironmentPermission':
        """
        Get an existing DeployEnvironmentPermission resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the environment ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_name: Specifies the permission name.
               Valid values are **can_view**, **can_edit**, **can_delete**, **can_deploy** and **can_manage**.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] permission_value: Specifies whether to enable the permission.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] role_id: Specifies the role ID.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeployEnvironmentPermissionState.__new__(_DeployEnvironmentPermissionState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["permission_name"] = permission_name
        __props__.__dict__["permission_value"] = permission_value
        __props__.__dict__["region"] = region
        __props__.__dict__["role_id"] = role_id
        return DeployEnvironmentPermission(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the application ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the environment ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter(name="permissionName")
    def permission_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the permission name.
        Valid values are **can_view**, **can_edit**, **can_delete**, **can_deploy** and **can_manage**.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "permission_name")

    @_builtins.property
    @pulumi.getter(name="permissionValue")
    def permission_value(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable the permission.
        """
        return pulumi.get(self, "permission_value")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the role ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "role_id")

