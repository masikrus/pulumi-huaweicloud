# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPipelineRunRecordsResult',
    'AwaitableGetPipelineRunRecordsResult',
    'get_pipeline_run_records',
    'get_pipeline_run_records_output',
]

@pulumi.output_type
class GetPipelineRunRecordsResult:
    """
    A collection of values returned by getPipelineRunRecords.
    """
    def __init__(__self__, end_time=None, id=None, pipeline_id=None, project_id=None, records=None, region=None, sort_dir=None, sort_key=None, start_time=None, statuses=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pipeline_id and not isinstance(pipeline_id, str):
            raise TypeError("Expected argument 'pipeline_id' to be a str")
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Indicates the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> _builtins.str:
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetPipelineRunRecordsRecordResult']:
        """
        Indicates the pipeline record list.
        The records structure is documented below.
        """
        return pulumi.get(self, "records")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        """
        Indicates the start time.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the stage status.
        """
        return pulumi.get(self, "statuses")


class AwaitableGetPipelineRunRecordsResult(GetPipelineRunRecordsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelineRunRecordsResult(
            end_time=self.end_time,
            id=self.id,
            pipeline_id=self.pipeline_id,
            project_id=self.project_id,
            records=self.records,
            region=self.region,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            start_time=self.start_time,
            statuses=self.statuses)


def get_pipeline_run_records(end_time: Optional[_builtins.str] = None,
                             pipeline_id: Optional[_builtins.str] = None,
                             project_id: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             sort_dir: Optional[_builtins.str] = None,
                             sort_key: Optional[_builtins.str] = None,
                             start_time: Optional[_builtins.str] = None,
                             statuses: Optional[Sequence[_builtins.str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPipelineRunRecordsResult:
    """
    Use this data source to get the CodeArts pipeline run records.


    :param _builtins.str end_time: Specifies the end time.
    :param _builtins.str pipeline_id: Specifies the pipeline ID.
    :param _builtins.str project_id: Specifies the CodeArts project ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sorting sequence. Value can be **asc** and **desc**.
    :param _builtins.str sort_key: Specifies the sorting attribute. Value can be **start_time**.
    :param _builtins.str start_time: Specifies the start time.
    :param Sequence[_builtins.str] statuses: Specifies the list of status.
           Value can be as follows:
           + **COMPLETED**: completed
           + **RUNNING**: running
           + **FAILED**: failed
           + **CANCELED**: canceled
           + **PAUSED**: paused
           + **SUSPEND**: suspended
           + **IGNORED**: ignored
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['pipelineId'] = pipeline_id
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['startTime'] = start_time
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getPipelineRunRecords:getPipelineRunRecords', __args__, opts=opts, typ=GetPipelineRunRecordsResult).value

    return AwaitableGetPipelineRunRecordsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        pipeline_id=pulumi.get(__ret__, 'pipeline_id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        records=pulumi.get(__ret__, 'records'),
        region=pulumi.get(__ret__, 'region'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        start_time=pulumi.get(__ret__, 'start_time'),
        statuses=pulumi.get(__ret__, 'statuses'))
def get_pipeline_run_records_output(end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPipelineRunRecordsResult]:
    """
    Use this data source to get the CodeArts pipeline run records.


    :param _builtins.str end_time: Specifies the end time.
    :param _builtins.str pipeline_id: Specifies the pipeline ID.
    :param _builtins.str project_id: Specifies the CodeArts project ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sorting sequence. Value can be **asc** and **desc**.
    :param _builtins.str sort_key: Specifies the sorting attribute. Value can be **start_time**.
    :param _builtins.str start_time: Specifies the start time.
    :param Sequence[_builtins.str] statuses: Specifies the list of status.
           Value can be as follows:
           + **COMPLETED**: completed
           + **RUNNING**: running
           + **FAILED**: failed
           + **CANCELED**: canceled
           + **PAUSED**: paused
           + **SUSPEND**: suspended
           + **IGNORED**: ignored
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['pipelineId'] = pipeline_id
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['startTime'] = start_time
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getPipelineRunRecords:getPipelineRunRecords', __args__, opts=opts, typ=GetPipelineRunRecordsResult)
    return __ret__.apply(lambda __response__: GetPipelineRunRecordsResult(
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        pipeline_id=pulumi.get(__response__, 'pipeline_id'),
        project_id=pulumi.get(__response__, 'project_id'),
        records=pulumi.get(__response__, 'records'),
        region=pulumi.get(__response__, 'region'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        start_time=pulumi.get(__response__, 'start_time'),
        statuses=pulumi.get(__response__, 'statuses')))
