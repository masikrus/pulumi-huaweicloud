# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DeployApplicationGroupArgs', 'DeployApplicationGroup']

@pulumi.input_type
class DeployApplicationGroupArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DeployApplicationGroup resource.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the application group name.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent application group ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "project_id", project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the project ID for CodeArts service.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent application group ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DeployApplicationGroupState:
    def __init__(__self__, *,
                 application_count: Optional[pulumi.Input[_builtins.int]] = None,
                 childrens: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ordinal: Optional[pulumi.Input[_builtins.int]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeployApplicationGroup resources.
        :param pulumi.Input[_builtins.int] application_count: Indicates the total number of applications in the group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] childrens: Indicates the child group name list.
        :param pulumi.Input[_builtins.str] created_by: Indicates the ID of the group creator.
        :param pulumi.Input[_builtins.str] name: Specifies the application group name.
        :param pulumi.Input[_builtins.int] ordinal: Indicates the group sorting field.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent application group ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] path: Indicates the group path.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] updated_by: Indicates the ID of the user who last updates the group.
        """
        if application_count is not None:
            pulumi.set(__self__, "application_count", application_count)
        if childrens is not None:
            pulumi.set(__self__, "childrens", childrens)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ordinal is not None:
            pulumi.set(__self__, "ordinal", ordinal)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="applicationCount")
    def application_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the total number of applications in the group.
        """
        return pulumi.get(self, "application_count")

    @application_count.setter
    def application_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "application_count", value)

    @_builtins.property
    @pulumi.getter
    def childrens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the child group name list.
        """
        return pulumi.get(self, "childrens")

    @childrens.setter
    def childrens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "childrens", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of the group creator.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the group sorting field.
        """
        return pulumi.get(self, "ordinal")

    @ordinal.setter
    def ordinal(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ordinal", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent application group ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the group path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project ID for CodeArts service.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of the user who last updates the group.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)


@pulumi.type_token("huaweicloud:codearts/deployApplicationGroup:DeployApplicationGroup")
class DeployApplicationGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts deploy application group resource within HuaweiCloud.

        ## Example Usage

        ### Create a top-level group

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        name = config.require_object("name")
        test = huaweicloud.codearts.DeployApplicationGroup("test",
            project_id=project_id,
            name=name)
        ```

        ### Create a sub-level group

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        name = config.require_object("name")
        parent_id = config.require_object("parentId")
        test = huaweicloud.codearts.DeployApplicationGroup("test",
            project_id=project_id,
            name=name,
            parent_id=parent_id)
        ```

        ## Import

        The application group can be imported using the `project_id` and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/deployApplicationGroup:DeployApplicationGroup test <project_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Specifies the application group name.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent application group ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeployApplicationGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts deploy application group resource within HuaweiCloud.

        ## Example Usage

        ### Create a top-level group

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        name = config.require_object("name")
        test = huaweicloud.codearts.DeployApplicationGroup("test",
            project_id=project_id,
            name=name)
        ```

        ### Create a sub-level group

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        name = config.require_object("name")
        parent_id = config.require_object("parentId")
        test = huaweicloud.codearts.DeployApplicationGroup("test",
            project_id=project_id,
            name=name,
            parent_id=parent_id)
        ```

        ## Import

        The application group can be imported using the `project_id` and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/deployApplicationGroup:DeployApplicationGroup test <project_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param DeployApplicationGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeployApplicationGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeployApplicationGroupArgs.__new__(DeployApplicationGroupArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["parent_id"] = parent_id
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["region"] = region
            __props__.__dict__["application_count"] = None
            __props__.__dict__["childrens"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["ordinal"] = None
            __props__.__dict__["path"] = None
            __props__.__dict__["updated_by"] = None
        super(DeployApplicationGroup, __self__).__init__(
            'huaweicloud:codearts/deployApplicationGroup:DeployApplicationGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_count: Optional[pulumi.Input[_builtins.int]] = None,
            childrens: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            ordinal: Optional[pulumi.Input[_builtins.int]] = None,
            parent_id: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None) -> 'DeployApplicationGroup':
        """
        Get an existing DeployApplicationGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] application_count: Indicates the total number of applications in the group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] childrens: Indicates the child group name list.
        :param pulumi.Input[_builtins.str] created_by: Indicates the ID of the group creator.
        :param pulumi.Input[_builtins.str] name: Specifies the application group name.
        :param pulumi.Input[_builtins.int] ordinal: Indicates the group sorting field.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent application group ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] path: Indicates the group path.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] updated_by: Indicates the ID of the user who last updates the group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeployApplicationGroupState.__new__(_DeployApplicationGroupState)

        __props__.__dict__["application_count"] = application_count
        __props__.__dict__["childrens"] = childrens
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["name"] = name
        __props__.__dict__["ordinal"] = ordinal
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["path"] = path
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["updated_by"] = updated_by
        return DeployApplicationGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationCount")
    def application_count(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the total number of applications in the group.
        """
        return pulumi.get(self, "application_count")

    @_builtins.property
    @pulumi.getter
    def childrens(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Indicates the child group name list.
        """
        return pulumi.get(self, "childrens")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the ID of the group creator.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the application group name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the group sorting field.
        """
        return pulumi.get(self, "ordinal")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the parent application group ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the group path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the project ID for CodeArts service.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the ID of the user who last updates the group.
        """
        return pulumi.get(self, "updated_by")

