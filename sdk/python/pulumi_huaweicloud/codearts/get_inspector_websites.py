# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInspectorWebsitesResult',
    'AwaitableGetInspectorWebsitesResult',
    'get_inspector_websites',
    'get_inspector_websites_output',
]

@pulumi.output_type
class GetInspectorWebsitesResult:
    """
    A collection of values returned by getInspectorWebsites.
    """
    def __init__(__self__, auth_status=None, domain_id=None, id=None, top_level_domain_num=None, websites=None):
        if auth_status and not isinstance(auth_status, str):
            raise TypeError("Expected argument 'auth_status' to be a str")
        pulumi.set(__self__, "auth_status", auth_status)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if top_level_domain_num and not isinstance(top_level_domain_num, int):
            raise TypeError("Expected argument 'top_level_domain_num' to be a int")
        pulumi.set(__self__, "top_level_domain_num", top_level_domain_num)
        if websites and not isinstance(websites, list):
            raise TypeError("Expected argument 'websites' to be a list")
        pulumi.set(__self__, "websites", websites)

    @_builtins.property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> Optional[_builtins.str]:
        """
        Indicates the auth status of website.
        """
        return pulumi.get(self, "auth_status")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="topLevelDomainNum")
    def top_level_domain_num(self) -> _builtins.int:
        """
        Indicates the number of top level domain.
        """
        return pulumi.get(self, "top_level_domain_num")

    @_builtins.property
    @pulumi.getter
    def websites(self) -> Sequence['outputs.GetInspectorWebsitesWebsiteResult']:
        """
        Indicates the websites list.
        The websites structure is documented below.
        """
        return pulumi.get(self, "websites")


class AwaitableGetInspectorWebsitesResult(GetInspectorWebsitesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInspectorWebsitesResult(
            auth_status=self.auth_status,
            domain_id=self.domain_id,
            id=self.id,
            top_level_domain_num=self.top_level_domain_num,
            websites=self.websites)


def get_inspector_websites(auth_status: Optional[_builtins.str] = None,
                           domain_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInspectorWebsitesResult:
    """
    Use this data source to get the list of CodeArts inspector websites.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.codearts.get_inspector_websites()
    ```


    :param _builtins.str auth_status: Specifies the auth status of website.
           Valid values are:
           + **unauth**: Unauthorized.
           + **auth**: Authorized.
           + **invalid**: Authentication file is invalid.
           + **manual**: Manual authentication.
           + **skip**: Authentication free.
    :param _builtins.str domain_id: Specifies the domain ID.
    """
    __args__ = dict()
    __args__['authStatus'] = auth_status
    __args__['domainId'] = domain_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getInspectorWebsites:getInspectorWebsites', __args__, opts=opts, typ=GetInspectorWebsitesResult).value

    return AwaitableGetInspectorWebsitesResult(
        auth_status=pulumi.get(__ret__, 'auth_status'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        id=pulumi.get(__ret__, 'id'),
        top_level_domain_num=pulumi.get(__ret__, 'top_level_domain_num'),
        websites=pulumi.get(__ret__, 'websites'))
def get_inspector_websites_output(auth_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  domain_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInspectorWebsitesResult]:
    """
    Use this data source to get the list of CodeArts inspector websites.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.codearts.get_inspector_websites()
    ```


    :param _builtins.str auth_status: Specifies the auth status of website.
           Valid values are:
           + **unauth**: Unauthorized.
           + **auth**: Authorized.
           + **invalid**: Authentication file is invalid.
           + **manual**: Manual authentication.
           + **skip**: Authentication free.
    :param _builtins.str domain_id: Specifies the domain ID.
    """
    __args__ = dict()
    __args__['authStatus'] = auth_status
    __args__['domainId'] = domain_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getInspectorWebsites:getInspectorWebsites', __args__, opts=opts, typ=GetInspectorWebsitesResult)
    return __ret__.apply(lambda __response__: GetInspectorWebsitesResult(
        auth_status=pulumi.get(__response__, 'auth_status'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        id=pulumi.get(__response__, 'id'),
        top_level_domain_num=pulumi.get(__response__, 'top_level_domain_num'),
        websites=pulumi.get(__response__, 'websites')))
