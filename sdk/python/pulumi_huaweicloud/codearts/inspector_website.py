# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['InspectorWebsiteArgs', 'InspectorWebsite']

@pulumi.input_type
class InspectorWebsiteArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[_builtins.str],
                 website_address: pulumi.Input[_builtins.str],
                 website_name: pulumi.Input[_builtins.str],
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 login_cookie: Optional[pulumi.Input[_builtins.str]] = None,
                 login_password: Optional[pulumi.Input[_builtins.str]] = None,
                 login_url: Optional[pulumi.Input[_builtins.str]] = None,
                 login_username: Optional[pulumi.Input[_builtins.str]] = None,
                 verify_url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a InspectorWebsite resource.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authentication type. Changing this parameter will create a
               new resource. Valid values are:
               + **free**: Verification Free. Before using this authentication method, please confirm the following instructions.
               Please confirm that your account has completed real-name authentication and is not a restricted account. Please confirm
               that you have obtained the relevant legal rights to scan the scanned objects. Please confirm that your scanning behavior
               has legal and reasonable purposes and complies with applicable laws and regulations. Illegal scanning with this Service
               is not allowed. If there are any violations to the terms and conditions described here, Huawei is entitled to immediately
               terminate your use of this Service and you shall compensate us and any related third parties for any losses incurred therefrom.
               + **auto**: One-Click Verification. Before using this authentication method, please confirm that the server of the site
               to be detected is built in HuaweiCloud, and that the server is the asset of your current login account.
        :param pulumi.Input[_builtins.str] website_address: Specifies the unique website address. The maximum length is `256`.
               Changing this parameter will create a new resource.
               The format should be `http(s)://example.com` or `http(s)://{public IPv4 address}:{PORT}`.
        :param pulumi.Input[_builtins.str] website_name: Specifies the website name. The valid length is limited from `1` to `50`.
               Changing this parameter will create a new resource. Only Chinese characters, letters, digits, hyphens (-) and
               underscores (_) are allowed, and cannot start with a hyphen (-).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] http_headers: Specifies the custom HTTP request headers, the format is key/value pairs.
        :param pulumi.Input[_builtins.str] login_cookie: Specifies the login cookie.
        :param pulumi.Input[_builtins.str] login_password: Specifies the login password. The maximum length is `50`.
               
               > Fields `login_url`, `login_username` and `login_password` must be set simultaneously.
        :param pulumi.Input[_builtins.str] login_url: Specifies the login URL. The login address and domain name must be the same as the field
               `website_address`, for example: `http(s)://example.com/login`. The maximum length is `2048`.
        :param pulumi.Input[_builtins.str] login_username: Specifies the login username. The maximum length is `256`.
        :param pulumi.Input[_builtins.str] verify_url: Specifies the verify URL that can only be accessed after successful login.
               CodeArts inspector will use this URL to quickly determine whether your login information is valid.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "website_address", website_address)
        pulumi.set(__self__, "website_name", website_name)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if login_cookie is not None:
            pulumi.set(__self__, "login_cookie", login_cookie)
        if login_password is not None:
            pulumi.set(__self__, "login_password", login_password)
        if login_url is not None:
            pulumi.set(__self__, "login_url", login_url)
        if login_username is not None:
            pulumi.set(__self__, "login_username", login_username)
        if verify_url is not None:
            pulumi.set(__self__, "verify_url", verify_url)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the authentication type. Changing this parameter will create a
        new resource. Valid values are:
        + **free**: Verification Free. Before using this authentication method, please confirm the following instructions.
        Please confirm that your account has completed real-name authentication and is not a restricted account. Please confirm
        that you have obtained the relevant legal rights to scan the scanned objects. Please confirm that your scanning behavior
        has legal and reasonable purposes and complies with applicable laws and regulations. Illegal scanning with this Service
        is not allowed. If there are any violations to the terms and conditions described here, Huawei is entitled to immediately
        terminate your use of this Service and you shall compensate us and any related third parties for any losses incurred therefrom.
        + **auto**: One-Click Verification. Before using this authentication method, please confirm that the server of the site
        to be detected is built in HuaweiCloud, and that the server is the asset of your current login account.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter(name="websiteAddress")
    def website_address(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the unique website address. The maximum length is `256`.
        Changing this parameter will create a new resource.
        The format should be `http(s)://example.com` or `http(s)://{public IPv4 address}:{PORT}`.
        """
        return pulumi.get(self, "website_address")

    @website_address.setter
    def website_address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "website_address", value)

    @_builtins.property
    @pulumi.getter(name="websiteName")
    def website_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the website name. The valid length is limited from `1` to `50`.
        Changing this parameter will create a new resource. Only Chinese characters, letters, digits, hyphens (-) and
        underscores (_) are allowed, and cannot start with a hyphen (-).
        """
        return pulumi.get(self, "website_name")

    @website_name.setter
    def website_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "website_name", value)

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the custom HTTP request headers, the format is key/value pairs.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "http_headers", value)

    @_builtins.property
    @pulumi.getter(name="loginCookie")
    def login_cookie(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login cookie.
        """
        return pulumi.get(self, "login_cookie")

    @login_cookie.setter
    def login_cookie(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "login_cookie", value)

    @_builtins.property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login password. The maximum length is `50`.

        > Fields `login_url`, `login_username` and `login_password` must be set simultaneously.
        """
        return pulumi.get(self, "login_password")

    @login_password.setter
    def login_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "login_password", value)

    @_builtins.property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login URL. The login address and domain name must be the same as the field
        `website_address`, for example: `http(s)://example.com/login`. The maximum length is `2048`.
        """
        return pulumi.get(self, "login_url")

    @login_url.setter
    def login_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "login_url", value)

    @_builtins.property
    @pulumi.getter(name="loginUsername")
    def login_username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login username. The maximum length is `256`.
        """
        return pulumi.get(self, "login_username")

    @login_username.setter
    def login_username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "login_username", value)

    @_builtins.property
    @pulumi.getter(name="verifyUrl")
    def verify_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the verify URL that can only be accessed after successful login.
        CodeArts inspector will use this URL to quickly determine whether your login information is valid.
        """
        return pulumi.get(self, "verify_url")

    @verify_url.setter
    def verify_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "verify_url", value)


@pulumi.input_type
class _InspectorWebsiteState:
    def __init__(__self__, *,
                 auth_status: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 high: Optional[pulumi.Input[_builtins.int]] = None,
                 hint: Optional[pulumi.Input[_builtins.int]] = None,
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 login_cookie: Optional[pulumi.Input[_builtins.str]] = None,
                 login_password: Optional[pulumi.Input[_builtins.str]] = None,
                 login_url: Optional[pulumi.Input[_builtins.str]] = None,
                 login_username: Optional[pulumi.Input[_builtins.str]] = None,
                 low: Optional[pulumi.Input[_builtins.int]] = None,
                 middle: Optional[pulumi.Input[_builtins.int]] = None,
                 verify_url: Optional[pulumi.Input[_builtins.str]] = None,
                 website_address: Optional[pulumi.Input[_builtins.str]] = None,
                 website_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering InspectorWebsite resources.
        :param pulumi.Input[_builtins.str] auth_status: The auth status of website. Valid values are:
               + **unauth**: Unauthorized.
               + **auth**: Authorized.
               + **invalid**: Authentication file is invalid.
               + **manual**: Manual authentication.
               + **skip**: Authentication free.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authentication type. Changing this parameter will create a
               new resource. Valid values are:
               + **free**: Verification Free. Before using this authentication method, please confirm the following instructions.
               Please confirm that your account has completed real-name authentication and is not a restricted account. Please confirm
               that you have obtained the relevant legal rights to scan the scanned objects. Please confirm that your scanning behavior
               has legal and reasonable purposes and complies with applicable laws and regulations. Illegal scanning with this Service
               is not allowed. If there are any violations to the terms and conditions described here, Huawei is entitled to immediately
               terminate your use of this Service and you shall compensate us and any related third parties for any losses incurred therefrom.
               + **auto**: One-Click Verification. Before using this authentication method, please confirm that the server of the site
               to be detected is built in HuaweiCloud, and that the server is the asset of your current login account.
        :param pulumi.Input[_builtins.str] created_at: The time to create website.
        :param pulumi.Input[_builtins.int] high: The number of high-risk vulnerabilities.
        :param pulumi.Input[_builtins.int] hint: The number of hint-risk vulnerabilities.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] http_headers: Specifies the custom HTTP request headers, the format is key/value pairs.
        :param pulumi.Input[_builtins.str] login_cookie: Specifies the login cookie.
        :param pulumi.Input[_builtins.str] login_password: Specifies the login password. The maximum length is `50`.
               
               > Fields `login_url`, `login_username` and `login_password` must be set simultaneously.
        :param pulumi.Input[_builtins.str] login_url: Specifies the login URL. The login address and domain name must be the same as the field
               `website_address`, for example: `http(s)://example.com/login`. The maximum length is `2048`.
        :param pulumi.Input[_builtins.str] login_username: Specifies the login username. The maximum length is `256`.
        :param pulumi.Input[_builtins.int] low: The number of low-severity vulnerabilities.
        :param pulumi.Input[_builtins.int] middle: The number of medium-risk vulnerabilities.
        :param pulumi.Input[_builtins.str] verify_url: Specifies the verify URL that can only be accessed after successful login.
               CodeArts inspector will use this URL to quickly determine whether your login information is valid.
        :param pulumi.Input[_builtins.str] website_address: Specifies the unique website address. The maximum length is `256`.
               Changing this parameter will create a new resource.
               The format should be `http(s)://example.com` or `http(s)://{public IPv4 address}:{PORT}`.
        :param pulumi.Input[_builtins.str] website_name: Specifies the website name. The valid length is limited from `1` to `50`.
               Changing this parameter will create a new resource. Only Chinese characters, letters, digits, hyphens (-) and
               underscores (_) are allowed, and cannot start with a hyphen (-).
        """
        if auth_status is not None:
            pulumi.set(__self__, "auth_status", auth_status)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if high is not None:
            pulumi.set(__self__, "high", high)
        if hint is not None:
            pulumi.set(__self__, "hint", hint)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if login_cookie is not None:
            pulumi.set(__self__, "login_cookie", login_cookie)
        if login_password is not None:
            pulumi.set(__self__, "login_password", login_password)
        if login_url is not None:
            pulumi.set(__self__, "login_url", login_url)
        if login_username is not None:
            pulumi.set(__self__, "login_username", login_username)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if middle is not None:
            pulumi.set(__self__, "middle", middle)
        if verify_url is not None:
            pulumi.set(__self__, "verify_url", verify_url)
        if website_address is not None:
            pulumi.set(__self__, "website_address", website_address)
        if website_name is not None:
            pulumi.set(__self__, "website_name", website_name)

    @_builtins.property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The auth status of website. Valid values are:
        + **unauth**: Unauthorized.
        + **auth**: Authorized.
        + **invalid**: Authentication file is invalid.
        + **manual**: Manual authentication.
        + **skip**: Authentication free.
        """
        return pulumi.get(self, "auth_status")

    @auth_status.setter
    def auth_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_status", value)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authentication type. Changing this parameter will create a
        new resource. Valid values are:
        + **free**: Verification Free. Before using this authentication method, please confirm the following instructions.
        Please confirm that your account has completed real-name authentication and is not a restricted account. Please confirm
        that you have obtained the relevant legal rights to scan the scanned objects. Please confirm that your scanning behavior
        has legal and reasonable purposes and complies with applicable laws and regulations. Illegal scanning with this Service
        is not allowed. If there are any violations to the terms and conditions described here, Huawei is entitled to immediately
        terminate your use of this Service and you shall compensate us and any related third parties for any losses incurred therefrom.
        + **auto**: One-Click Verification. Before using this authentication method, please confirm that the server of the site
        to be detected is built in HuaweiCloud, and that the server is the asset of your current login account.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time to create website.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def high(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of high-risk vulnerabilities.
        """
        return pulumi.get(self, "high")

    @high.setter
    def high(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "high", value)

    @_builtins.property
    @pulumi.getter
    def hint(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of hint-risk vulnerabilities.
        """
        return pulumi.get(self, "hint")

    @hint.setter
    def hint(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hint", value)

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the custom HTTP request headers, the format is key/value pairs.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "http_headers", value)

    @_builtins.property
    @pulumi.getter(name="loginCookie")
    def login_cookie(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login cookie.
        """
        return pulumi.get(self, "login_cookie")

    @login_cookie.setter
    def login_cookie(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "login_cookie", value)

    @_builtins.property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login password. The maximum length is `50`.

        > Fields `login_url`, `login_username` and `login_password` must be set simultaneously.
        """
        return pulumi.get(self, "login_password")

    @login_password.setter
    def login_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "login_password", value)

    @_builtins.property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login URL. The login address and domain name must be the same as the field
        `website_address`, for example: `http(s)://example.com/login`. The maximum length is `2048`.
        """
        return pulumi.get(self, "login_url")

    @login_url.setter
    def login_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "login_url", value)

    @_builtins.property
    @pulumi.getter(name="loginUsername")
    def login_username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login username. The maximum length is `256`.
        """
        return pulumi.get(self, "login_username")

    @login_username.setter
    def login_username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "login_username", value)

    @_builtins.property
    @pulumi.getter
    def low(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of low-severity vulnerabilities.
        """
        return pulumi.get(self, "low")

    @low.setter
    def low(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "low", value)

    @_builtins.property
    @pulumi.getter
    def middle(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of medium-risk vulnerabilities.
        """
        return pulumi.get(self, "middle")

    @middle.setter
    def middle(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "middle", value)

    @_builtins.property
    @pulumi.getter(name="verifyUrl")
    def verify_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the verify URL that can only be accessed after successful login.
        CodeArts inspector will use this URL to quickly determine whether your login information is valid.
        """
        return pulumi.get(self, "verify_url")

    @verify_url.setter
    def verify_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "verify_url", value)

    @_builtins.property
    @pulumi.getter(name="websiteAddress")
    def website_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the unique website address. The maximum length is `256`.
        Changing this parameter will create a new resource.
        The format should be `http(s)://example.com` or `http(s)://{public IPv4 address}:{PORT}`.
        """
        return pulumi.get(self, "website_address")

    @website_address.setter
    def website_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "website_address", value)

    @_builtins.property
    @pulumi.getter(name="websiteName")
    def website_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the website name. The valid length is limited from `1` to `50`.
        Changing this parameter will create a new resource. Only Chinese characters, letters, digits, hyphens (-) and
        underscores (_) are allowed, and cannot start with a hyphen (-).
        """
        return pulumi.get(self, "website_name")

    @website_name.setter
    def website_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "website_name", value)


@pulumi.type_token("huaweicloud:codearts/inspectorWebsite:InspectorWebsite")
class InspectorWebsite(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 login_cookie: Optional[pulumi.Input[_builtins.str]] = None,
                 login_password: Optional[pulumi.Input[_builtins.str]] = None,
                 login_url: Optional[pulumi.Input[_builtins.str]] = None,
                 login_username: Optional[pulumi.Input[_builtins.str]] = None,
                 verify_url: Optional[pulumi.Input[_builtins.str]] = None,
                 website_address: Optional[pulumi.Input[_builtins.str]] = None,
                 website_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts inspector website resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        website_address = config.require_object("websiteAddress")
        login_url = config.require_object("loginUrl")
        login_username = config.require_object("loginUsername")
        login_password = config.require_object("loginPassword")
        login_cookie = config.require_object("loginCookie")
        verify_url = config.require_object("verifyUrl")
        test = huaweicloud.codearts.InspectorWebsite("test",
            website_name="test-name",
            auth_type="free",
            website_address=website_address,
            login_url=login_url,
            login_username=login_username,
            login_password=login_password,
            login_cookie=login_cookie,
            verify_url=verify_url,
            http_headers={
                "test-key": "test-value",
            })
        ```

        ## Import

        The CodeArts inspector website can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/inspectorWebsite:InspectorWebsite test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `auth_type`, `login_password`, `login_cookie`,

        `http_headers`. It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_codearts_inspector_website" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              auth_type,
            
              login_password,
            
              login_cookie,
            
              http_headers,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authentication type. Changing this parameter will create a
               new resource. Valid values are:
               + **free**: Verification Free. Before using this authentication method, please confirm the following instructions.
               Please confirm that your account has completed real-name authentication and is not a restricted account. Please confirm
               that you have obtained the relevant legal rights to scan the scanned objects. Please confirm that your scanning behavior
               has legal and reasonable purposes and complies with applicable laws and regulations. Illegal scanning with this Service
               is not allowed. If there are any violations to the terms and conditions described here, Huawei is entitled to immediately
               terminate your use of this Service and you shall compensate us and any related third parties for any losses incurred therefrom.
               + **auto**: One-Click Verification. Before using this authentication method, please confirm that the server of the site
               to be detected is built in HuaweiCloud, and that the server is the asset of your current login account.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] http_headers: Specifies the custom HTTP request headers, the format is key/value pairs.
        :param pulumi.Input[_builtins.str] login_cookie: Specifies the login cookie.
        :param pulumi.Input[_builtins.str] login_password: Specifies the login password. The maximum length is `50`.
               
               > Fields `login_url`, `login_username` and `login_password` must be set simultaneously.
        :param pulumi.Input[_builtins.str] login_url: Specifies the login URL. The login address and domain name must be the same as the field
               `website_address`, for example: `http(s)://example.com/login`. The maximum length is `2048`.
        :param pulumi.Input[_builtins.str] login_username: Specifies the login username. The maximum length is `256`.
        :param pulumi.Input[_builtins.str] verify_url: Specifies the verify URL that can only be accessed after successful login.
               CodeArts inspector will use this URL to quickly determine whether your login information is valid.
        :param pulumi.Input[_builtins.str] website_address: Specifies the unique website address. The maximum length is `256`.
               Changing this parameter will create a new resource.
               The format should be `http(s)://example.com` or `http(s)://{public IPv4 address}:{PORT}`.
        :param pulumi.Input[_builtins.str] website_name: Specifies the website name. The valid length is limited from `1` to `50`.
               Changing this parameter will create a new resource. Only Chinese characters, letters, digits, hyphens (-) and
               underscores (_) are allowed, and cannot start with a hyphen (-).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InspectorWebsiteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts inspector website resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        website_address = config.require_object("websiteAddress")
        login_url = config.require_object("loginUrl")
        login_username = config.require_object("loginUsername")
        login_password = config.require_object("loginPassword")
        login_cookie = config.require_object("loginCookie")
        verify_url = config.require_object("verifyUrl")
        test = huaweicloud.codearts.InspectorWebsite("test",
            website_name="test-name",
            auth_type="free",
            website_address=website_address,
            login_url=login_url,
            login_username=login_username,
            login_password=login_password,
            login_cookie=login_cookie,
            verify_url=verify_url,
            http_headers={
                "test-key": "test-value",
            })
        ```

        ## Import

        The CodeArts inspector website can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/inspectorWebsite:InspectorWebsite test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `auth_type`, `login_password`, `login_cookie`,

        `http_headers`. It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_codearts_inspector_website" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              auth_type,
            
              login_password,
            
              login_cookie,
            
              http_headers,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param InspectorWebsiteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InspectorWebsiteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 login_cookie: Optional[pulumi.Input[_builtins.str]] = None,
                 login_password: Optional[pulumi.Input[_builtins.str]] = None,
                 login_url: Optional[pulumi.Input[_builtins.str]] = None,
                 login_username: Optional[pulumi.Input[_builtins.str]] = None,
                 verify_url: Optional[pulumi.Input[_builtins.str]] = None,
                 website_address: Optional[pulumi.Input[_builtins.str]] = None,
                 website_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InspectorWebsiteArgs.__new__(InspectorWebsiteArgs)

            if auth_type is None and not opts.urn:
                raise TypeError("Missing required property 'auth_type'")
            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["http_headers"] = http_headers
            __props__.__dict__["login_cookie"] = None if login_cookie is None else pulumi.Output.secret(login_cookie)
            __props__.__dict__["login_password"] = None if login_password is None else pulumi.Output.secret(login_password)
            __props__.__dict__["login_url"] = login_url
            __props__.__dict__["login_username"] = login_username
            __props__.__dict__["verify_url"] = verify_url
            if website_address is None and not opts.urn:
                raise TypeError("Missing required property 'website_address'")
            __props__.__dict__["website_address"] = website_address
            if website_name is None and not opts.urn:
                raise TypeError("Missing required property 'website_name'")
            __props__.__dict__["website_name"] = website_name
            __props__.__dict__["auth_status"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["high"] = None
            __props__.__dict__["hint"] = None
            __props__.__dict__["low"] = None
            __props__.__dict__["middle"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["loginCookie", "loginPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(InspectorWebsite, __self__).__init__(
            'huaweicloud:codearts/inspectorWebsite:InspectorWebsite',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_status: Optional[pulumi.Input[_builtins.str]] = None,
            auth_type: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            high: Optional[pulumi.Input[_builtins.int]] = None,
            hint: Optional[pulumi.Input[_builtins.int]] = None,
            http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            login_cookie: Optional[pulumi.Input[_builtins.str]] = None,
            login_password: Optional[pulumi.Input[_builtins.str]] = None,
            login_url: Optional[pulumi.Input[_builtins.str]] = None,
            login_username: Optional[pulumi.Input[_builtins.str]] = None,
            low: Optional[pulumi.Input[_builtins.int]] = None,
            middle: Optional[pulumi.Input[_builtins.int]] = None,
            verify_url: Optional[pulumi.Input[_builtins.str]] = None,
            website_address: Optional[pulumi.Input[_builtins.str]] = None,
            website_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'InspectorWebsite':
        """
        Get an existing InspectorWebsite resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_status: The auth status of website. Valid values are:
               + **unauth**: Unauthorized.
               + **auth**: Authorized.
               + **invalid**: Authentication file is invalid.
               + **manual**: Manual authentication.
               + **skip**: Authentication free.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authentication type. Changing this parameter will create a
               new resource. Valid values are:
               + **free**: Verification Free. Before using this authentication method, please confirm the following instructions.
               Please confirm that your account has completed real-name authentication and is not a restricted account. Please confirm
               that you have obtained the relevant legal rights to scan the scanned objects. Please confirm that your scanning behavior
               has legal and reasonable purposes and complies with applicable laws and regulations. Illegal scanning with this Service
               is not allowed. If there are any violations to the terms and conditions described here, Huawei is entitled to immediately
               terminate your use of this Service and you shall compensate us and any related third parties for any losses incurred therefrom.
               + **auto**: One-Click Verification. Before using this authentication method, please confirm that the server of the site
               to be detected is built in HuaweiCloud, and that the server is the asset of your current login account.
        :param pulumi.Input[_builtins.str] created_at: The time to create website.
        :param pulumi.Input[_builtins.int] high: The number of high-risk vulnerabilities.
        :param pulumi.Input[_builtins.int] hint: The number of hint-risk vulnerabilities.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] http_headers: Specifies the custom HTTP request headers, the format is key/value pairs.
        :param pulumi.Input[_builtins.str] login_cookie: Specifies the login cookie.
        :param pulumi.Input[_builtins.str] login_password: Specifies the login password. The maximum length is `50`.
               
               > Fields `login_url`, `login_username` and `login_password` must be set simultaneously.
        :param pulumi.Input[_builtins.str] login_url: Specifies the login URL. The login address and domain name must be the same as the field
               `website_address`, for example: `http(s)://example.com/login`. The maximum length is `2048`.
        :param pulumi.Input[_builtins.str] login_username: Specifies the login username. The maximum length is `256`.
        :param pulumi.Input[_builtins.int] low: The number of low-severity vulnerabilities.
        :param pulumi.Input[_builtins.int] middle: The number of medium-risk vulnerabilities.
        :param pulumi.Input[_builtins.str] verify_url: Specifies the verify URL that can only be accessed after successful login.
               CodeArts inspector will use this URL to quickly determine whether your login information is valid.
        :param pulumi.Input[_builtins.str] website_address: Specifies the unique website address. The maximum length is `256`.
               Changing this parameter will create a new resource.
               The format should be `http(s)://example.com` or `http(s)://{public IPv4 address}:{PORT}`.
        :param pulumi.Input[_builtins.str] website_name: Specifies the website name. The valid length is limited from `1` to `50`.
               Changing this parameter will create a new resource. Only Chinese characters, letters, digits, hyphens (-) and
               underscores (_) are allowed, and cannot start with a hyphen (-).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InspectorWebsiteState.__new__(_InspectorWebsiteState)

        __props__.__dict__["auth_status"] = auth_status
        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["high"] = high
        __props__.__dict__["hint"] = hint
        __props__.__dict__["http_headers"] = http_headers
        __props__.__dict__["login_cookie"] = login_cookie
        __props__.__dict__["login_password"] = login_password
        __props__.__dict__["login_url"] = login_url
        __props__.__dict__["login_username"] = login_username
        __props__.__dict__["low"] = low
        __props__.__dict__["middle"] = middle
        __props__.__dict__["verify_url"] = verify_url
        __props__.__dict__["website_address"] = website_address
        __props__.__dict__["website_name"] = website_name
        return InspectorWebsite(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> pulumi.Output[_builtins.str]:
        """
        The auth status of website. Valid values are:
        + **unauth**: Unauthorized.
        + **auth**: Authorized.
        + **invalid**: Authentication file is invalid.
        + **manual**: Manual authentication.
        + **skip**: Authentication free.
        """
        return pulumi.get(self, "auth_status")

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the authentication type. Changing this parameter will create a
        new resource. Valid values are:
        + **free**: Verification Free. Before using this authentication method, please confirm the following instructions.
        Please confirm that your account has completed real-name authentication and is not a restricted account. Please confirm
        that you have obtained the relevant legal rights to scan the scanned objects. Please confirm that your scanning behavior
        has legal and reasonable purposes and complies with applicable laws and regulations. Illegal scanning with this Service
        is not allowed. If there are any violations to the terms and conditions described here, Huawei is entitled to immediately
        terminate your use of this Service and you shall compensate us and any related third parties for any losses incurred therefrom.
        + **auto**: One-Click Verification. Before using this authentication method, please confirm that the server of the site
        to be detected is built in HuaweiCloud, and that the server is the asset of your current login account.
        """
        return pulumi.get(self, "auth_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time to create website.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def high(self) -> pulumi.Output[_builtins.int]:
        """
        The number of high-risk vulnerabilities.
        """
        return pulumi.get(self, "high")

    @_builtins.property
    @pulumi.getter
    def hint(self) -> pulumi.Output[_builtins.int]:
        """
        The number of hint-risk vulnerabilities.
        """
        return pulumi.get(self, "hint")

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Specifies the custom HTTP request headers, the format is key/value pairs.
        """
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter(name="loginCookie")
    def login_cookie(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the login cookie.
        """
        return pulumi.get(self, "login_cookie")

    @_builtins.property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the login password. The maximum length is `50`.

        > Fields `login_url`, `login_username` and `login_password` must be set simultaneously.
        """
        return pulumi.get(self, "login_password")

    @_builtins.property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the login URL. The login address and domain name must be the same as the field
        `website_address`, for example: `http(s)://example.com/login`. The maximum length is `2048`.
        """
        return pulumi.get(self, "login_url")

    @_builtins.property
    @pulumi.getter(name="loginUsername")
    def login_username(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the login username. The maximum length is `256`.
        """
        return pulumi.get(self, "login_username")

    @_builtins.property
    @pulumi.getter
    def low(self) -> pulumi.Output[_builtins.int]:
        """
        The number of low-severity vulnerabilities.
        """
        return pulumi.get(self, "low")

    @_builtins.property
    @pulumi.getter
    def middle(self) -> pulumi.Output[_builtins.int]:
        """
        The number of medium-risk vulnerabilities.
        """
        return pulumi.get(self, "middle")

    @_builtins.property
    @pulumi.getter(name="verifyUrl")
    def verify_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the verify URL that can only be accessed after successful login.
        CodeArts inspector will use this URL to quickly determine whether your login information is valid.
        """
        return pulumi.get(self, "verify_url")

    @_builtins.property
    @pulumi.getter(name="websiteAddress")
    def website_address(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the unique website address. The maximum length is `256`.
        Changing this parameter will create a new resource.
        The format should be `http(s)://example.com` or `http(s)://{public IPv4 address}:{PORT}`.
        """
        return pulumi.get(self, "website_address")

    @_builtins.property
    @pulumi.getter(name="websiteName")
    def website_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the website name. The valid length is limited from `1` to `50`.
        Changing this parameter will create a new resource. Only Chinese characters, letters, digits, hyphens (-) and
        underscores (_) are allowed, and cannot start with a hyphen (-).
        """
        return pulumi.get(self, "website_name")

