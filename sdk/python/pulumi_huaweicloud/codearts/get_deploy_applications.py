# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDeployApplicationsResult',
    'AwaitableGetDeployApplicationsResult',
    'get_deploy_applications',
    'get_deploy_applications_output',
]

@pulumi.output_type
class GetDeployApplicationsResult:
    """
    A collection of values returned by getDeployApplications.
    """
    def __init__(__self__, applications=None, group_id=None, id=None, project_id=None, region=None, states=None):
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if states and not isinstance(states, list):
            raise TypeError("Expected argument 'states' to be a list")
        pulumi.set(__self__, "states", states)

    @_builtins.property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetDeployApplicationsApplicationResult']:
        """
        Indicates the application list
        The applications structure is documented below.
        """
        return pulumi.get(self, "applications")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def states(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "states")


class AwaitableGetDeployApplicationsResult(GetDeployApplicationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeployApplicationsResult(
            applications=self.applications,
            group_id=self.group_id,
            id=self.id,
            project_id=self.project_id,
            region=self.region,
            states=self.states)


def get_deploy_applications(group_id: Optional[_builtins.str] = None,
                            project_id: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            states: Optional[Sequence[_builtins.str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeployApplicationsResult:
    """
    Use this data source to get the list of CodeArts deploy applications.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    project_id = config.require_object("projectId")
    test = huaweicloud.codearts.get_deploy_applications(project_id=project_id)
    ```


    :param _builtins.str group_id: Specifies the application group ID.
           Enter **no_grouped** to query ungrouped applications.
    :param _builtins.str project_id: Specifies the project ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] states: Specifies the application status list.
           Values can be as follows:
           + **abort**: Deployment suspended.
           + **failed**: Deployment failed.
           + **not_started**: Execution canceled.
           + **pending**: Queuing.
           + **running**: Deployment in progress.
           + **succeeded**: Deployment succeeded.
           + **timeout**: Deployment times out.
           + **not_executed**: Deployment not executed.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['states'] = states
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getDeployApplications:getDeployApplications', __args__, opts=opts, typ=GetDeployApplicationsResult).value

    return AwaitableGetDeployApplicationsResult(
        applications=pulumi.get(__ret__, 'applications'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region=pulumi.get(__ret__, 'region'),
        states=pulumi.get(__ret__, 'states'))
def get_deploy_applications_output(group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   states: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDeployApplicationsResult]:
    """
    Use this data source to get the list of CodeArts deploy applications.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    project_id = config.require_object("projectId")
    test = huaweicloud.codearts.get_deploy_applications(project_id=project_id)
    ```


    :param _builtins.str group_id: Specifies the application group ID.
           Enter **no_grouped** to query ungrouped applications.
    :param _builtins.str project_id: Specifies the project ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] states: Specifies the application status list.
           Values can be as follows:
           + **abort**: Deployment suspended.
           + **failed**: Deployment failed.
           + **not_started**: Execution canceled.
           + **pending**: Queuing.
           + **running**: Deployment in progress.
           + **succeeded**: Deployment succeeded.
           + **timeout**: Deployment times out.
           + **not_executed**: Deployment not executed.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['states'] = states
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getDeployApplications:getDeployApplications', __args__, opts=opts, typ=GetDeployApplicationsResult)
    return __ret__.apply(lambda __response__: GetDeployApplicationsResult(
        applications=pulumi.get(__response__, 'applications'),
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id'),
        project_id=pulumi.get(__response__, 'project_id'),
        region=pulumi.get(__response__, 'region'),
        states=pulumi.get(__response__, 'states')))
