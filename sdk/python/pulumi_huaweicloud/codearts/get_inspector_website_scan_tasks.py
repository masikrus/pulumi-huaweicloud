# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInspectorWebsiteScanTasksResult',
    'AwaitableGetInspectorWebsiteScanTasksResult',
    'get_inspector_website_scan_tasks',
    'get_inspector_website_scan_tasks_output',
]

@pulumi.output_type
class GetInspectorWebsiteScanTasksResult:
    """
    A collection of values returned by getInspectorWebsiteScanTasks.
    """
    def __init__(__self__, domain_id=None, id=None, tasks=None):
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetInspectorWebsiteScanTasksTaskResult']:
        """
        Indicates the tasks list.
        """
        return pulumi.get(self, "tasks")


class AwaitableGetInspectorWebsiteScanTasksResult(GetInspectorWebsiteScanTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInspectorWebsiteScanTasksResult(
            domain_id=self.domain_id,
            id=self.id,
            tasks=self.tasks)


def get_inspector_website_scan_tasks(domain_id: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInspectorWebsiteScanTasksResult:
    """
    Use this data source to get the list of CodeArts inspector website scan tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_id = config.require_object("domainId")
    test = huaweicloud.codearts.get_inspector_website_scan_tasks(domain_id=domain_id)
    ```


    :param _builtins.str domain_id: Specifies the domain ID.
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getInspectorWebsiteScanTasks:getInspectorWebsiteScanTasks', __args__, opts=opts, typ=GetInspectorWebsiteScanTasksResult).value

    return AwaitableGetInspectorWebsiteScanTasksResult(
        domain_id=pulumi.get(__ret__, 'domain_id'),
        id=pulumi.get(__ret__, 'id'),
        tasks=pulumi.get(__ret__, 'tasks'))
def get_inspector_website_scan_tasks_output(domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInspectorWebsiteScanTasksResult]:
    """
    Use this data source to get the list of CodeArts inspector website scan tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_id = config.require_object("domainId")
    test = huaweicloud.codearts.get_inspector_website_scan_tasks(domain_id=domain_id)
    ```


    :param _builtins.str domain_id: Specifies the domain ID.
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getInspectorWebsiteScanTasks:getInspectorWebsiteScanTasks', __args__, opts=opts, typ=GetInspectorWebsiteScanTasksResult)
    return __ret__.apply(lambda __response__: GetInspectorWebsiteScanTasksResult(
        domain_id=pulumi.get(__response__, 'domain_id'),
        id=pulumi.get(__response__, 'id'),
        tasks=pulumi.get(__response__, 'tasks')))
