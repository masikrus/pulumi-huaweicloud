# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBuildTasksResult',
    'AwaitableGetBuildTasksResult',
    'get_build_tasks',
    'get_build_tasks_output',
]

@pulumi.output_type
class GetBuildTasksResult:
    """
    A collection of values returned by getBuildTasks.
    """
    def __init__(__self__, build_status=None, by_group=None, creator_id=None, group_path_id=None, id=None, project_id=None, region=None, search=None, sort_field=None, sort_order=None, tasks=None):
        if build_status and not isinstance(build_status, str):
            raise TypeError("Expected argument 'build_status' to be a str")
        pulumi.set(__self__, "build_status", build_status)
        if by_group and not isinstance(by_group, bool):
            raise TypeError("Expected argument 'by_group' to be a bool")
        pulumi.set(__self__, "by_group", by_group)
        if creator_id and not isinstance(creator_id, str):
            raise TypeError("Expected argument 'creator_id' to be a str")
        pulumi.set(__self__, "creator_id", creator_id)
        if group_path_id and not isinstance(group_path_id, str):
            raise TypeError("Expected argument 'group_path_id' to be a str")
        pulumi.set(__self__, "group_path_id", group_path_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if search and not isinstance(search, str):
            raise TypeError("Expected argument 'search' to be a str")
        pulumi.set(__self__, "search", search)
        if sort_field and not isinstance(sort_field, str):
            raise TypeError("Expected argument 'sort_field' to be a str")
        pulumi.set(__self__, "sort_field", sort_field)
        if sort_order and not isinstance(sort_order, str):
            raise TypeError("Expected argument 'sort_order' to be a str")
        pulumi.set(__self__, "sort_order", sort_order)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)

    @_builtins.property
    @pulumi.getter(name="buildStatus")
    def build_status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "build_status")

    @_builtins.property
    @pulumi.getter(name="byGroup")
    def by_group(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "by_group")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter(name="groupPathId")
    def group_path_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group_path_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def search(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "search")

    @_builtins.property
    @pulumi.getter(name="sortField")
    def sort_field(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_field")

    @_builtins.property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_order")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetBuildTasksTaskResult']:
        """
        Indicates the task list.
        The tasks structure is documented below.
        """
        return pulumi.get(self, "tasks")


class AwaitableGetBuildTasksResult(GetBuildTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBuildTasksResult(
            build_status=self.build_status,
            by_group=self.by_group,
            creator_id=self.creator_id,
            group_path_id=self.group_path_id,
            id=self.id,
            project_id=self.project_id,
            region=self.region,
            search=self.search,
            sort_field=self.sort_field,
            sort_order=self.sort_order,
            tasks=self.tasks)


def get_build_tasks(build_status: Optional[_builtins.str] = None,
                    by_group: Optional[_builtins.bool] = None,
                    creator_id: Optional[_builtins.str] = None,
                    group_path_id: Optional[_builtins.str] = None,
                    project_id: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    search: Optional[_builtins.str] = None,
                    sort_field: Optional[_builtins.str] = None,
                    sort_order: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBuildTasksResult:
    """
    Use this data source to get a list of CodeArts build tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    codearts_project_id = config.require_object("codeartsProjectId")
    test = huaweicloud.codearts.get_build_tasks(project_id=codearts_project_id)
    ```


    :param _builtins.str build_status: Specifies the build status filter condition.
    :param _builtins.bool by_group: Specifies whether to group.
    :param _builtins.str creator_id: Specifies the creator ID.
    :param _builtins.str group_path_id: Specifies the group ID.
    :param _builtins.str project_id: Specifies the CodeArts project ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str search: Specifies the search condition.
    :param _builtins.str sort_field: Specifies the sorting field.
    :param _builtins.str sort_order: Specifies the sorting order.
    """
    __args__ = dict()
    __args__['buildStatus'] = build_status
    __args__['byGroup'] = by_group
    __args__['creatorId'] = creator_id
    __args__['groupPathId'] = group_path_id
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['search'] = search
    __args__['sortField'] = sort_field
    __args__['sortOrder'] = sort_order
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getBuildTasks:getBuildTasks', __args__, opts=opts, typ=GetBuildTasksResult).value

    return AwaitableGetBuildTasksResult(
        build_status=pulumi.get(__ret__, 'build_status'),
        by_group=pulumi.get(__ret__, 'by_group'),
        creator_id=pulumi.get(__ret__, 'creator_id'),
        group_path_id=pulumi.get(__ret__, 'group_path_id'),
        id=pulumi.get(__ret__, 'id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region=pulumi.get(__ret__, 'region'),
        search=pulumi.get(__ret__, 'search'),
        sort_field=pulumi.get(__ret__, 'sort_field'),
        sort_order=pulumi.get(__ret__, 'sort_order'),
        tasks=pulumi.get(__ret__, 'tasks'))
def get_build_tasks_output(build_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           by_group: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                           creator_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           group_path_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           project_id: Optional[pulumi.Input[_builtins.str]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           search: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           sort_field: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           sort_order: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBuildTasksResult]:
    """
    Use this data source to get a list of CodeArts build tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    codearts_project_id = config.require_object("codeartsProjectId")
    test = huaweicloud.codearts.get_build_tasks(project_id=codearts_project_id)
    ```


    :param _builtins.str build_status: Specifies the build status filter condition.
    :param _builtins.bool by_group: Specifies whether to group.
    :param _builtins.str creator_id: Specifies the creator ID.
    :param _builtins.str group_path_id: Specifies the group ID.
    :param _builtins.str project_id: Specifies the CodeArts project ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str search: Specifies the search condition.
    :param _builtins.str sort_field: Specifies the sorting field.
    :param _builtins.str sort_order: Specifies the sorting order.
    """
    __args__ = dict()
    __args__['buildStatus'] = build_status
    __args__['byGroup'] = by_group
    __args__['creatorId'] = creator_id
    __args__['groupPathId'] = group_path_id
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['search'] = search
    __args__['sortField'] = sort_field
    __args__['sortOrder'] = sort_order
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getBuildTasks:getBuildTasks', __args__, opts=opts, typ=GetBuildTasksResult)
    return __ret__.apply(lambda __response__: GetBuildTasksResult(
        build_status=pulumi.get(__response__, 'build_status'),
        by_group=pulumi.get(__response__, 'by_group'),
        creator_id=pulumi.get(__response__, 'creator_id'),
        group_path_id=pulumi.get(__response__, 'group_path_id'),
        id=pulumi.get(__response__, 'id'),
        project_id=pulumi.get(__response__, 'project_id'),
        region=pulumi.get(__response__, 'region'),
        search=pulumi.get(__response__, 'search'),
        sort_field=pulumi.get(__response__, 'sort_field'),
        sort_order=pulumi.get(__response__, 'sort_order'),
        tasks=pulumi.get(__response__, 'tasks')))
