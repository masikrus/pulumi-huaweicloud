# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BuildTemplateArgs', 'BuildTemplate']

@pulumi.input_type
class BuildTemplateArgs:
    def __init__(__self__, *,
                 steps: pulumi.Input[Sequence[pulumi.Input['BuildTemplateStepArgs']]],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tool_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BuildTemplate resource.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTemplateStepArgs']]] steps: Specifies the build execution steps.
               The steps structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the template description.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterArgs']]] parameters: Specifies the build execution parameter list.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] tool_type: Specifies the tool type.
               
               <a name="block--steps"></a>
               The `steps` block supports:
        """
        pulumi.set(__self__, "steps", steps)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tool_type is not None:
            pulumi.set(__self__, "tool_type", tool_type)

    @_builtins.property
    @pulumi.getter
    def steps(self) -> pulumi.Input[Sequence[pulumi.Input['BuildTemplateStepArgs']]]:
        """
        Specifies the build execution steps.
        The steps structure is documented below.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: pulumi.Input[Sequence[pulumi.Input['BuildTemplateStepArgs']]]):
        pulumi.set(self, "steps", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterArgs']]]]:
        """
        Specifies the build execution parameter list.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="toolType")
    def tool_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the tool type.

        <a name="block--steps"></a>
        The `steps` block supports:
        """
        return pulumi.get(self, "tool_type")

    @tool_type.setter
    def tool_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tool_type", value)


@pulumi.input_type
class _BuildTemplateState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nick_name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterArgs']]]] = None,
                 public: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateStepArgs']]]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tool_type: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering BuildTemplate resources.
        :param pulumi.Input[_builtins.str] create_time: Indicates the template creation time.
        :param pulumi.Input[_builtins.str] description: Specifies the template description.
        :param pulumi.Input[_builtins.bool] favorite: Indicates whether the template is favorite.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[_builtins.str] nick_name: Indicates the nick name.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterArgs']]] parameters: Specifies the build execution parameter list.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.bool] public: Indicates whether the template is public.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] scope: Indicates the scope.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTemplateStepArgs']]] steps: Specifies the build execution steps.
               The steps structure is documented below.
        :param pulumi.Input[_builtins.str] template_id: Indicates ID in database.
        :param pulumi.Input[_builtins.str] tool_type: Specifies the tool type.
               
               <a name="block--steps"></a>
               The `steps` block supports:
        :param pulumi.Input[_builtins.str] type: Indicates the template type.
        :param pulumi.Input[_builtins.int] weight: Indicates the weight of the template.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if favorite is not None:
            pulumi.set(__self__, "favorite", favorite)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nick_name is not None:
            pulumi.set(__self__, "nick_name", nick_name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if tool_type is not None:
            pulumi.set(__self__, "tool_type", tool_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the template creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def favorite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the template is favorite.
        """
        return pulumi.get(self, "favorite")

    @favorite.setter
    def favorite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "favorite", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nickName")
    def nick_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the nick name.
        """
        return pulumi.get(self, "nick_name")

    @nick_name.setter
    def nick_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nick_name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterArgs']]]]:
        """
        Specifies the build execution parameter list.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the template is public.
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "public", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the scope.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateStepArgs']]]]:
        """
        Specifies the build execution steps.
        The steps structure is documented below.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateStepArgs']]]]):
        pulumi.set(self, "steps", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates ID in database.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter(name="toolType")
    def tool_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the tool type.

        <a name="block--steps"></a>
        The `steps` block supports:
        """
        return pulumi.get(self, "tool_type")

    @tool_type.setter
    def tool_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tool_type", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the template type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the weight of the template.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


@pulumi.type_token("huaweicloud:codearts/buildTemplate:BuildTemplate")
class BuildTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTemplateParameterArgs', 'BuildTemplateParameterArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTemplateStepArgs', 'BuildTemplateStepArgsDict']]]]] = None,
                 tool_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts Build template resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.codearts.BuildTemplate("test",
            name="test-api",
            description="demo",
            steps=[{
                "enable": True,
                "module_id": "devcloud2018.codeci_action_20057.action",
                "name": "update OBS",
                "properties": {
                    "objectKey": json.dumps("./"),
                    "backetName": json.dumps("test"),
                    "uploadDirectory": json.dumps(True),
                    "artifactSourcePath": json.dumps("bin/*"),
                    "authorizationUser": json.dumps({
                        "displayName": "current user",
                        "value": "build",
                    }),
                    "obsHeaders": json.dumps([{
                        "headerKey": "test",
                        "headerValue": "test",
                    }]),
                },
            }])
        ```

        ## Import

        The template can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/buildTemplate:BuildTemplate test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the template description.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTemplateParameterArgs', 'BuildTemplateParameterArgsDict']]]] parameters: Specifies the build execution parameter list.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTemplateStepArgs', 'BuildTemplateStepArgsDict']]]] steps: Specifies the build execution steps.
               The steps structure is documented below.
        :param pulumi.Input[_builtins.str] tool_type: Specifies the tool type.
               
               <a name="block--steps"></a>
               The `steps` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BuildTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts Build template resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.codearts.BuildTemplate("test",
            name="test-api",
            description="demo",
            steps=[{
                "enable": True,
                "module_id": "devcloud2018.codeci_action_20057.action",
                "name": "update OBS",
                "properties": {
                    "objectKey": json.dumps("./"),
                    "backetName": json.dumps("test"),
                    "uploadDirectory": json.dumps(True),
                    "artifactSourcePath": json.dumps("bin/*"),
                    "authorizationUser": json.dumps({
                        "displayName": "current user",
                        "value": "build",
                    }),
                    "obsHeaders": json.dumps([{
                        "headerKey": "test",
                        "headerValue": "test",
                    }]),
                },
            }])
        ```

        ## Import

        The template can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/buildTemplate:BuildTemplate test <id>
        ```

        :param str resource_name: The name of the resource.
        :param BuildTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BuildTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTemplateParameterArgs', 'BuildTemplateParameterArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTemplateStepArgs', 'BuildTemplateStepArgsDict']]]]] = None,
                 tool_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BuildTemplateArgs.__new__(BuildTemplateArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["name"] = name
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["region"] = region
            if steps is None and not opts.urn:
                raise TypeError("Missing required property 'steps'")
            __props__.__dict__["steps"] = steps
            __props__.__dict__["tool_type"] = tool_type
            __props__.__dict__["create_time"] = None
            __props__.__dict__["favorite"] = None
            __props__.__dict__["nick_name"] = None
            __props__.__dict__["public"] = None
            __props__.__dict__["scope"] = None
            __props__.__dict__["template_id"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["weight"] = None
        super(BuildTemplate, __self__).__init__(
            'huaweicloud:codearts/buildTemplate:BuildTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            favorite: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            nick_name: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTemplateParameterArgs', 'BuildTemplateParameterArgsDict']]]]] = None,
            public: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            scope: Optional[pulumi.Input[_builtins.str]] = None,
            steps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTemplateStepArgs', 'BuildTemplateStepArgsDict']]]]] = None,
            template_id: Optional[pulumi.Input[_builtins.str]] = None,
            tool_type: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            weight: Optional[pulumi.Input[_builtins.int]] = None) -> 'BuildTemplate':
        """
        Get an existing BuildTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] create_time: Indicates the template creation time.
        :param pulumi.Input[_builtins.str] description: Specifies the template description.
        :param pulumi.Input[_builtins.bool] favorite: Indicates whether the template is favorite.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[_builtins.str] nick_name: Indicates the nick name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTemplateParameterArgs', 'BuildTemplateParameterArgsDict']]]] parameters: Specifies the build execution parameter list.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.bool] public: Indicates whether the template is public.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] scope: Indicates the scope.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTemplateStepArgs', 'BuildTemplateStepArgsDict']]]] steps: Specifies the build execution steps.
               The steps structure is documented below.
        :param pulumi.Input[_builtins.str] template_id: Indicates ID in database.
        :param pulumi.Input[_builtins.str] tool_type: Specifies the tool type.
               
               <a name="block--steps"></a>
               The `steps` block supports:
        :param pulumi.Input[_builtins.str] type: Indicates the template type.
        :param pulumi.Input[_builtins.int] weight: Indicates the weight of the template.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BuildTemplateState.__new__(_BuildTemplateState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["favorite"] = favorite
        __props__.__dict__["name"] = name
        __props__.__dict__["nick_name"] = nick_name
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["public"] = public
        __props__.__dict__["region"] = region
        __props__.__dict__["scope"] = scope
        __props__.__dict__["steps"] = steps
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["tool_type"] = tool_type
        __props__.__dict__["type"] = type
        __props__.__dict__["weight"] = weight
        return BuildTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the template creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the template description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def favorite(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the template is favorite.
        """
        return pulumi.get(self, "favorite")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nickName")
    def nick_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the nick name.
        """
        return pulumi.get(self, "nick_name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Sequence['outputs.BuildTemplateParameter']]]:
        """
        Specifies the build execution parameter list.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def public(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the template is public.
        """
        return pulumi.get(self, "public")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the scope.
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter
    def steps(self) -> pulumi.Output[Sequence['outputs.BuildTemplateStep']]:
        """
        Specifies the build execution steps.
        The steps structure is documented below.
        """
        return pulumi.get(self, "steps")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates ID in database.
        """
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="toolType")
    def tool_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the tool type.

        <a name="block--steps"></a>
        The `steps` block supports:
        """
        return pulumi.get(self, "tool_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the template type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the weight of the template.
        """
        return pulumi.get(self, "weight")

