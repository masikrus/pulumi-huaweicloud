# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeployApplicationPermissionArgs', 'DeployApplicationPermission']

@pulumi.input_type
class DeployApplicationPermissionArgs:
    def __init__(__self__, *,
                 application_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 project_id: pulumi.Input[_builtins.str],
                 roles: pulumi.Input[Sequence[pulumi.Input['DeployApplicationPermissionRoleArgs']]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DeployApplicationPermission resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] application_ids: Specifies the application IDs.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DeployApplicationPermissionRoleArgs']]] roles: Specifies the role permissions list.
               The roles structure is documented below.
               
               <a name="block--roles"></a>
               The `roles` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "application_ids", application_ids)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "roles", roles)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="applicationIds")
    def application_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the application IDs.
        """
        return pulumi.get(self, "application_ids")

    @application_ids.setter
    def application_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "application_ids", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the project ID for CodeArts service.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input['DeployApplicationPermissionRoleArgs']]]:
        """
        Specifies the role permissions list.
        The roles structure is documented below.

        <a name="block--roles"></a>
        The `roles` block supports:
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input['DeployApplicationPermissionRoleArgs']]]):
        pulumi.set(self, "roles", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DeployApplicationPermissionState:
    def __init__(__self__, *,
                 application_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationPermissionRoleArgs']]]] = None):
        """
        Input properties used for looking up and filtering DeployApplicationPermission resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] application_ids: Specifies the application IDs.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DeployApplicationPermissionRoleArgs']]] roles: Specifies the role permissions list.
               The roles structure is documented below.
               
               <a name="block--roles"></a>
               The `roles` block supports:
        """
        if application_ids is not None:
            pulumi.set(__self__, "application_ids", application_ids)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @_builtins.property
    @pulumi.getter(name="applicationIds")
    def application_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the application IDs.
        """
        return pulumi.get(self, "application_ids")

    @application_ids.setter
    def application_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "application_ids", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project ID for CodeArts service.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationPermissionRoleArgs']]]]:
        """
        Specifies the role permissions list.
        The roles structure is documented below.

        <a name="block--roles"></a>
        The `roles` block supports:
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationPermissionRoleArgs']]]]):
        pulumi.set(self, "roles", value)


@pulumi.type_token("huaweicloud:codearts/deployApplicationPermission:DeployApplicationPermission")
class DeployApplicationPermission(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationPermissionRoleArgs', 'DeployApplicationPermissionRoleArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a CodeArts deploy application permission resource within HuaweiCloud.

        > Only when the applications using instance level permission, this resource is available.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] application_ids: Specifies the application IDs.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationPermissionRoleArgs', 'DeployApplicationPermissionRoleArgsDict']]]] roles: Specifies the role permissions list.
               The roles structure is documented below.
               
               <a name="block--roles"></a>
               The `roles` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeployApplicationPermissionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts deploy application permission resource within HuaweiCloud.

        > Only when the applications using instance level permission, this resource is available.

        :param str resource_name: The name of the resource.
        :param DeployApplicationPermissionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeployApplicationPermissionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationPermissionRoleArgs', 'DeployApplicationPermissionRoleArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeployApplicationPermissionArgs.__new__(DeployApplicationPermissionArgs)

            if application_ids is None and not opts.urn:
                raise TypeError("Missing required property 'application_ids'")
            __props__.__dict__["application_ids"] = application_ids
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["region"] = region
            if roles is None and not opts.urn:
                raise TypeError("Missing required property 'roles'")
            __props__.__dict__["roles"] = roles
        super(DeployApplicationPermission, __self__).__init__(
            'huaweicloud:codearts/deployApplicationPermission:DeployApplicationPermission',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationPermissionRoleArgs', 'DeployApplicationPermissionRoleArgsDict']]]]] = None) -> 'DeployApplicationPermission':
        """
        Get an existing DeployApplicationPermission resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] application_ids: Specifies the application IDs.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationPermissionRoleArgs', 'DeployApplicationPermissionRoleArgsDict']]]] roles: Specifies the role permissions list.
               The roles structure is documented below.
               
               <a name="block--roles"></a>
               The `roles` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeployApplicationPermissionState.__new__(_DeployApplicationPermissionState)

        __props__.__dict__["application_ids"] = application_ids
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["roles"] = roles
        return DeployApplicationPermission(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationIds")
    def application_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the application IDs.
        """
        return pulumi.get(self, "application_ids")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the project ID for CodeArts service.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Sequence['outputs.DeployApplicationPermissionRole']]:
        """
        Specifies the role permissions list.
        The roles structure is documented below.

        <a name="block--roles"></a>
        The `roles` block supports:
        """
        return pulumi.get(self, "roles")

