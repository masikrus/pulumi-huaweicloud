# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPipelinePluginsResult',
    'AwaitableGetPipelinePluginsResult',
    'get_pipeline_plugins',
    'get_pipeline_plugins_output',
]

@pulumi.output_type
class GetPipelinePluginsResult:
    """
    A collection of values returned by getPipelinePlugins.
    """
    def __init__(__self__, business_types=None, id=None, maintainer=None, plugin_attribution=None, plugin_name=None, plugins=None, regex_name=None, region=None):
        if business_types and not isinstance(business_types, list):
            raise TypeError("Expected argument 'business_types' to be a list")
        pulumi.set(__self__, "business_types", business_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if maintainer and not isinstance(maintainer, str):
            raise TypeError("Expected argument 'maintainer' to be a str")
        pulumi.set(__self__, "maintainer", maintainer)
        if plugin_attribution and not isinstance(plugin_attribution, str):
            raise TypeError("Expected argument 'plugin_attribution' to be a str")
        pulumi.set(__self__, "plugin_attribution", plugin_attribution)
        if plugin_name and not isinstance(plugin_name, str):
            raise TypeError("Expected argument 'plugin_name' to be a str")
        pulumi.set(__self__, "plugin_name", plugin_name)
        if plugins and not isinstance(plugins, list):
            raise TypeError("Expected argument 'plugins' to be a list")
        pulumi.set(__self__, "plugins", plugins)
        if regex_name and not isinstance(regex_name, str):
            raise TypeError("Expected argument 'regex_name' to be a str")
        pulumi.set(__self__, "regex_name", regex_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="businessTypes")
    def business_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the service type.
        """
        return pulumi.get(self, "business_types")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def maintainer(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "maintainer")

    @_builtins.property
    @pulumi.getter(name="pluginAttribution")
    def plugin_attribution(self) -> Optional[_builtins.str]:
        """
        Indicates the attribute.
        """
        return pulumi.get(self, "plugin_attribution")

    @_builtins.property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[_builtins.str]:
        """
        Indicates the plugin name.
        """
        return pulumi.get(self, "plugin_name")

    @_builtins.property
    @pulumi.getter
    def plugins(self) -> Sequence['outputs.GetPipelinePluginsPluginResult']:
        """
        Indicates the plugin list.
        The plugins structure is documented below.
        """
        return pulumi.get(self, "plugins")

    @_builtins.property
    @pulumi.getter(name="regexName")
    def regex_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "regex_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetPipelinePluginsResult(GetPipelinePluginsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelinePluginsResult(
            business_types=self.business_types,
            id=self.id,
            maintainer=self.maintainer,
            plugin_attribution=self.plugin_attribution,
            plugin_name=self.plugin_name,
            plugins=self.plugins,
            regex_name=self.regex_name,
            region=self.region)


def get_pipeline_plugins(business_types: Optional[Sequence[_builtins.str]] = None,
                         maintainer: Optional[_builtins.str] = None,
                         plugin_attribution: Optional[_builtins.str] = None,
                         plugin_name: Optional[_builtins.str] = None,
                         regex_name: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPipelinePluginsResult:
    """
    Use this data source to get a list of CodeArts pipeline plugins.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.codearts.get_pipeline_plugins(business_types=[
        "Build",
        "Gate",
        "Deploy",
        "Test",
        "Normal",
    ])
    ```


    :param Sequence[_builtins.str] business_types: Specifies the service type.
           Valid values are **Build**, **Gate**, **Deploy**, **Test** and **Normal**.
    :param _builtins.str maintainer: Specifies the maintenance engineer.
    :param _builtins.str plugin_attribution: Specifies the extension attribute.
           Valid values are **official** and **custom**.
    :param _builtins.str plugin_name: Specifies the plugin name.
    :param _builtins.str regex_name: Specifies the match name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['businessTypes'] = business_types
    __args__['maintainer'] = maintainer
    __args__['pluginAttribution'] = plugin_attribution
    __args__['pluginName'] = plugin_name
    __args__['regexName'] = regex_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getPipelinePlugins:getPipelinePlugins', __args__, opts=opts, typ=GetPipelinePluginsResult).value

    return AwaitableGetPipelinePluginsResult(
        business_types=pulumi.get(__ret__, 'business_types'),
        id=pulumi.get(__ret__, 'id'),
        maintainer=pulumi.get(__ret__, 'maintainer'),
        plugin_attribution=pulumi.get(__ret__, 'plugin_attribution'),
        plugin_name=pulumi.get(__ret__, 'plugin_name'),
        plugins=pulumi.get(__ret__, 'plugins'),
        regex_name=pulumi.get(__ret__, 'regex_name'),
        region=pulumi.get(__ret__, 'region'))
def get_pipeline_plugins_output(business_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                maintainer: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                plugin_attribution: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                plugin_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                regex_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPipelinePluginsResult]:
    """
    Use this data source to get a list of CodeArts pipeline plugins.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.codearts.get_pipeline_plugins(business_types=[
        "Build",
        "Gate",
        "Deploy",
        "Test",
        "Normal",
    ])
    ```


    :param Sequence[_builtins.str] business_types: Specifies the service type.
           Valid values are **Build**, **Gate**, **Deploy**, **Test** and **Normal**.
    :param _builtins.str maintainer: Specifies the maintenance engineer.
    :param _builtins.str plugin_attribution: Specifies the extension attribute.
           Valid values are **official** and **custom**.
    :param _builtins.str plugin_name: Specifies the plugin name.
    :param _builtins.str regex_name: Specifies the match name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['businessTypes'] = business_types
    __args__['maintainer'] = maintainer
    __args__['pluginAttribution'] = plugin_attribution
    __args__['pluginName'] = plugin_name
    __args__['regexName'] = regex_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getPipelinePlugins:getPipelinePlugins', __args__, opts=opts, typ=GetPipelinePluginsResult)
    return __ret__.apply(lambda __response__: GetPipelinePluginsResult(
        business_types=pulumi.get(__response__, 'business_types'),
        id=pulumi.get(__response__, 'id'),
        maintainer=pulumi.get(__response__, 'maintainer'),
        plugin_attribution=pulumi.get(__response__, 'plugin_attribution'),
        plugin_name=pulumi.get(__response__, 'plugin_name'),
        plugins=pulumi.get(__response__, 'plugins'),
        regex_name=pulumi.get(__response__, 'regex_name'),
        region=pulumi.get(__response__, 'region')))
