# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PipelineActionArgs', 'PipelineAction']

@pulumi.input_type
class PipelineActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 pipeline_id: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 choose_jobs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 choose_stages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 job_run_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_run_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineActionSourceArgs']]]] = None,
                 step_run_id: Optional[pulumi.Input[_builtins.str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineActionVariableArgs']]]] = None):
        """
        The set of arguments for constructing a PipelineAction resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action.
               Value can be as follows:
               + **run**: start a pipeline
               + **stop**: stop a pipeline
               + **pass**: pass a manual review
               + **refuse**: reject a manual review
               + **delay-pass**: pass a delayed execution job
               + **delay-refuse**: reject a delayed execution job
               + **delay**: delay the execution for one hour
               + **manual-pass**: pass the manual check point
               + **manual-refuse**: reject the manual check point
               + **resume**: resume a pipeline
               + **cancel-queuing**: cancel a pipeline queuing
               + **retry**: retry a pipeline
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] choose_jobs: Specifies the selected pipeline jobs. Only valid when `action` is **run**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] choose_stages: Specifies the selected pipeline stages. Only valid when `action` is **run**.
        :param pulumi.Input[_builtins.str] description: Specifies the running description. Only valid when `action` is **run**.
               
               <a name="block--sources"></a>
               The `sources` block supports:
        :param pulumi.Input[_builtins.str] job_run_id: Specifies the pipeline job run ID.
        :param pulumi.Input[_builtins.str] pipeline_run_id: Specifies the pipeline run ID.
        :param pulumi.Input[_builtins.str] queue_id: Specifies the queued pipeline step run ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineActionSourceArgs']]] sources: Specifies the code source information list. Only valid when `action` is **run**.
               The sources structure is documented below.
        :param pulumi.Input[_builtins.str] step_run_id: Specifies the pipeline step run ID.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineActionVariableArgs']]] variables: Specifies the custom parameters used. Only valid when `action` is **run**.
               The variables structure is documented below.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "project_id", project_id)
        if choose_jobs is not None:
            pulumi.set(__self__, "choose_jobs", choose_jobs)
        if choose_stages is not None:
            pulumi.set(__self__, "choose_stages", choose_stages)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if job_run_id is not None:
            pulumi.set(__self__, "job_run_id", job_run_id)
        if pipeline_run_id is not None:
            pulumi.set(__self__, "pipeline_run_id", pipeline_run_id)
        if queue_id is not None:
            pulumi.set(__self__, "queue_id", queue_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if step_run_id is not None:
            pulumi.set(__self__, "step_run_id", step_run_id)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the action.
        Value can be as follows:
        + **run**: start a pipeline
        + **stop**: stop a pipeline
        + **pass**: pass a manual review
        + **refuse**: reject a manual review
        + **delay-pass**: pass a delayed execution job
        + **delay-refuse**: reject a delayed execution job
        + **delay**: delay the execution for one hour
        + **manual-pass**: pass the manual check point
        + **manual-refuse**: reject the manual check point
        + **resume**: resume a pipeline
        + **cancel-queuing**: cancel a pipeline queuing
        + **retry**: retry a pipeline
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CodeArts project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="chooseJobs")
    def choose_jobs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the selected pipeline jobs. Only valid when `action` is **run**.
        """
        return pulumi.get(self, "choose_jobs")

    @choose_jobs.setter
    def choose_jobs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "choose_jobs", value)

    @_builtins.property
    @pulumi.getter(name="chooseStages")
    def choose_stages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the selected pipeline stages. Only valid when `action` is **run**.
        """
        return pulumi.get(self, "choose_stages")

    @choose_stages.setter
    def choose_stages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "choose_stages", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the running description. Only valid when `action` is **run**.

        <a name="block--sources"></a>
        The `sources` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="jobRunId")
    def job_run_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline job run ID.
        """
        return pulumi.get(self, "job_run_id")

    @job_run_id.setter
    def job_run_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "job_run_id", value)

    @_builtins.property
    @pulumi.getter(name="pipelineRunId")
    def pipeline_run_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline run ID.
        """
        return pulumi.get(self, "pipeline_run_id")

    @pipeline_run_id.setter
    def pipeline_run_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pipeline_run_id", value)

    @_builtins.property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the queued pipeline step run ID.
        """
        return pulumi.get(self, "queue_id")

    @queue_id.setter
    def queue_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineActionSourceArgs']]]]:
        """
        Specifies the code source information list. Only valid when `action` is **run**.
        The sources structure is documented below.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineActionSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter(name="stepRunId")
    def step_run_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline step run ID.
        """
        return pulumi.get(self, "step_run_id")

    @step_run_id.setter
    def step_run_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "step_run_id", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineActionVariableArgs']]]]:
        """
        Specifies the custom parameters used. Only valid when `action` is **run**.
        The variables structure is documented below.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineActionVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class _PipelineActionState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 choose_jobs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 choose_stages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 job_run_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_run_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineActionSourceArgs']]]] = None,
                 step_run_id: Optional[pulumi.Input[_builtins.str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineActionVariableArgs']]]] = None):
        """
        Input properties used for looking up and filtering PipelineAction resources.
        :param pulumi.Input[_builtins.str] action: Specifies the action.
               Value can be as follows:
               + **run**: start a pipeline
               + **stop**: stop a pipeline
               + **pass**: pass a manual review
               + **refuse**: reject a manual review
               + **delay-pass**: pass a delayed execution job
               + **delay-refuse**: reject a delayed execution job
               + **delay**: delay the execution for one hour
               + **manual-pass**: pass the manual check point
               + **manual-refuse**: reject the manual check point
               + **resume**: resume a pipeline
               + **cancel-queuing**: cancel a pipeline queuing
               + **retry**: retry a pipeline
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] choose_jobs: Specifies the selected pipeline jobs. Only valid when `action` is **run**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] choose_stages: Specifies the selected pipeline stages. Only valid when `action` is **run**.
        :param pulumi.Input[_builtins.str] description: Specifies the running description. Only valid when `action` is **run**.
               
               <a name="block--sources"></a>
               The `sources` block supports:
        :param pulumi.Input[_builtins.str] job_run_id: Specifies the pipeline job run ID.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID.
        :param pulumi.Input[_builtins.str] pipeline_run_id: Specifies the pipeline run ID.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.str] queue_id: Specifies the queued pipeline step run ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineActionSourceArgs']]] sources: Specifies the code source information list. Only valid when `action` is **run**.
               The sources structure is documented below.
        :param pulumi.Input[_builtins.str] step_run_id: Specifies the pipeline step run ID.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineActionVariableArgs']]] variables: Specifies the custom parameters used. Only valid when `action` is **run**.
               The variables structure is documented below.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if choose_jobs is not None:
            pulumi.set(__self__, "choose_jobs", choose_jobs)
        if choose_stages is not None:
            pulumi.set(__self__, "choose_stages", choose_stages)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if job_run_id is not None:
            pulumi.set(__self__, "job_run_id", job_run_id)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if pipeline_run_id is not None:
            pulumi.set(__self__, "pipeline_run_id", pipeline_run_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if queue_id is not None:
            pulumi.set(__self__, "queue_id", queue_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if step_run_id is not None:
            pulumi.set(__self__, "step_run_id", step_run_id)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the action.
        Value can be as follows:
        + **run**: start a pipeline
        + **stop**: stop a pipeline
        + **pass**: pass a manual review
        + **refuse**: reject a manual review
        + **delay-pass**: pass a delayed execution job
        + **delay-refuse**: reject a delayed execution job
        + **delay**: delay the execution for one hour
        + **manual-pass**: pass the manual check point
        + **manual-refuse**: reject the manual check point
        + **resume**: resume a pipeline
        + **cancel-queuing**: cancel a pipeline queuing
        + **retry**: retry a pipeline
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="chooseJobs")
    def choose_jobs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the selected pipeline jobs. Only valid when `action` is **run**.
        """
        return pulumi.get(self, "choose_jobs")

    @choose_jobs.setter
    def choose_jobs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "choose_jobs", value)

    @_builtins.property
    @pulumi.getter(name="chooseStages")
    def choose_stages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the selected pipeline stages. Only valid when `action` is **run**.
        """
        return pulumi.get(self, "choose_stages")

    @choose_stages.setter
    def choose_stages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "choose_stages", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the running description. Only valid when `action` is **run**.

        <a name="block--sources"></a>
        The `sources` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="jobRunId")
    def job_run_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline job run ID.
        """
        return pulumi.get(self, "job_run_id")

    @job_run_id.setter
    def job_run_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "job_run_id", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter(name="pipelineRunId")
    def pipeline_run_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline run ID.
        """
        return pulumi.get(self, "pipeline_run_id")

    @pipeline_run_id.setter
    def pipeline_run_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pipeline_run_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CodeArts project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the queued pipeline step run ID.
        """
        return pulumi.get(self, "queue_id")

    @queue_id.setter
    def queue_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineActionSourceArgs']]]]:
        """
        Specifies the code source information list. Only valid when `action` is **run**.
        The sources structure is documented below.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineActionSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter(name="stepRunId")
    def step_run_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline step run ID.
        """
        return pulumi.get(self, "step_run_id")

    @step_run_id.setter
    def step_run_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "step_run_id", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineActionVariableArgs']]]]:
        """
        Specifies the custom parameters used. Only valid when `action` is **run**.
        The variables structure is documented below.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineActionVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.type_token("huaweicloud:codearts/pipelineAction:PipelineAction")
class PipelineAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 choose_jobs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 choose_stages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 job_run_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_run_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineActionSourceArgs', 'PipelineActionSourceArgsDict']]]]] = None,
                 step_run_id: Optional[pulumi.Input[_builtins.str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineActionVariableArgs', 'PipelineActionVariableArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a CodeArts pipeline action resource within HuaweiCloud.

        ## Example Usage

        ### start a pipeline

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        codehub_id = config.require_object("codehubId")
        git_type = config.require_object("gitType")
        git_url = config.require_object("gitUrl")
        choose_jobs = config.require_object("chooseJobs")
        stage_identifier = config.require_object("stageIdentifier")
        job_identifier = config.require_object("jobIdentifier")
        run = huaweicloud.codearts.PipelineAction("run",
            action="run",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            sources=[{
                "type": "code",
                "params": {
                    "codehub_id": codehub_id,
                    "git_type": git_type,
                    "git_url": git_url,
                    "default_branch": "master",
                    "build_params": {
                        "build_type": "branch",
                        "event_type": "Manual",
                        "target_branch": "master",
                    },
                },
            }],
            choose_jobs=[job_identifier],
            choose_stages=[stage_identifier],
            description="demo")
        ```

        ### stop a pipeline

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        stop = huaweicloud.codearts.PipelineAction("stop",
            action="stop",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id)
        ```

        ### pass a manual review

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        job_run_id = config.require_object("jobRunId")
        step_run_id = config.require_object("stepRunId")
        pass_ = huaweicloud.codearts.PipelineAction("pass",
            action="pass",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            job_run_id=job_run_id,
            step_run_id=step_run_id)
        ```

        ### reject a manual review

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        job_run_id = config.require_object("jobRunId")
        step_run_id = config.require_object("stepRunId")
        refuse = huaweicloud.codearts.PipelineAction("refuse",
            action="refuse",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            job_run_id=job_run_id,
            step_run_id=step_run_id)
        ```

        ### pass a delayed execution job

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        job_run_id = config.require_object("jobRunId")
        step_run_id = config.require_object("stepRunId")
        delay_pass = huaweicloud.codearts.PipelineAction("delay-pass",
            action="delay-pass",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            job_run_id=job_run_id,
            step_run_id=step_run_id)
        ```

        ### reject a delayed execution job

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        job_run_id = config.require_object("jobRunId")
        step_run_id = config.require_object("stepRunId")
        delay_refuse = huaweicloud.codearts.PipelineAction("delay-refuse",
            action="delay-refuse",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            job_run_id=job_run_id,
            step_run_id=step_run_id)
        ```

        ### delay the execution for one hour

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        job_run_id = config.require_object("jobRunId")
        step_run_id = config.require_object("stepRunId")
        delay = huaweicloud.codearts.PipelineAction("delay",
            action="delay",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            job_run_id=job_run_id,
            step_run_id=step_run_id)
        ```

        ### pass the manual check point

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        pre_step_run_id = config.require_object("preStepRunId")
        manual_pass = huaweicloud.codearts.PipelineAction("manual-pass",
            action="manual-pass",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            step_run_id=pre_step_run_id)
        ```

        ### reject the manual check point

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        pre_step_run_id = config.require_object("preStepRunId")
        manual_refuse = huaweicloud.codearts.PipelineAction("manual-refuse",
            action="manual-refuse",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            step_run_id=pre_step_run_id)
        ```

        ### resume a pipeline

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        job_run_id = config.require_object("jobRunId")
        step_run_id = config.require_object("stepRunId")
        resume = huaweicloud.codearts.PipelineAction("resume",
            action="resume",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            job_run_id=job_run_id,
            step_run_id=step_run_id)
        ```

        ### cancel a pipeline queuing

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        queue_id = config.require_object("queueId")
        cancel_queuing = huaweicloud.codearts.PipelineAction("cancel-queuing",
            action="cancel-queuing",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            queue_id=queue_id)
        ```

        ### retry a pipeline

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        retry = huaweicloud.codearts.PipelineAction("retry",
            action="retry",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action.
               Value can be as follows:
               + **run**: start a pipeline
               + **stop**: stop a pipeline
               + **pass**: pass a manual review
               + **refuse**: reject a manual review
               + **delay-pass**: pass a delayed execution job
               + **delay-refuse**: reject a delayed execution job
               + **delay**: delay the execution for one hour
               + **manual-pass**: pass the manual check point
               + **manual-refuse**: reject the manual check point
               + **resume**: resume a pipeline
               + **cancel-queuing**: cancel a pipeline queuing
               + **retry**: retry a pipeline
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] choose_jobs: Specifies the selected pipeline jobs. Only valid when `action` is **run**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] choose_stages: Specifies the selected pipeline stages. Only valid when `action` is **run**.
        :param pulumi.Input[_builtins.str] description: Specifies the running description. Only valid when `action` is **run**.
               
               <a name="block--sources"></a>
               The `sources` block supports:
        :param pulumi.Input[_builtins.str] job_run_id: Specifies the pipeline job run ID.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID.
        :param pulumi.Input[_builtins.str] pipeline_run_id: Specifies the pipeline run ID.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.str] queue_id: Specifies the queued pipeline step run ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineActionSourceArgs', 'PipelineActionSourceArgsDict']]]] sources: Specifies the code source information list. Only valid when `action` is **run**.
               The sources structure is documented below.
        :param pulumi.Input[_builtins.str] step_run_id: Specifies the pipeline step run ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineActionVariableArgs', 'PipelineActionVariableArgsDict']]]] variables: Specifies the custom parameters used. Only valid when `action` is **run**.
               The variables structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelineActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts pipeline action resource within HuaweiCloud.

        ## Example Usage

        ### start a pipeline

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        codehub_id = config.require_object("codehubId")
        git_type = config.require_object("gitType")
        git_url = config.require_object("gitUrl")
        choose_jobs = config.require_object("chooseJobs")
        stage_identifier = config.require_object("stageIdentifier")
        job_identifier = config.require_object("jobIdentifier")
        run = huaweicloud.codearts.PipelineAction("run",
            action="run",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            sources=[{
                "type": "code",
                "params": {
                    "codehub_id": codehub_id,
                    "git_type": git_type,
                    "git_url": git_url,
                    "default_branch": "master",
                    "build_params": {
                        "build_type": "branch",
                        "event_type": "Manual",
                        "target_branch": "master",
                    },
                },
            }],
            choose_jobs=[job_identifier],
            choose_stages=[stage_identifier],
            description="demo")
        ```

        ### stop a pipeline

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        stop = huaweicloud.codearts.PipelineAction("stop",
            action="stop",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id)
        ```

        ### pass a manual review

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        job_run_id = config.require_object("jobRunId")
        step_run_id = config.require_object("stepRunId")
        pass_ = huaweicloud.codearts.PipelineAction("pass",
            action="pass",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            job_run_id=job_run_id,
            step_run_id=step_run_id)
        ```

        ### reject a manual review

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        job_run_id = config.require_object("jobRunId")
        step_run_id = config.require_object("stepRunId")
        refuse = huaweicloud.codearts.PipelineAction("refuse",
            action="refuse",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            job_run_id=job_run_id,
            step_run_id=step_run_id)
        ```

        ### pass a delayed execution job

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        job_run_id = config.require_object("jobRunId")
        step_run_id = config.require_object("stepRunId")
        delay_pass = huaweicloud.codearts.PipelineAction("delay-pass",
            action="delay-pass",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            job_run_id=job_run_id,
            step_run_id=step_run_id)
        ```

        ### reject a delayed execution job

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        job_run_id = config.require_object("jobRunId")
        step_run_id = config.require_object("stepRunId")
        delay_refuse = huaweicloud.codearts.PipelineAction("delay-refuse",
            action="delay-refuse",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            job_run_id=job_run_id,
            step_run_id=step_run_id)
        ```

        ### delay the execution for one hour

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        job_run_id = config.require_object("jobRunId")
        step_run_id = config.require_object("stepRunId")
        delay = huaweicloud.codearts.PipelineAction("delay",
            action="delay",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            job_run_id=job_run_id,
            step_run_id=step_run_id)
        ```

        ### pass the manual check point

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        pre_step_run_id = config.require_object("preStepRunId")
        manual_pass = huaweicloud.codearts.PipelineAction("manual-pass",
            action="manual-pass",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            step_run_id=pre_step_run_id)
        ```

        ### reject the manual check point

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        pre_step_run_id = config.require_object("preStepRunId")
        manual_refuse = huaweicloud.codearts.PipelineAction("manual-refuse",
            action="manual-refuse",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            step_run_id=pre_step_run_id)
        ```

        ### resume a pipeline

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        job_run_id = config.require_object("jobRunId")
        step_run_id = config.require_object("stepRunId")
        resume = huaweicloud.codearts.PipelineAction("resume",
            action="resume",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            job_run_id=job_run_id,
            step_run_id=step_run_id)
        ```

        ### cancel a pipeline queuing

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        queue_id = config.require_object("queueId")
        cancel_queuing = huaweicloud.codearts.PipelineAction("cancel-queuing",
            action="cancel-queuing",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id,
            queue_id=queue_id)
        ```

        ### retry a pipeline

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        pipeline_run_id = config.require_object("pipelineRunId")
        retry = huaweicloud.codearts.PipelineAction("retry",
            action="retry",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            pipeline_run_id=pipeline_run_id)
        ```

        :param str resource_name: The name of the resource.
        :param PipelineActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelineActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 choose_jobs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 choose_stages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 job_run_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_run_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineActionSourceArgs', 'PipelineActionSourceArgsDict']]]]] = None,
                 step_run_id: Optional[pulumi.Input[_builtins.str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineActionVariableArgs', 'PipelineActionVariableArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelineActionArgs.__new__(PipelineActionArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["choose_jobs"] = choose_jobs
            __props__.__dict__["choose_stages"] = choose_stages
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["job_run_id"] = job_run_id
            if pipeline_id is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_id'")
            __props__.__dict__["pipeline_id"] = pipeline_id
            __props__.__dict__["pipeline_run_id"] = pipeline_run_id
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["queue_id"] = queue_id
            __props__.__dict__["region"] = region
            __props__.__dict__["sources"] = sources
            __props__.__dict__["step_run_id"] = step_run_id
            __props__.__dict__["variables"] = variables
        super(PipelineAction, __self__).__init__(
            'huaweicloud:codearts/pipelineAction:PipelineAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            choose_jobs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            choose_stages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            job_run_id: Optional[pulumi.Input[_builtins.str]] = None,
            pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
            pipeline_run_id: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            queue_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineActionSourceArgs', 'PipelineActionSourceArgsDict']]]]] = None,
            step_run_id: Optional[pulumi.Input[_builtins.str]] = None,
            variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineActionVariableArgs', 'PipelineActionVariableArgsDict']]]]] = None) -> 'PipelineAction':
        """
        Get an existing PipelineAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action.
               Value can be as follows:
               + **run**: start a pipeline
               + **stop**: stop a pipeline
               + **pass**: pass a manual review
               + **refuse**: reject a manual review
               + **delay-pass**: pass a delayed execution job
               + **delay-refuse**: reject a delayed execution job
               + **delay**: delay the execution for one hour
               + **manual-pass**: pass the manual check point
               + **manual-refuse**: reject the manual check point
               + **resume**: resume a pipeline
               + **cancel-queuing**: cancel a pipeline queuing
               + **retry**: retry a pipeline
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] choose_jobs: Specifies the selected pipeline jobs. Only valid when `action` is **run**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] choose_stages: Specifies the selected pipeline stages. Only valid when `action` is **run**.
        :param pulumi.Input[_builtins.str] description: Specifies the running description. Only valid when `action` is **run**.
               
               <a name="block--sources"></a>
               The `sources` block supports:
        :param pulumi.Input[_builtins.str] job_run_id: Specifies the pipeline job run ID.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID.
        :param pulumi.Input[_builtins.str] pipeline_run_id: Specifies the pipeline run ID.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.str] queue_id: Specifies the queued pipeline step run ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineActionSourceArgs', 'PipelineActionSourceArgsDict']]]] sources: Specifies the code source information list. Only valid when `action` is **run**.
               The sources structure is documented below.
        :param pulumi.Input[_builtins.str] step_run_id: Specifies the pipeline step run ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineActionVariableArgs', 'PipelineActionVariableArgsDict']]]] variables: Specifies the custom parameters used. Only valid when `action` is **run**.
               The variables structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelineActionState.__new__(_PipelineActionState)

        __props__.__dict__["action"] = action
        __props__.__dict__["choose_jobs"] = choose_jobs
        __props__.__dict__["choose_stages"] = choose_stages
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["job_run_id"] = job_run_id
        __props__.__dict__["pipeline_id"] = pipeline_id
        __props__.__dict__["pipeline_run_id"] = pipeline_run_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["queue_id"] = queue_id
        __props__.__dict__["region"] = region
        __props__.__dict__["sources"] = sources
        __props__.__dict__["step_run_id"] = step_run_id
        __props__.__dict__["variables"] = variables
        return PipelineAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the action.
        Value can be as follows:
        + **run**: start a pipeline
        + **stop**: stop a pipeline
        + **pass**: pass a manual review
        + **refuse**: reject a manual review
        + **delay-pass**: pass a delayed execution job
        + **delay-refuse**: reject a delayed execution job
        + **delay**: delay the execution for one hour
        + **manual-pass**: pass the manual check point
        + **manual-refuse**: reject the manual check point
        + **resume**: resume a pipeline
        + **cancel-queuing**: cancel a pipeline queuing
        + **retry**: retry a pipeline
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="chooseJobs")
    def choose_jobs(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the selected pipeline jobs. Only valid when `action` is **run**.
        """
        return pulumi.get(self, "choose_jobs")

    @_builtins.property
    @pulumi.getter(name="chooseStages")
    def choose_stages(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the selected pipeline stages. Only valid when `action` is **run**.
        """
        return pulumi.get(self, "choose_stages")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the running description. Only valid when `action` is **run**.

        <a name="block--sources"></a>
        The `sources` block supports:
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="jobRunId")
    def job_run_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the pipeline job run ID.
        """
        return pulumi.get(self, "job_run_id")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter(name="pipelineRunId")
    def pipeline_run_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the pipeline run ID.
        """
        return pulumi.get(self, "pipeline_run_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CodeArts project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the queued pipeline step run ID.
        """
        return pulumi.get(self, "queue_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> pulumi.Output[Optional[Sequence['outputs.PipelineActionSource']]]:
        """
        Specifies the code source information list. Only valid when `action` is **run**.
        The sources structure is documented below.
        """
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter(name="stepRunId")
    def step_run_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the pipeline step run ID.
        """
        return pulumi.get(self, "step_run_id")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> pulumi.Output[Optional[Sequence['outputs.PipelineActionVariable']]]:
        """
        Specifies the custom parameters used. Only valid when `action` is **run**.
        The variables structure is documented below.
        """
        return pulumi.get(self, "variables")

