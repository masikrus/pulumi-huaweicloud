# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'BuildTaskActionParameterArgs',
    'BuildTaskActionParameterArgsDict',
    'BuildTaskActionScmArgs',
    'BuildTaskActionScmArgsDict',
    'BuildTaskParameterArgs',
    'BuildTaskParameterArgsDict',
    'BuildTaskParameterParamArgs',
    'BuildTaskParameterParamArgsDict',
    'BuildTaskParameterParamLimitArgs',
    'BuildTaskParameterParamLimitArgsDict',
    'BuildTaskScmArgs',
    'BuildTaskScmArgsDict',
    'BuildTaskStepArgs',
    'BuildTaskStepArgsDict',
    'BuildTaskTriggerArgs',
    'BuildTaskTriggerArgsDict',
    'BuildTaskTriggerParameterArgs',
    'BuildTaskTriggerParameterArgsDict',
    'BuildTemplateParameterArgs',
    'BuildTemplateParameterArgsDict',
    'BuildTemplateParameterParamArgs',
    'BuildTemplateParameterParamArgsDict',
    'BuildTemplateParameterParamLimitArgs',
    'BuildTemplateParameterParamLimitArgsDict',
    'BuildTemplateStepArgs',
    'BuildTemplateStepArgsDict',
    'DeployApplicationCopyOperationListArgs',
    'DeployApplicationCopyOperationListArgsDict',
    'DeployApplicationCopyPermissionMatrixArgs',
    'DeployApplicationCopyPermissionMatrixArgsDict',
    'DeployApplicationDeployParamArgs',
    'DeployApplicationDeployParamArgsDict',
    'DeployApplicationOperationListArgs',
    'DeployApplicationOperationListArgsDict',
    'DeployApplicationPermissionMatrixArgs',
    'DeployApplicationPermissionMatrixArgsDict',
    'DeployApplicationPermissionRoleArgs',
    'DeployApplicationPermissionRoleArgsDict',
    'DeployEnvironmentCreatedByArgs',
    'DeployEnvironmentCreatedByArgsDict',
    'DeployEnvironmentHostArgs',
    'DeployEnvironmentHostArgsDict',
    'DeployEnvironmentPermissionArgs',
    'DeployEnvironmentPermissionArgsDict',
    'DeployEnvironmentPermissionMatrixArgs',
    'DeployEnvironmentPermissionMatrixArgsDict',
    'DeployEnvironmentProxyArgs',
    'DeployEnvironmentProxyArgsDict',
    'DeployGroupCreatedByArgs',
    'DeployGroupCreatedByArgsDict',
    'DeployGroupPermissionArgs',
    'DeployGroupPermissionArgsDict',
    'DeployGroupPermissionMatrixArgs',
    'DeployGroupPermissionMatrixArgsDict',
    'DeployHostPermissionArgs',
    'DeployHostPermissionArgsDict',
    'InspectorHostLastScanInfoArgs',
    'InspectorHostLastScanInfoArgsDict',
    'PipelineActionSourceArgs',
    'PipelineActionSourceArgsDict',
    'PipelineActionSourceParamsArgs',
    'PipelineActionSourceParamsArgsDict',
    'PipelineActionSourceParamsBuildParamsArgs',
    'PipelineActionSourceParamsBuildParamsArgsDict',
    'PipelineActionVariableArgs',
    'PipelineActionVariableArgsDict',
    'PipelineByTemplateConcurrencyControlArgs',
    'PipelineByTemplateConcurrencyControlArgsDict',
    'PipelineByTemplateRolePermissionArgs',
    'PipelineByTemplateRolePermissionArgsDict',
    'PipelineByTemplateScheduleArgs',
    'PipelineByTemplateScheduleArgsDict',
    'PipelineByTemplateSourceArgs',
    'PipelineByTemplateSourceArgsDict',
    'PipelineByTemplateSourceParamsArgs',
    'PipelineByTemplateSourceParamsArgsDict',
    'PipelineByTemplateTriggerArgs',
    'PipelineByTemplateTriggerArgsDict',
    'PipelineByTemplateTriggerEventArgs',
    'PipelineByTemplateTriggerEventArgsDict',
    'PipelineByTemplateVariableArgs',
    'PipelineByTemplateVariableArgsDict',
    'PipelineConcurrencyControlArgs',
    'PipelineConcurrencyControlArgsDict',
    'PipelineMicroServiceRepoArgs',
    'PipelineMicroServiceRepoArgsDict',
    'PipelineParameterGroupRelatedPipelineArgs',
    'PipelineParameterGroupRelatedPipelineArgsDict',
    'PipelineParameterGroupVariableArgs',
    'PipelineParameterGroupVariableArgsDict',
    'PipelineRolePermissionArgs',
    'PipelineRolePermissionArgsDict',
    'PipelineRuleContentArgs',
    'PipelineRuleContentArgsDict',
    'PipelineRuleContentPropertyArgs',
    'PipelineRuleContentPropertyArgsDict',
    'PipelineScheduleArgs',
    'PipelineScheduleArgsDict',
    'PipelineServiceEndpointAuthorizationArgs',
    'PipelineServiceEndpointAuthorizationArgsDict',
    'PipelineServiceEndpointCreatedByArgs',
    'PipelineServiceEndpointCreatedByArgsDict',
    'PipelineSourceArgs',
    'PipelineSourceArgsDict',
    'PipelineSourceParamsArgs',
    'PipelineSourceParamsArgsDict',
    'PipelineTemplateVariableArgs',
    'PipelineTemplateVariableArgsDict',
    'PipelineTriggerArgs',
    'PipelineTriggerArgsDict',
    'PipelineTriggerEventArgs',
    'PipelineTriggerEventArgsDict',
    'PipelineVariableArgs',
    'PipelineVariableArgsDict',
]

MYPY = False

if not MYPY:
    class BuildTaskActionParameterArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the parameter name.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the parameter value.

        <a name="block--scm"></a>
        The `scm` block supports:
        """
elif False:
    BuildTaskActionParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildTaskActionParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[_builtins.str] value: Specifies the parameter value.
               
               <a name="block--scm"></a>
               The `scm` block supports:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter value.

        <a name="block--scm"></a>
        The `scm` block supports:
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class BuildTaskActionScmArgsDict(TypedDict):
        build_commit_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the build commit ID.
        """
        build_tag: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the build tag.
        """
elif False:
    BuildTaskActionScmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildTaskActionScmArgs:
    def __init__(__self__, *,
                 build_commit_id: Optional[pulumi.Input[_builtins.str]] = None,
                 build_tag: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] build_commit_id: Specifies the build commit ID.
        :param pulumi.Input[_builtins.str] build_tag: Specifies the build tag.
        """
        if build_commit_id is not None:
            pulumi.set(__self__, "build_commit_id", build_commit_id)
        if build_tag is not None:
            pulumi.set(__self__, "build_tag", build_tag)

    @_builtins.property
    @pulumi.getter(name="buildCommitId")
    def build_commit_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the build commit ID.
        """
        return pulumi.get(self, "build_commit_id")

    @build_commit_id.setter
    def build_commit_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build_commit_id", value)

    @_builtins.property
    @pulumi.getter(name="buildTag")
    def build_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the build tag.
        """
        return pulumi.get(self, "build_tag")

    @build_tag.setter
    def build_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build_tag", value)


if not MYPY:
    class BuildTaskParameterArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter name.
        """
        params: NotRequired[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterParamArgsDict']]]]
        """
        Specifies the build execution sub-parameters.
        The params structure is documented below.

        <a name="block--parameters--params"></a>
        The `params` block supports:
        """
elif False:
    BuildTaskParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildTaskParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterParamArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterParamArgs']]] params: Specifies the build execution sub-parameters.
               The params structure is documented below.
               
               <a name="block--parameters--params"></a>
               The `params` block supports:
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if params is not None:
            pulumi.set(__self__, "params", params)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterParamArgs']]]]:
        """
        Specifies the build execution sub-parameters.
        The params structure is documented below.

        <a name="block--parameters--params"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterParamArgs']]]]):
        pulumi.set(self, "params", value)


if not MYPY:
    class BuildTaskParameterParamArgsDict(TypedDict):
        limits: NotRequired[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterParamLimitArgsDict']]]]
        """
        Specifies the enumeration parameter restrictions.
        The limits structure is documented below.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter name.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter value.
        """
elif False:
    BuildTaskParameterParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildTaskParameterParamArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterParamLimitArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterParamLimitArgs']]] limits: Specifies the enumeration parameter restrictions.
               The limits structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[_builtins.str] value: Specifies the parameter value.
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterParamLimitArgs']]]]:
        """
        Specifies the enumeration parameter restrictions.
        The limits structure is documented below.
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterParamLimitArgs']]]]):
        pulumi.set(self, "limits", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class BuildTaskParameterParamLimitArgsDict(TypedDict):
        disable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies whether it is effective. Defaults to **0**, which is effective.
        """
        display_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the displayed name of the parameter.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter name.
        """
elif False:
    BuildTaskParameterParamLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildTaskParameterParamLimitArgs:
    def __init__(__self__, *,
                 disable: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] disable: Specifies whether it is effective. Defaults to **0**, which is effective.
        :param pulumi.Input[_builtins.str] display_name: Specifies the displayed name of the parameter.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        """
        if disable is not None:
            pulumi.set(__self__, "disable", disable)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def disable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether it is effective. Defaults to **0**, which is effective.
        """
        return pulumi.get(self, "disable")

    @disable.setter
    def disable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disable", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the displayed name of the parameter.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class BuildTaskScmArgsDict(TypedDict):
        repo_id: pulumi.Input[_builtins.str]
        """
        Specifies the repository ID.
        """
        scm_type: pulumi.Input[_builtins.str]
        """
        Specifies the source code management type.
        """
        url: pulumi.Input[_builtins.str]
        """
        Specifies the repository URL.
        """
        web_url: pulumi.Input[_builtins.str]
        """
        Specifies the web URL of the repository.
        """
        branch: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the branch name.
        """
        build_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the build type.
        """
        depth: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the depth.
        """
        enable_git_lfs: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to enable Git LFS. Defaults to **false**.
        """
        endpoint_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the endpoint ID.
        """
        group_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the group name.
        """
        is_auto_build: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to automatically build. Defaults to **false**.
        """
        repo_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the repository name.
        """
        source: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the source type.

        <a name="block--steps"></a>
        The `steps` block supports:
        """
elif False:
    BuildTaskScmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildTaskScmArgs:
    def __init__(__self__, *,
                 repo_id: pulumi.Input[_builtins.str],
                 scm_type: pulumi.Input[_builtins.str],
                 url: pulumi.Input[_builtins.str],
                 web_url: pulumi.Input[_builtins.str],
                 branch: Optional[pulumi.Input[_builtins.str]] = None,
                 build_type: Optional[pulumi.Input[_builtins.str]] = None,
                 depth: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_git_lfs: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_build: Optional[pulumi.Input[_builtins.bool]] = None,
                 repo_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] repo_id: Specifies the repository ID.
        :param pulumi.Input[_builtins.str] scm_type: Specifies the source code management type.
        :param pulumi.Input[_builtins.str] url: Specifies the repository URL.
        :param pulumi.Input[_builtins.str] web_url: Specifies the web URL of the repository.
        :param pulumi.Input[_builtins.str] branch: Specifies the branch name.
        :param pulumi.Input[_builtins.str] build_type: Specifies the build type.
        :param pulumi.Input[_builtins.str] depth: Specifies the depth.
        :param pulumi.Input[_builtins.bool] enable_git_lfs: Specifies whether to enable Git LFS. Defaults to **false**.
        :param pulumi.Input[_builtins.str] endpoint_id: Specifies the endpoint ID.
        :param pulumi.Input[_builtins.str] group_name: Specifies the group name.
        :param pulumi.Input[_builtins.bool] is_auto_build: Specifies whether to automatically build. Defaults to **false**.
        :param pulumi.Input[_builtins.str] repo_name: Specifies the repository name.
        :param pulumi.Input[_builtins.str] source: Specifies the source type.
               
               <a name="block--steps"></a>
               The `steps` block supports:
        """
        pulumi.set(__self__, "repo_id", repo_id)
        pulumi.set(__self__, "scm_type", scm_type)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "web_url", web_url)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if build_type is not None:
            pulumi.set(__self__, "build_type", build_type)
        if depth is not None:
            pulumi.set(__self__, "depth", depth)
        if enable_git_lfs is not None:
            pulumi.set(__self__, "enable_git_lfs", enable_git_lfs)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if is_auto_build is not None:
            pulumi.set(__self__, "is_auto_build", is_auto_build)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the repository ID.
        """
        return pulumi.get(self, "repo_id")

    @repo_id.setter
    def repo_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "repo_id", value)

    @_builtins.property
    @pulumi.getter(name="scmType")
    def scm_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the source code management type.
        """
        return pulumi.get(self, "scm_type")

    @scm_type.setter
    def scm_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scm_type", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the repository URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the web URL of the repository.
        """
        return pulumi.get(self, "web_url")

    @web_url.setter
    def web_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "web_url", value)

    @_builtins.property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the branch name.
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "branch", value)

    @_builtins.property
    @pulumi.getter(name="buildType")
    def build_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the build type.
        """
        return pulumi.get(self, "build_type")

    @build_type.setter
    def build_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build_type", value)

    @_builtins.property
    @pulumi.getter
    def depth(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the depth.
        """
        return pulumi.get(self, "depth")

    @depth.setter
    def depth(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "depth", value)

    @_builtins.property
    @pulumi.getter(name="enableGitLfs")
    def enable_git_lfs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable Git LFS. Defaults to **false**.
        """
        return pulumi.get(self, "enable_git_lfs")

    @enable_git_lfs.setter
    def enable_git_lfs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_git_lfs", value)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the group name.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter(name="isAutoBuild")
    def is_auto_build(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to automatically build. Defaults to **false**.
        """
        return pulumi.get(self, "is_auto_build")

    @is_auto_build.setter
    def is_auto_build(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_auto_build", value)

    @_builtins.property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the repository name.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repo_name", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source type.

        <a name="block--steps"></a>
        The `steps` block supports:
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)


if not MYPY:
    class BuildTaskStepArgsDict(TypedDict):
        module_id: pulumi.Input[_builtins.str]
        """
        Specifies the build step module ID.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the parameter name.
        """
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to enable the step. Defaults to **false**.
        """
        properties: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Specifies the build step properties. Value is JSON format string.
        """
        properties_all: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Indicates the build step properties.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the build step version.

        <a name="block--triggers"></a>
        The `triggers` block supports:
        """
elif False:
    BuildTaskStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildTaskStepArgs:
    def __init__(__self__, *,
                 module_id: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 properties_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] module_id: Specifies the build step module ID.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[_builtins.bool] enable: Specifies whether to enable the step. Defaults to **false**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] properties: Specifies the build step properties. Value is JSON format string.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] properties_all: Indicates the build step properties.
        :param pulumi.Input[_builtins.str] version: Specifies the build step version.
               
               <a name="block--triggers"></a>
               The `triggers` block supports:
        """
        pulumi.set(__self__, "module_id", module_id)
        pulumi.set(__self__, "name", name)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if properties_all is not None:
            pulumi.set(__self__, "properties_all", properties_all)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the build step module ID.
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "module_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the step. Defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the build step properties. Value is JSON format string.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter(name="propertiesAll")
    def properties_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Indicates the build step properties.
        """
        return pulumi.get(self, "properties_all")

    @properties_all.setter
    def properties_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "properties_all", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the build step version.

        <a name="block--triggers"></a>
        The `triggers` block supports:
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class BuildTaskTriggerArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the parameter name.
        """
        parameters: pulumi.Input[Sequence[pulumi.Input['BuildTaskTriggerParameterArgsDict']]]
        """
        Specifies the custom parameters.
        The parameters structure is documented below.

        <a name="block--triggers--parameters"></a>
        The `parameters` block supports:
        """
elif False:
    BuildTaskTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildTaskTriggerArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['BuildTaskTriggerParameterArgs']]]):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTaskTriggerParameterArgs']]] parameters: Specifies the custom parameters.
               The parameters structure is documented below.
               
               <a name="block--triggers--parameters"></a>
               The `parameters` block supports:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['BuildTaskTriggerParameterArgs']]]:
        """
        Specifies the custom parameters.
        The parameters structure is documented below.

        <a name="block--triggers--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['BuildTaskTriggerParameterArgs']]]):
        pulumi.set(self, "parameters", value)


if not MYPY:
    class BuildTaskTriggerParameterArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the parameter name.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the parameter value.
        """
elif False:
    BuildTaskTriggerParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildTaskTriggerParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[_builtins.str] value: Specifies the parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class BuildTemplateParameterArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter name.
        """
        params: NotRequired[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterParamArgsDict']]]]
        """
        Specifies the build execution sub-parameters.
        The params structure is documented below.

        <a name="block--parameters--params"></a>
        The `params` block supports:
        """
elif False:
    BuildTemplateParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildTemplateParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterParamArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterParamArgs']]] params: Specifies the build execution sub-parameters.
               The params structure is documented below.
               
               <a name="block--parameters--params"></a>
               The `params` block supports:
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if params is not None:
            pulumi.set(__self__, "params", params)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterParamArgs']]]]:
        """
        Specifies the build execution sub-parameters.
        The params structure is documented below.

        <a name="block--parameters--params"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterParamArgs']]]]):
        pulumi.set(self, "params", value)


if not MYPY:
    class BuildTemplateParameterParamArgsDict(TypedDict):
        limits: NotRequired[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterParamLimitArgsDict']]]]
        """
        Specifies the enumeration parameter restrictions.
        The limits structure is documented below.

        <a name="block--parameters--params--limits"></a>
        The `limits` block supports:
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter name.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter field value.
        """
elif False:
    BuildTemplateParameterParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildTemplateParameterParamArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterParamLimitArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterParamLimitArgs']]] limits: Specifies the enumeration parameter restrictions.
               The limits structure is documented below.
               
               <a name="block--parameters--params--limits"></a>
               The `limits` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[_builtins.str] value: Specifies the parameter field value.
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterParamLimitArgs']]]]:
        """
        Specifies the enumeration parameter restrictions.
        The limits structure is documented below.

        <a name="block--parameters--params--limits"></a>
        The `limits` block supports:
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTemplateParameterParamLimitArgs']]]]):
        pulumi.set(self, "limits", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter field value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class BuildTemplateParameterParamLimitArgsDict(TypedDict):
        disable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies whether it is effective.
        """
        display_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the displayed name of the parameter.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter name.
        """
elif False:
    BuildTemplateParameterParamLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildTemplateParameterParamLimitArgs:
    def __init__(__self__, *,
                 disable: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] disable: Specifies whether it is effective.
        :param pulumi.Input[_builtins.str] display_name: Specifies the displayed name of the parameter.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        """
        if disable is not None:
            pulumi.set(__self__, "disable", disable)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def disable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether it is effective.
        """
        return pulumi.get(self, "disable")

    @disable.setter
    def disable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disable", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the displayed name of the parameter.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class BuildTemplateStepArgsDict(TypedDict):
        module_id: pulumi.Input[_builtins.str]
        """
        Specifies the build step module ID.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the parameter name.
        """
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to enable the step. Defaults to **false**.
        """
        properties: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Specifies the build step properties. Value is JSON format string.
        """
        properties_all: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Indicates the build step properties.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the build step version.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
elif False:
    BuildTemplateStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildTemplateStepArgs:
    def __init__(__self__, *,
                 module_id: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 properties_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] module_id: Specifies the build step module ID.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[_builtins.bool] enable: Specifies whether to enable the step. Defaults to **false**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] properties: Specifies the build step properties. Value is JSON format string.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] properties_all: Indicates the build step properties.
        :param pulumi.Input[_builtins.str] version: Specifies the build step version.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        """
        pulumi.set(__self__, "module_id", module_id)
        pulumi.set(__self__, "name", name)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if properties_all is not None:
            pulumi.set(__self__, "properties_all", properties_all)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the build step module ID.
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "module_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the step. Defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the build step properties. Value is JSON format string.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter(name="propertiesAll")
    def properties_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Indicates the build step properties.
        """
        return pulumi.get(self, "properties_all")

    @properties_all.setter
    def properties_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "properties_all", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the build step version.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class DeployApplicationCopyOperationListArgsDict(TypedDict):
        code: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the download URL.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the step description.
        """
        entrance: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the entry function.
        """
        module_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the module ID.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the step name.
        """
        params: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the version.
        """
elif False:
    DeployApplicationCopyOperationListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployApplicationCopyOperationListArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 entrance: Optional[pulumi.Input[_builtins.str]] = None,
                 module_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 params: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] code: Specifies the download URL.
        :param pulumi.Input[_builtins.str] description: Specifies the step description.
        :param pulumi.Input[_builtins.str] entrance: Specifies the entry function.
        :param pulumi.Input[_builtins.str] module_id: Specifies the module ID.
        :param pulumi.Input[_builtins.str] name: Specifies the step name.
        :param pulumi.Input[_builtins.str] params: Specifies the parameter.
        :param pulumi.Input[_builtins.str] version: Specifies the version.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entrance is not None:
            pulumi.set(__self__, "entrance", entrance)
        if module_id is not None:
            pulumi.set(__self__, "module_id", module_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the download URL.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the step description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def entrance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the entry function.
        """
        return pulumi.get(self, "entrance")

    @entrance.setter
    def entrance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entrance", value)

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the module ID.
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "module_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the step name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class DeployApplicationCopyPermissionMatrixArgsDict(TypedDict):
        can_copy: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the copy permission.
        """
        can_create_env: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to create an environment.
        """
        can_delete: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the deletion permission.
        """
        can_disable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to disable the application.
        """
        can_execute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the deployment permission.
        """
        can_manage: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Check whether the role has the management permission, including adding, deleting, modifying,
        querying deployment and permission modification.
        """
        can_modify: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the editing permission.
        """
        can_view: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the view permission.
        """
        role_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role ID.
        """
        role_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role name.
        """
        role_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role type.
        """
elif False:
    DeployApplicationCopyPermissionMatrixArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployApplicationCopyPermissionMatrixArgs:
    def __init__(__self__, *,
                 can_copy: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_create_env: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_execute: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_manage: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_modify: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_view: Optional[pulumi.Input[_builtins.bool]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] can_copy: Indicates whether the role has the copy permission.
        :param pulumi.Input[_builtins.bool] can_create_env: Indicates whether the role has the permission to create an environment.
        :param pulumi.Input[_builtins.bool] can_delete: Indicates whether the role has the deletion permission.
        :param pulumi.Input[_builtins.bool] can_disable: Indicates whether the role has the permission to disable the application.
        :param pulumi.Input[_builtins.bool] can_execute: Indicates whether the role has the deployment permission.
        :param pulumi.Input[_builtins.bool] can_manage: Check whether the role has the management permission, including adding, deleting, modifying,
               querying deployment and permission modification.
        :param pulumi.Input[_builtins.bool] can_modify: Indicates whether the role has the editing permission.
        :param pulumi.Input[_builtins.bool] can_view: Indicates whether the role has the view permission.
        :param pulumi.Input[_builtins.str] role_id: Indicates the role ID.
        :param pulumi.Input[_builtins.str] role_name: Indicates the role name.
        :param pulumi.Input[_builtins.str] role_type: Indicates the role type.
        """
        if can_copy is not None:
            pulumi.set(__self__, "can_copy", can_copy)
        if can_create_env is not None:
            pulumi.set(__self__, "can_create_env", can_create_env)
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_disable is not None:
            pulumi.set(__self__, "can_disable", can_disable)
        if can_execute is not None:
            pulumi.set(__self__, "can_execute", can_execute)
        if can_manage is not None:
            pulumi.set(__self__, "can_manage", can_manage)
        if can_modify is not None:
            pulumi.set(__self__, "can_modify", can_modify)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if role_type is not None:
            pulumi.set(__self__, "role_type", role_type)

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the copy permission.
        """
        return pulumi.get(self, "can_copy")

    @can_copy.setter
    def can_copy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_copy", value)

    @_builtins.property
    @pulumi.getter(name="canCreateEnv")
    def can_create_env(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to create an environment.
        """
        return pulumi.get(self, "can_create_env")

    @can_create_env.setter
    def can_create_env(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_create_env", value)

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @can_delete.setter
    def can_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_delete", value)

    @_builtins.property
    @pulumi.getter(name="canDisable")
    def can_disable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to disable the application.
        """
        return pulumi.get(self, "can_disable")

    @can_disable.setter
    def can_disable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_disable", value)

    @_builtins.property
    @pulumi.getter(name="canExecute")
    def can_execute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the deployment permission.
        """
        return pulumi.get(self, "can_execute")

    @can_execute.setter
    def can_execute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_execute", value)

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Check whether the role has the management permission, including adding, deleting, modifying,
        querying deployment and permission modification.
        """
        return pulumi.get(self, "can_manage")

    @can_manage.setter
    def can_manage(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_manage", value)

    @_builtins.property
    @pulumi.getter(name="canModify")
    def can_modify(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the editing permission.
        """
        return pulumi.get(self, "can_modify")

    @can_modify.setter
    def can_modify(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_modify", value)

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the view permission.
        """
        return pulumi.get(self, "can_view")

    @can_view.setter
    def can_view(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_view", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role ID.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_name", value)

    @_builtins.property
    @pulumi.getter(name="roleType")
    def role_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role type.
        """
        return pulumi.get(self, "role_type")

    @role_type.setter
    def role_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_type", value)


if not MYPY:
    class DeployApplicationDeployParamArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter name transferred when deploying application.
        Changing this creates a new resource.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter type. If a dynamic parameter is set, the type is mandatory.
        Changing this creates a new resource.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter value transferred during application deployment.
        Changing this creates a new resource.
        """
elif False:
    DeployApplicationDeployParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployApplicationDeployParamArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name transferred when deploying application.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the parameter type. If a dynamic parameter is set, the type is mandatory.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the parameter value transferred during application deployment.
               Changing this creates a new resource.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter name transferred when deploying application.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter type. If a dynamic parameter is set, the type is mandatory.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter value transferred during application deployment.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DeployApplicationOperationListArgsDict(TypedDict):
        code: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the download URL.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the step description.
        """
        entrance: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the entry function.
        """
        module_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the module ID.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the step name.
        """
        params: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the version.
        """
elif False:
    DeployApplicationOperationListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployApplicationOperationListArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 entrance: Optional[pulumi.Input[_builtins.str]] = None,
                 module_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 params: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] code: Specifies the download URL.
        :param pulumi.Input[_builtins.str] description: Specifies the step description.
        :param pulumi.Input[_builtins.str] entrance: Specifies the entry function.
        :param pulumi.Input[_builtins.str] module_id: Specifies the module ID.
        :param pulumi.Input[_builtins.str] name: Specifies the step name.
        :param pulumi.Input[_builtins.str] params: Specifies the parameter.
        :param pulumi.Input[_builtins.str] version: Specifies the version.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entrance is not None:
            pulumi.set(__self__, "entrance", entrance)
        if module_id is not None:
            pulumi.set(__self__, "module_id", module_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the download URL.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the step description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def entrance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the entry function.
        """
        return pulumi.get(self, "entrance")

    @entrance.setter
    def entrance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entrance", value)

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the module ID.
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "module_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the step name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class DeployApplicationPermissionMatrixArgsDict(TypedDict):
        can_copy: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the copy permission.
        """
        can_create_env: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to create an environment.
        """
        can_delete: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the deletion permission.
        """
        can_disable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to disable the application.
        """
        can_execute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the deployment permission.
        """
        can_manage: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Check whether the role has the management permission, including adding, deleting, modifying,
        querying deployment and permission modification.
        """
        can_modify: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the editing permission.
        """
        can_view: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the view permission.
        """
        role_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role ID.
        """
        role_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role name.
        """
        role_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role type.
        """
elif False:
    DeployApplicationPermissionMatrixArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployApplicationPermissionMatrixArgs:
    def __init__(__self__, *,
                 can_copy: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_create_env: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_execute: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_manage: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_modify: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_view: Optional[pulumi.Input[_builtins.bool]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] can_copy: Indicates whether the role has the copy permission.
        :param pulumi.Input[_builtins.bool] can_create_env: Indicates whether the role has the permission to create an environment.
        :param pulumi.Input[_builtins.bool] can_delete: Indicates whether the role has the deletion permission.
        :param pulumi.Input[_builtins.bool] can_disable: Indicates whether the role has the permission to disable the application.
        :param pulumi.Input[_builtins.bool] can_execute: Indicates whether the role has the deployment permission.
        :param pulumi.Input[_builtins.bool] can_manage: Check whether the role has the management permission, including adding, deleting, modifying,
               querying deployment and permission modification.
        :param pulumi.Input[_builtins.bool] can_modify: Indicates whether the role has the editing permission.
        :param pulumi.Input[_builtins.bool] can_view: Indicates whether the role has the view permission.
        :param pulumi.Input[_builtins.str] role_id: Indicates the role ID.
        :param pulumi.Input[_builtins.str] role_name: Indicates the role name.
        :param pulumi.Input[_builtins.str] role_type: Indicates the role type.
        """
        if can_copy is not None:
            pulumi.set(__self__, "can_copy", can_copy)
        if can_create_env is not None:
            pulumi.set(__self__, "can_create_env", can_create_env)
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_disable is not None:
            pulumi.set(__self__, "can_disable", can_disable)
        if can_execute is not None:
            pulumi.set(__self__, "can_execute", can_execute)
        if can_manage is not None:
            pulumi.set(__self__, "can_manage", can_manage)
        if can_modify is not None:
            pulumi.set(__self__, "can_modify", can_modify)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if role_type is not None:
            pulumi.set(__self__, "role_type", role_type)

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the copy permission.
        """
        return pulumi.get(self, "can_copy")

    @can_copy.setter
    def can_copy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_copy", value)

    @_builtins.property
    @pulumi.getter(name="canCreateEnv")
    def can_create_env(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to create an environment.
        """
        return pulumi.get(self, "can_create_env")

    @can_create_env.setter
    def can_create_env(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_create_env", value)

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @can_delete.setter
    def can_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_delete", value)

    @_builtins.property
    @pulumi.getter(name="canDisable")
    def can_disable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to disable the application.
        """
        return pulumi.get(self, "can_disable")

    @can_disable.setter
    def can_disable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_disable", value)

    @_builtins.property
    @pulumi.getter(name="canExecute")
    def can_execute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the deployment permission.
        """
        return pulumi.get(self, "can_execute")

    @can_execute.setter
    def can_execute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_execute", value)

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Check whether the role has the management permission, including adding, deleting, modifying,
        querying deployment and permission modification.
        """
        return pulumi.get(self, "can_manage")

    @can_manage.setter
    def can_manage(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_manage", value)

    @_builtins.property
    @pulumi.getter(name="canModify")
    def can_modify(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the editing permission.
        """
        return pulumi.get(self, "can_modify")

    @can_modify.setter
    def can_modify(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_modify", value)

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the view permission.
        """
        return pulumi.get(self, "can_view")

    @can_view.setter
    def can_view(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_view", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role ID.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_name", value)

    @_builtins.property
    @pulumi.getter(name="roleType")
    def role_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role type.
        """
        return pulumi.get(self, "role_type")

    @role_type.setter
    def role_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_type", value)


if not MYPY:
    class DeployApplicationPermissionRoleArgsDict(TypedDict):
        can_copy: pulumi.Input[_builtins.bool]
        """
        Specifies whether the role has the copy permission.
        """
        can_create_env: pulumi.Input[_builtins.bool]
        """
        Specifies whether the role has the permission to create an environment.
        """
        can_delete: pulumi.Input[_builtins.bool]
        """
        Specifies whether the role has the deletion permission.
        """
        can_disable: pulumi.Input[_builtins.bool]
        """
        Specifies whether the role has the permission to disable application.
        """
        can_execute: pulumi.Input[_builtins.bool]
        """
        Specifies whether the role has the deployment permission.
        """
        can_manage: pulumi.Input[_builtins.bool]
        """
        Specifies whether the role has the management permission, including adding, deleting,
        modifying, querying deployment and permission modification.
        """
        can_modify: pulumi.Input[_builtins.bool]
        """
        Specifies whether the role has the editing permission.
        """
        can_view: pulumi.Input[_builtins.bool]
        """
        Specifies whether the role has the view permission.
        """
        role_id: pulumi.Input[_builtins.str]
        """
        Specifies the role ID.
        """
elif False:
    DeployApplicationPermissionRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployApplicationPermissionRoleArgs:
    def __init__(__self__, *,
                 can_copy: pulumi.Input[_builtins.bool],
                 can_create_env: pulumi.Input[_builtins.bool],
                 can_delete: pulumi.Input[_builtins.bool],
                 can_disable: pulumi.Input[_builtins.bool],
                 can_execute: pulumi.Input[_builtins.bool],
                 can_manage: pulumi.Input[_builtins.bool],
                 can_modify: pulumi.Input[_builtins.bool],
                 can_view: pulumi.Input[_builtins.bool],
                 role_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.bool] can_copy: Specifies whether the role has the copy permission.
        :param pulumi.Input[_builtins.bool] can_create_env: Specifies whether the role has the permission to create an environment.
        :param pulumi.Input[_builtins.bool] can_delete: Specifies whether the role has the deletion permission.
        :param pulumi.Input[_builtins.bool] can_disable: Specifies whether the role has the permission to disable application.
        :param pulumi.Input[_builtins.bool] can_execute: Specifies whether the role has the deployment permission.
        :param pulumi.Input[_builtins.bool] can_manage: Specifies whether the role has the management permission, including adding, deleting,
               modifying, querying deployment and permission modification.
        :param pulumi.Input[_builtins.bool] can_modify: Specifies whether the role has the editing permission.
        :param pulumi.Input[_builtins.bool] can_view: Specifies whether the role has the view permission.
        :param pulumi.Input[_builtins.str] role_id: Specifies the role ID.
        """
        pulumi.set(__self__, "can_copy", can_copy)
        pulumi.set(__self__, "can_create_env", can_create_env)
        pulumi.set(__self__, "can_delete", can_delete)
        pulumi.set(__self__, "can_disable", can_disable)
        pulumi.set(__self__, "can_execute", can_execute)
        pulumi.set(__self__, "can_manage", can_manage)
        pulumi.set(__self__, "can_modify", can_modify)
        pulumi.set(__self__, "can_view", can_view)
        pulumi.set(__self__, "role_id", role_id)

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether the role has the copy permission.
        """
        return pulumi.get(self, "can_copy")

    @can_copy.setter
    def can_copy(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "can_copy", value)

    @_builtins.property
    @pulumi.getter(name="canCreateEnv")
    def can_create_env(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether the role has the permission to create an environment.
        """
        return pulumi.get(self, "can_create_env")

    @can_create_env.setter
    def can_create_env(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "can_create_env", value)

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether the role has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @can_delete.setter
    def can_delete(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "can_delete", value)

    @_builtins.property
    @pulumi.getter(name="canDisable")
    def can_disable(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether the role has the permission to disable application.
        """
        return pulumi.get(self, "can_disable")

    @can_disable.setter
    def can_disable(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "can_disable", value)

    @_builtins.property
    @pulumi.getter(name="canExecute")
    def can_execute(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether the role has the deployment permission.
        """
        return pulumi.get(self, "can_execute")

    @can_execute.setter
    def can_execute(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "can_execute", value)

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether the role has the management permission, including adding, deleting,
        modifying, querying deployment and permission modification.
        """
        return pulumi.get(self, "can_manage")

    @can_manage.setter
    def can_manage(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "can_manage", value)

    @_builtins.property
    @pulumi.getter(name="canModify")
    def can_modify(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether the role has the editing permission.
        """
        return pulumi.get(self, "can_modify")

    @can_modify.setter
    def can_modify(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "can_modify", value)

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether the role has the view permission.
        """
        return pulumi.get(self, "can_view")

    @can_view.setter
    def can_view(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "can_view", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the role ID.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "role_id", value)


if not MYPY:
    class DeployEnvironmentCreatedByArgsDict(TypedDict):
        user_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the user ID.
        """
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the user name.
        """
elif False:
    DeployEnvironmentCreatedByArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployEnvironmentCreatedByArgs:
    def __init__(__self__, *,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] user_id: Indicates the user ID.
        :param pulumi.Input[_builtins.str] user_name: Indicates the user name.
        """
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the user ID.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the user name.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class DeployEnvironmentHostArgsDict(TypedDict):
        group_id: pulumi.Input[_builtins.str]
        """
        Specifies the cluster group ID.
        """
        host_id: pulumi.Input[_builtins.str]
        """
        Specifies the host ID to be imported.
        """
        connection_status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the connection status.
        """
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the host name.
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the IP address.
        """
elif False:
    DeployEnvironmentHostArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployEnvironmentHostArgs:
    def __init__(__self__, *,
                 group_id: pulumi.Input[_builtins.str],
                 host_id: pulumi.Input[_builtins.str],
                 connection_status: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] group_id: Specifies the cluster group ID.
        :param pulumi.Input[_builtins.str] host_id: Specifies the host ID to be imported.
        :param pulumi.Input[_builtins.str] connection_status: Indicates the connection status.
        :param pulumi.Input[_builtins.str] host_name: Indicates the host name.
        :param pulumi.Input[_builtins.str] ip_address: Indicates the IP address.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "host_id", host_id)
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cluster group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the host ID to be imported.
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the connection status.
        """
        return pulumi.get(self, "connection_status")

    @connection_status.setter
    def connection_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_status", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the host name.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)


if not MYPY:
    class DeployEnvironmentPermissionArgsDict(TypedDict):
        can_delete: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to delete environments.
        """
        can_deploy: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the deploy permission.
        """
        can_edit: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to edit environments.
        """
        can_manage: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to edit the environment permission matrix.
        """
        can_view: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the view environment.
        """
elif False:
    DeployEnvironmentPermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployEnvironmentPermissionArgs:
    def __init__(__self__, *,
                 can_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_deploy: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_edit: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_manage: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_view: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] can_delete: Indicates whether the role has the permission to delete environments.
        :param pulumi.Input[_builtins.bool] can_deploy: Indicates whether the role has the deploy permission.
        :param pulumi.Input[_builtins.bool] can_edit: Indicates whether the role has the permission to edit environments.
        :param pulumi.Input[_builtins.bool] can_manage: Indicates whether the role has the permission to edit the environment permission matrix.
        :param pulumi.Input[_builtins.bool] can_view: Indicates whether the role has the view environment.
        """
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_deploy is not None:
            pulumi.set(__self__, "can_deploy", can_deploy)
        if can_edit is not None:
            pulumi.set(__self__, "can_edit", can_edit)
        if can_manage is not None:
            pulumi.set(__self__, "can_manage", can_manage)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to delete environments.
        """
        return pulumi.get(self, "can_delete")

    @can_delete.setter
    def can_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_delete", value)

    @_builtins.property
    @pulumi.getter(name="canDeploy")
    def can_deploy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the deploy permission.
        """
        return pulumi.get(self, "can_deploy")

    @can_deploy.setter
    def can_deploy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_deploy", value)

    @_builtins.property
    @pulumi.getter(name="canEdit")
    def can_edit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to edit environments.
        """
        return pulumi.get(self, "can_edit")

    @can_edit.setter
    def can_edit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_edit", value)

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to edit the environment permission matrix.
        """
        return pulumi.get(self, "can_manage")

    @can_manage.setter
    def can_manage(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_manage", value)

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the view environment.
        """
        return pulumi.get(self, "can_view")

    @can_view.setter
    def can_view(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_view", value)


if not MYPY:
    class DeployEnvironmentPermissionMatrixArgsDict(TypedDict):
        can_delete: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to delete environments.
        """
        can_deploy: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the deploy permission.
        """
        can_edit: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to edit environments.
        """
        can_manage: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to edit the environment permission matrix.
        """
        can_view: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the view environment.
        """
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the create time.
        """
        permission_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the permission ID.
        """
        role_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role ID.
        """
        role_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role name.
        """
        role_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role type.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the update time.
        """
elif False:
    DeployEnvironmentPermissionMatrixArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployEnvironmentPermissionMatrixArgs:
    def __init__(__self__, *,
                 can_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_deploy: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_edit: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_manage: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_view: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_id: Optional[pulumi.Input[_builtins.int]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] can_delete: Indicates whether the role has the permission to delete environments.
        :param pulumi.Input[_builtins.bool] can_deploy: Indicates whether the role has the deploy permission.
        :param pulumi.Input[_builtins.bool] can_edit: Indicates whether the role has the permission to edit environments.
        :param pulumi.Input[_builtins.bool] can_manage: Indicates whether the role has the permission to edit the environment permission matrix.
        :param pulumi.Input[_builtins.bool] can_view: Indicates whether the role has the view environment.
        :param pulumi.Input[_builtins.str] created_at: Indicates the create time.
        :param pulumi.Input[_builtins.int] permission_id: Indicates the permission ID.
        :param pulumi.Input[_builtins.str] role_id: Indicates the role ID.
        :param pulumi.Input[_builtins.str] role_name: Indicates the role name.
        :param pulumi.Input[_builtins.str] role_type: Indicates the role type.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the update time.
        """
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_deploy is not None:
            pulumi.set(__self__, "can_deploy", can_deploy)
        if can_edit is not None:
            pulumi.set(__self__, "can_edit", can_edit)
        if can_manage is not None:
            pulumi.set(__self__, "can_manage", can_manage)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if permission_id is not None:
            pulumi.set(__self__, "permission_id", permission_id)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if role_type is not None:
            pulumi.set(__self__, "role_type", role_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to delete environments.
        """
        return pulumi.get(self, "can_delete")

    @can_delete.setter
    def can_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_delete", value)

    @_builtins.property
    @pulumi.getter(name="canDeploy")
    def can_deploy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the deploy permission.
        """
        return pulumi.get(self, "can_deploy")

    @can_deploy.setter
    def can_deploy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_deploy", value)

    @_builtins.property
    @pulumi.getter(name="canEdit")
    def can_edit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to edit environments.
        """
        return pulumi.get(self, "can_edit")

    @can_edit.setter
    def can_edit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_edit", value)

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to edit the environment permission matrix.
        """
        return pulumi.get(self, "can_manage")

    @can_manage.setter
    def can_manage(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_manage", value)

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the view environment.
        """
        return pulumi.get(self, "can_view")

    @can_view.setter
    def can_view(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_view", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="permissionId")
    def permission_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the permission ID.
        """
        return pulumi.get(self, "permission_id")

    @permission_id.setter
    def permission_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "permission_id", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role ID.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_name", value)

    @_builtins.property
    @pulumi.getter(name="roleType")
    def role_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role type.
        """
        return pulumi.get(self, "role_type")

    @role_type.setter
    def role_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class DeployEnvironmentProxyArgsDict(TypedDict):
        connection_status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the connection status.
        """
        group_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the cluster group ID.
        """
        host_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the host ID to be imported.
        """
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the host name.
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the IP address.
        """
elif False:
    DeployEnvironmentProxyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployEnvironmentProxyArgs:
    def __init__(__self__, *,
                 connection_status: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] connection_status: Indicates the connection status.
        :param pulumi.Input[_builtins.str] group_id: Specifies the cluster group ID.
        :param pulumi.Input[_builtins.str] host_id: Specifies the host ID to be imported.
        :param pulumi.Input[_builtins.str] host_name: Indicates the host name.
        :param pulumi.Input[_builtins.str] ip_address: Indicates the IP address.
        """
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if host_id is not None:
            pulumi.set(__self__, "host_id", host_id)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @_builtins.property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the connection status.
        """
        return pulumi.get(self, "connection_status")

    @connection_status.setter
    def connection_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_status", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host ID to be imported.
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the host name.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)


if not MYPY:
    class DeployGroupCreatedByArgsDict(TypedDict):
        user_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The user ID.
        """
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The user name.
        """
elif False:
    DeployGroupCreatedByArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployGroupCreatedByArgs:
    def __init__(__self__, *,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] user_id: The user ID.
        :param pulumi.Input[_builtins.str] user_name: The user name.
        """
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user ID.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user name.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class DeployGroupPermissionArgsDict(TypedDict):
        can_add_host: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to add hosts.
        """
        can_copy: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to copy.
        """
        can_delete: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the deletion permission.
        """
        can_edit: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the edit permission.
        """
        can_manage: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the management permission.
        """
        can_view: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the view permission.
        """
elif False:
    DeployGroupPermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployGroupPermissionArgs:
    def __init__(__self__, *,
                 can_add_host: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_copy: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_edit: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_manage: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_view: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] can_add_host: Indicates whether the role has the permission to add hosts.
        :param pulumi.Input[_builtins.bool] can_copy: Indicates whether the role has the permission to copy.
        :param pulumi.Input[_builtins.bool] can_delete: Indicates whether the role has the deletion permission.
        :param pulumi.Input[_builtins.bool] can_edit: Indicates whether the role has the edit permission.
        :param pulumi.Input[_builtins.bool] can_manage: Indicates whether the role has the management permission.
        :param pulumi.Input[_builtins.bool] can_view: Indicates whether the role has the view permission.
        """
        if can_add_host is not None:
            pulumi.set(__self__, "can_add_host", can_add_host)
        if can_copy is not None:
            pulumi.set(__self__, "can_copy", can_copy)
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_edit is not None:
            pulumi.set(__self__, "can_edit", can_edit)
        if can_manage is not None:
            pulumi.set(__self__, "can_manage", can_manage)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)

    @_builtins.property
    @pulumi.getter(name="canAddHost")
    def can_add_host(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to add hosts.
        """
        return pulumi.get(self, "can_add_host")

    @can_add_host.setter
    def can_add_host(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_add_host", value)

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to copy.
        """
        return pulumi.get(self, "can_copy")

    @can_copy.setter
    def can_copy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_copy", value)

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @can_delete.setter
    def can_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_delete", value)

    @_builtins.property
    @pulumi.getter(name="canEdit")
    def can_edit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the edit permission.
        """
        return pulumi.get(self, "can_edit")

    @can_edit.setter
    def can_edit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_edit", value)

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the management permission.
        """
        return pulumi.get(self, "can_manage")

    @can_manage.setter
    def can_manage(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_manage", value)

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the view permission.
        """
        return pulumi.get(self, "can_view")

    @can_view.setter
    def can_view(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_view", value)


if not MYPY:
    class DeployGroupPermissionMatrixArgsDict(TypedDict):
        can_add_host: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to add hosts.
        """
        can_copy: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to copy.
        """
        can_delete: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the deletion permission.
        """
        can_edit: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the edit permission.
        """
        can_manage: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the management permission.
        """
        can_view: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the view permission.
        """
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The permission create time.
        """
        role_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role ID.
        """
        role_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role name.
        """
        role_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role type.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The permission update time.
        """
elif False:
    DeployGroupPermissionMatrixArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployGroupPermissionMatrixArgs:
    def __init__(__self__, *,
                 can_add_host: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_copy: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_edit: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_manage: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_view: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] can_add_host: Indicates whether the role has the permission to add hosts.
        :param pulumi.Input[_builtins.bool] can_copy: Indicates whether the role has the permission to copy.
        :param pulumi.Input[_builtins.bool] can_delete: Indicates whether the role has the deletion permission.
        :param pulumi.Input[_builtins.bool] can_edit: Indicates whether the role has the edit permission.
        :param pulumi.Input[_builtins.bool] can_manage: Indicates whether the role has the management permission.
        :param pulumi.Input[_builtins.bool] can_view: Indicates whether the role has the view permission.
        :param pulumi.Input[_builtins.str] created_at: The permission create time.
        :param pulumi.Input[_builtins.str] role_id: Indicates the role ID.
        :param pulumi.Input[_builtins.str] role_name: Indicates the role name.
        :param pulumi.Input[_builtins.str] role_type: Indicates the role type.
        :param pulumi.Input[_builtins.str] updated_at: The permission update time.
        """
        if can_add_host is not None:
            pulumi.set(__self__, "can_add_host", can_add_host)
        if can_copy is not None:
            pulumi.set(__self__, "can_copy", can_copy)
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_edit is not None:
            pulumi.set(__self__, "can_edit", can_edit)
        if can_manage is not None:
            pulumi.set(__self__, "can_manage", can_manage)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if role_type is not None:
            pulumi.set(__self__, "role_type", role_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="canAddHost")
    def can_add_host(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to add hosts.
        """
        return pulumi.get(self, "can_add_host")

    @can_add_host.setter
    def can_add_host(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_add_host", value)

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to copy.
        """
        return pulumi.get(self, "can_copy")

    @can_copy.setter
    def can_copy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_copy", value)

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @can_delete.setter
    def can_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_delete", value)

    @_builtins.property
    @pulumi.getter(name="canEdit")
    def can_edit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the edit permission.
        """
        return pulumi.get(self, "can_edit")

    @can_edit.setter
    def can_edit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_edit", value)

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the management permission.
        """
        return pulumi.get(self, "can_manage")

    @can_manage.setter
    def can_manage(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_manage", value)

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the view permission.
        """
        return pulumi.get(self, "can_view")

    @can_view.setter
    def can_view(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_view", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The permission create time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role ID.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_name", value)

    @_builtins.property
    @pulumi.getter(name="roleType")
    def role_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role type.
        """
        return pulumi.get(self, "role_type")

    @role_type.setter
    def role_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The permission update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class DeployHostPermissionArgsDict(TypedDict):
        can_add_host: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the user has the permission to add hosts.
        """
        can_copy: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the user has the permission to copy hosts.
        """
        can_delete: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the user has the deletion permission.
        """
        can_edit: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the user has the edit permission.
        """
        can_view: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the user has the view permission.
        """
elif False:
    DeployHostPermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployHostPermissionArgs:
    def __init__(__self__, *,
                 can_add_host: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_copy: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_edit: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_view: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] can_add_host: Indicates whether the user has the permission to add hosts.
        :param pulumi.Input[_builtins.bool] can_copy: Indicates whether the user has the permission to copy hosts.
        :param pulumi.Input[_builtins.bool] can_delete: Indicates whether the user has the deletion permission.
        :param pulumi.Input[_builtins.bool] can_edit: Indicates whether the user has the edit permission.
        :param pulumi.Input[_builtins.bool] can_view: Indicates whether the user has the view permission.
        """
        if can_add_host is not None:
            pulumi.set(__self__, "can_add_host", can_add_host)
        if can_copy is not None:
            pulumi.set(__self__, "can_copy", can_copy)
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_edit is not None:
            pulumi.set(__self__, "can_edit", can_edit)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)

    @_builtins.property
    @pulumi.getter(name="canAddHost")
    def can_add_host(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the user has the permission to add hosts.
        """
        return pulumi.get(self, "can_add_host")

    @can_add_host.setter
    def can_add_host(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_add_host", value)

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the user has the permission to copy hosts.
        """
        return pulumi.get(self, "can_copy")

    @can_copy.setter
    def can_copy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_copy", value)

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the user has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @can_delete.setter
    def can_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_delete", value)

    @_builtins.property
    @pulumi.getter(name="canEdit")
    def can_edit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the user has the edit permission.
        """
        return pulumi.get(self, "can_edit")

    @can_edit.setter
    def can_edit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_edit", value)

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the user has the view permission.
        """
        return pulumi.get(self, "can_view")

    @can_view.setter
    def can_view(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_view", value)


if not MYPY:
    class InspectorHostLastScanInfoArgsDict(TypedDict):
        create_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the scan task create time.
        """
        enable_weak_passwd: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether weak password check enabled.
        """
        end_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the scan task end time.
        """
        progress: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the task progress.
        """
        reason: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the task description.
        """
        status: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the task status.
        Value can be as follows:
        + **0**: running
        + **1**: completed
        + **2**: cancel
        + **3**: waiting
        + **4**: failed
        + **5**: scheduled
        """
elif False:
    InspectorHostLastScanInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InspectorHostLastScanInfoArgs:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_weak_passwd: Optional[pulumi.Input[_builtins.bool]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 progress: Optional[pulumi.Input[_builtins.int]] = None,
                 reason: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] create_time: Indicates the scan task create time.
        :param pulumi.Input[_builtins.bool] enable_weak_passwd: Indicates whether weak password check enabled.
        :param pulumi.Input[_builtins.str] end_time: Indicates the scan task end time.
        :param pulumi.Input[_builtins.int] progress: Indicates the task progress.
        :param pulumi.Input[_builtins.str] reason: Indicates the task description.
        :param pulumi.Input[_builtins.int] status: Indicates the task status.
               Value can be as follows:
               + **0**: running
               + **1**: completed
               + **2**: cancel
               + **3**: waiting
               + **4**: failed
               + **5**: scheduled
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable_weak_passwd is not None:
            pulumi.set(__self__, "enable_weak_passwd", enable_weak_passwd)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the scan task create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter(name="enableWeakPasswd")
    def enable_weak_passwd(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether weak password check enabled.
        """
        return pulumi.get(self, "enable_weak_passwd")

    @enable_weak_passwd.setter
    def enable_weak_passwd(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_weak_passwd", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the scan task end time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the task progress.
        """
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "progress", value)

    @_builtins.property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the task description.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reason", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the task status.
        Value can be as follows:
        + **0**: running
        + **1**: completed
        + **2**: cancel
        + **3**: waiting
        + **4**: failed
        + **5**: scheduled
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class PipelineActionSourceArgsDict(TypedDict):
        params: pulumi.Input['PipelineActionSourceParamsArgsDict']
        """
        Specifies the source parameters.
        The params structure is documented below.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the pipeline source type.

        <a name="block--sources--params"></a>
        The `params` block supports:
        """
elif False:
    PipelineActionSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineActionSourceArgs:
    def __init__(__self__, *,
                 params: pulumi.Input['PipelineActionSourceParamsArgs'],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input['PipelineActionSourceParamsArgs'] params: Specifies the source parameters.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the pipeline source type.
               
               <a name="block--sources--params"></a>
               The `params` block supports:
        """
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def params(self) -> pulumi.Input['PipelineActionSourceParamsArgs']:
        """
        Specifies the source parameters.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: pulumi.Input['PipelineActionSourceParamsArgs']):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the pipeline source type.

        <a name="block--sources--params"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class PipelineActionSourceParamsArgsDict(TypedDict):
        git_type: pulumi.Input[_builtins.str]
        """
        Specifies the code repository type.
        """
        git_url: pulumi.Input[_builtins.str]
        """
        Specifies the HTTPS address of the Git repository.
        """
        alias: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the code repository alias.
        """
        build_params: NotRequired[pulumi.Input['PipelineActionSourceParamsBuildParamsArgsDict']]
        """
        Specifies the detailed build parameters.
        The build_params structure is documented below.
        """
        change_request_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the change IDs of the change-triggered pipeline.
        """
        codehub_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the CodeArts Repo code repository ID.
        """
        default_branch: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the default branch of the code repository for pipeline
        execution.
        """
        endpoint_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the code source endpoint.

        <a name="block--sources--params--build_params"></a>
        The `build_params` block supports:
        """
elif False:
    PipelineActionSourceParamsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineActionSourceParamsArgs:
    def __init__(__self__, *,
                 git_type: pulumi.Input[_builtins.str],
                 git_url: pulumi.Input[_builtins.str],
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 build_params: Optional[pulumi.Input['PipelineActionSourceParamsBuildParamsArgs']] = None,
                 change_request_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 codehub_id: Optional[pulumi.Input[_builtins.str]] = None,
                 default_branch: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] git_type: Specifies the code repository type.
        :param pulumi.Input[_builtins.str] git_url: Specifies the HTTPS address of the Git repository.
        :param pulumi.Input[_builtins.str] alias: Specifies the code repository alias.
        :param pulumi.Input['PipelineActionSourceParamsBuildParamsArgs'] build_params: Specifies the detailed build parameters.
               The build_params structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] change_request_ids: Specifies the change IDs of the change-triggered pipeline.
        :param pulumi.Input[_builtins.str] codehub_id: Specifies the CodeArts Repo code repository ID.
        :param pulumi.Input[_builtins.str] default_branch: Specifies the default branch of the code repository for pipeline
               execution.
        :param pulumi.Input[_builtins.str] endpoint_id: Specifies the ID of the code source endpoint.
               
               <a name="block--sources--params--build_params"></a>
               The `build_params` block supports:
        """
        pulumi.set(__self__, "git_type", git_type)
        pulumi.set(__self__, "git_url", git_url)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if build_params is not None:
            pulumi.set(__self__, "build_params", build_params)
        if change_request_ids is not None:
            pulumi.set(__self__, "change_request_ids", change_request_ids)
        if codehub_id is not None:
            pulumi.set(__self__, "codehub_id", codehub_id)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)

    @_builtins.property
    @pulumi.getter(name="gitType")
    def git_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the code repository type.
        """
        return pulumi.get(self, "git_type")

    @git_type.setter
    def git_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "git_type", value)

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the HTTPS address of the Git repository.
        """
        return pulumi.get(self, "git_url")

    @git_url.setter
    def git_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "git_url", value)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the code repository alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="buildParams")
    def build_params(self) -> Optional[pulumi.Input['PipelineActionSourceParamsBuildParamsArgs']]:
        """
        Specifies the detailed build parameters.
        The build_params structure is documented below.
        """
        return pulumi.get(self, "build_params")

    @build_params.setter
    def build_params(self, value: Optional[pulumi.Input['PipelineActionSourceParamsBuildParamsArgs']]):
        pulumi.set(self, "build_params", value)

    @_builtins.property
    @pulumi.getter(name="changeRequestIds")
    def change_request_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the change IDs of the change-triggered pipeline.
        """
        return pulumi.get(self, "change_request_ids")

    @change_request_ids.setter
    def change_request_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "change_request_ids", value)

    @_builtins.property
    @pulumi.getter(name="codehubId")
    def codehub_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CodeArts Repo code repository ID.
        """
        return pulumi.get(self, "codehub_id")

    @codehub_id.setter
    def codehub_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "codehub_id", value)

    @_builtins.property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the default branch of the code repository for pipeline
        execution.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_branch", value)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the code source endpoint.

        <a name="block--sources--params--build_params"></a>
        The `build_params` block supports:
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_id", value)


if not MYPY:
    class PipelineActionSourceParamsBuildParamsArgsDict(TypedDict):
        build_type: pulumi.Input[_builtins.str]
        """
        Specifies the code repository trigger type.
        """
        event_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the event type that triggers the pipeline execution.
        """
        tag: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the tag that triggers the pipeline execution.
        """
        target_branch: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the branch that triggers the pipeline execution.

        <a name="block--variables"></a>
        The `variables` block supports:
        """
elif False:
    PipelineActionSourceParamsBuildParamsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineActionSourceParamsBuildParamsArgs:
    def __init__(__self__, *,
                 build_type: pulumi.Input[_builtins.str],
                 event_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tag: Optional[pulumi.Input[_builtins.str]] = None,
                 target_branch: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] build_type: Specifies the code repository trigger type.
        :param pulumi.Input[_builtins.str] event_type: Specifies the event type that triggers the pipeline execution.
        :param pulumi.Input[_builtins.str] tag: Specifies the tag that triggers the pipeline execution.
        :param pulumi.Input[_builtins.str] target_branch: Specifies the branch that triggers the pipeline execution.
               
               <a name="block--variables"></a>
               The `variables` block supports:
        """
        pulumi.set(__self__, "build_type", build_type)
        if event_type is not None:
            pulumi.set(__self__, "event_type", event_type)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if target_branch is not None:
            pulumi.set(__self__, "target_branch", target_branch)

    @_builtins.property
    @pulumi.getter(name="buildType")
    def build_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the code repository trigger type.
        """
        return pulumi.get(self, "build_type")

    @build_type.setter
    def build_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "build_type", value)

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the event type that triggers the pipeline execution.
        """
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_type", value)

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the tag that triggers the pipeline execution.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag", value)

    @_builtins.property
    @pulumi.getter(name="targetBranch")
    def target_branch(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the branch that triggers the pipeline execution.

        <a name="block--variables"></a>
        The `variables` block supports:
        """
        return pulumi.get(self, "target_branch")

    @target_branch.setter
    def target_branch(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_branch", value)


if not MYPY:
    class PipelineActionVariableArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the parameter name.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the parameter value.
        """
elif False:
    PipelineActionVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineActionVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[_builtins.str] value: Specifies the parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class PipelineByTemplateConcurrencyControlArgsDict(TypedDict):
        concurrency_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the number of concurrent instances.
        """
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether it is available.
        """
        exceed_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the policy when the threshold is exceeded.

        <a name="block--schedules"></a>
        The `schedules` block supports:
        """
elif False:
    PipelineByTemplateConcurrencyControlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineByTemplateConcurrencyControlArgs:
    def __init__(__self__, *,
                 concurrency_number: Optional[pulumi.Input[_builtins.int]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 exceed_action: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] concurrency_number: Specifies the number of concurrent instances.
        :param pulumi.Input[_builtins.bool] enable: Specifies whether it is available.
        :param pulumi.Input[_builtins.str] exceed_action: Specifies the policy when the threshold is exceeded.
               
               <a name="block--schedules"></a>
               The `schedules` block supports:
        """
        if concurrency_number is not None:
            pulumi.set(__self__, "concurrency_number", concurrency_number)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if exceed_action is not None:
            pulumi.set(__self__, "exceed_action", exceed_action)

    @_builtins.property
    @pulumi.getter(name="concurrencyNumber")
    def concurrency_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of concurrent instances.
        """
        return pulumi.get(self, "concurrency_number")

    @concurrency_number.setter
    def concurrency_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "concurrency_number", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it is available.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="exceedAction")
    def exceed_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy when the threshold is exceeded.

        <a name="block--schedules"></a>
        The `schedules` block supports:
        """
        return pulumi.get(self, "exceed_action")

    @exceed_action.setter
    def exceed_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exceed_action", value)


if not MYPY:
    class PipelineByTemplateRolePermissionArgsDict(TypedDict):
        operation_authorize: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to authorize.
        """
        operation_delete: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to delete.
        """
        operation_execute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to execute.
        """
        operation_query: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to query.
        """
        operation_update: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to update.
        """
        role_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the role ID.
        """
        role_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role name.
        """
elif False:
    PipelineByTemplateRolePermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineByTemplateRolePermissionArgs:
    def __init__(__self__, *,
                 operation_authorize: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_execute: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_query: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 role_id: Optional[pulumi.Input[_builtins.int]] = None,
                 role_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] operation_authorize: Indicates whether the role has the permission to authorize.
        :param pulumi.Input[_builtins.bool] operation_delete: Indicates whether the role has the permission to delete.
        :param pulumi.Input[_builtins.bool] operation_execute: Indicates whether the role has the permission to execute.
        :param pulumi.Input[_builtins.bool] operation_query: Indicates whether the role has the permission to query.
        :param pulumi.Input[_builtins.bool] operation_update: Indicates whether the role has the permission to update.
        :param pulumi.Input[_builtins.int] role_id: Indicates the role ID.
        :param pulumi.Input[_builtins.str] role_name: Indicates the role name.
        """
        if operation_authorize is not None:
            pulumi.set(__self__, "operation_authorize", operation_authorize)
        if operation_delete is not None:
            pulumi.set(__self__, "operation_delete", operation_delete)
        if operation_execute is not None:
            pulumi.set(__self__, "operation_execute", operation_execute)
        if operation_query is not None:
            pulumi.set(__self__, "operation_query", operation_query)
        if operation_update is not None:
            pulumi.set(__self__, "operation_update", operation_update)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @_builtins.property
    @pulumi.getter(name="operationAuthorize")
    def operation_authorize(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to authorize.
        """
        return pulumi.get(self, "operation_authorize")

    @operation_authorize.setter
    def operation_authorize(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_authorize", value)

    @_builtins.property
    @pulumi.getter(name="operationDelete")
    def operation_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to delete.
        """
        return pulumi.get(self, "operation_delete")

    @operation_delete.setter
    def operation_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_delete", value)

    @_builtins.property
    @pulumi.getter(name="operationExecute")
    def operation_execute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to execute.
        """
        return pulumi.get(self, "operation_execute")

    @operation_execute.setter
    def operation_execute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_execute", value)

    @_builtins.property
    @pulumi.getter(name="operationQuery")
    def operation_query(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to query.
        """
        return pulumi.get(self, "operation_query")

    @operation_query.setter
    def operation_query(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_query", value)

    @_builtins.property
    @pulumi.getter(name="operationUpdate")
    def operation_update(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to update.
        """
        return pulumi.get(self, "operation_update")

    @operation_update.setter
    def operation_update(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_update", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the role ID.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_name", value)


if not MYPY:
    class PipelineByTemplateScheduleArgsDict(TypedDict):
        days_of_weeks: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]
        """
        Specifies the execution day in a week.
        """
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether it is available.
        """
        end_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the end time.
        """
        interval_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the interval time.
        """
        interval_unit: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the interval unit.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom variable name.
        """
        start_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the start time.
        """
        time_zone: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the time zone.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter type.
        """
        uuid: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the ID of a scheduled task.
        """
elif False:
    PipelineByTemplateScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineByTemplateScheduleArgs:
    def __init__(__self__, *,
                 days_of_weeks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 interval_time: Optional[pulumi.Input[_builtins.str]] = None,
                 interval_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 uuid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] days_of_weeks: Specifies the execution day in a week.
        :param pulumi.Input[_builtins.bool] enable: Specifies whether it is available.
        :param pulumi.Input[_builtins.str] end_time: Specifies the end time.
        :param pulumi.Input[_builtins.str] interval_time: Specifies the interval time.
        :param pulumi.Input[_builtins.str] interval_unit: Specifies the interval unit.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone.
        :param pulumi.Input[_builtins.str] type: Specifies the custom parameter type.
        :param pulumi.Input[_builtins.str] uuid: Indicates the ID of a scheduled task.
        """
        if days_of_weeks is not None:
            pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if interval_time is not None:
            pulumi.set(__self__, "interval_time", interval_time)
        if interval_unit is not None:
            pulumi.set(__self__, "interval_unit", interval_unit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Specifies the execution day in a week.
        """
        return pulumi.get(self, "days_of_weeks")

    @days_of_weeks.setter
    def days_of_weeks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "days_of_weeks", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it is available.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the end time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="intervalTime")
    def interval_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the interval time.
        """
        return pulumi.get(self, "interval_time")

    @interval_time.setter
    def interval_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interval_time", value)

    @_builtins.property
    @pulumi.getter(name="intervalUnit")
    def interval_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the interval unit.
        """
        return pulumi.get(self, "interval_unit")

    @interval_unit.setter
    def interval_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interval_unit", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom variable name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the start time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time zone.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_zone", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of a scheduled task.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class PipelineByTemplateSourceArgsDict(TypedDict):
        params: NotRequired[pulumi.Input['PipelineByTemplateSourceParamsArgsDict']]
        """
        Specifies the pipeline source parameters.
        The params structure is documented below.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter type.
        """
elif False:
    PipelineByTemplateSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineByTemplateSourceArgs:
    def __init__(__self__, *,
                 params: Optional[pulumi.Input['PipelineByTemplateSourceParamsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['PipelineByTemplateSourceParamsArgs'] params: Specifies the pipeline source parameters.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] type: Specifies the custom parameter type.
        """
        if params is not None:
            pulumi.set(__self__, "params", params)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input['PipelineByTemplateSourceParamsArgs']]:
        """
        Specifies the pipeline source parameters.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input['PipelineByTemplateSourceParamsArgs']]):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class PipelineByTemplateSourceParamsArgsDict(TypedDict):
        alias: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the code repository alias.
        """
        codehub_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the CodeArts Repo code repository ID.
        """
        default_branch: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the default branch.
        """
        endpoint_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the code source endpoint ID.
        """
        git_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the Git repository type.
        """
        git_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the Git URL.
        """
        repo_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the pipeline source name.
        """
        ssh_git_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the SSH Git address,
        """
        web_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the web page URL.

        <a name="block--concurrency_control"></a>
        The `concurrency_control` block supports:
        """
elif False:
    PipelineByTemplateSourceParamsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineByTemplateSourceParamsArgs:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 codehub_id: Optional[pulumi.Input[_builtins.str]] = None,
                 default_branch: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 git_type: Optional[pulumi.Input[_builtins.str]] = None,
                 git_url: Optional[pulumi.Input[_builtins.str]] = None,
                 repo_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh_git_url: Optional[pulumi.Input[_builtins.str]] = None,
                 web_url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] alias: Specifies the code repository alias.
        :param pulumi.Input[_builtins.str] codehub_id: Specifies the CodeArts Repo code repository ID.
        :param pulumi.Input[_builtins.str] default_branch: Specifies the default branch.
        :param pulumi.Input[_builtins.str] endpoint_id: Specifies the code source endpoint ID.
        :param pulumi.Input[_builtins.str] git_type: Specifies the Git repository type.
        :param pulumi.Input[_builtins.str] git_url: Specifies the Git URL.
        :param pulumi.Input[_builtins.str] repo_name: Specifies the pipeline source name.
        :param pulumi.Input[_builtins.str] ssh_git_url: Specifies the SSH Git address,
        :param pulumi.Input[_builtins.str] web_url: Specifies the web page URL.
               
               <a name="block--concurrency_control"></a>
               The `concurrency_control` block supports:
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if codehub_id is not None:
            pulumi.set(__self__, "codehub_id", codehub_id)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if git_type is not None:
            pulumi.set(__self__, "git_type", git_type)
        if git_url is not None:
            pulumi.set(__self__, "git_url", git_url)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if ssh_git_url is not None:
            pulumi.set(__self__, "ssh_git_url", ssh_git_url)
        if web_url is not None:
            pulumi.set(__self__, "web_url", web_url)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the code repository alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="codehubId")
    def codehub_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CodeArts Repo code repository ID.
        """
        return pulumi.get(self, "codehub_id")

    @codehub_id.setter
    def codehub_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "codehub_id", value)

    @_builtins.property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the default branch.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_branch", value)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the code source endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="gitType")
    def git_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Git repository type.
        """
        return pulumi.get(self, "git_type")

    @git_type.setter
    def git_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_type", value)

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Git URL.
        """
        return pulumi.get(self, "git_url")

    @git_url.setter
    def git_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_url", value)

    @_builtins.property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline source name.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repo_name", value)

    @_builtins.property
    @pulumi.getter(name="sshGitUrl")
    def ssh_git_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the SSH Git address,
        """
        return pulumi.get(self, "ssh_git_url")

    @ssh_git_url.setter
    def ssh_git_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh_git_url", value)

    @_builtins.property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the web page URL.

        <a name="block--concurrency_control"></a>
        The `concurrency_control` block supports:
        """
        return pulumi.get(self, "web_url")

    @web_url.setter
    def web_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "web_url", value)


if not MYPY:
    class PipelineByTemplateTriggerArgsDict(TypedDict):
        callback_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the callback URL.
        """
        endpoint_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the code source endpoint ID.
        """
        events: NotRequired[pulumi.Input[Sequence[pulumi.Input['PipelineByTemplateTriggerEventArgsDict']]]]
        """
        Specifies the trigger event list.
        The events structure is documented below.
        """
        git_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the Git repository type.
        """
        git_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the Git URL.
        """
        hook_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the callback ID.
        """
        is_auto_commit: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to automatically commit code.
        """
        repo_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the repository ID.
        """
        security_token: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the User token.

        <a name="block--triggers--events"></a>
        The `events` block supports:
        """
elif False:
    PipelineByTemplateTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineByTemplateTriggerArgs:
    def __init__(__self__, *,
                 callback_url: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineByTemplateTriggerEventArgs']]]] = None,
                 git_type: Optional[pulumi.Input[_builtins.str]] = None,
                 git_url: Optional[pulumi.Input[_builtins.str]] = None,
                 hook_id: Optional[pulumi.Input[_builtins.int]] = None,
                 is_auto_commit: Optional[pulumi.Input[_builtins.bool]] = None,
                 repo_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_token: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] callback_url: Specifies the callback URL.
        :param pulumi.Input[_builtins.str] endpoint_id: Specifies the code source endpoint ID.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineByTemplateTriggerEventArgs']]] events: Specifies the trigger event list.
               The events structure is documented below.
        :param pulumi.Input[_builtins.str] git_type: Specifies the Git repository type.
        :param pulumi.Input[_builtins.str] git_url: Specifies the Git URL.
        :param pulumi.Input[_builtins.int] hook_id: Indicates the callback ID.
        :param pulumi.Input[_builtins.bool] is_auto_commit: Specifies whether to automatically commit code.
        :param pulumi.Input[_builtins.str] repo_id: Specifies the repository ID.
        :param pulumi.Input[_builtins.str] security_token: Specifies the User token.
               
               <a name="block--triggers--events"></a>
               The `events` block supports:
        """
        if callback_url is not None:
            pulumi.set(__self__, "callback_url", callback_url)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if git_type is not None:
            pulumi.set(__self__, "git_type", git_type)
        if git_url is not None:
            pulumi.set(__self__, "git_url", git_url)
        if hook_id is not None:
            pulumi.set(__self__, "hook_id", hook_id)
        if is_auto_commit is not None:
            pulumi.set(__self__, "is_auto_commit", is_auto_commit)
        if repo_id is not None:
            pulumi.set(__self__, "repo_id", repo_id)
        if security_token is not None:
            pulumi.set(__self__, "security_token", security_token)

    @_builtins.property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the callback URL.
        """
        return pulumi.get(self, "callback_url")

    @callback_url.setter
    def callback_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "callback_url", value)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the code source endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_id", value)

    @_builtins.property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineByTemplateTriggerEventArgs']]]]:
        """
        Specifies the trigger event list.
        The events structure is documented below.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineByTemplateTriggerEventArgs']]]]):
        pulumi.set(self, "events", value)

    @_builtins.property
    @pulumi.getter(name="gitType")
    def git_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Git repository type.
        """
        return pulumi.get(self, "git_type")

    @git_type.setter
    def git_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_type", value)

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Git URL.
        """
        return pulumi.get(self, "git_url")

    @git_url.setter
    def git_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_url", value)

    @_builtins.property
    @pulumi.getter(name="hookId")
    def hook_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the callback ID.
        """
        return pulumi.get(self, "hook_id")

    @hook_id.setter
    def hook_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hook_id", value)

    @_builtins.property
    @pulumi.getter(name="isAutoCommit")
    def is_auto_commit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to automatically commit code.
        """
        return pulumi.get(self, "is_auto_commit")

    @is_auto_commit.setter
    def is_auto_commit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_auto_commit", value)

    @_builtins.property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the repository ID.
        """
        return pulumi.get(self, "repo_id")

    @repo_id.setter
    def repo_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repo_id", value)

    @_builtins.property
    @pulumi.getter(name="securityToken")
    def security_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the User token.

        <a name="block--triggers--events"></a>
        The `events` block supports:
        """
        return pulumi.get(self, "security_token")

    @security_token.setter
    def security_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_token", value)


if not MYPY:
    class PipelineByTemplateTriggerEventArgsDict(TypedDict):
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether it is available.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter type.
        """
elif False:
    PipelineByTemplateTriggerEventArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineByTemplateTriggerEventArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] enable: Specifies whether it is available.
        :param pulumi.Input[_builtins.str] type: Specifies the custom parameter type.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it is available.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class PipelineByTemplateVariableArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter description.
        """
        is_reset: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to reset.
        """
        is_runtime: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to set parameters at runtime.
        """
        is_secret: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether it is a private parameter.
        """
        latest_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the last parameter value.
        """
        limits: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the list of enumerated values.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom variable name.
        """
        runtime_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value passed in at runtime.
        """
        sequence: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the parameter sequence, starting from 1.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter type.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter default value.
        """
elif False:
    PipelineByTemplateVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineByTemplateVariableArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 is_reset: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_runtime: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_secret: Optional[pulumi.Input[_builtins.bool]] = None,
                 latest_value: Optional[pulumi.Input[_builtins.str]] = None,
                 limits: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_value: Optional[pulumi.Input[_builtins.str]] = None,
                 sequence: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] description: Specifies the parameter description.
        :param pulumi.Input[_builtins.bool] is_reset: Specifies whether to reset.
        :param pulumi.Input[_builtins.bool] is_runtime: Specifies whether to set parameters at runtime.
        :param pulumi.Input[_builtins.bool] is_secret: Specifies whether it is a private parameter.
        :param pulumi.Input[_builtins.str] latest_value: Specifies the last parameter value.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] limits: Specifies the list of enumerated values.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name.
        :param pulumi.Input[_builtins.str] runtime_value: Specifies the value passed in at runtime.
        :param pulumi.Input[_builtins.int] sequence: Specifies the parameter sequence, starting from 1.
        :param pulumi.Input[_builtins.str] type: Specifies the custom parameter type.
        :param pulumi.Input[_builtins.str] value: Specifies the custom parameter default value.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_reset is not None:
            pulumi.set(__self__, "is_reset", is_reset)
        if is_runtime is not None:
            pulumi.set(__self__, "is_runtime", is_runtime)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if latest_value is not None:
            pulumi.set(__self__, "latest_value", latest_value)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if runtime_value is not None:
            pulumi.set(__self__, "runtime_value", runtime_value)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="isReset")
    def is_reset(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to reset.
        """
        return pulumi.get(self, "is_reset")

    @is_reset.setter
    def is_reset(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_reset", value)

    @_builtins.property
    @pulumi.getter(name="isRuntime")
    def is_runtime(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to set parameters at runtime.
        """
        return pulumi.get(self, "is_runtime")

    @is_runtime.setter
    def is_runtime(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_runtime", value)

    @_builtins.property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it is a private parameter.
        """
        return pulumi.get(self, "is_secret")

    @is_secret.setter
    def is_secret(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_secret", value)

    @_builtins.property
    @pulumi.getter(name="latestValue")
    def latest_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the last parameter value.
        """
        return pulumi.get(self, "latest_value")

    @latest_value.setter
    def latest_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "latest_value", value)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of enumerated values.
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "limits", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom variable name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="runtimeValue")
    def runtime_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value passed in at runtime.
        """
        return pulumi.get(self, "runtime_value")

    @runtime_value.setter
    def runtime_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "runtime_value", value)

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the parameter sequence, starting from 1.
        """
        return pulumi.get(self, "sequence")

    @sequence.setter
    def sequence(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sequence", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter default value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class PipelineConcurrencyControlArgsDict(TypedDict):
        concurrency_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the number of concurrent instances.
        """
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether it is available. Defaults to **false**.
        """
        exceed_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the policy when the threshold is exceeded.
        Value can be as follows:
        + **ABORT**: ignore
        + **QUEUE**: wait in queue

        <a name="block--schedules"></a>
        The `schedules` block supports:
        """
elif False:
    PipelineConcurrencyControlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineConcurrencyControlArgs:
    def __init__(__self__, *,
                 concurrency_number: Optional[pulumi.Input[_builtins.int]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 exceed_action: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] concurrency_number: Specifies the number of concurrent instances.
        :param pulumi.Input[_builtins.bool] enable: Specifies whether it is available. Defaults to **false**.
        :param pulumi.Input[_builtins.str] exceed_action: Specifies the policy when the threshold is exceeded.
               Value can be as follows:
               + **ABORT**: ignore
               + **QUEUE**: wait in queue
               
               <a name="block--schedules"></a>
               The `schedules` block supports:
        """
        if concurrency_number is not None:
            pulumi.set(__self__, "concurrency_number", concurrency_number)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if exceed_action is not None:
            pulumi.set(__self__, "exceed_action", exceed_action)

    @_builtins.property
    @pulumi.getter(name="concurrencyNumber")
    def concurrency_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of concurrent instances.
        """
        return pulumi.get(self, "concurrency_number")

    @concurrency_number.setter
    def concurrency_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "concurrency_number", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it is available. Defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="exceedAction")
    def exceed_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy when the threshold is exceeded.
        Value can be as follows:
        + **ABORT**: ignore
        + **QUEUE**: wait in queue

        <a name="block--schedules"></a>
        The `schedules` block supports:
        """
        return pulumi.get(self, "exceed_action")

    @exceed_action.setter
    def exceed_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exceed_action", value)


if not MYPY:
    class PipelineMicroServiceRepoArgsDict(TypedDict):
        branch: pulumi.Input[_builtins.str]
        """
        Specifies the branch.
        """
        git_url: pulumi.Input[_builtins.str]
        """
        Specifies the Git address of the Git repository.
        """
        http_url: pulumi.Input[_builtins.str]
        """
        Specifies the HTTP address of the Git repository.
        """
        language: pulumi.Input[_builtins.str]
        """
        Specifies the language.
        """
        repo_id: pulumi.Input[_builtins.str]
        """
        Specifies the repository ID.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the repository type.
        """
        endpoint_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the endpoint ID.
        """
elif False:
    PipelineMicroServiceRepoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineMicroServiceRepoArgs:
    def __init__(__self__, *,
                 branch: pulumi.Input[_builtins.str],
                 git_url: pulumi.Input[_builtins.str],
                 http_url: pulumi.Input[_builtins.str],
                 language: pulumi.Input[_builtins.str],
                 repo_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] branch: Specifies the branch.
        :param pulumi.Input[_builtins.str] git_url: Specifies the Git address of the Git repository.
        :param pulumi.Input[_builtins.str] http_url: Specifies the HTTP address of the Git repository.
        :param pulumi.Input[_builtins.str] language: Specifies the language.
        :param pulumi.Input[_builtins.str] repo_id: Specifies the repository ID.
        :param pulumi.Input[_builtins.str] type: Specifies the repository type.
        :param pulumi.Input[_builtins.str] endpoint_id: Specifies the endpoint ID.
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "git_url", git_url)
        pulumi.set(__self__, "http_url", http_url)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "repo_id", repo_id)
        pulumi.set(__self__, "type", type)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)

    @_builtins.property
    @pulumi.getter
    def branch(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the branch.
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "branch", value)

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the Git address of the Git repository.
        """
        return pulumi.get(self, "git_url")

    @git_url.setter
    def git_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "git_url", value)

    @_builtins.property
    @pulumi.getter(name="httpUrl")
    def http_url(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the HTTP address of the Git repository.
        """
        return pulumi.get(self, "http_url")

    @http_url.setter
    def http_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "http_url", value)

    @_builtins.property
    @pulumi.getter
    def language(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the language.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "language", value)

    @_builtins.property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the repository ID.
        """
        return pulumi.get(self, "repo_id")

    @repo_id.setter
    def repo_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "repo_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the repository type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_id", value)


if not MYPY:
    class PipelineParameterGroupRelatedPipelineArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the pipeline ID.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom variable name.
        """
elif False:
    PipelineParameterGroupRelatedPipelineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineParameterGroupRelatedPipelineArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Indicates the pipeline ID.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the pipeline ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom variable name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class PipelineParameterGroupVariableArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter description.
        """
        is_secret: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether it is a private parameter.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom variable name.
        """
        sequence: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the parameter sequence, starting from 1.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter type.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter default value.
        """
elif False:
    PipelineParameterGroupVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineParameterGroupVariableArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 is_secret: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sequence: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] description: Specifies the parameter description.
        :param pulumi.Input[_builtins.bool] is_secret: Specifies whether it is a private parameter.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name.
        :param pulumi.Input[_builtins.int] sequence: Specifies the parameter sequence, starting from 1.
        :param pulumi.Input[_builtins.str] type: Specifies the custom parameter type.
        :param pulumi.Input[_builtins.str] value: Specifies the custom parameter default value.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it is a private parameter.
        """
        return pulumi.get(self, "is_secret")

    @is_secret.setter
    def is_secret(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_secret", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom variable name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the parameter sequence, starting from 1.
        """
        return pulumi.get(self, "sequence")

    @sequence.setter
    def sequence(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sequence", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter default value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class PipelineRolePermissionArgsDict(TypedDict):
        operation_authorize: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to authorize.
        """
        operation_delete: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to delete.
        """
        operation_execute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to execute.
        """
        operation_query: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to query.
        """
        operation_update: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the role has the permission to update.
        """
        role_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the role ID.
        """
        role_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the role name.
        """
elif False:
    PipelineRolePermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineRolePermissionArgs:
    def __init__(__self__, *,
                 operation_authorize: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_execute: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_query: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 role_id: Optional[pulumi.Input[_builtins.int]] = None,
                 role_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] operation_authorize: Indicates whether the role has the permission to authorize.
        :param pulumi.Input[_builtins.bool] operation_delete: Indicates whether the role has the permission to delete.
        :param pulumi.Input[_builtins.bool] operation_execute: Indicates whether the role has the permission to execute.
        :param pulumi.Input[_builtins.bool] operation_query: Indicates whether the role has the permission to query.
        :param pulumi.Input[_builtins.bool] operation_update: Indicates whether the role has the permission to update.
        :param pulumi.Input[_builtins.int] role_id: Indicates the role ID.
        :param pulumi.Input[_builtins.str] role_name: Indicates the role name.
        """
        if operation_authorize is not None:
            pulumi.set(__self__, "operation_authorize", operation_authorize)
        if operation_delete is not None:
            pulumi.set(__self__, "operation_delete", operation_delete)
        if operation_execute is not None:
            pulumi.set(__self__, "operation_execute", operation_execute)
        if operation_query is not None:
            pulumi.set(__self__, "operation_query", operation_query)
        if operation_update is not None:
            pulumi.set(__self__, "operation_update", operation_update)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @_builtins.property
    @pulumi.getter(name="operationAuthorize")
    def operation_authorize(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to authorize.
        """
        return pulumi.get(self, "operation_authorize")

    @operation_authorize.setter
    def operation_authorize(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_authorize", value)

    @_builtins.property
    @pulumi.getter(name="operationDelete")
    def operation_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to delete.
        """
        return pulumi.get(self, "operation_delete")

    @operation_delete.setter
    def operation_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_delete", value)

    @_builtins.property
    @pulumi.getter(name="operationExecute")
    def operation_execute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to execute.
        """
        return pulumi.get(self, "operation_execute")

    @operation_execute.setter
    def operation_execute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_execute", value)

    @_builtins.property
    @pulumi.getter(name="operationQuery")
    def operation_query(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to query.
        """
        return pulumi.get(self, "operation_query")

    @operation_query.setter
    def operation_query(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_query", value)

    @_builtins.property
    @pulumi.getter(name="operationUpdate")
    def operation_update(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to update.
        """
        return pulumi.get(self, "operation_update")

    @operation_update.setter
    def operation_update(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_update", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the role ID.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_name", value)


if not MYPY:
    class PipelineRuleContentArgsDict(TypedDict):
        group_name: pulumi.Input[_builtins.str]
        """
        Specifies the group name.
        """
        properties: pulumi.Input[Sequence[pulumi.Input['PipelineRuleContentPropertyArgsDict']]]
        """
        Specifies the rule attribute list.
        The properties structure is documented below.
        """
        can_modify_when_inherit: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether thresholds of an inherited policy can be modified.
        Default to **false**.

        <a name="block--content--properties"></a>
        The `properties` block supports:
        """
elif False:
    PipelineRuleContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineRuleContentArgs:
    def __init__(__self__, *,
                 group_name: pulumi.Input[_builtins.str],
                 properties: pulumi.Input[Sequence[pulumi.Input['PipelineRuleContentPropertyArgs']]],
                 can_modify_when_inherit: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] group_name: Specifies the group name.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineRuleContentPropertyArgs']]] properties: Specifies the rule attribute list.
               The properties structure is documented below.
        :param pulumi.Input[_builtins.bool] can_modify_when_inherit: Specifies whether thresholds of an inherited policy can be modified.
               Default to **false**.
               
               <a name="block--content--properties"></a>
               The `properties` block supports:
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "properties", properties)
        if can_modify_when_inherit is not None:
            pulumi.set(__self__, "can_modify_when_inherit", can_modify_when_inherit)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the group name.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> pulumi.Input[Sequence[pulumi.Input['PipelineRuleContentPropertyArgs']]]:
        """
        Specifies the rule attribute list.
        The properties structure is documented below.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input[Sequence[pulumi.Input['PipelineRuleContentPropertyArgs']]]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter(name="canModifyWhenInherit")
    def can_modify_when_inherit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether thresholds of an inherited policy can be modified.
        Default to **false**.

        <a name="block--content--properties"></a>
        The `properties` block supports:
        """
        return pulumi.get(self, "can_modify_when_inherit")

    @can_modify_when_inherit.setter
    def can_modify_when_inherit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_modify_when_inherit", value)


if not MYPY:
    class PipelineRuleContentPropertyArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        """
        Specifies the attribute key.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the display name.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the attribute value.
        """
        value_type: pulumi.Input[_builtins.str]
        """
        Specifies the value type.
        """
        is_valid: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies wether the property is valid. Default to **false**.
        """
        operator: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the comparison operators.
        """
elif False:
    PipelineRuleContentPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineRuleContentPropertyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 value_type: pulumi.Input[_builtins.str],
                 is_valid: Optional[pulumi.Input[_builtins.bool]] = None,
                 operator: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the attribute key.
        :param pulumi.Input[_builtins.str] name: Specifies the display name.
        :param pulumi.Input[_builtins.str] type: Specifies the type.
        :param pulumi.Input[_builtins.str] value: Specifies the attribute value.
        :param pulumi.Input[_builtins.str] value_type: Specifies the value type.
        :param pulumi.Input[_builtins.bool] is_valid: Specifies wether the property is valid. Default to **false**.
        :param pulumi.Input[_builtins.str] operator: Specifies the comparison operators.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)
        if is_valid is not None:
            pulumi.set(__self__, "is_valid", is_valid)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the attribute key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the display name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the attribute value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value type.
        """
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value_type", value)

    @_builtins.property
    @pulumi.getter(name="isValid")
    def is_valid(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies wether the property is valid. Default to **false**.
        """
        return pulumi.get(self, "is_valid")

    @is_valid.setter
    def is_valid(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_valid", value)

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the comparison operators.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PipelineScheduleArgsDict(TypedDict):
        days_of_weeks: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]
        """
        Specifies the execution day in a week. Sunday to Saturday: **1** to **7**.
        """
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether it is available. Defaults to **false**.
        """
        end_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the end time.
        """
        interval_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the interval time.
        """
        interval_unit: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the interval unit.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom variable name. The value can contain a maximum of **32** characters.
        """
        start_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the start time.
        """
        time_zone: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the time zone. Value can be **China Standard Time**, **GMT Standard Time**,
        **South Africa Standard Time**, **Russian Standard Time**,**SE Asia Standard Time**, **Singapore Standard Time**,
        **Pacific SA Standard Time**, **E. South America Standard Time**, **Central Standard Time (Mexico)**,
        **Egypt Standard Time**, **Saudi Arabia Standard Time**.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter type.
        Value can be as follows:
        + **autoIncrement**: auto-increment parameter
        + **enum**: enumeration parameter
        + **string**: character string parameter
        """
        uuid: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the ID of a scheduled task.
        """
elif False:
    PipelineScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineScheduleArgs:
    def __init__(__self__, *,
                 days_of_weeks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 interval_time: Optional[pulumi.Input[_builtins.str]] = None,
                 interval_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 uuid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] days_of_weeks: Specifies the execution day in a week. Sunday to Saturday: **1** to **7**.
        :param pulumi.Input[_builtins.bool] enable: Specifies whether it is available. Defaults to **false**.
        :param pulumi.Input[_builtins.str] end_time: Specifies the end time.
        :param pulumi.Input[_builtins.str] interval_time: Specifies the interval time.
        :param pulumi.Input[_builtins.str] interval_unit: Specifies the interval unit.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name. The value can contain a maximum of **32** characters.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone. Value can be **China Standard Time**, **GMT Standard Time**,
               **South Africa Standard Time**, **Russian Standard Time**,**SE Asia Standard Time**, **Singapore Standard Time**,
               **Pacific SA Standard Time**, **E. South America Standard Time**, **Central Standard Time (Mexico)**,
               **Egypt Standard Time**, **Saudi Arabia Standard Time**.
        :param pulumi.Input[_builtins.str] type: Specifies the custom parameter type.
               Value can be as follows:
               + **autoIncrement**: auto-increment parameter
               + **enum**: enumeration parameter
               + **string**: character string parameter
        :param pulumi.Input[_builtins.str] uuid: Indicates the ID of a scheduled task.
        """
        if days_of_weeks is not None:
            pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if interval_time is not None:
            pulumi.set(__self__, "interval_time", interval_time)
        if interval_unit is not None:
            pulumi.set(__self__, "interval_unit", interval_unit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Specifies the execution day in a week. Sunday to Saturday: **1** to **7**.
        """
        return pulumi.get(self, "days_of_weeks")

    @days_of_weeks.setter
    def days_of_weeks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "days_of_weeks", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it is available. Defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the end time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="intervalTime")
    def interval_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the interval time.
        """
        return pulumi.get(self, "interval_time")

    @interval_time.setter
    def interval_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interval_time", value)

    @_builtins.property
    @pulumi.getter(name="intervalUnit")
    def interval_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the interval unit.
        """
        return pulumi.get(self, "interval_unit")

    @interval_unit.setter
    def interval_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interval_unit", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom variable name. The value can contain a maximum of **32** characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the start time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time zone. Value can be **China Standard Time**, **GMT Standard Time**,
        **South Africa Standard Time**, **Russian Standard Time**,**SE Asia Standard Time**, **Singapore Standard Time**,
        **Pacific SA Standard Time**, **E. South America Standard Time**, **Central Standard Time (Mexico)**,
        **Egypt Standard Time**, **Saudi Arabia Standard Time**.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_zone", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter type.
        Value can be as follows:
        + **autoIncrement**: auto-increment parameter
        + **enum**: enumeration parameter
        + **string**: character string parameter
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of a scheduled task.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class PipelineServiceEndpointAuthorizationArgsDict(TypedDict):
        parameters: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the authentication parameter.
        """
        scheme: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the authentication mode.
        """
elif False:
    PipelineServiceEndpointAuthorizationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineServiceEndpointAuthorizationArgs:
    def __init__(__self__, *,
                 parameters: Optional[pulumi.Input[_builtins.str]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] parameters: Specifies the authentication parameter.
        :param pulumi.Input[_builtins.str] scheme: Specifies the authentication mode.
        """
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authentication parameter.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authentication mode.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class PipelineServiceEndpointCreatedByArgsDict(TypedDict):
        user_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the user ID.
        """
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the user name.
        """
elif False:
    PipelineServiceEndpointCreatedByArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineServiceEndpointCreatedByArgs:
    def __init__(__self__, *,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] user_id: Indicates the user ID.
        :param pulumi.Input[_builtins.str] user_name: Indicates the user name.
        """
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the user ID.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the user name.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class PipelineSourceArgsDict(TypedDict):
        params: NotRequired[pulumi.Input['PipelineSourceParamsArgsDict']]
        """
        Specifies the pipeline source parameters.
        The params structure is documented below.

        <a name="block--sources--params"></a>
        The `params` block supports:
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter type.
        Value can be as follows:
        + **autoIncrement**: auto-increment parameter
        + **enum**: enumeration parameter
        + **string**: character string parameter
        """
elif False:
    PipelineSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineSourceArgs:
    def __init__(__self__, *,
                 params: Optional[pulumi.Input['PipelineSourceParamsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['PipelineSourceParamsArgs'] params: Specifies the pipeline source parameters.
               The params structure is documented below.
               
               <a name="block--sources--params"></a>
               The `params` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the custom parameter type.
               Value can be as follows:
               + **autoIncrement**: auto-increment parameter
               + **enum**: enumeration parameter
               + **string**: character string parameter
        """
        if params is not None:
            pulumi.set(__self__, "params", params)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input['PipelineSourceParamsArgs']]:
        """
        Specifies the pipeline source parameters.
        The params structure is documented below.

        <a name="block--sources--params"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input['PipelineSourceParamsArgs']]):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter type.
        Value can be as follows:
        + **autoIncrement**: auto-increment parameter
        + **enum**: enumeration parameter
        + **string**: character string parameter
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class PipelineSourceParamsArgsDict(TypedDict):
        alias: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the code repository alias. The value can contain a maximum of **128** characters,
        including letters, digits, and underscores (_).
        """
        codehub_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the CodeArts Repo code repository ID.
        """
        default_branch: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the default branch.
        """
        endpoint_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the code source endpoint ID.
        """
        git_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the Git repository type. The options include **CodeHub**, **Gitee**,
        **GitHub**, **GitCode**, and **GitLab**.
        """
        git_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the Git URL.
        """
        repo_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the pipeline source name.
        """
        ssh_git_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the SSH Git address,
        """
        web_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the web page URL.

        <a name="block--concurrency_control"></a>
        The `concurrency_control` block supports:
        """
elif False:
    PipelineSourceParamsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineSourceParamsArgs:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 codehub_id: Optional[pulumi.Input[_builtins.str]] = None,
                 default_branch: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 git_type: Optional[pulumi.Input[_builtins.str]] = None,
                 git_url: Optional[pulumi.Input[_builtins.str]] = None,
                 repo_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh_git_url: Optional[pulumi.Input[_builtins.str]] = None,
                 web_url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] alias: Specifies the code repository alias. The value can contain a maximum of **128** characters,
               including letters, digits, and underscores (_).
        :param pulumi.Input[_builtins.str] codehub_id: Specifies the CodeArts Repo code repository ID.
        :param pulumi.Input[_builtins.str] default_branch: Specifies the default branch.
        :param pulumi.Input[_builtins.str] endpoint_id: Specifies the code source endpoint ID.
        :param pulumi.Input[_builtins.str] git_type: Specifies the Git repository type. The options include **CodeHub**, **Gitee**,
               **GitHub**, **GitCode**, and **GitLab**.
        :param pulumi.Input[_builtins.str] git_url: Specifies the Git URL.
        :param pulumi.Input[_builtins.str] repo_name: Specifies the pipeline source name.
        :param pulumi.Input[_builtins.str] ssh_git_url: Specifies the SSH Git address,
        :param pulumi.Input[_builtins.str] web_url: Specifies the web page URL.
               
               <a name="block--concurrency_control"></a>
               The `concurrency_control` block supports:
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if codehub_id is not None:
            pulumi.set(__self__, "codehub_id", codehub_id)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if git_type is not None:
            pulumi.set(__self__, "git_type", git_type)
        if git_url is not None:
            pulumi.set(__self__, "git_url", git_url)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if ssh_git_url is not None:
            pulumi.set(__self__, "ssh_git_url", ssh_git_url)
        if web_url is not None:
            pulumi.set(__self__, "web_url", web_url)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the code repository alias. The value can contain a maximum of **128** characters,
        including letters, digits, and underscores (_).
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="codehubId")
    def codehub_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CodeArts Repo code repository ID.
        """
        return pulumi.get(self, "codehub_id")

    @codehub_id.setter
    def codehub_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "codehub_id", value)

    @_builtins.property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the default branch.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_branch", value)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the code source endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="gitType")
    def git_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Git repository type. The options include **CodeHub**, **Gitee**,
        **GitHub**, **GitCode**, and **GitLab**.
        """
        return pulumi.get(self, "git_type")

    @git_type.setter
    def git_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_type", value)

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Git URL.
        """
        return pulumi.get(self, "git_url")

    @git_url.setter
    def git_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_url", value)

    @_builtins.property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline source name.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repo_name", value)

    @_builtins.property
    @pulumi.getter(name="sshGitUrl")
    def ssh_git_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the SSH Git address,
        """
        return pulumi.get(self, "ssh_git_url")

    @ssh_git_url.setter
    def ssh_git_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh_git_url", value)

    @_builtins.property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the web page URL.

        <a name="block--concurrency_control"></a>
        The `concurrency_control` block supports:
        """
        return pulumi.get(self, "web_url")

    @web_url.setter
    def web_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "web_url", value)


if not MYPY:
    class PipelineTemplateVariableArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter description.
        """
        is_reset: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to reset.
        + **true**: Uses the edited parameter value.
        + **false**: Uses the auto-increment parameter.

        Defaults to `false`.
        """
        is_runtime: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether the parameters can be set during runtime. Defaults to `false`.
        """
        is_secret: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether it is a private parameter. Defaults to `false`.
        """
        latest_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the last parameter value.
        """
        limits: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the list of enumerated values.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom variable name.
        """
        runtime_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value passed in at runtime.
        """
        sequence: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the parameter sequence, starting from **1**.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter type.
        Valid values are:
        + **autoIncrement**: Auto-increment parameter.
        + **enum**: Enumeration parameter.
        + **string**: String parameter.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter default value.
        """
elif False:
    PipelineTemplateVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineTemplateVariableArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 is_reset: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_runtime: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_secret: Optional[pulumi.Input[_builtins.bool]] = None,
                 latest_value: Optional[pulumi.Input[_builtins.str]] = None,
                 limits: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_value: Optional[pulumi.Input[_builtins.str]] = None,
                 sequence: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] description: Specifies the parameter description.
        :param pulumi.Input[_builtins.bool] is_reset: Specifies whether to reset.
               + **true**: Uses the edited parameter value.
               + **false**: Uses the auto-increment parameter.
               
               Defaults to `false`.
        :param pulumi.Input[_builtins.bool] is_runtime: Specifies whether the parameters can be set during runtime. Defaults to `false`.
        :param pulumi.Input[_builtins.bool] is_secret: Specifies whether it is a private parameter. Defaults to `false`.
        :param pulumi.Input[_builtins.str] latest_value: Specifies the last parameter value.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] limits: Specifies the list of enumerated values.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name.
        :param pulumi.Input[_builtins.str] runtime_value: Specifies the value passed in at runtime.
        :param pulumi.Input[_builtins.int] sequence: Specifies the parameter sequence, starting from **1**.
        :param pulumi.Input[_builtins.str] type: Specifies the custom parameter type.
               Valid values are:
               + **autoIncrement**: Auto-increment parameter.
               + **enum**: Enumeration parameter.
               + **string**: String parameter.
        :param pulumi.Input[_builtins.str] value: Specifies the custom parameter default value.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_reset is not None:
            pulumi.set(__self__, "is_reset", is_reset)
        if is_runtime is not None:
            pulumi.set(__self__, "is_runtime", is_runtime)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if latest_value is not None:
            pulumi.set(__self__, "latest_value", latest_value)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if runtime_value is not None:
            pulumi.set(__self__, "runtime_value", runtime_value)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="isReset")
    def is_reset(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to reset.
        + **true**: Uses the edited parameter value.
        + **false**: Uses the auto-increment parameter.

        Defaults to `false`.
        """
        return pulumi.get(self, "is_reset")

    @is_reset.setter
    def is_reset(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_reset", value)

    @_builtins.property
    @pulumi.getter(name="isRuntime")
    def is_runtime(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the parameters can be set during runtime. Defaults to `false`.
        """
        return pulumi.get(self, "is_runtime")

    @is_runtime.setter
    def is_runtime(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_runtime", value)

    @_builtins.property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it is a private parameter. Defaults to `false`.
        """
        return pulumi.get(self, "is_secret")

    @is_secret.setter
    def is_secret(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_secret", value)

    @_builtins.property
    @pulumi.getter(name="latestValue")
    def latest_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the last parameter value.
        """
        return pulumi.get(self, "latest_value")

    @latest_value.setter
    def latest_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "latest_value", value)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of enumerated values.
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "limits", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom variable name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="runtimeValue")
    def runtime_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value passed in at runtime.
        """
        return pulumi.get(self, "runtime_value")

    @runtime_value.setter
    def runtime_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "runtime_value", value)

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the parameter sequence, starting from **1**.
        """
        return pulumi.get(self, "sequence")

    @sequence.setter
    def sequence(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sequence", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter type.
        Valid values are:
        + **autoIncrement**: Auto-increment parameter.
        + **enum**: Enumeration parameter.
        + **string**: String parameter.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter default value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class PipelineTriggerArgsDict(TypedDict):
        callback_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the callback URL.
        """
        endpoint_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the code source endpoint ID.
        """
        events: NotRequired[pulumi.Input[Sequence[pulumi.Input['PipelineTriggerEventArgsDict']]]]
        """
        Specifies the trigger event list.
        The events structure is documented below.
        """
        git_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the Git repository type. The options include **CodeHub**, **Gitee**,
        **GitHub**, **GitCode**, and **GitLab**.
        """
        git_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the Git URL.
        """
        hook_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the callback ID.
        """
        is_auto_commit: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to automatically commit code. Defaults to **false**.
        """
        repo_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the repository ID.
        """
        security_token: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the User token.

        <a name="block--triggers--events"></a>
        The `events` block supports:
        """
elif False:
    PipelineTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineTriggerArgs:
    def __init__(__self__, *,
                 callback_url: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTriggerEventArgs']]]] = None,
                 git_type: Optional[pulumi.Input[_builtins.str]] = None,
                 git_url: Optional[pulumi.Input[_builtins.str]] = None,
                 hook_id: Optional[pulumi.Input[_builtins.int]] = None,
                 is_auto_commit: Optional[pulumi.Input[_builtins.bool]] = None,
                 repo_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_token: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] callback_url: Specifies the callback URL.
        :param pulumi.Input[_builtins.str] endpoint_id: Specifies the code source endpoint ID.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineTriggerEventArgs']]] events: Specifies the trigger event list.
               The events structure is documented below.
        :param pulumi.Input[_builtins.str] git_type: Specifies the Git repository type. The options include **CodeHub**, **Gitee**,
               **GitHub**, **GitCode**, and **GitLab**.
        :param pulumi.Input[_builtins.str] git_url: Specifies the Git URL.
        :param pulumi.Input[_builtins.int] hook_id: Indicates the callback ID.
        :param pulumi.Input[_builtins.bool] is_auto_commit: Specifies whether to automatically commit code. Defaults to **false**.
        :param pulumi.Input[_builtins.str] repo_id: Specifies the repository ID.
        :param pulumi.Input[_builtins.str] security_token: Specifies the User token.
               
               <a name="block--triggers--events"></a>
               The `events` block supports:
        """
        if callback_url is not None:
            pulumi.set(__self__, "callback_url", callback_url)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if git_type is not None:
            pulumi.set(__self__, "git_type", git_type)
        if git_url is not None:
            pulumi.set(__self__, "git_url", git_url)
        if hook_id is not None:
            pulumi.set(__self__, "hook_id", hook_id)
        if is_auto_commit is not None:
            pulumi.set(__self__, "is_auto_commit", is_auto_commit)
        if repo_id is not None:
            pulumi.set(__self__, "repo_id", repo_id)
        if security_token is not None:
            pulumi.set(__self__, "security_token", security_token)

    @_builtins.property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the callback URL.
        """
        return pulumi.get(self, "callback_url")

    @callback_url.setter
    def callback_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "callback_url", value)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the code source endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_id", value)

    @_builtins.property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTriggerEventArgs']]]]:
        """
        Specifies the trigger event list.
        The events structure is documented below.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTriggerEventArgs']]]]):
        pulumi.set(self, "events", value)

    @_builtins.property
    @pulumi.getter(name="gitType")
    def git_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Git repository type. The options include **CodeHub**, **Gitee**,
        **GitHub**, **GitCode**, and **GitLab**.
        """
        return pulumi.get(self, "git_type")

    @git_type.setter
    def git_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_type", value)

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Git URL.
        """
        return pulumi.get(self, "git_url")

    @git_url.setter
    def git_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_url", value)

    @_builtins.property
    @pulumi.getter(name="hookId")
    def hook_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the callback ID.
        """
        return pulumi.get(self, "hook_id")

    @hook_id.setter
    def hook_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hook_id", value)

    @_builtins.property
    @pulumi.getter(name="isAutoCommit")
    def is_auto_commit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to automatically commit code. Defaults to **false**.
        """
        return pulumi.get(self, "is_auto_commit")

    @is_auto_commit.setter
    def is_auto_commit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_auto_commit", value)

    @_builtins.property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the repository ID.
        """
        return pulumi.get(self, "repo_id")

    @repo_id.setter
    def repo_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repo_id", value)

    @_builtins.property
    @pulumi.getter(name="securityToken")
    def security_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the User token.

        <a name="block--triggers--events"></a>
        The `events` block supports:
        """
        return pulumi.get(self, "security_token")

    @security_token.setter
    def security_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_token", value)


if not MYPY:
    class PipelineTriggerEventArgsDict(TypedDict):
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether it is available. Defaults to **false**.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter type.
        Value can be as follows:
        + **autoIncrement**: auto-increment parameter
        + **enum**: enumeration parameter
        + **string**: character string parameter
        """
elif False:
    PipelineTriggerEventArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineTriggerEventArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] enable: Specifies whether it is available. Defaults to **false**.
        :param pulumi.Input[_builtins.str] type: Specifies the custom parameter type.
               Value can be as follows:
               + **autoIncrement**: auto-increment parameter
               + **enum**: enumeration parameter
               + **string**: character string parameter
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it is available. Defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter type.
        Value can be as follows:
        + **autoIncrement**: auto-increment parameter
        + **enum**: enumeration parameter
        + **string**: character string parameter
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class PipelineVariableArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter description.
        """
        is_reset: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to reset. Defaults to **false**.
        """
        is_runtime: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to set parameters at runtime. Defaults to **false**.
        """
        is_secret: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether it is a private parameter. Defaults to **false**.
        """
        latest_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the last parameter value.
        """
        limits: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the list of enumerated values.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom variable name. The value can contain a maximum of **32** characters.
        """
        runtime_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value passed in at runtime.
        """
        sequence: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the parameter sequence, starting from **1**.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter type.
        Value can be as follows:
        + **autoIncrement**: auto-increment parameter
        + **enum**: enumeration parameter
        + **string**: character string parameter
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the custom parameter default value.
        """
elif False:
    PipelineVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineVariableArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 is_reset: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_runtime: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_secret: Optional[pulumi.Input[_builtins.bool]] = None,
                 latest_value: Optional[pulumi.Input[_builtins.str]] = None,
                 limits: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_value: Optional[pulumi.Input[_builtins.str]] = None,
                 sequence: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] description: Specifies the parameter description.
        :param pulumi.Input[_builtins.bool] is_reset: Specifies whether to reset. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] is_runtime: Specifies whether to set parameters at runtime. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] is_secret: Specifies whether it is a private parameter. Defaults to **false**.
        :param pulumi.Input[_builtins.str] latest_value: Specifies the last parameter value.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] limits: Specifies the list of enumerated values.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name. The value can contain a maximum of **32** characters.
        :param pulumi.Input[_builtins.str] runtime_value: Specifies the value passed in at runtime.
        :param pulumi.Input[_builtins.int] sequence: Specifies the parameter sequence, starting from **1**.
        :param pulumi.Input[_builtins.str] type: Specifies the custom parameter type.
               Value can be as follows:
               + **autoIncrement**: auto-increment parameter
               + **enum**: enumeration parameter
               + **string**: character string parameter
        :param pulumi.Input[_builtins.str] value: Specifies the custom parameter default value.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_reset is not None:
            pulumi.set(__self__, "is_reset", is_reset)
        if is_runtime is not None:
            pulumi.set(__self__, "is_runtime", is_runtime)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if latest_value is not None:
            pulumi.set(__self__, "latest_value", latest_value)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if runtime_value is not None:
            pulumi.set(__self__, "runtime_value", runtime_value)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="isReset")
    def is_reset(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to reset. Defaults to **false**.
        """
        return pulumi.get(self, "is_reset")

    @is_reset.setter
    def is_reset(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_reset", value)

    @_builtins.property
    @pulumi.getter(name="isRuntime")
    def is_runtime(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to set parameters at runtime. Defaults to **false**.
        """
        return pulumi.get(self, "is_runtime")

    @is_runtime.setter
    def is_runtime(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_runtime", value)

    @_builtins.property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it is a private parameter. Defaults to **false**.
        """
        return pulumi.get(self, "is_secret")

    @is_secret.setter
    def is_secret(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_secret", value)

    @_builtins.property
    @pulumi.getter(name="latestValue")
    def latest_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the last parameter value.
        """
        return pulumi.get(self, "latest_value")

    @latest_value.setter
    def latest_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "latest_value", value)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of enumerated values.
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "limits", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom variable name. The value can contain a maximum of **32** characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="runtimeValue")
    def runtime_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value passed in at runtime.
        """
        return pulumi.get(self, "runtime_value")

    @runtime_value.setter
    def runtime_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "runtime_value", value)

    @_builtins.property
    @pulumi.getter
    def sequence(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the parameter sequence, starting from **1**.
        """
        return pulumi.get(self, "sequence")

    @sequence.setter
    def sequence(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sequence", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter type.
        Value can be as follows:
        + **autoIncrement**: auto-increment parameter
        + **enum**: enumeration parameter
        + **string**: character string parameter
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom parameter default value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


