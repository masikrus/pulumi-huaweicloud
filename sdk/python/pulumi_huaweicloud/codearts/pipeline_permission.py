# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PipelinePermissionArgs', 'PipelinePermission']

@pulumi.input_type
class PipelinePermissionArgs:
    def __init__(__self__, *,
                 pipeline_id: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 operation_authorize: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_execute: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_query: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.int]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PipelinePermission resource.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.bool] operation_authorize: Specifies whether the role has the permission to authorize.
               Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_delete: Specifies whether the role has the permission to delete. Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_execute: Specifies whether the role has the permission to execute. Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_query: Specifies whether the role has the permission to query. Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_update: Specifies whether the role has the permission to update. Default to **fasle**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] role_id: Specifies the role ID.
        :param pulumi.Input[_builtins.str] user_id: Specifies the user ID.
               
               > Only one of `role_id` and `user_id` can be specified.
        """
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "project_id", project_id)
        if operation_authorize is not None:
            pulumi.set(__self__, "operation_authorize", operation_authorize)
        if operation_delete is not None:
            pulumi.set(__self__, "operation_delete", operation_delete)
        if operation_execute is not None:
            pulumi.set(__self__, "operation_execute", operation_execute)
        if operation_query is not None:
            pulumi.set(__self__, "operation_query", operation_query)
        if operation_update is not None:
            pulumi.set(__self__, "operation_update", operation_update)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CodeArts project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="operationAuthorize")
    def operation_authorize(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the role has the permission to authorize.
        Default to **fasle**.
        """
        return pulumi.get(self, "operation_authorize")

    @operation_authorize.setter
    def operation_authorize(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_authorize", value)

    @_builtins.property
    @pulumi.getter(name="operationDelete")
    def operation_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the role has the permission to delete. Default to **fasle**.
        """
        return pulumi.get(self, "operation_delete")

    @operation_delete.setter
    def operation_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_delete", value)

    @_builtins.property
    @pulumi.getter(name="operationExecute")
    def operation_execute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the role has the permission to execute. Default to **fasle**.
        """
        return pulumi.get(self, "operation_execute")

    @operation_execute.setter
    def operation_execute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_execute", value)

    @_builtins.property
    @pulumi.getter(name="operationQuery")
    def operation_query(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the role has the permission to query. Default to **fasle**.
        """
        return pulumi.get(self, "operation_query")

    @operation_query.setter
    def operation_query(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_query", value)

    @_builtins.property
    @pulumi.getter(name="operationUpdate")
    def operation_update(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the role has the permission to update. Default to **fasle**.
        """
        return pulumi.get(self, "operation_update")

    @operation_update.setter
    def operation_update(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_update", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the role ID.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user ID.

        > Only one of `role_id` and `user_id` can be specified.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class _PipelinePermissionState:
    def __init__(__self__, *,
                 operation_authorize: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_execute: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_query: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.int]] = None,
                 role_name: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PipelinePermission resources.
        :param pulumi.Input[_builtins.bool] operation_authorize: Specifies whether the role has the permission to authorize.
               Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_delete: Specifies whether the role has the permission to delete. Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_execute: Specifies whether the role has the permission to execute. Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_query: Specifies whether the role has the permission to query. Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_update: Specifies whether the role has the permission to update. Default to **fasle**.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] role_id: Specifies the role ID.
        :param pulumi.Input[_builtins.str] role_name: Indicates the role name.
        :param pulumi.Input[_builtins.str] user_id: Specifies the user ID.
               
               > Only one of `role_id` and `user_id` can be specified.
        :param pulumi.Input[_builtins.str] user_name: Indicates the user name.
        """
        if operation_authorize is not None:
            pulumi.set(__self__, "operation_authorize", operation_authorize)
        if operation_delete is not None:
            pulumi.set(__self__, "operation_delete", operation_delete)
        if operation_execute is not None:
            pulumi.set(__self__, "operation_execute", operation_execute)
        if operation_query is not None:
            pulumi.set(__self__, "operation_query", operation_query)
        if operation_update is not None:
            pulumi.set(__self__, "operation_update", operation_update)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="operationAuthorize")
    def operation_authorize(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the role has the permission to authorize.
        Default to **fasle**.
        """
        return pulumi.get(self, "operation_authorize")

    @operation_authorize.setter
    def operation_authorize(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_authorize", value)

    @_builtins.property
    @pulumi.getter(name="operationDelete")
    def operation_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the role has the permission to delete. Default to **fasle**.
        """
        return pulumi.get(self, "operation_delete")

    @operation_delete.setter
    def operation_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_delete", value)

    @_builtins.property
    @pulumi.getter(name="operationExecute")
    def operation_execute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the role has the permission to execute. Default to **fasle**.
        """
        return pulumi.get(self, "operation_execute")

    @operation_execute.setter
    def operation_execute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_execute", value)

    @_builtins.property
    @pulumi.getter(name="operationQuery")
    def operation_query(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the role has the permission to query. Default to **fasle**.
        """
        return pulumi.get(self, "operation_query")

    @operation_query.setter
    def operation_query(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_query", value)

    @_builtins.property
    @pulumi.getter(name="operationUpdate")
    def operation_update(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the role has the permission to update. Default to **fasle**.
        """
        return pulumi.get(self, "operation_update")

    @operation_update.setter
    def operation_update(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "operation_update", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CodeArts project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the role ID.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_name", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user ID.

        > Only one of `role_id` and `user_id` can be specified.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the user name.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


@pulumi.type_token("huaweicloud:codearts/pipelinePermission:PipelinePermission")
class PipelinePermission(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 operation_authorize: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_execute: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_query: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.int]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts pipeline permission resource within HuaweiCloud.

        ## Example Usage

        ### Modify user permission

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        user_id = config.require_object("userId")
        user = huaweicloud.codearts.PipelinePermission("user",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            user_id=user_id,
            operation_delete=True,
            operation_execute=True,
            operation_query=True,
            operation_update=True)
        ```

        ### Modify role permission

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        role_id = config.require_object("roleId")
        role = huaweicloud.codearts.PipelinePermission("role",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            role_id=role_id,
            operation_delete=True,
            operation_execute=True,
            operation_query=True,
            operation_update=True)
        ```

        ## Import

        ### Import user permission

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipelinePermission:PipelinePermission test <project_id>/<pipeline_id>/user/<user_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] operation_authorize: Specifies whether the role has the permission to authorize.
               Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_delete: Specifies whether the role has the permission to delete. Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_execute: Specifies whether the role has the permission to execute. Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_query: Specifies whether the role has the permission to query. Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_update: Specifies whether the role has the permission to update. Default to **fasle**.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] role_id: Specifies the role ID.
        :param pulumi.Input[_builtins.str] user_id: Specifies the user ID.
               
               > Only one of `role_id` and `user_id` can be specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelinePermissionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts pipeline permission resource within HuaweiCloud.

        ## Example Usage

        ### Modify user permission

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        user_id = config.require_object("userId")
        user = huaweicloud.codearts.PipelinePermission("user",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            user_id=user_id,
            operation_delete=True,
            operation_execute=True,
            operation_query=True,
            operation_update=True)
        ```

        ### Modify role permission

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        pipeline_id = config.require_object("pipelineId")
        role_id = config.require_object("roleId")
        role = huaweicloud.codearts.PipelinePermission("role",
            project_id=codearts_project_id,
            pipeline_id=pipeline_id,
            role_id=role_id,
            operation_delete=True,
            operation_execute=True,
            operation_query=True,
            operation_update=True)
        ```

        ## Import

        ### Import user permission

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipelinePermission:PipelinePermission test <project_id>/<pipeline_id>/user/<user_id>
        ```

        :param str resource_name: The name of the resource.
        :param PipelinePermissionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelinePermissionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 operation_authorize: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_execute: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_query: Optional[pulumi.Input[_builtins.bool]] = None,
                 operation_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.int]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelinePermissionArgs.__new__(PipelinePermissionArgs)

            __props__.__dict__["operation_authorize"] = operation_authorize
            __props__.__dict__["operation_delete"] = operation_delete
            __props__.__dict__["operation_execute"] = operation_execute
            __props__.__dict__["operation_query"] = operation_query
            __props__.__dict__["operation_update"] = operation_update
            if pipeline_id is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_id'")
            __props__.__dict__["pipeline_id"] = pipeline_id
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["region"] = region
            __props__.__dict__["role_id"] = role_id
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["role_name"] = None
            __props__.__dict__["user_name"] = None
        super(PipelinePermission, __self__).__init__(
            'huaweicloud:codearts/pipelinePermission:PipelinePermission',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            operation_authorize: Optional[pulumi.Input[_builtins.bool]] = None,
            operation_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            operation_execute: Optional[pulumi.Input[_builtins.bool]] = None,
            operation_query: Optional[pulumi.Input[_builtins.bool]] = None,
            operation_update: Optional[pulumi.Input[_builtins.bool]] = None,
            pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            role_id: Optional[pulumi.Input[_builtins.int]] = None,
            role_name: Optional[pulumi.Input[_builtins.str]] = None,
            user_id: Optional[pulumi.Input[_builtins.str]] = None,
            user_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'PipelinePermission':
        """
        Get an existing PipelinePermission resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] operation_authorize: Specifies whether the role has the permission to authorize.
               Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_delete: Specifies whether the role has the permission to delete. Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_execute: Specifies whether the role has the permission to execute. Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_query: Specifies whether the role has the permission to query. Default to **fasle**.
        :param pulumi.Input[_builtins.bool] operation_update: Specifies whether the role has the permission to update. Default to **fasle**.
        :param pulumi.Input[_builtins.str] pipeline_id: Specifies the pipeline ID.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] role_id: Specifies the role ID.
        :param pulumi.Input[_builtins.str] role_name: Indicates the role name.
        :param pulumi.Input[_builtins.str] user_id: Specifies the user ID.
               
               > Only one of `role_id` and `user_id` can be specified.
        :param pulumi.Input[_builtins.str] user_name: Indicates the user name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelinePermissionState.__new__(_PipelinePermissionState)

        __props__.__dict__["operation_authorize"] = operation_authorize
        __props__.__dict__["operation_delete"] = operation_delete
        __props__.__dict__["operation_execute"] = operation_execute
        __props__.__dict__["operation_query"] = operation_query
        __props__.__dict__["operation_update"] = operation_update
        __props__.__dict__["pipeline_id"] = pipeline_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["role_name"] = role_name
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["user_name"] = user_name
        return PipelinePermission(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="operationAuthorize")
    def operation_authorize(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the role has the permission to authorize.
        Default to **fasle**.
        """
        return pulumi.get(self, "operation_authorize")

    @_builtins.property
    @pulumi.getter(name="operationDelete")
    def operation_delete(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the role has the permission to delete. Default to **fasle**.
        """
        return pulumi.get(self, "operation_delete")

    @_builtins.property
    @pulumi.getter(name="operationExecute")
    def operation_execute(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the role has the permission to execute. Default to **fasle**.
        """
        return pulumi.get(self, "operation_execute")

    @_builtins.property
    @pulumi.getter(name="operationQuery")
    def operation_query(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the role has the permission to query. Default to **fasle**.
        """
        return pulumi.get(self, "operation_query")

    @_builtins.property
    @pulumi.getter(name="operationUpdate")
    def operation_update(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the role has the permission to update. Default to **fasle**.
        """
        return pulumi.get(self, "operation_update")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CodeArts project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the role ID.
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the role name.
        """
        return pulumi.get(self, "role_name")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the user ID.

        > Only one of `role_id` and `user_id` can be specified.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the user name.
        """
        return pulumi.get(self, "user_name")

