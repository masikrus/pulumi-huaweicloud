# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPipelineTemplatesResult',
    'AwaitableGetPipelineTemplatesResult',
    'get_pipeline_templates',
    'get_pipeline_templates_output',
]

@pulumi.output_type
class GetPipelineTemplatesResult:
    """
    A collection of values returned by getPipelineTemplates.
    """
    def __init__(__self__, id=None, is_system=None, language=None, name=None, region=None, sort_dir=None, sort_key=None, templates=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_system and not isinstance(is_system, bool):
            raise TypeError("Expected argument 'is_system' to be a bool")
        pulumi.set(__self__, "is_system", is_system)
        if language and not isinstance(language, str):
            raise TypeError("Expected argument 'language' to be a str")
        pulumi.set(__self__, "language", language)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if templates and not isinstance(templates, list):
            raise TypeError("Expected argument 'templates' to be a list")
        pulumi.set(__self__, "templates", templates)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the template is a system template.
        """
        return pulumi.get(self, "is_system")

    @_builtins.property
    @pulumi.getter
    def language(self) -> Optional[_builtins.str]:
        """
        Indicates the template language.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the stage name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetPipelineTemplatesTemplateResult']:
        """
        Indicates the template list.
        The templates structure is documented below.
        """
        return pulumi.get(self, "templates")


class AwaitableGetPipelineTemplatesResult(GetPipelineTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelineTemplatesResult(
            id=self.id,
            is_system=self.is_system,
            language=self.language,
            name=self.name,
            region=self.region,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            templates=self.templates)


def get_pipeline_templates(is_system: Optional[_builtins.bool] = None,
                           language: Optional[_builtins.str] = None,
                           name: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           sort_dir: Optional[_builtins.str] = None,
                           sort_key: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPipelineTemplatesResult:
    """
    Use this data source to get a list of CodeArts pipeline templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.codearts.get_pipeline_templates()
    ```


    :param _builtins.bool is_system: Specifies whether the template is a system template. Default to **false**.
    :param _builtins.str language: Specifies the template language. Value can be **Java**, **Python**, **Node.js**,
           **Go**, **.NET**, **CPP**, **PHP**, **other**, and **none**.
    :param _builtins.str name: Specifies the template name.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sorting sequence. Value can be **asc** and **desc**.
    :param _builtins.str sort_key: Specifies the sorting attribute. Value can be **name** and **create_time**.
    """
    __args__ = dict()
    __args__['isSystem'] = is_system
    __args__['language'] = language
    __args__['name'] = name
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getPipelineTemplates:getPipelineTemplates', __args__, opts=opts, typ=GetPipelineTemplatesResult).value

    return AwaitableGetPipelineTemplatesResult(
        id=pulumi.get(__ret__, 'id'),
        is_system=pulumi.get(__ret__, 'is_system'),
        language=pulumi.get(__ret__, 'language'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        templates=pulumi.get(__ret__, 'templates'))
def get_pipeline_templates_output(is_system: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                  language: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPipelineTemplatesResult]:
    """
    Use this data source to get a list of CodeArts pipeline templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.codearts.get_pipeline_templates()
    ```


    :param _builtins.bool is_system: Specifies whether the template is a system template. Default to **false**.
    :param _builtins.str language: Specifies the template language. Value can be **Java**, **Python**, **Node.js**,
           **Go**, **.NET**, **CPP**, **PHP**, **other**, and **none**.
    :param _builtins.str name: Specifies the template name.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sorting sequence. Value can be **asc** and **desc**.
    :param _builtins.str sort_key: Specifies the sorting attribute. Value can be **name** and **create_time**.
    """
    __args__ = dict()
    __args__['isSystem'] = is_system
    __args__['language'] = language
    __args__['name'] = name
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getPipelineTemplates:getPipelineTemplates', __args__, opts=opts, typ=GetPipelineTemplatesResult)
    return __ret__.apply(lambda __response__: GetPipelineTemplatesResult(
        id=pulumi.get(__response__, 'id'),
        is_system=pulumi.get(__response__, 'is_system'),
        language=pulumi.get(__response__, 'language'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        templates=pulumi.get(__response__, 'templates')))
