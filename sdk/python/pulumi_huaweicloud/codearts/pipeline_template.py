# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PipelineTemplateArgs', 'PipelineTemplate']

@pulumi.input_type
class PipelineTemplateArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[_builtins.str],
                 is_show_source: pulumi.Input[_builtins.bool],
                 language: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTemplateVariableArgs']]]] = None):
        """
        The set of arguments for constructing a PipelineTemplate resource.
        :param pulumi.Input[_builtins.str] definition: Specifies the template definition JSON.
        :param pulumi.Input[_builtins.bool] is_show_source: Specifies whether to display the pipeline source.
        :param pulumi.Input[_builtins.str] language: Specifies the template language.
        :param pulumi.Input[_builtins.str] description: Specifies the parameter description.
        :param pulumi.Input[_builtins.bool] is_favorite: Specifies whether it is a favorite template. Defaults to **false**.
               
               <a name="variables_struct"></a>
               The `variables` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineTemplateVariableArgs']]] variables: Specifies the custom variables.
               The variables structure is documented below.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "is_show_source", is_show_source)
        pulumi.set(__self__, "language", language)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def definition(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the template definition JSON.
        """
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "definition", value)

    @_builtins.property
    @pulumi.getter(name="isShowSource")
    def is_show_source(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether to display the pipeline source.
        """
        return pulumi.get(self, "is_show_source")

    @is_show_source.setter
    def is_show_source(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "is_show_source", value)

    @_builtins.property
    @pulumi.getter
    def language(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the template language.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "language", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it is a favorite template. Defaults to **false**.

        <a name="variables_struct"></a>
        The `variables` block supports:
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_favorite", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom variable name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTemplateVariableArgs']]]]:
        """
        Specifies the custom variables.
        The variables structure is documented below.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTemplateVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class _PipelineTemplateState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[_builtins.int]] = None,
                 creator_id: Optional[pulumi.Input[_builtins.str]] = None,
                 definition: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 icon: Optional[pulumi.Input[_builtins.str]] = None,
                 is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_show_source: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_system: Optional[pulumi.Input[_builtins.bool]] = None,
                 language: Optional[pulumi.Input[_builtins.str]] = None,
                 manifest_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 update_time: Optional[pulumi.Input[_builtins.int]] = None,
                 updater_id: Optional[pulumi.Input[_builtins.str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTemplateVariableArgs']]]] = None):
        """
        Input properties used for looking up and filtering PipelineTemplate resources.
        :param pulumi.Input[_builtins.int] create_time: Indicates the creation time.
        :param pulumi.Input[_builtins.str] creator_id: Indicates the creator.
        :param pulumi.Input[_builtins.str] definition: Specifies the template definition JSON.
        :param pulumi.Input[_builtins.str] description: Specifies the parameter description.
        :param pulumi.Input[_builtins.str] icon: Indicates the template icon.
        :param pulumi.Input[_builtins.bool] is_favorite: Specifies whether it is a favorite template. Defaults to **false**.
               
               <a name="variables_struct"></a>
               The `variables` block supports:
        :param pulumi.Input[_builtins.bool] is_show_source: Specifies whether to display the pipeline source.
        :param pulumi.Input[_builtins.bool] is_system: Indicates whether it is a system template.
        :param pulumi.Input[_builtins.str] language: Specifies the template language.
        :param pulumi.Input[_builtins.str] manifest_version: Indicates the manifest version.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] update_time: Indicates the last update time.
        :param pulumi.Input[_builtins.str] updater_id: Indicates the last updater.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineTemplateVariableArgs']]] variables: Specifies the custom variables.
               The variables structure is documented below.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator_id is not None:
            pulumi.set(__self__, "creator_id", creator_id)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if is_show_source is not None:
            pulumi.set(__self__, "is_show_source", is_show_source)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if manifest_version is not None:
            pulumi.set(__self__, "manifest_version", manifest_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if updater_id is not None:
            pulumi.set(__self__, "updater_id", updater_id)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creator.
        """
        return pulumi.get(self, "creator_id")

    @creator_id.setter
    def creator_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creator_id", value)

    @_builtins.property
    @pulumi.getter
    def definition(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template definition JSON.
        """
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "definition", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the template icon.
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icon", value)

    @_builtins.property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it is a favorite template. Defaults to **false**.

        <a name="variables_struct"></a>
        The `variables` block supports:
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_favorite", value)

    @_builtins.property
    @pulumi.getter(name="isShowSource")
    def is_show_source(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to display the pipeline source.
        """
        return pulumi.get(self, "is_show_source")

    @is_show_source.setter
    def is_show_source(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_show_source", value)

    @_builtins.property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether it is a system template.
        """
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_system", value)

    @_builtins.property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template language.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "language", value)

    @_builtins.property
    @pulumi.getter(name="manifestVersion")
    def manifest_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the manifest version.
        """
        return pulumi.get(self, "manifest_version")

    @manifest_version.setter
    def manifest_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "manifest_version", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom variable name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the last update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "update_time", value)

    @_builtins.property
    @pulumi.getter(name="updaterId")
    def updater_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the last updater.
        """
        return pulumi.get(self, "updater_id")

    @updater_id.setter
    def updater_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updater_id", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTemplateVariableArgs']]]]:
        """
        Specifies the custom variables.
        The variables structure is documented below.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineTemplateVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.type_token("huaweicloud:codearts/pipelineTemplate:PipelineTemplate")
class PipelineTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 definition: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_show_source: Optional[pulumi.Input[_builtins.bool]] = None,
                 language: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineTemplateVariableArgs', 'PipelineTemplateVariableArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a CodeArts pipeline template resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        test = huaweicloud.codearts.PipelineTemplate("test",
            name=name,
            language="none",
            is_show_source=True,
            description="test description",
            is_favorite=True,
            definition=json.dumps({
                "stages": [{
                    "name": "Stage_1",
                    "sequence": "0",
                    "jobs": [{
                        "stage_id": xxx,
                        "identifier": "xxx",
                        "name": "CodeCheck",
                        "depends_on": [],
                        "timeout": "",
                        "timeout_unit": "",
                        "steps": [{
                            "name": "CodeCheck",
                            "task": "official_devcloud_codeCheck_template",
                            "sequence": 0,
                            "inputs": [
                                {
                                    "key": "language",
                                    "value": "Java",
                                },
                                {
                                    "key": "module_or_template_id",
                                    "value": "xxx",
                                },
                            ],
                            "business_type": "Gate",
                            "runtime_attribution": "agent",
                            "identifier": "xxx",
                            "multi_step_editable": 0,
                            "official_task_version": "0.0.1",
                        }],
                        "resource": "{\\"type\\":\\"system\\",\\"arch\\":\\"x86\\"}",
                        "condition": "${{ completed() }}",
                        "exec_type": "OCTOPUS_JOB",
                        "sequence": 0,
                    }],
                    "identifier": "xxx",
                    "pre": [{
                        "task": "official_devcloud_autoTrigger",
                        "sequence": 0,
                    }],
                    "post": None,
                    "depends_on": [],
                    "run_always": False,
                }],
            }),
            variables=[{
                "sequence": 1,
                "name": "test_var",
                "type": "string",
                "value": "test_value",
                "description": "test variable",
                "is_runtime": True,
            }])
        ```

        ## Import

        The pipeline template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipelineTemplate:PipelineTemplate test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `is_favorite`.

        It is generally recommended running `pulumi preview` after importing the template.

        You can then decide if changes should be applied to the template, or the resource definition should be updated to

        align with the template. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_codearts_pipeline_template" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              is_favorite,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] definition: Specifies the template definition JSON.
        :param pulumi.Input[_builtins.str] description: Specifies the parameter description.
        :param pulumi.Input[_builtins.bool] is_favorite: Specifies whether it is a favorite template. Defaults to **false**.
               
               <a name="variables_struct"></a>
               The `variables` block supports:
        :param pulumi.Input[_builtins.bool] is_show_source: Specifies whether to display the pipeline source.
        :param pulumi.Input[_builtins.str] language: Specifies the template language.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineTemplateVariableArgs', 'PipelineTemplateVariableArgsDict']]]] variables: Specifies the custom variables.
               The variables structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelineTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts pipeline template resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        test = huaweicloud.codearts.PipelineTemplate("test",
            name=name,
            language="none",
            is_show_source=True,
            description="test description",
            is_favorite=True,
            definition=json.dumps({
                "stages": [{
                    "name": "Stage_1",
                    "sequence": "0",
                    "jobs": [{
                        "stage_id": xxx,
                        "identifier": "xxx",
                        "name": "CodeCheck",
                        "depends_on": [],
                        "timeout": "",
                        "timeout_unit": "",
                        "steps": [{
                            "name": "CodeCheck",
                            "task": "official_devcloud_codeCheck_template",
                            "sequence": 0,
                            "inputs": [
                                {
                                    "key": "language",
                                    "value": "Java",
                                },
                                {
                                    "key": "module_or_template_id",
                                    "value": "xxx",
                                },
                            ],
                            "business_type": "Gate",
                            "runtime_attribution": "agent",
                            "identifier": "xxx",
                            "multi_step_editable": 0,
                            "official_task_version": "0.0.1",
                        }],
                        "resource": "{\\"type\\":\\"system\\",\\"arch\\":\\"x86\\"}",
                        "condition": "${{ completed() }}",
                        "exec_type": "OCTOPUS_JOB",
                        "sequence": 0,
                    }],
                    "identifier": "xxx",
                    "pre": [{
                        "task": "official_devcloud_autoTrigger",
                        "sequence": 0,
                    }],
                    "post": None,
                    "depends_on": [],
                    "run_always": False,
                }],
            }),
            variables=[{
                "sequence": 1,
                "name": "test_var",
                "type": "string",
                "value": "test_value",
                "description": "test variable",
                "is_runtime": True,
            }])
        ```

        ## Import

        The pipeline template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/pipelineTemplate:PipelineTemplate test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `is_favorite`.

        It is generally recommended running `pulumi preview` after importing the template.

        You can then decide if changes should be applied to the template, or the resource definition should be updated to

        align with the template. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_codearts_pipeline_template" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              is_favorite,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param PipelineTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelineTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 definition: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_show_source: Optional[pulumi.Input[_builtins.bool]] = None,
                 language: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineTemplateVariableArgs', 'PipelineTemplateVariableArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelineTemplateArgs.__new__(PipelineTemplateArgs)

            if definition is None and not opts.urn:
                raise TypeError("Missing required property 'definition'")
            __props__.__dict__["definition"] = definition
            __props__.__dict__["description"] = description
            __props__.__dict__["is_favorite"] = is_favorite
            if is_show_source is None and not opts.urn:
                raise TypeError("Missing required property 'is_show_source'")
            __props__.__dict__["is_show_source"] = is_show_source
            if language is None and not opts.urn:
                raise TypeError("Missing required property 'language'")
            __props__.__dict__["language"] = language
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["variables"] = variables
            __props__.__dict__["create_time"] = None
            __props__.__dict__["creator_id"] = None
            __props__.__dict__["icon"] = None
            __props__.__dict__["is_system"] = None
            __props__.__dict__["manifest_version"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["updater_id"] = None
        super(PipelineTemplate, __self__).__init__(
            'huaweicloud:codearts/pipelineTemplate:PipelineTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[_builtins.int]] = None,
            creator_id: Optional[pulumi.Input[_builtins.str]] = None,
            definition: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            icon: Optional[pulumi.Input[_builtins.str]] = None,
            is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
            is_show_source: Optional[pulumi.Input[_builtins.bool]] = None,
            is_system: Optional[pulumi.Input[_builtins.bool]] = None,
            language: Optional[pulumi.Input[_builtins.str]] = None,
            manifest_version: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            update_time: Optional[pulumi.Input[_builtins.int]] = None,
            updater_id: Optional[pulumi.Input[_builtins.str]] = None,
            variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineTemplateVariableArgs', 'PipelineTemplateVariableArgsDict']]]]] = None) -> 'PipelineTemplate':
        """
        Get an existing PipelineTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] create_time: Indicates the creation time.
        :param pulumi.Input[_builtins.str] creator_id: Indicates the creator.
        :param pulumi.Input[_builtins.str] definition: Specifies the template definition JSON.
        :param pulumi.Input[_builtins.str] description: Specifies the parameter description.
        :param pulumi.Input[_builtins.str] icon: Indicates the template icon.
        :param pulumi.Input[_builtins.bool] is_favorite: Specifies whether it is a favorite template. Defaults to **false**.
               
               <a name="variables_struct"></a>
               The `variables` block supports:
        :param pulumi.Input[_builtins.bool] is_show_source: Specifies whether to display the pipeline source.
        :param pulumi.Input[_builtins.bool] is_system: Indicates whether it is a system template.
        :param pulumi.Input[_builtins.str] language: Specifies the template language.
        :param pulumi.Input[_builtins.str] manifest_version: Indicates the manifest version.
        :param pulumi.Input[_builtins.str] name: Specifies the custom variable name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] update_time: Indicates the last update time.
        :param pulumi.Input[_builtins.str] updater_id: Indicates the last updater.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PipelineTemplateVariableArgs', 'PipelineTemplateVariableArgsDict']]]] variables: Specifies the custom variables.
               The variables structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelineTemplateState.__new__(_PipelineTemplateState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["creator_id"] = creator_id
        __props__.__dict__["definition"] = definition
        __props__.__dict__["description"] = description
        __props__.__dict__["icon"] = icon
        __props__.__dict__["is_favorite"] = is_favorite
        __props__.__dict__["is_show_source"] = is_show_source
        __props__.__dict__["is_system"] = is_system
        __props__.__dict__["language"] = language
        __props__.__dict__["manifest_version"] = manifest_version
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["updater_id"] = updater_id
        __props__.__dict__["variables"] = variables
        return PipelineTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creator.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter
    def definition(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the template definition JSON.
        """
        return pulumi.get(self, "definition")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the parameter description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def icon(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the template icon.
        """
        return pulumi.get(self, "icon")

    @_builtins.property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether it is a favorite template. Defaults to **false**.

        <a name="variables_struct"></a>
        The `variables` block supports:
        """
        return pulumi.get(self, "is_favorite")

    @_builtins.property
    @pulumi.getter(name="isShowSource")
    def is_show_source(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to display the pipeline source.
        """
        return pulumi.get(self, "is_show_source")

    @_builtins.property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether it is a system template.
        """
        return pulumi.get(self, "is_system")

    @_builtins.property
    @pulumi.getter
    def language(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the template language.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter(name="manifestVersion")
    def manifest_version(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the manifest version.
        """
        return pulumi.get(self, "manifest_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the custom variable name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the last update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="updaterId")
    def updater_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the last updater.
        """
        return pulumi.get(self, "updater_id")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> pulumi.Output[Optional[Sequence['outputs.PipelineTemplateVariable']]]:
        """
        Specifies the custom variables.
        The variables structure is documented below.
        """
        return pulumi.get(self, "variables")

