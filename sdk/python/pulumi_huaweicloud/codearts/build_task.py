# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BuildTaskArgs', 'BuildTask']

@pulumi.input_type
class BuildTaskArgs:
    def __init__(__self__, *,
                 arch: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 auto_update_sub_module: Optional[pulumi.Input[_builtins.str]] = None,
                 build_config_type: Optional[pulumi.Input[_builtins.str]] = None,
                 build_if_code_updated: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scms: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskScmArgs']]]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskStepArgs']]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskTriggerArgs']]]] = None):
        """
        The set of arguments for constructing a BuildTask resource.
        :param pulumi.Input[_builtins.str] arch: Specifies the architecture of the build machine.
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] auto_update_sub_module: Specifies whether to automatically update submodules.
        :param pulumi.Input[_builtins.str] build_config_type: Specifies the build task configuration type.
        :param pulumi.Input[_builtins.bool] build_if_code_updated: Specifies whether to enable the code commit trigger build switch.
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] flavor: Specifies the specification of the execution machine.
        :param pulumi.Input[_builtins.str] group_id: Specifies the task group ID.
        :param pulumi.Input[_builtins.str] host_type: Specifies the host type.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterArgs']]] parameters: Specifies the custom parameters.
               The parameters structure is documented below.
               
               <a name="block--triggers--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTaskScmArgs']]] scms: Specifies the build execution SCM.
               The scms structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTaskStepArgs']]] steps: Specifies the build execution steps.
               The steps structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTaskTriggerArgs']]] triggers: Specifies the collection of timed task triggers.
               The triggers structure is documented below.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        """
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "project_id", project_id)
        if auto_update_sub_module is not None:
            pulumi.set(__self__, "auto_update_sub_module", auto_update_sub_module)
        if build_config_type is not None:
            pulumi.set(__self__, "build_config_type", build_config_type)
        if build_if_code_updated is not None:
            pulumi.set(__self__, "build_if_code_updated", build_if_code_updated)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scms is not None:
            pulumi.set(__self__, "scms", scms)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @_builtins.property
    @pulumi.getter
    def arch(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the architecture of the build machine.
        """
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "arch", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CodeArts project ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="autoUpdateSubModule")
    def auto_update_sub_module(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to automatically update submodules.
        """
        return pulumi.get(self, "auto_update_sub_module")

    @auto_update_sub_module.setter
    def auto_update_sub_module(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_update_sub_module", value)

    @_builtins.property
    @pulumi.getter(name="buildConfigType")
    def build_config_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the build task configuration type.
        """
        return pulumi.get(self, "build_config_type")

    @build_config_type.setter
    def build_config_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build_config_type", value)

    @_builtins.property
    @pulumi.getter(name="buildIfCodeUpdated")
    def build_if_code_updated(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the code commit trigger build switch.
        Defaults to **false**.
        """
        return pulumi.get(self, "build_if_code_updated")

    @build_if_code_updated.setter
    def build_if_code_updated(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "build_if_code_updated", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the specification of the execution machine.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the task group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host type.
        """
        return pulumi.get(self, "host_type")

    @host_type.setter
    def host_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterArgs']]]]:
        """
        Specifies the custom parameters.
        The parameters structure is documented below.

        <a name="block--triggers--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def scms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskScmArgs']]]]:
        """
        Specifies the build execution SCM.
        The scms structure is documented below.
        """
        return pulumi.get(self, "scms")

    @scms.setter
    def scms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskScmArgs']]]]):
        pulumi.set(self, "scms", value)

    @_builtins.property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskStepArgs']]]]:
        """
        Specifies the build execution steps.
        The steps structure is documented below.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskStepArgs']]]]):
        pulumi.set(self, "steps", value)

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskTriggerArgs']]]]:
        """
        Specifies the collection of timed task triggers.
        The triggers structure is documented below.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)


@pulumi.input_type
class _BuildTaskState:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_update_sub_module: Optional[pulumi.Input[_builtins.str]] = None,
                 build_config_type: Optional[pulumi.Input[_builtins.str]] = None,
                 build_if_code_updated: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterArgs']]]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scms: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskScmArgs']]]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskStepArgs']]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskTriggerArgs']]]] = None):
        """
        Input properties used for looking up and filtering BuildTask resources.
        :param pulumi.Input[_builtins.str] arch: Specifies the architecture of the build machine.
        :param pulumi.Input[_builtins.str] auto_update_sub_module: Specifies whether to automatically update submodules.
        :param pulumi.Input[_builtins.str] build_config_type: Specifies the build task configuration type.
        :param pulumi.Input[_builtins.bool] build_if_code_updated: Specifies whether to enable the code commit trigger build switch.
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] flavor: Specifies the specification of the execution machine.
        :param pulumi.Input[_builtins.str] group_id: Specifies the task group ID.
        :param pulumi.Input[_builtins.str] host_type: Specifies the host type.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterArgs']]] parameters: Specifies the custom parameters.
               The parameters structure is documented below.
               
               <a name="block--triggers--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTaskScmArgs']]] scms: Specifies the build execution SCM.
               The scms structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTaskStepArgs']]] steps: Specifies the build execution steps.
               The steps structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BuildTaskTriggerArgs']]] triggers: Specifies the collection of timed task triggers.
               The triggers structure is documented below.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        """
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if auto_update_sub_module is not None:
            pulumi.set(__self__, "auto_update_sub_module", auto_update_sub_module)
        if build_config_type is not None:
            pulumi.set(__self__, "build_config_type", build_config_type)
        if build_if_code_updated is not None:
            pulumi.set(__self__, "build_if_code_updated", build_if_code_updated)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scms is not None:
            pulumi.set(__self__, "scms", scms)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @_builtins.property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the architecture of the build machine.
        """
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "arch", value)

    @_builtins.property
    @pulumi.getter(name="autoUpdateSubModule")
    def auto_update_sub_module(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to automatically update submodules.
        """
        return pulumi.get(self, "auto_update_sub_module")

    @auto_update_sub_module.setter
    def auto_update_sub_module(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_update_sub_module", value)

    @_builtins.property
    @pulumi.getter(name="buildConfigType")
    def build_config_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the build task configuration type.
        """
        return pulumi.get(self, "build_config_type")

    @build_config_type.setter
    def build_config_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build_config_type", value)

    @_builtins.property
    @pulumi.getter(name="buildIfCodeUpdated")
    def build_if_code_updated(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the code commit trigger build switch.
        Defaults to **false**.
        """
        return pulumi.get(self, "build_if_code_updated")

    @build_if_code_updated.setter
    def build_if_code_updated(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "build_if_code_updated", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the specification of the execution machine.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the task group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host type.
        """
        return pulumi.get(self, "host_type")

    @host_type.setter
    def host_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterArgs']]]]:
        """
        Specifies the custom parameters.
        The parameters structure is documented below.

        <a name="block--triggers--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CodeArts project ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def scms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskScmArgs']]]]:
        """
        Specifies the build execution SCM.
        The scms structure is documented below.
        """
        return pulumi.get(self, "scms")

    @scms.setter
    def scms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskScmArgs']]]]):
        pulumi.set(self, "scms", value)

    @_builtins.property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskStepArgs']]]]:
        """
        Specifies the build execution steps.
        The steps structure is documented below.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskStepArgs']]]]):
        pulumi.set(self, "steps", value)

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskTriggerArgs']]]]:
        """
        Specifies the collection of timed task triggers.
        The triggers structure is documented below.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildTaskTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)


@pulumi.type_token("huaweicloud:codearts/buildTask:BuildTask")
class BuildTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arch: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_update_sub_module: Optional[pulumi.Input[_builtins.str]] = None,
                 build_config_type: Optional[pulumi.Input[_builtins.str]] = None,
                 build_if_code_updated: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskParameterArgs', 'BuildTaskParameterArgsDict']]]]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scms: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskScmArgs', 'BuildTaskScmArgsDict']]]]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskStepArgs', 'BuildTaskStepArgsDict']]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskTriggerArgs', 'BuildTaskTriggerArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a CodeArts Build task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        name = config.require_object("name")
        url = config.require_object("url")
        web_url = config.require_object("webUrl")
        scm_type = config.require_object("scmType")
        repo_id = config.require_object("repoId")
        test = huaweicloud.codearts.BuildTask("test",
            project_id=codearts_project_id,
            name=name,
            arch="x86-64",
            scms=[{
                "url": url,
                "scm_type": scm_type,
                "web_url": web_url,
                "repo_id": repo_id,
                "branch": "master",
            }])
        ```

        ## Import

        The build task can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/buildTask:BuildTask test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] arch: Specifies the architecture of the build machine.
        :param pulumi.Input[_builtins.str] auto_update_sub_module: Specifies whether to automatically update submodules.
        :param pulumi.Input[_builtins.str] build_config_type: Specifies the build task configuration type.
        :param pulumi.Input[_builtins.bool] build_if_code_updated: Specifies whether to enable the code commit trigger build switch.
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] flavor: Specifies the specification of the execution machine.
        :param pulumi.Input[_builtins.str] group_id: Specifies the task group ID.
        :param pulumi.Input[_builtins.str] host_type: Specifies the host type.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskParameterArgs', 'BuildTaskParameterArgsDict']]]] parameters: Specifies the custom parameters.
               The parameters structure is documented below.
               
               <a name="block--triggers--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskScmArgs', 'BuildTaskScmArgsDict']]]] scms: Specifies the build execution SCM.
               The scms structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskStepArgs', 'BuildTaskStepArgsDict']]]] steps: Specifies the build execution steps.
               The steps structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskTriggerArgs', 'BuildTaskTriggerArgsDict']]]] triggers: Specifies the collection of timed task triggers.
               The triggers structure is documented below.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BuildTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts Build task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        codearts_project_id = config.require_object("codeartsProjectId")
        name = config.require_object("name")
        url = config.require_object("url")
        web_url = config.require_object("webUrl")
        scm_type = config.require_object("scmType")
        repo_id = config.require_object("repoId")
        test = huaweicloud.codearts.BuildTask("test",
            project_id=codearts_project_id,
            name=name,
            arch="x86-64",
            scms=[{
                "url": url,
                "scm_type": scm_type,
                "web_url": web_url,
                "repo_id": repo_id,
                "branch": "master",
            }])
        ```

        ## Import

        The build task can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/buildTask:BuildTask test <id>
        ```

        :param str resource_name: The name of the resource.
        :param BuildTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BuildTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arch: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_update_sub_module: Optional[pulumi.Input[_builtins.str]] = None,
                 build_config_type: Optional[pulumi.Input[_builtins.str]] = None,
                 build_if_code_updated: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskParameterArgs', 'BuildTaskParameterArgsDict']]]]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scms: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskScmArgs', 'BuildTaskScmArgsDict']]]]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskStepArgs', 'BuildTaskStepArgsDict']]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskTriggerArgs', 'BuildTaskTriggerArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BuildTaskArgs.__new__(BuildTaskArgs)

            if arch is None and not opts.urn:
                raise TypeError("Missing required property 'arch'")
            __props__.__dict__["arch"] = arch
            __props__.__dict__["auto_update_sub_module"] = auto_update_sub_module
            __props__.__dict__["build_config_type"] = build_config_type
            __props__.__dict__["build_if_code_updated"] = build_if_code_updated
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["flavor"] = flavor
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["host_type"] = host_type
            __props__.__dict__["name"] = name
            __props__.__dict__["parameters"] = parameters
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["region"] = region
            __props__.__dict__["scms"] = scms
            __props__.__dict__["steps"] = steps
            __props__.__dict__["triggers"] = triggers
        super(BuildTask, __self__).__init__(
            'huaweicloud:codearts/buildTask:BuildTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arch: Optional[pulumi.Input[_builtins.str]] = None,
            auto_update_sub_module: Optional[pulumi.Input[_builtins.str]] = None,
            build_config_type: Optional[pulumi.Input[_builtins.str]] = None,
            build_if_code_updated: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            flavor: Optional[pulumi.Input[_builtins.str]] = None,
            group_id: Optional[pulumi.Input[_builtins.str]] = None,
            host_type: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskParameterArgs', 'BuildTaskParameterArgsDict']]]]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            scms: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskScmArgs', 'BuildTaskScmArgsDict']]]]] = None,
            steps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskStepArgs', 'BuildTaskStepArgsDict']]]]] = None,
            triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskTriggerArgs', 'BuildTaskTriggerArgsDict']]]]] = None) -> 'BuildTask':
        """
        Get an existing BuildTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] arch: Specifies the architecture of the build machine.
        :param pulumi.Input[_builtins.str] auto_update_sub_module: Specifies whether to automatically update submodules.
        :param pulumi.Input[_builtins.str] build_config_type: Specifies the build task configuration type.
        :param pulumi.Input[_builtins.bool] build_if_code_updated: Specifies whether to enable the code commit trigger build switch.
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] flavor: Specifies the specification of the execution machine.
        :param pulumi.Input[_builtins.str] group_id: Specifies the task group ID.
        :param pulumi.Input[_builtins.str] host_type: Specifies the host type.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskParameterArgs', 'BuildTaskParameterArgsDict']]]] parameters: Specifies the custom parameters.
               The parameters structure is documented below.
               
               <a name="block--triggers--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] project_id: Specifies the CodeArts project ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskScmArgs', 'BuildTaskScmArgsDict']]]] scms: Specifies the build execution SCM.
               The scms structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskStepArgs', 'BuildTaskStepArgsDict']]]] steps: Specifies the build execution steps.
               The steps structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildTaskTriggerArgs', 'BuildTaskTriggerArgsDict']]]] triggers: Specifies the collection of timed task triggers.
               The triggers structure is documented below.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BuildTaskState.__new__(_BuildTaskState)

        __props__.__dict__["arch"] = arch
        __props__.__dict__["auto_update_sub_module"] = auto_update_sub_module
        __props__.__dict__["build_config_type"] = build_config_type
        __props__.__dict__["build_if_code_updated"] = build_if_code_updated
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["flavor"] = flavor
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["host_type"] = host_type
        __props__.__dict__["name"] = name
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["scms"] = scms
        __props__.__dict__["steps"] = steps
        __props__.__dict__["triggers"] = triggers
        return BuildTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def arch(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the architecture of the build machine.
        """
        return pulumi.get(self, "arch")

    @_builtins.property
    @pulumi.getter(name="autoUpdateSubModule")
    def auto_update_sub_module(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether to automatically update submodules.
        """
        return pulumi.get(self, "auto_update_sub_module")

    @_builtins.property
    @pulumi.getter(name="buildConfigType")
    def build_config_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the build task configuration type.
        """
        return pulumi.get(self, "build_config_type")

    @_builtins.property
    @pulumi.getter(name="buildIfCodeUpdated")
    def build_if_code_updated(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable the code commit trigger build switch.
        Defaults to **false**.
        """
        return pulumi.get(self, "build_if_code_updated")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the specification of the execution machine.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the task group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="hostType")
    def host_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the host type.
        """
        return pulumi.get(self, "host_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Sequence['outputs.BuildTaskParameter']]]:
        """
        Specifies the custom parameters.
        The parameters structure is documented below.

        <a name="block--triggers--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CodeArts project ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def scms(self) -> pulumi.Output[Optional[Sequence['outputs.BuildTaskScm']]]:
        """
        Specifies the build execution SCM.
        The scms structure is documented below.
        """
        return pulumi.get(self, "scms")

    @_builtins.property
    @pulumi.getter
    def steps(self) -> pulumi.Output[Optional[Sequence['outputs.BuildTaskStep']]]:
        """
        Specifies the build execution steps.
        The steps structure is documented below.
        """
        return pulumi.get(self, "steps")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Optional[Sequence['outputs.BuildTaskTrigger']]]:
        """
        Specifies the collection of timed task triggers.
        The triggers structure is documented below.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "triggers")

