# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeployApplicationDeployArgs', 'DeployApplicationDeploy']

@pulumi.input_type
class DeployApplicationDeployArgs:
    def __init__(__self__, *,
                 task_id: pulumi.Input[_builtins.str],
                 params: Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationDeployParamArgs']]]] = None,
                 record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_source: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DeployApplicationDeploy resource.
        :param pulumi.Input[_builtins.str] task_id: Specifies the deployment task ID.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DeployApplicationDeployParamArgs']]] params: Specifies the parameters transferred during application deployment.
               Changing this creates a new resource.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] record_id: Specifies the deployment record ID of an application. Specifies it to roll
               back the application to the previous deployment status.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] trigger_source: Specifies the trigger source.
               Valid values are as follows:
               + **0**: Deployment can be triggered through all requests.
               + **1**: Deployment can be triggered only through pipeline.
               
               Changing this creates a new resource.
               
               <a name="block--params"></a>
               The `params` block supports:
        """
        pulumi.set(__self__, "task_id", task_id)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if record_id is not None:
            pulumi.set(__self__, "record_id", record_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if trigger_source is not None:
            pulumi.set(__self__, "trigger_source", trigger_source)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the deployment task ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_id", value)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationDeployParamArgs']]]]:
        """
        Specifies the parameters transferred during application deployment.
        Changing this creates a new resource.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationDeployParamArgs']]]]):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the deployment record ID of an application. Specifies it to roll
        back the application to the previous deployment status.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "record_id")

    @record_id.setter
    def record_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "record_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the trigger source.
        Valid values are as follows:
        + **0**: Deployment can be triggered through all requests.
        + **1**: Deployment can be triggered only through pipeline.

        Changing this creates a new resource.

        <a name="block--params"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "trigger_source")

    @trigger_source.setter
    def trigger_source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_source", value)


@pulumi.input_type
class _DeployApplicationDeployState:
    def __init__(__self__, *,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationDeployParamArgs']]]] = None,
                 record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_source: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeployApplicationDeploy resources.
        :param pulumi.Input[Sequence[pulumi.Input['DeployApplicationDeployParamArgs']]] params: Specifies the parameters transferred during application deployment.
               Changing this creates a new resource.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] record_id: Specifies the deployment record ID of an application. Specifies it to roll
               back the application to the previous deployment status.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] task_id: Specifies the deployment task ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] trigger_source: Specifies the trigger source.
               Valid values are as follows:
               + **0**: Deployment can be triggered through all requests.
               + **1**: Deployment can be triggered only through pipeline.
               
               Changing this creates a new resource.
               
               <a name="block--params"></a>
               The `params` block supports:
        """
        if params is not None:
            pulumi.set(__self__, "params", params)
        if record_id is not None:
            pulumi.set(__self__, "record_id", record_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if trigger_source is not None:
            pulumi.set(__self__, "trigger_source", trigger_source)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationDeployParamArgs']]]]:
        """
        Specifies the parameters transferred during application deployment.
        Changing this creates a new resource.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationDeployParamArgs']]]]):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the deployment record ID of an application. Specifies it to roll
        back the application to the previous deployment status.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "record_id")

    @record_id.setter
    def record_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "record_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the deployment task ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_id", value)

    @_builtins.property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the trigger source.
        Valid values are as follows:
        + **0**: Deployment can be triggered through all requests.
        + **1**: Deployment can be triggered only through pipeline.

        Changing this creates a new resource.

        <a name="block--params"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "trigger_source")

    @trigger_source.setter
    def trigger_source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_source", value)


@pulumi.type_token("huaweicloud:codearts/deployApplicationDeploy:DeployApplicationDeploy")
class DeployApplicationDeploy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationDeployParamArgs', 'DeployApplicationDeployParamArgsDict']]]]] = None,
                 record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_source: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts deploy application deploy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        task_id = config.require_object("taskId")
        test = huaweicloud.codearts.DeployApplicationDeploy("test", task_id=task_id)
        ```

        ## Import

        The application deployment record can be imported using `task_id`, and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/deployApplicationDeploy:DeployApplicationDeploy test <task_id>/<id>
        ```

        Please add the followings if some attributes are missing when importing the resource.

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `params`, `record_id` and `trigger_source`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the deployment record, or the resource definition should be updated to

        align with the deployment record. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_codearts_deploy_application_deploy" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              params, record_id, trigger_source,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationDeployParamArgs', 'DeployApplicationDeployParamArgsDict']]]] params: Specifies the parameters transferred during application deployment.
               Changing this creates a new resource.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] record_id: Specifies the deployment record ID of an application. Specifies it to roll
               back the application to the previous deployment status.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] task_id: Specifies the deployment task ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] trigger_source: Specifies the trigger source.
               Valid values are as follows:
               + **0**: Deployment can be triggered through all requests.
               + **1**: Deployment can be triggered only through pipeline.
               
               Changing this creates a new resource.
               
               <a name="block--params"></a>
               The `params` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeployApplicationDeployArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts deploy application deploy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        task_id = config.require_object("taskId")
        test = huaweicloud.codearts.DeployApplicationDeploy("test", task_id=task_id)
        ```

        ## Import

        The application deployment record can be imported using `task_id`, and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/deployApplicationDeploy:DeployApplicationDeploy test <task_id>/<id>
        ```

        Please add the followings if some attributes are missing when importing the resource.

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `params`, `record_id` and `trigger_source`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the deployment record, or the resource definition should be updated to

        align with the deployment record. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_codearts_deploy_application_deploy" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              params, record_id, trigger_source,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DeployApplicationDeployArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeployApplicationDeployArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationDeployParamArgs', 'DeployApplicationDeployParamArgsDict']]]]] = None,
                 record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_source: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeployApplicationDeployArgs.__new__(DeployApplicationDeployArgs)

            __props__.__dict__["params"] = params
            __props__.__dict__["record_id"] = record_id
            __props__.__dict__["region"] = region
            if task_id is None and not opts.urn:
                raise TypeError("Missing required property 'task_id'")
            __props__.__dict__["task_id"] = task_id
            __props__.__dict__["trigger_source"] = trigger_source
        super(DeployApplicationDeploy, __self__).__init__(
            'huaweicloud:codearts/deployApplicationDeploy:DeployApplicationDeploy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationDeployParamArgs', 'DeployApplicationDeployParamArgsDict']]]]] = None,
            record_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            task_id: Optional[pulumi.Input[_builtins.str]] = None,
            trigger_source: Optional[pulumi.Input[_builtins.str]] = None) -> 'DeployApplicationDeploy':
        """
        Get an existing DeployApplicationDeploy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationDeployParamArgs', 'DeployApplicationDeployParamArgsDict']]]] params: Specifies the parameters transferred during application deployment.
               Changing this creates a new resource.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] record_id: Specifies the deployment record ID of an application. Specifies it to roll
               back the application to the previous deployment status.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] task_id: Specifies the deployment task ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] trigger_source: Specifies the trigger source.
               Valid values are as follows:
               + **0**: Deployment can be triggered through all requests.
               + **1**: Deployment can be triggered only through pipeline.
               
               Changing this creates a new resource.
               
               <a name="block--params"></a>
               The `params` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeployApplicationDeployState.__new__(_DeployApplicationDeployState)

        __props__.__dict__["params"] = params
        __props__.__dict__["record_id"] = record_id
        __props__.__dict__["region"] = region
        __props__.__dict__["task_id"] = task_id
        __props__.__dict__["trigger_source"] = trigger_source
        return DeployApplicationDeploy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def params(self) -> pulumi.Output[Optional[Sequence['outputs.DeployApplicationDeployParam']]]:
        """
        Specifies the parameters transferred during application deployment.
        Changing this creates a new resource.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter(name="recordId")
    def record_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the deployment record ID of an application. Specifies it to roll
        back the application to the previous deployment status.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "record_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the deployment task ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the trigger source.
        Valid values are as follows:
        + **0**: Deployment can be triggered through all requests.
        + **1**: Deployment can be triggered only through pipeline.

        Changing this creates a new resource.

        <a name="block--params"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "trigger_source")

