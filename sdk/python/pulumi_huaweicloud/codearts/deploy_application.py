# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeployApplicationArgs', 'DeployApplication']

@pulumi.input_type
class DeployApplicationArgs:
    def __init__(__self__, *,
                 create_type: pulumi.Input[_builtins.str],
                 is_draft: pulumi.Input[_builtins.bool],
                 project_id: pulumi.Input[_builtins.str],
                 trigger_source: pulumi.Input[_builtins.str],
                 artifact_source_system: Optional[pulumi.Input[_builtins.str]] = None,
                 artifact_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operation_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationOperationListArgs']]]] = None,
                 permission_level: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DeployApplication resource.
        :param pulumi.Input[_builtins.str] create_type: Specifies the creation type. Only **template** is supported.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] is_draft: Specifies whether the application is in draft status.
               Valid values:
               + **true**:  Draft state.
               + **false**: Available state.
               
               > Only applications in available state can be deployed.
               If `operation_list` is not specified, this field can only be set to **true**.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] trigger_source: Specifies where a deployment task can be executed.
               Valid values:
               + **0**: Indicates that all execution requests can be triggered.
               + **1**: Indicates that only pipeline can be triggered.
        :param pulumi.Input[_builtins.str] artifact_source_system: Specifies the source information transferred by the pipeline.
               This field is only valid when `trigger_source` is set to **1**. Only **CloudArtifact** is supported.
        :param pulumi.Input[_builtins.str] artifact_type: Specifies the artifact type for the pipeline source.
               This field is only valid when `trigger_source` is set to **1**. Valid values are **generic** and **docker**.
        :param pulumi.Input[_builtins.str] description: Specifies the step description.
        :param pulumi.Input[_builtins.str] group_id: Specifies the application group ID.
               + When creating the application, if value is empty or **no_grouped**, means the application is ungrouped.
               + If the application is under a specific application group, and you would like to update the application to become
               ungrouped, only specifies it as **no_grouped** is available.
        :param pulumi.Input[_builtins.bool] is_disable: Specifies whether to disable the application. Defaults to **false**.
               
               > When value is **true**, it's unable to update other parameters.
        :param pulumi.Input[_builtins.str] name: Specifies the step name.
        :param pulumi.Input[Sequence[pulumi.Input['DeployApplicationOperationListArgs']]] operation_lists: Specifies the deployment orchestration list information.
               
               The operation_list structure is documented below.
        :param pulumi.Input[_builtins.str] permission_level: Specifies the permission level.
               Valid values are **instance** and **project**. Defaults to **project**.
               
               <a name="DeployApplication_operation_list"></a>
               The `operation_list` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_pool_id: Specifies the resource pool ID. A resource pool is a collection
               of physical environments that execute deployment commands when deploying software packages.
               If not specified, the resource pool hosted by HuaweiCloud will be used.
               If you want to use your own servers as resource pools, please fill your own resource pool ID.
               
               > Please refer to the following documents to create your own resource pool:
               [Creating an Agent Pool](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0016.html) and
               [Creating an Agent](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0017.html).
        :param pulumi.Input[_builtins.str] template_id: schema: Deprecated; Currently, the field is useless for creating API.
        """
        pulumi.set(__self__, "create_type", create_type)
        pulumi.set(__self__, "is_draft", is_draft)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "trigger_source", trigger_source)
        if artifact_source_system is not None:
            pulumi.set(__self__, "artifact_source_system", artifact_source_system)
        if artifact_type is not None:
            pulumi.set(__self__, "artifact_type", artifact_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if is_disable is not None:
            pulumi.set(__self__, "is_disable", is_disable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operation_lists is not None:
            pulumi.set(__self__, "operation_lists", operation_lists)
        if permission_level is not None:
            pulumi.set(__self__, "permission_level", permission_level)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_pool_id is not None:
            pulumi.set(__self__, "resource_pool_id", resource_pool_id)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @_builtins.property
    @pulumi.getter(name="createType")
    def create_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the creation type. Only **template** is supported.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "create_type")

    @create_type.setter
    def create_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "create_type", value)

    @_builtins.property
    @pulumi.getter(name="isDraft")
    def is_draft(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether the application is in draft status.
        Valid values:
        + **true**:  Draft state.
        + **false**: Available state.

        > Only applications in available state can be deployed.
        If `operation_list` is not specified, this field can only be set to **true**.
        """
        return pulumi.get(self, "is_draft")

    @is_draft.setter
    def is_draft(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "is_draft", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the project ID for CodeArts service.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies where a deployment task can be executed.
        Valid values:
        + **0**: Indicates that all execution requests can be triggered.
        + **1**: Indicates that only pipeline can be triggered.
        """
        return pulumi.get(self, "trigger_source")

    @trigger_source.setter
    def trigger_source(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "trigger_source", value)

    @_builtins.property
    @pulumi.getter(name="artifactSourceSystem")
    def artifact_source_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source information transferred by the pipeline.
        This field is only valid when `trigger_source` is set to **1**. Only **CloudArtifact** is supported.
        """
        return pulumi.get(self, "artifact_source_system")

    @artifact_source_system.setter
    def artifact_source_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "artifact_source_system", value)

    @_builtins.property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the artifact type for the pipeline source.
        This field is only valid when `trigger_source` is set to **1**. Valid values are **generic** and **docker**.
        """
        return pulumi.get(self, "artifact_type")

    @artifact_type.setter
    def artifact_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "artifact_type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the step description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application group ID.
        + When creating the application, if value is empty or **no_grouped**, means the application is ungrouped.
        + If the application is under a specific application group, and you would like to update the application to become
        ungrouped, only specifies it as **no_grouped** is available.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="isDisable")
    def is_disable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to disable the application. Defaults to **false**.

        > When value is **true**, it's unable to update other parameters.
        """
        return pulumi.get(self, "is_disable")

    @is_disable.setter
    def is_disable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_disable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the step name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="operationLists")
    def operation_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationOperationListArgs']]]]:
        """
        Specifies the deployment orchestration list information.

        The operation_list structure is documented below.
        """
        return pulumi.get(self, "operation_lists")

    @operation_lists.setter
    def operation_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationOperationListArgs']]]]):
        pulumi.set(self, "operation_lists", value)

    @_builtins.property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the permission level.
        Valid values are **instance** and **project**. Defaults to **project**.

        <a name="DeployApplication_operation_list"></a>
        The `operation_list` block supports:
        """
        return pulumi.get(self, "permission_level")

    @permission_level.setter
    def permission_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "permission_level", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourcePoolId")
    def resource_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource pool ID. A resource pool is a collection
        of physical environments that execute deployment commands when deploying software packages.
        If not specified, the resource pool hosted by HuaweiCloud will be used.
        If you want to use your own servers as resource pools, please fill your own resource pool ID.

        > Please refer to the following documents to create your own resource pool:
        [Creating an Agent Pool](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0016.html) and
        [Creating an Agent](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0017.html).
        """
        return pulumi.get(self, "resource_pool_id")

    @resource_pool_id.setter
    def resource_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Deprecated; Currently, the field is useless for creating API.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)


@pulumi.input_type
class _DeployApplicationState:
    def __init__(__self__, *,
                 artifact_source_system: Optional[pulumi.Input[_builtins.str]] = None,
                 artifact_type: Optional[pulumi.Input[_builtins.str]] = None,
                 can_copy: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_create_env: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_execute: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_manage: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_modify: Optional[pulumi.Input[_builtins.bool]] = None,
                 can_view: Optional[pulumi.Input[_builtins.bool]] = None,
                 create_type: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_care: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_draft: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operation_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationOperationListArgs']]]] = None,
                 permission_level: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_matrices: Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationPermissionMatrixArgs']]]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 steps: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_source: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeployApplication resources.
        :param pulumi.Input[_builtins.str] artifact_source_system: Specifies the source information transferred by the pipeline.
               This field is only valid when `trigger_source` is set to **1**. Only **CloudArtifact** is supported.
        :param pulumi.Input[_builtins.str] artifact_type: Specifies the artifact type for the pipeline source.
               This field is only valid when `trigger_source` is set to **1**. Valid values are **generic** and **docker**.
        :param pulumi.Input[_builtins.bool] can_copy: Indicates whether the role has the copy permission.
        :param pulumi.Input[_builtins.bool] can_create_env: Indicates whether the role has the permission to create an environment.
        :param pulumi.Input[_builtins.bool] can_delete: Indicates whether the role has the deletion permission.
        :param pulumi.Input[_builtins.bool] can_disable: Indicates whether the role has the permission to disable the application.
        :param pulumi.Input[_builtins.bool] can_execute: Indicates whether the role has the deployment permission.
        :param pulumi.Input[_builtins.bool] can_manage: Check whether the role has the management permission, including adding, deleting, modifying,
               querying deployment and permission modification.
        :param pulumi.Input[_builtins.bool] can_modify: Indicates whether the role has the editing permission.
        :param pulumi.Input[_builtins.bool] can_view: Indicates whether the role has the view permission.
        :param pulumi.Input[_builtins.str] create_type: Specifies the creation type. Only **template** is supported.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The create time.
        :param pulumi.Input[_builtins.str] description: Specifies the step description.
        :param pulumi.Input[_builtins.str] group_id: Specifies the application group ID.
               + When creating the application, if value is empty or **no_grouped**, means the application is ungrouped.
               + If the application is under a specific application group, and you would like to update the application to become
               ungrouped, only specifies it as **no_grouped** is available.
        :param pulumi.Input[_builtins.bool] is_care: Indicates whether the user has favorited the application.
        :param pulumi.Input[_builtins.bool] is_disable: Specifies whether to disable the application. Defaults to **false**.
               
               > When value is **true**, it's unable to update other parameters.
        :param pulumi.Input[_builtins.bool] is_draft: Specifies whether the application is in draft status.
               Valid values:
               + **true**:  Draft state.
               + **false**: Available state.
               
               > Only applications in available state can be deployed.
               If `operation_list` is not specified, this field can only be set to **true**.
        :param pulumi.Input[_builtins.str] name: Specifies the step name.
        :param pulumi.Input[Sequence[pulumi.Input['DeployApplicationOperationListArgs']]] operation_lists: Specifies the deployment orchestration list information.
               
               The operation_list structure is documented below.
        :param pulumi.Input[_builtins.str] permission_level: Specifies the permission level.
               Valid values are **instance** and **project**. Defaults to **project**.
               
               <a name="DeployApplication_operation_list"></a>
               The `operation_list` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['DeployApplicationPermissionMatrixArgs']]] permission_matrices: Indicates the permission matrix.
               The permission_matrix structure is documented below.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] project_name: The project name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_pool_id: Specifies the resource pool ID. A resource pool is a collection
               of physical environments that execute deployment commands when deploying software packages.
               If not specified, the resource pool hosted by HuaweiCloud will be used.
               If you want to use your own servers as resource pools, please fill your own resource pool ID.
               
               > Please refer to the following documents to create your own resource pool:
               [Creating an Agent Pool](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0016.html) and
               [Creating an Agent](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0017.html).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] steps: The deployment steps. The example value is `{"step1":"XXX", "step2":"XXX"}`.
        :param pulumi.Input[_builtins.str] task_id: The deployment task ID.
        :param pulumi.Input[_builtins.str] task_name: The deployment task name.
        :param pulumi.Input[_builtins.str] template_id: schema: Deprecated; Currently, the field is useless for creating API.
        :param pulumi.Input[_builtins.str] trigger_source: Specifies where a deployment task can be executed.
               Valid values:
               + **0**: Indicates that all execution requests can be triggered.
               + **1**: Indicates that only pipeline can be triggered.
        :param pulumi.Input[_builtins.str] updated_at: The update time.
        """
        if artifact_source_system is not None:
            pulumi.set(__self__, "artifact_source_system", artifact_source_system)
        if artifact_type is not None:
            pulumi.set(__self__, "artifact_type", artifact_type)
        if can_copy is not None:
            pulumi.set(__self__, "can_copy", can_copy)
        if can_create_env is not None:
            pulumi.set(__self__, "can_create_env", can_create_env)
        if can_delete is not None:
            pulumi.set(__self__, "can_delete", can_delete)
        if can_disable is not None:
            pulumi.set(__self__, "can_disable", can_disable)
        if can_execute is not None:
            pulumi.set(__self__, "can_execute", can_execute)
        if can_manage is not None:
            pulumi.set(__self__, "can_manage", can_manage)
        if can_modify is not None:
            pulumi.set(__self__, "can_modify", can_modify)
        if can_view is not None:
            pulumi.set(__self__, "can_view", can_view)
        if create_type is not None:
            pulumi.set(__self__, "create_type", create_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if is_care is not None:
            pulumi.set(__self__, "is_care", is_care)
        if is_disable is not None:
            pulumi.set(__self__, "is_disable", is_disable)
        if is_draft is not None:
            pulumi.set(__self__, "is_draft", is_draft)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operation_lists is not None:
            pulumi.set(__self__, "operation_lists", operation_lists)
        if permission_level is not None:
            pulumi.set(__self__, "permission_level", permission_level)
        if permission_matrices is not None:
            pulumi.set(__self__, "permission_matrices", permission_matrices)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_pool_id is not None:
            pulumi.set(__self__, "resource_pool_id", resource_pool_id)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if trigger_source is not None:
            pulumi.set(__self__, "trigger_source", trigger_source)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="artifactSourceSystem")
    def artifact_source_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source information transferred by the pipeline.
        This field is only valid when `trigger_source` is set to **1**. Only **CloudArtifact** is supported.
        """
        return pulumi.get(self, "artifact_source_system")

    @artifact_source_system.setter
    def artifact_source_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "artifact_source_system", value)

    @_builtins.property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the artifact type for the pipeline source.
        This field is only valid when `trigger_source` is set to **1**. Valid values are **generic** and **docker**.
        """
        return pulumi.get(self, "artifact_type")

    @artifact_type.setter
    def artifact_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "artifact_type", value)

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the copy permission.
        """
        return pulumi.get(self, "can_copy")

    @can_copy.setter
    def can_copy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_copy", value)

    @_builtins.property
    @pulumi.getter(name="canCreateEnv")
    def can_create_env(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to create an environment.
        """
        return pulumi.get(self, "can_create_env")

    @can_create_env.setter
    def can_create_env(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_create_env", value)

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @can_delete.setter
    def can_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_delete", value)

    @_builtins.property
    @pulumi.getter(name="canDisable")
    def can_disable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the permission to disable the application.
        """
        return pulumi.get(self, "can_disable")

    @can_disable.setter
    def can_disable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_disable", value)

    @_builtins.property
    @pulumi.getter(name="canExecute")
    def can_execute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the deployment permission.
        """
        return pulumi.get(self, "can_execute")

    @can_execute.setter
    def can_execute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_execute", value)

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Check whether the role has the management permission, including adding, deleting, modifying,
        querying deployment and permission modification.
        """
        return pulumi.get(self, "can_manage")

    @can_manage.setter
    def can_manage(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_manage", value)

    @_builtins.property
    @pulumi.getter(name="canModify")
    def can_modify(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the editing permission.
        """
        return pulumi.get(self, "can_modify")

    @can_modify.setter
    def can_modify(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_modify", value)

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the role has the view permission.
        """
        return pulumi.get(self, "can_view")

    @can_view.setter
    def can_view(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_view", value)

    @_builtins.property
    @pulumi.getter(name="createType")
    def create_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the creation type. Only **template** is supported.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "create_type")

    @create_type.setter
    def create_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_type", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The create time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the step description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application group ID.
        + When creating the application, if value is empty or **no_grouped**, means the application is ungrouped.
        + If the application is under a specific application group, and you would like to update the application to become
        ungrouped, only specifies it as **no_grouped** is available.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="isCare")
    def is_care(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the user has favorited the application.
        """
        return pulumi.get(self, "is_care")

    @is_care.setter
    def is_care(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_care", value)

    @_builtins.property
    @pulumi.getter(name="isDisable")
    def is_disable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to disable the application. Defaults to **false**.

        > When value is **true**, it's unable to update other parameters.
        """
        return pulumi.get(self, "is_disable")

    @is_disable.setter
    def is_disable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_disable", value)

    @_builtins.property
    @pulumi.getter(name="isDraft")
    def is_draft(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the application is in draft status.
        Valid values:
        + **true**:  Draft state.
        + **false**: Available state.

        > Only applications in available state can be deployed.
        If `operation_list` is not specified, this field can only be set to **true**.
        """
        return pulumi.get(self, "is_draft")

    @is_draft.setter
    def is_draft(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_draft", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the step name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="operationLists")
    def operation_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationOperationListArgs']]]]:
        """
        Specifies the deployment orchestration list information.

        The operation_list structure is documented below.
        """
        return pulumi.get(self, "operation_lists")

    @operation_lists.setter
    def operation_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationOperationListArgs']]]]):
        pulumi.set(self, "operation_lists", value)

    @_builtins.property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the permission level.
        Valid values are **instance** and **project**. Defaults to **project**.

        <a name="DeployApplication_operation_list"></a>
        The `operation_list` block supports:
        """
        return pulumi.get(self, "permission_level")

    @permission_level.setter
    def permission_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "permission_level", value)

    @_builtins.property
    @pulumi.getter(name="permissionMatrices")
    def permission_matrices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationPermissionMatrixArgs']]]]:
        """
        Indicates the permission matrix.
        The permission_matrix structure is documented below.
        """
        return pulumi.get(self, "permission_matrices")

    @permission_matrices.setter
    def permission_matrices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployApplicationPermissionMatrixArgs']]]]):
        pulumi.set(self, "permission_matrices", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project ID for CodeArts service.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The project name.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourcePoolId")
    def resource_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource pool ID. A resource pool is a collection
        of physical environments that execute deployment commands when deploying software packages.
        If not specified, the resource pool hosted by HuaweiCloud will be used.
        If you want to use your own servers as resource pools, please fill your own resource pool ID.

        > Please refer to the following documents to create your own resource pool:
        [Creating an Agent Pool](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0016.html) and
        [Creating an Agent](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0017.html).
        """
        return pulumi.get(self, "resource_pool_id")

    @resource_pool_id.setter
    def resource_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The deployment steps. The example value is `{"step1":"XXX", "step2":"XXX"}`.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "steps", value)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The deployment task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_id", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The deployment task name.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Deprecated; Currently, the field is useless for creating API.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies where a deployment task can be executed.
        Valid values:
        + **0**: Indicates that all execution requests can be triggered.
        + **1**: Indicates that only pipeline can be triggered.
        """
        return pulumi.get(self, "trigger_source")

    @trigger_source.setter
    def trigger_source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_source", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:codearts/deployApplication:DeployApplication")
class DeployApplication(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 artifact_source_system: Optional[pulumi.Input[_builtins.str]] = None,
                 artifact_type: Optional[pulumi.Input[_builtins.str]] = None,
                 create_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_draft: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operation_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationOperationListArgs', 'DeployApplicationOperationListArgsDict']]]]] = None,
                 permission_level: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_source: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CodeArts deploy application resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        operation_name = config.require_object("operationName")
        operation_description = config.require_object("operationDescription")
        operation_code = config.require_object("operationCode")
        operation_params = config.require_object("operationParams")
        operation_entrance = config.require_object("operationEntrance")
        operation_version = config.require_object("operationVersion")
        operation_module_id = config.require_object("operationModuleId")
        test = huaweicloud.codearts.DeployApplication("test",
            project_id=project_id,
            name="test_name",
            description="test description",
            is_draft=True,
            create_type="template",
            trigger_source="0",
            operation_lists=[{
                "name": operation_name,
                "description": operation_description,
                "code": operation_code,
                "params": operation_params,
                "entrance": operation_entrance,
                "version": operation_version,
                "module_id": operation_module_id,
            }])
        ```

        ## Import

        The CodeArts deploy application resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/deployApplication:DeployApplication test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `is_draft`, `trigger_source`,

        `artifact_source_system`, `artifact_type`, `operation_list` and `group_id`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_codearts_deploy_application" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              is_draft,
            
              trigger_source,
            
              artifact_source_system,
            
              artifact_type,
            
              operation_list,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] artifact_source_system: Specifies the source information transferred by the pipeline.
               This field is only valid when `trigger_source` is set to **1**. Only **CloudArtifact** is supported.
        :param pulumi.Input[_builtins.str] artifact_type: Specifies the artifact type for the pipeline source.
               This field is only valid when `trigger_source` is set to **1**. Valid values are **generic** and **docker**.
        :param pulumi.Input[_builtins.str] create_type: Specifies the creation type. Only **template** is supported.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the step description.
        :param pulumi.Input[_builtins.str] group_id: Specifies the application group ID.
               + When creating the application, if value is empty or **no_grouped**, means the application is ungrouped.
               + If the application is under a specific application group, and you would like to update the application to become
               ungrouped, only specifies it as **no_grouped** is available.
        :param pulumi.Input[_builtins.bool] is_disable: Specifies whether to disable the application. Defaults to **false**.
               
               > When value is **true**, it's unable to update other parameters.
        :param pulumi.Input[_builtins.bool] is_draft: Specifies whether the application is in draft status.
               Valid values:
               + **true**:  Draft state.
               + **false**: Available state.
               
               > Only applications in available state can be deployed.
               If `operation_list` is not specified, this field can only be set to **true**.
        :param pulumi.Input[_builtins.str] name: Specifies the step name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationOperationListArgs', 'DeployApplicationOperationListArgsDict']]]] operation_lists: Specifies the deployment orchestration list information.
               
               The operation_list structure is documented below.
        :param pulumi.Input[_builtins.str] permission_level: Specifies the permission level.
               Valid values are **instance** and **project**. Defaults to **project**.
               
               <a name="DeployApplication_operation_list"></a>
               The `operation_list` block supports:
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_pool_id: Specifies the resource pool ID. A resource pool is a collection
               of physical environments that execute deployment commands when deploying software packages.
               If not specified, the resource pool hosted by HuaweiCloud will be used.
               If you want to use your own servers as resource pools, please fill your own resource pool ID.
               
               > Please refer to the following documents to create your own resource pool:
               [Creating an Agent Pool](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0016.html) and
               [Creating an Agent](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0017.html).
        :param pulumi.Input[_builtins.str] template_id: schema: Deprecated; Currently, the field is useless for creating API.
        :param pulumi.Input[_builtins.str] trigger_source: Specifies where a deployment task can be executed.
               Valid values:
               + **0**: Indicates that all execution requests can be triggered.
               + **1**: Indicates that only pipeline can be triggered.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeployApplicationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts deploy application resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        operation_name = config.require_object("operationName")
        operation_description = config.require_object("operationDescription")
        operation_code = config.require_object("operationCode")
        operation_params = config.require_object("operationParams")
        operation_entrance = config.require_object("operationEntrance")
        operation_version = config.require_object("operationVersion")
        operation_module_id = config.require_object("operationModuleId")
        test = huaweicloud.codearts.DeployApplication("test",
            project_id=project_id,
            name="test_name",
            description="test description",
            is_draft=True,
            create_type="template",
            trigger_source="0",
            operation_lists=[{
                "name": operation_name,
                "description": operation_description,
                "code": operation_code,
                "params": operation_params,
                "entrance": operation_entrance,
                "version": operation_version,
                "module_id": operation_module_id,
            }])
        ```

        ## Import

        The CodeArts deploy application resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/deployApplication:DeployApplication test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `is_draft`, `trigger_source`,

        `artifact_source_system`, `artifact_type`, `operation_list` and `group_id`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_codearts_deploy_application" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              is_draft,
            
              trigger_source,
            
              artifact_source_system,
            
              artifact_type,
            
              operation_list,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DeployApplicationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeployApplicationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 artifact_source_system: Optional[pulumi.Input[_builtins.str]] = None,
                 artifact_type: Optional[pulumi.Input[_builtins.str]] = None,
                 create_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_draft: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operation_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationOperationListArgs', 'DeployApplicationOperationListArgsDict']]]]] = None,
                 permission_level: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_source: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeployApplicationArgs.__new__(DeployApplicationArgs)

            __props__.__dict__["artifact_source_system"] = artifact_source_system
            __props__.__dict__["artifact_type"] = artifact_type
            if create_type is None and not opts.urn:
                raise TypeError("Missing required property 'create_type'")
            __props__.__dict__["create_type"] = create_type
            __props__.__dict__["description"] = description
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["is_disable"] = is_disable
            if is_draft is None and not opts.urn:
                raise TypeError("Missing required property 'is_draft'")
            __props__.__dict__["is_draft"] = is_draft
            __props__.__dict__["name"] = name
            __props__.__dict__["operation_lists"] = operation_lists
            __props__.__dict__["permission_level"] = permission_level
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_pool_id"] = resource_pool_id
            __props__.__dict__["template_id"] = template_id
            if trigger_source is None and not opts.urn:
                raise TypeError("Missing required property 'trigger_source'")
            __props__.__dict__["trigger_source"] = trigger_source
            __props__.__dict__["can_copy"] = None
            __props__.__dict__["can_create_env"] = None
            __props__.__dict__["can_delete"] = None
            __props__.__dict__["can_disable"] = None
            __props__.__dict__["can_execute"] = None
            __props__.__dict__["can_manage"] = None
            __props__.__dict__["can_modify"] = None
            __props__.__dict__["can_view"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["is_care"] = None
            __props__.__dict__["permission_matrices"] = None
            __props__.__dict__["project_name"] = None
            __props__.__dict__["steps"] = None
            __props__.__dict__["task_id"] = None
            __props__.__dict__["task_name"] = None
            __props__.__dict__["updated_at"] = None
        super(DeployApplication, __self__).__init__(
            'huaweicloud:codearts/deployApplication:DeployApplication',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            artifact_source_system: Optional[pulumi.Input[_builtins.str]] = None,
            artifact_type: Optional[pulumi.Input[_builtins.str]] = None,
            can_copy: Optional[pulumi.Input[_builtins.bool]] = None,
            can_create_env: Optional[pulumi.Input[_builtins.bool]] = None,
            can_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            can_disable: Optional[pulumi.Input[_builtins.bool]] = None,
            can_execute: Optional[pulumi.Input[_builtins.bool]] = None,
            can_manage: Optional[pulumi.Input[_builtins.bool]] = None,
            can_modify: Optional[pulumi.Input[_builtins.bool]] = None,
            can_view: Optional[pulumi.Input[_builtins.bool]] = None,
            create_type: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            group_id: Optional[pulumi.Input[_builtins.str]] = None,
            is_care: Optional[pulumi.Input[_builtins.bool]] = None,
            is_disable: Optional[pulumi.Input[_builtins.bool]] = None,
            is_draft: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            operation_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationOperationListArgs', 'DeployApplicationOperationListArgsDict']]]]] = None,
            permission_level: Optional[pulumi.Input[_builtins.str]] = None,
            permission_matrices: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationPermissionMatrixArgs', 'DeployApplicationPermissionMatrixArgsDict']]]]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            project_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            steps: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            task_id: Optional[pulumi.Input[_builtins.str]] = None,
            task_name: Optional[pulumi.Input[_builtins.str]] = None,
            template_id: Optional[pulumi.Input[_builtins.str]] = None,
            trigger_source: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'DeployApplication':
        """
        Get an existing DeployApplication resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] artifact_source_system: Specifies the source information transferred by the pipeline.
               This field is only valid when `trigger_source` is set to **1**. Only **CloudArtifact** is supported.
        :param pulumi.Input[_builtins.str] artifact_type: Specifies the artifact type for the pipeline source.
               This field is only valid when `trigger_source` is set to **1**. Valid values are **generic** and **docker**.
        :param pulumi.Input[_builtins.bool] can_copy: Indicates whether the role has the copy permission.
        :param pulumi.Input[_builtins.bool] can_create_env: Indicates whether the role has the permission to create an environment.
        :param pulumi.Input[_builtins.bool] can_delete: Indicates whether the role has the deletion permission.
        :param pulumi.Input[_builtins.bool] can_disable: Indicates whether the role has the permission to disable the application.
        :param pulumi.Input[_builtins.bool] can_execute: Indicates whether the role has the deployment permission.
        :param pulumi.Input[_builtins.bool] can_manage: Check whether the role has the management permission, including adding, deleting, modifying,
               querying deployment and permission modification.
        :param pulumi.Input[_builtins.bool] can_modify: Indicates whether the role has the editing permission.
        :param pulumi.Input[_builtins.bool] can_view: Indicates whether the role has the view permission.
        :param pulumi.Input[_builtins.str] create_type: Specifies the creation type. Only **template** is supported.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The create time.
        :param pulumi.Input[_builtins.str] description: Specifies the step description.
        :param pulumi.Input[_builtins.str] group_id: Specifies the application group ID.
               + When creating the application, if value is empty or **no_grouped**, means the application is ungrouped.
               + If the application is under a specific application group, and you would like to update the application to become
               ungrouped, only specifies it as **no_grouped** is available.
        :param pulumi.Input[_builtins.bool] is_care: Indicates whether the user has favorited the application.
        :param pulumi.Input[_builtins.bool] is_disable: Specifies whether to disable the application. Defaults to **false**.
               
               > When value is **true**, it's unable to update other parameters.
        :param pulumi.Input[_builtins.bool] is_draft: Specifies whether the application is in draft status.
               Valid values:
               + **true**:  Draft state.
               + **false**: Available state.
               
               > Only applications in available state can be deployed.
               If `operation_list` is not specified, this field can only be set to **true**.
        :param pulumi.Input[_builtins.str] name: Specifies the step name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationOperationListArgs', 'DeployApplicationOperationListArgsDict']]]] operation_lists: Specifies the deployment orchestration list information.
               
               The operation_list structure is documented below.
        :param pulumi.Input[_builtins.str] permission_level: Specifies the permission level.
               Valid values are **instance** and **project**. Defaults to **project**.
               
               <a name="DeployApplication_operation_list"></a>
               The `operation_list` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployApplicationPermissionMatrixArgs', 'DeployApplicationPermissionMatrixArgsDict']]]] permission_matrices: Indicates the permission matrix.
               The permission_matrix structure is documented below.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID for CodeArts service.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] project_name: The project name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] resource_pool_id: Specifies the resource pool ID. A resource pool is a collection
               of physical environments that execute deployment commands when deploying software packages.
               If not specified, the resource pool hosted by HuaweiCloud will be used.
               If you want to use your own servers as resource pools, please fill your own resource pool ID.
               
               > Please refer to the following documents to create your own resource pool:
               [Creating an Agent Pool](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0016.html) and
               [Creating an Agent](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0017.html).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] steps: The deployment steps. The example value is `{"step1":"XXX", "step2":"XXX"}`.
        :param pulumi.Input[_builtins.str] task_id: The deployment task ID.
        :param pulumi.Input[_builtins.str] task_name: The deployment task name.
        :param pulumi.Input[_builtins.str] template_id: schema: Deprecated; Currently, the field is useless for creating API.
        :param pulumi.Input[_builtins.str] trigger_source: Specifies where a deployment task can be executed.
               Valid values:
               + **0**: Indicates that all execution requests can be triggered.
               + **1**: Indicates that only pipeline can be triggered.
        :param pulumi.Input[_builtins.str] updated_at: The update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeployApplicationState.__new__(_DeployApplicationState)

        __props__.__dict__["artifact_source_system"] = artifact_source_system
        __props__.__dict__["artifact_type"] = artifact_type
        __props__.__dict__["can_copy"] = can_copy
        __props__.__dict__["can_create_env"] = can_create_env
        __props__.__dict__["can_delete"] = can_delete
        __props__.__dict__["can_disable"] = can_disable
        __props__.__dict__["can_execute"] = can_execute
        __props__.__dict__["can_manage"] = can_manage
        __props__.__dict__["can_modify"] = can_modify
        __props__.__dict__["can_view"] = can_view
        __props__.__dict__["create_type"] = create_type
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["is_care"] = is_care
        __props__.__dict__["is_disable"] = is_disable
        __props__.__dict__["is_draft"] = is_draft
        __props__.__dict__["name"] = name
        __props__.__dict__["operation_lists"] = operation_lists
        __props__.__dict__["permission_level"] = permission_level
        __props__.__dict__["permission_matrices"] = permission_matrices
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_pool_id"] = resource_pool_id
        __props__.__dict__["steps"] = steps
        __props__.__dict__["task_id"] = task_id
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["trigger_source"] = trigger_source
        __props__.__dict__["updated_at"] = updated_at
        return DeployApplication(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="artifactSourceSystem")
    def artifact_source_system(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the source information transferred by the pipeline.
        This field is only valid when `trigger_source` is set to **1**. Only **CloudArtifact** is supported.
        """
        return pulumi.get(self, "artifact_source_system")

    @_builtins.property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the artifact type for the pipeline source.
        This field is only valid when `trigger_source` is set to **1**. Valid values are **generic** and **docker**.
        """
        return pulumi.get(self, "artifact_type")

    @_builtins.property
    @pulumi.getter(name="canCopy")
    def can_copy(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the role has the copy permission.
        """
        return pulumi.get(self, "can_copy")

    @_builtins.property
    @pulumi.getter(name="canCreateEnv")
    def can_create_env(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the role has the permission to create an environment.
        """
        return pulumi.get(self, "can_create_env")

    @_builtins.property
    @pulumi.getter(name="canDelete")
    def can_delete(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the role has the deletion permission.
        """
        return pulumi.get(self, "can_delete")

    @_builtins.property
    @pulumi.getter(name="canDisable")
    def can_disable(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the role has the permission to disable the application.
        """
        return pulumi.get(self, "can_disable")

    @_builtins.property
    @pulumi.getter(name="canExecute")
    def can_execute(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the role has the deployment permission.
        """
        return pulumi.get(self, "can_execute")

    @_builtins.property
    @pulumi.getter(name="canManage")
    def can_manage(self) -> pulumi.Output[_builtins.bool]:
        """
        Check whether the role has the management permission, including adding, deleting, modifying,
        querying deployment and permission modification.
        """
        return pulumi.get(self, "can_manage")

    @_builtins.property
    @pulumi.getter(name="canModify")
    def can_modify(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the role has the editing permission.
        """
        return pulumi.get(self, "can_modify")

    @_builtins.property
    @pulumi.getter(name="canView")
    def can_view(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the role has the view permission.
        """
        return pulumi.get(self, "can_view")

    @_builtins.property
    @pulumi.getter(name="createType")
    def create_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the creation type. Only **template** is supported.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "create_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The create time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the step description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the application group ID.
        + When creating the application, if value is empty or **no_grouped**, means the application is ungrouped.
        + If the application is under a specific application group, and you would like to update the application to become
        ungrouped, only specifies it as **no_grouped** is available.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="isCare")
    def is_care(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the user has favorited the application.
        """
        return pulumi.get(self, "is_care")

    @_builtins.property
    @pulumi.getter(name="isDisable")
    def is_disable(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to disable the application. Defaults to **false**.

        > When value is **true**, it's unable to update other parameters.
        """
        return pulumi.get(self, "is_disable")

    @_builtins.property
    @pulumi.getter(name="isDraft")
    def is_draft(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the application is in draft status.
        Valid values:
        + **true**:  Draft state.
        + **false**: Available state.

        > Only applications in available state can be deployed.
        If `operation_list` is not specified, this field can only be set to **true**.
        """
        return pulumi.get(self, "is_draft")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the step name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operationLists")
    def operation_lists(self) -> pulumi.Output[Optional[Sequence['outputs.DeployApplicationOperationList']]]:
        """
        Specifies the deployment orchestration list information.

        The operation_list structure is documented below.
        """
        return pulumi.get(self, "operation_lists")

    @_builtins.property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the permission level.
        Valid values are **instance** and **project**. Defaults to **project**.

        <a name="DeployApplication_operation_list"></a>
        The `operation_list` block supports:
        """
        return pulumi.get(self, "permission_level")

    @_builtins.property
    @pulumi.getter(name="permissionMatrices")
    def permission_matrices(self) -> pulumi.Output[Sequence['outputs.DeployApplicationPermissionMatrix']]:
        """
        Indicates the permission matrix.
        The permission_matrix structure is documented below.
        """
        return pulumi.get(self, "permission_matrices")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the project ID for CodeArts service.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[_builtins.str]:
        """
        The project name.
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourcePoolId")
    def resource_pool_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the resource pool ID. A resource pool is a collection
        of physical environments that execute deployment commands when deploying software packages.
        If not specified, the resource pool hosted by HuaweiCloud will be used.
        If you want to use your own servers as resource pools, please fill your own resource pool ID.

        > Please refer to the following documents to create your own resource pool:
        [Creating an Agent Pool](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0016.html) and
        [Creating an Agent](https://support.huaweicloud.com/intl/en-us/usermanual-devcloud/devcloud_01_0017.html).
        """
        return pulumi.get(self, "resource_pool_id")

    @_builtins.property
    @pulumi.getter
    def steps(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The deployment steps. The example value is `{"step1":"XXX", "step2":"XXX"}`.
        """
        return pulumi.get(self, "steps")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[_builtins.str]:
        """
        The deployment task ID.
        """
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[_builtins.str]:
        """
        The deployment task name.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        schema: Deprecated; Currently, the field is useless for creating API.
        """
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies where a deployment task can be executed.
        Valid values:
        + **0**: Indicates that all execution requests can be triggered.
        + **1**: Indicates that only pipeline can be triggered.
        """
        return pulumi.get(self, "trigger_source")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

