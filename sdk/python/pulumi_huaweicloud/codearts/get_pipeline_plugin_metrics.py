# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPipelinePluginMetricsResult',
    'AwaitableGetPipelinePluginMetricsResult',
    'get_pipeline_plugin_metrics',
    'get_pipeline_plugin_metrics_output',
]

@pulumi.output_type
class GetPipelinePluginMetricsResult:
    """
    A collection of values returned by getPipelinePluginMetrics.
    """
    def __init__(__self__, display_name=None, id=None, metrics=None, plugin_attribution=None, plugin_name=None, region=None, version=None, version_attribution=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metrics and not isinstance(metrics, list):
            raise TypeError("Expected argument 'metrics' to be a list")
        pulumi.set(__self__, "metrics", metrics)
        if plugin_attribution and not isinstance(plugin_attribution, str):
            raise TypeError("Expected argument 'plugin_attribution' to be a str")
        pulumi.set(__self__, "plugin_attribution", plugin_attribution)
        if plugin_name and not isinstance(plugin_name, str):
            raise TypeError("Expected argument 'plugin_name' to be a str")
        pulumi.set(__self__, "plugin_name", plugin_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)
        if version_attribution and not isinstance(version_attribution, str):
            raise TypeError("Expected argument 'version_attribution' to be a str")
        pulumi.set(__self__, "version_attribution", version_attribution)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetPipelinePluginMetricsMetricResult']:
        """
        Indicates the plugin list.
        The metrics structure is documented below.
        """
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter(name="pluginAttribution")
    def plugin_attribution(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "plugin_attribution")

    @_builtins.property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> _builtins.str:
        return pulumi.get(self, "plugin_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Indicates the version.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionAttribution")
    def version_attribution(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "version_attribution")


class AwaitableGetPipelinePluginMetricsResult(GetPipelinePluginMetricsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelinePluginMetricsResult(
            display_name=self.display_name,
            id=self.id,
            metrics=self.metrics,
            plugin_attribution=self.plugin_attribution,
            plugin_name=self.plugin_name,
            region=self.region,
            version=self.version,
            version_attribution=self.version_attribution)


def get_pipeline_plugin_metrics(display_name: Optional[_builtins.str] = None,
                                plugin_attribution: Optional[_builtins.str] = None,
                                plugin_name: Optional[_builtins.str] = None,
                                region: Optional[_builtins.str] = None,
                                version: Optional[_builtins.str] = None,
                                version_attribution: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPipelinePluginMetricsResult:
    """
    Use this data source to get a list of CodeArts pipeline plugin mertics.


    :param _builtins.str display_name: Specifies the display name.
    :param _builtins.str plugin_attribution: Specifies the extension attribute. The value can be **official** or **custom**.
    :param _builtins.str plugin_name: Specifies the plugin name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str version: Specifies the version.
    :param _builtins.str version_attribution: Specifies the version attribute. The value can be **draft** or **formal**.
    """
    __args__ = dict()
    __args__['displayName'] = display_name
    __args__['pluginAttribution'] = plugin_attribution
    __args__['pluginName'] = plugin_name
    __args__['region'] = region
    __args__['version'] = version
    __args__['versionAttribution'] = version_attribution
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:codearts/getPipelinePluginMetrics:getPipelinePluginMetrics', __args__, opts=opts, typ=GetPipelinePluginMetricsResult).value

    return AwaitableGetPipelinePluginMetricsResult(
        display_name=pulumi.get(__ret__, 'display_name'),
        id=pulumi.get(__ret__, 'id'),
        metrics=pulumi.get(__ret__, 'metrics'),
        plugin_attribution=pulumi.get(__ret__, 'plugin_attribution'),
        plugin_name=pulumi.get(__ret__, 'plugin_name'),
        region=pulumi.get(__ret__, 'region'),
        version=pulumi.get(__ret__, 'version'),
        version_attribution=pulumi.get(__ret__, 'version_attribution'))
def get_pipeline_plugin_metrics_output(display_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       plugin_attribution: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       plugin_name: Optional[pulumi.Input[_builtins.str]] = None,
                                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       version_attribution: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPipelinePluginMetricsResult]:
    """
    Use this data source to get a list of CodeArts pipeline plugin mertics.


    :param _builtins.str display_name: Specifies the display name.
    :param _builtins.str plugin_attribution: Specifies the extension attribute. The value can be **official** or **custom**.
    :param _builtins.str plugin_name: Specifies the plugin name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str version: Specifies the version.
    :param _builtins.str version_attribution: Specifies the version attribute. The value can be **draft** or **formal**.
    """
    __args__ = dict()
    __args__['displayName'] = display_name
    __args__['pluginAttribution'] = plugin_attribution
    __args__['pluginName'] = plugin_name
    __args__['region'] = region
    __args__['version'] = version
    __args__['versionAttribution'] = version_attribution
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:codearts/getPipelinePluginMetrics:getPipelinePluginMetrics', __args__, opts=opts, typ=GetPipelinePluginMetricsResult)
    return __ret__.apply(lambda __response__: GetPipelinePluginMetricsResult(
        display_name=pulumi.get(__response__, 'display_name'),
        id=pulumi.get(__response__, 'id'),
        metrics=pulumi.get(__response__, 'metrics'),
        plugin_attribution=pulumi.get(__response__, 'plugin_attribution'),
        plugin_name=pulumi.get(__response__, 'plugin_name'),
        region=pulumi.get(__response__, 'region'),
        version=pulumi.get(__response__, 'version'),
        version_attribution=pulumi.get(__response__, 'version_attribution')))
