# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['RepositoryArgs', 'Repository']

@pulumi.input_type
class RepositoryArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_readme: Optional[pulumi.Input[_builtins.int]] = None,
                 gitignore_id: Optional[pulumi.Input[_builtins.str]] = None,
                 import_members: Optional[pulumi.Input[_builtins.int]] = None,
                 import_url: Optional[pulumi.Input[_builtins.str]] = None,
                 license_id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility_level: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a Repository resource.
        :param pulumi.Input[_builtins.str] project_id: The project ID for CodeArts service.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: The repository description.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] enable_readme: Whether to generate the `README.md` file.  
               The valid values are as follows:
               + **0**: Disable.
               + **1**: Enable.
               
               Defaults to `1`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] gitignore_id: The program language type for generating `.gitignore` files.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] import_members: Whether to import the project members.  
               The valid values are as follows:
               + **0**: Do not import members.
               + **1**: Import members.
               
               Defaults to `1`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] import_url: The HTTPS address of the template repository encrypted using Base64.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] license_id: The license ID for public repository. The valid values are as follows:
               + **1**: Apache License v2.0
               + **2**: MIT License
               + **3**: BSD 2-clause
               + **4**: BSD 3-clause
               + **5**: Eclipse Public License v1.0
               + **6**: GNU General Public License v2.0
               + **7**: GNU General Public License v3.0
               + **8**: GNU Afferent General Public License v3.0
               + **9**: GNU Lesser General Public License v2.1
               + **10**: GNU Lesser General Public License v3.0
               + **11**: Mozilla Public License v2.0
               + **12**: The Unlicense
               
               Defaults to `1`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The repository name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] visibility_level: The visibility level.  
               The valid values are as follows:
               + **0**: Private.
               + **20**: Public read-only.
               
               Defaults to `0`. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "project_id", project_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_readme is not None:
            pulumi.set(__self__, "enable_readme", enable_readme)
        if gitignore_id is not None:
            pulumi.set(__self__, "gitignore_id", gitignore_id)
        if import_members is not None:
            pulumi.set(__self__, "import_members", import_members)
        if import_url is not None:
            pulumi.set(__self__, "import_url", import_url)
        if license_id is not None:
            pulumi.set(__self__, "license_id", license_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if visibility_level is not None:
            pulumi.set(__self__, "visibility_level", visibility_level)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        The project ID for CodeArts service.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The repository description.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableReadme")
    def enable_readme(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Whether to generate the `README.md` file.  
        The valid values are as follows:
        + **0**: Disable.
        + **1**: Enable.

        Defaults to `1`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_readme")

    @enable_readme.setter
    def enable_readme(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "enable_readme", value)

    @_builtins.property
    @pulumi.getter(name="gitignoreId")
    def gitignore_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The program language type for generating `.gitignore` files.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "gitignore_id")

    @gitignore_id.setter
    def gitignore_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gitignore_id", value)

    @_builtins.property
    @pulumi.getter(name="importMembers")
    def import_members(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Whether to import the project members.  
        The valid values are as follows:
        + **0**: Do not import members.
        + **1**: Import members.

        Defaults to `1`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "import_members")

    @import_members.setter
    def import_members(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "import_members", value)

    @_builtins.property
    @pulumi.getter(name="importUrl")
    def import_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The HTTPS address of the template repository encrypted using Base64.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "import_url")

    @import_url.setter
    def import_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "import_url", value)

    @_builtins.property
    @pulumi.getter(name="licenseId")
    def license_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The license ID for public repository. The valid values are as follows:
        + **1**: Apache License v2.0
        + **2**: MIT License
        + **3**: BSD 2-clause
        + **4**: BSD 3-clause
        + **5**: Eclipse Public License v1.0
        + **6**: GNU General Public License v2.0
        + **7**: GNU General Public License v3.0
        + **8**: GNU Afferent General Public License v3.0
        + **9**: GNU Lesser General Public License v2.1
        + **10**: GNU Lesser General Public License v3.0
        + **11**: Mozilla Public License v2.0
        + **12**: The Unlicense

        Defaults to `1`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "license_id")

    @license_id.setter
    def license_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "license_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The repository name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="visibilityLevel")
    def visibility_level(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The visibility level.  
        The valid values are as follows:
        + **0**: Private.
        + **20**: Public read-only.

        Defaults to `0`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "visibility_level")

    @visibility_level.setter
    def visibility_level(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "visibility_level", value)


@pulumi.input_type
class _RepositoryState:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[_builtins.str]] = None,
                 create_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_readme: Optional[pulumi.Input[_builtins.int]] = None,
                 gitignore_id: Optional[pulumi.Input[_builtins.str]] = None,
                 https_url: Optional[pulumi.Input[_builtins.str]] = None,
                 import_members: Optional[pulumi.Input[_builtins.int]] = None,
                 import_url: Optional[pulumi.Input[_builtins.str]] = None,
                 lfs_size: Optional[pulumi.Input[_builtins.str]] = None,
                 license_id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 repository_id: Optional[pulumi.Input[_builtins.int]] = None,
                 ssh_url: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 update_at: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility_level: Optional[pulumi.Input[_builtins.int]] = None,
                 web_url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Repository resources.
        :param pulumi.Input[_builtins.str] capacity: The total size of the repository, in MB. If the capacity is greater than `1,024`M, the unit is GB.
        :param pulumi.Input[_builtins.str] create_at: The creation time.
        :param pulumi.Input[_builtins.str] description: The repository description.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] enable_readme: Whether to generate the `README.md` file.  
               The valid values are as follows:
               + **0**: Disable.
               + **1**: Enable.
               
               Defaults to `1`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] gitignore_id: The program language type for generating `.gitignore` files.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] https_url: The HTTPS URL that used to the fork repository.
        :param pulumi.Input[_builtins.int] import_members: Whether to import the project members.  
               The valid values are as follows:
               + **0**: Do not import members.
               + **1**: Import members.
               
               Defaults to `1`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] import_url: The HTTPS address of the template repository encrypted using Base64.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] lfs_size: The LFS capacity, in MB. If the capacity is greater than `1,024`M, the unit is GB.
        :param pulumi.Input[_builtins.int] license_id: The license ID for public repository. The valid values are as follows:
               + **1**: Apache License v2.0
               + **2**: MIT License
               + **3**: BSD 2-clause
               + **4**: BSD 3-clause
               + **5**: Eclipse Public License v1.0
               + **6**: GNU General Public License v2.0
               + **7**: GNU General Public License v3.0
               + **8**: GNU Afferent General Public License v3.0
               + **9**: GNU Lesser General Public License v2.1
               + **10**: GNU Lesser General Public License v3.0
               + **11**: Mozilla Public License v2.0
               + **12**: The Unlicense
               
               Defaults to `1`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The repository name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] project_id: The project ID for CodeArts service.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] repository_id: The repository primart key ID.
        :param pulumi.Input[_builtins.str] ssh_url: The SSH URL that used to the fork repository.
        :param pulumi.Input[_builtins.int] status: The repository status.  
               The valid values are as follows:
               + **0**: Normal.
               + **3**: Frozen.
               + **4**: Closed.
        :param pulumi.Input[_builtins.str] update_at: The last update time.
        :param pulumi.Input[_builtins.int] visibility_level: The visibility level.  
               The valid values are as follows:
               + **0**: Private.
               + **20**: Public read-only.
               
               Defaults to `0`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] web_url: The web URL, accessing this URL will redirect to the repository detail page.
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if create_at is not None:
            pulumi.set(__self__, "create_at", create_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_readme is not None:
            pulumi.set(__self__, "enable_readme", enable_readme)
        if gitignore_id is not None:
            pulumi.set(__self__, "gitignore_id", gitignore_id)
        if https_url is not None:
            pulumi.set(__self__, "https_url", https_url)
        if import_members is not None:
            pulumi.set(__self__, "import_members", import_members)
        if import_url is not None:
            pulumi.set(__self__, "import_url", import_url)
        if lfs_size is not None:
            pulumi.set(__self__, "lfs_size", lfs_size)
        if license_id is not None:
            pulumi.set(__self__, "license_id", license_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)
        if ssh_url is not None:
            pulumi.set(__self__, "ssh_url", ssh_url)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_at is not None:
            pulumi.set(__self__, "update_at", update_at)
        if visibility_level is not None:
            pulumi.set(__self__, "visibility_level", visibility_level)
        if web_url is not None:
            pulumi.set(__self__, "web_url", web_url)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The total size of the repository, in MB. If the capacity is greater than `1,024`M, the unit is GB.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter(name="createAt")
    def create_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time.
        """
        return pulumi.get(self, "create_at")

    @create_at.setter
    def create_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The repository description.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableReadme")
    def enable_readme(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Whether to generate the `README.md` file.  
        The valid values are as follows:
        + **0**: Disable.
        + **1**: Enable.

        Defaults to `1`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_readme")

    @enable_readme.setter
    def enable_readme(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "enable_readme", value)

    @_builtins.property
    @pulumi.getter(name="gitignoreId")
    def gitignore_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The program language type for generating `.gitignore` files.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "gitignore_id")

    @gitignore_id.setter
    def gitignore_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gitignore_id", value)

    @_builtins.property
    @pulumi.getter(name="httpsUrl")
    def https_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The HTTPS URL that used to the fork repository.
        """
        return pulumi.get(self, "https_url")

    @https_url.setter
    def https_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "https_url", value)

    @_builtins.property
    @pulumi.getter(name="importMembers")
    def import_members(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Whether to import the project members.  
        The valid values are as follows:
        + **0**: Do not import members.
        + **1**: Import members.

        Defaults to `1`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "import_members")

    @import_members.setter
    def import_members(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "import_members", value)

    @_builtins.property
    @pulumi.getter(name="importUrl")
    def import_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The HTTPS address of the template repository encrypted using Base64.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "import_url")

    @import_url.setter
    def import_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "import_url", value)

    @_builtins.property
    @pulumi.getter(name="lfsSize")
    def lfs_size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LFS capacity, in MB. If the capacity is greater than `1,024`M, the unit is GB.
        """
        return pulumi.get(self, "lfs_size")

    @lfs_size.setter
    def lfs_size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lfs_size", value)

    @_builtins.property
    @pulumi.getter(name="licenseId")
    def license_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The license ID for public repository. The valid values are as follows:
        + **1**: Apache License v2.0
        + **2**: MIT License
        + **3**: BSD 2-clause
        + **4**: BSD 3-clause
        + **5**: Eclipse Public License v1.0
        + **6**: GNU General Public License v2.0
        + **7**: GNU General Public License v3.0
        + **8**: GNU Afferent General Public License v3.0
        + **9**: GNU Lesser General Public License v2.1
        + **10**: GNU Lesser General Public License v3.0
        + **11**: Mozilla Public License v2.0
        + **12**: The Unlicense

        Defaults to `1`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "license_id")

    @license_id.setter
    def license_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "license_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The repository name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The project ID for CodeArts service.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The repository primart key ID.
        """
        return pulumi.get(self, "repository_id")

    @repository_id.setter
    def repository_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "repository_id", value)

    @_builtins.property
    @pulumi.getter(name="sshUrl")
    def ssh_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The SSH URL that used to the fork repository.
        """
        return pulumi.get(self, "ssh_url")

    @ssh_url.setter
    def ssh_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh_url", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The repository status.  
        The valid values are as follows:
        + **0**: Normal.
        + **3**: Frozen.
        + **4**: Closed.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updateAt")
    def update_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The last update time.
        """
        return pulumi.get(self, "update_at")

    @update_at.setter
    def update_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_at", value)

    @_builtins.property
    @pulumi.getter(name="visibilityLevel")
    def visibility_level(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The visibility level.  
        The valid values are as follows:
        + **0**: Private.
        + **20**: Public read-only.

        Defaults to `0`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "visibility_level")

    @visibility_level.setter
    def visibility_level(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "visibility_level", value)

    @_builtins.property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The web URL, accessing this URL will redirect to the repository detail page.
        """
        return pulumi.get(self, "web_url")

    @web_url.setter
    def web_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "web_url", value)


@pulumi.type_token("huaweicloud:codearts/repository:Repository")
class Repository(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_readme: Optional[pulumi.Input[_builtins.int]] = None,
                 gitignore_id: Optional[pulumi.Input[_builtins.str]] = None,
                 import_members: Optional[pulumi.Input[_builtins.int]] = None,
                 import_url: Optional[pulumi.Input[_builtins.str]] = None,
                 license_id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility_level: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages a CodeArts repository resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        repository_name = config.require_object("repositoryName")
        repository_description = config.require_object("repositoryDescription")
        test = huaweicloud.codearts.Repository("test",
            project_id=project_id,
            name=repository_name,
            description=repository_description,
            gitignore_id="Go",
            enable_readme=0,
            visibility_level=20,
            license_id=2,
            import_members=0)
        ```

        ## Import

        The repository can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/repository:Repository test 0ce123456a00f2591fabc00385ff1234
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `name`, `description`, `gitignore_id`, `enable_readme`, `license_id` and

        `import_members`. It is generally recommended running `pulumi preview` after importing the repository.

        You can then decide if changes should be applied to the repository, or the resource definition should be updated to

        align with the repository. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_codearts_repository" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              name, license_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: The repository description.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] enable_readme: Whether to generate the `README.md` file.  
               The valid values are as follows:
               + **0**: Disable.
               + **1**: Enable.
               
               Defaults to `1`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] gitignore_id: The program language type for generating `.gitignore` files.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] import_members: Whether to import the project members.  
               The valid values are as follows:
               + **0**: Do not import members.
               + **1**: Import members.
               
               Defaults to `1`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] import_url: The HTTPS address of the template repository encrypted using Base64.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] license_id: The license ID for public repository. The valid values are as follows:
               + **1**: Apache License v2.0
               + **2**: MIT License
               + **3**: BSD 2-clause
               + **4**: BSD 3-clause
               + **5**: Eclipse Public License v1.0
               + **6**: GNU General Public License v2.0
               + **7**: GNU General Public License v3.0
               + **8**: GNU Afferent General Public License v3.0
               + **9**: GNU Lesser General Public License v2.1
               + **10**: GNU Lesser General Public License v3.0
               + **11**: Mozilla Public License v2.0
               + **12**: The Unlicense
               
               Defaults to `1`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The repository name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] project_id: The project ID for CodeArts service.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] visibility_level: The visibility level.  
               The valid values are as follows:
               + **0**: Private.
               + **20**: Public read-only.
               
               Defaults to `0`. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RepositoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts repository resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        repository_name = config.require_object("repositoryName")
        repository_description = config.require_object("repositoryDescription")
        test = huaweicloud.codearts.Repository("test",
            project_id=project_id,
            name=repository_name,
            description=repository_description,
            gitignore_id="Go",
            enable_readme=0,
            visibility_level=20,
            license_id=2,
            import_members=0)
        ```

        ## Import

        The repository can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/repository:Repository test 0ce123456a00f2591fabc00385ff1234
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `name`, `description`, `gitignore_id`, `enable_readme`, `license_id` and

        `import_members`. It is generally recommended running `pulumi preview` after importing the repository.

        You can then decide if changes should be applied to the repository, or the resource definition should be updated to

        align with the repository. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_codearts_repository" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              name, license_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param RepositoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RepositoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_readme: Optional[pulumi.Input[_builtins.int]] = None,
                 gitignore_id: Optional[pulumi.Input[_builtins.str]] = None,
                 import_members: Optional[pulumi.Input[_builtins.int]] = None,
                 import_url: Optional[pulumi.Input[_builtins.str]] = None,
                 license_id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility_level: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RepositoryArgs.__new__(RepositoryArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enable_readme"] = enable_readme
            __props__.__dict__["gitignore_id"] = gitignore_id
            __props__.__dict__["import_members"] = import_members
            __props__.__dict__["import_url"] = import_url
            __props__.__dict__["license_id"] = license_id
            __props__.__dict__["name"] = name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["region"] = region
            __props__.__dict__["visibility_level"] = visibility_level
            __props__.__dict__["capacity"] = None
            __props__.__dict__["create_at"] = None
            __props__.__dict__["https_url"] = None
            __props__.__dict__["lfs_size"] = None
            __props__.__dict__["repository_id"] = None
            __props__.__dict__["ssh_url"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["update_at"] = None
            __props__.__dict__["web_url"] = None
        super(Repository, __self__).__init__(
            'huaweicloud:codearts/repository:Repository',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capacity: Optional[pulumi.Input[_builtins.str]] = None,
            create_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_readme: Optional[pulumi.Input[_builtins.int]] = None,
            gitignore_id: Optional[pulumi.Input[_builtins.str]] = None,
            https_url: Optional[pulumi.Input[_builtins.str]] = None,
            import_members: Optional[pulumi.Input[_builtins.int]] = None,
            import_url: Optional[pulumi.Input[_builtins.str]] = None,
            lfs_size: Optional[pulumi.Input[_builtins.str]] = None,
            license_id: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            repository_id: Optional[pulumi.Input[_builtins.int]] = None,
            ssh_url: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.int]] = None,
            update_at: Optional[pulumi.Input[_builtins.str]] = None,
            visibility_level: Optional[pulumi.Input[_builtins.int]] = None,
            web_url: Optional[pulumi.Input[_builtins.str]] = None) -> 'Repository':
        """
        Get an existing Repository resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] capacity: The total size of the repository, in MB. If the capacity is greater than `1,024`M, the unit is GB.
        :param pulumi.Input[_builtins.str] create_at: The creation time.
        :param pulumi.Input[_builtins.str] description: The repository description.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] enable_readme: Whether to generate the `README.md` file.  
               The valid values are as follows:
               + **0**: Disable.
               + **1**: Enable.
               
               Defaults to `1`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] gitignore_id: The program language type for generating `.gitignore` files.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] https_url: The HTTPS URL that used to the fork repository.
        :param pulumi.Input[_builtins.int] import_members: Whether to import the project members.  
               The valid values are as follows:
               + **0**: Do not import members.
               + **1**: Import members.
               
               Defaults to `1`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] import_url: The HTTPS address of the template repository encrypted using Base64.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] lfs_size: The LFS capacity, in MB. If the capacity is greater than `1,024`M, the unit is GB.
        :param pulumi.Input[_builtins.int] license_id: The license ID for public repository. The valid values are as follows:
               + **1**: Apache License v2.0
               + **2**: MIT License
               + **3**: BSD 2-clause
               + **4**: BSD 3-clause
               + **5**: Eclipse Public License v1.0
               + **6**: GNU General Public License v2.0
               + **7**: GNU General Public License v3.0
               + **8**: GNU Afferent General Public License v3.0
               + **9**: GNU Lesser General Public License v2.1
               + **10**: GNU Lesser General Public License v3.0
               + **11**: Mozilla Public License v2.0
               + **12**: The Unlicense
               
               Defaults to `1`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: The repository name.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] project_id: The project ID for CodeArts service.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] repository_id: The repository primart key ID.
        :param pulumi.Input[_builtins.str] ssh_url: The SSH URL that used to the fork repository.
        :param pulumi.Input[_builtins.int] status: The repository status.  
               The valid values are as follows:
               + **0**: Normal.
               + **3**: Frozen.
               + **4**: Closed.
        :param pulumi.Input[_builtins.str] update_at: The last update time.
        :param pulumi.Input[_builtins.int] visibility_level: The visibility level.  
               The valid values are as follows:
               + **0**: Private.
               + **20**: Public read-only.
               
               Defaults to `0`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] web_url: The web URL, accessing this URL will redirect to the repository detail page.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RepositoryState.__new__(_RepositoryState)

        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["create_at"] = create_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_readme"] = enable_readme
        __props__.__dict__["gitignore_id"] = gitignore_id
        __props__.__dict__["https_url"] = https_url
        __props__.__dict__["import_members"] = import_members
        __props__.__dict__["import_url"] = import_url
        __props__.__dict__["lfs_size"] = lfs_size
        __props__.__dict__["license_id"] = license_id
        __props__.__dict__["name"] = name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["repository_id"] = repository_id
        __props__.__dict__["ssh_url"] = ssh_url
        __props__.__dict__["status"] = status
        __props__.__dict__["update_at"] = update_at
        __props__.__dict__["visibility_level"] = visibility_level
        __props__.__dict__["web_url"] = web_url
        return Repository(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[_builtins.str]:
        """
        The total size of the repository, in MB. If the capacity is greater than `1,024`M, the unit is GB.
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter(name="createAt")
    def create_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time.
        """
        return pulumi.get(self, "create_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        The repository description.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableReadme")
    def enable_readme(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Whether to generate the `README.md` file.  
        The valid values are as follows:
        + **0**: Disable.
        + **1**: Enable.

        Defaults to `1`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enable_readme")

    @_builtins.property
    @pulumi.getter(name="gitignoreId")
    def gitignore_id(self) -> pulumi.Output[_builtins.str]:
        """
        The program language type for generating `.gitignore` files.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "gitignore_id")

    @_builtins.property
    @pulumi.getter(name="httpsUrl")
    def https_url(self) -> pulumi.Output[_builtins.str]:
        """
        The HTTPS URL that used to the fork repository.
        """
        return pulumi.get(self, "https_url")

    @_builtins.property
    @pulumi.getter(name="importMembers")
    def import_members(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Whether to import the project members.  
        The valid values are as follows:
        + **0**: Do not import members.
        + **1**: Import members.

        Defaults to `1`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "import_members")

    @_builtins.property
    @pulumi.getter(name="importUrl")
    def import_url(self) -> pulumi.Output[_builtins.str]:
        """
        The HTTPS address of the template repository encrypted using Base64.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "import_url")

    @_builtins.property
    @pulumi.getter(name="lfsSize")
    def lfs_size(self) -> pulumi.Output[_builtins.str]:
        """
        The LFS capacity, in MB. If the capacity is greater than `1,024`M, the unit is GB.
        """
        return pulumi.get(self, "lfs_size")

    @_builtins.property
    @pulumi.getter(name="licenseId")
    def license_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The license ID for public repository. The valid values are as follows:
        + **1**: Apache License v2.0
        + **2**: MIT License
        + **3**: BSD 2-clause
        + **4**: BSD 3-clause
        + **5**: Eclipse Public License v1.0
        + **6**: GNU General Public License v2.0
        + **7**: GNU General Public License v3.0
        + **8**: GNU Afferent General Public License v3.0
        + **9**: GNU Lesser General Public License v2.1
        + **10**: GNU Lesser General Public License v3.0
        + **11**: Mozilla Public License v2.0
        + **12**: The Unlicense

        Defaults to `1`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "license_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The repository name.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The project ID for CodeArts service.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> pulumi.Output[_builtins.int]:
        """
        The repository primart key ID.
        """
        return pulumi.get(self, "repository_id")

    @_builtins.property
    @pulumi.getter(name="sshUrl")
    def ssh_url(self) -> pulumi.Output[_builtins.str]:
        """
        The SSH URL that used to the fork repository.
        """
        return pulumi.get(self, "ssh_url")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.int]:
        """
        The repository status.  
        The valid values are as follows:
        + **0**: Normal.
        + **3**: Frozen.
        + **4**: Closed.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updateAt")
    def update_at(self) -> pulumi.Output[_builtins.str]:
        """
        The last update time.
        """
        return pulumi.get(self, "update_at")

    @_builtins.property
    @pulumi.getter(name="visibilityLevel")
    def visibility_level(self) -> pulumi.Output[_builtins.int]:
        """
        The visibility level.  
        The valid values are as follows:
        + **0**: Private.
        + **20**: Public read-only.

        Defaults to `0`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "visibility_level")

    @_builtins.property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> pulumi.Output[_builtins.str]:
        """
        The web URL, accessing this URL will redirect to the repository detail page.
        """
        return pulumi.get(self, "web_url")

